
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00026788  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  00038788  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00005754  20000300  00038a90  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005a54  0003e1e4  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   0011a2a6  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00010722  00000000  00000000  0014a627  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00011dd7  00000000  00000000  0015ad49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000031a8  00000000  00000000  0016cb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00002de8  00000000  00000000  0016fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003fd8c  00000000  00000000  00172ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005985f  00000000  00000000  001b283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000bc529  00000000  00000000  0020c09b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000b940  00000000  00000000  002c85c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	58 7a 00 20 5d 98 02 00 55 99 02 00 55 99 02 00     Xz. ]...U...U...
	...
   1202c:	8d 89 01 00 00 00 00 00 00 00 00 00 b1 8a 01 00     ................
   1203c:	f9 8a 01 00 55 99 02 00 55 99 02 00 55 99 02 00     ....U...U...U...
   1204c:	ad 59 02 00 d9 4e 02 00 55 99 02 00 71 26 01 00     .Y...N..U...q&..
   1205c:	55 99 02 00 b5 27 01 00 51 60 02 00 69 60 02 00     U....'..Q`..i`..
   1206c:	81 60 02 00 99 60 02 00 b1 60 02 00 c9 60 02 00     .`...`...`...`..
   1207c:	a5 97 02 00 b9 97 02 00 cd 97 02 00 79 66 01 00     ............yf..
   1208c:	8d 66 01 00 a1 66 01 00 00 00 00 00 00 00 00 00     .f...f..........
   1209c:	f9 24 01 00 55 99 02 00 35 26 01 00 55 99 02 00     .$..U...5&..U...
   120ac:	55 99 02 00 00 00 00 00                             U.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	00038788 	.word	0x00038788

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	00038788 	.word	0x00038788
   1210c:	00038788 	.word	0x00038788
   12110:	00000000 	.word	0x00000000

00012114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12114:	b580      	push	{r7, lr}
   12116:	b084      	sub	sp, #16
   12118:	af00      	add	r7, sp, #0
   1211a:	0002      	movs	r2, r0
   1211c:	1dfb      	adds	r3, r7, #7
   1211e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   12120:	230f      	movs	r3, #15
   12122:	18fb      	adds	r3, r7, r3
   12124:	1dfa      	adds	r2, r7, #7
   12126:	7812      	ldrb	r2, [r2, #0]
   12128:	09d2      	lsrs	r2, r2, #7
   1212a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1212c:	230e      	movs	r3, #14
   1212e:	18fb      	adds	r3, r7, r3
   12130:	1dfa      	adds	r2, r7, #7
   12132:	7812      	ldrb	r2, [r2, #0]
   12134:	0952      	lsrs	r2, r2, #5
   12136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   12138:	4b0d      	ldr	r3, [pc, #52]	; (12170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1213a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   1213c:	230f      	movs	r3, #15
   1213e:	18fb      	adds	r3, r7, r3
   12140:	781b      	ldrb	r3, [r3, #0]
   12142:	2b00      	cmp	r3, #0
   12144:	d10f      	bne.n	12166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   12146:	230f      	movs	r3, #15
   12148:	18fb      	adds	r3, r7, r3
   1214a:	781b      	ldrb	r3, [r3, #0]
   1214c:	009b      	lsls	r3, r3, #2
   1214e:	2210      	movs	r2, #16
   12150:	4694      	mov	ip, r2
   12152:	44bc      	add	ip, r7
   12154:	4463      	add	r3, ip
   12156:	3b08      	subs	r3, #8
   12158:	681a      	ldr	r2, [r3, #0]
   1215a:	230e      	movs	r3, #14
   1215c:	18fb      	adds	r3, r7, r3
   1215e:	781b      	ldrb	r3, [r3, #0]
   12160:	01db      	lsls	r3, r3, #7
   12162:	18d3      	adds	r3, r2, r3
   12164:	e000      	b.n	12168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   12166:	2300      	movs	r3, #0
	}
}
   12168:	0018      	movs	r0, r3
   1216a:	46bd      	mov	sp, r7
   1216c:	b004      	add	sp, #16
   1216e:	bd80      	pop	{r7, pc}
   12170:	41004400 	.word	0x41004400

00012174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   12174:	b580      	push	{r7, lr}
   12176:	b082      	sub	sp, #8
   12178:	af00      	add	r7, sp, #0
   1217a:	0002      	movs	r2, r0
   1217c:	1dfb      	adds	r3, r7, #7
   1217e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   12180:	1dfb      	adds	r3, r7, #7
   12182:	781b      	ldrb	r3, [r3, #0]
   12184:	0018      	movs	r0, r3
   12186:	4b03      	ldr	r3, [pc, #12]	; (12194 <port_get_group_from_gpio_pin+0x20>)
   12188:	4798      	blx	r3
   1218a:	0003      	movs	r3, r0
}
   1218c:	0018      	movs	r0, r3
   1218e:	46bd      	mov	sp, r7
   12190:	b002      	add	sp, #8
   12192:	bd80      	pop	{r7, pc}
   12194:	00012115 	.word	0x00012115

00012198 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
   12198:	b580      	push	{r7, lr}
   1219a:	b082      	sub	sp, #8
   1219c:	af00      	add	r7, sp, #0
   1219e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
   121a0:	687b      	ldr	r3, [r7, #4]
   121a2:	2200      	movs	r2, #0
   121a4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   121a6:	687b      	ldr	r3, [r7, #4]
   121a8:	2201      	movs	r2, #1
   121aa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   121ac:	687b      	ldr	r3, [r7, #4]
   121ae:	2200      	movs	r2, #0
   121b0:	709a      	strb	r2, [r3, #2]
}
   121b2:	46c0      	nop			; (mov r8, r8)
   121b4:	46bd      	mov	sp, r7
   121b6:	b002      	add	sp, #8
   121b8:	bd80      	pop	{r7, pc}
	...

000121bc <port_pin_get_output_level>:
 *
 *  \return Status of the port pin's output buffer.
 */
static inline bool port_pin_get_output_level(
		const uint8_t gpio_pin)
{
   121bc:	b580      	push	{r7, lr}
   121be:	b084      	sub	sp, #16
   121c0:	af00      	add	r7, sp, #0
   121c2:	0002      	movs	r2, r0
   121c4:	1dfb      	adds	r3, r7, #7
   121c6:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   121c8:	1dfb      	adds	r3, r7, #7
   121ca:	781b      	ldrb	r3, [r3, #0]
   121cc:	0018      	movs	r0, r3
   121ce:	4b0b      	ldr	r3, [pc, #44]	; (121fc <port_pin_get_output_level+0x40>)
   121d0:	4798      	blx	r3
   121d2:	0003      	movs	r3, r0
   121d4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   121d6:	1dfb      	adds	r3, r7, #7
   121d8:	781b      	ldrb	r3, [r3, #0]
   121da:	221f      	movs	r2, #31
   121dc:	4013      	ands	r3, r2
   121de:	2201      	movs	r2, #1
   121e0:	409a      	lsls	r2, r3
   121e2:	0013      	movs	r3, r2
   121e4:	60bb      	str	r3, [r7, #8]

	return (port_base->OUT.reg & pin_mask);
   121e6:	68fb      	ldr	r3, [r7, #12]
   121e8:	691b      	ldr	r3, [r3, #16]
   121ea:	68ba      	ldr	r2, [r7, #8]
   121ec:	4013      	ands	r3, r2
   121ee:	1e5a      	subs	r2, r3, #1
   121f0:	4193      	sbcs	r3, r2
   121f2:	b2db      	uxtb	r3, r3
}
   121f4:	0018      	movs	r0, r3
   121f6:	46bd      	mov	sp, r7
   121f8:	b004      	add	sp, #16
   121fa:	bd80      	pop	{r7, pc}
   121fc:	00012175 	.word	0x00012175

00012200 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   12200:	b580      	push	{r7, lr}
   12202:	b084      	sub	sp, #16
   12204:	af00      	add	r7, sp, #0
   12206:	0002      	movs	r2, r0
   12208:	1dfb      	adds	r3, r7, #7
   1220a:	701a      	strb	r2, [r3, #0]
   1220c:	1dbb      	adds	r3, r7, #6
   1220e:	1c0a      	adds	r2, r1, #0
   12210:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   12212:	1dfb      	adds	r3, r7, #7
   12214:	781b      	ldrb	r3, [r3, #0]
   12216:	0018      	movs	r0, r3
   12218:	4b0d      	ldr	r3, [pc, #52]	; (12250 <port_pin_set_output_level+0x50>)
   1221a:	4798      	blx	r3
   1221c:	0003      	movs	r3, r0
   1221e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   12220:	1dfb      	adds	r3, r7, #7
   12222:	781b      	ldrb	r3, [r3, #0]
   12224:	221f      	movs	r2, #31
   12226:	4013      	ands	r3, r2
   12228:	2201      	movs	r2, #1
   1222a:	409a      	lsls	r2, r3
   1222c:	0013      	movs	r3, r2
   1222e:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   12230:	1dbb      	adds	r3, r7, #6
   12232:	781b      	ldrb	r3, [r3, #0]
   12234:	2b00      	cmp	r3, #0
   12236:	d003      	beq.n	12240 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   12238:	68fb      	ldr	r3, [r7, #12]
   1223a:	68ba      	ldr	r2, [r7, #8]
   1223c:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   1223e:	e002      	b.n	12246 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   12240:	68fb      	ldr	r3, [r7, #12]
   12242:	68ba      	ldr	r2, [r7, #8]
   12244:	615a      	str	r2, [r3, #20]
}
   12246:	46c0      	nop			; (mov r8, r8)
   12248:	46bd      	mov	sp, r7
   1224a:	b004      	add	sp, #16
   1224c:	bd80      	pop	{r7, pc}
   1224e:	46c0      	nop			; (mov r8, r8)
   12250:	00012175 	.word	0x00012175

00012254 <led_init>:
 *  Author: gopik
 */ 
#include "led.h"

void led_init()
{
   12254:	b580      	push	{r7, lr}
   12256:	b082      	sub	sp, #8
   12258:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   1225a:	1d3b      	adds	r3, r7, #4
   1225c:	0018      	movs	r0, r3
   1225e:	4b0d      	ldr	r3, [pc, #52]	; (12294 <led_init+0x40>)
   12260:	4798      	blx	r3
	
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
   12262:	1d3b      	adds	r3, r7, #4
   12264:	2201      	movs	r2, #1
   12266:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(STREETLIGHT_PIN, &config_port_pin);
   12268:	1d3b      	adds	r3, r7, #4
   1226a:	0019      	movs	r1, r3
   1226c:	200a      	movs	r0, #10
   1226e:	4b0a      	ldr	r3, [pc, #40]	; (12298 <led_init+0x44>)
   12270:	4798      	blx	r3
	
	port_get_config_defaults(&config_port_pin);
   12272:	1d3b      	adds	r3, r7, #4
   12274:	0018      	movs	r0, r3
   12276:	4b07      	ldr	r3, [pc, #28]	; (12294 <led_init+0x40>)
   12278:	4798      	blx	r3
	config_port_pin.direction  = PORT_PIN_DIR_OUTPUT;
   1227a:	1d3b      	adds	r3, r7, #4
   1227c:	2201      	movs	r2, #1
   1227e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(REPAIRLIGHT_PIN, &config_port_pin);
   12280:	1d3b      	adds	r3, r7, #4
   12282:	0019      	movs	r1, r3
   12284:	200b      	movs	r0, #11
   12286:	4b04      	ldr	r3, [pc, #16]	; (12298 <led_init+0x44>)
   12288:	4798      	blx	r3
}
   1228a:	46c0      	nop			; (mov r8, r8)
   1228c:	46bd      	mov	sp, r7
   1228e:	b002      	add	sp, #8
   12290:	bd80      	pop	{r7, pc}
   12292:	46c0      	nop			; (mov r8, r8)
   12294:	00012199 	.word	0x00012199
   12298:	0002533d 	.word	0x0002533d

0001229c <streetLightStateChange>:

void streetLightStateChange(bool val)
{
   1229c:	b580      	push	{r7, lr}
   1229e:	b082      	sub	sp, #8
   122a0:	af00      	add	r7, sp, #0
   122a2:	0002      	movs	r2, r0
   122a4:	1dfb      	adds	r3, r7, #7
   122a6:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_output_level(REPAIRLIGHT_PIN) == false)
   122a8:	200b      	movs	r0, #11
   122aa:	4b0f      	ldr	r3, [pc, #60]	; (122e8 <streetLightStateChange+0x4c>)
   122ac:	4798      	blx	r3
   122ae:	0003      	movs	r3, r0
   122b0:	001a      	movs	r2, r3
   122b2:	2301      	movs	r3, #1
   122b4:	4053      	eors	r3, r2
   122b6:	b2db      	uxtb	r3, r3
   122b8:	2b00      	cmp	r3, #0
   122ba:	d00d      	beq.n	122d8 <streetLightStateChange+0x3c>
	{
		if (val)
   122bc:	1dfb      	adds	r3, r7, #7
   122be:	781b      	ldrb	r3, [r3, #0]
   122c0:	2b00      	cmp	r3, #0
   122c2:	d004      	beq.n	122ce <streetLightStateChange+0x32>
		{
			port_pin_set_output_level(STREETLIGHT_PIN, true);
   122c4:	2101      	movs	r1, #1
   122c6:	200a      	movs	r0, #10
   122c8:	4b08      	ldr	r3, [pc, #32]	; (122ec <streetLightStateChange+0x50>)
   122ca:	4798      	blx	r3
	}
	else
	{
		port_pin_set_output_level(STREETLIGHT_PIN, false);
	}
}
   122cc:	e008      	b.n	122e0 <streetLightStateChange+0x44>
			port_pin_set_output_level(STREETLIGHT_PIN, false);
   122ce:	2100      	movs	r1, #0
   122d0:	200a      	movs	r0, #10
   122d2:	4b06      	ldr	r3, [pc, #24]	; (122ec <streetLightStateChange+0x50>)
   122d4:	4798      	blx	r3
}
   122d6:	e003      	b.n	122e0 <streetLightStateChange+0x44>
		port_pin_set_output_level(STREETLIGHT_PIN, false);
   122d8:	2100      	movs	r1, #0
   122da:	200a      	movs	r0, #10
   122dc:	4b03      	ldr	r3, [pc, #12]	; (122ec <streetLightStateChange+0x50>)
   122de:	4798      	blx	r3
}
   122e0:	46c0      	nop			; (mov r8, r8)
   122e2:	46bd      	mov	sp, r7
   122e4:	b002      	add	sp, #8
   122e6:	bd80      	pop	{r7, pc}
   122e8:	000121bd 	.word	0x000121bd
   122ec:	00012201 	.word	0x00012201

000122f0 <repairLightStateChange>:

void repairLightStateChange(bool val)
{
   122f0:	b580      	push	{r7, lr}
   122f2:	b082      	sub	sp, #8
   122f4:	af00      	add	r7, sp, #0
   122f6:	0002      	movs	r2, r0
   122f8:	1dfb      	adds	r3, r7, #7
   122fa:	701a      	strb	r2, [r3, #0]
	if (val)
   122fc:	1dfb      	adds	r3, r7, #7
   122fe:	781b      	ldrb	r3, [r3, #0]
   12300:	2b00      	cmp	r3, #0
   12302:	d004      	beq.n	1230e <repairLightStateChange+0x1e>
	{
		port_pin_set_output_level(REPAIRLIGHT_PIN, true);
   12304:	2101      	movs	r1, #1
   12306:	200b      	movs	r0, #11
   12308:	4b05      	ldr	r3, [pc, #20]	; (12320 <repairLightStateChange+0x30>)
   1230a:	4798      	blx	r3
	}
	else
	{
		port_pin_set_output_level(REPAIRLIGHT_PIN, false);
	}
   1230c:	e003      	b.n	12316 <repairLightStateChange+0x26>
		port_pin_set_output_level(REPAIRLIGHT_PIN, false);
   1230e:	2100      	movs	r1, #0
   12310:	200b      	movs	r0, #11
   12312:	4b03      	ldr	r3, [pc, #12]	; (12320 <repairLightStateChange+0x30>)
   12314:	4798      	blx	r3
   12316:	46c0      	nop			; (mov r8, r8)
   12318:	46bd      	mov	sp, r7
   1231a:	b002      	add	sp, #8
   1231c:	bd80      	pop	{r7, pc}
   1231e:	46c0      	nop			; (mov r8, r8)
   12320:	00012201 	.word	0x00012201

00012324 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   12324:	b580      	push	{r7, lr}
   12326:	b084      	sub	sp, #16
   12328:	af00      	add	r7, sp, #0
   1232a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1232c:	687b      	ldr	r3, [r7, #4]
   1232e:	681b      	ldr	r3, [r3, #0]
   12330:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   12332:	68fb      	ldr	r3, [r7, #12]
   12334:	7e5b      	ldrb	r3, [r3, #25]
   12336:	b2db      	uxtb	r3, r3
   12338:	b25b      	sxtb	r3, r3
   1233a:	2b00      	cmp	r3, #0
   1233c:	da01      	bge.n	12342 <adc_is_syncing+0x1e>
		return true;
   1233e:	2301      	movs	r3, #1
   12340:	e000      	b.n	12344 <adc_is_syncing+0x20>
	}

	return false;
   12342:	2300      	movs	r3, #0
}
   12344:	0018      	movs	r0, r3
   12346:	46bd      	mov	sp, r7
   12348:	b004      	add	sp, #16
   1234a:	bd80      	pop	{r7, pc}

0001234c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1234c:	b580      	push	{r7, lr}
   1234e:	b084      	sub	sp, #16
   12350:	af00      	add	r7, sp, #0
   12352:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   12354:	687b      	ldr	r3, [r7, #4]
   12356:	681b      	ldr	r3, [r3, #0]
   12358:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1235a:	46c0      	nop			; (mov r8, r8)
   1235c:	687b      	ldr	r3, [r7, #4]
   1235e:	0018      	movs	r0, r3
   12360:	4b0b      	ldr	r3, [pc, #44]	; (12390 <adc_start_conversion+0x44>)
   12362:	4798      	blx	r3
   12364:	1e03      	subs	r3, r0, #0
   12366:	d1f9      	bne.n	1235c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   12368:	68fb      	ldr	r3, [r7, #12]
   1236a:	7b1b      	ldrb	r3, [r3, #12]
   1236c:	b2db      	uxtb	r3, r3
   1236e:	2202      	movs	r2, #2
   12370:	4313      	orrs	r3, r2
   12372:	b2da      	uxtb	r2, r3
   12374:	68fb      	ldr	r3, [r7, #12]
   12376:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   12378:	46c0      	nop			; (mov r8, r8)
   1237a:	687b      	ldr	r3, [r7, #4]
   1237c:	0018      	movs	r0, r3
   1237e:	4b04      	ldr	r3, [pc, #16]	; (12390 <adc_start_conversion+0x44>)
   12380:	4798      	blx	r3
   12382:	1e03      	subs	r3, r0, #0
   12384:	d1f9      	bne.n	1237a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   12386:	46c0      	nop			; (mov r8, r8)
   12388:	46bd      	mov	sp, r7
   1238a:	b004      	add	sp, #16
   1238c:	bd80      	pop	{r7, pc}
   1238e:	46c0      	nop			; (mov r8, r8)
   12390:	00012325 	.word	0x00012325

00012394 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   12394:	b580      	push	{r7, lr}
   12396:	b084      	sub	sp, #16
   12398:	af00      	add	r7, sp, #0
   1239a:	6078      	str	r0, [r7, #4]
   1239c:	000a      	movs	r2, r1
   1239e:	1cfb      	adds	r3, r7, #3
   123a0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   123a2:	687b      	ldr	r3, [r7, #4]
   123a4:	681b      	ldr	r3, [r3, #0]
   123a6:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   123a8:	68fb      	ldr	r3, [r7, #12]
   123aa:	1cfa      	adds	r2, r7, #3
   123ac:	7812      	ldrb	r2, [r2, #0]
   123ae:	759a      	strb	r2, [r3, #22]
}
   123b0:	46c0      	nop			; (mov r8, r8)
   123b2:	46bd      	mov	sp, r7
   123b4:	b004      	add	sp, #16
   123b6:	bd80      	pop	{r7, pc}

000123b8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   123b8:	b580      	push	{r7, lr}
   123ba:	b084      	sub	sp, #16
   123bc:	af00      	add	r7, sp, #0
   123be:	0002      	movs	r2, r0
   123c0:	1dfb      	adds	r3, r7, #7
   123c2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   123c4:	1dfb      	adds	r3, r7, #7
   123c6:	781a      	ldrb	r2, [r3, #0]
   123c8:	4b47      	ldr	r3, [pc, #284]	; (124e8 <_adc_interrupt_handler+0x130>)
   123ca:	0092      	lsls	r2, r2, #2
   123cc:	58d3      	ldr	r3, [r2, r3]
   123ce:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   123d0:	68fb      	ldr	r3, [r7, #12]
   123d2:	681b      	ldr	r3, [r3, #0]
   123d4:	7e1b      	ldrb	r3, [r3, #24]
   123d6:	b2da      	uxtb	r2, r3
   123d8:	68fb      	ldr	r3, [r7, #12]
   123da:	681b      	ldr	r3, [r3, #0]
   123dc:	7ddb      	ldrb	r3, [r3, #23]
   123de:	b2db      	uxtb	r3, r3
   123e0:	4013      	ands	r3, r2
   123e2:	b2db      	uxtb	r3, r3
   123e4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   123e6:	68bb      	ldr	r3, [r7, #8]
   123e8:	2201      	movs	r2, #1
   123ea:	4013      	ands	r3, r2
   123ec:	d045      	beq.n	1247a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   123ee:	68fb      	ldr	r3, [r7, #12]
   123f0:	681b      	ldr	r3, [r3, #0]
   123f2:	2201      	movs	r2, #1
   123f4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   123f6:	46c0      	nop			; (mov r8, r8)
   123f8:	68fb      	ldr	r3, [r7, #12]
   123fa:	0018      	movs	r0, r3
   123fc:	4b3b      	ldr	r3, [pc, #236]	; (124ec <_adc_interrupt_handler+0x134>)
   123fe:	4798      	blx	r3
   12400:	1e03      	subs	r3, r0, #0
   12402:	d1f9      	bne.n	123f8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   12404:	68fb      	ldr	r3, [r7, #12]
   12406:	695b      	ldr	r3, [r3, #20]
   12408:	1c99      	adds	r1, r3, #2
   1240a:	68fa      	ldr	r2, [r7, #12]
   1240c:	6151      	str	r1, [r2, #20]
   1240e:	68fa      	ldr	r2, [r7, #12]
   12410:	6812      	ldr	r2, [r2, #0]
   12412:	8b52      	ldrh	r2, [r2, #26]
   12414:	b292      	uxth	r2, r2
   12416:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   12418:	68fb      	ldr	r3, [r7, #12]
   1241a:	8b1b      	ldrh	r3, [r3, #24]
   1241c:	b29b      	uxth	r3, r3
   1241e:	3b01      	subs	r3, #1
   12420:	b29b      	uxth	r3, r3
   12422:	68fa      	ldr	r2, [r7, #12]
   12424:	1c19      	adds	r1, r3, #0
   12426:	8311      	strh	r1, [r2, #24]
   12428:	2b00      	cmp	r3, #0
   1242a:	d008      	beq.n	1243e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1242c:	68fb      	ldr	r3, [r7, #12]
   1242e:	7f5b      	ldrb	r3, [r3, #29]
   12430:	2b00      	cmp	r3, #0
   12432:	d022      	beq.n	1247a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   12434:	68fb      	ldr	r3, [r7, #12]
   12436:	0018      	movs	r0, r3
   12438:	4b2d      	ldr	r3, [pc, #180]	; (124f0 <_adc_interrupt_handler+0x138>)
   1243a:	4798      	blx	r3
   1243c:	e01d      	b.n	1247a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1243e:	68fb      	ldr	r3, [r7, #12]
   12440:	2101      	movs	r1, #1
   12442:	0018      	movs	r0, r3
   12444:	4b2b      	ldr	r3, [pc, #172]	; (124f4 <_adc_interrupt_handler+0x13c>)
   12446:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   12448:	68fb      	ldr	r3, [r7, #12]
   1244a:	7f1b      	ldrb	r3, [r3, #28]
   1244c:	b2db      	uxtb	r3, r3
   1244e:	2b05      	cmp	r3, #5
   12450:	d113      	bne.n	1247a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   12452:	68fb      	ldr	r3, [r7, #12]
   12454:	2200      	movs	r2, #0
   12456:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   12458:	68fb      	ldr	r3, [r7, #12]
   1245a:	7edb      	ldrb	r3, [r3, #27]
   1245c:	001a      	movs	r2, r3
   1245e:	2301      	movs	r3, #1
   12460:	4013      	ands	r3, r2
   12462:	d00a      	beq.n	1247a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   12464:	68fb      	ldr	r3, [r7, #12]
   12466:	7e9b      	ldrb	r3, [r3, #26]
   12468:	001a      	movs	r2, r3
   1246a:	2301      	movs	r3, #1
   1246c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1246e:	d004      	beq.n	1247a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   12470:	68fb      	ldr	r3, [r7, #12]
   12472:	689b      	ldr	r3, [r3, #8]
   12474:	68fa      	ldr	r2, [r7, #12]
   12476:	0010      	movs	r0, r2
   12478:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1247a:	68bb      	ldr	r3, [r7, #8]
   1247c:	2204      	movs	r2, #4
   1247e:	4013      	ands	r3, r2
   12480:	d014      	beq.n	124ac <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   12482:	68fb      	ldr	r3, [r7, #12]
   12484:	681b      	ldr	r3, [r3, #0]
   12486:	2204      	movs	r2, #4
   12488:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1248a:	68fb      	ldr	r3, [r7, #12]
   1248c:	7edb      	ldrb	r3, [r3, #27]
   1248e:	001a      	movs	r2, r3
   12490:	2302      	movs	r3, #2
   12492:	4013      	ands	r3, r2
   12494:	d00a      	beq.n	124ac <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   12496:	68fb      	ldr	r3, [r7, #12]
   12498:	7e9b      	ldrb	r3, [r3, #26]
   1249a:	001a      	movs	r2, r3
   1249c:	2302      	movs	r3, #2
   1249e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   124a0:	d004      	beq.n	124ac <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   124a2:	68fb      	ldr	r3, [r7, #12]
   124a4:	68db      	ldr	r3, [r3, #12]
   124a6:	68fa      	ldr	r2, [r7, #12]
   124a8:	0010      	movs	r0, r2
   124aa:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   124ac:	68bb      	ldr	r3, [r7, #8]
   124ae:	2202      	movs	r2, #2
   124b0:	4013      	ands	r3, r2
   124b2:	d014      	beq.n	124de <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   124b4:	68fb      	ldr	r3, [r7, #12]
   124b6:	681b      	ldr	r3, [r3, #0]
   124b8:	2202      	movs	r2, #2
   124ba:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   124bc:	68fb      	ldr	r3, [r7, #12]
   124be:	7edb      	ldrb	r3, [r3, #27]
   124c0:	001a      	movs	r2, r3
   124c2:	2304      	movs	r3, #4
   124c4:	4013      	ands	r3, r2
   124c6:	d00a      	beq.n	124de <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   124c8:	68fb      	ldr	r3, [r7, #12]
   124ca:	7e9b      	ldrb	r3, [r3, #26]
   124cc:	001a      	movs	r2, r3
   124ce:	2304      	movs	r3, #4
   124d0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   124d2:	d004      	beq.n	124de <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   124d4:	68fb      	ldr	r3, [r7, #12]
   124d6:	691b      	ldr	r3, [r3, #16]
   124d8:	68fa      	ldr	r2, [r7, #12]
   124da:	0010      	movs	r0, r2
   124dc:	4798      	blx	r3
		}
	}
}
   124de:	46c0      	nop			; (mov r8, r8)
   124e0:	46bd      	mov	sp, r7
   124e2:	b004      	add	sp, #16
   124e4:	bd80      	pop	{r7, pc}
   124e6:	46c0      	nop			; (mov r8, r8)
   124e8:	200045a8 	.word	0x200045a8
   124ec:	00012325 	.word	0x00012325
   124f0:	0001234d 	.word	0x0001234d
   124f4:	00012395 	.word	0x00012395

000124f8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   124f8:	b580      	push	{r7, lr}
   124fa:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   124fc:	2000      	movs	r0, #0
   124fe:	4b02      	ldr	r3, [pc, #8]	; (12508 <ADC_Handler+0x10>)
   12500:	4798      	blx	r3
}
   12502:	46c0      	nop			; (mov r8, r8)
   12504:	46bd      	mov	sp, r7
   12506:	bd80      	pop	{r7, pc}
   12508:	000123b9 	.word	0x000123b9

0001250c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   1250c:	b580      	push	{r7, lr}
   1250e:	b082      	sub	sp, #8
   12510:	af00      	add	r7, sp, #0
   12512:	0002      	movs	r2, r0
   12514:	1dfb      	adds	r3, r7, #7
   12516:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   12518:	4a07      	ldr	r2, [pc, #28]	; (12538 <system_interrupt_disable+0x2c>)
   1251a:	1dfb      	adds	r3, r7, #7
   1251c:	781b      	ldrb	r3, [r3, #0]
   1251e:	0019      	movs	r1, r3
   12520:	231f      	movs	r3, #31
   12522:	400b      	ands	r3, r1
   12524:	2101      	movs	r1, #1
   12526:	4099      	lsls	r1, r3
   12528:	000b      	movs	r3, r1
   1252a:	0019      	movs	r1, r3
   1252c:	2380      	movs	r3, #128	; 0x80
   1252e:	50d1      	str	r1, [r2, r3]
}
   12530:	46c0      	nop			; (mov r8, r8)
   12532:	46bd      	mov	sp, r7
   12534:	b002      	add	sp, #8
   12536:	bd80      	pop	{r7, pc}
   12538:	e000e100 	.word	0xe000e100

0001253c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1253c:	b580      	push	{r7, lr}
   1253e:	b084      	sub	sp, #16
   12540:	af00      	add	r7, sp, #0
   12542:	0002      	movs	r2, r0
   12544:	1dfb      	adds	r3, r7, #7
   12546:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   12548:	1dfb      	adds	r3, r7, #7
   1254a:	781a      	ldrb	r2, [r3, #0]
   1254c:	4b37      	ldr	r3, [pc, #220]	; (1262c <_dac_interrupt_handler+0xf0>)
   1254e:	0092      	lsls	r2, r2, #2
   12550:	58d3      	ldr	r3, [r2, r3]
   12552:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   12554:	68fb      	ldr	r3, [r7, #12]
   12556:	681b      	ldr	r3, [r3, #0]
   12558:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1255a:	68bb      	ldr	r3, [r7, #8]
   1255c:	799b      	ldrb	r3, [r3, #6]
   1255e:	b2db      	uxtb	r3, r3
   12560:	001a      	movs	r2, r3
   12562:	2301      	movs	r3, #1
   12564:	4013      	ands	r3, r2
   12566:	d00e      	beq.n	12586 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   12568:	68bb      	ldr	r3, [r7, #8]
   1256a:	2201      	movs	r2, #1
   1256c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1256e:	68fb      	ldr	r3, [r7, #12]
   12570:	3314      	adds	r3, #20
   12572:	2b00      	cmp	r3, #0
   12574:	d007      	beq.n	12586 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   12576:	68fb      	ldr	r3, [r7, #12]
   12578:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1257a:	2b00      	cmp	r3, #0
   1257c:	d003      	beq.n	12586 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1257e:	68fb      	ldr	r3, [r7, #12]
   12580:	699b      	ldr	r3, [r3, #24]
   12582:	2000      	movs	r0, #0
   12584:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   12586:	68bb      	ldr	r3, [r7, #8]
   12588:	799b      	ldrb	r3, [r3, #6]
   1258a:	b2db      	uxtb	r3, r3
   1258c:	001a      	movs	r2, r3
   1258e:	2302      	movs	r3, #2
   12590:	4013      	ands	r3, r2
   12592:	d047      	beq.n	12624 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   12594:	68bb      	ldr	r3, [r7, #8]
   12596:	2202      	movs	r2, #2
   12598:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1259a:	68fb      	ldr	r3, [r7, #12]
   1259c:	899b      	ldrh	r3, [r3, #12]
   1259e:	b29b      	uxth	r3, r3
   125a0:	2b00      	cmp	r3, #0
   125a2:	d033      	beq.n	1260c <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   125a4:	68fb      	ldr	r3, [r7, #12]
   125a6:	689a      	ldr	r2, [r3, #8]
   125a8:	68fb      	ldr	r3, [r7, #12]
   125aa:	89db      	ldrh	r3, [r3, #14]
   125ac:	b29b      	uxth	r3, r3
   125ae:	1c59      	adds	r1, r3, #1
   125b0:	b288      	uxth	r0, r1
   125b2:	68f9      	ldr	r1, [r7, #12]
   125b4:	81c8      	strh	r0, [r1, #14]
   125b6:	005b      	lsls	r3, r3, #1
   125b8:	18d3      	adds	r3, r2, r3
   125ba:	881b      	ldrh	r3, [r3, #0]
   125bc:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   125be:	68bb      	ldr	r3, [r7, #8]
   125c0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   125c2:	68fb      	ldr	r3, [r7, #12]
   125c4:	899b      	ldrh	r3, [r3, #12]
   125c6:	b29b      	uxth	r3, r3
   125c8:	3b01      	subs	r3, #1
   125ca:	b29a      	uxth	r2, r3
   125cc:	68fb      	ldr	r3, [r7, #12]
   125ce:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   125d0:	68fb      	ldr	r3, [r7, #12]
   125d2:	899b      	ldrh	r3, [r3, #12]
   125d4:	b29b      	uxth	r3, r3
   125d6:	2b00      	cmp	r3, #0
   125d8:	d118      	bne.n	1260c <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   125da:	68fb      	ldr	r3, [r7, #12]
   125dc:	2220      	movs	r2, #32
   125de:	2100      	movs	r1, #0
   125e0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   125e2:	68bb      	ldr	r3, [r7, #8]
   125e4:	2202      	movs	r2, #2
   125e6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   125e8:	68bb      	ldr	r3, [r7, #8]
   125ea:	2202      	movs	r2, #2
   125ec:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   125ee:	2019      	movs	r0, #25
   125f0:	4b0f      	ldr	r3, [pc, #60]	; (12630 <_dac_interrupt_handler+0xf4>)
   125f2:	4798      	blx	r3

				if ((module->callback) &&
   125f4:	68fb      	ldr	r3, [r7, #12]
   125f6:	3314      	adds	r3, #20
   125f8:	2b00      	cmp	r3, #0
   125fa:	d007      	beq.n	1260c <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   125fc:	68fb      	ldr	r3, [r7, #12]
   125fe:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   12600:	2b00      	cmp	r3, #0
   12602:	d003      	beq.n	1260c <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   12604:	68fb      	ldr	r3, [r7, #12]
   12606:	69db      	ldr	r3, [r3, #28]
   12608:	2000      	movs	r0, #0
   1260a:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   1260c:	68fb      	ldr	r3, [r7, #12]
   1260e:	3314      	adds	r3, #20
   12610:	2b00      	cmp	r3, #0
   12612:	d007      	beq.n	12624 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   12614:	68fb      	ldr	r3, [r7, #12]
   12616:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   12618:	2b00      	cmp	r3, #0
   1261a:	d003      	beq.n	12624 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1261c:	68fb      	ldr	r3, [r7, #12]
   1261e:	695b      	ldr	r3, [r3, #20]
   12620:	2000      	movs	r0, #0
   12622:	4798      	blx	r3
		}
	}
}
   12624:	46c0      	nop			; (mov r8, r8)
   12626:	46bd      	mov	sp, r7
   12628:	b004      	add	sp, #16
   1262a:	bd80      	pop	{r7, pc}
   1262c:	200045ac 	.word	0x200045ac
   12630:	0001250d 	.word	0x0001250d

00012634 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   12634:	b580      	push	{r7, lr}
   12636:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   12638:	2000      	movs	r0, #0
   1263a:	4b02      	ldr	r3, [pc, #8]	; (12644 <DAC_Handler+0x10>)
   1263c:	4798      	blx	r3
}
   1263e:	46c0      	nop			; (mov r8, r8)
   12640:	46bd      	mov	sp, r7
   12642:	bd80      	pop	{r7, pc}
   12644:	0001253d 	.word	0x0001253d

00012648 <system_interrupt_enter_critical_section>:
{
   12648:	b580      	push	{r7, lr}
   1264a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1264c:	4b02      	ldr	r3, [pc, #8]	; (12658 <system_interrupt_enter_critical_section+0x10>)
   1264e:	4798      	blx	r3
}
   12650:	46c0      	nop			; (mov r8, r8)
   12652:	46bd      	mov	sp, r7
   12654:	bd80      	pop	{r7, pc}
   12656:	46c0      	nop			; (mov r8, r8)
   12658:	00024b39 	.word	0x00024b39

0001265c <system_interrupt_leave_critical_section>:
{
   1265c:	b580      	push	{r7, lr}
   1265e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   12660:	4b02      	ldr	r3, [pc, #8]	; (1266c <system_interrupt_leave_critical_section+0x10>)
   12662:	4798      	blx	r3
}
   12664:	46c0      	nop			; (mov r8, r8)
   12666:	46bd      	mov	sp, r7
   12668:	bd80      	pop	{r7, pc}
   1266a:	46c0      	nop			; (mov r8, r8)
   1266c:	00024b8d 	.word	0x00024b8d

00012670 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   12670:	b580      	push	{r7, lr}
   12672:	b086      	sub	sp, #24
   12674:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   12676:	4b49      	ldr	r3, [pc, #292]	; (1279c <DMAC_Handler+0x12c>)
   12678:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1267a:	4b49      	ldr	r3, [pc, #292]	; (127a0 <DMAC_Handler+0x130>)
   1267c:	8c1b      	ldrh	r3, [r3, #32]
   1267e:	b29b      	uxth	r3, r3
   12680:	b2da      	uxtb	r2, r3
   12682:	2317      	movs	r3, #23
   12684:	18fb      	adds	r3, r7, r3
   12686:	210f      	movs	r1, #15
   12688:	400a      	ands	r2, r1
   1268a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1268c:	2317      	movs	r3, #23
   1268e:	18fb      	adds	r3, r7, r3
   12690:	781a      	ldrb	r2, [r3, #0]
   12692:	4b44      	ldr	r3, [pc, #272]	; (127a4 <DMAC_Handler+0x134>)
   12694:	0092      	lsls	r2, r2, #2
   12696:	58d3      	ldr	r3, [r2, r3]
   12698:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1269a:	4a41      	ldr	r2, [pc, #260]	; (127a0 <DMAC_Handler+0x130>)
   1269c:	693b      	ldr	r3, [r7, #16]
   1269e:	781b      	ldrb	r3, [r3, #0]
   126a0:	210f      	movs	r1, #15
   126a2:	400b      	ands	r3, r1
   126a4:	b2d9      	uxtb	r1, r3
   126a6:	233f      	movs	r3, #63	; 0x3f
   126a8:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   126aa:	493d      	ldr	r1, [pc, #244]	; (127a0 <DMAC_Handler+0x130>)
   126ac:	230f      	movs	r3, #15
   126ae:	18fb      	adds	r3, r7, r3
   126b0:	224e      	movs	r2, #78	; 0x4e
   126b2:	5c8a      	ldrb	r2, [r1, r2]
   126b4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   126b6:	693b      	ldr	r3, [r7, #16]
   126b8:	781b      	ldrb	r3, [r3, #0]
   126ba:	4a3b      	ldr	r2, [pc, #236]	; (127a8 <DMAC_Handler+0x138>)
   126bc:	011b      	lsls	r3, r3, #4
   126be:	18d3      	adds	r3, r2, r3
   126c0:	3302      	adds	r3, #2
   126c2:	881b      	ldrh	r3, [r3, #0]
   126c4:	b29b      	uxth	r3, r3
   126c6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   126c8:	693b      	ldr	r3, [r7, #16]
   126ca:	781b      	ldrb	r3, [r3, #0]
   126cc:	4a37      	ldr	r2, [pc, #220]	; (127ac <DMAC_Handler+0x13c>)
   126ce:	011b      	lsls	r3, r3, #4
   126d0:	18d3      	adds	r3, r2, r3
   126d2:	3302      	adds	r3, #2
   126d4:	881b      	ldrh	r3, [r3, #0]
   126d6:	b29b      	uxth	r3, r3
   126d8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   126da:	68ba      	ldr	r2, [r7, #8]
   126dc:	687b      	ldr	r3, [r7, #4]
   126de:	1ad2      	subs	r2, r2, r3
   126e0:	693b      	ldr	r3, [r7, #16]
   126e2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   126e4:	230f      	movs	r3, #15
   126e6:	18fb      	adds	r3, r7, r3
   126e8:	781b      	ldrb	r3, [r3, #0]
   126ea:	2201      	movs	r2, #1
   126ec:	4013      	ands	r3, r2
   126ee:	d016      	beq.n	1271e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   126f0:	4a2b      	ldr	r2, [pc, #172]	; (127a0 <DMAC_Handler+0x130>)
   126f2:	234e      	movs	r3, #78	; 0x4e
   126f4:	2101      	movs	r1, #1
   126f6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   126f8:	693b      	ldr	r3, [r7, #16]
   126fa:	2210      	movs	r2, #16
   126fc:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   126fe:	693b      	ldr	r3, [r7, #16]
   12700:	7c1b      	ldrb	r3, [r3, #16]
   12702:	001a      	movs	r2, r3
   12704:	2301      	movs	r3, #1
   12706:	4013      	ands	r3, r2
   12708:	d042      	beq.n	12790 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   1270a:	693b      	ldr	r3, [r7, #16]
   1270c:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   1270e:	2b00      	cmp	r3, #0
   12710:	d03e      	beq.n	12790 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   12712:	693b      	ldr	r3, [r7, #16]
   12714:	685b      	ldr	r3, [r3, #4]
   12716:	693a      	ldr	r2, [r7, #16]
   12718:	0010      	movs	r0, r2
   1271a:	4798      	blx	r3
   1271c:	e038      	b.n	12790 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1271e:	230f      	movs	r3, #15
   12720:	18fb      	adds	r3, r7, r3
   12722:	781b      	ldrb	r3, [r3, #0]
   12724:	2202      	movs	r2, #2
   12726:	4013      	ands	r3, r2
   12728:	d016      	beq.n	12758 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1272a:	4a1d      	ldr	r2, [pc, #116]	; (127a0 <DMAC_Handler+0x130>)
   1272c:	234e      	movs	r3, #78	; 0x4e
   1272e:	2102      	movs	r1, #2
   12730:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   12732:	693b      	ldr	r3, [r7, #16]
   12734:	2200      	movs	r2, #0
   12736:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12738:	693b      	ldr	r3, [r7, #16]
   1273a:	7c1b      	ldrb	r3, [r3, #16]
   1273c:	001a      	movs	r2, r3
   1273e:	2302      	movs	r3, #2
   12740:	4013      	ands	r3, r2
   12742:	d025      	beq.n	12790 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   12744:	693b      	ldr	r3, [r7, #16]
   12746:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   12748:	2b00      	cmp	r3, #0
   1274a:	d021      	beq.n	12790 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1274c:	693b      	ldr	r3, [r7, #16]
   1274e:	689b      	ldr	r3, [r3, #8]
   12750:	693a      	ldr	r2, [r7, #16]
   12752:	0010      	movs	r0, r2
   12754:	4798      	blx	r3
   12756:	e01b      	b.n	12790 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   12758:	230f      	movs	r3, #15
   1275a:	18fb      	adds	r3, r7, r3
   1275c:	781b      	ldrb	r3, [r3, #0]
   1275e:	2204      	movs	r2, #4
   12760:	4013      	ands	r3, r2
   12762:	d015      	beq.n	12790 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   12764:	4a0e      	ldr	r2, [pc, #56]	; (127a0 <DMAC_Handler+0x130>)
   12766:	234e      	movs	r3, #78	; 0x4e
   12768:	2104      	movs	r1, #4
   1276a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1276c:	693b      	ldr	r3, [r7, #16]
   1276e:	2206      	movs	r2, #6
   12770:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12772:	693b      	ldr	r3, [r7, #16]
   12774:	7c1b      	ldrb	r3, [r3, #16]
   12776:	001a      	movs	r2, r3
   12778:	2304      	movs	r3, #4
   1277a:	4013      	ands	r3, r2
   1277c:	d008      	beq.n	12790 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1277e:	693b      	ldr	r3, [r7, #16]
   12780:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   12782:	2b00      	cmp	r3, #0
   12784:	d004      	beq.n	12790 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   12786:	693b      	ldr	r3, [r7, #16]
   12788:	68db      	ldr	r3, [r3, #12]
   1278a:	693a      	ldr	r2, [r7, #16]
   1278c:	0010      	movs	r0, r2
   1278e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   12790:	4b07      	ldr	r3, [pc, #28]	; (127b0 <DMAC_Handler+0x140>)
   12792:	4798      	blx	r3
}
   12794:	46c0      	nop			; (mov r8, r8)
   12796:	46bd      	mov	sp, r7
   12798:	b006      	add	sp, #24
   1279a:	bd80      	pop	{r7, pc}
   1279c:	00012649 	.word	0x00012649
   127a0:	41004800 	.word	0x41004800
   127a4:	20000370 	.word	0x20000370
   127a8:	200045b0 	.word	0x200045b0
   127ac:	20000320 	.word	0x20000320
   127b0:	0001265d 	.word	0x0001265d

000127b4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   127b4:	b580      	push	{r7, lr}
   127b6:	b082      	sub	sp, #8
   127b8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   127ba:	4b15      	ldr	r3, [pc, #84]	; (12810 <EVSYS_Handler+0x5c>)
   127bc:	691b      	ldr	r3, [r3, #16]
   127be:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   127c0:	4b14      	ldr	r3, [pc, #80]	; (12814 <EVSYS_Handler+0x60>)
   127c2:	699b      	ldr	r3, [r3, #24]
   127c4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   127c6:	4b12      	ldr	r3, [pc, #72]	; (12810 <EVSYS_Handler+0x5c>)
   127c8:	689a      	ldr	r2, [r3, #8]
   127ca:	683b      	ldr	r3, [r7, #0]
   127cc:	431a      	orrs	r2, r3
   127ce:	4b10      	ldr	r3, [pc, #64]	; (12810 <EVSYS_Handler+0x5c>)
   127d0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   127d2:	4b10      	ldr	r3, [pc, #64]	; (12814 <EVSYS_Handler+0x60>)
   127d4:	4a10      	ldr	r2, [pc, #64]	; (12818 <EVSYS_Handler+0x64>)
   127d6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   127d8:	e008      	b.n	127ec <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   127da:	687b      	ldr	r3, [r7, #4]
   127dc:	685a      	ldr	r2, [r3, #4]
   127de:	687b      	ldr	r3, [r7, #4]
   127e0:	681b      	ldr	r3, [r3, #0]
   127e2:	0018      	movs	r0, r3
   127e4:	4790      	blx	r2
		current_hook = current_hook->next;
   127e6:	687b      	ldr	r3, [r7, #4]
   127e8:	689b      	ldr	r3, [r3, #8]
   127ea:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   127ec:	687b      	ldr	r3, [r7, #4]
   127ee:	2b00      	cmp	r3, #0
   127f0:	d1f3      	bne.n	127da <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   127f2:	4b07      	ldr	r3, [pc, #28]	; (12810 <EVSYS_Handler+0x5c>)
   127f4:	68db      	ldr	r3, [r3, #12]
   127f6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   127f8:	4b05      	ldr	r3, [pc, #20]	; (12810 <EVSYS_Handler+0x5c>)
   127fa:	689b      	ldr	r3, [r3, #8]
   127fc:	683a      	ldr	r2, [r7, #0]
   127fe:	43d2      	mvns	r2, r2
   12800:	401a      	ands	r2, r3
   12802:	4b03      	ldr	r3, [pc, #12]	; (12810 <EVSYS_Handler+0x5c>)
   12804:	609a      	str	r2, [r3, #8]
}
   12806:	46c0      	nop			; (mov r8, r8)
   12808:	46bd      	mov	sp, r7
   1280a:	b002      	add	sp, #8
   1280c:	bd80      	pop	{r7, pc}
   1280e:	46c0      	nop			; (mov r8, r8)
   12810:	20000000 	.word	0x20000000
   12814:	42000400 	.word	0x42000400
   12818:	0f0fffff 	.word	0x0f0fffff

0001281c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1281c:	b580      	push	{r7, lr}
   1281e:	b082      	sub	sp, #8
   12820:	af00      	add	r7, sp, #0
   12822:	0002      	movs	r2, r0
   12824:	6039      	str	r1, [r7, #0]
   12826:	1dfb      	adds	r3, r7, #7
   12828:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1282a:	1dfb      	adds	r3, r7, #7
   1282c:	781b      	ldrb	r3, [r3, #0]
   1282e:	2b01      	cmp	r3, #1
   12830:	d00a      	beq.n	12848 <system_apb_clock_set_mask+0x2c>
   12832:	2b02      	cmp	r3, #2
   12834:	d00f      	beq.n	12856 <system_apb_clock_set_mask+0x3a>
   12836:	2b00      	cmp	r3, #0
   12838:	d114      	bne.n	12864 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1283a:	4b0e      	ldr	r3, [pc, #56]	; (12874 <system_apb_clock_set_mask+0x58>)
   1283c:	4a0d      	ldr	r2, [pc, #52]	; (12874 <system_apb_clock_set_mask+0x58>)
   1283e:	6991      	ldr	r1, [r2, #24]
   12840:	683a      	ldr	r2, [r7, #0]
   12842:	430a      	orrs	r2, r1
   12844:	619a      	str	r2, [r3, #24]
			break;
   12846:	e00f      	b.n	12868 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   12848:	4b0a      	ldr	r3, [pc, #40]	; (12874 <system_apb_clock_set_mask+0x58>)
   1284a:	4a0a      	ldr	r2, [pc, #40]	; (12874 <system_apb_clock_set_mask+0x58>)
   1284c:	69d1      	ldr	r1, [r2, #28]
   1284e:	683a      	ldr	r2, [r7, #0]
   12850:	430a      	orrs	r2, r1
   12852:	61da      	str	r2, [r3, #28]
			break;
   12854:	e008      	b.n	12868 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   12856:	4b07      	ldr	r3, [pc, #28]	; (12874 <system_apb_clock_set_mask+0x58>)
   12858:	4a06      	ldr	r2, [pc, #24]	; (12874 <system_apb_clock_set_mask+0x58>)
   1285a:	6a11      	ldr	r1, [r2, #32]
   1285c:	683a      	ldr	r2, [r7, #0]
   1285e:	430a      	orrs	r2, r1
   12860:	621a      	str	r2, [r3, #32]
			break;
   12862:	e001      	b.n	12868 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   12864:	2317      	movs	r3, #23
   12866:	e000      	b.n	1286a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   12868:	2300      	movs	r3, #0
}
   1286a:	0018      	movs	r0, r3
   1286c:	46bd      	mov	sp, r7
   1286e:	b002      	add	sp, #8
   12870:	bd80      	pop	{r7, pc}
   12872:	46c0      	nop			; (mov r8, r8)
   12874:	40000400 	.word	0x40000400

00012878 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   12878:	b580      	push	{r7, lr}
   1287a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1287c:	2102      	movs	r1, #2
   1287e:	2002      	movs	r0, #2
   12880:	4b07      	ldr	r3, [pc, #28]	; (128a0 <_system_events_init+0x28>)
   12882:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   12884:	4b07      	ldr	r3, [pc, #28]	; (128a4 <_system_events_init+0x2c>)
   12886:	2201      	movs	r2, #1
   12888:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1288a:	46c0      	nop			; (mov r8, r8)
   1288c:	4b05      	ldr	r3, [pc, #20]	; (128a4 <_system_events_init+0x2c>)
   1288e:	781b      	ldrb	r3, [r3, #0]
   12890:	b2db      	uxtb	r3, r3
   12892:	001a      	movs	r2, r3
   12894:	2301      	movs	r3, #1
   12896:	4013      	ands	r3, r2
   12898:	d1f8      	bne.n	1288c <_system_events_init+0x14>
	}
}
   1289a:	46c0      	nop			; (mov r8, r8)
   1289c:	46bd      	mov	sp, r7
   1289e:	bd80      	pop	{r7, pc}
   128a0:	0001281d 	.word	0x0001281d
   128a4:	42000400 	.word	0x42000400

000128a8 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   128a8:	b580      	push	{r7, lr}
   128aa:	b084      	sub	sp, #16
   128ac:	af00      	add	r7, sp, #0
   128ae:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   128b0:	687b      	ldr	r3, [r7, #4]
   128b2:	681b      	ldr	r3, [r3, #0]
   128b4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   128b6:	68fb      	ldr	r3, [r7, #12]
   128b8:	69db      	ldr	r3, [r3, #28]
   128ba:	2207      	movs	r2, #7
   128bc:	4013      	ands	r3, r2
   128be:	1e5a      	subs	r2, r3, #1
   128c0:	4193      	sbcs	r3, r2
   128c2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   128c4:	0018      	movs	r0, r3
   128c6:	46bd      	mov	sp, r7
   128c8:	b004      	add	sp, #16
   128ca:	bd80      	pop	{r7, pc}

000128cc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   128cc:	b580      	push	{r7, lr}
   128ce:	b082      	sub	sp, #8
   128d0:	af00      	add	r7, sp, #0
   128d2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   128d4:	46c0      	nop			; (mov r8, r8)
   128d6:	687b      	ldr	r3, [r7, #4]
   128d8:	0018      	movs	r0, r3
   128da:	4b04      	ldr	r3, [pc, #16]	; (128ec <_i2c_master_wait_for_sync+0x20>)
   128dc:	4798      	blx	r3
   128de:	1e03      	subs	r3, r0, #0
   128e0:	d1f9      	bne.n	128d6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   128e2:	46c0      	nop			; (mov r8, r8)
   128e4:	46bd      	mov	sp, r7
   128e6:	b002      	add	sp, #8
   128e8:	bd80      	pop	{r7, pc}
   128ea:	46c0      	nop			; (mov r8, r8)
   128ec:	000128a9 	.word	0x000128a9

000128f0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   128f0:	b580      	push	{r7, lr}
   128f2:	b084      	sub	sp, #16
   128f4:	af00      	add	r7, sp, #0
   128f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   128f8:	687b      	ldr	r3, [r7, #4]
   128fa:	681b      	ldr	r3, [r3, #0]
   128fc:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   128fe:	68fb      	ldr	r3, [r7, #12]
   12900:	681b      	ldr	r3, [r3, #0]
   12902:	011b      	lsls	r3, r3, #4
   12904:	0fdb      	lsrs	r3, r3, #31
   12906:	b2db      	uxtb	r3, r3
   12908:	001a      	movs	r2, r3
   1290a:	230b      	movs	r3, #11
   1290c:	18fb      	adds	r3, r7, r3
   1290e:	1e51      	subs	r1, r2, #1
   12910:	418a      	sbcs	r2, r1
   12912:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   12914:	2308      	movs	r3, #8
   12916:	18fb      	adds	r3, r7, r3
   12918:	687a      	ldr	r2, [r7, #4]
   1291a:	8b52      	ldrh	r2, [r2, #26]
   1291c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1291e:	687b      	ldr	r3, [r7, #4]
   12920:	8b9b      	ldrh	r3, [r3, #28]
   12922:	b29a      	uxth	r2, r3
   12924:	2308      	movs	r3, #8
   12926:	18fb      	adds	r3, r7, r3
   12928:	2108      	movs	r1, #8
   1292a:	1879      	adds	r1, r7, r1
   1292c:	8809      	ldrh	r1, [r1, #0]
   1292e:	1a8a      	subs	r2, r1, r2
   12930:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12932:	687b      	ldr	r3, [r7, #4]
   12934:	8b9b      	ldrh	r3, [r3, #28]
   12936:	b29b      	uxth	r3, r3
   12938:	3b01      	subs	r3, #1
   1293a:	b29a      	uxth	r2, r3
   1293c:	687b      	ldr	r3, [r7, #4]
   1293e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   12940:	230b      	movs	r3, #11
   12942:	18fb      	adds	r3, r7, r3
   12944:	781b      	ldrb	r3, [r3, #0]
   12946:	2b00      	cmp	r3, #0
   12948:	d010      	beq.n	1296c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1294a:	687b      	ldr	r3, [r7, #4]
   1294c:	7adb      	ldrb	r3, [r3, #11]
   1294e:	2b00      	cmp	r3, #0
   12950:	d01c      	beq.n	1298c <_i2c_master_read+0x9c>
   12952:	687b      	ldr	r3, [r7, #4]
   12954:	8b9b      	ldrh	r3, [r3, #28]
   12956:	b29b      	uxth	r3, r3
   12958:	2b01      	cmp	r3, #1
   1295a:	d117      	bne.n	1298c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1295c:	68fb      	ldr	r3, [r7, #12]
   1295e:	685b      	ldr	r3, [r3, #4]
   12960:	2280      	movs	r2, #128	; 0x80
   12962:	02d2      	lsls	r2, r2, #11
   12964:	431a      	orrs	r2, r3
   12966:	68fb      	ldr	r3, [r7, #12]
   12968:	605a      	str	r2, [r3, #4]
   1296a:	e00f      	b.n	1298c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1296c:	687b      	ldr	r3, [r7, #4]
   1296e:	7adb      	ldrb	r3, [r3, #11]
   12970:	2b00      	cmp	r3, #0
   12972:	d00b      	beq.n	1298c <_i2c_master_read+0x9c>
   12974:	687b      	ldr	r3, [r7, #4]
   12976:	8b9b      	ldrh	r3, [r3, #28]
   12978:	b29b      	uxth	r3, r3
   1297a:	2b00      	cmp	r3, #0
   1297c:	d106      	bne.n	1298c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1297e:	68fb      	ldr	r3, [r7, #12]
   12980:	685b      	ldr	r3, [r3, #4]
   12982:	2280      	movs	r2, #128	; 0x80
   12984:	02d2      	lsls	r2, r2, #11
   12986:	431a      	orrs	r2, r3
   12988:	68fb      	ldr	r3, [r7, #12]
   1298a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1298c:	687b      	ldr	r3, [r7, #4]
   1298e:	8b9b      	ldrh	r3, [r3, #28]
   12990:	b29b      	uxth	r3, r3
   12992:	2b00      	cmp	r3, #0
   12994:	d10e      	bne.n	129b4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   12996:	687b      	ldr	r3, [r7, #4]
   12998:	7a9b      	ldrb	r3, [r3, #10]
   1299a:	2b00      	cmp	r3, #0
   1299c:	d00a      	beq.n	129b4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1299e:	687b      	ldr	r3, [r7, #4]
   129a0:	0018      	movs	r0, r3
   129a2:	4b0e      	ldr	r3, [pc, #56]	; (129dc <_i2c_master_read+0xec>)
   129a4:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   129a6:	68fb      	ldr	r3, [r7, #12]
   129a8:	685b      	ldr	r3, [r3, #4]
   129aa:	22c0      	movs	r2, #192	; 0xc0
   129ac:	0292      	lsls	r2, r2, #10
   129ae:	431a      	orrs	r2, r3
   129b0:	68fb      	ldr	r3, [r7, #12]
   129b2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   129b4:	687b      	ldr	r3, [r7, #4]
   129b6:	0018      	movs	r0, r3
   129b8:	4b08      	ldr	r3, [pc, #32]	; (129dc <_i2c_master_read+0xec>)
   129ba:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   129bc:	687b      	ldr	r3, [r7, #4]
   129be:	6a1a      	ldr	r2, [r3, #32]
   129c0:	2308      	movs	r3, #8
   129c2:	18fb      	adds	r3, r7, r3
   129c4:	881b      	ldrh	r3, [r3, #0]
   129c6:	18d3      	adds	r3, r2, r3
   129c8:	68fa      	ldr	r2, [r7, #12]
   129ca:	2128      	movs	r1, #40	; 0x28
   129cc:	5c52      	ldrb	r2, [r2, r1]
   129ce:	b2d2      	uxtb	r2, r2
   129d0:	701a      	strb	r2, [r3, #0]
}
   129d2:	46c0      	nop			; (mov r8, r8)
   129d4:	46bd      	mov	sp, r7
   129d6:	b004      	add	sp, #16
   129d8:	bd80      	pop	{r7, pc}
   129da:	46c0      	nop			; (mov r8, r8)
   129dc:	000128cd 	.word	0x000128cd

000129e0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   129e0:	b580      	push	{r7, lr}
   129e2:	b084      	sub	sp, #16
   129e4:	af00      	add	r7, sp, #0
   129e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   129e8:	687b      	ldr	r3, [r7, #4]
   129ea:	681b      	ldr	r3, [r3, #0]
   129ec:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   129ee:	68fb      	ldr	r3, [r7, #12]
   129f0:	8b5b      	ldrh	r3, [r3, #26]
   129f2:	b29b      	uxth	r3, r3
   129f4:	001a      	movs	r2, r3
   129f6:	2304      	movs	r3, #4
   129f8:	4013      	ands	r3, r2
   129fa:	d004      	beq.n	12a06 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   129fc:	687b      	ldr	r3, [r7, #4]
   129fe:	2225      	movs	r2, #37	; 0x25
   12a00:	211e      	movs	r1, #30
   12a02:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   12a04:	e024      	b.n	12a50 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   12a06:	230a      	movs	r3, #10
   12a08:	18fb      	adds	r3, r7, r3
   12a0a:	687a      	ldr	r2, [r7, #4]
   12a0c:	8b52      	ldrh	r2, [r2, #26]
   12a0e:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   12a10:	687b      	ldr	r3, [r7, #4]
   12a12:	8b9b      	ldrh	r3, [r3, #28]
   12a14:	b29a      	uxth	r2, r3
   12a16:	230a      	movs	r3, #10
   12a18:	18fb      	adds	r3, r7, r3
   12a1a:	210a      	movs	r1, #10
   12a1c:	1879      	adds	r1, r7, r1
   12a1e:	8809      	ldrh	r1, [r1, #0]
   12a20:	1a8a      	subs	r2, r1, r2
   12a22:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   12a24:	687b      	ldr	r3, [r7, #4]
   12a26:	8b9b      	ldrh	r3, [r3, #28]
   12a28:	b29b      	uxth	r3, r3
   12a2a:	3b01      	subs	r3, #1
   12a2c:	b29a      	uxth	r2, r3
   12a2e:	687b      	ldr	r3, [r7, #4]
   12a30:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   12a32:	687b      	ldr	r3, [r7, #4]
   12a34:	0018      	movs	r0, r3
   12a36:	4b08      	ldr	r3, [pc, #32]	; (12a58 <_i2c_master_write+0x78>)
   12a38:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   12a3a:	687b      	ldr	r3, [r7, #4]
   12a3c:	6a1a      	ldr	r2, [r3, #32]
   12a3e:	230a      	movs	r3, #10
   12a40:	18fb      	adds	r3, r7, r3
   12a42:	881b      	ldrh	r3, [r3, #0]
   12a44:	18d3      	adds	r3, r2, r3
   12a46:	781b      	ldrb	r3, [r3, #0]
   12a48:	b2d9      	uxtb	r1, r3
   12a4a:	68fb      	ldr	r3, [r7, #12]
   12a4c:	2228      	movs	r2, #40	; 0x28
   12a4e:	5499      	strb	r1, [r3, r2]
}
   12a50:	46bd      	mov	sp, r7
   12a52:	b004      	add	sp, #16
   12a54:	bd80      	pop	{r7, pc}
   12a56:	46c0      	nop			; (mov r8, r8)
   12a58:	000128cd 	.word	0x000128cd

00012a5c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   12a5c:	b580      	push	{r7, lr}
   12a5e:	b084      	sub	sp, #16
   12a60:	af00      	add	r7, sp, #0
   12a62:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12a64:	687b      	ldr	r3, [r7, #4]
   12a66:	681b      	ldr	r3, [r3, #0]
   12a68:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   12a6a:	68fb      	ldr	r3, [r7, #12]
   12a6c:	7e1b      	ldrb	r3, [r3, #24]
   12a6e:	b2db      	uxtb	r3, r3
   12a70:	001a      	movs	r2, r3
   12a72:	2301      	movs	r3, #1
   12a74:	4013      	ands	r3, r2
   12a76:	d02b      	beq.n	12ad0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   12a78:	68fb      	ldr	r3, [r7, #12]
   12a7a:	2201      	movs	r2, #1
   12a7c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   12a7e:	68fb      	ldr	r3, [r7, #12]
   12a80:	8b5b      	ldrh	r3, [r3, #26]
   12a82:	b29b      	uxth	r3, r3
   12a84:	001a      	movs	r2, r3
   12a86:	2302      	movs	r3, #2
   12a88:	4013      	ands	r3, r2
   12a8a:	d004      	beq.n	12a96 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   12a8c:	687b      	ldr	r3, [r7, #4]
   12a8e:	2225      	movs	r2, #37	; 0x25
   12a90:	2141      	movs	r1, #65	; 0x41
   12a92:	5499      	strb	r1, [r3, r2]
   12a94:	e01c      	b.n	12ad0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   12a96:	68fb      	ldr	r3, [r7, #12]
   12a98:	8b5b      	ldrh	r3, [r3, #26]
   12a9a:	b29b      	uxth	r3, r3
   12a9c:	001a      	movs	r2, r3
   12a9e:	2304      	movs	r3, #4
   12aa0:	4013      	ands	r3, r2
   12aa2:	d015      	beq.n	12ad0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   12aa4:	687b      	ldr	r3, [r7, #4]
   12aa6:	2225      	movs	r2, #37	; 0x25
   12aa8:	2118      	movs	r1, #24
   12aaa:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   12aac:	687b      	ldr	r3, [r7, #4]
   12aae:	2200      	movs	r2, #0
   12ab0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   12ab2:	687b      	ldr	r3, [r7, #4]
   12ab4:	7a9b      	ldrb	r3, [r3, #10]
   12ab6:	2b00      	cmp	r3, #0
   12ab8:	d00a      	beq.n	12ad0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   12aba:	687b      	ldr	r3, [r7, #4]
   12abc:	0018      	movs	r0, r3
   12abe:	4b13      	ldr	r3, [pc, #76]	; (12b0c <_i2c_master_async_address_response+0xb0>)
   12ac0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12ac2:	68fb      	ldr	r3, [r7, #12]
   12ac4:	685b      	ldr	r3, [r3, #4]
   12ac6:	22c0      	movs	r2, #192	; 0xc0
   12ac8:	0292      	lsls	r2, r2, #10
   12aca:	431a      	orrs	r2, r3
   12acc:	68fb      	ldr	r3, [r7, #12]
   12ace:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   12ad0:	687b      	ldr	r3, [r7, #4]
   12ad2:	8b9b      	ldrh	r3, [r3, #28]
   12ad4:	b29a      	uxth	r2, r3
   12ad6:	687b      	ldr	r3, [r7, #4]
   12ad8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   12ada:	687b      	ldr	r3, [r7, #4]
   12adc:	2225      	movs	r2, #37	; 0x25
   12ade:	5c9b      	ldrb	r3, [r3, r2]
   12ae0:	b2db      	uxtb	r3, r3
   12ae2:	2b05      	cmp	r3, #5
   12ae4:	d10e      	bne.n	12b04 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12ae6:	687b      	ldr	r3, [r7, #4]
   12ae8:	2224      	movs	r2, #36	; 0x24
   12aea:	5c9b      	ldrb	r3, [r3, r2]
   12aec:	b2db      	uxtb	r3, r3
   12aee:	2b00      	cmp	r3, #0
   12af0:	d104      	bne.n	12afc <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   12af2:	687b      	ldr	r3, [r7, #4]
   12af4:	0018      	movs	r0, r3
   12af6:	4b06      	ldr	r3, [pc, #24]	; (12b10 <_i2c_master_async_address_response+0xb4>)
   12af8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   12afa:	e003      	b.n	12b04 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   12afc:	687b      	ldr	r3, [r7, #4]
   12afe:	0018      	movs	r0, r3
   12b00:	4b04      	ldr	r3, [pc, #16]	; (12b14 <_i2c_master_async_address_response+0xb8>)
   12b02:	4798      	blx	r3
}
   12b04:	46c0      	nop			; (mov r8, r8)
   12b06:	46bd      	mov	sp, r7
   12b08:	b004      	add	sp, #16
   12b0a:	bd80      	pop	{r7, pc}
   12b0c:	000128cd 	.word	0x000128cd
   12b10:	000129e1 	.word	0x000129e1
   12b14:	000128f1 	.word	0x000128f1

00012b18 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   12b18:	b580      	push	{r7, lr}
   12b1a:	b084      	sub	sp, #16
   12b1c:	af00      	add	r7, sp, #0
   12b1e:	60f8      	str	r0, [r7, #12]
   12b20:	60b9      	str	r1, [r7, #8]
   12b22:	1dfb      	adds	r3, r7, #7
   12b24:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   12b26:	1dfb      	adds	r3, r7, #7
   12b28:	781b      	ldrb	r3, [r3, #0]
   12b2a:	68fa      	ldr	r2, [r7, #12]
   12b2c:	3302      	adds	r3, #2
   12b2e:	009b      	lsls	r3, r3, #2
   12b30:	18d3      	adds	r3, r2, r3
   12b32:	3304      	adds	r3, #4
   12b34:	68ba      	ldr	r2, [r7, #8]
   12b36:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   12b38:	68fb      	ldr	r3, [r7, #12]
   12b3a:	7e1b      	ldrb	r3, [r3, #24]
   12b3c:	b2db      	uxtb	r3, r3
   12b3e:	b25a      	sxtb	r2, r3
   12b40:	1dfb      	adds	r3, r7, #7
   12b42:	781b      	ldrb	r3, [r3, #0]
   12b44:	2101      	movs	r1, #1
   12b46:	4099      	lsls	r1, r3
   12b48:	000b      	movs	r3, r1
   12b4a:	b25b      	sxtb	r3, r3
   12b4c:	4313      	orrs	r3, r2
   12b4e:	b25b      	sxtb	r3, r3
   12b50:	b2da      	uxtb	r2, r3
   12b52:	68fb      	ldr	r3, [r7, #12]
   12b54:	761a      	strb	r2, [r3, #24]
}
   12b56:	46c0      	nop			; (mov r8, r8)
   12b58:	46bd      	mov	sp, r7
   12b5a:	b004      	add	sp, #16
   12b5c:	bd80      	pop	{r7, pc}
	...

00012b60 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12b60:	b590      	push	{r4, r7, lr}
   12b62:	b087      	sub	sp, #28
   12b64:	af00      	add	r7, sp, #0
   12b66:	6078      	str	r0, [r7, #4]
   12b68:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12b6a:	687b      	ldr	r3, [r7, #4]
   12b6c:	681b      	ldr	r3, [r3, #0]
   12b6e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   12b70:	683b      	ldr	r3, [r7, #0]
   12b72:	685a      	ldr	r2, [r3, #4]
   12b74:	687b      	ldr	r3, [r7, #4]
   12b76:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12b78:	683b      	ldr	r3, [r7, #0]
   12b7a:	885a      	ldrh	r2, [r3, #2]
   12b7c:	687b      	ldr	r3, [r7, #4]
   12b7e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   12b80:	687b      	ldr	r3, [r7, #4]
   12b82:	2224      	movs	r2, #36	; 0x24
   12b84:	2101      	movs	r1, #1
   12b86:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12b88:	687b      	ldr	r3, [r7, #4]
   12b8a:	2225      	movs	r2, #37	; 0x25
   12b8c:	2105      	movs	r1, #5
   12b8e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12b90:	693b      	ldr	r3, [r7, #16]
   12b92:	681b      	ldr	r3, [r3, #0]
   12b94:	011b      	lsls	r3, r3, #4
   12b96:	0fdb      	lsrs	r3, r3, #31
   12b98:	b2db      	uxtb	r3, r3
   12b9a:	001a      	movs	r2, r3
   12b9c:	230f      	movs	r3, #15
   12b9e:	18fb      	adds	r3, r7, r3
   12ba0:	1e51      	subs	r1, r2, #1
   12ba2:	418a      	sbcs	r2, r1
   12ba4:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12ba6:	683b      	ldr	r3, [r7, #0]
   12ba8:	7a5b      	ldrb	r3, [r3, #9]
   12baa:	2b00      	cmp	r3, #0
   12bac:	d006      	beq.n	12bbc <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12bae:	683b      	ldr	r3, [r7, #0]
   12bb0:	7a9a      	ldrb	r2, [r3, #10]
   12bb2:	687b      	ldr	r3, [r7, #4]
   12bb4:	0011      	movs	r1, r2
   12bb6:	0018      	movs	r0, r3
   12bb8:	4b3b      	ldr	r3, [pc, #236]	; (12ca8 <_i2c_master_read_packet+0x148>)
   12bba:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   12bbc:	230f      	movs	r3, #15
   12bbe:	18fb      	adds	r3, r7, r3
   12bc0:	781b      	ldrb	r3, [r3, #0]
   12bc2:	2b00      	cmp	r3, #0
   12bc4:	d00b      	beq.n	12bde <_i2c_master_read_packet+0x7e>
   12bc6:	683b      	ldr	r3, [r7, #0]
   12bc8:	885b      	ldrh	r3, [r3, #2]
   12bca:	2b01      	cmp	r3, #1
   12bcc:	d107      	bne.n	12bde <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   12bce:	693b      	ldr	r3, [r7, #16]
   12bd0:	685b      	ldr	r3, [r3, #4]
   12bd2:	2280      	movs	r2, #128	; 0x80
   12bd4:	02d2      	lsls	r2, r2, #11
   12bd6:	431a      	orrs	r2, r3
   12bd8:	693b      	ldr	r3, [r7, #16]
   12bda:	605a      	str	r2, [r3, #4]
   12bdc:	e005      	b.n	12bea <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12bde:	693b      	ldr	r3, [r7, #16]
   12be0:	685b      	ldr	r3, [r3, #4]
   12be2:	4a32      	ldr	r2, [pc, #200]	; (12cac <_i2c_master_read_packet+0x14c>)
   12be4:	401a      	ands	r2, r3
   12be6:	693b      	ldr	r3, [r7, #16]
   12be8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   12bea:	683b      	ldr	r3, [r7, #0]
   12bec:	7a1b      	ldrb	r3, [r3, #8]
   12bee:	2b00      	cmp	r3, #0
   12bf0:	d045      	beq.n	12c7e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   12bf2:	683b      	ldr	r3, [r7, #0]
   12bf4:	881b      	ldrh	r3, [r3, #0]
   12bf6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12bf8:	683b      	ldr	r3, [r7, #0]
   12bfa:	7a5b      	ldrb	r3, [r3, #9]
   12bfc:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   12bfe:	4313      	orrs	r3, r2
   12c00:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12c02:	2380      	movs	r3, #128	; 0x80
   12c04:	021b      	lsls	r3, r3, #8
   12c06:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   12c08:	693b      	ldr	r3, [r7, #16]
   12c0a:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   12c0c:	2317      	movs	r3, #23
   12c0e:	18fc      	adds	r4, r7, r3
   12c10:	687b      	ldr	r3, [r7, #4]
   12c12:	0018      	movs	r0, r3
   12c14:	4b26      	ldr	r3, [pc, #152]	; (12cb0 <_i2c_master_read_packet+0x150>)
   12c16:	4798      	blx	r3
   12c18:	0003      	movs	r3, r0
   12c1a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12c1c:	693b      	ldr	r3, [r7, #16]
   12c1e:	685b      	ldr	r3, [r3, #4]
   12c20:	4a22      	ldr	r2, [pc, #136]	; (12cac <_i2c_master_read_packet+0x14c>)
   12c22:	401a      	ands	r2, r3
   12c24:	693b      	ldr	r3, [r7, #16]
   12c26:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   12c28:	2317      	movs	r3, #23
   12c2a:	18fb      	adds	r3, r7, r3
   12c2c:	781b      	ldrb	r3, [r3, #0]
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d107      	bne.n	12c42 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   12c32:	2317      	movs	r3, #23
   12c34:	18fc      	adds	r4, r7, r3
   12c36:	687b      	ldr	r3, [r7, #4]
   12c38:	0018      	movs	r0, r3
   12c3a:	4b1e      	ldr	r3, [pc, #120]	; (12cb4 <_i2c_master_read_packet+0x154>)
   12c3c:	4798      	blx	r3
   12c3e:	0003      	movs	r3, r0
   12c40:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   12c42:	2317      	movs	r3, #23
   12c44:	18fb      	adds	r3, r7, r3
   12c46:	781b      	ldrb	r3, [r3, #0]
   12c48:	2b00      	cmp	r3, #0
   12c4a:	d114      	bne.n	12c76 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   12c4c:	693b      	ldr	r3, [r7, #16]
   12c4e:	2203      	movs	r2, #3
   12c50:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12c52:	683b      	ldr	r3, [r7, #0]
   12c54:	881b      	ldrh	r3, [r3, #0]
   12c56:	0a1b      	lsrs	r3, r3, #8
   12c58:	b29b      	uxth	r3, r3
   12c5a:	2278      	movs	r2, #120	; 0x78
   12c5c:	4313      	orrs	r3, r2
   12c5e:	b29b      	uxth	r3, r3
   12c60:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12c62:	683b      	ldr	r3, [r7, #0]
   12c64:	7a5b      	ldrb	r3, [r3, #9]
   12c66:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12c68:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12c6a:	2201      	movs	r2, #1
   12c6c:	4313      	orrs	r3, r2
   12c6e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   12c70:	693b      	ldr	r3, [r7, #16]
   12c72:	625a      	str	r2, [r3, #36]	; 0x24
   12c74:	e012      	b.n	12c9c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   12c76:	2317      	movs	r3, #23
   12c78:	18fb      	adds	r3, r7, r3
   12c7a:	781b      	ldrb	r3, [r3, #0]
   12c7c:	e00f      	b.n	12c9e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   12c7e:	693b      	ldr	r3, [r7, #16]
   12c80:	2203      	movs	r2, #3
   12c82:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12c84:	683b      	ldr	r3, [r7, #0]
   12c86:	881b      	ldrh	r3, [r3, #0]
   12c88:	005b      	lsls	r3, r3, #1
   12c8a:	2201      	movs	r2, #1
   12c8c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12c8e:	683b      	ldr	r3, [r7, #0]
   12c90:	7a5b      	ldrb	r3, [r3, #9]
   12c92:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   12c94:	4313      	orrs	r3, r2
   12c96:	001a      	movs	r2, r3
   12c98:	693b      	ldr	r3, [r7, #16]
   12c9a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12c9c:	2300      	movs	r3, #0
}
   12c9e:	0018      	movs	r0, r3
   12ca0:	46bd      	mov	sp, r7
   12ca2:	b007      	add	sp, #28
   12ca4:	bd90      	pop	{r4, r7, pc}
   12ca6:	46c0      	nop			; (mov r8, r8)
   12ca8:	00016625 	.word	0x00016625
   12cac:	fffbffff 	.word	0xfffbffff
   12cb0:	000165c7 	.word	0x000165c7
   12cb4:	00016569 	.word	0x00016569

00012cb8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12cb8:	b580      	push	{r7, lr}
   12cba:	b082      	sub	sp, #8
   12cbc:	af00      	add	r7, sp, #0
   12cbe:	6078      	str	r0, [r7, #4]
   12cc0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   12cc2:	687b      	ldr	r3, [r7, #4]
   12cc4:	8b9b      	ldrh	r3, [r3, #28]
   12cc6:	b29b      	uxth	r3, r3
   12cc8:	2b00      	cmp	r3, #0
   12cca:	d001      	beq.n	12cd0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   12ccc:	2305      	movs	r3, #5
   12cce:	e00c      	b.n	12cea <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   12cd0:	687b      	ldr	r3, [r7, #4]
   12cd2:	2201      	movs	r2, #1
   12cd4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12cd6:	687b      	ldr	r3, [r7, #4]
   12cd8:	2201      	movs	r2, #1
   12cda:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   12cdc:	683a      	ldr	r2, [r7, #0]
   12cde:	687b      	ldr	r3, [r7, #4]
   12ce0:	0011      	movs	r1, r2
   12ce2:	0018      	movs	r0, r3
   12ce4:	4b03      	ldr	r3, [pc, #12]	; (12cf4 <i2c_master_read_packet_job+0x3c>)
   12ce6:	4798      	blx	r3
   12ce8:	0003      	movs	r3, r0
}
   12cea:	0018      	movs	r0, r3
   12cec:	46bd      	mov	sp, r7
   12cee:	b002      	add	sp, #8
   12cf0:	bd80      	pop	{r7, pc}
   12cf2:	46c0      	nop			; (mov r8, r8)
   12cf4:	00012b61 	.word	0x00012b61

00012cf8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12cf8:	b580      	push	{r7, lr}
   12cfa:	b084      	sub	sp, #16
   12cfc:	af00      	add	r7, sp, #0
   12cfe:	6078      	str	r0, [r7, #4]
   12d00:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12d02:	687b      	ldr	r3, [r7, #4]
   12d04:	681b      	ldr	r3, [r3, #0]
   12d06:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   12d08:	683b      	ldr	r3, [r7, #0]
   12d0a:	7a5b      	ldrb	r3, [r3, #9]
   12d0c:	2b00      	cmp	r3, #0
   12d0e:	d006      	beq.n	12d1e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   12d10:	683b      	ldr	r3, [r7, #0]
   12d12:	7a9a      	ldrb	r2, [r3, #10]
   12d14:	687b      	ldr	r3, [r7, #4]
   12d16:	0011      	movs	r1, r2
   12d18:	0018      	movs	r0, r3
   12d1a:	4b1e      	ldr	r3, [pc, #120]	; (12d94 <_i2c_master_write_packet+0x9c>)
   12d1c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   12d1e:	68fb      	ldr	r3, [r7, #12]
   12d20:	685b      	ldr	r3, [r3, #4]
   12d22:	4a1d      	ldr	r2, [pc, #116]	; (12d98 <_i2c_master_write_packet+0xa0>)
   12d24:	401a      	ands	r2, r3
   12d26:	68fb      	ldr	r3, [r7, #12]
   12d28:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   12d2a:	683b      	ldr	r3, [r7, #0]
   12d2c:	685a      	ldr	r2, [r3, #4]
   12d2e:	687b      	ldr	r3, [r7, #4]
   12d30:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   12d32:	683b      	ldr	r3, [r7, #0]
   12d34:	885a      	ldrh	r2, [r3, #2]
   12d36:	687b      	ldr	r3, [r7, #4]
   12d38:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   12d3a:	687b      	ldr	r3, [r7, #4]
   12d3c:	2224      	movs	r2, #36	; 0x24
   12d3e:	2100      	movs	r1, #0
   12d40:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   12d42:	687b      	ldr	r3, [r7, #4]
   12d44:	2225      	movs	r2, #37	; 0x25
   12d46:	2105      	movs	r1, #5
   12d48:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   12d4a:	68fb      	ldr	r3, [r7, #12]
   12d4c:	2203      	movs	r2, #3
   12d4e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   12d50:	683b      	ldr	r3, [r7, #0]
   12d52:	7a1b      	ldrb	r3, [r3, #8]
   12d54:	2b00      	cmp	r3, #0
   12d56:	d00d      	beq.n	12d74 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12d58:	683b      	ldr	r3, [r7, #0]
   12d5a:	881b      	ldrh	r3, [r3, #0]
   12d5c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12d5e:	683b      	ldr	r3, [r7, #0]
   12d60:	7a5b      	ldrb	r3, [r3, #9]
   12d62:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12d64:	4313      	orrs	r3, r2
   12d66:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   12d68:	2380      	movs	r3, #128	; 0x80
   12d6a:	021b      	lsls	r3, r3, #8
   12d6c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12d6e:	68fb      	ldr	r3, [r7, #12]
   12d70:	625a      	str	r2, [r3, #36]	; 0x24
   12d72:	e009      	b.n	12d88 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12d74:	683b      	ldr	r3, [r7, #0]
   12d76:	881b      	ldrh	r3, [r3, #0]
   12d78:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   12d7a:	683b      	ldr	r3, [r7, #0]
   12d7c:	7a5b      	ldrb	r3, [r3, #9]
   12d7e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   12d80:	4313      	orrs	r3, r2
   12d82:	001a      	movs	r2, r3
   12d84:	68fb      	ldr	r3, [r7, #12]
   12d86:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   12d88:	2300      	movs	r3, #0
}
   12d8a:	0018      	movs	r0, r3
   12d8c:	46bd      	mov	sp, r7
   12d8e:	b004      	add	sp, #16
   12d90:	bd80      	pop	{r7, pc}
   12d92:	46c0      	nop			; (mov r8, r8)
   12d94:	00016625 	.word	0x00016625
   12d98:	fffbffff 	.word	0xfffbffff

00012d9c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12d9c:	b580      	push	{r7, lr}
   12d9e:	b082      	sub	sp, #8
   12da0:	af00      	add	r7, sp, #0
   12da2:	6078      	str	r0, [r7, #4]
   12da4:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12da6:	687b      	ldr	r3, [r7, #4]
   12da8:	8b9b      	ldrh	r3, [r3, #28]
   12daa:	b29b      	uxth	r3, r3
   12dac:	2b00      	cmp	r3, #0
   12dae:	d001      	beq.n	12db4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   12db0:	2305      	movs	r3, #5
   12db2:	e00c      	b.n	12dce <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   12db4:	687b      	ldr	r3, [r7, #4]
   12db6:	2201      	movs	r2, #1
   12db8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12dba:	687b      	ldr	r3, [r7, #4]
   12dbc:	2201      	movs	r2, #1
   12dbe:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12dc0:	683a      	ldr	r2, [r7, #0]
   12dc2:	687b      	ldr	r3, [r7, #4]
   12dc4:	0011      	movs	r1, r2
   12dc6:	0018      	movs	r0, r3
   12dc8:	4b03      	ldr	r3, [pc, #12]	; (12dd8 <i2c_master_write_packet_job+0x3c>)
   12dca:	4798      	blx	r3
   12dcc:	0003      	movs	r3, r0
}
   12dce:	0018      	movs	r0, r3
   12dd0:	46bd      	mov	sp, r7
   12dd2:	b002      	add	sp, #8
   12dd4:	bd80      	pop	{r7, pc}
   12dd6:	46c0      	nop			; (mov r8, r8)
   12dd8:	00012cf9 	.word	0x00012cf9

00012ddc <i2c_master_write_packet_job_no_stop>:
 * \retval STATUS_BUSY  If module is currently busy with another
 */
enum status_code i2c_master_write_packet_job_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   12ddc:	b580      	push	{r7, lr}
   12dde:	b082      	sub	sp, #8
   12de0:	af00      	add	r7, sp, #0
   12de2:	6078      	str	r0, [r7, #4]
   12de4:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   12de6:	687b      	ldr	r3, [r7, #4]
   12de8:	8b9b      	ldrh	r3, [r3, #28]
   12dea:	b29b      	uxth	r3, r3
   12dec:	2b00      	cmp	r3, #0
   12dee:	d001      	beq.n	12df4 <i2c_master_write_packet_job_no_stop+0x18>
		return STATUS_BUSY;
   12df0:	2305      	movs	r3, #5
   12df2:	e00c      	b.n	12e0e <i2c_master_write_packet_job_no_stop+0x32>
	}

	/* Do not send stop condition when done */
	module->send_stop = false;
   12df4:	687b      	ldr	r3, [r7, #4]
   12df6:	2200      	movs	r2, #0
   12df8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   12dfa:	687b      	ldr	r3, [r7, #4]
   12dfc:	2201      	movs	r2, #1
   12dfe:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   12e00:	683a      	ldr	r2, [r7, #0]
   12e02:	687b      	ldr	r3, [r7, #4]
   12e04:	0011      	movs	r1, r2
   12e06:	0018      	movs	r0, r3
   12e08:	4b03      	ldr	r3, [pc, #12]	; (12e18 <i2c_master_write_packet_job_no_stop+0x3c>)
   12e0a:	4798      	blx	r3
   12e0c:	0003      	movs	r3, r0
}
   12e0e:	0018      	movs	r0, r3
   12e10:	46bd      	mov	sp, r7
   12e12:	b002      	add	sp, #8
   12e14:	bd80      	pop	{r7, pc}
   12e16:	46c0      	nop			; (mov r8, r8)
   12e18:	00012cf9 	.word	0x00012cf9

00012e1c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   12e1c:	b580      	push	{r7, lr}
   12e1e:	b086      	sub	sp, #24
   12e20:	af00      	add	r7, sp, #0
   12e22:	0002      	movs	r2, r0
   12e24:	1dfb      	adds	r3, r7, #7
   12e26:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   12e28:	1dfb      	adds	r3, r7, #7
   12e2a:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   12e2c:	4b93      	ldr	r3, [pc, #588]	; (1307c <_i2c_master_interrupt_handler+0x260>)
   12e2e:	0092      	lsls	r2, r2, #2
   12e30:	58d3      	ldr	r3, [r2, r3]
   12e32:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   12e34:	697b      	ldr	r3, [r7, #20]
   12e36:	681b      	ldr	r3, [r3, #0]
   12e38:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   12e3a:	693b      	ldr	r3, [r7, #16]
   12e3c:	681b      	ldr	r3, [r3, #0]
   12e3e:	011b      	lsls	r3, r3, #4
   12e40:	0fdb      	lsrs	r3, r3, #31
   12e42:	b2db      	uxtb	r3, r3
   12e44:	001a      	movs	r2, r3
   12e46:	230f      	movs	r3, #15
   12e48:	18fb      	adds	r3, r7, r3
   12e4a:	1e51      	subs	r1, r2, #1
   12e4c:	418a      	sbcs	r2, r1
   12e4e:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   12e50:	230e      	movs	r3, #14
   12e52:	18fb      	adds	r3, r7, r3
   12e54:	697a      	ldr	r2, [r7, #20]
   12e56:	7e52      	ldrb	r2, [r2, #25]
   12e58:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   12e5a:	697b      	ldr	r3, [r7, #20]
   12e5c:	7e1b      	ldrb	r3, [r3, #24]
   12e5e:	b2da      	uxtb	r2, r3
   12e60:	230e      	movs	r3, #14
   12e62:	18fb      	adds	r3, r7, r3
   12e64:	210e      	movs	r1, #14
   12e66:	1879      	adds	r1, r7, r1
   12e68:	7809      	ldrb	r1, [r1, #0]
   12e6a:	400a      	ands	r2, r1
   12e6c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   12e6e:	697b      	ldr	r3, [r7, #20]
   12e70:	8b5b      	ldrh	r3, [r3, #26]
   12e72:	b29b      	uxth	r3, r3
   12e74:	2b00      	cmp	r3, #0
   12e76:	d109      	bne.n	12e8c <_i2c_master_interrupt_handler+0x70>
   12e78:	697b      	ldr	r3, [r7, #20]
   12e7a:	8b9b      	ldrh	r3, [r3, #28]
   12e7c:	b29b      	uxth	r3, r3
   12e7e:	2b00      	cmp	r3, #0
   12e80:	d004      	beq.n	12e8c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   12e82:	697b      	ldr	r3, [r7, #20]
   12e84:	0018      	movs	r0, r3
   12e86:	4b7e      	ldr	r3, [pc, #504]	; (13080 <_i2c_master_interrupt_handler+0x264>)
   12e88:	4798      	blx	r3
   12e8a:	e070      	b.n	12f6e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12e8c:	697b      	ldr	r3, [r7, #20]
   12e8e:	8b5b      	ldrh	r3, [r3, #26]
   12e90:	b29b      	uxth	r3, r3
   12e92:	2b00      	cmp	r3, #0
   12e94:	d039      	beq.n	12f0a <_i2c_master_interrupt_handler+0xee>
   12e96:	697b      	ldr	r3, [r7, #20]
   12e98:	8b9b      	ldrh	r3, [r3, #28]
   12e9a:	b29b      	uxth	r3, r3
   12e9c:	2b00      	cmp	r3, #0
   12e9e:	d134      	bne.n	12f0a <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   12ea0:	697b      	ldr	r3, [r7, #20]
   12ea2:	2225      	movs	r2, #37	; 0x25
   12ea4:	5c9b      	ldrb	r3, [r3, r2]
   12ea6:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12ea8:	2b05      	cmp	r3, #5
   12eaa:	d12e      	bne.n	12f0a <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12eac:	697b      	ldr	r3, [r7, #20]
   12eae:	2224      	movs	r2, #36	; 0x24
   12eb0:	5c9b      	ldrb	r3, [r3, r2]
   12eb2:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12eb4:	2b00      	cmp	r3, #0
   12eb6:	d128      	bne.n	12f0a <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12eb8:	693b      	ldr	r3, [r7, #16]
   12eba:	2203      	movs	r2, #3
   12ebc:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   12ebe:	697b      	ldr	r3, [r7, #20]
   12ec0:	2200      	movs	r2, #0
   12ec2:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12ec4:	697b      	ldr	r3, [r7, #20]
   12ec6:	2225      	movs	r2, #37	; 0x25
   12ec8:	2100      	movs	r1, #0
   12eca:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   12ecc:	697b      	ldr	r3, [r7, #20]
   12ece:	7a9b      	ldrb	r3, [r3, #10]
   12ed0:	2b00      	cmp	r3, #0
   12ed2:	d00b      	beq.n	12eec <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   12ed4:	697b      	ldr	r3, [r7, #20]
   12ed6:	0018      	movs	r0, r3
   12ed8:	4b6a      	ldr	r3, [pc, #424]	; (13084 <_i2c_master_interrupt_handler+0x268>)
   12eda:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   12edc:	693b      	ldr	r3, [r7, #16]
   12ede:	685b      	ldr	r3, [r3, #4]
   12ee0:	22c0      	movs	r2, #192	; 0xc0
   12ee2:	0292      	lsls	r2, r2, #10
   12ee4:	431a      	orrs	r2, r3
   12ee6:	693b      	ldr	r3, [r7, #16]
   12ee8:	605a      	str	r2, [r3, #4]
   12eea:	e002      	b.n	12ef2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   12eec:	693b      	ldr	r3, [r7, #16]
   12eee:	2201      	movs	r2, #1
   12ef0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12ef2:	230e      	movs	r3, #14
   12ef4:	18fb      	adds	r3, r7, r3
   12ef6:	781b      	ldrb	r3, [r3, #0]
   12ef8:	2201      	movs	r2, #1
   12efa:	4013      	ands	r3, r2
   12efc:	d037      	beq.n	12f6e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12efe:	697b      	ldr	r3, [r7, #20]
   12f00:	68db      	ldr	r3, [r3, #12]
   12f02:	697a      	ldr	r2, [r7, #20]
   12f04:	0010      	movs	r0, r2
   12f06:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   12f08:	e031      	b.n	12f6e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   12f0a:	697b      	ldr	r3, [r7, #20]
   12f0c:	8b5b      	ldrh	r3, [r3, #26]
   12f0e:	b29b      	uxth	r3, r3
   12f10:	2b00      	cmp	r3, #0
   12f12:	d02c      	beq.n	12f6e <_i2c_master_interrupt_handler+0x152>
   12f14:	697b      	ldr	r3, [r7, #20]
   12f16:	8b9b      	ldrh	r3, [r3, #28]
   12f18:	b29b      	uxth	r3, r3
   12f1a:	2b00      	cmp	r3, #0
   12f1c:	d027      	beq.n	12f6e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12f1e:	693b      	ldr	r3, [r7, #16]
   12f20:	8b5b      	ldrh	r3, [r3, #26]
   12f22:	b29b      	uxth	r3, r3
   12f24:	001a      	movs	r2, r3
   12f26:	2320      	movs	r3, #32
   12f28:	4013      	ands	r3, r2
   12f2a:	d111      	bne.n	12f50 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12f2c:	230f      	movs	r3, #15
   12f2e:	18fb      	adds	r3, r7, r3
   12f30:	781b      	ldrb	r3, [r3, #0]
   12f32:	2201      	movs	r2, #1
   12f34:	4053      	eors	r3, r2
   12f36:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   12f38:	2b00      	cmp	r3, #0
   12f3a:	d104      	bne.n	12f46 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   12f3c:	697b      	ldr	r3, [r7, #20]
   12f3e:	8b9b      	ldrh	r3, [r3, #28]
   12f40:	b29b      	uxth	r3, r3
   12f42:	2b01      	cmp	r3, #1
   12f44:	d004      	beq.n	12f50 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   12f46:	697b      	ldr	r3, [r7, #20]
   12f48:	2225      	movs	r2, #37	; 0x25
   12f4a:	2141      	movs	r1, #65	; 0x41
   12f4c:	5499      	strb	r1, [r3, r2]
   12f4e:	e00e      	b.n	12f6e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   12f50:	697b      	ldr	r3, [r7, #20]
   12f52:	2224      	movs	r2, #36	; 0x24
   12f54:	5c9b      	ldrb	r3, [r3, r2]
   12f56:	b2db      	uxtb	r3, r3
   12f58:	2b00      	cmp	r3, #0
   12f5a:	d104      	bne.n	12f66 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   12f5c:	697b      	ldr	r3, [r7, #20]
   12f5e:	0018      	movs	r0, r3
   12f60:	4b49      	ldr	r3, [pc, #292]	; (13088 <_i2c_master_interrupt_handler+0x26c>)
   12f62:	4798      	blx	r3
   12f64:	e003      	b.n	12f6e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   12f66:	697b      	ldr	r3, [r7, #20]
   12f68:	0018      	movs	r0, r3
   12f6a:	4b48      	ldr	r3, [pc, #288]	; (1308c <_i2c_master_interrupt_handler+0x270>)
   12f6c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12f6e:	697b      	ldr	r3, [r7, #20]
   12f70:	8b5b      	ldrh	r3, [r3, #26]
   12f72:	b29b      	uxth	r3, r3
   12f74:	2b00      	cmp	r3, #0
   12f76:	d047      	beq.n	13008 <_i2c_master_interrupt_handler+0x1ec>
   12f78:	697b      	ldr	r3, [r7, #20]
   12f7a:	8b9b      	ldrh	r3, [r3, #28]
   12f7c:	b29b      	uxth	r3, r3
   12f7e:	2b00      	cmp	r3, #0
   12f80:	d142      	bne.n	13008 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   12f82:	697b      	ldr	r3, [r7, #20]
   12f84:	2225      	movs	r2, #37	; 0x25
   12f86:	5c9b      	ldrb	r3, [r3, r2]
   12f88:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   12f8a:	2b05      	cmp	r3, #5
   12f8c:	d13c      	bne.n	13008 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   12f8e:	697b      	ldr	r3, [r7, #20]
   12f90:	2224      	movs	r2, #36	; 0x24
   12f92:	5c9b      	ldrb	r3, [r3, r2]
   12f94:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   12f96:	2b01      	cmp	r3, #1
   12f98:	d136      	bne.n	13008 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   12f9a:	693b      	ldr	r3, [r7, #16]
   12f9c:	7e1b      	ldrb	r3, [r3, #24]
   12f9e:	b2db      	uxtb	r3, r3
   12fa0:	001a      	movs	r2, r3
   12fa2:	2302      	movs	r3, #2
   12fa4:	4013      	ands	r3, r2
   12fa6:	d002      	beq.n	12fae <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   12fa8:	693b      	ldr	r3, [r7, #16]
   12faa:	2202      	movs	r2, #2
   12fac:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   12fae:	693b      	ldr	r3, [r7, #16]
   12fb0:	2203      	movs	r2, #3
   12fb2:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   12fb4:	697b      	ldr	r3, [r7, #20]
   12fb6:	2200      	movs	r2, #0
   12fb8:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   12fba:	697b      	ldr	r3, [r7, #20]
   12fbc:	2225      	movs	r2, #37	; 0x25
   12fbe:	2100      	movs	r1, #0
   12fc0:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   12fc2:	230e      	movs	r3, #14
   12fc4:	18fb      	adds	r3, r7, r3
   12fc6:	781b      	ldrb	r3, [r3, #0]
   12fc8:	2202      	movs	r2, #2
   12fca:	4013      	ands	r3, r2
   12fcc:	d00b      	beq.n	12fe6 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   12fce:	697b      	ldr	r3, [r7, #20]
   12fd0:	2224      	movs	r2, #36	; 0x24
   12fd2:	5c9b      	ldrb	r3, [r3, r2]
   12fd4:	b2db      	uxtb	r3, r3
   12fd6:	2b01      	cmp	r3, #1
   12fd8:	d105      	bne.n	12fe6 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   12fda:	697b      	ldr	r3, [r7, #20]
   12fdc:	691b      	ldr	r3, [r3, #16]
   12fde:	697a      	ldr	r2, [r7, #20]
   12fe0:	0010      	movs	r0, r2
   12fe2:	4798      	blx	r3
   12fe4:	e010      	b.n	13008 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   12fe6:	230e      	movs	r3, #14
   12fe8:	18fb      	adds	r3, r7, r3
   12fea:	781b      	ldrb	r3, [r3, #0]
   12fec:	2201      	movs	r2, #1
   12fee:	4013      	ands	r3, r2
   12ff0:	d00a      	beq.n	13008 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   12ff2:	697b      	ldr	r3, [r7, #20]
   12ff4:	2224      	movs	r2, #36	; 0x24
   12ff6:	5c9b      	ldrb	r3, [r3, r2]
   12ff8:	b2db      	uxtb	r3, r3
   12ffa:	2b00      	cmp	r3, #0
   12ffc:	d104      	bne.n	13008 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   12ffe:	697b      	ldr	r3, [r7, #20]
   13000:	68db      	ldr	r3, [r3, #12]
   13002:	697a      	ldr	r2, [r7, #20]
   13004:	0010      	movs	r0, r2
   13006:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13008:	697b      	ldr	r3, [r7, #20]
   1300a:	2225      	movs	r2, #37	; 0x25
   1300c:	5c9b      	ldrb	r3, [r3, r2]
   1300e:	b2db      	uxtb	r3, r3
   13010:	2b05      	cmp	r3, #5
   13012:	d02e      	beq.n	13072 <_i2c_master_interrupt_handler+0x256>
   13014:	697b      	ldr	r3, [r7, #20]
   13016:	2225      	movs	r2, #37	; 0x25
   13018:	5c9b      	ldrb	r3, [r3, r2]
   1301a:	b2db      	uxtb	r3, r3
   1301c:	2b00      	cmp	r3, #0
   1301e:	d028      	beq.n	13072 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13020:	693b      	ldr	r3, [r7, #16]
   13022:	2203      	movs	r2, #3
   13024:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13026:	697b      	ldr	r3, [r7, #20]
   13028:	2200      	movs	r2, #0
   1302a:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   1302c:	697b      	ldr	r3, [r7, #20]
   1302e:	2200      	movs	r2, #0
   13030:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13032:	697b      	ldr	r3, [r7, #20]
   13034:	2225      	movs	r2, #37	; 0x25
   13036:	5c9b      	ldrb	r3, [r3, r2]
   13038:	b2db      	uxtb	r3, r3
   1303a:	2b41      	cmp	r3, #65	; 0x41
   1303c:	d00e      	beq.n	1305c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   1303e:	697b      	ldr	r3, [r7, #20]
   13040:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13042:	2b00      	cmp	r3, #0
   13044:	d00a      	beq.n	1305c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   13046:	697b      	ldr	r3, [r7, #20]
   13048:	0018      	movs	r0, r3
   1304a:	4b0e      	ldr	r3, [pc, #56]	; (13084 <_i2c_master_interrupt_handler+0x268>)
   1304c:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   1304e:	693b      	ldr	r3, [r7, #16]
   13050:	685b      	ldr	r3, [r3, #4]
   13052:	22e0      	movs	r2, #224	; 0xe0
   13054:	02d2      	lsls	r2, r2, #11
   13056:	431a      	orrs	r2, r3
   13058:	693b      	ldr	r3, [r7, #16]
   1305a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   1305c:	230e      	movs	r3, #14
   1305e:	18fb      	adds	r3, r7, r3
   13060:	781b      	ldrb	r3, [r3, #0]
   13062:	2204      	movs	r2, #4
   13064:	4013      	ands	r3, r2
   13066:	d004      	beq.n	13072 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13068:	697b      	ldr	r3, [r7, #20]
   1306a:	695b      	ldr	r3, [r3, #20]
   1306c:	697a      	ldr	r2, [r7, #20]
   1306e:	0010      	movs	r0, r2
   13070:	4798      	blx	r3
		}
	}
}
   13072:	46c0      	nop			; (mov r8, r8)
   13074:	46bd      	mov	sp, r7
   13076:	b006      	add	sp, #24
   13078:	bd80      	pop	{r7, pc}
   1307a:	46c0      	nop			; (mov r8, r8)
   1307c:	200059c8 	.word	0x200059c8
   13080:	00012a5d 	.word	0x00012a5d
   13084:	000128cd 	.word	0x000128cd
   13088:	000129e1 	.word	0x000129e1
   1308c:	000128f1 	.word	0x000128f1

00013090 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13090:	b580      	push	{r7, lr}
   13092:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13094:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13098:	4b02      	ldr	r3, [pc, #8]	; (130a4 <NVIC_SystemReset+0x14>)
   1309a:	4a03      	ldr	r2, [pc, #12]	; (130a8 <NVIC_SystemReset+0x18>)
   1309c:	60da      	str	r2, [r3, #12]
   1309e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   130a2:	e7fe      	b.n	130a2 <NVIC_SystemReset+0x12>
   130a4:	e000ed00 	.word	0xe000ed00
   130a8:	05fa0004 	.word	0x05fa0004

000130ac <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   130ac:	b580      	push	{r7, lr}
   130ae:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   130b0:	4b02      	ldr	r3, [pc, #8]	; (130bc <system_reset+0x10>)
   130b2:	4798      	blx	r3
}
   130b4:	46c0      	nop			; (mov r8, r8)
   130b6:	46bd      	mov	sp, r7
   130b8:	bd80      	pop	{r7, pc}
   130ba:	46c0      	nop			; (mov r8, r8)
   130bc:	00013091 	.word	0x00013091

000130c0 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   130c0:	b580      	push	{r7, lr}
   130c2:	b086      	sub	sp, #24
   130c4:	af00      	add	r7, sp, #0
   130c6:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   130c8:	4b9e      	ldr	r3, [pc, #632]	; (13344 <vCommandConsoleTask+0x284>)
   130ca:	0018      	movs	r0, r3
   130cc:	4b9e      	ldr	r3, [pc, #632]	; (13348 <vCommandConsoleTask+0x288>)
   130ce:	4798      	blx	r3
    /*FreeRTOS_CLIRegisterCommand(&xImuGetCommand);*/
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   130d0:	4b9e      	ldr	r3, [pc, #632]	; (1334c <vCommandConsoleTask+0x28c>)
   130d2:	0018      	movs	r0, r3
   130d4:	4b9c      	ldr	r3, [pc, #624]	; (13348 <vCommandConsoleTask+0x288>)
   130d6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   130d8:	4b9d      	ldr	r3, [pc, #628]	; (13350 <vCommandConsoleTask+0x290>)
   130da:	0018      	movs	r0, r3
   130dc:	4b9a      	ldr	r3, [pc, #616]	; (13348 <vCommandConsoleTask+0x288>)
   130de:	4798      	blx	r3
    /*FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);*/
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   130e0:	4b9c      	ldr	r3, [pc, #624]	; (13354 <vCommandConsoleTask+0x294>)
   130e2:	0018      	movs	r0, r3
   130e4:	4b98      	ldr	r3, [pc, #608]	; (13348 <vCommandConsoleTask+0x288>)
   130e6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xTemp);
   130e8:	4b9b      	ldr	r3, [pc, #620]	; (13358 <vCommandConsoleTask+0x298>)
   130ea:	0018      	movs	r0, r3
   130ec:	4b96      	ldr	r3, [pc, #600]	; (13348 <vCommandConsoleTask+0x288>)
   130ee:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xAlsGetCommand);
   130f0:	4b9a      	ldr	r3, [pc, #616]	; (1335c <vCommandConsoleTask+0x29c>)
   130f2:	0018      	movs	r0, r3
   130f4:	4b94      	ldr	r3, [pc, #592]	; (13348 <vCommandConsoleTask+0x288>)
   130f6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xCalcAndSend);
   130f8:	4b99      	ldr	r3, [pc, #612]	; (13360 <vCommandConsoleTask+0x2a0>)
   130fa:	0018      	movs	r0, r3
   130fc:	4b92      	ldr	r3, [pc, #584]	; (13348 <vCommandConsoleTask+0x288>)
   130fe:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xPIR);
   13100:	4b98      	ldr	r3, [pc, #608]	; (13364 <vCommandConsoleTask+0x2a4>)
   13102:	0018      	movs	r0, r3
   13104:	4b90      	ldr	r3, [pc, #576]	; (13348 <vCommandConsoleTask+0x288>)
   13106:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xLED);
   13108:	4b97      	ldr	r3, [pc, #604]	; (13368 <vCommandConsoleTask+0x2a8>)
   1310a:	0018      	movs	r0, r3
   1310c:	4b8e      	ldr	r3, [pc, #568]	; (13348 <vCommandConsoleTask+0x288>)
   1310e:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13110:	2317      	movs	r3, #23
   13112:	18fb      	adds	r3, r7, r3
   13114:	2200      	movs	r2, #0
   13116:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13118:	4b94      	ldr	r3, [pc, #592]	; (1336c <vCommandConsoleTask+0x2ac>)
   1311a:	0018      	movs	r0, r3
   1311c:	4b94      	ldr	r3, [pc, #592]	; (13370 <vCommandConsoleTask+0x2b0>)
   1311e:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13120:	2203      	movs	r2, #3
   13122:	2100      	movs	r1, #0
   13124:	2001      	movs	r0, #1
   13126:	4b93      	ldr	r3, [pc, #588]	; (13374 <vCommandConsoleTask+0x2b4>)
   13128:	4798      	blx	r3
   1312a:	0002      	movs	r2, r0
   1312c:	4b92      	ldr	r3, [pc, #584]	; (13378 <vCommandConsoleTask+0x2b8>)
   1312e:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13130:	4b91      	ldr	r3, [pc, #580]	; (13378 <vCommandConsoleTask+0x2b8>)
   13132:	681b      	ldr	r3, [r3, #0]
   13134:	2b00      	cmp	r3, #0
   13136:	d107      	bne.n	13148 <vCommandConsoleTask+0x88>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13138:	4b90      	ldr	r3, [pc, #576]	; (1337c <vCommandConsoleTask+0x2bc>)
   1313a:	0019      	movs	r1, r3
   1313c:	2003      	movs	r0, #3
   1313e:	4b90      	ldr	r3, [pc, #576]	; (13380 <vCommandConsoleTask+0x2c0>)
   13140:	4798      	blx	r3
        vTaskSuspend(NULL);
   13142:	2000      	movs	r0, #0
   13144:	4b8f      	ldr	r3, [pc, #572]	; (13384 <vCommandConsoleTask+0x2c4>)
   13146:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13148:	230c      	movs	r3, #12
   1314a:	18fb      	adds	r3, r7, r3
   1314c:	0018      	movs	r0, r3
   1314e:	4b8e      	ldr	r3, [pc, #568]	; (13388 <vCommandConsoleTask+0x2c8>)
   13150:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   13152:	230c      	movs	r3, #12
   13154:	18fb      	adds	r3, r7, r3
   13156:	781b      	ldrb	r3, [r3, #0]
   13158:	2b0a      	cmp	r3, #10
   1315a:	d004      	beq.n	13166 <vCommandConsoleTask+0xa6>
   1315c:	230c      	movs	r3, #12
   1315e:	18fb      	adds	r3, r7, r3
   13160:	781b      	ldrb	r3, [r3, #0]
   13162:	2b0d      	cmp	r3, #13
   13164:	d137      	bne.n	131d6 <vCommandConsoleTask+0x116>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   13166:	4b89      	ldr	r3, [pc, #548]	; (1338c <vCommandConsoleTask+0x2cc>)
   13168:	0018      	movs	r0, r3
   1316a:	4b81      	ldr	r3, [pc, #516]	; (13370 <vCommandConsoleTask+0x2b0>)
   1316c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   1316e:	4b88      	ldr	r3, [pc, #544]	; (13390 <vCommandConsoleTask+0x2d0>)
   13170:	2200      	movs	r2, #0
   13172:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   13174:	4b87      	ldr	r3, [pc, #540]	; (13394 <vCommandConsoleTask+0x2d4>)
   13176:	2200      	movs	r2, #0
   13178:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   1317a:	4987      	ldr	r1, [pc, #540]	; (13398 <vCommandConsoleTask+0x2d8>)
   1317c:	4b87      	ldr	r3, [pc, #540]	; (1339c <vCommandConsoleTask+0x2dc>)
   1317e:	2231      	movs	r2, #49	; 0x31
   13180:	0018      	movs	r0, r3
   13182:	4b87      	ldr	r3, [pc, #540]	; (133a0 <vCommandConsoleTask+0x2e0>)
   13184:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   13186:	4b85      	ldr	r3, [pc, #532]	; (1339c <vCommandConsoleTask+0x2dc>)
   13188:	2231      	movs	r2, #49	; 0x31
   1318a:	2100      	movs	r1, #0
   1318c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   1318e:	4985      	ldr	r1, [pc, #532]	; (133a4 <vCommandConsoleTask+0x2e4>)
   13190:	4b81      	ldr	r3, [pc, #516]	; (13398 <vCommandConsoleTask+0x2d8>)
   13192:	2282      	movs	r2, #130	; 0x82
   13194:	0018      	movs	r0, r3
   13196:	4b84      	ldr	r3, [pc, #528]	; (133a8 <vCommandConsoleTask+0x2e8>)
   13198:	4798      	blx	r3
   1319a:	0003      	movs	r3, r0
   1319c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   1319e:	4b81      	ldr	r3, [pc, #516]	; (133a4 <vCommandConsoleTask+0x2e4>)
   131a0:	2281      	movs	r2, #129	; 0x81
   131a2:	2100      	movs	r1, #0
   131a4:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   131a6:	4b7f      	ldr	r3, [pc, #508]	; (133a4 <vCommandConsoleTask+0x2e4>)
   131a8:	0018      	movs	r0, r3
   131aa:	4b71      	ldr	r3, [pc, #452]	; (13370 <vCommandConsoleTask+0x2b0>)
   131ac:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   131ae:	693b      	ldr	r3, [r7, #16]
   131b0:	2b00      	cmp	r3, #0
   131b2:	d1ec      	bne.n	1318e <vCommandConsoleTask+0xce>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   131b4:	2317      	movs	r3, #23
   131b6:	18fb      	adds	r3, r7, r3
   131b8:	2200      	movs	r2, #0
   131ba:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   131bc:	4b76      	ldr	r3, [pc, #472]	; (13398 <vCommandConsoleTask+0x2d8>)
   131be:	2232      	movs	r2, #50	; 0x32
   131c0:	2100      	movs	r1, #0
   131c2:	0018      	movs	r0, r3
   131c4:	4b79      	ldr	r3, [pc, #484]	; (133ac <vCommandConsoleTask+0x2ec>)
   131c6:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   131c8:	4b76      	ldr	r3, [pc, #472]	; (133a4 <vCommandConsoleTask+0x2e4>)
   131ca:	2282      	movs	r2, #130	; 0x82
   131cc:	2100      	movs	r1, #0
   131ce:	0018      	movs	r0, r3
   131d0:	4b76      	ldr	r3, [pc, #472]	; (133ac <vCommandConsoleTask+0x2ec>)
   131d2:	4798      	blx	r3
   131d4:	e0b5      	b.n	13342 <vCommandConsoleTask+0x282>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   131d6:	4b6e      	ldr	r3, [pc, #440]	; (13390 <vCommandConsoleTask+0x2d0>)
   131d8:	781b      	ldrb	r3, [r3, #0]
   131da:	2b00      	cmp	r3, #0
   131dc:	d059      	beq.n	13292 <vCommandConsoleTask+0x1d2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   131de:	4b6d      	ldr	r3, [pc, #436]	; (13394 <vCommandConsoleTask+0x2d4>)
   131e0:	781b      	ldrb	r3, [r3, #0]
   131e2:	2b03      	cmp	r3, #3
   131e4:	d80c      	bhi.n	13200 <vCommandConsoleTask+0x140>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   131e6:	4b6b      	ldr	r3, [pc, #428]	; (13394 <vCommandConsoleTask+0x2d4>)
   131e8:	781b      	ldrb	r3, [r3, #0]
   131ea:	1c5a      	adds	r2, r3, #1
   131ec:	b2d1      	uxtb	r1, r2
   131ee:	4a69      	ldr	r2, [pc, #420]	; (13394 <vCommandConsoleTask+0x2d4>)
   131f0:	7011      	strb	r1, [r2, #0]
   131f2:	001a      	movs	r2, r3
   131f4:	230c      	movs	r3, #12
   131f6:	18fb      	adds	r3, r7, r3
   131f8:	7819      	ldrb	r1, [r3, #0]
   131fa:	4b6d      	ldr	r3, [pc, #436]	; (133b0 <vCommandConsoleTask+0x2f0>)
   131fc:	5499      	strb	r1, [r3, r2]
   131fe:	e005      	b.n	1320c <vCommandConsoleTask+0x14c>
                } else {
                    isEscapeCode = false;
   13200:	4b63      	ldr	r3, [pc, #396]	; (13390 <vCommandConsoleTask+0x2d0>)
   13202:	2200      	movs	r2, #0
   13204:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   13206:	4b63      	ldr	r3, [pc, #396]	; (13394 <vCommandConsoleTask+0x2d4>)
   13208:	2200      	movs	r2, #0
   1320a:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   1320c:	4b61      	ldr	r3, [pc, #388]	; (13394 <vCommandConsoleTask+0x2d4>)
   1320e:	781b      	ldrb	r3, [r3, #0]
   13210:	2b01      	cmp	r3, #1
   13212:	d999      	bls.n	13148 <vCommandConsoleTask+0x88>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   13214:	4a67      	ldr	r2, [pc, #412]	; (133b4 <vCommandConsoleTask+0x2f4>)
   13216:	4b66      	ldr	r3, [pc, #408]	; (133b0 <vCommandConsoleTask+0x2f0>)
   13218:	0011      	movs	r1, r2
   1321a:	0018      	movs	r0, r3
   1321c:	4b66      	ldr	r3, [pc, #408]	; (133b8 <vCommandConsoleTask+0x2f8>)
   1321e:	4798      	blx	r3
   13220:	1e03      	subs	r3, r0, #0
   13222:	d02f      	beq.n	13284 <vCommandConsoleTask+0x1c4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   13224:	4965      	ldr	r1, [pc, #404]	; (133bc <vCommandConsoleTask+0x2fc>)
   13226:	4b5c      	ldr	r3, [pc, #368]	; (13398 <vCommandConsoleTask+0x2d8>)
   13228:	221b      	movs	r2, #27
   1322a:	0018      	movs	r0, r3
   1322c:	4b64      	ldr	r3, [pc, #400]	; (133c0 <vCommandConsoleTask+0x300>)
   1322e:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   13230:	4b59      	ldr	r3, [pc, #356]	; (13398 <vCommandConsoleTask+0x2d8>)
   13232:	0018      	movs	r0, r3
   13234:	4b4e      	ldr	r3, [pc, #312]	; (13370 <vCommandConsoleTask+0x2b0>)
   13236:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   13238:	2317      	movs	r3, #23
   1323a:	18fb      	adds	r3, r7, r3
   1323c:	2200      	movs	r2, #0
   1323e:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   13240:	4b55      	ldr	r3, [pc, #340]	; (13398 <vCommandConsoleTask+0x2d8>)
   13242:	2232      	movs	r2, #50	; 0x32
   13244:	2100      	movs	r1, #0
   13246:	0018      	movs	r0, r3
   13248:	4b58      	ldr	r3, [pc, #352]	; (133ac <vCommandConsoleTask+0x2ec>)
   1324a:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   1324c:	4953      	ldr	r1, [pc, #332]	; (1339c <vCommandConsoleTask+0x2dc>)
   1324e:	4b52      	ldr	r3, [pc, #328]	; (13398 <vCommandConsoleTask+0x2d8>)
   13250:	2231      	movs	r2, #49	; 0x31
   13252:	0018      	movs	r0, r3
   13254:	4b52      	ldr	r3, [pc, #328]	; (133a0 <vCommandConsoleTask+0x2e0>)
   13256:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   13258:	4b4f      	ldr	r3, [pc, #316]	; (13398 <vCommandConsoleTask+0x2d8>)
   1325a:	0018      	movs	r0, r3
   1325c:	4b59      	ldr	r3, [pc, #356]	; (133c4 <vCommandConsoleTask+0x304>)
   1325e:	4798      	blx	r3
   13260:	0003      	movs	r3, r0
   13262:	2b30      	cmp	r3, #48	; 0x30
   13264:	d806      	bhi.n	13274 <vCommandConsoleTask+0x1b4>
   13266:	4b4d      	ldr	r3, [pc, #308]	; (1339c <vCommandConsoleTask+0x2dc>)
   13268:	0018      	movs	r0, r3
   1326a:	4b56      	ldr	r3, [pc, #344]	; (133c4 <vCommandConsoleTask+0x304>)
   1326c:	4798      	blx	r3
   1326e:	0003      	movs	r3, r0
   13270:	b2da      	uxtb	r2, r3
   13272:	e000      	b.n	13276 <vCommandConsoleTask+0x1b6>
   13274:	2231      	movs	r2, #49	; 0x31
   13276:	2317      	movs	r3, #23
   13278:	18fb      	adds	r3, r7, r3
   1327a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1327c:	4b46      	ldr	r3, [pc, #280]	; (13398 <vCommandConsoleTask+0x2d8>)
   1327e:	0018      	movs	r0, r3
   13280:	4b3b      	ldr	r3, [pc, #236]	; (13370 <vCommandConsoleTask+0x2b0>)
   13282:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   13284:	4b42      	ldr	r3, [pc, #264]	; (13390 <vCommandConsoleTask+0x2d0>)
   13286:	2200      	movs	r2, #0
   13288:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1328a:	4b42      	ldr	r3, [pc, #264]	; (13394 <vCommandConsoleTask+0x2d4>)
   1328c:	2200      	movs	r2, #0
   1328e:	701a      	strb	r2, [r3, #0]
   13290:	e75a      	b.n	13148 <vCommandConsoleTask+0x88>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   13292:	230c      	movs	r3, #12
   13294:	18fb      	adds	r3, r7, r3
   13296:	781b      	ldrb	r3, [r3, #0]
   13298:	2b0d      	cmp	r3, #13
   1329a:	d100      	bne.n	1329e <vCommandConsoleTask+0x1de>
   1329c:	e754      	b.n	13148 <vCommandConsoleTask+0x88>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1329e:	230c      	movs	r3, #12
   132a0:	18fb      	adds	r3, r7, r3
   132a2:	781b      	ldrb	r3, [r3, #0]
   132a4:	2b08      	cmp	r3, #8
   132a6:	d004      	beq.n	132b2 <vCommandConsoleTask+0x1f2>
   132a8:	230c      	movs	r3, #12
   132aa:	18fb      	adds	r3, r7, r3
   132ac:	781b      	ldrb	r3, [r3, #0]
   132ae:	2b7f      	cmp	r3, #127	; 0x7f
   132b0:	d11c      	bne.n	132ec <vCommandConsoleTask+0x22c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   132b2:	2308      	movs	r3, #8
   132b4:	18fb      	adds	r3, r7, r3
   132b6:	4a44      	ldr	r2, [pc, #272]	; (133c8 <vCommandConsoleTask+0x308>)
   132b8:	6812      	ldr	r2, [r2, #0]
   132ba:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   132bc:	2308      	movs	r3, #8
   132be:	18fb      	adds	r3, r7, r3
   132c0:	0018      	movs	r0, r3
   132c2:	4b2b      	ldr	r3, [pc, #172]	; (13370 <vCommandConsoleTask+0x2b0>)
   132c4:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   132c6:	2317      	movs	r3, #23
   132c8:	18fb      	adds	r3, r7, r3
   132ca:	781b      	ldrb	r3, [r3, #0]
   132cc:	2b00      	cmp	r3, #0
   132ce:	d037      	beq.n	13340 <vCommandConsoleTask+0x280>
                    cInputIndex--;
   132d0:	2317      	movs	r3, #23
   132d2:	18fb      	adds	r3, r7, r3
   132d4:	781a      	ldrb	r2, [r3, #0]
   132d6:	2317      	movs	r3, #23
   132d8:	18fb      	adds	r3, r7, r3
   132da:	3a01      	subs	r2, #1
   132dc:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   132de:	2317      	movs	r3, #23
   132e0:	18fb      	adds	r3, r7, r3
   132e2:	781b      	ldrb	r3, [r3, #0]
   132e4:	4a2c      	ldr	r2, [pc, #176]	; (13398 <vCommandConsoleTask+0x2d8>)
   132e6:	2100      	movs	r1, #0
   132e8:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   132ea:	e029      	b.n	13340 <vCommandConsoleTask+0x280>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   132ec:	230c      	movs	r3, #12
   132ee:	18fb      	adds	r3, r7, r3
   132f0:	781b      	ldrb	r3, [r3, #0]
   132f2:	2b1b      	cmp	r3, #27
   132f4:	d106      	bne.n	13304 <vCommandConsoleTask+0x244>
                isEscapeCode = true;  // Next characters will be code arguments
   132f6:	4b26      	ldr	r3, [pc, #152]	; (13390 <vCommandConsoleTask+0x2d0>)
   132f8:	2201      	movs	r2, #1
   132fa:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   132fc:	4b25      	ldr	r3, [pc, #148]	; (13394 <vCommandConsoleTask+0x2d4>)
   132fe:	2200      	movs	r2, #0
   13300:	701a      	strb	r2, [r3, #0]
   13302:	e721      	b.n	13148 <vCommandConsoleTask+0x88>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   13304:	2317      	movs	r3, #23
   13306:	18fb      	adds	r3, r7, r3
   13308:	781b      	ldrb	r3, [r3, #0]
   1330a:	2b31      	cmp	r3, #49	; 0x31
   1330c:	d80e      	bhi.n	1332c <vCommandConsoleTask+0x26c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   1330e:	2317      	movs	r3, #23
   13310:	18fb      	adds	r3, r7, r3
   13312:	781b      	ldrb	r3, [r3, #0]
   13314:	220c      	movs	r2, #12
   13316:	18ba      	adds	r2, r7, r2
   13318:	7811      	ldrb	r1, [r2, #0]
   1331a:	4a1f      	ldr	r2, [pc, #124]	; (13398 <vCommandConsoleTask+0x2d8>)
   1331c:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   1331e:	2317      	movs	r3, #23
   13320:	18fb      	adds	r3, r7, r3
   13322:	781a      	ldrb	r2, [r3, #0]
   13324:	2317      	movs	r3, #23
   13326:	18fb      	adds	r3, r7, r3
   13328:	3201      	adds	r2, #1
   1332a:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   1332c:	230c      	movs	r3, #12
   1332e:	18fb      	adds	r3, r7, r3
   13330:	2200      	movs	r2, #0
   13332:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   13334:	230c      	movs	r3, #12
   13336:	18fb      	adds	r3, r7, r3
   13338:	0018      	movs	r0, r3
   1333a:	4b0d      	ldr	r3, [pc, #52]	; (13370 <vCommandConsoleTask+0x2b0>)
   1333c:	4798      	blx	r3
   1333e:	e703      	b.n	13148 <vCommandConsoleTask+0x88>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   13340:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   13342:	e701      	b.n	13148 <vCommandConsoleTask+0x88>
   13344:	000348b4 	.word	0x000348b4
   13348:	0001676d 	.word	0x0001676d
   1334c:	00034934 	.word	0x00034934
   13350:	000348c4 	.word	0x000348c4
   13354:	000348d4 	.word	0x000348d4
   13358:	000348e4 	.word	0x000348e4
   1335c:	00034924 	.word	0x00034924
   13360:	000348f4 	.word	0x000348f4
   13364:	00034904 	.word	0x00034904
   13368:	00034914 	.word	0x00034914
   1336c:	00034560 	.word	0x00034560
   13370:	0001c695 	.word	0x0001c695
   13374:	00018d35 	.word	0x00018d35
   13378:	20004608 	.word	0x20004608
   1337c:	000346f0 	.word	0x000346f0
   13380:	0001c781 	.word	0x0001c781
   13384:	0001ab21 	.word	0x0001ab21
   13388:	000133cd 	.word	0x000133cd
   1338c:	00034710 	.word	0x00034710
   13390:	20000394 	.word	0x20000394
   13394:	20000395 	.word	0x20000395
   13398:	200003cc 	.word	0x200003cc
   1339c:	20000398 	.word	0x20000398
   133a0:	0003356b 	.word	0x0003356b
   133a4:	20000400 	.word	0x20000400
   133a8:	000167dd 	.word	0x000167dd
   133ac:	0003319f 	.word	0x0003319f
   133b0:	20000484 	.word	0x20000484
   133b4:	00034714 	.word	0x00034714
   133b8:	000334a1 	.word	0x000334a1
   133bc:	00034718 	.word	0x00034718
   133c0:	0003345d 	.word	0x0003345d
   133c4:	0003353b 	.word	0x0003353b
   133c8:	00034720 	.word	0x00034720

000133cc <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   133cc:	b580      	push	{r7, lr}
   133ce:	b084      	sub	sp, #16
   133d0:	af00      	add	r7, sp, #0
   133d2:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   133d4:	687b      	ldr	r3, [r7, #4]
   133d6:	0018      	movs	r0, r3
   133d8:	4b0c      	ldr	r3, [pc, #48]	; (1340c <FreeRTOS_read+0x40>)
   133da:	4798      	blx	r3
   133dc:	0003      	movs	r3, r0
   133de:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   133e0:	e00d      	b.n	133fe <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   133e2:	4b0b      	ldr	r3, [pc, #44]	; (13410 <FreeRTOS_read+0x44>)
   133e4:	681a      	ldr	r2, [r3, #0]
   133e6:	2301      	movs	r3, #1
   133e8:	425b      	negs	r3, r3
   133ea:	0019      	movs	r1, r3
   133ec:	0010      	movs	r0, r2
   133ee:	4b09      	ldr	r3, [pc, #36]	; (13414 <FreeRTOS_read+0x48>)
   133f0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   133f2:	687b      	ldr	r3, [r7, #4]
   133f4:	0018      	movs	r0, r3
   133f6:	4b05      	ldr	r3, [pc, #20]	; (1340c <FreeRTOS_read+0x40>)
   133f8:	4798      	blx	r3
   133fa:	0003      	movs	r3, r0
   133fc:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   133fe:	68fb      	ldr	r3, [r7, #12]
   13400:	3301      	adds	r3, #1
   13402:	d0ee      	beq.n	133e2 <FreeRTOS_read+0x16>
    }
}
   13404:	46c0      	nop			; (mov r8, r8)
   13406:	46bd      	mov	sp, r7
   13408:	b004      	add	sp, #16
   1340a:	bd80      	pop	{r7, pc}
   1340c:	0001c731 	.word	0x0001c731
   13410:	20004608 	.word	0x20004608
   13414:	00019ced 	.word	0x00019ced

00013418 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   13418:	b580      	push	{r7, lr}
   1341a:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   1341c:	4b0a      	ldr	r3, [pc, #40]	; (13448 <CliCharReadySemaphoreGiveFromISR+0x30>)
   1341e:	2200      	movs	r2, #0
   13420:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   13422:	4b0a      	ldr	r3, [pc, #40]	; (1344c <CliCharReadySemaphoreGiveFromISR+0x34>)
   13424:	681b      	ldr	r3, [r3, #0]
   13426:	4a08      	ldr	r2, [pc, #32]	; (13448 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13428:	0011      	movs	r1, r2
   1342a:	0018      	movs	r0, r3
   1342c:	4b08      	ldr	r3, [pc, #32]	; (13450 <CliCharReadySemaphoreGiveFromISR+0x38>)
   1342e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13430:	4b05      	ldr	r3, [pc, #20]	; (13448 <CliCharReadySemaphoreGiveFromISR+0x30>)
   13432:	681b      	ldr	r3, [r3, #0]
   13434:	2b00      	cmp	r3, #0
   13436:	d003      	beq.n	13440 <CliCharReadySemaphoreGiveFromISR+0x28>
   13438:	4b06      	ldr	r3, [pc, #24]	; (13454 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   1343a:	2280      	movs	r2, #128	; 0x80
   1343c:	0552      	lsls	r2, r2, #21
   1343e:	601a      	str	r2, [r3, #0]
}
   13440:	46c0      	nop			; (mov r8, r8)
   13442:	46bd      	mov	sp, r7
   13444:	bd80      	pop	{r7, pc}
   13446:	46c0      	nop			; (mov r8, r8)
   13448:	20000488 	.word	0x20000488
   1344c:	20004608 	.word	0x20004608
   13450:	00019665 	.word	0x00019665
   13454:	e000ed04 	.word	0xe000ed04

00013458 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13458:	b590      	push	{r4, r7, lr}
   1345a:	b087      	sub	sp, #28
   1345c:	af00      	add	r7, sp, #0
   1345e:	60f8      	str	r0, [r7, #12]
   13460:	60b9      	str	r1, [r7, #8]
   13462:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   13464:	2317      	movs	r3, #23
   13466:	18fb      	adds	r3, r7, r3
   13468:	221b      	movs	r2, #27
   1346a:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   1346c:	2317      	movs	r3, #23
   1346e:	18fb      	adds	r3, r7, r3
   13470:	781b      	ldrb	r3, [r3, #0]
   13472:	4a08      	ldr	r2, [pc, #32]	; (13494 <xCliClearTerminalScreen+0x3c>)
   13474:	4808      	ldr	r0, [pc, #32]	; (13498 <xCliClearTerminalScreen+0x40>)
   13476:	210f      	movs	r1, #15
   13478:	4c08      	ldr	r4, [pc, #32]	; (1349c <xCliClearTerminalScreen+0x44>)
   1347a:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   1347c:	4a06      	ldr	r2, [pc, #24]	; (13498 <xCliClearTerminalScreen+0x40>)
   1347e:	68b9      	ldr	r1, [r7, #8]
   13480:	68fb      	ldr	r3, [r7, #12]
   13482:	0018      	movs	r0, r3
   13484:	4b05      	ldr	r3, [pc, #20]	; (1349c <xCliClearTerminalScreen+0x44>)
   13486:	4798      	blx	r3
    return pdFALSE;
   13488:	2300      	movs	r3, #0
}
   1348a:	0018      	movs	r0, r3
   1348c:	46bd      	mov	sp, r7
   1348e:	b007      	add	sp, #28
   13490:	bd90      	pop	{r4, r7, pc}
   13492:	46c0      	nop			; (mov r8, r8)
   13494:	00034724 	.word	0x00034724
   13498:	20000384 	.word	0x20000384
   1349c:	000333f9 	.word	0x000333f9

000134a0 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   134a0:	b590      	push	{r4, r7, lr}
   134a2:	b093      	sub	sp, #76	; 0x4c
   134a4:	af00      	add	r7, sp, #0
   134a6:	60f8      	str	r0, [r7, #12]
   134a8:	60b9      	str	r1, [r7, #8]
   134aa:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   134ac:	2002      	movs	r0, #2
   134ae:	4b1f      	ldr	r3, [pc, #124]	; (1352c <CLI_OTAU+0x8c>)
   134b0:	4798      	blx	r3
    init_storage();
   134b2:	4b1f      	ldr	r3, [pc, #124]	; (13530 <CLI_OTAU+0x90>)
   134b4:	4798      	blx	r3
    SerialConsoleWriteString("Test Program A - LED Toggles every 500ms\r\n");
   134b6:	4b1f      	ldr	r3, [pc, #124]	; (13534 <CLI_OTAU+0x94>)
   134b8:	0018      	movs	r0, r3
   134ba:	4b1f      	ldr	r3, [pc, #124]	; (13538 <CLI_OTAU+0x98>)
   134bc:	4798      	blx	r3

    FIL file_object;
    char test_file_name[] = "0:FlagA.txt";
   134be:	2314      	movs	r3, #20
   134c0:	18fb      	adds	r3, r7, r3
   134c2:	4a1e      	ldr	r2, [pc, #120]	; (1353c <CLI_OTAU+0x9c>)
   134c4:	ca13      	ldmia	r2!, {r0, r1, r4}
   134c6:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   134c8:	2314      	movs	r3, #20
   134ca:	18fb      	adds	r3, r7, r3
   134cc:	2230      	movs	r2, #48	; 0x30
   134ce:	701a      	strb	r2, [r3, #0]
    
    FRESULT res = f_open(&file_object,	(char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   134d0:	2347      	movs	r3, #71	; 0x47
   134d2:	18fc      	adds	r4, r7, r3
   134d4:	2314      	movs	r3, #20
   134d6:	18f9      	adds	r1, r7, r3
   134d8:	2320      	movs	r3, #32
   134da:	18fb      	adds	r3, r7, r3
   134dc:	220a      	movs	r2, #10
   134de:	0018      	movs	r0, r3
   134e0:	4b17      	ldr	r3, [pc, #92]	; (13540 <CLI_OTAU+0xa0>)
   134e2:	4798      	blx	r3
   134e4:	0003      	movs	r3, r0
   134e6:	7023      	strb	r3, [r4, #0]
    if (res != FR_OK)
   134e8:	2347      	movs	r3, #71	; 0x47
   134ea:	18fb      	adds	r3, r7, r3
   134ec:	781b      	ldrb	r3, [r3, #0]
   134ee:	2b00      	cmp	r3, #0
   134f0:	d008      	beq.n	13504 <CLI_OTAU+0x64>
    LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
   134f2:	2347      	movs	r3, #71	; 0x47
   134f4:	18fb      	adds	r3, r7, r3
   134f6:	781a      	ldrb	r2, [r3, #0]
   134f8:	4b12      	ldr	r3, [pc, #72]	; (13544 <CLI_OTAU+0xa4>)
   134fa:	0019      	movs	r1, r3
   134fc:	2000      	movs	r0, #0
   134fe:	4b12      	ldr	r3, [pc, #72]	; (13548 <CLI_OTAU+0xa8>)
   13500:	4798      	blx	r3
   13502:	e003      	b.n	1350c <CLI_OTAU+0x6c>
    else
    SerialConsoleWriteString("FlagA.txt added! Hold button pressed to reset device!\r\n");
   13504:	4b11      	ldr	r3, [pc, #68]	; (1354c <CLI_OTAU+0xac>)
   13506:	0018      	movs	r0, r3
   13508:	4b0b      	ldr	r3, [pc, #44]	; (13538 <CLI_OTAU+0x98>)
   1350a:	4798      	blx	r3
    f_close(&file_object); //Close file
   1350c:	2320      	movs	r3, #32
   1350e:	18fb      	adds	r3, r7, r3
   13510:	0018      	movs	r0, r3
   13512:	4b0f      	ldr	r3, [pc, #60]	; (13550 <CLI_OTAU+0xb0>)
   13514:	4798      	blx	r3

    vTaskDelay(pdMS_TO_TICKS(10000));
   13516:	4b0f      	ldr	r3, [pc, #60]	; (13554 <CLI_OTAU+0xb4>)
   13518:	0018      	movs	r0, r3
   1351a:	4b0f      	ldr	r3, [pc, #60]	; (13558 <CLI_OTAU+0xb8>)
   1351c:	4798      	blx	r3
    
    system_reset();
   1351e:	4b0f      	ldr	r3, [pc, #60]	; (1355c <CLI_OTAU+0xbc>)
   13520:	4798      	blx	r3
    return pdFALSE;
   13522:	2300      	movs	r3, #0
}
   13524:	0018      	movs	r0, r3
   13526:	46bd      	mov	sp, r7
   13528:	b013      	add	sp, #76	; 0x4c
   1352a:	bd90      	pop	{r4, r7, pc}
   1352c:	00015da9 	.word	0x00015da9
   13530:	000152d1 	.word	0x000152d1
   13534:	0003472c 	.word	0x0003472c
   13538:	0001c695 	.word	0x0001c695
   1353c:	000347a0 	.word	0x000347a0
   13540:	0002c291 	.word	0x0002c291
   13544:	00034758 	.word	0x00034758
   13548:	0001c781 	.word	0x0001c781
   1354c:	00034768 	.word	0x00034768
   13550:	0002cc91 	.word	0x0002cc91
   13554:	00002710 	.word	0x00002710
   13558:	0001aa41 	.word	0x0001aa41
   1355c:	000130ad 	.word	0x000130ad

00013560 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13560:	b580      	push	{r7, lr}
   13562:	b084      	sub	sp, #16
   13564:	af00      	add	r7, sp, #0
   13566:	60f8      	str	r0, [r7, #12]
   13568:	60b9      	str	r1, [r7, #8]
   1356a:	607a      	str	r2, [r7, #4]
    system_reset();
   1356c:	4b03      	ldr	r3, [pc, #12]	; (1357c <CLI_ResetDevice+0x1c>)
   1356e:	4798      	blx	r3
    return pdFALSE;
   13570:	2300      	movs	r3, #0
}
   13572:	0018      	movs	r0, r3
   13574:	46bd      	mov	sp, r7
   13576:	b004      	add	sp, #16
   13578:	bd80      	pop	{r7, pc}
   1357a:	46c0      	nop			; (mov r8, r8)
   1357c:	000130ad 	.word	0x000130ad

00013580 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   13580:	b590      	push	{r4, r7, lr}
   13582:	b08f      	sub	sp, #60	; 0x3c
   13584:	af00      	add	r7, sp, #0
   13586:	60f8      	str	r0, [r7, #12]
   13588:	60b9      	str	r1, [r7, #8]
   1358a:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   1358c:	2318      	movs	r3, #24
   1358e:	18fb      	adds	r3, r7, r3
   13590:	2200      	movs	r2, #0
   13592:	701a      	strb	r2, [r3, #0]
   13594:	2318      	movs	r3, #24
   13596:	18fb      	adds	r3, r7, r3
   13598:	2200      	movs	r2, #0
   1359a:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   1359c:	2318      	movs	r3, #24
   1359e:	18fb      	adds	r3, r7, r3
   135a0:	2200      	movs	r2, #0
   135a2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   135a4:	2318      	movs	r3, #24
   135a6:	18fb      	adds	r3, r7, r3
   135a8:	2200      	movs	r2, #0
   135aa:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   135ac:	231c      	movs	r3, #28
   135ae:	18fb      	adds	r3, r7, r3
   135b0:	2200      	movs	r2, #0
   135b2:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   135b4:	231c      	movs	r3, #28
   135b6:	18fb      	adds	r3, r7, r3
   135b8:	2214      	movs	r2, #20
   135ba:	18ba      	adds	r2, r7, r2
   135bc:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   135be:	231c      	movs	r3, #28
   135c0:	18fb      	adds	r3, r7, r3
   135c2:	2201      	movs	r2, #1
   135c4:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   135c6:	231c      	movs	r3, #28
   135c8:	18fb      	adds	r3, r7, r3
   135ca:	2218      	movs	r2, #24
   135cc:	18ba      	adds	r2, r7, r2
   135ce:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   135d0:	231c      	movs	r3, #28
   135d2:	18fb      	adds	r3, r7, r3
   135d4:	2201      	movs	r2, #1
   135d6:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   135d8:	4b2a      	ldr	r3, [pc, #168]	; (13684 <CLI_i2cScan+0x104>)
   135da:	0018      	movs	r0, r3
   135dc:	4b2a      	ldr	r3, [pc, #168]	; (13688 <CLI_i2cScan+0x108>)
   135de:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   135e0:	2300      	movs	r3, #0
   135e2:	637b      	str	r3, [r7, #52]	; 0x34
   135e4:	e042      	b.n	1366c <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   135e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   135e8:	4a28      	ldr	r2, [pc, #160]	; (1368c <CLI_i2cScan+0x10c>)
   135ea:	4829      	ldr	r0, [pc, #164]	; (13690 <CLI_i2cScan+0x110>)
   135ec:	210f      	movs	r1, #15
   135ee:	4c29      	ldr	r4, [pc, #164]	; (13694 <CLI_i2cScan+0x114>)
   135f0:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   135f2:	4b27      	ldr	r3, [pc, #156]	; (13690 <CLI_i2cScan+0x110>)
   135f4:	0018      	movs	r0, r3
   135f6:	4b24      	ldr	r3, [pc, #144]	; (13688 <CLI_i2cScan+0x108>)
   135f8:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   135fa:	2300      	movs	r3, #0
   135fc:	633b      	str	r3, [r7, #48]	; 0x30
   135fe:	e02b      	b.n	13658 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   13600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13602:	b2da      	uxtb	r2, r3
   13604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13606:	b2db      	uxtb	r3, r3
   13608:	18d3      	adds	r3, r2, r3
   1360a:	b2da      	uxtb	r2, r3
   1360c:	231c      	movs	r3, #28
   1360e:	18fb      	adds	r3, r7, r3
   13610:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cPingAddressWait(&i2cOled, 100, 100);
   13612:	231c      	movs	r3, #28
   13614:	18fb      	adds	r3, r7, r3
   13616:	2264      	movs	r2, #100	; 0x64
   13618:	2164      	movs	r1, #100	; 0x64
   1361a:	0018      	movs	r0, r3
   1361c:	4b1e      	ldr	r3, [pc, #120]	; (13698 <CLI_i2cScan+0x118>)
   1361e:	4798      	blx	r3
   13620:	0003      	movs	r3, r0
   13622:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   13624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   13626:	2b00      	cmp	r3, #0
   13628:	d10c      	bne.n	13644 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1362a:	231c      	movs	r3, #28
   1362c:	18fb      	adds	r3, r7, r3
   1362e:	781b      	ldrb	r3, [r3, #0]
   13630:	4a1a      	ldr	r2, [pc, #104]	; (1369c <CLI_i2cScan+0x11c>)
   13632:	4817      	ldr	r0, [pc, #92]	; (13690 <CLI_i2cScan+0x110>)
   13634:	210f      	movs	r1, #15
   13636:	4c17      	ldr	r4, [pc, #92]	; (13694 <CLI_i2cScan+0x114>)
   13638:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1363a:	4b15      	ldr	r3, [pc, #84]	; (13690 <CLI_i2cScan+0x110>)
   1363c:	0018      	movs	r0, r3
   1363e:	4b12      	ldr	r3, [pc, #72]	; (13688 <CLI_i2cScan+0x108>)
   13640:	4798      	blx	r3
   13642:	e006      	b.n	13652 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   13644:	4b12      	ldr	r3, [pc, #72]	; (13690 <CLI_i2cScan+0x110>)
   13646:	4a16      	ldr	r2, [pc, #88]	; (136a0 <CLI_i2cScan+0x120>)
   13648:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1364a:	4b11      	ldr	r3, [pc, #68]	; (13690 <CLI_i2cScan+0x110>)
   1364c:	0018      	movs	r0, r3
   1364e:	4b0e      	ldr	r3, [pc, #56]	; (13688 <CLI_i2cScan+0x108>)
   13650:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   13652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13654:	3301      	adds	r3, #1
   13656:	633b      	str	r3, [r7, #48]	; 0x30
   13658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1365a:	2b0f      	cmp	r3, #15
   1365c:	ddd0      	ble.n	13600 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   1365e:	4b11      	ldr	r3, [pc, #68]	; (136a4 <CLI_i2cScan+0x124>)
   13660:	0018      	movs	r0, r3
   13662:	4b09      	ldr	r3, [pc, #36]	; (13688 <CLI_i2cScan+0x108>)
   13664:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   13666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   13668:	3310      	adds	r3, #16
   1366a:	637b      	str	r3, [r7, #52]	; 0x34
   1366c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1366e:	2b7f      	cmp	r3, #127	; 0x7f
   13670:	ddb9      	ble.n	135e6 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   13672:	4b0c      	ldr	r3, [pc, #48]	; (136a4 <CLI_i2cScan+0x124>)
   13674:	0018      	movs	r0, r3
   13676:	4b04      	ldr	r3, [pc, #16]	; (13688 <CLI_i2cScan+0x108>)
   13678:	4798      	blx	r3
			return pdFALSE;
   1367a:	2300      	movs	r3, #0

}
   1367c:	0018      	movs	r0, r3
   1367e:	46bd      	mov	sp, r7
   13680:	b00f      	add	sp, #60	; 0x3c
   13682:	bd90      	pop	{r4, r7, pc}
   13684:	000347c4 	.word	0x000347c4
   13688:	0001c695 	.word	0x0001c695
   1368c:	000347f8 	.word	0x000347f8
   13690:	20000384 	.word	0x20000384
   13694:	000333f9 	.word	0x000333f9
   13698:	00014291 	.word	0x00014291
   1369c:	00034800 	.word	0x00034800
   136a0:	00202058 	.word	0x00202058
   136a4:	00034710 	.word	0x00034710

000136a8 <CLI_temp>:


BaseType_t CLI_temp( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{	
   136a8:	b590      	push	{r4, r7, lr}
   136aa:	b089      	sub	sp, #36	; 0x24
   136ac:	af02      	add	r7, sp, #8
   136ae:	60f8      	str	r0, [r7, #12]
   136b0:	60b9      	str	r1, [r7, #8]
   136b2:	607a      	str	r2, [r7, #4]
	uint16_t ret[2];
	getTempAndHum(ret);
   136b4:	2314      	movs	r3, #20
   136b6:	18fb      	adds	r3, r7, r3
   136b8:	0018      	movs	r0, r3
   136ba:	4b0a      	ldr	r3, [pc, #40]	; (136e4 <CLI_temp+0x3c>)
   136bc:	4798      	blx	r3
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\nTemperature: %d\tHumidity: %d \r\n", ret[1], ret[0]);
   136be:	2314      	movs	r3, #20
   136c0:	18fb      	adds	r3, r7, r3
   136c2:	885b      	ldrh	r3, [r3, #2]
   136c4:	001c      	movs	r4, r3
   136c6:	2314      	movs	r3, #20
   136c8:	18fb      	adds	r3, r7, r3
   136ca:	881b      	ldrh	r3, [r3, #0]
   136cc:	4a06      	ldr	r2, [pc, #24]	; (136e8 <CLI_temp+0x40>)
   136ce:	68b9      	ldr	r1, [r7, #8]
   136d0:	68f8      	ldr	r0, [r7, #12]
   136d2:	9300      	str	r3, [sp, #0]
   136d4:	0023      	movs	r3, r4
   136d6:	4c05      	ldr	r4, [pc, #20]	; (136ec <CLI_temp+0x44>)
   136d8:	47a0      	blx	r4
	return pdFALSE;
   136da:	2300      	movs	r3, #0
}
   136dc:	0018      	movs	r0, r3
   136de:	46bd      	mov	sp, r7
   136e0:	b007      	add	sp, #28
   136e2:	bd90      	pop	{r4, r7, pc}
   136e4:	000145a5 	.word	0x000145a5
   136e8:	00034808 	.word	0x00034808
   136ec:	000333f9 	.word	0x000333f9

000136f0 <CLI_GetAlsData>:

BaseType_t CLI_GetAlsData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   136f0:	b590      	push	{r4, r7, lr}
   136f2:	b089      	sub	sp, #36	; 0x24
   136f4:	af02      	add	r7, sp, #8
   136f6:	60f8      	str	r0, [r7, #12]
   136f8:	60b9      	str	r1, [r7, #8]
   136fa:	607a      	str	r2, [r7, #4]
	alsData ALSData;
	alsGetVal(&ALSData);
   136fc:	2310      	movs	r3, #16
   136fe:	18fb      	adds	r3, r7, r3
   13700:	0018      	movs	r0, r3
   13702:	4b0e      	ldr	r3, [pc, #56]	; (1373c <CLI_GetAlsData+0x4c>)
   13704:	4798      	blx	r3
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\nLux Value: %d\tWhite Value: %d \r\n", (int)ALSData.luxVal, (int)ALSData.whiteVal);
   13706:	2310      	movs	r3, #16
   13708:	18fb      	adds	r3, r7, r3
   1370a:	681a      	ldr	r2, [r3, #0]
   1370c:	4b0c      	ldr	r3, [pc, #48]	; (13740 <CLI_GetAlsData+0x50>)
   1370e:	1c10      	adds	r0, r2, #0
   13710:	4798      	blx	r3
   13712:	0004      	movs	r4, r0
   13714:	2310      	movs	r3, #16
   13716:	18fb      	adds	r3, r7, r3
   13718:	685a      	ldr	r2, [r3, #4]
   1371a:	4b09      	ldr	r3, [pc, #36]	; (13740 <CLI_GetAlsData+0x50>)
   1371c:	1c10      	adds	r0, r2, #0
   1371e:	4798      	blx	r3
   13720:	0003      	movs	r3, r0
   13722:	4a08      	ldr	r2, [pc, #32]	; (13744 <CLI_GetAlsData+0x54>)
   13724:	68b9      	ldr	r1, [r7, #8]
   13726:	68f8      	ldr	r0, [r7, #12]
   13728:	9300      	str	r3, [sp, #0]
   1372a:	0023      	movs	r3, r4
   1372c:	4c06      	ldr	r4, [pc, #24]	; (13748 <CLI_GetAlsData+0x58>)
   1372e:	47a0      	blx	r4
	return pdFALSE;
   13730:	2300      	movs	r3, #0
}
   13732:	0018      	movs	r0, r3
   13734:	46bd      	mov	sp, r7
   13736:	b007      	add	sp, #28
   13738:	bd90      	pop	{r4, r7, pc}
   1373a:	46c0      	nop			; (mov r8, r8)
   1373c:	000147cd 	.word	0x000147cd
   13740:	0003164d 	.word	0x0003164d
   13744:	0003482c 	.word	0x0003482c
   13748:	000333f9 	.word	0x000333f9

0001374c <CLI_SendData>:

BaseType_t CLI_SendData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   1374c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1374e:	b08f      	sub	sp, #60	; 0x3c
   13750:	af04      	add	r7, sp, #16
   13752:	60f8      	str	r0, [r7, #12]
   13754:	60b9      	str	r1, [r7, #8]
   13756:	607a      	str	r2, [r7, #4]
	alsData ALSData;
	alsGetVal(&ALSData);
   13758:	2320      	movs	r3, #32
   1375a:	18fb      	adds	r3, r7, r3
   1375c:	0018      	movs	r0, r3
   1375e:	4b23      	ldr	r3, [pc, #140]	; (137ec <CLI_SendData+0xa0>)
   13760:	4798      	blx	r3
	
	uint16_t ret[2];
	getTempAndHum(ret);
   13762:	231c      	movs	r3, #28
   13764:	18fb      	adds	r3, r7, r3
   13766:	0018      	movs	r0, r3
   13768:	4b21      	ldr	r3, [pc, #132]	; (137f0 <CLI_SendData+0xa4>)
   1376a:	4798      	blx	r3
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\nLux Value: %d\tWhite Value: %d\tTemperature: %d\tHumidity: %d \r\n", (int)ALSData.luxVal, (int)ALSData.whiteVal, ret[1], ret[0]);
   1376c:	2320      	movs	r3, #32
   1376e:	18fb      	adds	r3, r7, r3
   13770:	681a      	ldr	r2, [r3, #0]
   13772:	4b20      	ldr	r3, [pc, #128]	; (137f4 <CLI_SendData+0xa8>)
   13774:	1c10      	adds	r0, r2, #0
   13776:	4798      	blx	r3
   13778:	0006      	movs	r6, r0
   1377a:	2320      	movs	r3, #32
   1377c:	18fb      	adds	r3, r7, r3
   1377e:	685a      	ldr	r2, [r3, #4]
   13780:	4b1c      	ldr	r3, [pc, #112]	; (137f4 <CLI_SendData+0xa8>)
   13782:	1c10      	adds	r0, r2, #0
   13784:	4798      	blx	r3
   13786:	0004      	movs	r4, r0
   13788:	231c      	movs	r3, #28
   1378a:	18fb      	adds	r3, r7, r3
   1378c:	885b      	ldrh	r3, [r3, #2]
   1378e:	001d      	movs	r5, r3
   13790:	231c      	movs	r3, #28
   13792:	18fb      	adds	r3, r7, r3
   13794:	881b      	ldrh	r3, [r3, #0]
   13796:	4a18      	ldr	r2, [pc, #96]	; (137f8 <CLI_SendData+0xac>)
   13798:	68b9      	ldr	r1, [r7, #8]
   1379a:	68f8      	ldr	r0, [r7, #12]
   1379c:	9302      	str	r3, [sp, #8]
   1379e:	9501      	str	r5, [sp, #4]
   137a0:	9400      	str	r4, [sp, #0]
   137a2:	0033      	movs	r3, r6
   137a4:	4c15      	ldr	r4, [pc, #84]	; (137fc <CLI_SendData+0xb0>)
   137a6:	47a0      	blx	r4
		
	struct projectDataPacket dP;
	dP.temp = ret[1];
   137a8:	231c      	movs	r3, #28
   137aa:	18fb      	adds	r3, r7, r3
   137ac:	885a      	ldrh	r2, [r3, #2]
   137ae:	2314      	movs	r3, #20
   137b0:	18fb      	adds	r3, r7, r3
   137b2:	801a      	strh	r2, [r3, #0]
	dP.light = (int)ALSData.luxVal;
   137b4:	2320      	movs	r3, #32
   137b6:	18fb      	adds	r3, r7, r3
   137b8:	681a      	ldr	r2, [r3, #0]
   137ba:	4b0e      	ldr	r3, [pc, #56]	; (137f4 <CLI_SendData+0xa8>)
   137bc:	1c10      	adds	r0, r2, #0
   137be:	4798      	blx	r3
   137c0:	0003      	movs	r3, r0
   137c2:	b29a      	uxth	r2, r3
   137c4:	2314      	movs	r3, #20
   137c6:	18fb      	adds	r3, r7, r3
   137c8:	805a      	strh	r2, [r3, #2]
	dP.pir = PIR_check();
   137ca:	4b0d      	ldr	r3, [pc, #52]	; (13800 <CLI_SendData+0xb4>)
   137cc:	4798      	blx	r3
   137ce:	0003      	movs	r3, r0
   137d0:	b29a      	uxth	r2, r3
   137d2:	2314      	movs	r3, #20
   137d4:	18fb      	adds	r3, r7, r3
   137d6:	809a      	strh	r2, [r3, #4]
	WifiAddProjectDataToQueue(&dP);
   137d8:	2314      	movs	r3, #20
   137da:	18fb      	adds	r3, r7, r3
   137dc:	0018      	movs	r0, r3
   137de:	4b09      	ldr	r3, [pc, #36]	; (13804 <CLI_SendData+0xb8>)
   137e0:	4798      	blx	r3
	
	return pdFALSE;
   137e2:	2300      	movs	r3, #0
}
   137e4:	0018      	movs	r0, r3
   137e6:	46bd      	mov	sp, r7
   137e8:	b00b      	add	sp, #44	; 0x2c
   137ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   137ec:	000147cd 	.word	0x000147cd
   137f0:	000145a5 	.word	0x000145a5
   137f4:	0003164d 	.word	0x0003164d
   137f8:	00034850 	.word	0x00034850
   137fc:	000333f9 	.word	0x000333f9
   13800:	0001447d 	.word	0x0001447d
   13804:	00015ddd 	.word	0x00015ddd

00013808 <CLI_PIRCheck>:

BaseType_t CLI_PIRCheck(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString)
{
   13808:	b590      	push	{r4, r7, lr}
   1380a:	b087      	sub	sp, #28
   1380c:	af00      	add	r7, sp, #0
   1380e:	60f8      	str	r0, [r7, #12]
   13810:	60b9      	str	r1, [r7, #8]
   13812:	607a      	str	r2, [r7, #4]
	bool var;
	var = PIR_check();
   13814:	2317      	movs	r3, #23
   13816:	18fc      	adds	r4, r7, r3
   13818:	4b0b      	ldr	r3, [pc, #44]	; (13848 <CLI_PIRCheck+0x40>)
   1381a:	4798      	blx	r3
   1381c:	0003      	movs	r3, r0
   1381e:	7023      	strb	r3, [r4, #0]
	if (var)
   13820:	2317      	movs	r3, #23
   13822:	18fb      	adds	r3, r7, r3
   13824:	781b      	ldrb	r3, [r3, #0]
   13826:	2b00      	cmp	r3, #0
   13828:	d004      	beq.n	13834 <CLI_PIRCheck+0x2c>
	{
		SerialConsoleWriteString("\r\nDetected\r\n");
   1382a:	4b08      	ldr	r3, [pc, #32]	; (1384c <CLI_PIRCheck+0x44>)
   1382c:	0018      	movs	r0, r3
   1382e:	4b08      	ldr	r3, [pc, #32]	; (13850 <CLI_PIRCheck+0x48>)
   13830:	4798      	blx	r3
   13832:	e003      	b.n	1383c <CLI_PIRCheck+0x34>
	}
	else
	{
		SerialConsoleWriteString("\r\nNot Detected\r\n");
   13834:	4b07      	ldr	r3, [pc, #28]	; (13854 <CLI_PIRCheck+0x4c>)
   13836:	0018      	movs	r0, r3
   13838:	4b05      	ldr	r3, [pc, #20]	; (13850 <CLI_PIRCheck+0x48>)
   1383a:	4798      	blx	r3
	}
	return pdFALSE;
   1383c:	2300      	movs	r3, #0
}
   1383e:	0018      	movs	r0, r3
   13840:	46bd      	mov	sp, r7
   13842:	b007      	add	sp, #28
   13844:	bd90      	pop	{r4, r7, pc}
   13846:	46c0      	nop			; (mov r8, r8)
   13848:	0001447d 	.word	0x0001447d
   1384c:	00034890 	.word	0x00034890
   13850:	0001c695 	.word	0x0001c695
   13854:	000348a0 	.word	0x000348a0

00013858 <CLI_led>:

BaseType_t CLI_led(int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString)
{
   13858:	b580      	push	{r7, lr}
   1385a:	b084      	sub	sp, #16
   1385c:	af00      	add	r7, sp, #0
   1385e:	60f8      	str	r0, [r7, #12]
   13860:	60b9      	str	r1, [r7, #8]
   13862:	607a      	str	r2, [r7, #4]
	streetLightStateChange(true);
   13864:	2001      	movs	r0, #1
   13866:	4b05      	ldr	r3, [pc, #20]	; (1387c <CLI_led+0x24>)
   13868:	4798      	blx	r3
	repairLightStateChange(true);
   1386a:	2001      	movs	r0, #1
   1386c:	4b04      	ldr	r3, [pc, #16]	; (13880 <CLI_led+0x28>)
   1386e:	4798      	blx	r3
	return pdFALSE;
   13870:	2300      	movs	r3, #0
   13872:	0018      	movs	r0, r3
   13874:	46bd      	mov	sp, r7
   13876:	b004      	add	sp, #16
   13878:	bd80      	pop	{r7, pc}
   1387a:	46c0      	nop			; (mov r8, r8)
   1387c:	0001229d 	.word	0x0001229d
   13880:	000122f1 	.word	0x000122f1

00013884 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   13884:	b580      	push	{r7, lr}
   13886:	b088      	sub	sp, #32
   13888:	af00      	add	r7, sp, #0
   1388a:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   1388c:	4b19      	ldr	r3, [pc, #100]	; (138f4 <vControlHandlerTask+0x70>)
   1388e:	0018      	movs	r0, r3
   13890:	4b19      	ldr	r3, [pc, #100]	; (138f8 <vControlHandlerTask+0x74>)
   13892:	4798      	blx	r3
//     controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
	
	alsData ALSData;	
	uint16_t ret[2];	
	struct projectDataPacket dP;
	vTaskDelay(40);
   13894:	2028      	movs	r0, #40	; 0x28
   13896:	4b19      	ldr	r3, [pc, #100]	; (138fc <vControlHandlerTask+0x78>)
   13898:	4798      	blx	r3
    while (1) {
		alsGetVal(&ALSData);
   1389a:	2318      	movs	r3, #24
   1389c:	18fb      	adds	r3, r7, r3
   1389e:	0018      	movs	r0, r3
   138a0:	4b17      	ldr	r3, [pc, #92]	; (13900 <vControlHandlerTask+0x7c>)
   138a2:	4798      	blx	r3
		getTempAndHum(ret);
   138a4:	2314      	movs	r3, #20
   138a6:	18fb      	adds	r3, r7, r3
   138a8:	0018      	movs	r0, r3
   138aa:	4b16      	ldr	r3, [pc, #88]	; (13904 <vControlHandlerTask+0x80>)
   138ac:	4798      	blx	r3
		dP.temp = ret[1];
   138ae:	2314      	movs	r3, #20
   138b0:	18fb      	adds	r3, r7, r3
   138b2:	885a      	ldrh	r2, [r3, #2]
   138b4:	230c      	movs	r3, #12
   138b6:	18fb      	adds	r3, r7, r3
   138b8:	801a      	strh	r2, [r3, #0]
		dP.light = (int)ALSData.luxVal;
   138ba:	2318      	movs	r3, #24
   138bc:	18fb      	adds	r3, r7, r3
   138be:	681a      	ldr	r2, [r3, #0]
   138c0:	4b11      	ldr	r3, [pc, #68]	; (13908 <vControlHandlerTask+0x84>)
   138c2:	1c10      	adds	r0, r2, #0
   138c4:	4798      	blx	r3
   138c6:	0003      	movs	r3, r0
   138c8:	b29a      	uxth	r2, r3
   138ca:	230c      	movs	r3, #12
   138cc:	18fb      	adds	r3, r7, r3
   138ce:	805a      	strh	r2, [r3, #2]
		dP.pir = PIR_check();
   138d0:	4b0e      	ldr	r3, [pc, #56]	; (1390c <vControlHandlerTask+0x88>)
   138d2:	4798      	blx	r3
   138d4:	0003      	movs	r3, r0
   138d6:	b29a      	uxth	r2, r3
   138d8:	230c      	movs	r3, #12
   138da:	18fb      	adds	r3, r7, r3
   138dc:	809a      	strh	r2, [r3, #4]
		WifiAddProjectDataToQueue(&dP);
   138de:	230c      	movs	r3, #12
   138e0:	18fb      	adds	r3, r7, r3
   138e2:	0018      	movs	r0, r3
   138e4:	4b0a      	ldr	r3, [pc, #40]	; (13910 <vControlHandlerTask+0x8c>)
   138e6:	4798      	blx	r3
// 
//             default:
//                 controlState = CONTROL_WAIT_FOR_GAME;
//                 break;
//         }
         vTaskDelay(500);
   138e8:	23fa      	movs	r3, #250	; 0xfa
   138ea:	005b      	lsls	r3, r3, #1
   138ec:	0018      	movs	r0, r3
   138ee:	4b03      	ldr	r3, [pc, #12]	; (138fc <vControlHandlerTask+0x78>)
   138f0:	4798      	blx	r3
		alsGetVal(&ALSData);
   138f2:	e7d2      	b.n	1389a <vControlHandlerTask+0x16>
   138f4:	00034944 	.word	0x00034944
   138f8:	0001c695 	.word	0x0001c695
   138fc:	0001aa41 	.word	0x0001aa41
   13900:	000147cd 	.word	0x000147cd
   13904:	000145a5 	.word	0x000145a5
   13908:	0003164d 	.word	0x0003164d
   1390c:	0001447d 	.word	0x0001447d
   13910:	00015ddd 	.word	0x00015ddd

00013914 <system_interrupt_enable>:
{
   13914:	b580      	push	{r7, lr}
   13916:	b082      	sub	sp, #8
   13918:	af00      	add	r7, sp, #0
   1391a:	0002      	movs	r2, r0
   1391c:	1dfb      	adds	r3, r7, #7
   1391e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13920:	4b06      	ldr	r3, [pc, #24]	; (1393c <system_interrupt_enable+0x28>)
   13922:	1dfa      	adds	r2, r7, #7
   13924:	7812      	ldrb	r2, [r2, #0]
   13926:	0011      	movs	r1, r2
   13928:	221f      	movs	r2, #31
   1392a:	400a      	ands	r2, r1
   1392c:	2101      	movs	r1, #1
   1392e:	4091      	lsls	r1, r2
   13930:	000a      	movs	r2, r1
   13932:	601a      	str	r2, [r3, #0]
}
   13934:	46c0      	nop			; (mov r8, r8)
   13936:	46bd      	mov	sp, r7
   13938:	b002      	add	sp, #8
   1393a:	bd80      	pop	{r7, pc}
   1393c:	e000e100 	.word	0xe000e100

00013940 <i2c_master_is_syncing>:
{
   13940:	b580      	push	{r7, lr}
   13942:	b084      	sub	sp, #16
   13944:	af00      	add	r7, sp, #0
   13946:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   13948:	687b      	ldr	r3, [r7, #4]
   1394a:	681b      	ldr	r3, [r3, #0]
   1394c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1394e:	68fb      	ldr	r3, [r7, #12]
   13950:	69db      	ldr	r3, [r3, #28]
   13952:	2207      	movs	r2, #7
   13954:	4013      	ands	r3, r2
   13956:	1e5a      	subs	r2, r3, #1
   13958:	4193      	sbcs	r3, r2
   1395a:	b2db      	uxtb	r3, r3
}
   1395c:	0018      	movs	r0, r3
   1395e:	46bd      	mov	sp, r7
   13960:	b004      	add	sp, #16
   13962:	bd80      	pop	{r7, pc}

00013964 <_i2c_master_wait_for_sync>:
{
   13964:	b580      	push	{r7, lr}
   13966:	b082      	sub	sp, #8
   13968:	af00      	add	r7, sp, #0
   1396a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   1396c:	46c0      	nop			; (mov r8, r8)
   1396e:	687b      	ldr	r3, [r7, #4]
   13970:	0018      	movs	r0, r3
   13972:	4b04      	ldr	r3, [pc, #16]	; (13984 <_i2c_master_wait_for_sync+0x20>)
   13974:	4798      	blx	r3
   13976:	1e03      	subs	r3, r0, #0
   13978:	d1f9      	bne.n	1396e <_i2c_master_wait_for_sync+0xa>
}
   1397a:	46c0      	nop			; (mov r8, r8)
   1397c:	46bd      	mov	sp, r7
   1397e:	b002      	add	sp, #8
   13980:	bd80      	pop	{r7, pc}
   13982:	46c0      	nop			; (mov r8, r8)
   13984:	00013941 	.word	0x00013941

00013988 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   13988:	b580      	push	{r7, lr}
   1398a:	b082      	sub	sp, #8
   1398c:	af00      	add	r7, sp, #0
   1398e:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   13990:	687b      	ldr	r3, [r7, #4]
   13992:	2264      	movs	r2, #100	; 0x64
   13994:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   13996:	687b      	ldr	r3, [r7, #4]
   13998:	4a1b      	ldr	r2, [pc, #108]	; (13a08 <i2c_master_get_config_defaults+0x80>)
   1399a:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	2200      	movs	r2, #0
   139a0:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   139a2:	687b      	ldr	r3, [r7, #4]
   139a4:	2200      	movs	r2, #0
   139a6:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   139a8:	687b      	ldr	r3, [r7, #4]
   139aa:	2200      	movs	r2, #0
   139ac:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   139ae:	687b      	ldr	r3, [r7, #4]
   139b0:	2280      	movs	r2, #128	; 0x80
   139b2:	0392      	lsls	r2, r2, #14
   139b4:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   139b6:	687b      	ldr	r3, [r7, #4]
   139b8:	2201      	movs	r2, #1
   139ba:	4252      	negs	r2, r2
   139bc:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   139be:	687b      	ldr	r3, [r7, #4]
   139c0:	2201      	movs	r2, #1
   139c2:	4252      	negs	r2, r2
   139c4:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   139c6:	687b      	ldr	r3, [r7, #4]
   139c8:	2200      	movs	r2, #0
   139ca:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   139cc:	687b      	ldr	r3, [r7, #4]
   139ce:	2200      	movs	r2, #0
   139d0:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   139d2:	687b      	ldr	r3, [r7, #4]
   139d4:	2224      	movs	r2, #36	; 0x24
   139d6:	2100      	movs	r1, #0
   139d8:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   139da:	687b      	ldr	r3, [r7, #4]
   139dc:	2200      	movs	r2, #0
   139de:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   139e0:	687b      	ldr	r3, [r7, #4]
   139e2:	222c      	movs	r2, #44	; 0x2c
   139e4:	2100      	movs	r1, #0
   139e6:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   139e8:	687b      	ldr	r3, [r7, #4]
   139ea:	222d      	movs	r2, #45	; 0x2d
   139ec:	2100      	movs	r1, #0
   139ee:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   139f0:	687b      	ldr	r3, [r7, #4]
   139f2:	222e      	movs	r2, #46	; 0x2e
   139f4:	2100      	movs	r1, #0
   139f6:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   139f8:	687b      	ldr	r3, [r7, #4]
   139fa:	22d7      	movs	r2, #215	; 0xd7
   139fc:	861a      	strh	r2, [r3, #48]	; 0x30
}
   139fe:	46c0      	nop			; (mov r8, r8)
   13a00:	46bd      	mov	sp, r7
   13a02:	b002      	add	sp, #8
   13a04:	bd80      	pop	{r7, pc}
   13a06:	46c0      	nop			; (mov r8, r8)
   13a08:	00000d48 	.word	0x00000d48

00013a0c <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   13a0c:	b580      	push	{r7, lr}
   13a0e:	b084      	sub	sp, #16
   13a10:	af00      	add	r7, sp, #0
   13a12:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13a14:	687b      	ldr	r3, [r7, #4]
   13a16:	681b      	ldr	r3, [r3, #0]
   13a18:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   13a1a:	2300      	movs	r3, #0
   13a1c:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   13a1e:	687b      	ldr	r3, [r7, #4]
   13a20:	0018      	movs	r0, r3
   13a22:	4b14      	ldr	r3, [pc, #80]	; (13a74 <i2c_master_enable+0x68>)
   13a24:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   13a26:	68bb      	ldr	r3, [r7, #8]
   13a28:	681b      	ldr	r3, [r3, #0]
   13a2a:	2202      	movs	r2, #2
   13a2c:	431a      	orrs	r2, r3
   13a2e:	68bb      	ldr	r3, [r7, #8]
   13a30:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   13a32:	687b      	ldr	r3, [r7, #4]
   13a34:	681b      	ldr	r3, [r3, #0]
   13a36:	0018      	movs	r0, r3
   13a38:	4b0f      	ldr	r3, [pc, #60]	; (13a78 <i2c_master_enable+0x6c>)
   13a3a:	4798      	blx	r3
   13a3c:	0003      	movs	r3, r0
   13a3e:	0018      	movs	r0, r3
   13a40:	4b0e      	ldr	r3, [pc, #56]	; (13a7c <i2c_master_enable+0x70>)
   13a42:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13a44:	e00c      	b.n	13a60 <i2c_master_enable+0x54>
		timeout_counter++;
   13a46:	68fb      	ldr	r3, [r7, #12]
   13a48:	3301      	adds	r3, #1
   13a4a:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   13a4c:	687b      	ldr	r3, [r7, #4]
   13a4e:	88db      	ldrh	r3, [r3, #6]
   13a50:	001a      	movs	r2, r3
   13a52:	68fb      	ldr	r3, [r7, #12]
   13a54:	429a      	cmp	r2, r3
   13a56:	d803      	bhi.n	13a60 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   13a58:	68bb      	ldr	r3, [r7, #8]
   13a5a:	2210      	movs	r2, #16
   13a5c:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   13a5e:	e006      	b.n	13a6e <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   13a60:	68bb      	ldr	r3, [r7, #8]
   13a62:	8b5b      	ldrh	r3, [r3, #26]
   13a64:	b29b      	uxth	r3, r3
   13a66:	001a      	movs	r2, r3
   13a68:	2310      	movs	r3, #16
   13a6a:	4013      	ands	r3, r2
   13a6c:	d0eb      	beq.n	13a46 <i2c_master_enable+0x3a>
		}
	}
}
   13a6e:	46bd      	mov	sp, r7
   13a70:	b004      	add	sp, #16
   13a72:	bd80      	pop	{r7, pc}
   13a74:	00013965 	.word	0x00013965
   13a78:	0002600d 	.word	0x0002600d
   13a7c:	00013915 	.word	0x00013915

00013a80 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   13a80:	b580      	push	{r7, lr}
   13a82:	b082      	sub	sp, #8
   13a84:	af00      	add	r7, sp, #0
   13a86:	6078      	str	r0, [r7, #4]
   13a88:	000a      	movs	r2, r1
   13a8a:	1cfb      	adds	r3, r7, #3
   13a8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   13a8e:	687b      	ldr	r3, [r7, #4]
   13a90:	7e5b      	ldrb	r3, [r3, #25]
   13a92:	b2db      	uxtb	r3, r3
   13a94:	b25a      	sxtb	r2, r3
   13a96:	1cfb      	adds	r3, r7, #3
   13a98:	781b      	ldrb	r3, [r3, #0]
   13a9a:	2101      	movs	r1, #1
   13a9c:	4099      	lsls	r1, r3
   13a9e:	000b      	movs	r3, r1
   13aa0:	b25b      	sxtb	r3, r3
   13aa2:	4313      	orrs	r3, r2
   13aa4:	b25b      	sxtb	r3, r3
   13aa6:	b2da      	uxtb	r2, r3
   13aa8:	687b      	ldr	r3, [r7, #4]
   13aaa:	765a      	strb	r2, [r3, #25]
}
   13aac:	46c0      	nop			; (mov r8, r8)
   13aae:	46bd      	mov	sp, r7
   13ab0:	b002      	add	sp, #8
   13ab2:	bd80      	pop	{r7, pc}

00013ab4 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   13ab4:	b590      	push	{r4, r7, lr}
   13ab6:	b091      	sub	sp, #68	; 0x44
   13ab8:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13aba:	2300      	movs	r3, #0
   13abc:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   13abe:	233a      	movs	r3, #58	; 0x3a
   13ac0:	18fb      	adds	r3, r7, r3
   13ac2:	2200      	movs	r2, #0
   13ac4:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   13ac6:	1d3b      	adds	r3, r7, #4
   13ac8:	0018      	movs	r0, r3
   13aca:	4b21      	ldr	r3, [pc, #132]	; (13b50 <I2cDriverConfigureSensorBus+0x9c>)
   13acc:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   13ace:	1d3b      	adds	r3, r7, #4
   13ad0:	4a20      	ldr	r2, [pc, #128]	; (13b54 <I2cDriverConfigureSensorBus+0xa0>)
   13ad2:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   13ad4:	1d3b      	adds	r3, r7, #4
   13ad6:	4a20      	ldr	r2, [pc, #128]	; (13b58 <I2cDriverConfigureSensorBus+0xa4>)
   13ad8:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   13ada:	1d3b      	adds	r3, r7, #4
   13adc:	22fa      	movs	r2, #250	; 0xfa
   13ade:	0092      	lsls	r2, r2, #2
   13ae0:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13ae2:	233b      	movs	r3, #59	; 0x3b
   13ae4:	18fb      	adds	r3, r7, r3
   13ae6:	2203      	movs	r2, #3
   13ae8:	701a      	strb	r2, [r3, #0]
   13aea:	e01e      	b.n	13b2a <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   13aec:	233a      	movs	r3, #58	; 0x3a
   13aee:	18fc      	adds	r4, r7, r3
   13af0:	1d3a      	adds	r2, r7, #4
   13af2:	491a      	ldr	r1, [pc, #104]	; (13b5c <I2cDriverConfigureSensorBus+0xa8>)
   13af4:	4b1a      	ldr	r3, [pc, #104]	; (13b60 <I2cDriverConfigureSensorBus+0xac>)
   13af6:	0018      	movs	r0, r3
   13af8:	4b1a      	ldr	r3, [pc, #104]	; (13b64 <I2cDriverConfigureSensorBus+0xb0>)
   13afa:	4798      	blx	r3
   13afc:	0003      	movs	r3, r0
   13afe:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   13b00:	233a      	movs	r3, #58	; 0x3a
   13b02:	18fb      	adds	r3, r7, r3
   13b04:	781b      	ldrb	r3, [r3, #0]
   13b06:	2b00      	cmp	r3, #0
   13b08:	d104      	bne.n	13b14 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   13b0a:	233a      	movs	r3, #58	; 0x3a
   13b0c:	18fb      	adds	r3, r7, r3
   13b0e:	781b      	ldrb	r3, [r3, #0]
   13b10:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   13b12:	e00f      	b.n	13b34 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   13b14:	4b12      	ldr	r3, [pc, #72]	; (13b60 <I2cDriverConfigureSensorBus+0xac>)
   13b16:	0018      	movs	r0, r3
   13b18:	4b13      	ldr	r3, [pc, #76]	; (13b68 <I2cDriverConfigureSensorBus+0xb4>)
   13b1a:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   13b1c:	233b      	movs	r3, #59	; 0x3b
   13b1e:	18fb      	adds	r3, r7, r3
   13b20:	781a      	ldrb	r2, [r3, #0]
   13b22:	233b      	movs	r3, #59	; 0x3b
   13b24:	18fb      	adds	r3, r7, r3
   13b26:	3a01      	subs	r2, #1
   13b28:	701a      	strb	r2, [r3, #0]
   13b2a:	233b      	movs	r3, #59	; 0x3b
   13b2c:	18fb      	adds	r3, r7, r3
   13b2e:	781b      	ldrb	r3, [r3, #0]
   13b30:	2b00      	cmp	r3, #0
   13b32:	d1db      	bne.n	13aec <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   13b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   13b36:	2b00      	cmp	r3, #0
   13b38:	d104      	bne.n	13b44 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   13b3a:	4b09      	ldr	r3, [pc, #36]	; (13b60 <I2cDriverConfigureSensorBus+0xac>)
   13b3c:	0018      	movs	r0, r3
   13b3e:	4b0b      	ldr	r3, [pc, #44]	; (13b6c <I2cDriverConfigureSensorBus+0xb8>)
   13b40:	4798      	blx	r3
   13b42:	e000      	b.n	13b46 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   13b44:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   13b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   13b48:	0018      	movs	r0, r3
   13b4a:	46bd      	mov	sp, r7
   13b4c:	b011      	add	sp, #68	; 0x44
   13b4e:	bd90      	pop	{r4, r7, pc}
   13b50:	00013989 	.word	0x00013989
   13b54:	00080002 	.word	0x00080002
   13b58:	00090002 	.word	0x00090002
   13b5c:	42000800 	.word	0x42000800
   13b60:	20004614 	.word	0x20004614
   13b64:	000163cd 	.word	0x000163cd
   13b68:	00016501 	.word	0x00016501
   13b6c:	00013a0d 	.word	0x00013a0d

00013b70 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   13b70:	b580      	push	{r7, lr}
   13b72:	b084      	sub	sp, #16
   13b74:	af00      	add	r7, sp, #0
   13b76:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13b78:	4b0e      	ldr	r3, [pc, #56]	; (13bb4 <I2cSensorsTxComplete+0x44>)
   13b7a:	2200      	movs	r2, #0
   13b7c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13b7e:	4b0d      	ldr	r3, [pc, #52]	; (13bb4 <I2cSensorsTxComplete+0x44>)
   13b80:	2201      	movs	r2, #1
   13b82:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13b84:	2300      	movs	r3, #0
   13b86:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13b88:	4b0b      	ldr	r3, [pc, #44]	; (13bb8 <I2cSensorsTxComplete+0x48>)
   13b8a:	681b      	ldr	r3, [r3, #0]
   13b8c:	220c      	movs	r2, #12
   13b8e:	18ba      	adds	r2, r7, r2
   13b90:	0011      	movs	r1, r2
   13b92:	0018      	movs	r0, r3
   13b94:	4b09      	ldr	r3, [pc, #36]	; (13bbc <I2cSensorsTxComplete+0x4c>)
   13b96:	4798      	blx	r3
    sensorTransmitError = false;
   13b98:	4b09      	ldr	r3, [pc, #36]	; (13bc0 <I2cSensorsTxComplete+0x50>)
   13b9a:	2200      	movs	r2, #0
   13b9c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13b9e:	68fb      	ldr	r3, [r7, #12]
   13ba0:	2b00      	cmp	r3, #0
   13ba2:	d003      	beq.n	13bac <I2cSensorsTxComplete+0x3c>
   13ba4:	4b07      	ldr	r3, [pc, #28]	; (13bc4 <I2cSensorsTxComplete+0x54>)
   13ba6:	2280      	movs	r2, #128	; 0x80
   13ba8:	0552      	lsls	r2, r2, #21
   13baa:	601a      	str	r2, [r3, #0]
}
   13bac:	46c0      	nop			; (mov r8, r8)
   13bae:	46bd      	mov	sp, r7
   13bb0:	b004      	add	sp, #16
   13bb2:	bd80      	pop	{r7, pc}
   13bb4:	20000490 	.word	0x20000490
   13bb8:	2000463c 	.word	0x2000463c
   13bbc:	00019665 	.word	0x00019665
   13bc0:	2000048c 	.word	0x2000048c
   13bc4:	e000ed04 	.word	0xe000ed04

00013bc8 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   13bc8:	b580      	push	{r7, lr}
   13bca:	b084      	sub	sp, #16
   13bcc:	af00      	add	r7, sp, #0
   13bce:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13bd0:	4b0e      	ldr	r3, [pc, #56]	; (13c0c <I2cSensorsRxComplete+0x44>)
   13bd2:	2200      	movs	r2, #0
   13bd4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   13bd6:	4b0d      	ldr	r3, [pc, #52]	; (13c0c <I2cSensorsRxComplete+0x44>)
   13bd8:	2201      	movs	r2, #1
   13bda:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13bdc:	2300      	movs	r3, #0
   13bde:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13be0:	4b0b      	ldr	r3, [pc, #44]	; (13c10 <I2cSensorsRxComplete+0x48>)
   13be2:	681b      	ldr	r3, [r3, #0]
   13be4:	220c      	movs	r2, #12
   13be6:	18ba      	adds	r2, r7, r2
   13be8:	0011      	movs	r1, r2
   13bea:	0018      	movs	r0, r3
   13bec:	4b09      	ldr	r3, [pc, #36]	; (13c14 <I2cSensorsRxComplete+0x4c>)
   13bee:	4798      	blx	r3
    sensorTransmitError = false;
   13bf0:	4b09      	ldr	r3, [pc, #36]	; (13c18 <I2cSensorsRxComplete+0x50>)
   13bf2:	2200      	movs	r2, #0
   13bf4:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13bf6:	68fb      	ldr	r3, [r7, #12]
   13bf8:	2b00      	cmp	r3, #0
   13bfa:	d003      	beq.n	13c04 <I2cSensorsRxComplete+0x3c>
   13bfc:	4b07      	ldr	r3, [pc, #28]	; (13c1c <I2cSensorsRxComplete+0x54>)
   13bfe:	2280      	movs	r2, #128	; 0x80
   13c00:	0552      	lsls	r2, r2, #21
   13c02:	601a      	str	r2, [r3, #0]
}
   13c04:	46c0      	nop			; (mov r8, r8)
   13c06:	46bd      	mov	sp, r7
   13c08:	b004      	add	sp, #16
   13c0a:	bd80      	pop	{r7, pc}
   13c0c:	20000490 	.word	0x20000490
   13c10:	2000463c 	.word	0x2000463c
   13c14:	00019665 	.word	0x00019665
   13c18:	2000048c 	.word	0x2000048c
   13c1c:	e000ed04 	.word	0xe000ed04

00013c20 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   13c20:	b580      	push	{r7, lr}
   13c22:	b084      	sub	sp, #16
   13c24:	af00      	add	r7, sp, #0
   13c26:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   13c28:	4b0e      	ldr	r3, [pc, #56]	; (13c64 <I2cSensorsError+0x44>)
   13c2a:	2200      	movs	r2, #0
   13c2c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   13c2e:	4b0d      	ldr	r3, [pc, #52]	; (13c64 <I2cSensorsError+0x44>)
   13c30:	2201      	movs	r2, #1
   13c32:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   13c34:	2300      	movs	r3, #0
   13c36:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   13c38:	4b0b      	ldr	r3, [pc, #44]	; (13c68 <I2cSensorsError+0x48>)
   13c3a:	681b      	ldr	r3, [r3, #0]
   13c3c:	220c      	movs	r2, #12
   13c3e:	18ba      	adds	r2, r7, r2
   13c40:	0011      	movs	r1, r2
   13c42:	0018      	movs	r0, r3
   13c44:	4b09      	ldr	r3, [pc, #36]	; (13c6c <I2cSensorsError+0x4c>)
   13c46:	4798      	blx	r3
    sensorTransmitError = true;
   13c48:	4b09      	ldr	r3, [pc, #36]	; (13c70 <I2cSensorsError+0x50>)
   13c4a:	2201      	movs	r2, #1
   13c4c:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   13c4e:	68fb      	ldr	r3, [r7, #12]
   13c50:	2b00      	cmp	r3, #0
   13c52:	d003      	beq.n	13c5c <I2cSensorsError+0x3c>
   13c54:	4b07      	ldr	r3, [pc, #28]	; (13c74 <I2cSensorsError+0x54>)
   13c56:	2280      	movs	r2, #128	; 0x80
   13c58:	0552      	lsls	r2, r2, #21
   13c5a:	601a      	str	r2, [r3, #0]
}
   13c5c:	46c0      	nop			; (mov r8, r8)
   13c5e:	46bd      	mov	sp, r7
   13c60:	b004      	add	sp, #16
   13c62:	bd80      	pop	{r7, pc}
   13c64:	20000490 	.word	0x20000490
   13c68:	2000463c 	.word	0x2000463c
   13c6c:	00019665 	.word	0x00019665
   13c70:	2000048c 	.word	0x2000048c
   13c74:	e000ed04 	.word	0xe000ed04

00013c78 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   13c78:	b580      	push	{r7, lr}
   13c7a:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13c7c:	4911      	ldr	r1, [pc, #68]	; (13cc4 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   13c7e:	4b12      	ldr	r3, [pc, #72]	; (13cc8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c80:	2200      	movs	r2, #0
   13c82:	0018      	movs	r0, r3
   13c84:	4b11      	ldr	r3, [pc, #68]	; (13ccc <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13c86:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   13c88:	4b0f      	ldr	r3, [pc, #60]	; (13cc8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c8a:	2100      	movs	r1, #0
   13c8c:	0018      	movs	r0, r3
   13c8e:	4b10      	ldr	r3, [pc, #64]	; (13cd0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13c90:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13c92:	4910      	ldr	r1, [pc, #64]	; (13cd4 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   13c94:	4b0c      	ldr	r3, [pc, #48]	; (13cc8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13c96:	2201      	movs	r2, #1
   13c98:	0018      	movs	r0, r3
   13c9a:	4b0c      	ldr	r3, [pc, #48]	; (13ccc <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13c9c:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   13c9e:	4b0a      	ldr	r3, [pc, #40]	; (13cc8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13ca0:	2101      	movs	r1, #1
   13ca2:	0018      	movs	r0, r3
   13ca4:	4b0a      	ldr	r3, [pc, #40]	; (13cd0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13ca6:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   13ca8:	490b      	ldr	r1, [pc, #44]	; (13cd8 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   13caa:	4b07      	ldr	r3, [pc, #28]	; (13cc8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13cac:	2202      	movs	r2, #2
   13cae:	0018      	movs	r0, r3
   13cb0:	4b06      	ldr	r3, [pc, #24]	; (13ccc <I2cDriverRegisterSensorBusCallbacks+0x54>)
   13cb2:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   13cb4:	4b04      	ldr	r3, [pc, #16]	; (13cc8 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   13cb6:	2102      	movs	r1, #2
   13cb8:	0018      	movs	r0, r3
   13cba:	4b05      	ldr	r3, [pc, #20]	; (13cd0 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   13cbc:	4798      	blx	r3
}
   13cbe:	46c0      	nop			; (mov r8, r8)
   13cc0:	46bd      	mov	sp, r7
   13cc2:	bd80      	pop	{r7, pc}
   13cc4:	00013b71 	.word	0x00013b71
   13cc8:	20004614 	.word	0x20004614
   13ccc:	00012b19 	.word	0x00012b19
   13cd0:	00013a81 	.word	0x00013a81
   13cd4:	00013bc9 	.word	0x00013bc9
   13cd8:	00013c21 	.word	0x00013c21

00013cdc <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   13cdc:	b580      	push	{r7, lr}
   13cde:	b082      	sub	sp, #8
   13ce0:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   13ce2:	2300      	movs	r3, #0
   13ce4:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   13ce6:	4b14      	ldr	r3, [pc, #80]	; (13d38 <I2cInitializeDriver+0x5c>)
   13ce8:	4798      	blx	r3
   13cea:	0003      	movs	r3, r0
   13cec:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   13cee:	687b      	ldr	r3, [r7, #4]
   13cf0:	2b00      	cmp	r3, #0
   13cf2:	d11a      	bne.n	13d2a <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   13cf4:	4b11      	ldr	r3, [pc, #68]	; (13d3c <I2cInitializeDriver+0x60>)
   13cf6:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   13cf8:	2001      	movs	r0, #1
   13cfa:	4b11      	ldr	r3, [pc, #68]	; (13d40 <I2cInitializeDriver+0x64>)
   13cfc:	4798      	blx	r3
   13cfe:	0002      	movs	r2, r0
   13d00:	4b10      	ldr	r3, [pc, #64]	; (13d44 <I2cInitializeDriver+0x68>)
   13d02:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   13d04:	2203      	movs	r2, #3
   13d06:	2100      	movs	r1, #0
   13d08:	2001      	movs	r0, #1
   13d0a:	4b0f      	ldr	r3, [pc, #60]	; (13d48 <I2cInitializeDriver+0x6c>)
   13d0c:	4798      	blx	r3
   13d0e:	0002      	movs	r2, r0
   13d10:	4b0e      	ldr	r3, [pc, #56]	; (13d4c <I2cInitializeDriver+0x70>)
   13d12:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   13d14:	4b0b      	ldr	r3, [pc, #44]	; (13d44 <I2cInitializeDriver+0x68>)
   13d16:	681b      	ldr	r3, [r3, #0]
   13d18:	2b00      	cmp	r3, #0
   13d1a:	d003      	beq.n	13d24 <I2cInitializeDriver+0x48>
   13d1c:	4b0b      	ldr	r3, [pc, #44]	; (13d4c <I2cInitializeDriver+0x70>)
   13d1e:	681b      	ldr	r3, [r3, #0]
   13d20:	2b00      	cmp	r3, #0
   13d22:	d103      	bne.n	13d2c <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   13d24:	2306      	movs	r3, #6
   13d26:	607b      	str	r3, [r7, #4]
        goto exit;
   13d28:	e000      	b.n	13d2c <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   13d2a:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13d2c:	687b      	ldr	r3, [r7, #4]
}
   13d2e:	0018      	movs	r0, r3
   13d30:	46bd      	mov	sp, r7
   13d32:	b002      	add	sp, #8
   13d34:	bd80      	pop	{r7, pc}
   13d36:	46c0      	nop			; (mov r8, r8)
   13d38:	00013ab5 	.word	0x00013ab5
   13d3c:	00013c79 	.word	0x00013c79
   13d40:	00018f9d 	.word	0x00018f9d
   13d44:	20004610 	.word	0x20004610
   13d48:	00018d35 	.word	0x00018d35
   13d4c:	2000463c 	.word	0x2000463c

00013d50 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   13d50:	b590      	push	{r4, r7, lr}
   13d52:	b085      	sub	sp, #20
   13d54:	af00      	add	r7, sp, #0
   13d56:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13d58:	2300      	movs	r3, #0
   13d5a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13d5c:	687b      	ldr	r3, [r7, #4]
   13d5e:	2b00      	cmp	r3, #0
   13d60:	d003      	beq.n	13d6a <I2cWriteData+0x1a>
   13d62:	687b      	ldr	r3, [r7, #4]
   13d64:	685b      	ldr	r3, [r3, #4]
   13d66:	2b00      	cmp	r3, #0
   13d68:	d103      	bne.n	13d72 <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   13d6a:	2308      	movs	r3, #8
   13d6c:	425b      	negs	r3, r3
   13d6e:	60fb      	str	r3, [r7, #12]
        goto exit;
   13d70:	e01f      	b.n	13db2 <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   13d72:	687b      	ldr	r3, [r7, #4]
   13d74:	781b      	ldrb	r3, [r3, #0]
   13d76:	b29a      	uxth	r2, r3
   13d78:	4b10      	ldr	r3, [pc, #64]	; (13dbc <I2cWriteData+0x6c>)
   13d7a:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   13d7c:	687b      	ldr	r3, [r7, #4]
   13d7e:	685a      	ldr	r2, [r3, #4]
   13d80:	4b0e      	ldr	r3, [pc, #56]	; (13dbc <I2cWriteData+0x6c>)
   13d82:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   13d84:	687b      	ldr	r3, [r7, #4]
   13d86:	89da      	ldrh	r2, [r3, #14]
   13d88:	4b0c      	ldr	r3, [pc, #48]	; (13dbc <I2cWriteData+0x6c>)
   13d8a:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13d8c:	230b      	movs	r3, #11
   13d8e:	18fc      	adds	r4, r7, r3
   13d90:	4a0a      	ldr	r2, [pc, #40]	; (13dbc <I2cWriteData+0x6c>)
   13d92:	4b0b      	ldr	r3, [pc, #44]	; (13dc0 <I2cWriteData+0x70>)
   13d94:	0011      	movs	r1, r2
   13d96:	0018      	movs	r0, r3
   13d98:	4b0a      	ldr	r3, [pc, #40]	; (13dc4 <I2cWriteData+0x74>)
   13d9a:	4798      	blx	r3
   13d9c:	0003      	movs	r3, r0
   13d9e:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13da0:	230b      	movs	r3, #11
   13da2:	18fb      	adds	r3, r7, r3
   13da4:	781b      	ldrb	r3, [r3, #0]
   13da6:	2b00      	cmp	r3, #0
   13da8:	d003      	beq.n	13db2 <I2cWriteData+0x62>
        error = ERROR_IO;
   13daa:	2306      	movs	r3, #6
   13dac:	425b      	negs	r3, r3
   13dae:	60fb      	str	r3, [r7, #12]
        goto exit;
   13db0:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13db2:	68fb      	ldr	r3, [r7, #12]
}
   13db4:	0018      	movs	r0, r3
   13db6:	46bd      	mov	sp, r7
   13db8:	b005      	add	sp, #20
   13dba:	bd90      	pop	{r4, r7, pc}
   13dbc:	20004640 	.word	0x20004640
   13dc0:	20004614 	.word	0x20004614
   13dc4:	00012d9d 	.word	0x00012d9d

00013dc8 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   13dc8:	b590      	push	{r4, r7, lr}
   13dca:	b085      	sub	sp, #20
   13dcc:	af00      	add	r7, sp, #0
   13dce:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13dd0:	2300      	movs	r3, #0
   13dd2:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   13dd4:	687b      	ldr	r3, [r7, #4]
   13dd6:	2b00      	cmp	r3, #0
   13dd8:	d003      	beq.n	13de2 <I2cReadData+0x1a>
   13dda:	687b      	ldr	r3, [r7, #4]
   13ddc:	685b      	ldr	r3, [r3, #4]
   13dde:	2b00      	cmp	r3, #0
   13de0:	d103      	bne.n	13dea <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   13de2:	2308      	movs	r3, #8
   13de4:	425b      	negs	r3, r3
   13de6:	60fb      	str	r3, [r7, #12]
        goto exit;
   13de8:	e01f      	b.n	13e2a <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   13dea:	687b      	ldr	r3, [r7, #4]
   13dec:	781b      	ldrb	r3, [r3, #0]
   13dee:	b29a      	uxth	r2, r3
   13df0:	4b10      	ldr	r3, [pc, #64]	; (13e34 <I2cReadData+0x6c>)
   13df2:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   13df4:	687b      	ldr	r3, [r7, #4]
   13df6:	689a      	ldr	r2, [r3, #8]
   13df8:	4b0e      	ldr	r3, [pc, #56]	; (13e34 <I2cReadData+0x6c>)
   13dfa:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   13dfc:	687b      	ldr	r3, [r7, #4]
   13dfe:	899a      	ldrh	r2, [r3, #12]
   13e00:	4b0c      	ldr	r3, [pc, #48]	; (13e34 <I2cReadData+0x6c>)
   13e02:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   13e04:	230b      	movs	r3, #11
   13e06:	18fc      	adds	r4, r7, r3
   13e08:	4a0a      	ldr	r2, [pc, #40]	; (13e34 <I2cReadData+0x6c>)
   13e0a:	4b0b      	ldr	r3, [pc, #44]	; (13e38 <I2cReadData+0x70>)
   13e0c:	0011      	movs	r1, r2
   13e0e:	0018      	movs	r0, r3
   13e10:	4b0a      	ldr	r3, [pc, #40]	; (13e3c <I2cReadData+0x74>)
   13e12:	4798      	blx	r3
   13e14:	0003      	movs	r3, r0
   13e16:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   13e18:	230b      	movs	r3, #11
   13e1a:	18fb      	adds	r3, r7, r3
   13e1c:	781b      	ldrb	r3, [r3, #0]
   13e1e:	2b00      	cmp	r3, #0
   13e20:	d003      	beq.n	13e2a <I2cReadData+0x62>
        error = ERROR_IO;
   13e22:	2306      	movs	r3, #6
   13e24:	425b      	negs	r3, r3
   13e26:	60fb      	str	r3, [r7, #12]
        goto exit;
   13e28:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   13e2a:	68fb      	ldr	r3, [r7, #12]
}
   13e2c:	0018      	movs	r0, r3
   13e2e:	46bd      	mov	sp, r7
   13e30:	b005      	add	sp, #20
   13e32:	bd90      	pop	{r4, r7, pc}
   13e34:	20004640 	.word	0x20004640
   13e38:	20004614 	.word	0x20004614
   13e3c:	00012cb9 	.word	0x00012cb9

00013e40 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   13e40:	b590      	push	{r4, r7, lr}
   13e42:	b083      	sub	sp, #12
   13e44:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   13e46:	2300      	movs	r3, #0
   13e48:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   13e4a:	4b09      	ldr	r3, [pc, #36]	; (13e70 <I2cFreeMutex+0x30>)
   13e4c:	6818      	ldr	r0, [r3, #0]
   13e4e:	2300      	movs	r3, #0
   13e50:	2200      	movs	r2, #0
   13e52:	2100      	movs	r1, #0
   13e54:	4c07      	ldr	r4, [pc, #28]	; (13e74 <I2cFreeMutex+0x34>)
   13e56:	47a0      	blx	r4
   13e58:	0003      	movs	r3, r0
   13e5a:	2b01      	cmp	r3, #1
   13e5c:	d002      	beq.n	13e64 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   13e5e:	2314      	movs	r3, #20
   13e60:	425b      	negs	r3, r3
   13e62:	607b      	str	r3, [r7, #4]
    }
    return error;
   13e64:	687b      	ldr	r3, [r7, #4]
}
   13e66:	0018      	movs	r0, r3
   13e68:	46bd      	mov	sp, r7
   13e6a:	b003      	add	sp, #12
   13e6c:	bd90      	pop	{r4, r7, pc}
   13e6e:	46c0      	nop			; (mov r8, r8)
   13e70:	20004610 	.word	0x20004610
   13e74:	00018fdd 	.word	0x00018fdd

00013e78 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   13e78:	b580      	push	{r7, lr}
   13e7a:	b084      	sub	sp, #16
   13e7c:	af00      	add	r7, sp, #0
   13e7e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13e80:	2300      	movs	r3, #0
   13e82:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   13e84:	4b08      	ldr	r3, [pc, #32]	; (13ea8 <I2cGetMutex+0x30>)
   13e86:	681b      	ldr	r3, [r3, #0]
   13e88:	687a      	ldr	r2, [r7, #4]
   13e8a:	0011      	movs	r1, r2
   13e8c:	0018      	movs	r0, r3
   13e8e:	4b07      	ldr	r3, [pc, #28]	; (13eac <I2cGetMutex+0x34>)
   13e90:	4798      	blx	r3
   13e92:	0003      	movs	r3, r0
   13e94:	2b01      	cmp	r3, #1
   13e96:	d002      	beq.n	13e9e <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   13e98:	231d      	movs	r3, #29
   13e9a:	425b      	negs	r3, r3
   13e9c:	60fb      	str	r3, [r7, #12]
    }
    return error;
   13e9e:	68fb      	ldr	r3, [r7, #12]
}
   13ea0:	0018      	movs	r0, r3
   13ea2:	46bd      	mov	sp, r7
   13ea4:	b004      	add	sp, #16
   13ea6:	bd80      	pop	{r7, pc}
   13ea8:	20004610 	.word	0x20004610
   13eac:	00019ced 	.word	0x00019ced

00013eb0 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   13eb0:	b580      	push	{r7, lr}
   13eb2:	b084      	sub	sp, #16
   13eb4:	af00      	add	r7, sp, #0
   13eb6:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   13eb8:	2300      	movs	r3, #0
   13eba:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   13ebc:	4b04      	ldr	r3, [pc, #16]	; (13ed0 <I2cGetSemaphoreHandle+0x20>)
   13ebe:	681a      	ldr	r2, [r3, #0]
   13ec0:	687b      	ldr	r3, [r7, #4]
   13ec2:	601a      	str	r2, [r3, #0]
    return error;
   13ec4:	68fb      	ldr	r3, [r7, #12]
}
   13ec6:	0018      	movs	r0, r3
   13ec8:	46bd      	mov	sp, r7
   13eca:	b004      	add	sp, #16
   13ecc:	bd80      	pop	{r7, pc}
   13ece:	46c0      	nop			; (mov r8, r8)
   13ed0:	2000463c 	.word	0x2000463c

00013ed4 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   13ed4:	b580      	push	{r7, lr}
   13ed6:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   13ed8:	4b02      	ldr	r3, [pc, #8]	; (13ee4 <I2cGetTaskErrorStatus+0x10>)
   13eda:	781b      	ldrb	r3, [r3, #0]
}
   13edc:	0018      	movs	r0, r3
   13ede:	46bd      	mov	sp, r7
   13ee0:	bd80      	pop	{r7, pc}
   13ee2:	46c0      	nop			; (mov r8, r8)
   13ee4:	2000048c 	.word	0x2000048c

00013ee8 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   13ee8:	b580      	push	{r7, lr}
   13eea:	b082      	sub	sp, #8
   13eec:	af00      	add	r7, sp, #0
   13eee:	0002      	movs	r2, r0
   13ef0:	1dfb      	adds	r3, r7, #7
   13ef2:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   13ef4:	4b03      	ldr	r3, [pc, #12]	; (13f04 <I2cSetTaskErrorStatus+0x1c>)
   13ef6:	1dfa      	adds	r2, r7, #7
   13ef8:	7812      	ldrb	r2, [r2, #0]
   13efa:	701a      	strb	r2, [r3, #0]
}
   13efc:	46c0      	nop			; (mov r8, r8)
   13efe:	46bd      	mov	sp, r7
   13f00:	b002      	add	sp, #8
   13f02:	bd80      	pop	{r7, pc}
   13f04:	2000048c 	.word	0x2000048c

00013f08 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   13f08:	b580      	push	{r7, lr}
   13f0a:	b084      	sub	sp, #16
   13f0c:	af00      	add	r7, sp, #0
   13f0e:	6078      	str	r0, [r7, #4]
   13f10:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   13f12:	2300      	movs	r3, #0
   13f14:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   13f16:	2300      	movs	r3, #0
   13f18:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   13f1a:	2396      	movs	r3, #150	; 0x96
   13f1c:	005b      	lsls	r3, r3, #1
   13f1e:	0018      	movs	r0, r3
   13f20:	4b28      	ldr	r3, [pc, #160]	; (13fc4 <I2cWriteDataWait+0xbc>)
   13f22:	4798      	blx	r3
   13f24:	0003      	movs	r3, r0
   13f26:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13f28:	68fb      	ldr	r3, [r7, #12]
   13f2a:	2b00      	cmp	r3, #0
   13f2c:	d138      	bne.n	13fa0 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   13f2e:	2308      	movs	r3, #8
   13f30:	18fb      	adds	r3, r7, r3
   13f32:	0018      	movs	r0, r3
   13f34:	4b24      	ldr	r3, [pc, #144]	; (13fc8 <I2cWriteDataWait+0xc0>)
   13f36:	4798      	blx	r3
   13f38:	0003      	movs	r3, r0
   13f3a:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   13f3c:	68fb      	ldr	r3, [r7, #12]
   13f3e:	2b00      	cmp	r3, #0
   13f40:	d130      	bne.n	13fa4 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   13f42:	687b      	ldr	r3, [r7, #4]
   13f44:	0018      	movs	r0, r3
   13f46:	4b21      	ldr	r3, [pc, #132]	; (13fcc <I2cWriteDataWait+0xc4>)
   13f48:	4798      	blx	r3
   13f4a:	0003      	movs	r3, r0
   13f4c:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   13f4e:	68fb      	ldr	r3, [r7, #12]
   13f50:	2b00      	cmp	r3, #0
   13f52:	d12a      	bne.n	13faa <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   13f54:	68bb      	ldr	r3, [r7, #8]
   13f56:	683a      	ldr	r2, [r7, #0]
   13f58:	0011      	movs	r1, r2
   13f5a:	0018      	movs	r0, r3
   13f5c:	4b1c      	ldr	r3, [pc, #112]	; (13fd0 <I2cWriteDataWait+0xc8>)
   13f5e:	4798      	blx	r3
   13f60:	0003      	movs	r3, r0
   13f62:	2b01      	cmp	r3, #1
   13f64:	d111      	bne.n	13f8a <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   13f66:	4b1b      	ldr	r3, [pc, #108]	; (13fd4 <I2cWriteDataWait+0xcc>)
   13f68:	4798      	blx	r3
   13f6a:	1e03      	subs	r3, r0, #0
   13f6c:	d011      	beq.n	13f92 <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   13f6e:	2000      	movs	r0, #0
   13f70:	4b19      	ldr	r3, [pc, #100]	; (13fd8 <I2cWriteDataWait+0xd0>)
   13f72:	4798      	blx	r3
            if (error != ERROR_NONE) {
   13f74:	68fb      	ldr	r3, [r7, #12]
   13f76:	2b00      	cmp	r3, #0
   13f78:	d003      	beq.n	13f82 <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   13f7a:	2321      	movs	r3, #33	; 0x21
   13f7c:	425b      	negs	r3, r3
   13f7e:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   13f80:	e014      	b.n	13fac <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   13f82:	2303      	movs	r3, #3
   13f84:	425b      	negs	r3, r3
   13f86:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   13f88:	e010      	b.n	13fac <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   13f8a:	2303      	movs	r3, #3
   13f8c:	425b      	negs	r3, r3
   13f8e:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   13f90:	e00c      	b.n	13fac <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   13f92:	4b12      	ldr	r3, [pc, #72]	; (13fdc <I2cWriteDataWait+0xd4>)
   13f94:	4798      	blx	r3
   13f96:	0002      	movs	r2, r0
   13f98:	68fb      	ldr	r3, [r7, #12]
   13f9a:	4313      	orrs	r3, r2
   13f9c:	60fb      	str	r3, [r7, #12]
   13f9e:	e002      	b.n	13fa6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13fa0:	46c0      	nop			; (mov r8, r8)
   13fa2:	e000      	b.n	13fa6 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   13fa4:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   13fa6:	68fb      	ldr	r3, [r7, #12]
   13fa8:	e007      	b.n	13fba <I2cWriteDataWait+0xb2>
        goto exitError0;
   13faa:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   13fac:	4b0b      	ldr	r3, [pc, #44]	; (13fdc <I2cWriteDataWait+0xd4>)
   13fae:	4798      	blx	r3
   13fb0:	0002      	movs	r2, r0
   13fb2:	68fb      	ldr	r3, [r7, #12]
   13fb4:	4313      	orrs	r3, r2
   13fb6:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   13fb8:	68fb      	ldr	r3, [r7, #12]
}
   13fba:	0018      	movs	r0, r3
   13fbc:	46bd      	mov	sp, r7
   13fbe:	b004      	add	sp, #16
   13fc0:	bd80      	pop	{r7, pc}
   13fc2:	46c0      	nop			; (mov r8, r8)
   13fc4:	00013e79 	.word	0x00013e79
   13fc8:	00013eb1 	.word	0x00013eb1
   13fcc:	00013d51 	.word	0x00013d51
   13fd0:	00019ced 	.word	0x00019ced
   13fd4:	00013ed5 	.word	0x00013ed5
   13fd8:	00013ee9 	.word	0x00013ee9
   13fdc:	00013e41 	.word	0x00013e41

00013fe0 <I2cWriteDataNoStop>:

int32_t I2cWriteDataNoStop(I2C_Data *data){
   13fe0:	b590      	push	{r4, r7, lr}
   13fe2:	b089      	sub	sp, #36	; 0x24
   13fe4:	af00      	add	r7, sp, #0
   13fe6:	6078      	str	r0, [r7, #4]
	
	int32_t error = ERROR_NONE;
   13fe8:	2300      	movs	r3, #0
   13fea:	61fb      	str	r3, [r7, #28]
	enum status_code hwError;
	struct i2c_master_module *I2CBusHw = NULL;
   13fec:	2300      	movs	r3, #0
   13fee:	61bb      	str	r3, [r7, #24]
	I2C_Bus_State * busI2cState;
	struct i2c_master_packet *writePacket = NULL;
   13ff0:	2300      	movs	r3, #0
   13ff2:	617b      	str	r3, [r7, #20]
	struct i2c_master_packet *readPacket = NULL;
   13ff4:	2300      	movs	r3, #0
   13ff6:	613b      	str	r3, [r7, #16]
	
	//Check parameters
	if(data == NULL || data->msgOut == NULL){
   13ff8:	687b      	ldr	r3, [r7, #4]
   13ffa:	2b00      	cmp	r3, #0
   13ffc:	d003      	beq.n	14006 <I2cWriteDataNoStop+0x26>
   13ffe:	687b      	ldr	r3, [r7, #4]
   14000:	685b      	ldr	r3, [r3, #4]
   14002:	2b00      	cmp	r3, #0
   14004:	d103      	bne.n	1400e <I2cWriteDataNoStop+0x2e>
		error = ERR_INVALID_ARG;
   14006:	2308      	movs	r3, #8
   14008:	425b      	negs	r3, r3
   1400a:	61fb      	str	r3, [r7, #28]
		goto exit;
   1400c:	e01f      	b.n	1404e <I2cWriteDataNoStop+0x6e>
	}

	//Prepare to write
	sensorPacketWrite.address = data->address;
   1400e:	687b      	ldr	r3, [r7, #4]
   14010:	781b      	ldrb	r3, [r3, #0]
   14012:	b29a      	uxth	r2, r3
   14014:	4b10      	ldr	r3, [pc, #64]	; (14058 <I2cWriteDataNoStop+0x78>)
   14016:	801a      	strh	r2, [r3, #0]
	sensorPacketWrite.data = (uint8_t*) data->msgOut;
   14018:	687b      	ldr	r3, [r7, #4]
   1401a:	685a      	ldr	r2, [r3, #4]
   1401c:	4b0e      	ldr	r3, [pc, #56]	; (14058 <I2cWriteDataNoStop+0x78>)
   1401e:	605a      	str	r2, [r3, #4]
	sensorPacketWrite.data_length = data->lenOut;
   14020:	687b      	ldr	r3, [r7, #4]
   14022:	89da      	ldrh	r2, [r3, #14]
   14024:	4b0c      	ldr	r3, [pc, #48]	; (14058 <I2cWriteDataNoStop+0x78>)
   14026:	805a      	strh	r2, [r3, #2]
	
	//Write

	hwError = i2c_master_write_packet_job_no_stop(&i2cSensorBusInstance, &sensorPacketWrite);
   14028:	230f      	movs	r3, #15
   1402a:	18fc      	adds	r4, r7, r3
   1402c:	4a0a      	ldr	r2, [pc, #40]	; (14058 <I2cWriteDataNoStop+0x78>)
   1402e:	4b0b      	ldr	r3, [pc, #44]	; (1405c <I2cWriteDataNoStop+0x7c>)
   14030:	0011      	movs	r1, r2
   14032:	0018      	movs	r0, r3
   14034:	4b0a      	ldr	r3, [pc, #40]	; (14060 <I2cWriteDataNoStop+0x80>)
   14036:	4798      	blx	r3
   14038:	0003      	movs	r3, r0
   1403a:	7023      	strb	r3, [r4, #0]
	
	if(STATUS_OK != hwError)
   1403c:	230f      	movs	r3, #15
   1403e:	18fb      	adds	r3, r7, r3
   14040:	781b      	ldrb	r3, [r3, #0]
   14042:	2b00      	cmp	r3, #0
   14044:	d003      	beq.n	1404e <I2cWriteDataNoStop+0x6e>
	{
		error = ERROR_IO;
   14046:	2306      	movs	r3, #6
   14048:	425b      	negs	r3, r3
   1404a:	61fb      	str	r3, [r7, #28]
		goto exit;
   1404c:	46c0      	nop			; (mov r8, r8)
	}
	
	exit:
	return error;
   1404e:	69fb      	ldr	r3, [r7, #28]
}
   14050:	0018      	movs	r0, r3
   14052:	46bd      	mov	sp, r7
   14054:	b009      	add	sp, #36	; 0x24
   14056:	bd90      	pop	{r4, r7, pc}
   14058:	20004640 	.word	0x20004640
   1405c:	20004614 	.word	0x20004614
   14060:	00012ddd 	.word	0x00012ddd

00014064 <I2cReadDataWaitNoStop>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */

int32_t I2cReadDataWaitNoStop(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime){
   14064:	b580      	push	{r7, lr}
   14066:	b086      	sub	sp, #24
   14068:	af00      	add	r7, sp, #0
   1406a:	60f8      	str	r0, [r7, #12]
   1406c:	60b9      	str	r1, [r7, #8]
   1406e:	607a      	str	r2, [r7, #4]
	int32_t error = ERROR_NONE;
   14070:	2300      	movs	r3, #0
   14072:	617b      	str	r3, [r7, #20]
	SemaphoreHandle_t semHandle = NULL;
   14074:	2300      	movs	r3, #0
   14076:	613b      	str	r3, [r7, #16]
	

	//---0. Get Mutex
	error = I2cGetMutex( WAIT_I2C_LINE_MS);
   14078:	2396      	movs	r3, #150	; 0x96
   1407a:	005b      	lsls	r3, r3, #1
   1407c:	0018      	movs	r0, r3
   1407e:	4b36      	ldr	r3, [pc, #216]	; (14158 <I2cReadDataWaitNoStop+0xf4>)
   14080:	4798      	blx	r3
   14082:	0003      	movs	r3, r0
   14084:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   14086:	697b      	ldr	r3, [r7, #20]
   14088:	2b00      	cmp	r3, #0
   1408a:	d155      	bne.n	14138 <I2cReadDataWaitNoStop+0xd4>


	//---1. Get Semaphore Handle
	error = I2cGetSemaphoreHandle( &semHandle);
   1408c:	2310      	movs	r3, #16
   1408e:	18fb      	adds	r3, r7, r3
   14090:	0018      	movs	r0, r3
   14092:	4b32      	ldr	r3, [pc, #200]	; (1415c <I2cReadDataWaitNoStop+0xf8>)
   14094:	4798      	blx	r3
   14096:	0003      	movs	r3, r0
   14098:	617b      	str	r3, [r7, #20]
	if(ERROR_NONE != error) goto exit;
   1409a:	697b      	ldr	r3, [r7, #20]
   1409c:	2b00      	cmp	r3, #0
   1409e:	d14d      	bne.n	1413c <I2cReadDataWaitNoStop+0xd8>

	//---2. Initiate sending data

	error = I2cWriteDataNoStop(data);
   140a0:	68fb      	ldr	r3, [r7, #12]
   140a2:	0018      	movs	r0, r3
   140a4:	4b2e      	ldr	r3, [pc, #184]	; (14160 <I2cReadDataWaitNoStop+0xfc>)
   140a6:	4798      	blx	r3
   140a8:	0003      	movs	r3, r0
   140aa:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
   140ac:	697b      	ldr	r3, [r7, #20]
   140ae:	2b00      	cmp	r3, #0
   140b0:	d147      	bne.n	14142 <I2cReadDataWaitNoStop+0xde>
		goto exitError0;
	}

	//---2. Wait for binary semaphore to tell us that we are done!
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   140b2:	693b      	ldr	r3, [r7, #16]
   140b4:	687a      	ldr	r2, [r7, #4]
   140b6:	0011      	movs	r1, r2
   140b8:	0018      	movs	r0, r3
   140ba:	4b2a      	ldr	r3, [pc, #168]	; (14164 <I2cReadDataWaitNoStop+0x100>)
   140bc:	4798      	blx	r3
   140be:	0003      	movs	r3, r0
   140c0:	2b01      	cmp	r3, #1
   140c2:	d118      	bne.n	140f6 <I2cReadDataWaitNoStop+0x92>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   140c4:	4b28      	ldr	r3, [pc, #160]	; (14168 <I2cReadDataWaitNoStop+0x104>)
   140c6:	4798      	blx	r3
   140c8:	1e03      	subs	r3, r0, #0
   140ca:	d006      	beq.n	140da <I2cReadDataWaitNoStop+0x76>
			I2cSetTaskErrorStatus(false);
   140cc:	2000      	movs	r0, #0
   140ce:	4b27      	ldr	r3, [pc, #156]	; (1416c <I2cReadDataWaitNoStop+0x108>)
   140d0:	4798      	blx	r3
			error = ERROR_ABORTED;
   140d2:	2303      	movs	r3, #3
   140d4:	425b      	negs	r3, r3
   140d6:	617b      	str	r3, [r7, #20]
			goto exitError0;
   140d8:	e034      	b.n	14144 <I2cReadDataWaitNoStop+0xe0>
		}
		vTaskDelay( delay );
   140da:	68bb      	ldr	r3, [r7, #8]
   140dc:	0018      	movs	r0, r3
   140de:	4b24      	ldr	r3, [pc, #144]	; (14170 <I2cReadDataWaitNoStop+0x10c>)
   140e0:	4798      	blx	r3
		error = ERR_TIMEOUT;
		goto exitError0;
	}
	
	//---6. Initiate Read data
	error = I2cReadData(data);
   140e2:	68fb      	ldr	r3, [r7, #12]
   140e4:	0018      	movs	r0, r3
   140e6:	4b23      	ldr	r3, [pc, #140]	; (14174 <I2cReadDataWaitNoStop+0x110>)
   140e8:	4798      	blx	r3
   140ea:	0003      	movs	r3, r0
   140ec:	617b      	str	r3, [r7, #20]
	if (ERROR_NONE != error){
   140ee:	697b      	ldr	r3, [r7, #20]
   140f0:	2b00      	cmp	r3, #0
   140f2:	d004      	beq.n	140fe <I2cReadDataWaitNoStop+0x9a>
		goto exitError0;
   140f4:	e026      	b.n	14144 <I2cReadDataWaitNoStop+0xe0>
		error = ERR_TIMEOUT;
   140f6:	2303      	movs	r3, #3
   140f8:	425b      	negs	r3, r3
   140fa:	617b      	str	r3, [r7, #20]
		goto exitError0;
   140fc:	e022      	b.n	14144 <I2cReadDataWaitNoStop+0xe0>
	}
	//---7. Wait for notification
	if( xSemaphoreTake( semHandle, xMaxBlockTime ) == pdTRUE ){
   140fe:	693b      	ldr	r3, [r7, #16]
   14100:	687a      	ldr	r2, [r7, #4]
   14102:	0011      	movs	r1, r2
   14104:	0018      	movs	r0, r3
   14106:	4b17      	ldr	r3, [pc, #92]	; (14164 <I2cReadDataWaitNoStop+0x100>)
   14108:	4798      	blx	r3
   1410a:	0003      	movs	r3, r0
   1410c:	2b01      	cmp	r3, #1
   1410e:	d10a      	bne.n	14126 <I2cReadDataWaitNoStop+0xc2>
		/* The transmission ended as expected. We now delay until the I2C sensor is finished */
		if(I2cGetTaskErrorStatus()){
   14110:	4b15      	ldr	r3, [pc, #84]	; (14168 <I2cReadDataWaitNoStop+0x104>)
   14112:	4798      	blx	r3
   14114:	1e03      	subs	r3, r0, #0
   14116:	d00a      	beq.n	1412e <I2cReadDataWaitNoStop+0xca>
			I2cSetTaskErrorStatus(false);
   14118:	2000      	movs	r0, #0
   1411a:	4b14      	ldr	r3, [pc, #80]	; (1416c <I2cReadDataWaitNoStop+0x108>)
   1411c:	4798      	blx	r3
			error = ERROR_ABORTED;
   1411e:	2303      	movs	r3, #3
   14120:	425b      	negs	r3, r3
   14122:	617b      	str	r3, [r7, #20]
			goto exitError0;
   14124:	e00e      	b.n	14144 <I2cReadDataWaitNoStop+0xe0>
		}
		}else{
		/* The call to ulTaskNotifyTake() timed out. */
		error = ERR_TIMEOUT;
   14126:	2303      	movs	r3, #3
   14128:	425b      	negs	r3, r3
   1412a:	617b      	str	r3, [r7, #20]
		goto exitError0;
   1412c:	e00a      	b.n	14144 <I2cReadDataWaitNoStop+0xe0>
	}
	
	//---8. Release Mutex
	error = I2cFreeMutex();
   1412e:	4b12      	ldr	r3, [pc, #72]	; (14178 <I2cReadDataWaitNoStop+0x114>)
   14130:	4798      	blx	r3
   14132:	0003      	movs	r3, r0
   14134:	617b      	str	r3, [r7, #20]
   14136:	e002      	b.n	1413e <I2cReadDataWaitNoStop+0xda>
	if(ERROR_NONE != error) goto exit;
   14138:	46c0      	nop			; (mov r8, r8)
   1413a:	e000      	b.n	1413e <I2cReadDataWaitNoStop+0xda>
	if(ERROR_NONE != error) goto exit;
   1413c:	46c0      	nop			; (mov r8, r8)
	//xSemaphoreGive(semHandle);
	exit:
	return error;
   1413e:	697b      	ldr	r3, [r7, #20]
   14140:	e005      	b.n	1414e <I2cReadDataWaitNoStop+0xea>
		goto exitError0;
   14142:	46c0      	nop			; (mov r8, r8)

	exitError0:
	error = I2cFreeMutex();
   14144:	4b0c      	ldr	r3, [pc, #48]	; (14178 <I2cReadDataWaitNoStop+0x114>)
   14146:	4798      	blx	r3
   14148:	0003      	movs	r3, r0
   1414a:	617b      	str	r3, [r7, #20]
	//xSemaphoreGive(semHandle);
	return error;
   1414c:	697b      	ldr	r3, [r7, #20]
}
   1414e:	0018      	movs	r0, r3
   14150:	46bd      	mov	sp, r7
   14152:	b006      	add	sp, #24
   14154:	bd80      	pop	{r7, pc}
   14156:	46c0      	nop			; (mov r8, r8)
   14158:	00013e79 	.word	0x00013e79
   1415c:	00013eb1 	.word	0x00013eb1
   14160:	00013fe1 	.word	0x00013fe1
   14164:	00019ced 	.word	0x00019ced
   14168:	00013ed5 	.word	0x00013ed5
   1416c:	00013ee9 	.word	0x00013ee9
   14170:	0001aa41 	.word	0x0001aa41
   14174:	00013dc9 	.word	0x00013dc9
   14178:	00013e41 	.word	0x00013e41

0001417c <I2cReadDataWait>:


int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   1417c:	b580      	push	{r7, lr}
   1417e:	b086      	sub	sp, #24
   14180:	af00      	add	r7, sp, #0
   14182:	60f8      	str	r0, [r7, #12]
   14184:	60b9      	str	r1, [r7, #8]
   14186:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   14188:	2300      	movs	r3, #0
   1418a:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   1418c:	2300      	movs	r3, #0
   1418e:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   14190:	2396      	movs	r3, #150	; 0x96
   14192:	005b      	lsls	r3, r3, #1
   14194:	0018      	movs	r0, r3
   14196:	4b35      	ldr	r3, [pc, #212]	; (1426c <I2cReadDataWait+0xf0>)
   14198:	4798      	blx	r3
   1419a:	0003      	movs	r3, r0
   1419c:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   1419e:	697b      	ldr	r3, [r7, #20]
   141a0:	2b00      	cmp	r3, #0
   141a2:	d155      	bne.n	14250 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   141a4:	2310      	movs	r3, #16
   141a6:	18fb      	adds	r3, r7, r3
   141a8:	0018      	movs	r0, r3
   141aa:	4b31      	ldr	r3, [pc, #196]	; (14270 <I2cReadDataWait+0xf4>)
   141ac:	4798      	blx	r3
   141ae:	0003      	movs	r3, r0
   141b0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   141b2:	697b      	ldr	r3, [r7, #20]
   141b4:	2b00      	cmp	r3, #0
   141b6:	d14d      	bne.n	14254 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   141b8:	68fb      	ldr	r3, [r7, #12]
   141ba:	0018      	movs	r0, r3
   141bc:	4b2d      	ldr	r3, [pc, #180]	; (14274 <I2cReadDataWait+0xf8>)
   141be:	4798      	blx	r3
   141c0:	0003      	movs	r3, r0
   141c2:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   141c4:	697b      	ldr	r3, [r7, #20]
   141c6:	2b00      	cmp	r3, #0
   141c8:	d147      	bne.n	1425a <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   141ca:	693b      	ldr	r3, [r7, #16]
   141cc:	687a      	ldr	r2, [r7, #4]
   141ce:	0011      	movs	r1, r2
   141d0:	0018      	movs	r0, r3
   141d2:	4b29      	ldr	r3, [pc, #164]	; (14278 <I2cReadDataWait+0xfc>)
   141d4:	4798      	blx	r3
   141d6:	0003      	movs	r3, r0
   141d8:	2b01      	cmp	r3, #1
   141da:	d118      	bne.n	1420e <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   141dc:	4b27      	ldr	r3, [pc, #156]	; (1427c <I2cReadDataWait+0x100>)
   141de:	4798      	blx	r3
   141e0:	1e03      	subs	r3, r0, #0
   141e2:	d006      	beq.n	141f2 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   141e4:	2000      	movs	r0, #0
   141e6:	4b26      	ldr	r3, [pc, #152]	; (14280 <I2cReadDataWait+0x104>)
   141e8:	4798      	blx	r3
            error = ERROR_ABORTED;
   141ea:	2303      	movs	r3, #3
   141ec:	425b      	negs	r3, r3
   141ee:	617b      	str	r3, [r7, #20]
            goto exitError0;
   141f0:	e034      	b.n	1425c <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   141f2:	68bb      	ldr	r3, [r7, #8]
   141f4:	0018      	movs	r0, r3
   141f6:	4b23      	ldr	r3, [pc, #140]	; (14284 <I2cReadDataWait+0x108>)
   141f8:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   141fa:	68fb      	ldr	r3, [r7, #12]
   141fc:	0018      	movs	r0, r3
   141fe:	4b22      	ldr	r3, [pc, #136]	; (14288 <I2cReadDataWait+0x10c>)
   14200:	4798      	blx	r3
   14202:	0003      	movs	r3, r0
   14204:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   14206:	697b      	ldr	r3, [r7, #20]
   14208:	2b00      	cmp	r3, #0
   1420a:	d004      	beq.n	14216 <I2cReadDataWait+0x9a>
        goto exitError0;
   1420c:	e026      	b.n	1425c <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1420e:	2303      	movs	r3, #3
   14210:	425b      	negs	r3, r3
   14212:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14214:	e022      	b.n	1425c <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   14216:	693b      	ldr	r3, [r7, #16]
   14218:	687a      	ldr	r2, [r7, #4]
   1421a:	0011      	movs	r1, r2
   1421c:	0018      	movs	r0, r3
   1421e:	4b16      	ldr	r3, [pc, #88]	; (14278 <I2cReadDataWait+0xfc>)
   14220:	4798      	blx	r3
   14222:	0003      	movs	r3, r0
   14224:	2b01      	cmp	r3, #1
   14226:	d10a      	bne.n	1423e <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   14228:	4b14      	ldr	r3, [pc, #80]	; (1427c <I2cReadDataWait+0x100>)
   1422a:	4798      	blx	r3
   1422c:	1e03      	subs	r3, r0, #0
   1422e:	d00a      	beq.n	14246 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   14230:	2000      	movs	r0, #0
   14232:	4b13      	ldr	r3, [pc, #76]	; (14280 <I2cReadDataWait+0x104>)
   14234:	4798      	blx	r3
            error = ERROR_ABORTED;
   14236:	2303      	movs	r3, #3
   14238:	425b      	negs	r3, r3
   1423a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1423c:	e00e      	b.n	1425c <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1423e:	2303      	movs	r3, #3
   14240:	425b      	negs	r3, r3
   14242:	617b      	str	r3, [r7, #20]
        goto exitError0;
   14244:	e00a      	b.n	1425c <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   14246:	4b11      	ldr	r3, [pc, #68]	; (1428c <I2cReadDataWait+0x110>)
   14248:	4798      	blx	r3
   1424a:	0003      	movs	r3, r0
   1424c:	617b      	str	r3, [r7, #20]
   1424e:	e002      	b.n	14256 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14250:	46c0      	nop			; (mov r8, r8)
   14252:	e000      	b.n	14256 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   14254:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   14256:	697b      	ldr	r3, [r7, #20]
   14258:	e003      	b.n	14262 <I2cReadDataWait+0xe6>
        goto exitError0;
   1425a:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   1425c:	4b0b      	ldr	r3, [pc, #44]	; (1428c <I2cReadDataWait+0x110>)
   1425e:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14260:	697b      	ldr	r3, [r7, #20]
}
   14262:	0018      	movs	r0, r3
   14264:	46bd      	mov	sp, r7
   14266:	b006      	add	sp, #24
   14268:	bd80      	pop	{r7, pc}
   1426a:	46c0      	nop			; (mov r8, r8)
   1426c:	00013e79 	.word	0x00013e79
   14270:	00013eb1 	.word	0x00013eb1
   14274:	00013d51 	.word	0x00013d51
   14278:	00019ced 	.word	0x00019ced
   1427c:	00013ed5 	.word	0x00013ed5
   14280:	00013ee9 	.word	0x00013ee9
   14284:	0001aa41 	.word	0x0001aa41
   14288:	00013dc9 	.word	0x00013dc9
   1428c:	00013e41 	.word	0x00013e41

00014290 <I2cPingAddressWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cPingAddressWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   14290:	b580      	push	{r7, lr}
   14292:	b086      	sub	sp, #24
   14294:	af00      	add	r7, sp, #0
   14296:	60f8      	str	r0, [r7, #12]
   14298:	60b9      	str	r1, [r7, #8]
   1429a:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   1429c:	2300      	movs	r3, #0
   1429e:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   142a0:	2300      	movs	r3, #0
   142a2:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   142a4:	2396      	movs	r3, #150	; 0x96
   142a6:	005b      	lsls	r3, r3, #1
   142a8:	0018      	movs	r0, r3
   142aa:	4b24      	ldr	r3, [pc, #144]	; (1433c <I2cPingAddressWait+0xac>)
   142ac:	4798      	blx	r3
   142ae:	0003      	movs	r3, r0
   142b0:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   142b2:	697b      	ldr	r3, [r7, #20]
   142b4:	2b00      	cmp	r3, #0
   142b6:	d133      	bne.n	14320 <I2cPingAddressWait+0x90>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   142b8:	2310      	movs	r3, #16
   142ba:	18fb      	adds	r3, r7, r3
   142bc:	0018      	movs	r0, r3
   142be:	4b20      	ldr	r3, [pc, #128]	; (14340 <I2cPingAddressWait+0xb0>)
   142c0:	4798      	blx	r3
   142c2:	0003      	movs	r3, r0
   142c4:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   142c6:	697b      	ldr	r3, [r7, #20]
   142c8:	2b00      	cmp	r3, #0
   142ca:	d12b      	bne.n	14324 <I2cPingAddressWait+0x94>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   142cc:	68fb      	ldr	r3, [r7, #12]
   142ce:	0018      	movs	r0, r3
   142d0:	4b1c      	ldr	r3, [pc, #112]	; (14344 <I2cPingAddressWait+0xb4>)
   142d2:	4798      	blx	r3
   142d4:	0003      	movs	r3, r0
   142d6:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   142d8:	697b      	ldr	r3, [r7, #20]
   142da:	2b00      	cmp	r3, #0
   142dc:	d125      	bne.n	1432a <I2cPingAddressWait+0x9a>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   142de:	693b      	ldr	r3, [r7, #16]
   142e0:	687a      	ldr	r2, [r7, #4]
   142e2:	0011      	movs	r1, r2
   142e4:	0018      	movs	r0, r3
   142e6:	4b18      	ldr	r3, [pc, #96]	; (14348 <I2cPingAddressWait+0xb8>)
   142e8:	4798      	blx	r3
   142ea:	0003      	movs	r3, r0
   142ec:	2b01      	cmp	r3, #1
   142ee:	d113      	bne.n	14318 <I2cPingAddressWait+0x88>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   142f0:	4b16      	ldr	r3, [pc, #88]	; (1434c <I2cPingAddressWait+0xbc>)
   142f2:	4798      	blx	r3
   142f4:	1e03      	subs	r3, r0, #0
   142f6:	d006      	beq.n	14306 <I2cPingAddressWait+0x76>
            I2cSetTaskErrorStatus(false);
   142f8:	2000      	movs	r0, #0
   142fa:	4b15      	ldr	r3, [pc, #84]	; (14350 <I2cPingAddressWait+0xc0>)
   142fc:	4798      	blx	r3
            error = ERROR_ABORTED;
   142fe:	2303      	movs	r3, #3
   14300:	425b      	negs	r3, r3
   14302:	617b      	str	r3, [r7, #20]
            goto exitError0;
   14304:	e012      	b.n	1432c <I2cPingAddressWait+0x9c>
        }
        vTaskDelay(delay);
   14306:	68bb      	ldr	r3, [r7, #8]
   14308:	0018      	movs	r0, r3
   1430a:	4b12      	ldr	r3, [pc, #72]	; (14354 <I2cPingAddressWait+0xc4>)
   1430c:	4798      	blx	r3
        goto exitError0;
    }


    //---8. Release Mutex
    error = I2cFreeMutex();
   1430e:	4b12      	ldr	r3, [pc, #72]	; (14358 <I2cPingAddressWait+0xc8>)
   14310:	4798      	blx	r3
   14312:	0003      	movs	r3, r0
   14314:	617b      	str	r3, [r7, #20]
   14316:	e006      	b.n	14326 <I2cPingAddressWait+0x96>
        error = ERR_TIMEOUT;
   14318:	2303      	movs	r3, #3
   1431a:	425b      	negs	r3, r3
   1431c:	617b      	str	r3, [r7, #20]
        goto exitError0;
   1431e:	e005      	b.n	1432c <I2cPingAddressWait+0x9c>
    if (ERROR_NONE != error) goto exit;
   14320:	46c0      	nop			; (mov r8, r8)
   14322:	e000      	b.n	14326 <I2cPingAddressWait+0x96>
    if (ERROR_NONE != error) goto exit;
   14324:	46c0      	nop			; (mov r8, r8)
exit:
    return error;
   14326:	697b      	ldr	r3, [r7, #20]
   14328:	e003      	b.n	14332 <I2cPingAddressWait+0xa2>
        goto exitError0;
   1432a:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   1432c:	4b0a      	ldr	r3, [pc, #40]	; (14358 <I2cPingAddressWait+0xc8>)
   1432e:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   14330:	697b      	ldr	r3, [r7, #20]
}
   14332:	0018      	movs	r0, r3
   14334:	46bd      	mov	sp, r7
   14336:	b006      	add	sp, #24
   14338:	bd80      	pop	{r7, pc}
   1433a:	46c0      	nop			; (mov r8, r8)
   1433c:	00013e79 	.word	0x00013e79
   14340:	00013eb1 	.word	0x00013eb1
   14344:	00013d51 	.word	0x00013d51
   14348:	00019ced 	.word	0x00019ced
   1434c:	00013ed5 	.word	0x00013ed5
   14350:	00013ee9 	.word	0x00013ee9
   14354:	0001aa41 	.word	0x0001aa41
   14358:	00013e41 	.word	0x00013e41

0001435c <system_pinmux_get_group_from_gpio_pin>:
{
   1435c:	b580      	push	{r7, lr}
   1435e:	b084      	sub	sp, #16
   14360:	af00      	add	r7, sp, #0
   14362:	0002      	movs	r2, r0
   14364:	1dfb      	adds	r3, r7, #7
   14366:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   14368:	230f      	movs	r3, #15
   1436a:	18fb      	adds	r3, r7, r3
   1436c:	1dfa      	adds	r2, r7, #7
   1436e:	7812      	ldrb	r2, [r2, #0]
   14370:	09d2      	lsrs	r2, r2, #7
   14372:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   14374:	230e      	movs	r3, #14
   14376:	18fb      	adds	r3, r7, r3
   14378:	1dfa      	adds	r2, r7, #7
   1437a:	7812      	ldrb	r2, [r2, #0]
   1437c:	0952      	lsrs	r2, r2, #5
   1437e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   14380:	4b0d      	ldr	r3, [pc, #52]	; (143b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   14382:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   14384:	230f      	movs	r3, #15
   14386:	18fb      	adds	r3, r7, r3
   14388:	781b      	ldrb	r3, [r3, #0]
   1438a:	2b00      	cmp	r3, #0
   1438c:	d10f      	bne.n	143ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1438e:	230f      	movs	r3, #15
   14390:	18fb      	adds	r3, r7, r3
   14392:	781b      	ldrb	r3, [r3, #0]
   14394:	009b      	lsls	r3, r3, #2
   14396:	2210      	movs	r2, #16
   14398:	4694      	mov	ip, r2
   1439a:	44bc      	add	ip, r7
   1439c:	4463      	add	r3, ip
   1439e:	3b08      	subs	r3, #8
   143a0:	681a      	ldr	r2, [r3, #0]
   143a2:	230e      	movs	r3, #14
   143a4:	18fb      	adds	r3, r7, r3
   143a6:	781b      	ldrb	r3, [r3, #0]
   143a8:	01db      	lsls	r3, r3, #7
   143aa:	18d3      	adds	r3, r2, r3
   143ac:	e000      	b.n	143b0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   143ae:	2300      	movs	r3, #0
}
   143b0:	0018      	movs	r0, r3
   143b2:	46bd      	mov	sp, r7
   143b4:	b004      	add	sp, #16
   143b6:	bd80      	pop	{r7, pc}
   143b8:	41004400 	.word	0x41004400

000143bc <port_get_group_from_gpio_pin>:
{
   143bc:	b580      	push	{r7, lr}
   143be:	b082      	sub	sp, #8
   143c0:	af00      	add	r7, sp, #0
   143c2:	0002      	movs	r2, r0
   143c4:	1dfb      	adds	r3, r7, #7
   143c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   143c8:	1dfb      	adds	r3, r7, #7
   143ca:	781b      	ldrb	r3, [r3, #0]
   143cc:	0018      	movs	r0, r3
   143ce:	4b03      	ldr	r3, [pc, #12]	; (143dc <port_get_group_from_gpio_pin+0x20>)
   143d0:	4798      	blx	r3
   143d2:	0003      	movs	r3, r0
}
   143d4:	0018      	movs	r0, r3
   143d6:	46bd      	mov	sp, r7
   143d8:	b002      	add	sp, #8
   143da:	bd80      	pop	{r7, pc}
   143dc:	0001435d 	.word	0x0001435d

000143e0 <port_get_config_defaults>:
{
   143e0:	b580      	push	{r7, lr}
   143e2:	b082      	sub	sp, #8
   143e4:	af00      	add	r7, sp, #0
   143e6:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   143e8:	687b      	ldr	r3, [r7, #4]
   143ea:	2200      	movs	r2, #0
   143ec:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   143ee:	687b      	ldr	r3, [r7, #4]
   143f0:	2201      	movs	r2, #1
   143f2:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   143f4:	687b      	ldr	r3, [r7, #4]
   143f6:	2200      	movs	r2, #0
   143f8:	709a      	strb	r2, [r3, #2]
}
   143fa:	46c0      	nop			; (mov r8, r8)
   143fc:	46bd      	mov	sp, r7
   143fe:	b002      	add	sp, #8
   14400:	bd80      	pop	{r7, pc}
	...

00014404 <port_pin_get_input_level>:
{
   14404:	b580      	push	{r7, lr}
   14406:	b084      	sub	sp, #16
   14408:	af00      	add	r7, sp, #0
   1440a:	0002      	movs	r2, r0
   1440c:	1dfb      	adds	r3, r7, #7
   1440e:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14410:	1dfb      	adds	r3, r7, #7
   14412:	781b      	ldrb	r3, [r3, #0]
   14414:	0018      	movs	r0, r3
   14416:	4b0b      	ldr	r3, [pc, #44]	; (14444 <port_pin_get_input_level+0x40>)
   14418:	4798      	blx	r3
   1441a:	0003      	movs	r3, r0
   1441c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1441e:	1dfb      	adds	r3, r7, #7
   14420:	781b      	ldrb	r3, [r3, #0]
   14422:	221f      	movs	r2, #31
   14424:	4013      	ands	r3, r2
   14426:	2201      	movs	r2, #1
   14428:	409a      	lsls	r2, r3
   1442a:	0013      	movs	r3, r2
   1442c:	60bb      	str	r3, [r7, #8]
	return (port_base->IN.reg & pin_mask);
   1442e:	68fb      	ldr	r3, [r7, #12]
   14430:	6a1b      	ldr	r3, [r3, #32]
   14432:	68ba      	ldr	r2, [r7, #8]
   14434:	4013      	ands	r3, r2
   14436:	1e5a      	subs	r2, r3, #1
   14438:	4193      	sbcs	r3, r2
   1443a:	b2db      	uxtb	r3, r3
}
   1443c:	0018      	movs	r0, r3
   1443e:	46bd      	mov	sp, r7
   14440:	b004      	add	sp, #16
   14442:	bd80      	pop	{r7, pc}
   14444:	000143bd 	.word	0x000143bd

00014448 <PIR_init>:
 *  Author: gopik
 */ 
#include "PIR.h"

void PIR_init()
{
   14448:	b580      	push	{r7, lr}
   1444a:	b082      	sub	sp, #8
   1444c:	af00      	add	r7, sp, #0
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
   1444e:	1d3b      	adds	r3, r7, #4
   14450:	0018      	movs	r0, r3
   14452:	4b08      	ldr	r3, [pc, #32]	; (14474 <PIR_init+0x2c>)
   14454:	4798      	blx	r3
	config_port_pin.direction  = PORT_PIN_DIR_INPUT;
   14456:	1d3b      	adds	r3, r7, #4
   14458:	2200      	movs	r2, #0
   1445a:	701a      	strb	r2, [r3, #0]
	config_port_pin.input_pull = PORT_PIN_PULL_UP;
   1445c:	1d3b      	adds	r3, r7, #4
   1445e:	2201      	movs	r2, #1
   14460:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(PIR_INPUT_PIN, &config_port_pin);
   14462:	1d3b      	adds	r3, r7, #4
   14464:	0019      	movs	r1, r3
   14466:	2022      	movs	r0, #34	; 0x22
   14468:	4b03      	ldr	r3, [pc, #12]	; (14478 <PIR_init+0x30>)
   1446a:	4798      	blx	r3
}
   1446c:	46c0      	nop			; (mov r8, r8)
   1446e:	46bd      	mov	sp, r7
   14470:	b002      	add	sp, #8
   14472:	bd80      	pop	{r7, pc}
   14474:	000143e1 	.word	0x000143e1
   14478:	0002533d 	.word	0x0002533d

0001447c <PIR_check>:

bool PIR_check()
{
   1447c:	b590      	push	{r4, r7, lr}
   1447e:	b083      	sub	sp, #12
   14480:	af00      	add	r7, sp, #0
	bool var;
	var = port_pin_get_input_level(PIR_INPUT_PIN);
   14482:	1dfc      	adds	r4, r7, #7
   14484:	2022      	movs	r0, #34	; 0x22
   14486:	4b07      	ldr	r3, [pc, #28]	; (144a4 <PIR_check+0x28>)
   14488:	4798      	blx	r3
   1448a:	0003      	movs	r3, r0
   1448c:	7023      	strb	r3, [r4, #0]
	if (var)
   1448e:	1dfb      	adds	r3, r7, #7
   14490:	781b      	ldrb	r3, [r3, #0]
   14492:	2b00      	cmp	r3, #0
   14494:	d001      	beq.n	1449a <PIR_check+0x1e>
	{
		return true;
   14496:	2301      	movs	r3, #1
   14498:	e000      	b.n	1449c <PIR_check+0x20>
	}
	return false;
   1449a:	2300      	movs	r3, #0
   1449c:	0018      	movs	r0, r3
   1449e:	46bd      	mov	sp, r7
   144a0:	b003      	add	sp, #12
   144a2:	bd90      	pop	{r4, r7, pc}
   144a4:	00014405 	.word	0x00014405

000144a8 <shtc3WriteRegister>:

/* Function Defintion															*/
/************************************************************************/

static int32_t shtc3WriteRegister(uint8_t *buffer, uint16_t length)
{
   144a8:	b580      	push	{r7, lr}
   144aa:	b084      	sub	sp, #16
   144ac:	af00      	add	r7, sp, #0
   144ae:	6078      	str	r0, [r7, #4]
   144b0:	000a      	movs	r2, r1
   144b2:	1cbb      	adds	r3, r7, #2
   144b4:	801a      	strh	r2, [r3, #0]
	shtc3Data.lenOut = length;
   144b6:	4b0c      	ldr	r3, [pc, #48]	; (144e8 <shtc3WriteRegister+0x40>)
   144b8:	1cba      	adds	r2, r7, #2
   144ba:	8812      	ldrh	r2, [r2, #0]
   144bc:	81da      	strh	r2, [r3, #14]
	shtc3Data.msgOut = buffer;
   144be:	4b0a      	ldr	r3, [pc, #40]	; (144e8 <shtc3WriteRegister+0x40>)
   144c0:	687a      	ldr	r2, [r7, #4]
   144c2:	605a      	str	r2, [r3, #4]
	shtc3Data.msgIn = NULL;
   144c4:	4b08      	ldr	r3, [pc, #32]	; (144e8 <shtc3WriteRegister+0x40>)
   144c6:	2200      	movs	r2, #0
   144c8:	609a      	str	r2, [r3, #8]
	shtc3Data.lenIn = 0;
   144ca:	4b07      	ldr	r3, [pc, #28]	; (144e8 <shtc3WriteRegister+0x40>)
   144cc:	2200      	movs	r2, #0
   144ce:	819a      	strh	r2, [r3, #12]
	int32_t result = I2cWriteDataWait(&shtc3Data, SHTC3_TIMEOUT);
   144d0:	4b05      	ldr	r3, [pc, #20]	; (144e8 <shtc3WriteRegister+0x40>)
   144d2:	210a      	movs	r1, #10
   144d4:	0018      	movs	r0, r3
   144d6:	4b05      	ldr	r3, [pc, #20]	; (144ec <shtc3WriteRegister+0x44>)
   144d8:	4798      	blx	r3
   144da:	0003      	movs	r3, r0
   144dc:	60fb      	str	r3, [r7, #12]
	return result;
   144de:	68fb      	ldr	r3, [r7, #12]
}
   144e0:	0018      	movs	r0, r3
   144e2:	46bd      	mov	sp, r7
   144e4:	b004      	add	sp, #16
   144e6:	bd80      	pop	{r7, pc}
   144e8:	20000020 	.word	0x20000020
   144ec:	00013f09 	.word	0x00013f09

000144f0 <shtc3ReadRegister>:

static int32_t shtc3ReadRegister(uint8_t *buffer, uint16_t length)
{
   144f0:	b580      	push	{r7, lr}
   144f2:	b084      	sub	sp, #16
   144f4:	af00      	add	r7, sp, #0
   144f6:	6078      	str	r0, [r7, #4]
   144f8:	000a      	movs	r2, r1
   144fa:	1cbb      	adds	r3, r7, #2
   144fc:	801a      	strh	r2, [r3, #0]
	shtc3Data.lenOut = length;
   144fe:	4b0d      	ldr	r3, [pc, #52]	; (14534 <shtc3ReadRegister+0x44>)
   14500:	1cba      	adds	r2, r7, #2
   14502:	8812      	ldrh	r2, [r2, #0]
   14504:	81da      	strh	r2, [r3, #14]
	shtc3Data.msgOut = buffer;
   14506:	4b0b      	ldr	r3, [pc, #44]	; (14534 <shtc3ReadRegister+0x44>)
   14508:	687a      	ldr	r2, [r7, #4]
   1450a:	605a      	str	r2, [r3, #4]
	shtc3Data.msgIn = readBuffer;
   1450c:	4b09      	ldr	r3, [pc, #36]	; (14534 <shtc3ReadRegister+0x44>)
   1450e:	4a0a      	ldr	r2, [pc, #40]	; (14538 <shtc3ReadRegister+0x48>)
   14510:	609a      	str	r2, [r3, #8]
	shtc3Data.lenIn = READ_BUFFER_LEN;
   14512:	4b08      	ldr	r3, [pc, #32]	; (14534 <shtc3ReadRegister+0x44>)
   14514:	2206      	movs	r2, #6
   14516:	819a      	strh	r2, [r3, #12]
	int32_t result = I2cReadDataWait(&shtc3Data, SHTC3_DELAY, SHTC3_TIMEOUT);
   14518:	4b06      	ldr	r3, [pc, #24]	; (14534 <shtc3ReadRegister+0x44>)
   1451a:	220a      	movs	r2, #10
   1451c:	21d2      	movs	r1, #210	; 0xd2
   1451e:	0018      	movs	r0, r3
   14520:	4b06      	ldr	r3, [pc, #24]	; (1453c <shtc3ReadRegister+0x4c>)
   14522:	4798      	blx	r3
   14524:	0003      	movs	r3, r0
   14526:	60fb      	str	r3, [r7, #12]
	return result;
   14528:	68fb      	ldr	r3, [r7, #12]
}
   1452a:	0018      	movs	r0, r3
   1452c:	46bd      	mov	sp, r7
   1452e:	b004      	add	sp, #16
   14530:	bd80      	pop	{r7, pc}
   14532:	46c0      	nop			; (mov r8, r8)
   14534:	20000020 	.word	0x20000020
   14538:	20004600 	.word	0x20004600
   1453c:	0001417d 	.word	0x0001417d

00014540 <commFunction>:

int32_t commFunction()
{
   14540:	b580      	push	{r7, lr}
   14542:	b082      	sub	sp, #8
   14544:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   14546:	2300      	movs	r3, #0
   14548:	607b      	str	r3, [r7, #4]
	
	error = shtc3WriteRegister(wakeWriteBuffer, WRITE_BUFFER_LEN);
   1454a:	4b11      	ldr	r3, [pc, #68]	; (14590 <commFunction+0x50>)
   1454c:	2102      	movs	r1, #2
   1454e:	0018      	movs	r0, r3
   14550:	4b10      	ldr	r3, [pc, #64]	; (14594 <commFunction+0x54>)
   14552:	4798      	blx	r3
   14554:	0003      	movs	r3, r0
   14556:	607b      	str	r3, [r7, #4]
	if(error){return error;}
   14558:	687b      	ldr	r3, [r7, #4]
   1455a:	2b00      	cmp	r3, #0
   1455c:	d001      	beq.n	14562 <commFunction+0x22>
   1455e:	687b      	ldr	r3, [r7, #4]
   14560:	e011      	b.n	14586 <commFunction+0x46>
	
	error = shtc3ReadRegister(measureWriteBuffer, WRITE_BUFFER_LEN);
   14562:	4b0d      	ldr	r3, [pc, #52]	; (14598 <commFunction+0x58>)
   14564:	2102      	movs	r1, #2
   14566:	0018      	movs	r0, r3
   14568:	4b0c      	ldr	r3, [pc, #48]	; (1459c <commFunction+0x5c>)
   1456a:	4798      	blx	r3
   1456c:	0003      	movs	r3, r0
   1456e:	607b      	str	r3, [r7, #4]
	if(error){return error;}
   14570:	687b      	ldr	r3, [r7, #4]
   14572:	2b00      	cmp	r3, #0
   14574:	d001      	beq.n	1457a <commFunction+0x3a>
   14576:	687b      	ldr	r3, [r7, #4]
   14578:	e005      	b.n	14586 <commFunction+0x46>
	
	shtc3ReadRegister(sleepWriteBuffer, WRITE_BUFFER_LEN);
   1457a:	4b09      	ldr	r3, [pc, #36]	; (145a0 <commFunction+0x60>)
   1457c:	2102      	movs	r1, #2
   1457e:	0018      	movs	r0, r3
   14580:	4b06      	ldr	r3, [pc, #24]	; (1459c <commFunction+0x5c>)
   14582:	4798      	blx	r3
	return error;
   14584:	687b      	ldr	r3, [r7, #4]
}
   14586:	0018      	movs	r0, r3
   14588:	46bd      	mov	sp, r7
   1458a:	b002      	add	sp, #8
   1458c:	bd80      	pop	{r7, pc}
   1458e:	46c0      	nop			; (mov r8, r8)
   14590:	20000014 	.word	0x20000014
   14594:	000144a9 	.word	0x000144a9
   14598:	20000018 	.word	0x20000018
   1459c:	000144f1 	.word	0x000144f1
   145a0:	2000001c 	.word	0x2000001c

000145a4 <getTempAndHum>:

bool getTempAndHum(uint16_t *buffer)
{
   145a4:	b580      	push	{r7, lr}
   145a6:	b084      	sub	sp, #16
   145a8:	af00      	add	r7, sp, #0
   145aa:	6078      	str	r0, [r7, #4]
	int32_t error;
	error = commFunction();
   145ac:	4b26      	ldr	r3, [pc, #152]	; (14648 <getTempAndHum+0xa4>)
   145ae:	4798      	blx	r3
   145b0:	0003      	movs	r3, r0
   145b2:	60fb      	str	r3, [r7, #12]
	if(error){goto errorHandle;}
   145b4:	68fb      	ldr	r3, [r7, #12]
   145b6:	2b00      	cmp	r3, #0
   145b8:	d138      	bne.n	1462c <getTempAndHum+0x88>
			
	humidity = (readBuffer[0] << 8) | readBuffer[1] ;
   145ba:	4b24      	ldr	r3, [pc, #144]	; (1464c <getTempAndHum+0xa8>)
   145bc:	781b      	ldrb	r3, [r3, #0]
   145be:	021b      	lsls	r3, r3, #8
   145c0:	b21a      	sxth	r2, r3
   145c2:	4b22      	ldr	r3, [pc, #136]	; (1464c <getTempAndHum+0xa8>)
   145c4:	785b      	ldrb	r3, [r3, #1]
   145c6:	b21b      	sxth	r3, r3
   145c8:	4313      	orrs	r3, r2
   145ca:	b21b      	sxth	r3, r3
   145cc:	b29a      	uxth	r2, r3
   145ce:	4b20      	ldr	r3, [pc, #128]	; (14650 <getTempAndHum+0xac>)
   145d0:	801a      	strh	r2, [r3, #0]
	temp = (readBuffer[3] << 8) | readBuffer[4] ;
   145d2:	4b1e      	ldr	r3, [pc, #120]	; (1464c <getTempAndHum+0xa8>)
   145d4:	78db      	ldrb	r3, [r3, #3]
   145d6:	021b      	lsls	r3, r3, #8
   145d8:	b21a      	sxth	r2, r3
   145da:	4b1c      	ldr	r3, [pc, #112]	; (1464c <getTempAndHum+0xa8>)
   145dc:	791b      	ldrb	r3, [r3, #4]
   145de:	b21b      	sxth	r3, r3
   145e0:	4313      	orrs	r3, r2
   145e2:	b21b      	sxth	r3, r3
   145e4:	b29a      	uxth	r2, r3
   145e6:	4b1b      	ldr	r3, [pc, #108]	; (14654 <getTempAndHum+0xb0>)
   145e8:	801a      	strh	r2, [r3, #0]

	buffer[0] = 100 * humidity/65536;
   145ea:	4b19      	ldr	r3, [pc, #100]	; (14650 <getTempAndHum+0xac>)
   145ec:	881b      	ldrh	r3, [r3, #0]
   145ee:	001a      	movs	r2, r3
   145f0:	2364      	movs	r3, #100	; 0x64
   145f2:	4353      	muls	r3, r2
   145f4:	2b00      	cmp	r3, #0
   145f6:	da02      	bge.n	145fe <getTempAndHum+0x5a>
   145f8:	4a17      	ldr	r2, [pc, #92]	; (14658 <getTempAndHum+0xb4>)
   145fa:	4694      	mov	ip, r2
   145fc:	4463      	add	r3, ip
   145fe:	141b      	asrs	r3, r3, #16
   14600:	b29a      	uxth	r2, r3
   14602:	687b      	ldr	r3, [r7, #4]
   14604:	801a      	strh	r2, [r3, #0]
	buffer[1] = -45 +175 * temp/65536;
   14606:	687b      	ldr	r3, [r7, #4]
   14608:	1c9a      	adds	r2, r3, #2
   1460a:	4b12      	ldr	r3, [pc, #72]	; (14654 <getTempAndHum+0xb0>)
   1460c:	881b      	ldrh	r3, [r3, #0]
   1460e:	0019      	movs	r1, r3
   14610:	23af      	movs	r3, #175	; 0xaf
   14612:	434b      	muls	r3, r1
   14614:	2b00      	cmp	r3, #0
   14616:	da02      	bge.n	1461e <getTempAndHum+0x7a>
   14618:	490f      	ldr	r1, [pc, #60]	; (14658 <getTempAndHum+0xb4>)
   1461a:	468c      	mov	ip, r1
   1461c:	4463      	add	r3, ip
   1461e:	141b      	asrs	r3, r3, #16
   14620:	b29b      	uxth	r3, r3
   14622:	3b2d      	subs	r3, #45	; 0x2d
   14624:	b29b      	uxth	r3, r3
   14626:	8013      	strh	r3, [r2, #0]
	return true;
   14628:	2301      	movs	r3, #1
   1462a:	e008      	b.n	1463e <getTempAndHum+0x9a>
	if(error){goto errorHandle;}
   1462c:	46c0      	nop			; (mov r8, r8)
	
	errorHandle:
	
	buffer[0] = 0;
   1462e:	687b      	ldr	r3, [r7, #4]
   14630:	2200      	movs	r2, #0
   14632:	801a      	strh	r2, [r3, #0]
	buffer[1] = 0;
   14634:	687b      	ldr	r3, [r7, #4]
   14636:	3302      	adds	r3, #2
   14638:	2200      	movs	r2, #0
   1463a:	801a      	strh	r2, [r3, #0]
	return false;
   1463c:	2300      	movs	r3, #0
	
   1463e:	0018      	movs	r0, r3
   14640:	46bd      	mov	sp, r7
   14642:	b004      	add	sp, #16
   14644:	bd80      	pop	{r7, pc}
   14646:	46c0      	nop			; (mov r8, r8)
   14648:	00014541 	.word	0x00014541
   1464c:	20004600 	.word	0x20004600
   14650:	2000460c 	.word	0x2000460c
   14654:	20004606 	.word	0x20004606
   14658:	0000ffff 	.word	0x0000ffff

0001465c <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   1465c:	b580      	push	{r7, lr}
   1465e:	b082      	sub	sp, #8
   14660:	af00      	add	r7, sp, #0
   14662:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   14664:	4b0d      	ldr	r3, [pc, #52]	; (1469c <vUiHandlerTask+0x40>)
   14666:	0018      	movs	r0, r3
   14668:	4b0d      	ldr	r3, [pc, #52]	; (146a0 <vUiHandlerTask+0x44>)
   1466a:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   1466c:	4b0d      	ldr	r3, [pc, #52]	; (146a4 <vUiHandlerTask+0x48>)
   1466e:	2201      	movs	r2, #1
   14670:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
	*/

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   14672:	4b0c      	ldr	r3, [pc, #48]	; (146a4 <vUiHandlerTask+0x48>)
   14674:	781b      	ldrb	r3, [r3, #0]
   14676:	2b01      	cmp	r3, #1
   14678:	d007      	beq.n	1468a <vUiHandlerTask+0x2e>
   1467a:	2b02      	cmp	r3, #2
   1467c:	d007      	beq.n	1468e <vUiHandlerTask+0x32>
   1467e:	2b00      	cmp	r3, #0
   14680:	d007      	beq.n	14692 <vUiHandlerTask+0x36>
                break;
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   14682:	4b08      	ldr	r3, [pc, #32]	; (146a4 <vUiHandlerTask+0x48>)
   14684:	2200      	movs	r2, #0
   14686:	701a      	strb	r2, [r3, #0]
                break;
   14688:	e004      	b.n	14694 <vUiHandlerTask+0x38>
                break;
   1468a:	46c0      	nop			; (mov r8, r8)
   1468c:	e002      	b.n	14694 <vUiHandlerTask+0x38>
                break;
   1468e:	46c0      	nop			; (mov r8, r8)
   14690:	e000      	b.n	14694 <vUiHandlerTask+0x38>
                break;
   14692:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   14694:	2032      	movs	r0, #50	; 0x32
   14696:	4b04      	ldr	r3, [pc, #16]	; (146a8 <vUiHandlerTask+0x4c>)
   14698:	4798      	blx	r3
        switch (uiState) {
   1469a:	e7ea      	b.n	14672 <vUiHandlerTask+0x16>
   1469c:	00034964 	.word	0x00034964
   146a0:	0001c695 	.word	0x0001c695
   146a4:	2000465c 	.word	0x2000465c
   146a8:	0001aa41 	.word	0x0001aa41

000146ac <alsInit>:
#include "ALS.h"

I2C_Data veml6030Data;

int32_t alsInit(void)
{
   146ac:	b580      	push	{r7, lr}
   146ae:	b082      	sub	sp, #8
   146b0:	af00      	add	r7, sp, #0
	int32_t error = ERROR_NONE;
   146b2:	2300      	movs	r3, #0
   146b4:	607b      	str	r3, [r7, #4]
	error = alsWriteRegister(VEML6030_ALS_CONF_0, 0x1040);
   146b6:	2382      	movs	r3, #130	; 0x82
   146b8:	015b      	lsls	r3, r3, #5
   146ba:	0019      	movs	r1, r3
   146bc:	2000      	movs	r0, #0
   146be:	4b06      	ldr	r3, [pc, #24]	; (146d8 <alsInit+0x2c>)
   146c0:	4798      	blx	r3
   146c2:	0003      	movs	r3, r0
   146c4:	607b      	str	r3, [r7, #4]
	delay_ms(5);
   146c6:	2005      	movs	r0, #5
   146c8:	4b04      	ldr	r3, [pc, #16]	; (146dc <alsInit+0x30>)
   146ca:	4798      	blx	r3
	return error;
   146cc:	687b      	ldr	r3, [r7, #4]
}
   146ce:	0018      	movs	r0, r3
   146d0:	46bd      	mov	sp, r7
   146d2:	b002      	add	sp, #8
   146d4:	bd80      	pop	{r7, pc}
   146d6:	46c0      	nop			; (mov r8, r8)
   146d8:	000146e1 	.word	0x000146e1
   146dc:	0001ea4d 	.word	0x0001ea4d

000146e0 <alsWriteRegister>:

int32_t alsWriteRegister(uint8_t registerAddress, uint16_t data)
{
   146e0:	b580      	push	{r7, lr}
   146e2:	b084      	sub	sp, #16
   146e4:	af00      	add	r7, sp, #0
   146e6:	0002      	movs	r2, r0
   146e8:	1dfb      	adds	r3, r7, #7
   146ea:	701a      	strb	r2, [r3, #0]
   146ec:	1d3b      	adds	r3, r7, #4
   146ee:	1c0a      	adds	r2, r1, #0
   146f0:	801a      	strh	r2, [r3, #0]
	uint8_t readData;
	int32_t error = ERROR_NONE;
   146f2:	2300      	movs	r3, #0
   146f4:	60fb      	str	r3, [r7, #12]
	uint8_t msg[3] = {registerAddress, data&0xFF, data>>8};
   146f6:	2308      	movs	r3, #8
   146f8:	18fb      	adds	r3, r7, r3
   146fa:	1dfa      	adds	r2, r7, #7
   146fc:	7812      	ldrb	r2, [r2, #0]
   146fe:	701a      	strb	r2, [r3, #0]
   14700:	1d3b      	adds	r3, r7, #4
   14702:	881b      	ldrh	r3, [r3, #0]
   14704:	b2da      	uxtb	r2, r3
   14706:	2308      	movs	r3, #8
   14708:	18fb      	adds	r3, r7, r3
   1470a:	705a      	strb	r2, [r3, #1]
   1470c:	1d3b      	adds	r3, r7, #4
   1470e:	881b      	ldrh	r3, [r3, #0]
   14710:	0a1b      	lsrs	r3, r3, #8
   14712:	b29b      	uxth	r3, r3
   14714:	b2da      	uxtb	r2, r3
   14716:	2308      	movs	r3, #8
   14718:	18fb      	adds	r3, r7, r3
   1471a:	709a      	strb	r2, [r3, #2]
		
	veml6030Data.address = VEML6030_I2CADDR_DEFAULT;
   1471c:	4b0e      	ldr	r3, [pc, #56]	; (14758 <alsWriteRegister+0x78>)
   1471e:	2248      	movs	r2, #72	; 0x48
   14720:	701a      	strb	r2, [r3, #0]
	veml6030Data.msgOut = &msg;
   14722:	4b0d      	ldr	r3, [pc, #52]	; (14758 <alsWriteRegister+0x78>)
   14724:	2208      	movs	r2, #8
   14726:	18ba      	adds	r2, r7, r2
   14728:	605a      	str	r2, [r3, #4]
	veml6030Data.lenOut = 3;
   1472a:	4b0b      	ldr	r3, [pc, #44]	; (14758 <alsWriteRegister+0x78>)
   1472c:	2203      	movs	r2, #3
   1472e:	81da      	strh	r2, [r3, #14]
	veml6030Data.msgIn = &readData;
   14730:	4b09      	ldr	r3, [pc, #36]	; (14758 <alsWriteRegister+0x78>)
   14732:	220b      	movs	r2, #11
   14734:	18ba      	adds	r2, r7, r2
   14736:	609a      	str	r2, [r3, #8]
	veml6030Data.lenIn = 0;
   14738:	4b07      	ldr	r3, [pc, #28]	; (14758 <alsWriteRegister+0x78>)
   1473a:	2200      	movs	r2, #0
   1473c:	819a      	strh	r2, [r3, #12]
	error = I2cWriteDataWait(&veml6030Data, VEML6030_TIMEOUT);
   1473e:	4b06      	ldr	r3, [pc, #24]	; (14758 <alsWriteRegister+0x78>)
   14740:	2164      	movs	r1, #100	; 0x64
   14742:	0018      	movs	r0, r3
   14744:	4b05      	ldr	r3, [pc, #20]	; (1475c <alsWriteRegister+0x7c>)
   14746:	4798      	blx	r3
   14748:	0003      	movs	r3, r0
   1474a:	60fb      	str	r3, [r7, #12]
	return error;
   1474c:	68fb      	ldr	r3, [r7, #12]
}
   1474e:	0018      	movs	r0, r3
   14750:	46bd      	mov	sp, r7
   14752:	b004      	add	sp, #16
   14754:	bd80      	pop	{r7, pc}
   14756:	46c0      	nop			; (mov r8, r8)
   14758:	20004660 	.word	0x20004660
   1475c:	00013f09 	.word	0x00013f09

00014760 <alsReadRegister>:

int32_t alsReadRegister(uint8_t registerAddress, uint8_t *data, uint8_t length)
{
   14760:	b580      	push	{r7, lr}
   14762:	b084      	sub	sp, #16
   14764:	af00      	add	r7, sp, #0
   14766:	6039      	str	r1, [r7, #0]
   14768:	0011      	movs	r1, r2
   1476a:	1dfb      	adds	r3, r7, #7
   1476c:	1c02      	adds	r2, r0, #0
   1476e:	701a      	strb	r2, [r3, #0]
   14770:	1dbb      	adds	r3, r7, #6
   14772:	1c0a      	adds	r2, r1, #0
   14774:	701a      	strb	r2, [r3, #0]
	int32_t error = ERROR_NONE;
   14776:	2300      	movs	r3, #0
   14778:	60fb      	str	r3, [r7, #12]
	uint8_t msg = registerAddress;
   1477a:	230b      	movs	r3, #11
   1477c:	18fb      	adds	r3, r7, r3
   1477e:	1dfa      	adds	r2, r7, #7
   14780:	7812      	ldrb	r2, [r2, #0]
   14782:	701a      	strb	r2, [r3, #0]
	veml6030Data.address = VEML6030_I2CADDR_DEFAULT;
   14784:	4b0f      	ldr	r3, [pc, #60]	; (147c4 <alsReadRegister+0x64>)
   14786:	2248      	movs	r2, #72	; 0x48
   14788:	701a      	strb	r2, [r3, #0]
	veml6030Data.msgOut = &msg;
   1478a:	4b0e      	ldr	r3, [pc, #56]	; (147c4 <alsReadRegister+0x64>)
   1478c:	220b      	movs	r2, #11
   1478e:	18ba      	adds	r2, r7, r2
   14790:	605a      	str	r2, [r3, #4]
	veml6030Data.lenOut = 1;
   14792:	4b0c      	ldr	r3, [pc, #48]	; (147c4 <alsReadRegister+0x64>)
   14794:	2201      	movs	r2, #1
   14796:	81da      	strh	r2, [r3, #14]
	veml6030Data.msgIn = data;
   14798:	4b0a      	ldr	r3, [pc, #40]	; (147c4 <alsReadRegister+0x64>)
   1479a:	683a      	ldr	r2, [r7, #0]
   1479c:	609a      	str	r2, [r3, #8]
	veml6030Data.lenIn = length;
   1479e:	1dbb      	adds	r3, r7, #6
   147a0:	781b      	ldrb	r3, [r3, #0]
   147a2:	b29a      	uxth	r2, r3
   147a4:	4b07      	ldr	r3, [pc, #28]	; (147c4 <alsReadRegister+0x64>)
   147a6:	819a      	strh	r2, [r3, #12]
	error = I2cReadDataWaitNoStop(&veml6030Data, 0, 100);
   147a8:	4b06      	ldr	r3, [pc, #24]	; (147c4 <alsReadRegister+0x64>)
   147aa:	2264      	movs	r2, #100	; 0x64
   147ac:	2100      	movs	r1, #0
   147ae:	0018      	movs	r0, r3
   147b0:	4b05      	ldr	r3, [pc, #20]	; (147c8 <alsReadRegister+0x68>)
   147b2:	4798      	blx	r3
   147b4:	0003      	movs	r3, r0
   147b6:	60fb      	str	r3, [r7, #12]
	return error;
   147b8:	68fb      	ldr	r3, [r7, #12]
}
   147ba:	0018      	movs	r0, r3
   147bc:	46bd      	mov	sp, r7
   147be:	b004      	add	sp, #16
   147c0:	bd80      	pop	{r7, pc}
   147c2:	46c0      	nop			; (mov r8, r8)
   147c4:	20004660 	.word	0x20004660
   147c8:	00014065 	.word	0x00014065

000147cc <alsGetVal>:

int alsGetVal(alsData *data)
{
   147cc:	b590      	push	{r4, r7, lr}
   147ce:	b085      	sub	sp, #20
   147d0:	af00      	add	r7, sp, #0
   147d2:	6078      	str	r0, [r7, #4]
	int32_t error = ERROR_NONE;
   147d4:	2300      	movs	r3, #0
   147d6:	60fb      	str	r3, [r7, #12]
	uint8_t buffer[2];
	
	error = alsReadRegister(VEML6030_ALS, &buffer, 2);
   147d8:	2308      	movs	r3, #8
   147da:	18fb      	adds	r3, r7, r3
   147dc:	2202      	movs	r2, #2
   147de:	0019      	movs	r1, r3
   147e0:	2004      	movs	r0, #4
   147e2:	4b29      	ldr	r3, [pc, #164]	; (14888 <alsGetVal+0xbc>)
   147e4:	4798      	blx	r3
   147e6:	0003      	movs	r3, r0
   147e8:	60fb      	str	r3, [r7, #12]
	if (error != ERROR_NONE) return error;
   147ea:	68fb      	ldr	r3, [r7, #12]
   147ec:	2b00      	cmp	r3, #0
   147ee:	d001      	beq.n	147f4 <alsGetVal+0x28>
   147f0:	68fb      	ldr	r3, [r7, #12]
   147f2:	e044      	b.n	1487e <alsGetVal+0xb2>
	data->luxVal = (buffer[0] | (buffer[1] << 8))*0.2304;
   147f4:	2308      	movs	r3, #8
   147f6:	18fb      	adds	r3, r7, r3
   147f8:	781b      	ldrb	r3, [r3, #0]
   147fa:	001a      	movs	r2, r3
   147fc:	2308      	movs	r3, #8
   147fe:	18fb      	adds	r3, r7, r3
   14800:	785b      	ldrb	r3, [r3, #1]
   14802:	021b      	lsls	r3, r3, #8
   14804:	431a      	orrs	r2, r3
   14806:	4b21      	ldr	r3, [pc, #132]	; (1488c <alsGetVal+0xc0>)
   14808:	0010      	movs	r0, r2
   1480a:	4798      	blx	r3
   1480c:	4c20      	ldr	r4, [pc, #128]	; (14890 <alsGetVal+0xc4>)
   1480e:	4a21      	ldr	r2, [pc, #132]	; (14894 <alsGetVal+0xc8>)
   14810:	4b21      	ldr	r3, [pc, #132]	; (14898 <alsGetVal+0xcc>)
   14812:	47a0      	blx	r4
   14814:	0003      	movs	r3, r0
   14816:	000c      	movs	r4, r1
   14818:	0019      	movs	r1, r3
   1481a:	0022      	movs	r2, r4
   1481c:	4b1f      	ldr	r3, [pc, #124]	; (1489c <alsGetVal+0xd0>)
   1481e:	0008      	movs	r0, r1
   14820:	0011      	movs	r1, r2
   14822:	4798      	blx	r3
   14824:	1c02      	adds	r2, r0, #0
   14826:	687b      	ldr	r3, [r7, #4]
   14828:	601a      	str	r2, [r3, #0]
	
	error = alsReadRegister(VEML6030_WHITE, &buffer, 2);
   1482a:	2308      	movs	r3, #8
   1482c:	18fb      	adds	r3, r7, r3
   1482e:	2202      	movs	r2, #2
   14830:	0019      	movs	r1, r3
   14832:	2005      	movs	r0, #5
   14834:	4b14      	ldr	r3, [pc, #80]	; (14888 <alsGetVal+0xbc>)
   14836:	4798      	blx	r3
   14838:	0003      	movs	r3, r0
   1483a:	60fb      	str	r3, [r7, #12]
	if (error != ERROR_NONE) return error;
   1483c:	68fb      	ldr	r3, [r7, #12]
   1483e:	2b00      	cmp	r3, #0
   14840:	d001      	beq.n	14846 <alsGetVal+0x7a>
   14842:	68fb      	ldr	r3, [r7, #12]
   14844:	e01b      	b.n	1487e <alsGetVal+0xb2>
	data->whiteVal = (buffer[0] | (buffer[1] << 8))*0.2304;
   14846:	2308      	movs	r3, #8
   14848:	18fb      	adds	r3, r7, r3
   1484a:	781b      	ldrb	r3, [r3, #0]
   1484c:	001a      	movs	r2, r3
   1484e:	2308      	movs	r3, #8
   14850:	18fb      	adds	r3, r7, r3
   14852:	785b      	ldrb	r3, [r3, #1]
   14854:	021b      	lsls	r3, r3, #8
   14856:	431a      	orrs	r2, r3
   14858:	4b0c      	ldr	r3, [pc, #48]	; (1488c <alsGetVal+0xc0>)
   1485a:	0010      	movs	r0, r2
   1485c:	4798      	blx	r3
   1485e:	4c0c      	ldr	r4, [pc, #48]	; (14890 <alsGetVal+0xc4>)
   14860:	4a0c      	ldr	r2, [pc, #48]	; (14894 <alsGetVal+0xc8>)
   14862:	4b0d      	ldr	r3, [pc, #52]	; (14898 <alsGetVal+0xcc>)
   14864:	47a0      	blx	r4
   14866:	0003      	movs	r3, r0
   14868:	000c      	movs	r4, r1
   1486a:	0019      	movs	r1, r3
   1486c:	0022      	movs	r2, r4
   1486e:	4b0b      	ldr	r3, [pc, #44]	; (1489c <alsGetVal+0xd0>)
   14870:	0008      	movs	r0, r1
   14872:	0011      	movs	r1, r2
   14874:	4798      	blx	r3
   14876:	1c02      	adds	r2, r0, #0
   14878:	687b      	ldr	r3, [r7, #4]
   1487a:	605a      	str	r2, [r3, #4]
	
	return error;
   1487c:	68fb      	ldr	r3, [r7, #12]
}
   1487e:	0018      	movs	r0, r3
   14880:	46bd      	mov	sp, r7
   14882:	b005      	add	sp, #20
   14884:	bd90      	pop	{r4, r7, pc}
   14886:	46c0      	nop			; (mov r8, r8)
   14888:	00014761 	.word	0x00014761
   1488c:	00032ea9 	.word	0x00032ea9
   14890:	00032315 	.word	0x00032315
   14894:	487fcb92 	.word	0x487fcb92
   14898:	3fcd7dbf 	.word	0x3fcd7dbf
   1489c:	00032f9d 	.word	0x00032f9d

000148a0 <system_pinmux_get_group_from_gpio_pin>:
{
   148a0:	b580      	push	{r7, lr}
   148a2:	b084      	sub	sp, #16
   148a4:	af00      	add	r7, sp, #0
   148a6:	0002      	movs	r2, r0
   148a8:	1dfb      	adds	r3, r7, #7
   148aa:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   148ac:	230f      	movs	r3, #15
   148ae:	18fb      	adds	r3, r7, r3
   148b0:	1dfa      	adds	r2, r7, #7
   148b2:	7812      	ldrb	r2, [r2, #0]
   148b4:	09d2      	lsrs	r2, r2, #7
   148b6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   148b8:	230e      	movs	r3, #14
   148ba:	18fb      	adds	r3, r7, r3
   148bc:	1dfa      	adds	r2, r7, #7
   148be:	7812      	ldrb	r2, [r2, #0]
   148c0:	0952      	lsrs	r2, r2, #5
   148c2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   148c4:	4b0d      	ldr	r3, [pc, #52]	; (148fc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   148c6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   148c8:	230f      	movs	r3, #15
   148ca:	18fb      	adds	r3, r7, r3
   148cc:	781b      	ldrb	r3, [r3, #0]
   148ce:	2b00      	cmp	r3, #0
   148d0:	d10f      	bne.n	148f2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   148d2:	230f      	movs	r3, #15
   148d4:	18fb      	adds	r3, r7, r3
   148d6:	781b      	ldrb	r3, [r3, #0]
   148d8:	009b      	lsls	r3, r3, #2
   148da:	2210      	movs	r2, #16
   148dc:	4694      	mov	ip, r2
   148de:	44bc      	add	ip, r7
   148e0:	4463      	add	r3, ip
   148e2:	3b08      	subs	r3, #8
   148e4:	681a      	ldr	r2, [r3, #0]
   148e6:	230e      	movs	r3, #14
   148e8:	18fb      	adds	r3, r7, r3
   148ea:	781b      	ldrb	r3, [r3, #0]
   148ec:	01db      	lsls	r3, r3, #7
   148ee:	18d3      	adds	r3, r2, r3
   148f0:	e000      	b.n	148f4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   148f2:	2300      	movs	r3, #0
}
   148f4:	0018      	movs	r0, r3
   148f6:	46bd      	mov	sp, r7
   148f8:	b004      	add	sp, #16
   148fa:	bd80      	pop	{r7, pc}
   148fc:	41004400 	.word	0x41004400

00014900 <port_get_group_from_gpio_pin>:
{
   14900:	b580      	push	{r7, lr}
   14902:	b082      	sub	sp, #8
   14904:	af00      	add	r7, sp, #0
   14906:	0002      	movs	r2, r0
   14908:	1dfb      	adds	r3, r7, #7
   1490a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1490c:	1dfb      	adds	r3, r7, #7
   1490e:	781b      	ldrb	r3, [r3, #0]
   14910:	0018      	movs	r0, r3
   14912:	4b03      	ldr	r3, [pc, #12]	; (14920 <port_get_group_from_gpio_pin+0x20>)
   14914:	4798      	blx	r3
   14916:	0003      	movs	r3, r0
}
   14918:	0018      	movs	r0, r3
   1491a:	46bd      	mov	sp, r7
   1491c:	b002      	add	sp, #8
   1491e:	bd80      	pop	{r7, pc}
   14920:	000148a1 	.word	0x000148a1

00014924 <port_pin_set_output_level>:
{
   14924:	b580      	push	{r7, lr}
   14926:	b084      	sub	sp, #16
   14928:	af00      	add	r7, sp, #0
   1492a:	0002      	movs	r2, r0
   1492c:	1dfb      	adds	r3, r7, #7
   1492e:	701a      	strb	r2, [r3, #0]
   14930:	1dbb      	adds	r3, r7, #6
   14932:	1c0a      	adds	r2, r1, #0
   14934:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   14936:	1dfb      	adds	r3, r7, #7
   14938:	781b      	ldrb	r3, [r3, #0]
   1493a:	0018      	movs	r0, r3
   1493c:	4b0d      	ldr	r3, [pc, #52]	; (14974 <port_pin_set_output_level+0x50>)
   1493e:	4798      	blx	r3
   14940:	0003      	movs	r3, r0
   14942:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   14944:	1dfb      	adds	r3, r7, #7
   14946:	781b      	ldrb	r3, [r3, #0]
   14948:	221f      	movs	r2, #31
   1494a:	4013      	ands	r3, r2
   1494c:	2201      	movs	r2, #1
   1494e:	409a      	lsls	r2, r3
   14950:	0013      	movs	r3, r2
   14952:	60bb      	str	r3, [r7, #8]
	if (level) {
   14954:	1dbb      	adds	r3, r7, #6
   14956:	781b      	ldrb	r3, [r3, #0]
   14958:	2b00      	cmp	r3, #0
   1495a:	d003      	beq.n	14964 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1495c:	68fb      	ldr	r3, [r7, #12]
   1495e:	68ba      	ldr	r2, [r7, #8]
   14960:	619a      	str	r2, [r3, #24]
}
   14962:	e002      	b.n	1496a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   14964:	68fb      	ldr	r3, [r7, #12]
   14966:	68ba      	ldr	r2, [r7, #8]
   14968:	615a      	str	r2, [r3, #20]
}
   1496a:	46c0      	nop			; (mov r8, r8)
   1496c:	46bd      	mov	sp, r7
   1496e:	b004      	add	sp, #16
   14970:	bd80      	pop	{r7, pc}
   14972:	46c0      	nop			; (mov r8, r8)
   14974:	00014901 	.word	0x00014901

00014978 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   14978:	b580      	push	{r7, lr}
   1497a:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   1497c:	4b02      	ldr	r3, [pc, #8]	; (14988 <init_state+0x10>)
   1497e:	2200      	movs	r2, #0
   14980:	701a      	strb	r2, [r3, #0]
}
   14982:	46c0      	nop			; (mov r8, r8)
   14984:	46bd      	mov	sp, r7
   14986:	bd80      	pop	{r7, pc}
   14988:	200004b1 	.word	0x200004b1

0001498c <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   1498c:	b580      	push	{r7, lr}
   1498e:	b082      	sub	sp, #8
   14990:	af00      	add	r7, sp, #0
   14992:	0002      	movs	r2, r0
   14994:	1dfb      	adds	r3, r7, #7
   14996:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   14998:	1dfb      	adds	r3, r7, #7
   1499a:	781b      	ldrb	r3, [r3, #0]
   1499c:	b25b      	sxtb	r3, r3
   1499e:	43db      	mvns	r3, r3
   149a0:	b25b      	sxtb	r3, r3
   149a2:	4a06      	ldr	r2, [pc, #24]	; (149bc <clear_state+0x30>)
   149a4:	7812      	ldrb	r2, [r2, #0]
   149a6:	b252      	sxtb	r2, r2
   149a8:	4013      	ands	r3, r2
   149aa:	b25b      	sxtb	r3, r3
   149ac:	b2da      	uxtb	r2, r3
   149ae:	4b03      	ldr	r3, [pc, #12]	; (149bc <clear_state+0x30>)
   149b0:	701a      	strb	r2, [r3, #0]
}
   149b2:	46c0      	nop			; (mov r8, r8)
   149b4:	46bd      	mov	sp, r7
   149b6:	b002      	add	sp, #8
   149b8:	bd80      	pop	{r7, pc}
   149ba:	46c0      	nop			; (mov r8, r8)
   149bc:	200004b1 	.word	0x200004b1

000149c0 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   149c0:	b580      	push	{r7, lr}
   149c2:	b082      	sub	sp, #8
   149c4:	af00      	add	r7, sp, #0
   149c6:	0002      	movs	r2, r0
   149c8:	1dfb      	adds	r3, r7, #7
   149ca:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   149cc:	4b05      	ldr	r3, [pc, #20]	; (149e4 <add_state+0x24>)
   149ce:	781a      	ldrb	r2, [r3, #0]
   149d0:	1dfb      	adds	r3, r7, #7
   149d2:	781b      	ldrb	r3, [r3, #0]
   149d4:	4313      	orrs	r3, r2
   149d6:	b2da      	uxtb	r2, r3
   149d8:	4b02      	ldr	r3, [pc, #8]	; (149e4 <add_state+0x24>)
   149da:	701a      	strb	r2, [r3, #0]
}
   149dc:	46c0      	nop			; (mov r8, r8)
   149de:	46bd      	mov	sp, r7
   149e0:	b002      	add	sp, #8
   149e2:	bd80      	pop	{r7, pc}
   149e4:	200004b1 	.word	0x200004b1

000149e8 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   149e8:	b580      	push	{r7, lr}
   149ea:	b082      	sub	sp, #8
   149ec:	af00      	add	r7, sp, #0
   149ee:	0002      	movs	r2, r0
   149f0:	1dfb      	adds	r3, r7, #7
   149f2:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   149f4:	4b06      	ldr	r3, [pc, #24]	; (14a10 <is_state_set+0x28>)
   149f6:	781b      	ldrb	r3, [r3, #0]
   149f8:	1dfa      	adds	r2, r7, #7
   149fa:	7812      	ldrb	r2, [r2, #0]
   149fc:	4013      	ands	r3, r2
   149fe:	b2db      	uxtb	r3, r3
   14a00:	1e5a      	subs	r2, r3, #1
   14a02:	4193      	sbcs	r3, r2
   14a04:	b2db      	uxtb	r3, r3
}
   14a06:	0018      	movs	r0, r3
   14a08:	46bd      	mov	sp, r7
   14a0a:	b002      	add	sp, #8
   14a0c:	bd80      	pop	{r7, pc}
   14a0e:	46c0      	nop			; (mov r8, r8)
   14a10:	200004b1 	.word	0x200004b1

00014a14 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   14a14:	b590      	push	{r4, r7, lr}
   14a16:	b085      	sub	sp, #20
   14a18:	af00      	add	r7, sp, #0
   14a1a:	6078      	str	r0, [r7, #4]
   14a1c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   14a1e:	687b      	ldr	r3, [r7, #4]
   14a20:	2b00      	cmp	r3, #0
   14a22:	d002      	beq.n	14a2a <is_exist_file+0x16>
   14a24:	683b      	ldr	r3, [r7, #0]
   14a26:	2b00      	cmp	r3, #0
   14a28:	d101      	bne.n	14a2e <is_exist_file+0x1a>
        return false;
   14a2a:	2300      	movs	r3, #0
   14a2c:	e013      	b.n	14a56 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   14a2e:	230f      	movs	r3, #15
   14a30:	18fc      	adds	r4, r7, r3
   14a32:	6839      	ldr	r1, [r7, #0]
   14a34:	4b0a      	ldr	r3, [pc, #40]	; (14a60 <is_exist_file+0x4c>)
   14a36:	2200      	movs	r2, #0
   14a38:	0018      	movs	r0, r3
   14a3a:	4b0a      	ldr	r3, [pc, #40]	; (14a64 <is_exist_file+0x50>)
   14a3c:	4798      	blx	r3
   14a3e:	0003      	movs	r3, r0
   14a40:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   14a42:	4b07      	ldr	r3, [pc, #28]	; (14a60 <is_exist_file+0x4c>)
   14a44:	0018      	movs	r0, r3
   14a46:	4b08      	ldr	r3, [pc, #32]	; (14a68 <is_exist_file+0x54>)
   14a48:	4798      	blx	r3
    return (ret == FR_OK);
   14a4a:	230f      	movs	r3, #15
   14a4c:	18fb      	adds	r3, r7, r3
   14a4e:	781b      	ldrb	r3, [r3, #0]
   14a50:	425a      	negs	r2, r3
   14a52:	4153      	adcs	r3, r2
   14a54:	b2db      	uxtb	r3, r3
}
   14a56:	0018      	movs	r0, r3
   14a58:	46bd      	mov	sp, r7
   14a5a:	b005      	add	sp, #20
   14a5c:	bd90      	pop	{r4, r7, pc}
   14a5e:	46c0      	nop			; (mov r8, r8)
   14a60:	200006e4 	.word	0x200006e4
   14a64:	0002c291 	.word	0x0002c291
   14a68:	0002cc91 	.word	0x0002cc91

00014a6c <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   14a6c:	b580      	push	{r7, lr}
   14a6e:	b09e      	sub	sp, #120	; 0x78
   14a70:	af00      	add	r7, sp, #0
   14a72:	60f8      	str	r0, [r7, #12]
   14a74:	60b9      	str	r1, [r7, #8]
   14a76:	1dfb      	adds	r3, r7, #7
   14a78:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   14a7a:	2376      	movs	r3, #118	; 0x76
   14a7c:	18fb      	adds	r3, r7, r3
   14a7e:	2201      	movs	r2, #1
   14a80:	801a      	strh	r2, [r3, #0]
   14a82:	2374      	movs	r3, #116	; 0x74
   14a84:	18fb      	adds	r3, r7, r3
   14a86:	2200      	movs	r2, #0
   14a88:	801a      	strh	r2, [r3, #0]
   14a8a:	236e      	movs	r3, #110	; 0x6e
   14a8c:	18fb      	adds	r3, r7, r3
   14a8e:	2200      	movs	r2, #0
   14a90:	801a      	strh	r2, [r3, #0]
   14a92:	2372      	movs	r3, #114	; 0x72
   14a94:	18fb      	adds	r3, r7, r3
   14a96:	2200      	movs	r2, #0
   14a98:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   14a9a:	2324      	movs	r3, #36	; 0x24
   14a9c:	18fb      	adds	r3, r7, r3
   14a9e:	0018      	movs	r0, r3
   14aa0:	2341      	movs	r3, #65	; 0x41
   14aa2:	001a      	movs	r2, r3
   14aa4:	2100      	movs	r1, #0
   14aa6:	4b92      	ldr	r3, [pc, #584]	; (14cf0 <rename_to_unique+0x284>)
   14aa8:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   14aaa:	2318      	movs	r3, #24
   14aac:	18fb      	adds	r3, r7, r3
   14aae:	0018      	movs	r0, r3
   14ab0:	2309      	movs	r3, #9
   14ab2:	001a      	movs	r2, r3
   14ab4:	2100      	movs	r1, #0
   14ab6:	4b8e      	ldr	r3, [pc, #568]	; (14cf0 <rename_to_unique+0x284>)
   14ab8:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   14aba:	2314      	movs	r3, #20
   14abc:	18fb      	adds	r3, r7, r3
   14abe:	2200      	movs	r2, #0
   14ac0:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   14ac2:	2300      	movs	r3, #0
   14ac4:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   14ac6:	2371      	movs	r3, #113	; 0x71
   14ac8:	18fb      	adds	r3, r7, r3
   14aca:	2200      	movs	r2, #0
   14acc:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   14ace:	68bb      	ldr	r3, [r7, #8]
   14ad0:	2b00      	cmp	r3, #0
   14ad2:	d101      	bne.n	14ad8 <rename_to_unique+0x6c>
        return false;
   14ad4:	2300      	movs	r3, #0
   14ad6:	e106      	b.n	14ce6 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   14ad8:	68ba      	ldr	r2, [r7, #8]
   14ada:	68fb      	ldr	r3, [r7, #12]
   14adc:	0011      	movs	r1, r2
   14ade:	0018      	movs	r0, r3
   14ae0:	4b84      	ldr	r3, [pc, #528]	; (14cf4 <rename_to_unique+0x288>)
   14ae2:	4798      	blx	r3
   14ae4:	0003      	movs	r3, r0
   14ae6:	001a      	movs	r2, r3
   14ae8:	2301      	movs	r3, #1
   14aea:	4053      	eors	r3, r2
   14aec:	b2db      	uxtb	r3, r3
   14aee:	2b00      	cmp	r3, #0
   14af0:	d001      	beq.n	14af6 <rename_to_unique+0x8a>
        return true;
   14af2:	2301      	movs	r3, #1
   14af4:	e0f7      	b.n	14ce6 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   14af6:	68bb      	ldr	r3, [r7, #8]
   14af8:	0018      	movs	r0, r3
   14afa:	4b7f      	ldr	r3, [pc, #508]	; (14cf8 <rename_to_unique+0x28c>)
   14afc:	4798      	blx	r3
   14afe:	0003      	movs	r3, r0
   14b00:	2b40      	cmp	r3, #64	; 0x40
   14b02:	d901      	bls.n	14b08 <rename_to_unique+0x9c>
        return false;
   14b04:	2300      	movs	r3, #0
   14b06:	e0ee      	b.n	14ce6 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   14b08:	68bb      	ldr	r3, [r7, #8]
   14b0a:	212e      	movs	r1, #46	; 0x2e
   14b0c:	0018      	movs	r0, r3
   14b0e:	4b7b      	ldr	r3, [pc, #492]	; (14cfc <rename_to_unique+0x290>)
   14b10:	4798      	blx	r3
   14b12:	0003      	movs	r3, r0
   14b14:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   14b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14b18:	2b00      	cmp	r3, #0
   14b1a:	d052      	beq.n	14bc2 <rename_to_unique+0x156>
        ext_len = strlen(p);
   14b1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14b1e:	0018      	movs	r0, r3
   14b20:	4b75      	ldr	r3, [pc, #468]	; (14cf8 <rename_to_unique+0x28c>)
   14b22:	4798      	blx	r3
   14b24:	0002      	movs	r2, r0
   14b26:	236e      	movs	r3, #110	; 0x6e
   14b28:	18fb      	adds	r3, r7, r3
   14b2a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   14b2c:	236e      	movs	r3, #110	; 0x6e
   14b2e:	18fb      	adds	r3, r7, r3
   14b30:	881b      	ldrh	r3, [r3, #0]
   14b32:	2b07      	cmp	r3, #7
   14b34:	d837      	bhi.n	14ba6 <rename_to_unique+0x13a>
            valid_ext = true;
   14b36:	2371      	movs	r3, #113	; 0x71
   14b38:	18fb      	adds	r3, r7, r3
   14b3a:	2201      	movs	r2, #1
   14b3c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   14b3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14b40:	2318      	movs	r3, #24
   14b42:	18fb      	adds	r3, r7, r3
   14b44:	0011      	movs	r1, r2
   14b46:	0018      	movs	r0, r3
   14b48:	4b6d      	ldr	r3, [pc, #436]	; (14d00 <rename_to_unique+0x294>)
   14b4a:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   14b4c:	68bb      	ldr	r3, [r7, #8]
   14b4e:	0018      	movs	r0, r3
   14b50:	4b69      	ldr	r3, [pc, #420]	; (14cf8 <rename_to_unique+0x28c>)
   14b52:	4798      	blx	r3
   14b54:	0002      	movs	r2, r0
   14b56:	236e      	movs	r3, #110	; 0x6e
   14b58:	18fb      	adds	r3, r7, r3
   14b5a:	881b      	ldrh	r3, [r3, #0]
   14b5c:	1ad3      	subs	r3, r2, r3
   14b5e:	2b3c      	cmp	r3, #60	; 0x3c
   14b60:	d911      	bls.n	14b86 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   14b62:	2374      	movs	r3, #116	; 0x74
   14b64:	18fb      	adds	r3, r7, r3
   14b66:	226e      	movs	r2, #110	; 0x6e
   14b68:	18ba      	adds	r2, r7, r2
   14b6a:	8812      	ldrh	r2, [r2, #0]
   14b6c:	213c      	movs	r1, #60	; 0x3c
   14b6e:	1a8a      	subs	r2, r1, r2
   14b70:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   14b72:	2374      	movs	r3, #116	; 0x74
   14b74:	18fb      	adds	r3, r7, r3
   14b76:	881a      	ldrh	r2, [r3, #0]
   14b78:	68b9      	ldr	r1, [r7, #8]
   14b7a:	2324      	movs	r3, #36	; 0x24
   14b7c:	18fb      	adds	r3, r7, r3
   14b7e:	0018      	movs	r0, r3
   14b80:	4b60      	ldr	r3, [pc, #384]	; (14d04 <rename_to_unique+0x298>)
   14b82:	4798      	blx	r3
   14b84:	e02a      	b.n	14bdc <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   14b86:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14b88:	68bb      	ldr	r3, [r7, #8]
   14b8a:	1ad2      	subs	r2, r2, r3
   14b8c:	2374      	movs	r3, #116	; 0x74
   14b8e:	18fb      	adds	r3, r7, r3
   14b90:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   14b92:	2374      	movs	r3, #116	; 0x74
   14b94:	18fb      	adds	r3, r7, r3
   14b96:	881a      	ldrh	r2, [r3, #0]
   14b98:	68b9      	ldr	r1, [r7, #8]
   14b9a:	2324      	movs	r3, #36	; 0x24
   14b9c:	18fb      	adds	r3, r7, r3
   14b9e:	0018      	movs	r0, r3
   14ba0:	4b58      	ldr	r3, [pc, #352]	; (14d04 <rename_to_unique+0x298>)
   14ba2:	4798      	blx	r3
   14ba4:	e01a      	b.n	14bdc <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   14ba6:	2374      	movs	r3, #116	; 0x74
   14ba8:	18fb      	adds	r3, r7, r3
   14baa:	223c      	movs	r2, #60	; 0x3c
   14bac:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   14bae:	2374      	movs	r3, #116	; 0x74
   14bb0:	18fb      	adds	r3, r7, r3
   14bb2:	881a      	ldrh	r2, [r3, #0]
   14bb4:	68b9      	ldr	r1, [r7, #8]
   14bb6:	2324      	movs	r3, #36	; 0x24
   14bb8:	18fb      	adds	r3, r7, r3
   14bba:	0018      	movs	r0, r3
   14bbc:	4b51      	ldr	r3, [pc, #324]	; (14d04 <rename_to_unique+0x298>)
   14bbe:	4798      	blx	r3
   14bc0:	e00c      	b.n	14bdc <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   14bc2:	2374      	movs	r3, #116	; 0x74
   14bc4:	18fb      	adds	r3, r7, r3
   14bc6:	223c      	movs	r2, #60	; 0x3c
   14bc8:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   14bca:	2374      	movs	r3, #116	; 0x74
   14bcc:	18fb      	adds	r3, r7, r3
   14bce:	881a      	ldrh	r2, [r3, #0]
   14bd0:	68b9      	ldr	r1, [r7, #8]
   14bd2:	2324      	movs	r3, #36	; 0x24
   14bd4:	18fb      	adds	r3, r7, r3
   14bd6:	0018      	movs	r0, r3
   14bd8:	4b4a      	ldr	r3, [pc, #296]	; (14d04 <rename_to_unique+0x298>)
   14bda:	4798      	blx	r3
    }

    name[name_len++] = '-';
   14bdc:	2374      	movs	r3, #116	; 0x74
   14bde:	18fb      	adds	r3, r7, r3
   14be0:	881b      	ldrh	r3, [r3, #0]
   14be2:	2274      	movs	r2, #116	; 0x74
   14be4:	18ba      	adds	r2, r7, r2
   14be6:	1c59      	adds	r1, r3, #1
   14be8:	8011      	strh	r1, [r2, #0]
   14bea:	001a      	movs	r2, r3
   14bec:	2324      	movs	r3, #36	; 0x24
   14bee:	18fb      	adds	r3, r7, r3
   14bf0:	212d      	movs	r1, #45	; 0x2d
   14bf2:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   14bf4:	2376      	movs	r3, #118	; 0x76
   14bf6:	18fb      	adds	r3, r7, r3
   14bf8:	2200      	movs	r2, #0
   14bfa:	801a      	strh	r2, [r3, #0]
   14bfc:	2372      	movs	r3, #114	; 0x72
   14bfe:	18fb      	adds	r3, r7, r3
   14c00:	2201      	movs	r2, #1
   14c02:	801a      	strh	r2, [r3, #0]
   14c04:	e010      	b.n	14c28 <rename_to_unique+0x1bc>
        count *= 10;
   14c06:	2372      	movs	r3, #114	; 0x72
   14c08:	18fa      	adds	r2, r7, r3
   14c0a:	2372      	movs	r3, #114	; 0x72
   14c0c:	18fb      	adds	r3, r7, r3
   14c0e:	881b      	ldrh	r3, [r3, #0]
   14c10:	1c19      	adds	r1, r3, #0
   14c12:	0089      	lsls	r1, r1, #2
   14c14:	18cb      	adds	r3, r1, r3
   14c16:	18db      	adds	r3, r3, r3
   14c18:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   14c1a:	2376      	movs	r3, #118	; 0x76
   14c1c:	18fb      	adds	r3, r7, r3
   14c1e:	881a      	ldrh	r2, [r3, #0]
   14c20:	2376      	movs	r3, #118	; 0x76
   14c22:	18fb      	adds	r3, r7, r3
   14c24:	3201      	adds	r2, #1
   14c26:	801a      	strh	r2, [r3, #0]
   14c28:	2376      	movs	r3, #118	; 0x76
   14c2a:	18fb      	adds	r3, r7, r3
   14c2c:	881b      	ldrh	r3, [r3, #0]
   14c2e:	2b02      	cmp	r3, #2
   14c30:	d9e9      	bls.n	14c06 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   14c32:	2376      	movs	r3, #118	; 0x76
   14c34:	18fb      	adds	r3, r7, r3
   14c36:	2201      	movs	r2, #1
   14c38:	801a      	strh	r2, [r3, #0]
   14c3a:	e04b      	b.n	14cd4 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   14c3c:	2376      	movs	r3, #118	; 0x76
   14c3e:	18fb      	adds	r3, r7, r3
   14c40:	881a      	ldrh	r2, [r3, #0]
   14c42:	4931      	ldr	r1, [pc, #196]	; (14d08 <rename_to_unique+0x29c>)
   14c44:	2314      	movs	r3, #20
   14c46:	18fb      	adds	r3, r7, r3
   14c48:	0018      	movs	r0, r3
   14c4a:	4b30      	ldr	r3, [pc, #192]	; (14d0c <rename_to_unique+0x2a0>)
   14c4c:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   14c4e:	2374      	movs	r3, #116	; 0x74
   14c50:	18fb      	adds	r3, r7, r3
   14c52:	881b      	ldrh	r3, [r3, #0]
   14c54:	2224      	movs	r2, #36	; 0x24
   14c56:	18ba      	adds	r2, r7, r2
   14c58:	18d3      	adds	r3, r2, r3
   14c5a:	2214      	movs	r2, #20
   14c5c:	18b9      	adds	r1, r7, r2
   14c5e:	2203      	movs	r2, #3
   14c60:	0018      	movs	r0, r3
   14c62:	4b28      	ldr	r3, [pc, #160]	; (14d04 <rename_to_unique+0x298>)
   14c64:	4798      	blx	r3
        if (valid_ext) {
   14c66:	2371      	movs	r3, #113	; 0x71
   14c68:	18fb      	adds	r3, r7, r3
   14c6a:	781b      	ldrb	r3, [r3, #0]
   14c6c:	2b00      	cmp	r3, #0
   14c6e:	d00c      	beq.n	14c8a <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   14c70:	2374      	movs	r3, #116	; 0x74
   14c72:	18fb      	adds	r3, r7, r3
   14c74:	881b      	ldrh	r3, [r3, #0]
   14c76:	3303      	adds	r3, #3
   14c78:	2224      	movs	r2, #36	; 0x24
   14c7a:	18ba      	adds	r2, r7, r2
   14c7c:	18d3      	adds	r3, r2, r3
   14c7e:	2218      	movs	r2, #24
   14c80:	18ba      	adds	r2, r7, r2
   14c82:	0011      	movs	r1, r2
   14c84:	0018      	movs	r0, r3
   14c86:	4b1e      	ldr	r3, [pc, #120]	; (14d00 <rename_to_unique+0x294>)
   14c88:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   14c8a:	2324      	movs	r3, #36	; 0x24
   14c8c:	18fa      	adds	r2, r7, r3
   14c8e:	68fb      	ldr	r3, [r7, #12]
   14c90:	0011      	movs	r1, r2
   14c92:	0018      	movs	r0, r3
   14c94:	4b17      	ldr	r3, [pc, #92]	; (14cf4 <rename_to_unique+0x288>)
   14c96:	4798      	blx	r3
   14c98:	0003      	movs	r3, r0
   14c9a:	001a      	movs	r2, r3
   14c9c:	2301      	movs	r3, #1
   14c9e:	4053      	eors	r3, r2
   14ca0:	b2db      	uxtb	r3, r3
   14ca2:	2b00      	cmp	r3, #0
   14ca4:	d00f      	beq.n	14cc6 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   14ca6:	1dfb      	adds	r3, r7, #7
   14ca8:	781a      	ldrb	r2, [r3, #0]
   14caa:	68bb      	ldr	r3, [r7, #8]
   14cac:	2100      	movs	r1, #0
   14cae:	0018      	movs	r0, r3
   14cb0:	4b0f      	ldr	r3, [pc, #60]	; (14cf0 <rename_to_unique+0x284>)
   14cb2:	4798      	blx	r3
            strcpy(file_path_name, name);
   14cb4:	2324      	movs	r3, #36	; 0x24
   14cb6:	18fa      	adds	r2, r7, r3
   14cb8:	68bb      	ldr	r3, [r7, #8]
   14cba:	0011      	movs	r1, r2
   14cbc:	0018      	movs	r0, r3
   14cbe:	4b10      	ldr	r3, [pc, #64]	; (14d00 <rename_to_unique+0x294>)
   14cc0:	4798      	blx	r3
            return true;
   14cc2:	2301      	movs	r3, #1
   14cc4:	e00f      	b.n	14ce6 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   14cc6:	2376      	movs	r3, #118	; 0x76
   14cc8:	18fb      	adds	r3, r7, r3
   14cca:	881a      	ldrh	r2, [r3, #0]
   14ccc:	2376      	movs	r3, #118	; 0x76
   14cce:	18fb      	adds	r3, r7, r3
   14cd0:	3201      	adds	r2, #1
   14cd2:	801a      	strh	r2, [r3, #0]
   14cd4:	2376      	movs	r3, #118	; 0x76
   14cd6:	18fa      	adds	r2, r7, r3
   14cd8:	2372      	movs	r3, #114	; 0x72
   14cda:	18fb      	adds	r3, r7, r3
   14cdc:	8812      	ldrh	r2, [r2, #0]
   14cde:	881b      	ldrh	r3, [r3, #0]
   14ce0:	429a      	cmp	r2, r3
   14ce2:	d3ab      	bcc.n	14c3c <rename_to_unique+0x1d0>
        }
    }
    return false;
   14ce4:	2300      	movs	r3, #0
}
   14ce6:	0018      	movs	r0, r3
   14ce8:	46bd      	mov	sp, r7
   14cea:	b01e      	add	sp, #120	; 0x78
   14cec:	bd80      	pop	{r7, pc}
   14cee:	46c0      	nop			; (mov r8, r8)
   14cf0:	0003319f 	.word	0x0003319f
   14cf4:	00014a15 	.word	0x00014a15
   14cf8:	0003353b 	.word	0x0003353b
   14cfc:	00033595 	.word	0x00033595
   14d00:	000334f1 	.word	0x000334f1
   14d04:	0003356b 	.word	0x0003356b
   14d08:	0003498c 	.word	0x0003498c
   14d0c:	0003345d 	.word	0x0003345d

00014d10 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   14d10:	b590      	push	{r4, r7, lr}
   14d12:	b083      	sub	sp, #12
   14d14:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   14d16:	2001      	movs	r0, #1
   14d18:	4b22      	ldr	r3, [pc, #136]	; (14da4 <start_download+0x94>)
   14d1a:	4798      	blx	r3
   14d1c:	0003      	movs	r3, r0
   14d1e:	001a      	movs	r2, r3
   14d20:	2301      	movs	r3, #1
   14d22:	4053      	eors	r3, r2
   14d24:	b2db      	uxtb	r3, r3
   14d26:	2b00      	cmp	r3, #0
   14d28:	d005      	beq.n	14d36 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   14d2a:	4b1f      	ldr	r3, [pc, #124]	; (14da8 <start_download+0x98>)
   14d2c:	0019      	movs	r1, r3
   14d2e:	2001      	movs	r0, #1
   14d30:	4b1e      	ldr	r3, [pc, #120]	; (14dac <start_download+0x9c>)
   14d32:	4798      	blx	r3
        return;
   14d34:	e032      	b.n	14d9c <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   14d36:	2002      	movs	r0, #2
   14d38:	4b1a      	ldr	r3, [pc, #104]	; (14da4 <start_download+0x94>)
   14d3a:	4798      	blx	r3
   14d3c:	0003      	movs	r3, r0
   14d3e:	001a      	movs	r2, r3
   14d40:	2301      	movs	r3, #1
   14d42:	4053      	eors	r3, r2
   14d44:	b2db      	uxtb	r3, r3
   14d46:	2b00      	cmp	r3, #0
   14d48:	d005      	beq.n	14d56 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   14d4a:	4b19      	ldr	r3, [pc, #100]	; (14db0 <start_download+0xa0>)
   14d4c:	0019      	movs	r1, r3
   14d4e:	2001      	movs	r0, #1
   14d50:	4b16      	ldr	r3, [pc, #88]	; (14dac <start_download+0x9c>)
   14d52:	4798      	blx	r3
        return;
   14d54:	e022      	b.n	14d9c <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   14d56:	2004      	movs	r0, #4
   14d58:	4b12      	ldr	r3, [pc, #72]	; (14da4 <start_download+0x94>)
   14d5a:	4798      	blx	r3
   14d5c:	1e03      	subs	r3, r0, #0
   14d5e:	d005      	beq.n	14d6c <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   14d60:	4b14      	ldr	r3, [pc, #80]	; (14db4 <start_download+0xa4>)
   14d62:	0019      	movs	r1, r3
   14d64:	2001      	movs	r0, #1
   14d66:	4b11      	ldr	r3, [pc, #68]	; (14dac <start_download+0x9c>)
   14d68:	4798      	blx	r3
        return;
   14d6a:	e017      	b.n	14d9c <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   14d6c:	2008      	movs	r0, #8
   14d6e:	4b0d      	ldr	r3, [pc, #52]	; (14da4 <start_download+0x94>)
   14d70:	4798      	blx	r3
   14d72:	1e03      	subs	r3, r0, #0
   14d74:	d005      	beq.n	14d82 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   14d76:	4b10      	ldr	r3, [pc, #64]	; (14db8 <start_download+0xa8>)
   14d78:	0019      	movs	r1, r3
   14d7a:	2001      	movs	r0, #1
   14d7c:	4b0b      	ldr	r3, [pc, #44]	; (14dac <start_download+0x9c>)
   14d7e:	4798      	blx	r3
        return;
   14d80:	e00c      	b.n	14d9c <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   14d82:	4b0e      	ldr	r3, [pc, #56]	; (14dbc <start_download+0xac>)
   14d84:	0019      	movs	r1, r3
   14d86:	2001      	movs	r0, #1
   14d88:	4b08      	ldr	r3, [pc, #32]	; (14dac <start_download+0x9c>)
   14d8a:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   14d8c:	490c      	ldr	r1, [pc, #48]	; (14dc0 <start_download+0xb0>)
   14d8e:	480d      	ldr	r0, [pc, #52]	; (14dc4 <start_download+0xb4>)
   14d90:	2300      	movs	r3, #0
   14d92:	9300      	str	r3, [sp, #0]
   14d94:	2300      	movs	r3, #0
   14d96:	2201      	movs	r2, #1
   14d98:	4c0b      	ldr	r4, [pc, #44]	; (14dc8 <start_download+0xb8>)
   14d9a:	47a0      	blx	r4
}
   14d9c:	46bd      	mov	sp, r7
   14d9e:	b001      	add	sp, #4
   14da0:	bd90      	pop	{r4, r7, pc}
   14da2:	46c0      	nop			; (mov r8, r8)
   14da4:	000149e9 	.word	0x000149e9
   14da8:	00034994 	.word	0x00034994
   14dac:	0001c781 	.word	0x0001c781
   14db0:	000349c0 	.word	0x000349c0
   14db4:	000349ec 	.word	0x000349ec
   14db8:	00034a18 	.word	0x00034a18
   14dbc:	00034a44 	.word	0x00034a44
   14dc0:	00034a70 	.word	0x00034a70
   14dc4:	200046c8 	.word	0x200046c8
   14dc8:	0002f8e5 	.word	0x0002f8e5

00014dcc <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   14dcc:	b5b0      	push	{r4, r5, r7, lr}
   14dce:	b086      	sub	sp, #24
   14dd0:	af00      	add	r7, sp, #0
   14dd2:	6078      	str	r0, [r7, #4]
   14dd4:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   14dd6:	687b      	ldr	r3, [r7, #4]
   14dd8:	2b00      	cmp	r3, #0
   14dda:	d002      	beq.n	14de2 <store_file_packet+0x16>
   14ddc:	683b      	ldr	r3, [r7, #0]
   14dde:	2b00      	cmp	r3, #0
   14de0:	d105      	bne.n	14dee <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   14de2:	4b58      	ldr	r3, [pc, #352]	; (14f44 <store_file_packet+0x178>)
   14de4:	0019      	movs	r1, r3
   14de6:	2001      	movs	r0, #1
   14de8:	4b57      	ldr	r3, [pc, #348]	; (14f48 <store_file_packet+0x17c>)
   14dea:	4798      	blx	r3
        return;
   14dec:	e0a6      	b.n	14f3c <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   14dee:	2008      	movs	r0, #8
   14df0:	4b56      	ldr	r3, [pc, #344]	; (14f4c <store_file_packet+0x180>)
   14df2:	4798      	blx	r3
   14df4:	0003      	movs	r3, r0
   14df6:	001a      	movs	r2, r3
   14df8:	2301      	movs	r3, #1
   14dfa:	4053      	eors	r3, r2
   14dfc:	b2db      	uxtb	r3, r3
   14dfe:	2b00      	cmp	r3, #0
   14e00:	d055      	beq.n	14eae <store_file_packet+0xe2>
        char *cp = NULL;
   14e02:	2300      	movs	r3, #0
   14e04:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   14e06:	4b52      	ldr	r3, [pc, #328]	; (14f50 <store_file_packet+0x184>)
   14e08:	2230      	movs	r2, #48	; 0x30
   14e0a:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   14e0c:	4b50      	ldr	r3, [pc, #320]	; (14f50 <store_file_packet+0x184>)
   14e0e:	223a      	movs	r2, #58	; 0x3a
   14e10:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   14e12:	4b50      	ldr	r3, [pc, #320]	; (14f54 <store_file_packet+0x188>)
   14e14:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   14e16:	e002      	b.n	14e1e <store_file_packet+0x52>
            cp--;
   14e18:	697b      	ldr	r3, [r7, #20]
   14e1a:	3b01      	subs	r3, #1
   14e1c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   14e1e:	697b      	ldr	r3, [r7, #20]
   14e20:	781b      	ldrb	r3, [r3, #0]
   14e22:	2b2f      	cmp	r3, #47	; 0x2f
   14e24:	d1f8      	bne.n	14e18 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   14e26:	697b      	ldr	r3, [r7, #20]
   14e28:	0018      	movs	r0, r3
   14e2a:	4b4b      	ldr	r3, [pc, #300]	; (14f58 <store_file_packet+0x18c>)
   14e2c:	4798      	blx	r3
   14e2e:	0003      	movs	r3, r0
   14e30:	2b01      	cmp	r3, #1
   14e32:	d924      	bls.n	14e7e <store_file_packet+0xb2>
            cp++;
   14e34:	697b      	ldr	r3, [r7, #20]
   14e36:	3301      	adds	r3, #1
   14e38:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   14e3a:	697a      	ldr	r2, [r7, #20]
   14e3c:	4b47      	ldr	r3, [pc, #284]	; (14f5c <store_file_packet+0x190>)
   14e3e:	0011      	movs	r1, r2
   14e40:	0018      	movs	r0, r3
   14e42:	4b47      	ldr	r3, [pc, #284]	; (14f60 <store_file_packet+0x194>)
   14e44:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   14e46:	4942      	ldr	r1, [pc, #264]	; (14f50 <store_file_packet+0x184>)
   14e48:	4b46      	ldr	r3, [pc, #280]	; (14f64 <store_file_packet+0x198>)
   14e4a:	2240      	movs	r2, #64	; 0x40
   14e4c:	0018      	movs	r0, r3
   14e4e:	4b46      	ldr	r3, [pc, #280]	; (14f68 <store_file_packet+0x19c>)
   14e50:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   14e52:	4a3f      	ldr	r2, [pc, #252]	; (14f50 <store_file_packet+0x184>)
   14e54:	4b45      	ldr	r3, [pc, #276]	; (14f6c <store_file_packet+0x1a0>)
   14e56:	0019      	movs	r1, r3
   14e58:	2001      	movs	r0, #1
   14e5a:	4b3b      	ldr	r3, [pc, #236]	; (14f48 <store_file_packet+0x17c>)
   14e5c:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   14e5e:	2313      	movs	r3, #19
   14e60:	18fc      	adds	r4, r7, r3
   14e62:	493b      	ldr	r1, [pc, #236]	; (14f50 <store_file_packet+0x184>)
   14e64:	4b3f      	ldr	r3, [pc, #252]	; (14f64 <store_file_packet+0x198>)
   14e66:	220a      	movs	r2, #10
   14e68:	0018      	movs	r0, r3
   14e6a:	4b41      	ldr	r3, [pc, #260]	; (14f70 <store_file_packet+0x1a4>)
   14e6c:	4798      	blx	r3
   14e6e:	0003      	movs	r3, r0
   14e70:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   14e72:	2313      	movs	r3, #19
   14e74:	18fb      	adds	r3, r7, r3
   14e76:	781b      	ldrb	r3, [r3, #0]
   14e78:	2b00      	cmp	r3, #0
   14e7a:	d012      	beq.n	14ea2 <store_file_packet+0xd6>
   14e7c:	e008      	b.n	14e90 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   14e7e:	4b3d      	ldr	r3, [pc, #244]	; (14f74 <store_file_packet+0x1a8>)
   14e80:	0019      	movs	r1, r3
   14e82:	2001      	movs	r0, #1
   14e84:	4b30      	ldr	r3, [pc, #192]	; (14f48 <store_file_packet+0x17c>)
   14e86:	4798      	blx	r3
            add_state(CANCELED);
   14e88:	2020      	movs	r0, #32
   14e8a:	4b3b      	ldr	r3, [pc, #236]	; (14f78 <store_file_packet+0x1ac>)
   14e8c:	4798      	blx	r3
            return;
   14e8e:	e055      	b.n	14f3c <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   14e90:	2313      	movs	r3, #19
   14e92:	18fb      	adds	r3, r7, r3
   14e94:	781a      	ldrb	r2, [r3, #0]
   14e96:	4b39      	ldr	r3, [pc, #228]	; (14f7c <store_file_packet+0x1b0>)
   14e98:	0019      	movs	r1, r3
   14e9a:	2001      	movs	r0, #1
   14e9c:	4b2a      	ldr	r3, [pc, #168]	; (14f48 <store_file_packet+0x17c>)
   14e9e:	4798      	blx	r3
            return;
   14ea0:	e04c      	b.n	14f3c <store_file_packet+0x170>
        }

        received_file_size = 0;
   14ea2:	4b37      	ldr	r3, [pc, #220]	; (14f80 <store_file_packet+0x1b4>)
   14ea4:	2200      	movs	r2, #0
   14ea6:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   14ea8:	2008      	movs	r0, #8
   14eaa:	4b33      	ldr	r3, [pc, #204]	; (14f78 <store_file_packet+0x1ac>)
   14eac:	4798      	blx	r3
    }

    if (data != NULL) {
   14eae:	687b      	ldr	r3, [r7, #4]
   14eb0:	2b00      	cmp	r3, #0
   14eb2:	d043      	beq.n	14f3c <store_file_packet+0x170>
        UINT wsize = 0;
   14eb4:	2300      	movs	r3, #0
   14eb6:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   14eb8:	2313      	movs	r3, #19
   14eba:	18fc      	adds	r4, r7, r3
   14ebc:	230c      	movs	r3, #12
   14ebe:	18fb      	adds	r3, r7, r3
   14ec0:	683a      	ldr	r2, [r7, #0]
   14ec2:	6879      	ldr	r1, [r7, #4]
   14ec4:	4827      	ldr	r0, [pc, #156]	; (14f64 <store_file_packet+0x198>)
   14ec6:	4d2f      	ldr	r5, [pc, #188]	; (14f84 <store_file_packet+0x1b8>)
   14ec8:	47a8      	blx	r5
   14eca:	0003      	movs	r3, r0
   14ecc:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   14ece:	2313      	movs	r3, #19
   14ed0:	18fb      	adds	r3, r7, r3
   14ed2:	781b      	ldrb	r3, [r3, #0]
   14ed4:	2b00      	cmp	r3, #0
   14ed6:	d00c      	beq.n	14ef2 <store_file_packet+0x126>
            f_close(&file_object);
   14ed8:	4b22      	ldr	r3, [pc, #136]	; (14f64 <store_file_packet+0x198>)
   14eda:	0018      	movs	r0, r3
   14edc:	4b2a      	ldr	r3, [pc, #168]	; (14f88 <store_file_packet+0x1bc>)
   14ede:	4798      	blx	r3
            add_state(CANCELED);
   14ee0:	2020      	movs	r0, #32
   14ee2:	4b25      	ldr	r3, [pc, #148]	; (14f78 <store_file_packet+0x1ac>)
   14ee4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   14ee6:	4b29      	ldr	r3, [pc, #164]	; (14f8c <store_file_packet+0x1c0>)
   14ee8:	0019      	movs	r1, r3
   14eea:	2001      	movs	r0, #1
   14eec:	4b16      	ldr	r3, [pc, #88]	; (14f48 <store_file_packet+0x17c>)
   14eee:	4798      	blx	r3
            return;
   14ef0:	e024      	b.n	14f3c <store_file_packet+0x170>
        }

        received_file_size += wsize;
   14ef2:	4b23      	ldr	r3, [pc, #140]	; (14f80 <store_file_packet+0x1b4>)
   14ef4:	681a      	ldr	r2, [r3, #0]
   14ef6:	68fb      	ldr	r3, [r7, #12]
   14ef8:	18d2      	adds	r2, r2, r3
   14efa:	4b21      	ldr	r3, [pc, #132]	; (14f80 <store_file_packet+0x1b4>)
   14efc:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   14efe:	4b20      	ldr	r3, [pc, #128]	; (14f80 <store_file_packet+0x1b4>)
   14f00:	681a      	ldr	r2, [r3, #0]
   14f02:	4b23      	ldr	r3, [pc, #140]	; (14f90 <store_file_packet+0x1c4>)
   14f04:	681b      	ldr	r3, [r3, #0]
   14f06:	4923      	ldr	r1, [pc, #140]	; (14f94 <store_file_packet+0x1c8>)
   14f08:	2001      	movs	r0, #1
   14f0a:	4c0f      	ldr	r4, [pc, #60]	; (14f48 <store_file_packet+0x17c>)
   14f0c:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   14f0e:	4b1c      	ldr	r3, [pc, #112]	; (14f80 <store_file_packet+0x1b4>)
   14f10:	681a      	ldr	r2, [r3, #0]
   14f12:	4b1f      	ldr	r3, [pc, #124]	; (14f90 <store_file_packet+0x1c4>)
   14f14:	681b      	ldr	r3, [r3, #0]
   14f16:	429a      	cmp	r2, r3
   14f18:	d310      	bcc.n	14f3c <store_file_packet+0x170>
            f_close(&file_object);
   14f1a:	4b12      	ldr	r3, [pc, #72]	; (14f64 <store_file_packet+0x198>)
   14f1c:	0018      	movs	r0, r3
   14f1e:	4b1a      	ldr	r3, [pc, #104]	; (14f88 <store_file_packet+0x1bc>)
   14f20:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   14f22:	4b1d      	ldr	r3, [pc, #116]	; (14f98 <store_file_packet+0x1cc>)
   14f24:	0019      	movs	r1, r3
   14f26:	2001      	movs	r0, #1
   14f28:	4b07      	ldr	r3, [pc, #28]	; (14f48 <store_file_packet+0x17c>)
   14f2a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   14f2c:	2100      	movs	r1, #0
   14f2e:	2017      	movs	r0, #23
   14f30:	4b1a      	ldr	r3, [pc, #104]	; (14f9c <store_file_packet+0x1d0>)
   14f32:	4798      	blx	r3
            add_state(COMPLETED);
   14f34:	2010      	movs	r0, #16
   14f36:	4b10      	ldr	r3, [pc, #64]	; (14f78 <store_file_packet+0x1ac>)
   14f38:	4798      	blx	r3
            return;
   14f3a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   14f3c:	46bd      	mov	sp, r7
   14f3e:	b006      	add	sp, #24
   14f40:	bdb0      	pop	{r4, r5, r7, pc}
   14f42:	46c0      	nop			; (mov r8, r8)
   14f44:	00034aa0 	.word	0x00034aa0
   14f48:	0001c781 	.word	0x0001c781
   14f4c:	000149e9 	.word	0x000149e9
   14f50:	200000b4 	.word	0x200000b4
   14f54:	00034a9c 	.word	0x00034a9c
   14f58:	0003353b 	.word	0x0003353b
   14f5c:	200000b6 	.word	0x200000b6
   14f60:	000334f1 	.word	0x000334f1
   14f64:	200006e4 	.word	0x200006e4
   14f68:	00014a6d 	.word	0x00014a6d
   14f6c:	00034b04 	.word	0x00034b04
   14f70:	0002c291 	.word	0x0002c291
   14f74:	00034ac4 	.word	0x00034ac4
   14f78:	000149c1 	.word	0x000149c1
   14f7c:	00034b2c 	.word	0x00034b2c
   14f80:	2000070c 	.word	0x2000070c
   14f84:	0002c7c1 	.word	0x0002c7c1
   14f88:	0002cc91 	.word	0x0002cc91
   14f8c:	00034b60 	.word	0x00034b60
   14f90:	20000708 	.word	0x20000708
   14f94:	00034b9c 	.word	0x00034b9c
   14f98:	00034bd0 	.word	0x00034bd0
   14f9c:	00014925 	.word	0x00014925

00014fa0 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   14fa0:	b590      	push	{r4, r7, lr}
   14fa2:	b085      	sub	sp, #20
   14fa4:	af00      	add	r7, sp, #0
   14fa6:	60f8      	str	r0, [r7, #12]
   14fa8:	60b9      	str	r1, [r7, #8]
   14faa:	607a      	str	r2, [r7, #4]
    switch (type) {
   14fac:	68bb      	ldr	r3, [r7, #8]
   14fae:	2b04      	cmp	r3, #4
   14fb0:	d900      	bls.n	14fb4 <http_client_callback+0x14>
   14fb2:	e077      	b.n	150a4 <http_client_callback+0x104>
   14fb4:	68bb      	ldr	r3, [r7, #8]
   14fb6:	009a      	lsls	r2, r3, #2
   14fb8:	4b3c      	ldr	r3, [pc, #240]	; (150ac <http_client_callback+0x10c>)
   14fba:	18d3      	adds	r3, r2, r3
   14fbc:	681b      	ldr	r3, [r3, #0]
   14fbe:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   14fc0:	4b3b      	ldr	r3, [pc, #236]	; (150b0 <http_client_callback+0x110>)
   14fc2:	0019      	movs	r1, r3
   14fc4:	2001      	movs	r0, #1
   14fc6:	4b3b      	ldr	r3, [pc, #236]	; (150b4 <http_client_callback+0x114>)
   14fc8:	4798      	blx	r3
            break;
   14fca:	e06b      	b.n	150a4 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   14fcc:	4b3a      	ldr	r3, [pc, #232]	; (150b8 <http_client_callback+0x118>)
   14fce:	0019      	movs	r1, r3
   14fd0:	2001      	movs	r0, #1
   14fd2:	4b38      	ldr	r3, [pc, #224]	; (150b4 <http_client_callback+0x114>)
   14fd4:	4798      	blx	r3
            add_state(GET_REQUESTED);
   14fd6:	2004      	movs	r0, #4
   14fd8:	4b38      	ldr	r3, [pc, #224]	; (150bc <http_client_callback+0x11c>)
   14fda:	4798      	blx	r3
            break;
   14fdc:	e062      	b.n	150a4 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   14fde:	687b      	ldr	r3, [r7, #4]
   14fe0:	881b      	ldrh	r3, [r3, #0]
   14fe2:	001a      	movs	r2, r3
   14fe4:	687b      	ldr	r3, [r7, #4]
   14fe6:	685b      	ldr	r3, [r3, #4]
   14fe8:	4935      	ldr	r1, [pc, #212]	; (150c0 <http_client_callback+0x120>)
   14fea:	2001      	movs	r0, #1
   14fec:	4c31      	ldr	r4, [pc, #196]	; (150b4 <http_client_callback+0x114>)
   14fee:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   14ff0:	687b      	ldr	r3, [r7, #4]
   14ff2:	881b      	ldrh	r3, [r3, #0]
   14ff4:	2bc8      	cmp	r3, #200	; 0xc8
   14ff6:	d10d      	bne.n	15014 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   14ff8:	687b      	ldr	r3, [r7, #4]
   14ffa:	685a      	ldr	r2, [r3, #4]
   14ffc:	4b31      	ldr	r3, [pc, #196]	; (150c4 <http_client_callback+0x124>)
   14ffe:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   15000:	4b31      	ldr	r3, [pc, #196]	; (150c8 <http_client_callback+0x128>)
   15002:	2200      	movs	r2, #0
   15004:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   15006:	687b      	ldr	r3, [r7, #4]
   15008:	685a      	ldr	r2, [r3, #4]
   1500a:	2380      	movs	r3, #128	; 0x80
   1500c:	009b      	lsls	r3, r3, #2
   1500e:	429a      	cmp	r2, r3
   15010:	d843      	bhi.n	1509a <http_client_callback+0xfa>
   15012:	e003      	b.n	1501c <http_client_callback+0x7c>
                add_state(CANCELED);
   15014:	2020      	movs	r0, #32
   15016:	4b29      	ldr	r3, [pc, #164]	; (150bc <http_client_callback+0x11c>)
   15018:	4798      	blx	r3
                return;
   1501a:	e043      	b.n	150a4 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   1501c:	687b      	ldr	r3, [r7, #4]
   1501e:	689a      	ldr	r2, [r3, #8]
   15020:	687b      	ldr	r3, [r7, #4]
   15022:	685b      	ldr	r3, [r3, #4]
   15024:	0019      	movs	r1, r3
   15026:	0010      	movs	r0, r2
   15028:	4b28      	ldr	r3, [pc, #160]	; (150cc <http_client_callback+0x12c>)
   1502a:	4798      	blx	r3
                add_state(COMPLETED);
   1502c:	2010      	movs	r0, #16
   1502e:	4b23      	ldr	r3, [pc, #140]	; (150bc <http_client_callback+0x11c>)
   15030:	4798      	blx	r3
            }
            break;
   15032:	e032      	b.n	1509a <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   15034:	687b      	ldr	r3, [r7, #4]
   15036:	685a      	ldr	r2, [r3, #4]
   15038:	687b      	ldr	r3, [r7, #4]
   1503a:	681b      	ldr	r3, [r3, #0]
   1503c:	0019      	movs	r1, r3
   1503e:	0010      	movs	r0, r2
   15040:	4b22      	ldr	r3, [pc, #136]	; (150cc <http_client_callback+0x12c>)
   15042:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   15044:	687b      	ldr	r3, [r7, #4]
   15046:	7a1b      	ldrb	r3, [r3, #8]
   15048:	2b00      	cmp	r3, #0
   1504a:	d028      	beq.n	1509e <http_client_callback+0xfe>
                add_state(COMPLETED);
   1504c:	2010      	movs	r0, #16
   1504e:	4b1b      	ldr	r3, [pc, #108]	; (150bc <http_client_callback+0x11c>)
   15050:	4798      	blx	r3
            }

            break;
   15052:	e024      	b.n	1509e <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   15054:	687b      	ldr	r3, [r7, #4]
   15056:	681a      	ldr	r2, [r3, #0]
   15058:	4b1d      	ldr	r3, [pc, #116]	; (150d0 <http_client_callback+0x130>)
   1505a:	0019      	movs	r1, r3
   1505c:	2001      	movs	r0, #1
   1505e:	4b15      	ldr	r3, [pc, #84]	; (150b4 <http_client_callback+0x114>)
   15060:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   15062:	687b      	ldr	r3, [r7, #4]
   15064:	681b      	ldr	r3, [r3, #0]
   15066:	330b      	adds	r3, #11
   15068:	d11b      	bne.n	150a2 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1506a:	2008      	movs	r0, #8
   1506c:	4b19      	ldr	r3, [pc, #100]	; (150d4 <http_client_callback+0x134>)
   1506e:	4798      	blx	r3
   15070:	1e03      	subs	r3, r0, #0
   15072:	d006      	beq.n	15082 <http_client_callback+0xe2>
                    f_close(&file_object);
   15074:	4b18      	ldr	r3, [pc, #96]	; (150d8 <http_client_callback+0x138>)
   15076:	0018      	movs	r0, r3
   15078:	4b18      	ldr	r3, [pc, #96]	; (150dc <http_client_callback+0x13c>)
   1507a:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1507c:	2008      	movs	r0, #8
   1507e:	4b18      	ldr	r3, [pc, #96]	; (150e0 <http_client_callback+0x140>)
   15080:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   15082:	2004      	movs	r0, #4
   15084:	4b13      	ldr	r3, [pc, #76]	; (150d4 <http_client_callback+0x134>)
   15086:	4798      	blx	r3
   15088:	1e03      	subs	r3, r0, #0
   1508a:	d002      	beq.n	15092 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   1508c:	2004      	movs	r0, #4
   1508e:	4b14      	ldr	r3, [pc, #80]	; (150e0 <http_client_callback+0x140>)
   15090:	4798      	blx	r3
                }

                start_download();
   15092:	4b14      	ldr	r3, [pc, #80]	; (150e4 <http_client_callback+0x144>)
   15094:	4798      	blx	r3
            }

            break;
   15096:	46c0      	nop			; (mov r8, r8)
   15098:	e003      	b.n	150a2 <http_client_callback+0x102>
            break;
   1509a:	46c0      	nop			; (mov r8, r8)
   1509c:	e002      	b.n	150a4 <http_client_callback+0x104>
            break;
   1509e:	46c0      	nop			; (mov r8, r8)
   150a0:	e000      	b.n	150a4 <http_client_callback+0x104>
            break;
   150a2:	46c0      	nop			; (mov r8, r8)
    }
}
   150a4:	46bd      	mov	sp, r7
   150a6:	b005      	add	sp, #20
   150a8:	bd90      	pop	{r4, r7, pc}
   150aa:	46c0      	nop			; (mov r8, r8)
   150ac:	00035218 	.word	0x00035218
   150b0:	00034c04 	.word	0x00034c04
   150b4:	0001c781 	.word	0x0001c781
   150b8:	00034c3c 	.word	0x00034c3c
   150bc:	000149c1 	.word	0x000149c1
   150c0:	00034c68 	.word	0x00034c68
   150c4:	20000708 	.word	0x20000708
   150c8:	2000070c 	.word	0x2000070c
   150cc:	00014dcd 	.word	0x00014dcd
   150d0:	00034ca4 	.word	0x00034ca4
   150d4:	000149e9 	.word	0x000149e9
   150d8:	200006e4 	.word	0x200006e4
   150dc:	0002cc91 	.word	0x0002cc91
   150e0:	0001498d 	.word	0x0001498d
   150e4:	00014d11 	.word	0x00014d11

000150e8 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   150e8:	b580      	push	{r7, lr}
   150ea:	b082      	sub	sp, #8
   150ec:	af00      	add	r7, sp, #0
   150ee:	603a      	str	r2, [r7, #0]
   150f0:	1dfb      	adds	r3, r7, #7
   150f2:	1c02      	adds	r2, r0, #0
   150f4:	701a      	strb	r2, [r3, #0]
   150f6:	1dbb      	adds	r3, r7, #6
   150f8:	1c0a      	adds	r2, r1, #0
   150fa:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   150fc:	683a      	ldr	r2, [r7, #0]
   150fe:	1dbb      	adds	r3, r7, #6
   15100:	7819      	ldrb	r1, [r3, #0]
   15102:	1dfb      	adds	r3, r7, #7
   15104:	781b      	ldrb	r3, [r3, #0]
   15106:	b25b      	sxtb	r3, r3
   15108:	0018      	movs	r0, r3
   1510a:	4b03      	ldr	r3, [pc, #12]	; (15118 <socket_cb+0x30>)
   1510c:	4798      	blx	r3
}
   1510e:	46c0      	nop			; (mov r8, r8)
   15110:	46bd      	mov	sp, r7
   15112:	b002      	add	sp, #8
   15114:	bd80      	pop	{r7, pc}
   15116:	46c0      	nop			; (mov r8, r8)
   15118:	0002f5f5 	.word	0x0002f5f5

0001511c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   1511c:	b5b0      	push	{r4, r5, r7, lr}
   1511e:	b086      	sub	sp, #24
   15120:	af04      	add	r7, sp, #16
   15122:	6078      	str	r0, [r7, #4]
   15124:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   15126:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   15128:	22ff      	movs	r2, #255	; 0xff
   1512a:	4013      	ands	r3, r2
   1512c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1512e:	683b      	ldr	r3, [r7, #0]
   15130:	0a1b      	lsrs	r3, r3, #8
   15132:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   15134:	23ff      	movs	r3, #255	; 0xff
   15136:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   15138:	683a      	ldr	r2, [r7, #0]
   1513a:	0c12      	lsrs	r2, r2, #16
   1513c:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   1513e:	22ff      	movs	r2, #255	; 0xff
   15140:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   15142:	6839      	ldr	r1, [r7, #0]
   15144:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   15146:	000d      	movs	r5, r1
   15148:	6878      	ldr	r0, [r7, #4]
   1514a:	4909      	ldr	r1, [pc, #36]	; (15170 <resolve_cb+0x54>)
   1514c:	9502      	str	r5, [sp, #8]
   1514e:	9201      	str	r2, [sp, #4]
   15150:	9300      	str	r3, [sp, #0]
   15152:	0023      	movs	r3, r4
   15154:	0002      	movs	r2, r0
   15156:	2001      	movs	r0, #1
   15158:	4c06      	ldr	r4, [pc, #24]	; (15174 <resolve_cb+0x58>)
   1515a:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   1515c:	683a      	ldr	r2, [r7, #0]
   1515e:	687b      	ldr	r3, [r7, #4]
   15160:	0011      	movs	r1, r2
   15162:	0018      	movs	r0, r3
   15164:	4b04      	ldr	r3, [pc, #16]	; (15178 <resolve_cb+0x5c>)
   15166:	4798      	blx	r3
}
   15168:	46c0      	nop			; (mov r8, r8)
   1516a:	46bd      	mov	sp, r7
   1516c:	b002      	add	sp, #8
   1516e:	bdb0      	pop	{r4, r5, r7, pc}
   15170:	00034cd4 	.word	0x00034cd4
   15174:	0001c781 	.word	0x0001c781
   15178:	0002f759 	.word	0x0002f759

0001517c <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   1517c:	b590      	push	{r4, r7, lr}
   1517e:	b087      	sub	sp, #28
   15180:	af02      	add	r7, sp, #8
   15182:	0002      	movs	r2, r0
   15184:	6039      	str	r1, [r7, #0]
   15186:	1dfb      	adds	r3, r7, #7
   15188:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1518a:	1dfb      	adds	r3, r7, #7
   1518c:	781b      	ldrb	r3, [r3, #0]
   1518e:	2b2c      	cmp	r3, #44	; 0x2c
   15190:	d002      	beq.n	15198 <wifi_cb+0x1c>
   15192:	2b32      	cmp	r3, #50	; 0x32
   15194:	d03d      	beq.n	15212 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   15196:	e06f      	b.n	15278 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   15198:	683b      	ldr	r3, [r7, #0]
   1519a:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   1519c:	68fb      	ldr	r3, [r7, #12]
   1519e:	781b      	ldrb	r3, [r3, #0]
   151a0:	2b01      	cmp	r3, #1
   151a2:	d107      	bne.n	151b4 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   151a4:	4b36      	ldr	r3, [pc, #216]	; (15280 <wifi_cb+0x104>)
   151a6:	0019      	movs	r1, r3
   151a8:	2001      	movs	r0, #1
   151aa:	4b36      	ldr	r3, [pc, #216]	; (15284 <wifi_cb+0x108>)
   151ac:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   151ae:	4b36      	ldr	r3, [pc, #216]	; (15288 <wifi_cb+0x10c>)
   151b0:	4798      	blx	r3
            break;
   151b2:	e05e      	b.n	15272 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   151b4:	68fb      	ldr	r3, [r7, #12]
   151b6:	781b      	ldrb	r3, [r3, #0]
   151b8:	2b00      	cmp	r3, #0
   151ba:	d15a      	bne.n	15272 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   151bc:	4b33      	ldr	r3, [pc, #204]	; (1528c <wifi_cb+0x110>)
   151be:	0019      	movs	r1, r3
   151c0:	2001      	movs	r0, #1
   151c2:	4b30      	ldr	r3, [pc, #192]	; (15284 <wifi_cb+0x108>)
   151c4:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   151c6:	2002      	movs	r0, #2
   151c8:	4b31      	ldr	r3, [pc, #196]	; (15290 <wifi_cb+0x114>)
   151ca:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   151cc:	2008      	movs	r0, #8
   151ce:	4b31      	ldr	r3, [pc, #196]	; (15294 <wifi_cb+0x118>)
   151d0:	4798      	blx	r3
   151d2:	1e03      	subs	r3, r0, #0
   151d4:	d006      	beq.n	151e4 <wifi_cb+0x68>
                    f_close(&file_object);
   151d6:	4b30      	ldr	r3, [pc, #192]	; (15298 <wifi_cb+0x11c>)
   151d8:	0018      	movs	r0, r3
   151da:	4b30      	ldr	r3, [pc, #192]	; (1529c <wifi_cb+0x120>)
   151dc:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   151de:	2008      	movs	r0, #8
   151e0:	4b2b      	ldr	r3, [pc, #172]	; (15290 <wifi_cb+0x114>)
   151e2:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   151e4:	2004      	movs	r0, #4
   151e6:	4b2b      	ldr	r3, [pc, #172]	; (15294 <wifi_cb+0x118>)
   151e8:	4798      	blx	r3
   151ea:	1e03      	subs	r3, r0, #0
   151ec:	d002      	beq.n	151f4 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   151ee:	2004      	movs	r0, #4
   151f0:	4b27      	ldr	r3, [pc, #156]	; (15290 <wifi_cb+0x114>)
   151f2:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   151f4:	4b2a      	ldr	r3, [pc, #168]	; (152a0 <wifi_cb+0x124>)
   151f6:	2101      	movs	r1, #1
   151f8:	0018      	movs	r0, r3
   151fa:	4b2a      	ldr	r3, [pc, #168]	; (152a4 <wifi_cb+0x128>)
   151fc:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   151fe:	4a2a      	ldr	r2, [pc, #168]	; (152a8 <wifi_cb+0x12c>)
   15200:	482a      	ldr	r0, [pc, #168]	; (152ac <wifi_cb+0x130>)
   15202:	23ff      	movs	r3, #255	; 0xff
   15204:	9300      	str	r3, [sp, #0]
   15206:	0013      	movs	r3, r2
   15208:	2202      	movs	r2, #2
   1520a:	2109      	movs	r1, #9
   1520c:	4c28      	ldr	r4, [pc, #160]	; (152b0 <wifi_cb+0x134>)
   1520e:	47a0      	blx	r4
            break;
   15210:	e02f      	b.n	15272 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   15212:	683b      	ldr	r3, [r7, #0]
   15214:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   15216:	68bb      	ldr	r3, [r7, #8]
   15218:	781b      	ldrb	r3, [r3, #0]
   1521a:	0018      	movs	r0, r3
   1521c:	68bb      	ldr	r3, [r7, #8]
   1521e:	3301      	adds	r3, #1
   15220:	781b      	ldrb	r3, [r3, #0]
   15222:	001c      	movs	r4, r3
   15224:	68bb      	ldr	r3, [r7, #8]
   15226:	3302      	adds	r3, #2
   15228:	781b      	ldrb	r3, [r3, #0]
   1522a:	001a      	movs	r2, r3
   1522c:	68bb      	ldr	r3, [r7, #8]
   1522e:	3303      	adds	r3, #3
   15230:	781b      	ldrb	r3, [r3, #0]
   15232:	4920      	ldr	r1, [pc, #128]	; (152b4 <wifi_cb+0x138>)
   15234:	9301      	str	r3, [sp, #4]
   15236:	9200      	str	r2, [sp, #0]
   15238:	0023      	movs	r3, r4
   1523a:	0002      	movs	r2, r0
   1523c:	2001      	movs	r0, #1
   1523e:	4c11      	ldr	r4, [pc, #68]	; (15284 <wifi_cb+0x108>)
   15240:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   15242:	2002      	movs	r0, #2
   15244:	4b1c      	ldr	r3, [pc, #112]	; (152b8 <wifi_cb+0x13c>)
   15246:	4798      	blx	r3
            if (do_download_flag == 1) {
   15248:	4b1c      	ldr	r3, [pc, #112]	; (152bc <wifi_cb+0x140>)
   1524a:	781b      	ldrb	r3, [r3, #0]
   1524c:	2b01      	cmp	r3, #1
   1524e:	d102      	bne.n	15256 <wifi_cb+0xda>
                start_download();
   15250:	4b1b      	ldr	r3, [pc, #108]	; (152c0 <wifi_cb+0x144>)
   15252:	4798      	blx	r3
        } break;
   15254:	e00f      	b.n	15276 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   15256:	4a1b      	ldr	r2, [pc, #108]	; (152c4 <wifi_cb+0x148>)
   15258:	4b11      	ldr	r3, [pc, #68]	; (152a0 <wifi_cb+0x124>)
   1525a:	0011      	movs	r1, r2
   1525c:	0018      	movs	r0, r3
   1525e:	4b1a      	ldr	r3, [pc, #104]	; (152c8 <wifi_cb+0x14c>)
   15260:	4798      	blx	r3
   15262:	1e03      	subs	r3, r0, #0
   15264:	d007      	beq.n	15276 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15266:	4b19      	ldr	r3, [pc, #100]	; (152cc <wifi_cb+0x150>)
   15268:	0019      	movs	r1, r3
   1526a:	2001      	movs	r0, #1
   1526c:	4b05      	ldr	r3, [pc, #20]	; (15284 <wifi_cb+0x108>)
   1526e:	4798      	blx	r3
        } break;
   15270:	e001      	b.n	15276 <wifi_cb+0xfa>
            break;
   15272:	46c0      	nop			; (mov r8, r8)
   15274:	e000      	b.n	15278 <wifi_cb+0xfc>
        } break;
   15276:	46c0      	nop			; (mov r8, r8)
    }
}
   15278:	46c0      	nop			; (mov r8, r8)
   1527a:	46bd      	mov	sp, r7
   1527c:	b005      	add	sp, #20
   1527e:	bd90      	pop	{r4, r7, pc}
   15280:	00034d04 	.word	0x00034d04
   15284:	0001c781 	.word	0x0001c781
   15288:	00020dc5 	.word	0x00020dc5
   1528c:	00034d24 	.word	0x00034d24
   15290:	0001498d 	.word	0x0001498d
   15294:	000149e9 	.word	0x000149e9
   15298:	200006e4 	.word	0x200006e4
   1529c:	0002cc91 	.word	0x0002cc91
   152a0:	20000710 	.word	0x20000710
   152a4:	0002e2a1 	.word	0x0002e2a1
   152a8:	00034d48 	.word	0x00034d48
   152ac:	00034d54 	.word	0x00034d54
   152b0:	000208f1 	.word	0x000208f1
   152b4:	00034d60 	.word	0x00034d60
   152b8:	000149c1 	.word	0x000149c1
   152bc:	200004b0 	.word	0x200004b0
   152c0:	00014d11 	.word	0x00014d11
   152c4:	00034978 	.word	0x00034978
   152c8:	0002e16d 	.word	0x0002e16d
   152cc:	00034d88 	.word	0x00034d88

000152d0 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   152d0:	b590      	push	{r4, r7, lr}
   152d2:	b083      	sub	sp, #12
   152d4:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   152d6:	4b29      	ldr	r3, [pc, #164]	; (1537c <init_storage+0xac>)
   152d8:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   152da:	4b29      	ldr	r3, [pc, #164]	; (15380 <init_storage+0xb0>)
   152dc:	0019      	movs	r1, r3
   152de:	2001      	movs	r0, #1
   152e0:	4b28      	ldr	r3, [pc, #160]	; (15384 <init_storage+0xb4>)
   152e2:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   152e4:	1dfc      	adds	r4, r7, #7
   152e6:	2000      	movs	r0, #0
   152e8:	4b27      	ldr	r3, [pc, #156]	; (15388 <init_storage+0xb8>)
   152ea:	4798      	blx	r3
   152ec:	0003      	movs	r3, r0
   152ee:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   152f0:	1dfb      	adds	r3, r7, #7
   152f2:	781b      	ldrb	r3, [r3, #0]
   152f4:	2b01      	cmp	r3, #1
   152f6:	d110      	bne.n	1531a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   152f8:	4b24      	ldr	r3, [pc, #144]	; (1538c <init_storage+0xbc>)
   152fa:	0019      	movs	r1, r3
   152fc:	2001      	movs	r0, #1
   152fe:	4b21      	ldr	r3, [pc, #132]	; (15384 <init_storage+0xb4>)
   15300:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   15302:	4b23      	ldr	r3, [pc, #140]	; (15390 <init_storage+0xc0>)
   15304:	0019      	movs	r1, r3
   15306:	2001      	movs	r0, #1
   15308:	4b1e      	ldr	r3, [pc, #120]	; (15384 <init_storage+0xb4>)
   1530a:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1530c:	46c0      	nop			; (mov r8, r8)
   1530e:	2000      	movs	r0, #0
   15310:	4b20      	ldr	r3, [pc, #128]	; (15394 <init_storage+0xc4>)
   15312:	4798      	blx	r3
   15314:	0003      	movs	r3, r0
   15316:	2b02      	cmp	r3, #2
   15318:	d1f9      	bne.n	1530e <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1531a:	1dfb      	adds	r3, r7, #7
   1531c:	781b      	ldrb	r3, [r3, #0]
   1531e:	2b00      	cmp	r3, #0
   15320:	d1e0      	bne.n	152e4 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   15322:	4b1d      	ldr	r3, [pc, #116]	; (15398 <init_storage+0xc8>)
   15324:	0019      	movs	r1, r3
   15326:	2001      	movs	r0, #1
   15328:	4b16      	ldr	r3, [pc, #88]	; (15384 <init_storage+0xb4>)
   1532a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   1532c:	238c      	movs	r3, #140	; 0x8c
   1532e:	009a      	lsls	r2, r3, #2
   15330:	4b1a      	ldr	r3, [pc, #104]	; (1539c <init_storage+0xcc>)
   15332:	2100      	movs	r1, #0
   15334:	0018      	movs	r0, r3
   15336:	4b1a      	ldr	r3, [pc, #104]	; (153a0 <init_storage+0xd0>)
   15338:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1533a:	1dbc      	adds	r4, r7, #6
   1533c:	4b17      	ldr	r3, [pc, #92]	; (1539c <init_storage+0xcc>)
   1533e:	0019      	movs	r1, r3
   15340:	2000      	movs	r0, #0
   15342:	4b18      	ldr	r3, [pc, #96]	; (153a4 <init_storage+0xd4>)
   15344:	4798      	blx	r3
   15346:	0003      	movs	r3, r0
   15348:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1534a:	1dbb      	adds	r3, r7, #6
   1534c:	781b      	ldrb	r3, [r3, #0]
   1534e:	2b0b      	cmp	r3, #11
   15350:	d107      	bne.n	15362 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   15352:	1dbb      	adds	r3, r7, #6
   15354:	781a      	ldrb	r2, [r3, #0]
   15356:	4b14      	ldr	r3, [pc, #80]	; (153a8 <init_storage+0xd8>)
   15358:	0019      	movs	r1, r3
   1535a:	2001      	movs	r0, #1
   1535c:	4b09      	ldr	r3, [pc, #36]	; (15384 <init_storage+0xb4>)
   1535e:	4798      	blx	r3
            return;
   15360:	e008      	b.n	15374 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   15362:	4b12      	ldr	r3, [pc, #72]	; (153ac <init_storage+0xdc>)
   15364:	0019      	movs	r1, r3
   15366:	2001      	movs	r0, #1
   15368:	4b06      	ldr	r3, [pc, #24]	; (15384 <init_storage+0xb4>)
   1536a:	4798      	blx	r3
        add_state(STORAGE_READY);
   1536c:	2001      	movs	r0, #1
   1536e:	4b10      	ldr	r3, [pc, #64]	; (153b0 <init_storage+0xe0>)
   15370:	4798      	blx	r3
        return;
   15372:	46c0      	nop			; (mov r8, r8)
    }
}
   15374:	46bd      	mov	sp, r7
   15376:	b003      	add	sp, #12
   15378:	bd90      	pop	{r4, r7, pc}
   1537a:	46c0      	nop			; (mov r8, r8)
   1537c:	0001d599 	.word	0x0001d599
   15380:	00034dac 	.word	0x00034dac
   15384:	0001c781 	.word	0x0001c781
   15388:	0001da75 	.word	0x0001da75
   1538c:	00034de4 	.word	0x00034de4
   15390:	00034e0c 	.word	0x00034e0c
   15394:	0001d5e9 	.word	0x0001d5e9
   15398:	00034e40 	.word	0x00034e40
   1539c:	200004b4 	.word	0x200004b4
   153a0:	0003319f 	.word	0x0003319f
   153a4:	0002c239 	.word	0x0002c239
   153a8:	00034e64 	.word	0x00034e64
   153ac:	00034e94 	.word	0x00034e94
   153b0:	000149c1 	.word	0x000149c1

000153b4 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   153b4:	b580      	push	{r7, lr}
   153b6:	b082      	sub	sp, #8
   153b8:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   153ba:	1d3b      	adds	r3, r7, #4
   153bc:	0018      	movs	r0, r3
   153be:	4b08      	ldr	r3, [pc, #32]	; (153e0 <configure_timer+0x2c>)
   153c0:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   153c2:	1d3a      	adds	r2, r7, #4
   153c4:	4b07      	ldr	r3, [pc, #28]	; (153e4 <configure_timer+0x30>)
   153c6:	0011      	movs	r1, r2
   153c8:	0018      	movs	r0, r3
   153ca:	4b07      	ldr	r3, [pc, #28]	; (153e8 <configure_timer+0x34>)
   153cc:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   153ce:	4b05      	ldr	r3, [pc, #20]	; (153e4 <configure_timer+0x30>)
   153d0:	0018      	movs	r0, r3
   153d2:	4b06      	ldr	r3, [pc, #24]	; (153ec <configure_timer+0x38>)
   153d4:	4798      	blx	r3
}
   153d6:	46c0      	nop			; (mov r8, r8)
   153d8:	46bd      	mov	sp, r7
   153da:	b002      	add	sp, #8
   153dc:	bd80      	pop	{r7, pc}
   153de:	46c0      	nop			; (mov r8, r8)
   153e0:	00030d89 	.word	0x00030d89
   153e4:	20004670 	.word	0x20004670
   153e8:	00030dad 	.word	0x00030dad
   153ec:	00030e99 	.word	0x00030e99

000153f0 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   153f0:	b580      	push	{r7, lr}
   153f2:	b088      	sub	sp, #32
   153f4:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   153f6:	003b      	movs	r3, r7
   153f8:	0018      	movs	r0, r3
   153fa:	4b16      	ldr	r3, [pc, #88]	; (15454 <configure_http_client+0x64>)
   153fc:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   153fe:	003b      	movs	r3, r7
   15400:	2280      	movs	r2, #128	; 0x80
   15402:	0092      	lsls	r2, r2, #2
   15404:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   15406:	003b      	movs	r3, r7
   15408:	4a13      	ldr	r2, [pc, #76]	; (15458 <configure_http_client+0x68>)
   1540a:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   1540c:	003b      	movs	r3, r7
   1540e:	22bc      	movs	r2, #188	; 0xbc
   15410:	32ff      	adds	r2, #255	; 0xff
   15412:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   15414:	003b      	movs	r3, r7
   15416:	2201      	movs	r2, #1
   15418:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1541a:	003a      	movs	r2, r7
   1541c:	4b0f      	ldr	r3, [pc, #60]	; (1545c <configure_http_client+0x6c>)
   1541e:	0011      	movs	r1, r2
   15420:	0018      	movs	r0, r3
   15422:	4b0f      	ldr	r3, [pc, #60]	; (15460 <configure_http_client+0x70>)
   15424:	4798      	blx	r3
   15426:	0003      	movs	r3, r0
   15428:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1542a:	69fb      	ldr	r3, [r7, #28]
   1542c:	2b00      	cmp	r3, #0
   1542e:	da06      	bge.n	1543e <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   15430:	69fa      	ldr	r2, [r7, #28]
   15432:	4b0c      	ldr	r3, [pc, #48]	; (15464 <configure_http_client+0x74>)
   15434:	0019      	movs	r1, r3
   15436:	2001      	movs	r0, #1
   15438:	4b0b      	ldr	r3, [pc, #44]	; (15468 <configure_http_client+0x78>)
   1543a:	4798      	blx	r3
        while (1) {
   1543c:	e7fe      	b.n	1543c <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   1543e:	4a0b      	ldr	r2, [pc, #44]	; (1546c <configure_http_client+0x7c>)
   15440:	4b06      	ldr	r3, [pc, #24]	; (1545c <configure_http_client+0x6c>)
   15442:	0011      	movs	r1, r2
   15444:	0018      	movs	r0, r3
   15446:	4b0a      	ldr	r3, [pc, #40]	; (15470 <configure_http_client+0x80>)
   15448:	4798      	blx	r3
}
   1544a:	46c0      	nop			; (mov r8, r8)
   1544c:	46bd      	mov	sp, r7
   1544e:	b008      	add	sp, #32
   15450:	bd80      	pop	{r7, pc}
   15452:	46c0      	nop			; (mov r8, r8)
   15454:	0002f41d 	.word	0x0002f41d
   15458:	20004670 	.word	0x20004670
   1545c:	200046c8 	.word	0x200046c8
   15460:	0002f469 	.word	0x0002f469
   15464:	00034eb8 	.word	0x00034eb8
   15468:	0001c781 	.word	0x0001c781
   1546c:	00014fa1 	.word	0x00014fa1
   15470:	0002f555 	.word	0x0002f555

00015474 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   15474:	b580      	push	{r7, lr}
   15476:	b082      	sub	sp, #8
   15478:	af00      	add	r7, sp, #0
   1547a:	603a      	str	r2, [r7, #0]
   1547c:	1dfb      	adds	r3, r7, #7
   1547e:	1c02      	adds	r2, r0, #0
   15480:	701a      	strb	r2, [r3, #0]
   15482:	1dbb      	adds	r3, r7, #6
   15484:	1c0a      	adds	r2, r1, #0
   15486:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   15488:	683a      	ldr	r2, [r7, #0]
   1548a:	1dbb      	adds	r3, r7, #6
   1548c:	7819      	ldrb	r1, [r3, #0]
   1548e:	1dfb      	adds	r3, r7, #7
   15490:	781b      	ldrb	r3, [r3, #0]
   15492:	b25b      	sxtb	r3, r3
   15494:	0018      	movs	r0, r3
   15496:	4b03      	ldr	r3, [pc, #12]	; (154a4 <socket_event_handler+0x30>)
   15498:	4798      	blx	r3
}
   1549a:	46c0      	nop			; (mov r8, r8)
   1549c:	46bd      	mov	sp, r7
   1549e:	b002      	add	sp, #8
   154a0:	bd80      	pop	{r7, pc}
   154a2:	46c0      	nop			; (mov r8, r8)
   154a4:	0002e115 	.word	0x0002e115

000154a8 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   154a8:	b580      	push	{r7, lr}
   154aa:	b082      	sub	sp, #8
   154ac:	af00      	add	r7, sp, #0
   154ae:	6078      	str	r0, [r7, #4]
   154b0:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   154b2:	683a      	ldr	r2, [r7, #0]
   154b4:	687b      	ldr	r3, [r7, #4]
   154b6:	0011      	movs	r1, r2
   154b8:	0018      	movs	r0, r3
   154ba:	4b03      	ldr	r3, [pc, #12]	; (154c8 <socket_resolve_handler+0x20>)
   154bc:	4798      	blx	r3
}
   154be:	46c0      	nop			; (mov r8, r8)
   154c0:	46bd      	mov	sp, r7
   154c2:	b002      	add	sp, #8
   154c4:	bd80      	pop	{r7, pc}
   154c6:	46c0      	nop			; (mov r8, r8)
   154c8:	0002e149 	.word	0x0002e149

000154cc <SubscribeHandlerLedTopic>:
//         }
//     }
}

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   154cc:	b580      	push	{r7, lr}
   154ce:	b082      	sub	sp, #8
   154d0:	af00      	add	r7, sp, #0
   154d2:	6078      	str	r0, [r7, #4]
// 	LogMessage(LOG_DEBUG_LVL, "\r\LED topic received!\r\n");
// 	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
	if (strncmp((char *)msgData->topicName->lenstring.data, STREETLIGHT_TOPIC, msgData->message->payloadlen) == 0) {
   154d4:	687b      	ldr	r3, [r7, #4]
   154d6:	685b      	ldr	r3, [r3, #4]
   154d8:	6898      	ldr	r0, [r3, #8]
   154da:	687b      	ldr	r3, [r7, #4]
   154dc:	681b      	ldr	r3, [r3, #0]
   154de:	68da      	ldr	r2, [r3, #12]
   154e0:	4b14      	ldr	r3, [pc, #80]	; (15534 <SubscribeHandlerLedTopic+0x68>)
   154e2:	0019      	movs	r1, r3
   154e4:	4b14      	ldr	r3, [pc, #80]	; (15538 <SubscribeHandlerLedTopic+0x6c>)
   154e6:	4798      	blx	r3
   154e8:	1e03      	subs	r3, r0, #0
   154ea:	d11e      	bne.n	1552a <SubscribeHandlerLedTopic+0x5e>
        if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   154ec:	687b      	ldr	r3, [r7, #4]
   154ee:	681b      	ldr	r3, [r3, #0]
   154f0:	6898      	ldr	r0, [r3, #8]
   154f2:	687b      	ldr	r3, [r7, #4]
   154f4:	681b      	ldr	r3, [r3, #0]
   154f6:	68da      	ldr	r2, [r3, #12]
   154f8:	4b10      	ldr	r3, [pc, #64]	; (1553c <SubscribeHandlerLedTopic+0x70>)
   154fa:	0019      	movs	r1, r3
   154fc:	4b0e      	ldr	r3, [pc, #56]	; (15538 <SubscribeHandlerLedTopic+0x6c>)
   154fe:	4798      	blx	r3
   15500:	1e03      	subs	r3, r0, #0
   15502:	d103      	bne.n	1550c <SubscribeHandlerLedTopic+0x40>
            streetLightStateChange(false);
   15504:	2000      	movs	r0, #0
   15506:	4b0e      	ldr	r3, [pc, #56]	; (15540 <SubscribeHandlerLedTopic+0x74>)
   15508:	4798      	blx	r3
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
            streetLightStateChange(true);
        }
    }
	
}
   1550a:	e00e      	b.n	1552a <SubscribeHandlerLedTopic+0x5e>
        } else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   1550c:	687b      	ldr	r3, [r7, #4]
   1550e:	681b      	ldr	r3, [r3, #0]
   15510:	6898      	ldr	r0, [r3, #8]
   15512:	687b      	ldr	r3, [r7, #4]
   15514:	681b      	ldr	r3, [r3, #0]
   15516:	68da      	ldr	r2, [r3, #12]
   15518:	4b0a      	ldr	r3, [pc, #40]	; (15544 <SubscribeHandlerLedTopic+0x78>)
   1551a:	0019      	movs	r1, r3
   1551c:	4b06      	ldr	r3, [pc, #24]	; (15538 <SubscribeHandlerLedTopic+0x6c>)
   1551e:	4798      	blx	r3
   15520:	1e03      	subs	r3, r0, #0
   15522:	d102      	bne.n	1552a <SubscribeHandlerLedTopic+0x5e>
            streetLightStateChange(true);
   15524:	2001      	movs	r0, #1
   15526:	4b06      	ldr	r3, [pc, #24]	; (15540 <SubscribeHandlerLedTopic+0x74>)
   15528:	4798      	blx	r3
}
   1552a:	46c0      	nop			; (mov r8, r8)
   1552c:	46bd      	mov	sp, r7
   1552e:	b002      	add	sp, #8
   15530:	bd80      	pop	{r7, pc}
   15532:	46c0      	nop			; (mov r8, r8)
   15534:	00034f18 	.word	0x00034f18
   15538:	00033549 	.word	0x00033549
   1553c:	00034f30 	.word	0x00034f30
   15540:	0001229d 	.word	0x0001229d
   15544:	00034f38 	.word	0x00034f38

00015548 <SubscribeHandlerRepairLedTopic>:

void SubscribeHandlerRepairLedTopic(MessageData *msgData)
{
   15548:	b580      	push	{r7, lr}
   1554a:	b082      	sub	sp, #8
   1554c:	af00      	add	r7, sp, #0
   1554e:	6078      	str	r0, [r7, #4]
// 	LogMessage(LOG_DEBUG_LVL, "\r\Repair LED topic received!\r\n");
// 	LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
// 	LogMessage(LOG_DEBUG_LVL, "\r\n %.*t", msgData->message);
	if (strncmp((char *)msgData->topicName->lenstring.data, REPAIRLIGHT_TOPIC, msgData->message->payloadlen) == 0) {
   15550:	687b      	ldr	r3, [r7, #4]
   15552:	685b      	ldr	r3, [r3, #4]
   15554:	6898      	ldr	r0, [r3, #8]
   15556:	687b      	ldr	r3, [r7, #4]
   15558:	681b      	ldr	r3, [r3, #0]
   1555a:	68da      	ldr	r2, [r3, #12]
   1555c:	4b14      	ldr	r3, [pc, #80]	; (155b0 <SubscribeHandlerRepairLedTopic+0x68>)
   1555e:	0019      	movs	r1, r3
   15560:	4b14      	ldr	r3, [pc, #80]	; (155b4 <SubscribeHandlerRepairLedTopic+0x6c>)
   15562:	4798      	blx	r3
   15564:	1e03      	subs	r3, r0, #0
   15566:	d11e      	bne.n	155a6 <SubscribeHandlerRepairLedTopic+0x5e>
		if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_OFF, msgData->message->payloadlen) == 0) {
   15568:	687b      	ldr	r3, [r7, #4]
   1556a:	681b      	ldr	r3, [r3, #0]
   1556c:	6898      	ldr	r0, [r3, #8]
   1556e:	687b      	ldr	r3, [r7, #4]
   15570:	681b      	ldr	r3, [r3, #0]
   15572:	68da      	ldr	r2, [r3, #12]
   15574:	4b10      	ldr	r3, [pc, #64]	; (155b8 <SubscribeHandlerRepairLedTopic+0x70>)
   15576:	0019      	movs	r1, r3
   15578:	4b0e      	ldr	r3, [pc, #56]	; (155b4 <SubscribeHandlerRepairLedTopic+0x6c>)
   1557a:	4798      	blx	r3
   1557c:	1e03      	subs	r3, r0, #0
   1557e:	d103      	bne.n	15588 <SubscribeHandlerRepairLedTopic+0x40>
			repairLightStateChange(false);
   15580:	2000      	movs	r0, #0
   15582:	4b0e      	ldr	r3, [pc, #56]	; (155bc <SubscribeHandlerRepairLedTopic+0x74>)
   15584:	4798      	blx	r3
			} else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
			repairLightStateChange(true);
		}
	}
}
   15586:	e00e      	b.n	155a6 <SubscribeHandlerRepairLedTopic+0x5e>
			} else if (strncmp((char *)msgData->message->payload, LED_TOPIC_LED_ON, msgData->message->payloadlen) == 0) {
   15588:	687b      	ldr	r3, [r7, #4]
   1558a:	681b      	ldr	r3, [r3, #0]
   1558c:	6898      	ldr	r0, [r3, #8]
   1558e:	687b      	ldr	r3, [r7, #4]
   15590:	681b      	ldr	r3, [r3, #0]
   15592:	68da      	ldr	r2, [r3, #12]
   15594:	4b0a      	ldr	r3, [pc, #40]	; (155c0 <SubscribeHandlerRepairLedTopic+0x78>)
   15596:	0019      	movs	r1, r3
   15598:	4b06      	ldr	r3, [pc, #24]	; (155b4 <SubscribeHandlerRepairLedTopic+0x6c>)
   1559a:	4798      	blx	r3
   1559c:	1e03      	subs	r3, r0, #0
   1559e:	d102      	bne.n	155a6 <SubscribeHandlerRepairLedTopic+0x5e>
			repairLightStateChange(true);
   155a0:	2001      	movs	r0, #1
   155a2:	4b06      	ldr	r3, [pc, #24]	; (155bc <SubscribeHandlerRepairLedTopic+0x74>)
   155a4:	4798      	blx	r3
}
   155a6:	46c0      	nop			; (mov r8, r8)
   155a8:	46bd      	mov	sp, r7
   155aa:	b002      	add	sp, #8
   155ac:	bd80      	pop	{r7, pc}
   155ae:	46c0      	nop			; (mov r8, r8)
   155b0:	00034f40 	.word	0x00034f40
   155b4:	00033549 	.word	0x00033549
   155b8:	00034f30 	.word	0x00034f30
   155bc:	000122f1 	.word	0x000122f1
   155c0:	00034f38 	.word	0x00034f38

000155c4 <SubscribeHandlerSensorTopic>:

void SubscribeHandlerSensorTopic(MessageData *msgData)
{
   155c4:	b580      	push	{r7, lr}
   155c6:	b082      	sub	sp, #8
   155c8:	af00      	add	r7, sp, #0
   155ca:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nSensor Data received!\r\n");
   155cc:	4b04      	ldr	r3, [pc, #16]	; (155e0 <SubscribeHandlerSensorTopic+0x1c>)
   155ce:	0019      	movs	r1, r3
   155d0:	2001      	movs	r0, #1
   155d2:	4b04      	ldr	r3, [pc, #16]	; (155e4 <SubscribeHandlerSensorTopic+0x20>)
   155d4:	4798      	blx	r3
	/*LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);*/
}
   155d6:	46c0      	nop			; (mov r8, r8)
   155d8:	46bd      	mov	sp, r7
   155da:	b002      	add	sp, #8
   155dc:	bd80      	pop	{r7, pc}
   155de:	46c0      	nop			; (mov r8, r8)
   155e0:	00034f58 	.word	0x00034f58
   155e4:	0001c781 	.word	0x0001c781

000155e8 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   155e8:	b590      	push	{r4, r7, lr}
   155ea:	b08b      	sub	sp, #44	; 0x2c
   155ec:	af06      	add	r7, sp, #24
   155ee:	60f8      	str	r0, [r7, #12]
   155f0:	60b9      	str	r1, [r7, #8]
   155f2:	607a      	str	r2, [r7, #4]
    switch (type) {
   155f4:	68bb      	ldr	r3, [r7, #8]
   155f6:	2b01      	cmp	r3, #1
   155f8:	d03b      	beq.n	15672 <mqtt_callback+0x8a>
   155fa:	2b05      	cmp	r3, #5
   155fc:	d05e      	beq.n	156bc <mqtt_callback+0xd4>
   155fe:	2b00      	cmp	r3, #0
   15600:	d000      	beq.n	15604 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   15602:	e061      	b.n	156c8 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   15604:	687b      	ldr	r3, [r7, #4]
   15606:	681b      	ldr	r3, [r3, #0]
   15608:	2b00      	cmp	r3, #0
   1560a:	db25      	blt.n	15658 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   1560c:	4b30      	ldr	r3, [pc, #192]	; (156d0 <mqtt_callback+0xe8>)
   1560e:	0019      	movs	r1, r3
   15610:	2001      	movs	r0, #1
   15612:	4b30      	ldr	r3, [pc, #192]	; (156d4 <mqtt_callback+0xec>)
   15614:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   15616:	4930      	ldr	r1, [pc, #192]	; (156d8 <mqtt_callback+0xf0>)
   15618:	4a30      	ldr	r2, [pc, #192]	; (156dc <mqtt_callback+0xf4>)
   1561a:	68f8      	ldr	r0, [r7, #12]
   1561c:	2300      	movs	r3, #0
   1561e:	9305      	str	r3, [sp, #20]
   15620:	2300      	movs	r3, #0
   15622:	9304      	str	r3, [sp, #16]
   15624:	2300      	movs	r3, #0
   15626:	9303      	str	r3, [sp, #12]
   15628:	2300      	movs	r3, #0
   1562a:	9302      	str	r3, [sp, #8]
   1562c:	2300      	movs	r3, #0
   1562e:	9301      	str	r3, [sp, #4]
   15630:	4b2a      	ldr	r3, [pc, #168]	; (156dc <mqtt_callback+0xf4>)
   15632:	9300      	str	r3, [sp, #0]
   15634:	000b      	movs	r3, r1
   15636:	2101      	movs	r1, #1
   15638:	4c29      	ldr	r4, [pc, #164]	; (156e0 <mqtt_callback+0xf8>)
   1563a:	47a0      	blx	r4
   1563c:	1e03      	subs	r3, r0, #0
   1563e:	d005      	beq.n	1564c <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   15640:	4b28      	ldr	r3, [pc, #160]	; (156e4 <mqtt_callback+0xfc>)
   15642:	0019      	movs	r1, r3
   15644:	2001      	movs	r0, #1
   15646:	4b23      	ldr	r3, [pc, #140]	; (156d4 <mqtt_callback+0xec>)
   15648:	4798      	blx	r3
        } break;
   1564a:	e03d      	b.n	156c8 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   1564c:	4b26      	ldr	r3, [pc, #152]	; (156e8 <mqtt_callback+0x100>)
   1564e:	0019      	movs	r1, r3
   15650:	2001      	movs	r0, #1
   15652:	4b20      	ldr	r3, [pc, #128]	; (156d4 <mqtt_callback+0xec>)
   15654:	4798      	blx	r3
        } break;
   15656:	e037      	b.n	156c8 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   15658:	4a24      	ldr	r2, [pc, #144]	; (156ec <mqtt_callback+0x104>)
   1565a:	4b25      	ldr	r3, [pc, #148]	; (156f0 <mqtt_callback+0x108>)
   1565c:	0019      	movs	r1, r3
   1565e:	2001      	movs	r0, #1
   15660:	4b1c      	ldr	r3, [pc, #112]	; (156d4 <mqtt_callback+0xec>)
   15662:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   15664:	4a21      	ldr	r2, [pc, #132]	; (156ec <mqtt_callback+0x104>)
   15666:	68fb      	ldr	r3, [r7, #12]
   15668:	0011      	movs	r1, r2
   1566a:	0018      	movs	r0, r3
   1566c:	4b21      	ldr	r3, [pc, #132]	; (156f4 <mqtt_callback+0x10c>)
   1566e:	4798      	blx	r3
        } break;
   15670:	e02a      	b.n	156c8 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   15672:	687b      	ldr	r3, [r7, #4]
   15674:	781b      	ldrb	r3, [r3, #0]
   15676:	2b00      	cmp	r3, #0
   15678:	d117      	bne.n	156aa <mqtt_callback+0xc2>
				mqtt_subscribe(module_inst, DATA_IN, 0, SubscribeHandlerSensorTopic);
   1567a:	4b1f      	ldr	r3, [pc, #124]	; (156f8 <mqtt_callback+0x110>)
   1567c:	491f      	ldr	r1, [pc, #124]	; (156fc <mqtt_callback+0x114>)
   1567e:	68f8      	ldr	r0, [r7, #12]
   15680:	2200      	movs	r2, #0
   15682:	4c1f      	ldr	r4, [pc, #124]	; (15700 <mqtt_callback+0x118>)
   15684:	47a0      	blx	r4
				mqtt_subscribe(module_inst, STREETLIGHT_TOPIC, 0, SubscribeHandlerLedTopic);
   15686:	4b1f      	ldr	r3, [pc, #124]	; (15704 <mqtt_callback+0x11c>)
   15688:	491f      	ldr	r1, [pc, #124]	; (15708 <mqtt_callback+0x120>)
   1568a:	68f8      	ldr	r0, [r7, #12]
   1568c:	2200      	movs	r2, #0
   1568e:	4c1c      	ldr	r4, [pc, #112]	; (15700 <mqtt_callback+0x118>)
   15690:	47a0      	blx	r4
				mqtt_subscribe(module_inst, REPAIRLIGHT_TOPIC, 0, SubscribeHandlerRepairLedTopic);
   15692:	4b1e      	ldr	r3, [pc, #120]	; (1570c <mqtt_callback+0x124>)
   15694:	491e      	ldr	r1, [pc, #120]	; (15710 <mqtt_callback+0x128>)
   15696:	68f8      	ldr	r0, [r7, #12]
   15698:	2200      	movs	r2, #0
   1569a:	4c19      	ldr	r4, [pc, #100]	; (15700 <mqtt_callback+0x118>)
   1569c:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   1569e:	4b1d      	ldr	r3, [pc, #116]	; (15714 <mqtt_callback+0x12c>)
   156a0:	0019      	movs	r1, r3
   156a2:	2001      	movs	r0, #1
   156a4:	4b0b      	ldr	r3, [pc, #44]	; (156d4 <mqtt_callback+0xec>)
   156a6:	4798      	blx	r3
            break;
   156a8:	e00e      	b.n	156c8 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   156aa:	687b      	ldr	r3, [r7, #4]
   156ac:	781b      	ldrb	r3, [r3, #0]
   156ae:	001a      	movs	r2, r3
   156b0:	4b19      	ldr	r3, [pc, #100]	; (15718 <mqtt_callback+0x130>)
   156b2:	0019      	movs	r1, r3
   156b4:	2001      	movs	r0, #1
   156b6:	4b07      	ldr	r3, [pc, #28]	; (156d4 <mqtt_callback+0xec>)
   156b8:	4798      	blx	r3
            break;
   156ba:	e005      	b.n	156c8 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   156bc:	4b17      	ldr	r3, [pc, #92]	; (1571c <mqtt_callback+0x134>)
   156be:	0019      	movs	r1, r3
   156c0:	2001      	movs	r0, #1
   156c2:	4b04      	ldr	r3, [pc, #16]	; (156d4 <mqtt_callback+0xec>)
   156c4:	4798      	blx	r3
            break;
   156c6:	46c0      	nop			; (mov r8, r8)
}
   156c8:	46c0      	nop			; (mov r8, r8)
   156ca:	46bd      	mov	sp, r7
   156cc:	b005      	add	sp, #20
   156ce:	bd90      	pop	{r4, r7, pc}
   156d0:	00034f74 	.word	0x00034f74
   156d4:	0001c781 	.word	0x0001c781
   156d8:	00034f90 	.word	0x00034f90
   156dc:	00034fa0 	.word	0x00034fa0
   156e0:	0002e1b5 	.word	0x0002e1b5
   156e4:	00034fac 	.word	0x00034fac
   156e8:	00034fd4 	.word	0x00034fd4
   156ec:	00034978 	.word	0x00034978
   156f0:	00034ff0 	.word	0x00034ff0
   156f4:	0002e16d 	.word	0x0002e16d
   156f8:	000155c5 	.word	0x000155c5
   156fc:	00035028 	.word	0x00035028
   15700:	0002e355 	.word	0x0002e355
   15704:	000154cd 	.word	0x000154cd
   15708:	00034f18 	.word	0x00034f18
   1570c:	00015549 	.word	0x00015549
   15710:	00034f40 	.word	0x00034f40
   15714:	00035034 	.word	0x00035034
   15718:	00035048 	.word	0x00035048
   1571c:	0003507c 	.word	0x0003507c

00015720 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   15720:	b580      	push	{r7, lr}
   15722:	b088      	sub	sp, #32
   15724:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   15726:	1d3b      	adds	r3, r7, #4
   15728:	0018      	movs	r0, r3
   1572a:	4b1f      	ldr	r3, [pc, #124]	; (157a8 <configure_mqtt+0x88>)
   1572c:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1572e:	1d3b      	adds	r3, r7, #4
   15730:	4a1e      	ldr	r2, [pc, #120]	; (157ac <configure_mqtt+0x8c>)
   15732:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15734:	1d3b      	adds	r3, r7, #4
   15736:	2280      	movs	r2, #128	; 0x80
   15738:	0092      	lsls	r2, r2, #2
   1573a:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   1573c:	1d3b      	adds	r3, r7, #4
   1573e:	4a1c      	ldr	r2, [pc, #112]	; (157b0 <configure_mqtt+0x90>)
   15740:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   15742:	1d3b      	adds	r3, r7, #4
   15744:	2280      	movs	r2, #128	; 0x80
   15746:	0092      	lsls	r2, r2, #2
   15748:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   1574a:	1d3b      	adds	r3, r7, #4
   1574c:	4a19      	ldr	r2, [pc, #100]	; (157b4 <configure_mqtt+0x94>)
   1574e:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   15750:	1d3b      	adds	r3, r7, #4
   15752:	4a19      	ldr	r2, [pc, #100]	; (157b8 <configure_mqtt+0x98>)
   15754:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   15756:	1d3a      	adds	r2, r7, #4
   15758:	4b18      	ldr	r3, [pc, #96]	; (157bc <configure_mqtt+0x9c>)
   1575a:	0011      	movs	r1, r2
   1575c:	0018      	movs	r0, r3
   1575e:	4b18      	ldr	r3, [pc, #96]	; (157c0 <configure_mqtt+0xa0>)
   15760:	4798      	blx	r3
   15762:	0003      	movs	r3, r0
   15764:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   15766:	69fb      	ldr	r3, [r7, #28]
   15768:	2b00      	cmp	r3, #0
   1576a:	da06      	bge.n	1577a <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   1576c:	69fa      	ldr	r2, [r7, #28]
   1576e:	4b15      	ldr	r3, [pc, #84]	; (157c4 <configure_mqtt+0xa4>)
   15770:	0019      	movs	r1, r3
   15772:	2001      	movs	r0, #1
   15774:	4b14      	ldr	r3, [pc, #80]	; (157c8 <configure_mqtt+0xa8>)
   15776:	4798      	blx	r3
        while (1) {
   15778:	e7fe      	b.n	15778 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   1577a:	4a14      	ldr	r2, [pc, #80]	; (157cc <configure_mqtt+0xac>)
   1577c:	4b0f      	ldr	r3, [pc, #60]	; (157bc <configure_mqtt+0x9c>)
   1577e:	0011      	movs	r1, r2
   15780:	0018      	movs	r0, r3
   15782:	4b13      	ldr	r3, [pc, #76]	; (157d0 <configure_mqtt+0xb0>)
   15784:	4798      	blx	r3
   15786:	0003      	movs	r3, r0
   15788:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   1578a:	69fb      	ldr	r3, [r7, #28]
   1578c:	2b00      	cmp	r3, #0
   1578e:	da06      	bge.n	1579e <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   15790:	69fa      	ldr	r2, [r7, #28]
   15792:	4b10      	ldr	r3, [pc, #64]	; (157d4 <configure_mqtt+0xb4>)
   15794:	0019      	movs	r1, r3
   15796:	2001      	movs	r0, #1
   15798:	4b0b      	ldr	r3, [pc, #44]	; (157c8 <configure_mqtt+0xa8>)
   1579a:	4798      	blx	r3
        while (1) {
   1579c:	e7fe      	b.n	1579c <configure_mqtt+0x7c>
        }
    }
}
   1579e:	46c0      	nop			; (mov r8, r8)
   157a0:	46bd      	mov	sp, r7
   157a2:	b008      	add	sp, #32
   157a4:	bd80      	pop	{r7, pc}
   157a6:	46c0      	nop			; (mov r8, r8)
   157a8:	0002e0ad 	.word	0x0002e0ad
   157ac:	20000748 	.word	0x20000748
   157b0:	20000948 	.word	0x20000948
   157b4:	0000075b 	.word	0x0000075b
   157b8:	00001770 	.word	0x00001770
   157bc:	20000710 	.word	0x20000710
   157c0:	0002dffd 	.word	0x0002dffd
   157c4:	00035090 	.word	0x00035090
   157c8:	0001c781 	.word	0x0001c781
   157cc:	000155e9 	.word	0x000155e9
   157d0:	0002e0ed 	.word	0x0002e0ed
   157d4:	000350c4 	.word	0x000350c4

000157d8 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   157d8:	b580      	push	{r7, lr}
   157da:	b084      	sub	sp, #16
   157dc:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   157de:	1d3b      	adds	r3, r7, #4
   157e0:	0018      	movs	r0, r3
   157e2:	4b0b      	ldr	r3, [pc, #44]	; (15810 <configure_extint_channel+0x38>)
   157e4:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   157e6:	1d3b      	adds	r3, r7, #4
   157e8:	2237      	movs	r2, #55	; 0x37
   157ea:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   157ec:	1d3b      	adds	r3, r7, #4
   157ee:	2200      	movs	r2, #0
   157f0:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   157f2:	1d3b      	adds	r3, r7, #4
   157f4:	2201      	movs	r2, #1
   157f6:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   157f8:	1d3b      	adds	r3, r7, #4
   157fa:	2202      	movs	r2, #2
   157fc:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   157fe:	1d3b      	adds	r3, r7, #4
   15800:	0019      	movs	r1, r3
   15802:	2007      	movs	r0, #7
   15804:	4b03      	ldr	r3, [pc, #12]	; (15814 <configure_extint_channel+0x3c>)
   15806:	4798      	blx	r3
}
   15808:	46c0      	nop			; (mov r8, r8)
   1580a:	46bd      	mov	sp, r7
   1580c:	b004      	add	sp, #16
   1580e:	bd80      	pop	{r7, pc}
   15810:	000251e5 	.word	0x000251e5
   15814:	00025219 	.word	0x00025219

00015818 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   15818:	b580      	push	{r7, lr}
   1581a:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   1581c:	4b06      	ldr	r3, [pc, #24]	; (15838 <configure_extint_callbacks+0x20>)
   1581e:	2200      	movs	r2, #0
   15820:	2107      	movs	r1, #7
   15822:	0018      	movs	r0, r3
   15824:	4b05      	ldr	r3, [pc, #20]	; (1583c <configure_extint_callbacks+0x24>)
   15826:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   15828:	2100      	movs	r1, #0
   1582a:	2007      	movs	r0, #7
   1582c:	4b04      	ldr	r3, [pc, #16]	; (15840 <configure_extint_callbacks+0x28>)
   1582e:	4798      	blx	r3
}
   15830:	46c0      	nop			; (mov r8, r8)
   15832:	46bd      	mov	sp, r7
   15834:	bd80      	pop	{r7, pc}
   15836:	46c0      	nop			; (mov r8, r8)
   15838:	00015845 	.word	0x00015845
   1583c:	00024de5 	.word	0x00024de5
   15840:	00024e49 	.word	0x00024e49

00015844 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   15844:	b5b0      	push	{r4, r5, r7, lr}
   15846:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   15848:	4b0c      	ldr	r3, [pc, #48]	; (1587c <extint_detection_callback+0x38>)
   1584a:	681b      	ldr	r3, [r3, #0]
   1584c:	1c5a      	adds	r2, r3, #1
   1584e:	4b0b      	ldr	r3, [pc, #44]	; (1587c <extint_detection_callback+0x38>)
   15850:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   15852:	4b0a      	ldr	r3, [pc, #40]	; (1587c <extint_detection_callback+0x38>)
   15854:	681b      	ldr	r3, [r3, #0]
   15856:	2b28      	cmp	r3, #40	; 0x28
   15858:	d902      	bls.n	15860 <extint_detection_callback+0x1c>
   1585a:	4b08      	ldr	r3, [pc, #32]	; (1587c <extint_detection_callback+0x38>)
   1585c:	2201      	movs	r2, #1
   1585e:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   15860:	4b06      	ldr	r3, [pc, #24]	; (1587c <extint_detection_callback+0x38>)
   15862:	681b      	ldr	r3, [r3, #0]
   15864:	4a06      	ldr	r2, [pc, #24]	; (15880 <extint_detection_callback+0x3c>)
   15866:	4807      	ldr	r0, [pc, #28]	; (15884 <extint_detection_callback+0x40>)
   15868:	213f      	movs	r1, #63	; 0x3f
   1586a:	4c07      	ldr	r4, [pc, #28]	; (15888 <extint_detection_callback+0x44>)
   1586c:	47a0      	blx	r4
    isPressed = true;
   1586e:	4b07      	ldr	r3, [pc, #28]	; (1588c <extint_detection_callback+0x48>)
   15870:	2201      	movs	r2, #1
   15872:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   15874:	46c0      	nop			; (mov r8, r8)
   15876:	46bd      	mov	sp, r7
   15878:	bdb0      	pop	{r4, r5, r7, pc}
   1587a:	46c0      	nop			; (mov r8, r8)
   1587c:	200000b0 	.word	0x200000b0
   15880:	000350f8 	.word	0x000350f8
   15884:	20000070 	.word	0x20000070
   15888:	000333f9 	.word	0x000333f9
   1588c:	20000b48 	.word	0x20000b48

00015890 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   15890:	b580      	push	{r7, lr}
   15892:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   15894:	4a15      	ldr	r2, [pc, #84]	; (158ec <HTTP_DownloadFileInit+0x5c>)
   15896:	4b16      	ldr	r3, [pc, #88]	; (158f0 <HTTP_DownloadFileInit+0x60>)
   15898:	0011      	movs	r1, r2
   1589a:	0018      	movs	r0, r3
   1589c:	4b15      	ldr	r3, [pc, #84]	; (158f4 <HTTP_DownloadFileInit+0x64>)
   1589e:	4798      	blx	r3
   158a0:	1e03      	subs	r3, r0, #0
   158a2:	d008      	beq.n	158b6 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   158a4:	4b14      	ldr	r3, [pc, #80]	; (158f8 <HTTP_DownloadFileInit+0x68>)
   158a6:	0019      	movs	r1, r3
   158a8:	2001      	movs	r0, #1
   158aa:	4b14      	ldr	r3, [pc, #80]	; (158fc <HTTP_DownloadFileInit+0x6c>)
   158ac:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   158ae:	e002      	b.n	158b6 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   158b0:	2000      	movs	r0, #0
   158b2:	4b13      	ldr	r3, [pc, #76]	; (15900 <HTTP_DownloadFileInit+0x70>)
   158b4:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   158b6:	4b0e      	ldr	r3, [pc, #56]	; (158f0 <HTTP_DownloadFileInit+0x60>)
   158b8:	2234      	movs	r2, #52	; 0x34
   158ba:	5c9b      	ldrb	r3, [r3, r2]
   158bc:	2b00      	cmp	r3, #0
   158be:	d1f7      	bne.n	158b0 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   158c0:	4b10      	ldr	r3, [pc, #64]	; (15904 <HTTP_DownloadFileInit+0x74>)
   158c2:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   158c4:	4b10      	ldr	r3, [pc, #64]	; (15908 <HTTP_DownloadFileInit+0x78>)
   158c6:	2201      	movs	r2, #1
   158c8:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   158ca:	4a10      	ldr	r2, [pc, #64]	; (1590c <HTTP_DownloadFileInit+0x7c>)
   158cc:	4b10      	ldr	r3, [pc, #64]	; (15910 <HTTP_DownloadFileInit+0x80>)
   158ce:	0011      	movs	r1, r2
   158d0:	0018      	movs	r0, r3
   158d2:	4b10      	ldr	r3, [pc, #64]	; (15914 <HTTP_DownloadFileInit+0x84>)
   158d4:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   158d6:	4b10      	ldr	r3, [pc, #64]	; (15918 <HTTP_DownloadFileInit+0x88>)
   158d8:	4798      	blx	r3

    start_download();
   158da:	4b10      	ldr	r3, [pc, #64]	; (1591c <HTTP_DownloadFileInit+0x8c>)
   158dc:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   158de:	4b10      	ldr	r3, [pc, #64]	; (15920 <HTTP_DownloadFileInit+0x90>)
   158e0:	2203      	movs	r2, #3
   158e2:	701a      	strb	r2, [r3, #0]
}
   158e4:	46c0      	nop			; (mov r8, r8)
   158e6:	46bd      	mov	sp, r7
   158e8:	bd80      	pop	{r7, pc}
   158ea:	46c0      	nop			; (mov r8, r8)
   158ec:	00034978 	.word	0x00034978
   158f0:	20000710 	.word	0x20000710
   158f4:	0002e2a1 	.word	0x0002e2a1
   158f8:	00034d88 	.word	0x00034d88
   158fc:	0001c781 	.word	0x0001c781
   15900:	000208d5 	.word	0x000208d5
   15904:	00023e91 	.word	0x00023e91
   15908:	200004b0 	.word	0x200004b0
   1590c:	0001511d 	.word	0x0001511d
   15910:	000150e9 	.word	0x000150e9
   15914:	00023ed9 	.word	0x00023ed9
   15918:	00023e41 	.word	0x00023e41
   1591c:	00014d11 	.word	0x00014d11
   15920:	200004a4 	.word	0x200004a4

00015924 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   15924:	b590      	push	{r4, r7, lr}
   15926:	b085      	sub	sp, #20
   15928:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   1592a:	e009      	b.n	15940 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1592c:	2000      	movs	r0, #0
   1592e:	4b2a      	ldr	r3, [pc, #168]	; (159d8 <HTTP_DownloadFileTransaction+0xb4>)
   15930:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   15932:	4b2a      	ldr	r3, [pc, #168]	; (159dc <HTTP_DownloadFileTransaction+0xb8>)
   15934:	0018      	movs	r0, r3
   15936:	4b2a      	ldr	r3, [pc, #168]	; (159e0 <HTTP_DownloadFileTransaction+0xbc>)
   15938:	4798      	blx	r3
        vTaskDelay(5);
   1593a:	2005      	movs	r0, #5
   1593c:	4b29      	ldr	r3, [pc, #164]	; (159e4 <HTTP_DownloadFileTransaction+0xc0>)
   1593e:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   15940:	2010      	movs	r0, #16
   15942:	4b29      	ldr	r3, [pc, #164]	; (159e8 <HTTP_DownloadFileTransaction+0xc4>)
   15944:	4798      	blx	r3
   15946:	0003      	movs	r3, r0
   15948:	001a      	movs	r2, r3
   1594a:	2301      	movs	r3, #1
   1594c:	4053      	eors	r3, r2
   1594e:	b2db      	uxtb	r3, r3
   15950:	2b00      	cmp	r3, #0
   15952:	d009      	beq.n	15968 <HTTP_DownloadFileTransaction+0x44>
   15954:	2020      	movs	r0, #32
   15956:	4b24      	ldr	r3, [pc, #144]	; (159e8 <HTTP_DownloadFileTransaction+0xc4>)
   15958:	4798      	blx	r3
   1595a:	0003      	movs	r3, r0
   1595c:	001a      	movs	r2, r3
   1595e:	2301      	movs	r3, #1
   15960:	4053      	eors	r3, r2
   15962:	b2db      	uxtb	r3, r3
   15964:	2b00      	cmp	r3, #0
   15966:	d1e1      	bne.n	1592c <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   15968:	4b20      	ldr	r3, [pc, #128]	; (159ec <HTTP_DownloadFileTransaction+0xc8>)
   1596a:	4798      	blx	r3
    vTaskDelay(1000);
   1596c:	23fa      	movs	r3, #250	; 0xfa
   1596e:	009b      	lsls	r3, r3, #2
   15970:	0018      	movs	r0, r3
   15972:	4b1c      	ldr	r3, [pc, #112]	; (159e4 <HTTP_DownloadFileTransaction+0xc0>)
   15974:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   15976:	4b1e      	ldr	r3, [pc, #120]	; (159f0 <HTTP_DownloadFileTransaction+0xcc>)
   15978:	2200      	movs	r2, #0
   1597a:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   1597c:	003b      	movs	r3, r7
   1597e:	4a1d      	ldr	r2, [pc, #116]	; (159f4 <HTTP_DownloadFileTransaction+0xd0>)
   15980:	ca13      	ldmia	r2!, {r0, r1, r4}
   15982:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   15984:	003b      	movs	r3, r7
   15986:	2230      	movs	r2, #48	; 0x30
   15988:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   1598a:	230f      	movs	r3, #15
   1598c:	18fc      	adds	r4, r7, r3
   1598e:	0039      	movs	r1, r7
   15990:	4b19      	ldr	r3, [pc, #100]	; (159f8 <HTTP_DownloadFileTransaction+0xd4>)
   15992:	220a      	movs	r2, #10
   15994:	0018      	movs	r0, r3
   15996:	4b19      	ldr	r3, [pc, #100]	; (159fc <HTTP_DownloadFileTransaction+0xd8>)
   15998:	4798      	blx	r3
   1599a:	0003      	movs	r3, r0
   1599c:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   1599e:	230f      	movs	r3, #15
   159a0:	18fb      	adds	r3, r7, r3
   159a2:	781b      	ldrb	r3, [r3, #0]
   159a4:	2b00      	cmp	r3, #0
   159a6:	d008      	beq.n	159ba <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   159a8:	230f      	movs	r3, #15
   159aa:	18fb      	adds	r3, r7, r3
   159ac:	781a      	ldrb	r2, [r3, #0]
   159ae:	4b14      	ldr	r3, [pc, #80]	; (15a00 <HTTP_DownloadFileTransaction+0xdc>)
   159b0:	0019      	movs	r1, r3
   159b2:	2000      	movs	r0, #0
   159b4:	4b13      	ldr	r3, [pc, #76]	; (15a04 <HTTP_DownloadFileTransaction+0xe0>)
   159b6:	4798      	blx	r3
   159b8:	e003      	b.n	159c2 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   159ba:	4b13      	ldr	r3, [pc, #76]	; (15a08 <HTTP_DownloadFileTransaction+0xe4>)
   159bc:	0018      	movs	r0, r3
   159be:	4b13      	ldr	r3, [pc, #76]	; (15a0c <HTTP_DownloadFileTransaction+0xe8>)
   159c0:	4798      	blx	r3
    }
	
	f_close(&file_object);
   159c2:	4b0d      	ldr	r3, [pc, #52]	; (159f8 <HTTP_DownloadFileTransaction+0xd4>)
   159c4:	0018      	movs	r0, r3
   159c6:	4b12      	ldr	r3, [pc, #72]	; (15a10 <HTTP_DownloadFileTransaction+0xec>)
   159c8:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   159ca:	4b12      	ldr	r3, [pc, #72]	; (15a14 <HTTP_DownloadFileTransaction+0xf0>)
   159cc:	2200      	movs	r2, #0
   159ce:	701a      	strb	r2, [r3, #0]
}
   159d0:	46c0      	nop			; (mov r8, r8)
   159d2:	46bd      	mov	sp, r7
   159d4:	b005      	add	sp, #20
   159d6:	bd90      	pop	{r4, r7, pc}
   159d8:	000208d5 	.word	0x000208d5
   159dc:	20004670 	.word	0x20004670
   159e0:	00030fc9 	.word	0x00030fc9
   159e4:	0001aa41 	.word	0x0001aa41
   159e8:	000149e9 	.word	0x000149e9
   159ec:	00023e91 	.word	0x00023e91
   159f0:	200004b0 	.word	0x200004b0
   159f4:	00035130 	.word	0x00035130
   159f8:	200006e4 	.word	0x200006e4
   159fc:	0002c291 	.word	0x0002c291
   15a00:	0003510c 	.word	0x0003510c
   15a04:	0001c781 	.word	0x0001c781
   15a08:	0003511c 	.word	0x0003511c
   15a0c:	0001c695 	.word	0x0001c695
   15a10:	0002cc91 	.word	0x0002cc91
   15a14:	200004a4 	.word	0x200004a4

00015a18 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   15a18:	b580      	push	{r7, lr}
   15a1a:	af00      	add	r7, sp, #0
    socketDeinit();
   15a1c:	4b18      	ldr	r3, [pc, #96]	; (15a80 <MQTT_InitRoutine+0x68>)
   15a1e:	4798      	blx	r3
    configure_mqtt();
   15a20:	4b18      	ldr	r3, [pc, #96]	; (15a84 <MQTT_InitRoutine+0x6c>)
   15a22:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   15a24:	4a18      	ldr	r2, [pc, #96]	; (15a88 <MQTT_InitRoutine+0x70>)
   15a26:	4b19      	ldr	r3, [pc, #100]	; (15a8c <MQTT_InitRoutine+0x74>)
   15a28:	0011      	movs	r1, r2
   15a2a:	0018      	movs	r0, r3
   15a2c:	4b18      	ldr	r3, [pc, #96]	; (15a90 <MQTT_InitRoutine+0x78>)
   15a2e:	4798      	blx	r3
    socketInit();
   15a30:	4b18      	ldr	r3, [pc, #96]	; (15a94 <MQTT_InitRoutine+0x7c>)
   15a32:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   15a34:	4b18      	ldr	r3, [pc, #96]	; (15a98 <MQTT_InitRoutine+0x80>)
   15a36:	2234      	movs	r2, #52	; 0x34
   15a38:	5c9b      	ldrb	r3, [r3, r2]
   15a3a:	2201      	movs	r2, #1
   15a3c:	4053      	eors	r3, r2
   15a3e:	b2db      	uxtb	r3, r3
   15a40:	2b00      	cmp	r3, #0
   15a42:	d00c      	beq.n	15a5e <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   15a44:	4a15      	ldr	r2, [pc, #84]	; (15a9c <MQTT_InitRoutine+0x84>)
   15a46:	4b14      	ldr	r3, [pc, #80]	; (15a98 <MQTT_InitRoutine+0x80>)
   15a48:	0011      	movs	r1, r2
   15a4a:	0018      	movs	r0, r3
   15a4c:	4b14      	ldr	r3, [pc, #80]	; (15aa0 <MQTT_InitRoutine+0x88>)
   15a4e:	4798      	blx	r3
   15a50:	1e03      	subs	r3, r0, #0
   15a52:	d004      	beq.n	15a5e <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   15a54:	4b13      	ldr	r3, [pc, #76]	; (15aa4 <MQTT_InitRoutine+0x8c>)
   15a56:	0019      	movs	r1, r3
   15a58:	2001      	movs	r0, #1
   15a5a:	4b13      	ldr	r3, [pc, #76]	; (15aa8 <MQTT_InitRoutine+0x90>)
   15a5c:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   15a5e:	4b0e      	ldr	r3, [pc, #56]	; (15a98 <MQTT_InitRoutine+0x80>)
   15a60:	2234      	movs	r2, #52	; 0x34
   15a62:	5c9b      	ldrb	r3, [r3, r2]
   15a64:	2b00      	cmp	r3, #0
   15a66:	d004      	beq.n	15a72 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   15a68:	4b10      	ldr	r3, [pc, #64]	; (15aac <MQTT_InitRoutine+0x94>)
   15a6a:	0019      	movs	r1, r3
   15a6c:	2001      	movs	r0, #1
   15a6e:	4b0e      	ldr	r3, [pc, #56]	; (15aa8 <MQTT_InitRoutine+0x90>)
   15a70:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   15a72:	4b0f      	ldr	r3, [pc, #60]	; (15ab0 <MQTT_InitRoutine+0x98>)
   15a74:	2201      	movs	r2, #1
   15a76:	701a      	strb	r2, [r3, #0]
}
   15a78:	46c0      	nop			; (mov r8, r8)
   15a7a:	46bd      	mov	sp, r7
   15a7c:	bd80      	pop	{r7, pc}
   15a7e:	46c0      	nop			; (mov r8, r8)
   15a80:	00023e91 	.word	0x00023e91
   15a84:	00015721 	.word	0x00015721
   15a88:	000154a9 	.word	0x000154a9
   15a8c:	00015475 	.word	0x00015475
   15a90:	00023ed9 	.word	0x00023ed9
   15a94:	00023e41 	.word	0x00023e41
   15a98:	20000710 	.word	0x20000710
   15a9c:	00034978 	.word	0x00034978
   15aa0:	0002e16d 	.word	0x0002e16d
   15aa4:	00034d88 	.word	0x00034d88
   15aa8:	0001c781 	.word	0x0001c781
   15aac:	0003513c 	.word	0x0003513c
   15ab0:	200004a4 	.word	0x200004a4

00015ab4 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   15ab4:	b580      	push	{r7, lr}
   15ab6:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   15ab8:	2000      	movs	r0, #0
   15aba:	4b0a      	ldr	r3, [pc, #40]	; (15ae4 <MQTT_HandleTransactions+0x30>)
   15abc:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   15abe:	4b0a      	ldr	r3, [pc, #40]	; (15ae8 <MQTT_HandleTransactions+0x34>)
   15ac0:	0018      	movs	r0, r3
   15ac2:	4b0a      	ldr	r3, [pc, #40]	; (15aec <MQTT_HandleTransactions+0x38>)
   15ac4:	4798      	blx	r3

    // Check if data has to be sent!
//     MQTT_HandleGameMessages();
//     MQTT_HandleImuMessages();
	MQTT_HandleSensorMessages();
   15ac6:	4b0a      	ldr	r3, [pc, #40]	; (15af0 <MQTT_HandleTransactions+0x3c>)
   15ac8:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   15aca:	4b0a      	ldr	r3, [pc, #40]	; (15af4 <MQTT_HandleTransactions+0x40>)
   15acc:	2234      	movs	r2, #52	; 0x34
   15ace:	5c9b      	ldrb	r3, [r3, r2]
   15ad0:	2b00      	cmp	r3, #0
   15ad2:	d004      	beq.n	15ade <MQTT_HandleTransactions+0x2a>
   15ad4:	4b07      	ldr	r3, [pc, #28]	; (15af4 <MQTT_HandleTransactions+0x40>)
   15ad6:	2164      	movs	r1, #100	; 0x64
   15ad8:	0018      	movs	r0, r3
   15ada:	4b07      	ldr	r3, [pc, #28]	; (15af8 <MQTT_HandleTransactions+0x44>)
   15adc:	4798      	blx	r3
}
   15ade:	46c0      	nop			; (mov r8, r8)
   15ae0:	46bd      	mov	sp, r7
   15ae2:	bd80      	pop	{r7, pc}
   15ae4:	000208d5 	.word	0x000208d5
   15ae8:	20004670 	.word	0x20004670
   15aec:	00030fc9 	.word	0x00030fc9
   15af0:	00015afd 	.word	0x00015afd
   15af4:	20000710 	.word	0x20000710
   15af8:	0002e39d 	.word	0x0002e39d

00015afc <MQTT_HandleSensorMessages>:
//         mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
//     }
// }

static void MQTT_HandleSensorMessages(void)
{
   15afc:	b590      	push	{r4, r7, lr}
   15afe:	b085      	sub	sp, #20
   15b00:	af02      	add	r7, sp, #8
	struct projectDataPacket projectDataVar;
	if (pdPASS == xQueueReceive(xQueueProjectBuffer, &projectDataVar, 0)) {
   15b02:	4b16      	ldr	r3, [pc, #88]	; (15b5c <MQTT_HandleSensorMessages+0x60>)
   15b04:	681b      	ldr	r3, [r3, #0]
   15b06:	0039      	movs	r1, r7
   15b08:	2200      	movs	r2, #0
   15b0a:	0018      	movs	r0, r3
   15b0c:	4b14      	ldr	r3, [pc, #80]	; (15b60 <MQTT_HandleSensorMessages+0x64>)
   15b0e:	4798      	blx	r3
   15b10:	0003      	movs	r3, r0
   15b12:	2b01      	cmp	r3, #1
   15b14:	d11e      	bne.n	15b54 <MQTT_HandleSensorMessages+0x58>
		snprintf(mqtt_msg, 63, "{\"d\":{\"temp\":%d, \"light\": %d, \"pir\": %d}}", projectDataVar.temp, projectDataVar.light, projectDataVar.pir);
   15b16:	003b      	movs	r3, r7
   15b18:	881b      	ldrh	r3, [r3, #0]
   15b1a:	001c      	movs	r4, r3
   15b1c:	003b      	movs	r3, r7
   15b1e:	885b      	ldrh	r3, [r3, #2]
   15b20:	0019      	movs	r1, r3
   15b22:	003b      	movs	r3, r7
   15b24:	889b      	ldrh	r3, [r3, #4]
   15b26:	4a0f      	ldr	r2, [pc, #60]	; (15b64 <MQTT_HandleSensorMessages+0x68>)
   15b28:	480f      	ldr	r0, [pc, #60]	; (15b68 <MQTT_HandleSensorMessages+0x6c>)
   15b2a:	9301      	str	r3, [sp, #4]
   15b2c:	9100      	str	r1, [sp, #0]
   15b2e:	0023      	movs	r3, r4
   15b30:	213f      	movs	r1, #63	; 0x3f
   15b32:	4c0e      	ldr	r4, [pc, #56]	; (15b6c <MQTT_HandleSensorMessages+0x70>)
   15b34:	47a0      	blx	r4
		mqtt_publish(&mqtt_inst, DATA_IN, mqtt_msg, strlen(mqtt_msg), 2, 0);
   15b36:	4b0c      	ldr	r3, [pc, #48]	; (15b68 <MQTT_HandleSensorMessages+0x6c>)
   15b38:	0018      	movs	r0, r3
   15b3a:	4b0d      	ldr	r3, [pc, #52]	; (15b70 <MQTT_HandleSensorMessages+0x74>)
   15b3c:	4798      	blx	r3
   15b3e:	0004      	movs	r4, r0
   15b40:	4a09      	ldr	r2, [pc, #36]	; (15b68 <MQTT_HandleSensorMessages+0x6c>)
   15b42:	490c      	ldr	r1, [pc, #48]	; (15b74 <MQTT_HandleSensorMessages+0x78>)
   15b44:	480c      	ldr	r0, [pc, #48]	; (15b78 <MQTT_HandleSensorMessages+0x7c>)
   15b46:	2300      	movs	r3, #0
   15b48:	9301      	str	r3, [sp, #4]
   15b4a:	2302      	movs	r3, #2
   15b4c:	9300      	str	r3, [sp, #0]
   15b4e:	0023      	movs	r3, r4
   15b50:	4c0a      	ldr	r4, [pc, #40]	; (15b7c <MQTT_HandleSensorMessages+0x80>)
   15b52:	47a0      	blx	r4
	}
}
   15b54:	46c0      	nop			; (mov r8, r8)
   15b56:	46bd      	mov	sp, r7
   15b58:	b003      	add	sp, #12
   15b5a:	bd90      	pop	{r4, r7, pc}
   15b5c:	200004ac 	.word	0x200004ac
   15b60:	00019895 	.word	0x00019895
   15b64:	00035158 	.word	0x00035158
   15b68:	20000030 	.word	0x20000030
   15b6c:	000333f9 	.word	0x000333f9
   15b70:	0003353b 	.word	0x0003353b
   15b74:	00035028 	.word	0x00035028
   15b78:	20000710 	.word	0x20000710
   15b7c:	0002e2e9 	.word	0x0002e2e9

00015b80 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   15b80:	b590      	push	{r4, r7, lr}
   15b82:	b08d      	sub	sp, #52	; 0x34
   15b84:	af02      	add	r7, sp, #8
   15b86:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   15b88:	2064      	movs	r0, #100	; 0x64
   15b8a:	4b60      	ldr	r3, [pc, #384]	; (15d0c <vWifiTask+0x18c>)
   15b8c:	4798      	blx	r3
    init_state();
   15b8e:	4b60      	ldr	r3, [pc, #384]	; (15d10 <vWifiTask+0x190>)
   15b90:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   15b92:	2200      	movs	r2, #0
   15b94:	2104      	movs	r1, #4
   15b96:	2005      	movs	r0, #5
   15b98:	4b5e      	ldr	r3, [pc, #376]	; (15d14 <vWifiTask+0x194>)
   15b9a:	4798      	blx	r3
   15b9c:	0002      	movs	r2, r0
   15b9e:	4b5e      	ldr	r3, [pc, #376]	; (15d18 <vWifiTask+0x198>)
   15ba0:	601a      	str	r2, [r3, #0]
//     xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
//     xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
//     xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
	xQueueProjectBuffer = xQueueCreate(5, sizeof(struct projectDataPacket));
   15ba2:	2200      	movs	r2, #0
   15ba4:	2106      	movs	r1, #6
   15ba6:	2005      	movs	r0, #5
   15ba8:	4b5a      	ldr	r3, [pc, #360]	; (15d14 <vWifiTask+0x194>)
   15baa:	4798      	blx	r3
   15bac:	0002      	movs	r2, r0
   15bae:	4b5b      	ldr	r3, [pc, #364]	; (15d1c <vWifiTask+0x19c>)
   15bb0:	601a      	str	r2, [r3, #0]

//     if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
//         SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
//     }
	if (xQueueWifiState == NULL || xQueueProjectBuffer == NULL) {
   15bb2:	4b59      	ldr	r3, [pc, #356]	; (15d18 <vWifiTask+0x198>)
   15bb4:	681b      	ldr	r3, [r3, #0]
   15bb6:	2b00      	cmp	r3, #0
   15bb8:	d003      	beq.n	15bc2 <vWifiTask+0x42>
   15bba:	4b58      	ldr	r3, [pc, #352]	; (15d1c <vWifiTask+0x19c>)
   15bbc:	681b      	ldr	r3, [r3, #0]
   15bbe:	2b00      	cmp	r3, #0
   15bc0:	d103      	bne.n	15bca <vWifiTask+0x4a>
		SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   15bc2:	4b57      	ldr	r3, [pc, #348]	; (15d20 <vWifiTask+0x1a0>)
   15bc4:	0018      	movs	r0, r3
   15bc6:	4b57      	ldr	r3, [pc, #348]	; (15d24 <vWifiTask+0x1a4>)
   15bc8:	4798      	blx	r3
	}

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   15bca:	4b57      	ldr	r3, [pc, #348]	; (15d28 <vWifiTask+0x1a8>)
   15bcc:	0018      	movs	r0, r3
   15bce:	4b55      	ldr	r3, [pc, #340]	; (15d24 <vWifiTask+0x1a4>)
   15bd0:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   15bd2:	4b56      	ldr	r3, [pc, #344]	; (15d2c <vWifiTask+0x1ac>)
   15bd4:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   15bd6:	4b56      	ldr	r3, [pc, #344]	; (15d30 <vWifiTask+0x1b0>)
   15bd8:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   15bda:	4b56      	ldr	r3, [pc, #344]	; (15d34 <vWifiTask+0x1b4>)
   15bdc:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   15bde:	4b56      	ldr	r3, [pc, #344]	; (15d38 <vWifiTask+0x1b8>)
   15be0:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   15be2:	4b56      	ldr	r3, [pc, #344]	; (15d3c <vWifiTask+0x1bc>)
   15be4:	4798      	blx	r3
    configure_extint_callbacks();
   15be6:	4b56      	ldr	r3, [pc, #344]	; (15d40 <vWifiTask+0x1c0>)
   15be8:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   15bea:	230c      	movs	r3, #12
   15bec:	18fb      	adds	r3, r7, r3
   15bee:	2218      	movs	r2, #24
   15bf0:	2100      	movs	r1, #0
   15bf2:	0018      	movs	r0, r3
   15bf4:	4b53      	ldr	r3, [pc, #332]	; (15d44 <vWifiTask+0x1c4>)
   15bf6:	4798      	blx	r3

    nm_bsp_init();
   15bf8:	4b53      	ldr	r3, [pc, #332]	; (15d48 <vWifiTask+0x1c8>)
   15bfa:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   15bfc:	230c      	movs	r3, #12
   15bfe:	18fb      	adds	r3, r7, r3
   15c00:	4a52      	ldr	r2, [pc, #328]	; (15d4c <vWifiTask+0x1cc>)
   15c02:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   15c04:	2327      	movs	r3, #39	; 0x27
   15c06:	18fc      	adds	r4, r7, r3
   15c08:	230c      	movs	r3, #12
   15c0a:	18fb      	adds	r3, r7, r3
   15c0c:	0018      	movs	r0, r3
   15c0e:	4b50      	ldr	r3, [pc, #320]	; (15d50 <vWifiTask+0x1d0>)
   15c10:	4798      	blx	r3
   15c12:	0003      	movs	r3, r0
   15c14:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   15c16:	2327      	movs	r3, #39	; 0x27
   15c18:	18fb      	adds	r3, r7, r3
   15c1a:	781b      	ldrb	r3, [r3, #0]
   15c1c:	b25b      	sxtb	r3, r3
   15c1e:	2b00      	cmp	r3, #0
   15c20:	d009      	beq.n	15c36 <vWifiTask+0xb6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   15c22:	2327      	movs	r3, #39	; 0x27
   15c24:	18fb      	adds	r3, r7, r3
   15c26:	2200      	movs	r2, #0
   15c28:	569a      	ldrsb	r2, [r3, r2]
   15c2a:	4b4a      	ldr	r3, [pc, #296]	; (15d54 <vWifiTask+0x1d4>)
   15c2c:	0019      	movs	r1, r3
   15c2e:	2001      	movs	r0, #1
   15c30:	4b49      	ldr	r3, [pc, #292]	; (15d58 <vWifiTask+0x1d8>)
   15c32:	4798      	blx	r3
        while (1) {
   15c34:	e7fe      	b.n	15c34 <vWifiTask+0xb4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   15c36:	4a49      	ldr	r2, [pc, #292]	; (15d5c <vWifiTask+0x1dc>)
   15c38:	4b49      	ldr	r3, [pc, #292]	; (15d60 <vWifiTask+0x1e0>)
   15c3a:	0019      	movs	r1, r3
   15c3c:	2001      	movs	r0, #1
   15c3e:	4b46      	ldr	r3, [pc, #280]	; (15d58 <vWifiTask+0x1d8>)
   15c40:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   15c42:	4b48      	ldr	r3, [pc, #288]	; (15d64 <vWifiTask+0x1e4>)
   15c44:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   15c46:	4a48      	ldr	r2, [pc, #288]	; (15d68 <vWifiTask+0x1e8>)
   15c48:	4b48      	ldr	r3, [pc, #288]	; (15d6c <vWifiTask+0x1ec>)
   15c4a:	0011      	movs	r1, r2
   15c4c:	0018      	movs	r0, r3
   15c4e:	4b48      	ldr	r3, [pc, #288]	; (15d70 <vWifiTask+0x1f0>)
   15c50:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   15c52:	4a48      	ldr	r2, [pc, #288]	; (15d74 <vWifiTask+0x1f4>)
   15c54:	4841      	ldr	r0, [pc, #260]	; (15d5c <vWifiTask+0x1dc>)
   15c56:	23ff      	movs	r3, #255	; 0xff
   15c58:	9300      	str	r3, [sp, #0]
   15c5a:	0013      	movs	r3, r2
   15c5c:	2202      	movs	r2, #2
   15c5e:	2109      	movs	r1, #9
   15c60:	4c45      	ldr	r4, [pc, #276]	; (15d78 <vWifiTask+0x1f8>)
   15c62:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   15c64:	e006      	b.n	15c74 <vWifiTask+0xf4>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   15c66:	2000      	movs	r0, #0
   15c68:	4b44      	ldr	r3, [pc, #272]	; (15d7c <vWifiTask+0x1fc>)
   15c6a:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   15c6c:	4b44      	ldr	r3, [pc, #272]	; (15d80 <vWifiTask+0x200>)
   15c6e:	0018      	movs	r0, r3
   15c70:	4b44      	ldr	r3, [pc, #272]	; (15d84 <vWifiTask+0x204>)
   15c72:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   15c74:	2002      	movs	r0, #2
   15c76:	4b44      	ldr	r3, [pc, #272]	; (15d88 <vWifiTask+0x208>)
   15c78:	4798      	blx	r3
   15c7a:	0003      	movs	r3, r0
   15c7c:	001a      	movs	r2, r3
   15c7e:	2301      	movs	r3, #1
   15c80:	4053      	eors	r3, r2
   15c82:	b2db      	uxtb	r3, r3
   15c84:	2b00      	cmp	r3, #0
   15c86:	d1ee      	bne.n	15c66 <vWifiTask+0xe6>
    }

    vTaskDelay(1000);
   15c88:	23fa      	movs	r3, #250	; 0xfa
   15c8a:	009b      	lsls	r3, r3, #2
   15c8c:	0018      	movs	r0, r3
   15c8e:	4b1f      	ldr	r3, [pc, #124]	; (15d0c <vWifiTask+0x18c>)
   15c90:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   15c92:	4b3e      	ldr	r3, [pc, #248]	; (15d8c <vWifiTask+0x20c>)
   15c94:	2201      	movs	r2, #1
   15c96:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   15c98:	4b3c      	ldr	r3, [pc, #240]	; (15d8c <vWifiTask+0x20c>)
   15c9a:	781b      	ldrb	r3, [r3, #0]
   15c9c:	b25b      	sxtb	r3, r3
   15c9e:	2b01      	cmp	r3, #1
   15ca0:	d00b      	beq.n	15cba <vWifiTask+0x13a>
   15ca2:	dc02      	bgt.n	15caa <vWifiTask+0x12a>
   15ca4:	2b00      	cmp	r3, #0
   15ca6:	d005      	beq.n	15cb4 <vWifiTask+0x134>
   15ca8:	e010      	b.n	15ccc <vWifiTask+0x14c>
   15caa:	2b02      	cmp	r3, #2
   15cac:	d008      	beq.n	15cc0 <vWifiTask+0x140>
   15cae:	2b03      	cmp	r3, #3
   15cb0:	d009      	beq.n	15cc6 <vWifiTask+0x146>
   15cb2:	e00b      	b.n	15ccc <vWifiTask+0x14c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   15cb4:	4b36      	ldr	r3, [pc, #216]	; (15d90 <vWifiTask+0x210>)
   15cb6:	4798      	blx	r3

                break;
   15cb8:	e00c      	b.n	15cd4 <vWifiTask+0x154>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   15cba:	4b36      	ldr	r3, [pc, #216]	; (15d94 <vWifiTask+0x214>)
   15cbc:	4798      	blx	r3
                break;
   15cbe:	e009      	b.n	15cd4 <vWifiTask+0x154>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   15cc0:	4b35      	ldr	r3, [pc, #212]	; (15d98 <vWifiTask+0x218>)
   15cc2:	4798      	blx	r3
                break;
   15cc4:	e006      	b.n	15cd4 <vWifiTask+0x154>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   15cc6:	4b35      	ldr	r3, [pc, #212]	; (15d9c <vWifiTask+0x21c>)
   15cc8:	4798      	blx	r3
                break;
   15cca:	e003      	b.n	15cd4 <vWifiTask+0x154>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   15ccc:	4b2f      	ldr	r3, [pc, #188]	; (15d8c <vWifiTask+0x20c>)
   15cce:	2200      	movs	r2, #0
   15cd0:	701a      	strb	r2, [r3, #0]
                break;
   15cd2:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   15cd4:	230b      	movs	r3, #11
   15cd6:	18fb      	adds	r3, r7, r3
   15cd8:	2200      	movs	r2, #0
   15cda:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   15cdc:	4b0e      	ldr	r3, [pc, #56]	; (15d18 <vWifiTask+0x198>)
   15cde:	681b      	ldr	r3, [r3, #0]
   15ce0:	220b      	movs	r2, #11
   15ce2:	18b9      	adds	r1, r7, r2
   15ce4:	2200      	movs	r2, #0
   15ce6:	0018      	movs	r0, r3
   15ce8:	4b2d      	ldr	r3, [pc, #180]	; (15da0 <vWifiTask+0x220>)
   15cea:	4798      	blx	r3
   15cec:	0003      	movs	r3, r0
   15cee:	2b01      	cmp	r3, #1
   15cf0:	d105      	bne.n	15cfe <vWifiTask+0x17e>
            wifiStateMachine = DataToReceive;  // Update new state
   15cf2:	230b      	movs	r3, #11
   15cf4:	18fb      	adds	r3, r7, r3
   15cf6:	781b      	ldrb	r3, [r3, #0]
   15cf8:	b25a      	sxtb	r2, r3
   15cfa:	4b24      	ldr	r3, [pc, #144]	; (15d8c <vWifiTask+0x20c>)
   15cfc:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   15cfe:	4b29      	ldr	r3, [pc, #164]	; (15da4 <vWifiTask+0x224>)
   15d00:	781b      	ldrb	r3, [r3, #0]
//             LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
//             isPressed = false;

        }

        vTaskDelay(100);
   15d02:	2064      	movs	r0, #100	; 0x64
   15d04:	4b01      	ldr	r3, [pc, #4]	; (15d0c <vWifiTask+0x18c>)
   15d06:	4798      	blx	r3
    while (1) {
   15d08:	e7c6      	b.n	15c98 <vWifiTask+0x118>
   15d0a:	46c0      	nop			; (mov r8, r8)
   15d0c:	0001aa41 	.word	0x0001aa41
   15d10:	00014979 	.word	0x00014979
   15d14:	00018d35 	.word	0x00018d35
   15d18:	200004a8 	.word	0x200004a8
   15d1c:	200004ac 	.word	0x200004ac
   15d20:	00035184 	.word	0x00035184
   15d24:	0001c695 	.word	0x0001c695
   15d28:	000351ac 	.word	0x000351ac
   15d2c:	000153b5 	.word	0x000153b5
   15d30:	000153f1 	.word	0x000153f1
   15d34:	00015721 	.word	0x00015721
   15d38:	000152d1 	.word	0x000152d1
   15d3c:	000157d9 	.word	0x000157d9
   15d40:	00015819 	.word	0x00015819
   15d44:	0003319f 	.word	0x0003319f
   15d48:	0001ec09 	.word	0x0001ec09
   15d4c:	0001517d 	.word	0x0001517d
   15d50:	000206e1 	.word	0x000206e1
   15d54:	000351c8 	.word	0x000351c8
   15d58:	0001c781 	.word	0x0001c781
   15d5c:	00034d54 	.word	0x00034d54
   15d60:	000351f4 	.word	0x000351f4
   15d64:	00023e41 	.word	0x00023e41
   15d68:	000154a9 	.word	0x000154a9
   15d6c:	00015475 	.word	0x00015475
   15d70:	00023ed9 	.word	0x00023ed9
   15d74:	00034d48 	.word	0x00034d48
   15d78:	000208f1 	.word	0x000208f1
   15d7c:	000208d5 	.word	0x000208d5
   15d80:	20004670 	.word	0x20004670
   15d84:	00030fc9 	.word	0x00030fc9
   15d88:	000149e9 	.word	0x000149e9
   15d8c:	200004a4 	.word	0x200004a4
   15d90:	00015a19 	.word	0x00015a19
   15d94:	00015ab5 	.word	0x00015ab5
   15d98:	00015891 	.word	0x00015891
   15d9c:	00015925 	.word	0x00015925
   15da0:	00019895 	.word	0x00019895
   15da4:	20000b48 	.word	0x20000b48

00015da8 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   15da8:	b590      	push	{r4, r7, lr}
   15daa:	b083      	sub	sp, #12
   15dac:	af00      	add	r7, sp, #0
   15dae:	0002      	movs	r2, r0
   15db0:	1dfb      	adds	r3, r7, #7
   15db2:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   15db4:	1dfb      	adds	r3, r7, #7
   15db6:	781b      	ldrb	r3, [r3, #0]
   15db8:	2b03      	cmp	r3, #3
   15dba:	d806      	bhi.n	15dca <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   15dbc:	4b05      	ldr	r3, [pc, #20]	; (15dd4 <WifiHandlerSetState+0x2c>)
   15dbe:	6818      	ldr	r0, [r3, #0]
   15dc0:	1df9      	adds	r1, r7, #7
   15dc2:	2300      	movs	r3, #0
   15dc4:	220a      	movs	r2, #10
   15dc6:	4c04      	ldr	r4, [pc, #16]	; (15dd8 <WifiHandlerSetState+0x30>)
   15dc8:	47a0      	blx	r4
    }
}
   15dca:	46c0      	nop			; (mov r8, r8)
   15dcc:	46bd      	mov	sp, r7
   15dce:	b003      	add	sp, #12
   15dd0:	bd90      	pop	{r4, r7, pc}
   15dd2:	46c0      	nop			; (mov r8, r8)
   15dd4:	200004a8 	.word	0x200004a8
   15dd8:	00018fdd 	.word	0x00018fdd

00015ddc <WifiAddProjectDataToQueue>:
//     int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
//     return error;
// }

int WifiAddProjectDataToQueue(struct projectDataPacket *dataPacket)
{
   15ddc:	b590      	push	{r4, r7, lr}
   15dde:	b085      	sub	sp, #20
   15de0:	af00      	add	r7, sp, #0
   15de2:	6078      	str	r0, [r7, #4]
	int error = xQueueSend(xQueueProjectBuffer, dataPacket, (TickType_t)10);
   15de4:	4b06      	ldr	r3, [pc, #24]	; (15e00 <WifiAddProjectDataToQueue+0x24>)
   15de6:	6818      	ldr	r0, [r3, #0]
   15de8:	6879      	ldr	r1, [r7, #4]
   15dea:	2300      	movs	r3, #0
   15dec:	220a      	movs	r2, #10
   15dee:	4c05      	ldr	r4, [pc, #20]	; (15e04 <WifiAddProjectDataToQueue+0x28>)
   15df0:	47a0      	blx	r4
   15df2:	0003      	movs	r3, r0
   15df4:	60fb      	str	r3, [r7, #12]
	return error;
   15df6:	68fb      	ldr	r3, [r7, #12]
   15df8:	0018      	movs	r0, r3
   15dfa:	46bd      	mov	sp, r7
   15dfc:	b005      	add	sp, #20
   15dfe:	bd90      	pop	{r4, r7, pc}
   15e00:	200004ac 	.word	0x200004ac
   15e04:	00018fdd 	.word	0x00018fdd

00015e08 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   15e08:	b580      	push	{r7, lr}
   15e0a:	b082      	sub	sp, #8
   15e0c:	af00      	add	r7, sp, #0
   15e0e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   15e10:	687b      	ldr	r3, [r7, #4]
   15e12:	2200      	movs	r2, #0
   15e14:	701a      	strb	r2, [r3, #0]
}
   15e16:	46c0      	nop			; (mov r8, r8)
   15e18:	46bd      	mov	sp, r7
   15e1a:	b002      	add	sp, #8
   15e1c:	bd80      	pop	{r7, pc}
	...

00015e20 <system_apb_clock_set_mask>:
{
   15e20:	b580      	push	{r7, lr}
   15e22:	b082      	sub	sp, #8
   15e24:	af00      	add	r7, sp, #0
   15e26:	0002      	movs	r2, r0
   15e28:	6039      	str	r1, [r7, #0]
   15e2a:	1dfb      	adds	r3, r7, #7
   15e2c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   15e2e:	1dfb      	adds	r3, r7, #7
   15e30:	781b      	ldrb	r3, [r3, #0]
   15e32:	2b01      	cmp	r3, #1
   15e34:	d00a      	beq.n	15e4c <system_apb_clock_set_mask+0x2c>
   15e36:	2b02      	cmp	r3, #2
   15e38:	d00f      	beq.n	15e5a <system_apb_clock_set_mask+0x3a>
   15e3a:	2b00      	cmp	r3, #0
   15e3c:	d114      	bne.n	15e68 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   15e3e:	4b0e      	ldr	r3, [pc, #56]	; (15e78 <system_apb_clock_set_mask+0x58>)
   15e40:	4a0d      	ldr	r2, [pc, #52]	; (15e78 <system_apb_clock_set_mask+0x58>)
   15e42:	6991      	ldr	r1, [r2, #24]
   15e44:	683a      	ldr	r2, [r7, #0]
   15e46:	430a      	orrs	r2, r1
   15e48:	619a      	str	r2, [r3, #24]
			break;
   15e4a:	e00f      	b.n	15e6c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   15e4c:	4b0a      	ldr	r3, [pc, #40]	; (15e78 <system_apb_clock_set_mask+0x58>)
   15e4e:	4a0a      	ldr	r2, [pc, #40]	; (15e78 <system_apb_clock_set_mask+0x58>)
   15e50:	69d1      	ldr	r1, [r2, #28]
   15e52:	683a      	ldr	r2, [r7, #0]
   15e54:	430a      	orrs	r2, r1
   15e56:	61da      	str	r2, [r3, #28]
			break;
   15e58:	e008      	b.n	15e6c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   15e5a:	4b07      	ldr	r3, [pc, #28]	; (15e78 <system_apb_clock_set_mask+0x58>)
   15e5c:	4a06      	ldr	r2, [pc, #24]	; (15e78 <system_apb_clock_set_mask+0x58>)
   15e5e:	6a11      	ldr	r1, [r2, #32]
   15e60:	683a      	ldr	r2, [r7, #0]
   15e62:	430a      	orrs	r2, r1
   15e64:	621a      	str	r2, [r3, #32]
			break;
   15e66:	e001      	b.n	15e6c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   15e68:	2317      	movs	r3, #23
   15e6a:	e000      	b.n	15e6e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   15e6c:	2300      	movs	r3, #0
}
   15e6e:	0018      	movs	r0, r3
   15e70:	46bd      	mov	sp, r7
   15e72:	b002      	add	sp, #8
   15e74:	bd80      	pop	{r7, pc}
   15e76:	46c0      	nop			; (mov r8, r8)
   15e78:	40000400 	.word	0x40000400

00015e7c <system_pinmux_get_config_defaults>:
{
   15e7c:	b580      	push	{r7, lr}
   15e7e:	b082      	sub	sp, #8
   15e80:	af00      	add	r7, sp, #0
   15e82:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   15e84:	687b      	ldr	r3, [r7, #4]
   15e86:	2280      	movs	r2, #128	; 0x80
   15e88:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   15e8a:	687b      	ldr	r3, [r7, #4]
   15e8c:	2200      	movs	r2, #0
   15e8e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   15e90:	687b      	ldr	r3, [r7, #4]
   15e92:	2201      	movs	r2, #1
   15e94:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   15e96:	687b      	ldr	r3, [r7, #4]
   15e98:	2200      	movs	r2, #0
   15e9a:	70da      	strb	r2, [r3, #3]
}
   15e9c:	46c0      	nop			; (mov r8, r8)
   15e9e:	46bd      	mov	sp, r7
   15ea0:	b002      	add	sp, #8
   15ea2:	bd80      	pop	{r7, pc}

00015ea4 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   15ea4:	b580      	push	{r7, lr}
   15ea6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   15ea8:	4b05      	ldr	r3, [pc, #20]	; (15ec0 <system_is_debugger_present+0x1c>)
   15eaa:	789b      	ldrb	r3, [r3, #2]
   15eac:	b2db      	uxtb	r3, r3
   15eae:	001a      	movs	r2, r3
   15eb0:	2302      	movs	r3, #2
   15eb2:	4013      	ands	r3, r2
   15eb4:	1e5a      	subs	r2, r3, #1
   15eb6:	4193      	sbcs	r3, r2
   15eb8:	b2db      	uxtb	r3, r3
}
   15eba:	0018      	movs	r0, r3
   15ebc:	46bd      	mov	sp, r7
   15ebe:	bd80      	pop	{r7, pc}
   15ec0:	41002000 	.word	0x41002000

00015ec4 <system_interrupt_enter_critical_section>:
{
   15ec4:	b580      	push	{r7, lr}
   15ec6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   15ec8:	4b02      	ldr	r3, [pc, #8]	; (15ed4 <system_interrupt_enter_critical_section+0x10>)
   15eca:	4798      	blx	r3
}
   15ecc:	46c0      	nop			; (mov r8, r8)
   15ece:	46bd      	mov	sp, r7
   15ed0:	bd80      	pop	{r7, pc}
   15ed2:	46c0      	nop			; (mov r8, r8)
   15ed4:	00024b39 	.word	0x00024b39

00015ed8 <system_interrupt_leave_critical_section>:
{
   15ed8:	b580      	push	{r7, lr}
   15eda:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   15edc:	4b02      	ldr	r3, [pc, #8]	; (15ee8 <system_interrupt_leave_critical_section+0x10>)
   15ede:	4798      	blx	r3
}
   15ee0:	46c0      	nop			; (mov r8, r8)
   15ee2:	46bd      	mov	sp, r7
   15ee4:	bd80      	pop	{r7, pc}
   15ee6:	46c0      	nop			; (mov r8, r8)
   15ee8:	00024b8d 	.word	0x00024b8d

00015eec <system_interrupt_disable>:
{
   15eec:	b580      	push	{r7, lr}
   15eee:	b082      	sub	sp, #8
   15ef0:	af00      	add	r7, sp, #0
   15ef2:	0002      	movs	r2, r0
   15ef4:	1dfb      	adds	r3, r7, #7
   15ef6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   15ef8:	4a07      	ldr	r2, [pc, #28]	; (15f18 <system_interrupt_disable+0x2c>)
   15efa:	1dfb      	adds	r3, r7, #7
   15efc:	781b      	ldrb	r3, [r3, #0]
   15efe:	0019      	movs	r1, r3
   15f00:	231f      	movs	r3, #31
   15f02:	400b      	ands	r3, r1
   15f04:	2101      	movs	r1, #1
   15f06:	4099      	lsls	r1, r3
   15f08:	000b      	movs	r3, r1
   15f0a:	0019      	movs	r1, r3
   15f0c:	2380      	movs	r3, #128	; 0x80
   15f0e:	50d1      	str	r1, [r2, r3]
}
   15f10:	46c0      	nop			; (mov r8, r8)
   15f12:	46bd      	mov	sp, r7
   15f14:	b002      	add	sp, #8
   15f16:	bd80      	pop	{r7, pc}
   15f18:	e000e100 	.word	0xe000e100

00015f1c <i2c_master_is_syncing>:
{
   15f1c:	b580      	push	{r7, lr}
   15f1e:	b084      	sub	sp, #16
   15f20:	af00      	add	r7, sp, #0
   15f22:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   15f24:	687b      	ldr	r3, [r7, #4]
   15f26:	681b      	ldr	r3, [r3, #0]
   15f28:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   15f2a:	68fb      	ldr	r3, [r7, #12]
   15f2c:	69db      	ldr	r3, [r3, #28]
   15f2e:	2207      	movs	r2, #7
   15f30:	4013      	ands	r3, r2
   15f32:	1e5a      	subs	r2, r3, #1
   15f34:	4193      	sbcs	r3, r2
   15f36:	b2db      	uxtb	r3, r3
}
   15f38:	0018      	movs	r0, r3
   15f3a:	46bd      	mov	sp, r7
   15f3c:	b004      	add	sp, #16
   15f3e:	bd80      	pop	{r7, pc}

00015f40 <_i2c_master_wait_for_sync>:
{
   15f40:	b580      	push	{r7, lr}
   15f42:	b082      	sub	sp, #8
   15f44:	af00      	add	r7, sp, #0
   15f46:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   15f48:	46c0      	nop			; (mov r8, r8)
   15f4a:	687b      	ldr	r3, [r7, #4]
   15f4c:	0018      	movs	r0, r3
   15f4e:	4b04      	ldr	r3, [pc, #16]	; (15f60 <_i2c_master_wait_for_sync+0x20>)
   15f50:	4798      	blx	r3
   15f52:	1e03      	subs	r3, r0, #0
   15f54:	d1f9      	bne.n	15f4a <_i2c_master_wait_for_sync+0xa>
}
   15f56:	46c0      	nop			; (mov r8, r8)
   15f58:	46bd      	mov	sp, r7
   15f5a:	b002      	add	sp, #8
   15f5c:	bd80      	pop	{r7, pc}
   15f5e:	46c0      	nop			; (mov r8, r8)
   15f60:	00015f1d 	.word	0x00015f1d

00015f64 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   15f64:	b580      	push	{r7, lr}
   15f66:	b084      	sub	sp, #16
   15f68:	af00      	add	r7, sp, #0
   15f6a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15f6c:	687b      	ldr	r3, [r7, #4]
   15f6e:	681b      	ldr	r3, [r3, #0]
   15f70:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   15f72:	687b      	ldr	r3, [r7, #4]
   15f74:	681b      	ldr	r3, [r3, #0]
   15f76:	0018      	movs	r0, r3
   15f78:	4b0d      	ldr	r3, [pc, #52]	; (15fb0 <i2c_master_disable+0x4c>)
   15f7a:	4798      	blx	r3
   15f7c:	0003      	movs	r3, r0
   15f7e:	0018      	movs	r0, r3
   15f80:	4b0c      	ldr	r3, [pc, #48]	; (15fb4 <i2c_master_disable+0x50>)
   15f82:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   15f84:	687b      	ldr	r3, [r7, #4]
   15f86:	0018      	movs	r0, r3
   15f88:	4b0b      	ldr	r3, [pc, #44]	; (15fb8 <i2c_master_disable+0x54>)
   15f8a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   15f8c:	68fb      	ldr	r3, [r7, #12]
   15f8e:	2283      	movs	r2, #131	; 0x83
   15f90:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   15f92:	68fb      	ldr	r3, [r7, #12]
   15f94:	2283      	movs	r2, #131	; 0x83
   15f96:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   15f98:	68fb      	ldr	r3, [r7, #12]
   15f9a:	681b      	ldr	r3, [r3, #0]
   15f9c:	2202      	movs	r2, #2
   15f9e:	4393      	bics	r3, r2
   15fa0:	001a      	movs	r2, r3
   15fa2:	68fb      	ldr	r3, [r7, #12]
   15fa4:	601a      	str	r2, [r3, #0]

}
   15fa6:	46c0      	nop			; (mov r8, r8)
   15fa8:	46bd      	mov	sp, r7
   15faa:	b004      	add	sp, #16
   15fac:	bd80      	pop	{r7, pc}
   15fae:	46c0      	nop			; (mov r8, r8)
   15fb0:	0002600d 	.word	0x0002600d
   15fb4:	00015eed 	.word	0x00015eed
   15fb8:	00015f41 	.word	0x00015f41

00015fbc <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   15fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fbe:	b097      	sub	sp, #92	; 0x5c
   15fc0:	af00      	add	r7, sp, #0
   15fc2:	6178      	str	r0, [r7, #20]
   15fc4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   15fc6:	2300      	movs	r3, #0
   15fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   15fca:	2300      	movs	r3, #0
   15fcc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   15fce:	2300      	movs	r3, #0
   15fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   15fd2:	233b      	movs	r3, #59	; 0x3b
   15fd4:	2210      	movs	r2, #16
   15fd6:	4694      	mov	ip, r2
   15fd8:	44bc      	add	ip, r7
   15fda:	4463      	add	r3, ip
   15fdc:	2200      	movs	r2, #0
   15fde:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   15fe0:	697b      	ldr	r3, [r7, #20]
   15fe2:	681b      	ldr	r3, [r3, #0]
   15fe4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   15fe6:	697b      	ldr	r3, [r7, #20]
   15fe8:	681b      	ldr	r3, [r3, #0]
   15fea:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   15fec:	2323      	movs	r3, #35	; 0x23
   15fee:	2210      	movs	r2, #16
   15ff0:	18ba      	adds	r2, r7, r2
   15ff2:	18d4      	adds	r4, r2, r3
   15ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   15ff6:	0018      	movs	r0, r3
   15ff8:	4bc0      	ldr	r3, [pc, #768]	; (162fc <_i2c_master_set_config+0x340>)
   15ffa:	4798      	blx	r3
   15ffc:	0003      	movs	r3, r0
   15ffe:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   16000:	230c      	movs	r3, #12
   16002:	2210      	movs	r2, #16
   16004:	4694      	mov	ip, r2
   16006:	44bc      	add	ip, r7
   16008:	4463      	add	r3, ip
   1600a:	0018      	movs	r0, r3
   1600c:	4bbc      	ldr	r3, [pc, #752]	; (16300 <_i2c_master_set_config+0x344>)
   1600e:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   16010:	693b      	ldr	r3, [r7, #16]
   16012:	69db      	ldr	r3, [r3, #28]
   16014:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   16016:	693b      	ldr	r3, [r7, #16]
   16018:	6a1b      	ldr	r3, [r3, #32]
   1601a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1601c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1601e:	2b00      	cmp	r3, #0
   16020:	d106      	bne.n	16030 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   16022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   16024:	2100      	movs	r1, #0
   16026:	0018      	movs	r0, r3
   16028:	4bb6      	ldr	r3, [pc, #728]	; (16304 <_i2c_master_set_config+0x348>)
   1602a:	4798      	blx	r3
   1602c:	0003      	movs	r3, r0
   1602e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   16030:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16032:	b2da      	uxtb	r2, r3
   16034:	230c      	movs	r3, #12
   16036:	2110      	movs	r1, #16
   16038:	468c      	mov	ip, r1
   1603a:	44bc      	add	ip, r7
   1603c:	4463      	add	r3, ip
   1603e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   16040:	230c      	movs	r3, #12
   16042:	2210      	movs	r2, #16
   16044:	4694      	mov	ip, r2
   16046:	44bc      	add	ip, r7
   16048:	4463      	add	r3, ip
   1604a:	2202      	movs	r2, #2
   1604c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1604e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   16050:	0c1b      	lsrs	r3, r3, #16
   16052:	b2db      	uxtb	r3, r3
   16054:	220c      	movs	r2, #12
   16056:	2110      	movs	r1, #16
   16058:	468c      	mov	ip, r1
   1605a:	44bc      	add	ip, r7
   1605c:	4462      	add	r2, ip
   1605e:	0011      	movs	r1, r2
   16060:	0018      	movs	r0, r3
   16062:	4ba9      	ldr	r3, [pc, #676]	; (16308 <_i2c_master_set_config+0x34c>)
   16064:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   16066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   16068:	2b00      	cmp	r3, #0
   1606a:	d106      	bne.n	1607a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1606c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1606e:	2101      	movs	r1, #1
   16070:	0018      	movs	r0, r3
   16072:	4ba4      	ldr	r3, [pc, #656]	; (16304 <_i2c_master_set_config+0x348>)
   16074:	4798      	blx	r3
   16076:	0003      	movs	r3, r0
   16078:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1607a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1607c:	b2da      	uxtb	r2, r3
   1607e:	230c      	movs	r3, #12
   16080:	2110      	movs	r1, #16
   16082:	468c      	mov	ip, r1
   16084:	44bc      	add	ip, r7
   16086:	4463      	add	r3, ip
   16088:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1608a:	230c      	movs	r3, #12
   1608c:	2210      	movs	r2, #16
   1608e:	4694      	mov	ip, r2
   16090:	44bc      	add	ip, r7
   16092:	4463      	add	r3, ip
   16094:	2202      	movs	r2, #2
   16096:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   16098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1609a:	0c1b      	lsrs	r3, r3, #16
   1609c:	b2db      	uxtb	r3, r3
   1609e:	220c      	movs	r2, #12
   160a0:	2110      	movs	r1, #16
   160a2:	468c      	mov	ip, r1
   160a4:	44bc      	add	ip, r7
   160a6:	4462      	add	r2, ip
   160a8:	0011      	movs	r1, r2
   160aa:	0018      	movs	r0, r3
   160ac:	4b96      	ldr	r3, [pc, #600]	; (16308 <_i2c_master_set_config+0x34c>)
   160ae:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   160b0:	693b      	ldr	r3, [r7, #16]
   160b2:	8a9a      	ldrh	r2, [r3, #20]
   160b4:	697b      	ldr	r3, [r7, #20]
   160b6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   160b8:	693b      	ldr	r3, [r7, #16]
   160ba:	8ada      	ldrh	r2, [r3, #22]
   160bc:	697b      	ldr	r3, [r7, #20]
   160be:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   160c0:	693b      	ldr	r3, [r7, #16]
   160c2:	7e1b      	ldrb	r3, [r3, #24]
   160c4:	2b00      	cmp	r3, #0
   160c6:	d103      	bne.n	160d0 <_i2c_master_set_config+0x114>
   160c8:	4b90      	ldr	r3, [pc, #576]	; (1630c <_i2c_master_set_config+0x350>)
   160ca:	4798      	blx	r3
   160cc:	1e03      	subs	r3, r0, #0
   160ce:	d002      	beq.n	160d6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   160d0:	2380      	movs	r3, #128	; 0x80
   160d2:	657b      	str	r3, [r7, #84]	; 0x54
   160d4:	e001      	b.n	160da <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   160d6:	2300      	movs	r3, #0
   160d8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   160da:	693b      	ldr	r3, [r7, #16]
   160dc:	691b      	ldr	r3, [r3, #16]
   160de:	2b00      	cmp	r3, #0
   160e0:	d004      	beq.n	160ec <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   160e2:	693b      	ldr	r3, [r7, #16]
   160e4:	691b      	ldr	r3, [r3, #16]
   160e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   160e8:	4313      	orrs	r3, r2
   160ea:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   160ec:	693b      	ldr	r3, [r7, #16]
   160ee:	689b      	ldr	r3, [r3, #8]
   160f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   160f2:	4313      	orrs	r3, r2
   160f4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   160f6:	693b      	ldr	r3, [r7, #16]
   160f8:	2224      	movs	r2, #36	; 0x24
   160fa:	5c9b      	ldrb	r3, [r3, r2]
   160fc:	2b00      	cmp	r3, #0
   160fe:	d004      	beq.n	1610a <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   16100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16102:	2280      	movs	r2, #128	; 0x80
   16104:	05d2      	lsls	r2, r2, #23
   16106:	4313      	orrs	r3, r2
   16108:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1610a:	693b      	ldr	r3, [r7, #16]
   1610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1610e:	2b00      	cmp	r3, #0
   16110:	d004      	beq.n	1611c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   16112:	693b      	ldr	r3, [r7, #16]
   16114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16116:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   16118:	4313      	orrs	r3, r2
   1611a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1611c:	693b      	ldr	r3, [r7, #16]
   1611e:	222c      	movs	r2, #44	; 0x2c
   16120:	5c9b      	ldrb	r3, [r3, r2]
   16122:	2b00      	cmp	r3, #0
   16124:	d105      	bne.n	16132 <_i2c_master_set_config+0x176>
   16126:	693b      	ldr	r3, [r7, #16]
   16128:	689a      	ldr	r2, [r3, #8]
   1612a:	2380      	movs	r3, #128	; 0x80
   1612c:	049b      	lsls	r3, r3, #18
   1612e:	429a      	cmp	r2, r3
   16130:	d104      	bne.n	1613c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   16132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16134:	2280      	movs	r2, #128	; 0x80
   16136:	0512      	lsls	r2, r2, #20
   16138:	4313      	orrs	r3, r2
   1613a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1613c:	693b      	ldr	r3, [r7, #16]
   1613e:	222d      	movs	r2, #45	; 0x2d
   16140:	5c9b      	ldrb	r3, [r3, r2]
   16142:	2b00      	cmp	r3, #0
   16144:	d004      	beq.n	16150 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   16146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   16148:	2280      	movs	r2, #128	; 0x80
   1614a:	0412      	lsls	r2, r2, #16
   1614c:	4313      	orrs	r3, r2
   1614e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   16150:	693b      	ldr	r3, [r7, #16]
   16152:	222e      	movs	r2, #46	; 0x2e
   16154:	5c9b      	ldrb	r3, [r3, r2]
   16156:	2b00      	cmp	r3, #0
   16158:	d004      	beq.n	16164 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1615a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1615c:	2280      	movs	r2, #128	; 0x80
   1615e:	03d2      	lsls	r2, r2, #15
   16160:	4313      	orrs	r3, r2
   16162:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   16164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16166:	681a      	ldr	r2, [r3, #0]
   16168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1616a:	431a      	orrs	r2, r3
   1616c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1616e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   16170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   16172:	2280      	movs	r2, #128	; 0x80
   16174:	0052      	lsls	r2, r2, #1
   16176:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   16178:	2323      	movs	r3, #35	; 0x23
   1617a:	2210      	movs	r2, #16
   1617c:	4694      	mov	ip, r2
   1617e:	44bc      	add	ip, r7
   16180:	4463      	add	r3, ip
   16182:	781b      	ldrb	r3, [r3, #0]
   16184:	3314      	adds	r3, #20
   16186:	b2db      	uxtb	r3, r3
   16188:	0018      	movs	r0, r3
   1618a:	4b61      	ldr	r3, [pc, #388]	; (16310 <_i2c_master_set_config+0x354>)
   1618c:	4798      	blx	r3
   1618e:	0003      	movs	r3, r0
   16190:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   16192:	693b      	ldr	r3, [r7, #16]
   16194:	681b      	ldr	r3, [r3, #0]
   16196:	22fa      	movs	r2, #250	; 0xfa
   16198:	0092      	lsls	r2, r2, #2
   1619a:	4353      	muls	r3, r2
   1619c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1619e:	693b      	ldr	r3, [r7, #16]
   161a0:	685b      	ldr	r3, [r3, #4]
   161a2:	22fa      	movs	r2, #250	; 0xfa
   161a4:	0092      	lsls	r2, r2, #2
   161a6:	4353      	muls	r3, r2
   161a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   161aa:	693b      	ldr	r3, [r7, #16]
   161ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   161ae:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   161b0:	4b58      	ldr	r3, [pc, #352]	; (16314 <_i2c_master_set_config+0x358>)
   161b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   161b4:	4798      	blx	r3
   161b6:	0005      	movs	r5, r0
   161b8:	000e      	movs	r6, r1
   161ba:	4b56      	ldr	r3, [pc, #344]	; (16314 <_i2c_master_set_config+0x358>)
   161bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   161be:	4798      	blx	r3
   161c0:	60b8      	str	r0, [r7, #8]
   161c2:	60f9      	str	r1, [r7, #12]
   161c4:	4b53      	ldr	r3, [pc, #332]	; (16314 <_i2c_master_set_config+0x358>)
   161c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   161c8:	4798      	blx	r3
   161ca:	4c53      	ldr	r4, [pc, #332]	; (16318 <_i2c_master_set_config+0x35c>)
   161cc:	4a53      	ldr	r2, [pc, #332]	; (1631c <_i2c_master_set_config+0x360>)
   161ce:	4b54      	ldr	r3, [pc, #336]	; (16320 <_i2c_master_set_config+0x364>)
   161d0:	47a0      	blx	r4
   161d2:	0003      	movs	r3, r0
   161d4:	000c      	movs	r4, r1
   161d6:	603b      	str	r3, [r7, #0]
   161d8:	607c      	str	r4, [r7, #4]
   161da:	4b4e      	ldr	r3, [pc, #312]	; (16314 <_i2c_master_set_config+0x358>)
   161dc:	6a38      	ldr	r0, [r7, #32]
   161de:	4798      	blx	r3
   161e0:	0002      	movs	r2, r0
   161e2:	000b      	movs	r3, r1
   161e4:	4c4c      	ldr	r4, [pc, #304]	; (16318 <_i2c_master_set_config+0x35c>)
   161e6:	6838      	ldr	r0, [r7, #0]
   161e8:	6879      	ldr	r1, [r7, #4]
   161ea:	47a0      	blx	r4
   161ec:	0003      	movs	r3, r0
   161ee:	000c      	movs	r4, r1
   161f0:	0018      	movs	r0, r3
   161f2:	0021      	movs	r1, r4
   161f4:	4c4b      	ldr	r4, [pc, #300]	; (16324 <_i2c_master_set_config+0x368>)
   161f6:	2200      	movs	r2, #0
   161f8:	4b4b      	ldr	r3, [pc, #300]	; (16328 <_i2c_master_set_config+0x36c>)
   161fa:	47a0      	blx	r4
   161fc:	0003      	movs	r3, r0
   161fe:	000c      	movs	r4, r1
   16200:	001a      	movs	r2, r3
   16202:	0023      	movs	r3, r4
   16204:	4c44      	ldr	r4, [pc, #272]	; (16318 <_i2c_master_set_config+0x35c>)
   16206:	68b8      	ldr	r0, [r7, #8]
   16208:	68f9      	ldr	r1, [r7, #12]
   1620a:	47a0      	blx	r4
   1620c:	0003      	movs	r3, r0
   1620e:	000c      	movs	r4, r1
   16210:	001a      	movs	r2, r3
   16212:	0023      	movs	r3, r4
   16214:	4c45      	ldr	r4, [pc, #276]	; (1632c <_i2c_master_set_config+0x370>)
   16216:	0028      	movs	r0, r5
   16218:	0031      	movs	r1, r6
   1621a:	47a0      	blx	r4
   1621c:	0003      	movs	r3, r0
   1621e:	000c      	movs	r4, r1
   16220:	001d      	movs	r5, r3
   16222:	0026      	movs	r6, r4
   16224:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16226:	005a      	lsls	r2, r3, #1
   16228:	4b3a      	ldr	r3, [pc, #232]	; (16314 <_i2c_master_set_config+0x358>)
   1622a:	0010      	movs	r0, r2
   1622c:	4798      	blx	r3
   1622e:	0002      	movs	r2, r0
   16230:	000b      	movs	r3, r1
   16232:	4c3c      	ldr	r4, [pc, #240]	; (16324 <_i2c_master_set_config+0x368>)
   16234:	0028      	movs	r0, r5
   16236:	0031      	movs	r1, r6
   16238:	47a0      	blx	r4
   1623a:	0003      	movs	r3, r0
   1623c:	000c      	movs	r4, r1
   1623e:	0018      	movs	r0, r3
   16240:	0021      	movs	r1, r4
   16242:	4c3a      	ldr	r4, [pc, #232]	; (1632c <_i2c_master_set_config+0x370>)
   16244:	2200      	movs	r2, #0
   16246:	4b3a      	ldr	r3, [pc, #232]	; (16330 <_i2c_master_set_config+0x374>)
   16248:	47a0      	blx	r4
   1624a:	0003      	movs	r3, r0
   1624c:	000c      	movs	r4, r1
   1624e:	001d      	movs	r5, r3
   16250:	0026      	movs	r6, r4
   16252:	6abb      	ldr	r3, [r7, #40]	; 0x28
   16254:	005a      	lsls	r2, r3, #1
   16256:	4b2f      	ldr	r3, [pc, #188]	; (16314 <_i2c_master_set_config+0x358>)
   16258:	0010      	movs	r0, r2
   1625a:	4798      	blx	r3
   1625c:	0002      	movs	r2, r0
   1625e:	000b      	movs	r3, r1
   16260:	4c34      	ldr	r4, [pc, #208]	; (16334 <_i2c_master_set_config+0x378>)
   16262:	0028      	movs	r0, r5
   16264:	0031      	movs	r1, r6
   16266:	47a0      	blx	r4
   16268:	0003      	movs	r3, r0
   1626a:	000c      	movs	r4, r1
   1626c:	0019      	movs	r1, r3
   1626e:	0022      	movs	r2, r4
   16270:	4b31      	ldr	r3, [pc, #196]	; (16338 <_i2c_master_set_config+0x37c>)
   16272:	0008      	movs	r0, r1
   16274:	0011      	movs	r1, r2
   16276:	4798      	blx	r3
   16278:	0003      	movs	r3, r0
   1627a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   1627c:	693b      	ldr	r3, [r7, #16]
   1627e:	689a      	ldr	r2, [r3, #8]
   16280:	2380      	movs	r3, #128	; 0x80
   16282:	049b      	lsls	r3, r3, #18
   16284:	429a      	cmp	r2, r3
   16286:	d16a      	bne.n	1635e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   16288:	4b22      	ldr	r3, [pc, #136]	; (16314 <_i2c_master_set_config+0x358>)
   1628a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1628c:	4798      	blx	r3
   1628e:	4c25      	ldr	r4, [pc, #148]	; (16324 <_i2c_master_set_config+0x368>)
   16290:	0002      	movs	r2, r0
   16292:	000b      	movs	r3, r1
   16294:	47a0      	blx	r4
   16296:	0003      	movs	r3, r0
   16298:	000c      	movs	r4, r1
   1629a:	001d      	movs	r5, r3
   1629c:	0026      	movs	r6, r4
   1629e:	4b1d      	ldr	r3, [pc, #116]	; (16314 <_i2c_master_set_config+0x358>)
   162a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
   162a2:	4798      	blx	r3
   162a4:	4c1c      	ldr	r4, [pc, #112]	; (16318 <_i2c_master_set_config+0x35c>)
   162a6:	2200      	movs	r2, #0
   162a8:	4b24      	ldr	r3, [pc, #144]	; (1633c <_i2c_master_set_config+0x380>)
   162aa:	47a0      	blx	r4
   162ac:	0003      	movs	r3, r0
   162ae:	000c      	movs	r4, r1
   162b0:	001a      	movs	r2, r3
   162b2:	0023      	movs	r3, r4
   162b4:	4c1f      	ldr	r4, [pc, #124]	; (16334 <_i2c_master_set_config+0x378>)
   162b6:	0028      	movs	r0, r5
   162b8:	0031      	movs	r1, r6
   162ba:	47a0      	blx	r4
   162bc:	0003      	movs	r3, r0
   162be:	000c      	movs	r4, r1
   162c0:	0018      	movs	r0, r3
   162c2:	0021      	movs	r1, r4
   162c4:	4c19      	ldr	r4, [pc, #100]	; (1632c <_i2c_master_set_config+0x370>)
   162c6:	2200      	movs	r2, #0
   162c8:	4b19      	ldr	r3, [pc, #100]	; (16330 <_i2c_master_set_config+0x374>)
   162ca:	47a0      	blx	r4
   162cc:	0003      	movs	r3, r0
   162ce:	000c      	movs	r4, r1
   162d0:	0019      	movs	r1, r3
   162d2:	0022      	movs	r2, r4
   162d4:	4b18      	ldr	r3, [pc, #96]	; (16338 <_i2c_master_set_config+0x37c>)
   162d6:	0008      	movs	r0, r1
   162d8:	0011      	movs	r1, r2
   162da:	4798      	blx	r3
   162dc:	0003      	movs	r3, r0
   162de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   162e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   162e2:	2b00      	cmp	r3, #0
   162e4:	d02e      	beq.n	16344 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   162e6:	4b16      	ldr	r3, [pc, #88]	; (16340 <_i2c_master_set_config+0x384>)
   162e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   162ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   162ec:	4798      	blx	r3
   162ee:	0003      	movs	r3, r0
   162f0:	1e9a      	subs	r2, r3, #2
   162f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   162f4:	1ad3      	subs	r3, r2, r3
   162f6:	653b      	str	r3, [r7, #80]	; 0x50
   162f8:	e031      	b.n	1635e <_i2c_master_set_config+0x3a2>
   162fa:	46c0      	nop			; (mov r8, r8)
   162fc:	00025f3d 	.word	0x00025f3d
   16300:	00015e7d 	.word	0x00015e7d
   16304:	00025d81 	.word	0x00025d81
   16308:	00028b2d 	.word	0x00028b2d
   1630c:	00015ea5 	.word	0x00015ea5
   16310:	000288f1 	.word	0x000288f1
   16314:	00032f2d 	.word	0x00032f2d
   16318:	00032315 	.word	0x00032315
   1631c:	e826d695 	.word	0xe826d695
   16320:	3e112e0b 	.word	0x3e112e0b
   16324:	0003168d 	.word	0x0003168d
   16328:	40240000 	.word	0x40240000
   1632c:	00032815 	.word	0x00032815
   16330:	3ff00000 	.word	0x3ff00000
   16334:	00031cad 	.word	0x00031cad
   16338:	00032e41 	.word	0x00032e41
   1633c:	40080000 	.word	0x40080000
   16340:	0003130d 	.word	0x0003130d
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   16344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16346:	005a      	lsls	r2, r3, #1
   16348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1634a:	18d3      	adds	r3, r2, r3
   1634c:	1e5a      	subs	r2, r3, #1
   1634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16350:	0059      	lsls	r1, r3, #1
   16352:	4b1d      	ldr	r3, [pc, #116]	; (163c8 <_i2c_master_set_config+0x40c>)
   16354:	0010      	movs	r0, r2
   16356:	4798      	blx	r3
   16358:	0003      	movs	r3, r0
   1635a:	3b01      	subs	r3, #1
   1635c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1635e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16360:	2bff      	cmp	r3, #255	; 0xff
   16362:	dc08      	bgt.n	16376 <_i2c_master_set_config+0x3ba>
   16364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16366:	2b00      	cmp	r3, #0
   16368:	db05      	blt.n	16376 <_i2c_master_set_config+0x3ba>
   1636a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1636c:	2bff      	cmp	r3, #255	; 0xff
   1636e:	dc02      	bgt.n	16376 <_i2c_master_set_config+0x3ba>
   16370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   16372:	2b00      	cmp	r3, #0
   16374:	da06      	bge.n	16384 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   16376:	233b      	movs	r3, #59	; 0x3b
   16378:	2210      	movs	r2, #16
   1637a:	4694      	mov	ip, r2
   1637c:	44bc      	add	ip, r7
   1637e:	4463      	add	r3, ip
   16380:	2240      	movs	r2, #64	; 0x40
   16382:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   16384:	233b      	movs	r3, #59	; 0x3b
   16386:	2210      	movs	r2, #16
   16388:	4694      	mov	ip, r2
   1638a:	44bc      	add	ip, r7
   1638c:	4463      	add	r3, ip
   1638e:	781b      	ldrb	r3, [r3, #0]
   16390:	2b40      	cmp	r3, #64	; 0x40
   16392:	d00e      	beq.n	163b2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   16394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   16396:	22ff      	movs	r2, #255	; 0xff
   16398:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1639a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1639c:	041b      	lsls	r3, r3, #16
   1639e:	0019      	movs	r1, r3
   163a0:	23ff      	movs	r3, #255	; 0xff
   163a2:	041b      	lsls	r3, r3, #16
   163a4:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   163a6:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   163a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   163aa:	0612      	lsls	r2, r2, #24
   163ac:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   163ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   163b0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   163b2:	233b      	movs	r3, #59	; 0x3b
   163b4:	2210      	movs	r2, #16
   163b6:	4694      	mov	ip, r2
   163b8:	44bc      	add	ip, r7
   163ba:	4463      	add	r3, ip
   163bc:	781b      	ldrb	r3, [r3, #0]
}
   163be:	0018      	movs	r0, r3
   163c0:	46bd      	mov	sp, r7
   163c2:	b017      	add	sp, #92	; 0x5c
   163c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   163c6:	46c0      	nop			; (mov r8, r8)
   163c8:	0003130d 	.word	0x0003130d

000163cc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   163cc:	b590      	push	{r4, r7, lr}
   163ce:	b08b      	sub	sp, #44	; 0x2c
   163d0:	af00      	add	r7, sp, #0
   163d2:	60f8      	str	r0, [r7, #12]
   163d4:	60b9      	str	r1, [r7, #8]
   163d6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   163d8:	68fb      	ldr	r3, [r7, #12]
   163da:	68ba      	ldr	r2, [r7, #8]
   163dc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   163de:	68fb      	ldr	r3, [r7, #12]
   163e0:	681b      	ldr	r3, [r3, #0]
   163e2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   163e4:	68fb      	ldr	r3, [r7, #12]
   163e6:	681b      	ldr	r3, [r3, #0]
   163e8:	0018      	movs	r0, r3
   163ea:	4b3b      	ldr	r3, [pc, #236]	; (164d8 <i2c_master_init+0x10c>)
   163ec:	4798      	blx	r3
   163ee:	0003      	movs	r3, r0
   163f0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   163f2:	6a3b      	ldr	r3, [r7, #32]
   163f4:	3302      	adds	r3, #2
   163f6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   163f8:	6a3b      	ldr	r3, [r7, #32]
   163fa:	3314      	adds	r3, #20
   163fc:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   163fe:	2201      	movs	r2, #1
   16400:	69fb      	ldr	r3, [r7, #28]
   16402:	409a      	lsls	r2, r3
   16404:	0013      	movs	r3, r2
   16406:	0019      	movs	r1, r3
   16408:	2002      	movs	r0, #2
   1640a:	4b34      	ldr	r3, [pc, #208]	; (164dc <i2c_master_init+0x110>)
   1640c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   1640e:	2314      	movs	r3, #20
   16410:	18fb      	adds	r3, r7, r3
   16412:	0018      	movs	r0, r3
   16414:	4b32      	ldr	r3, [pc, #200]	; (164e0 <i2c_master_init+0x114>)
   16416:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   16418:	687b      	ldr	r3, [r7, #4]
   1641a:	7b1a      	ldrb	r2, [r3, #12]
   1641c:	2314      	movs	r3, #20
   1641e:	18fb      	adds	r3, r7, r3
   16420:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   16422:	69bb      	ldr	r3, [r7, #24]
   16424:	b2db      	uxtb	r3, r3
   16426:	2214      	movs	r2, #20
   16428:	18ba      	adds	r2, r7, r2
   1642a:	0011      	movs	r1, r2
   1642c:	0018      	movs	r0, r3
   1642e:	4b2d      	ldr	r3, [pc, #180]	; (164e4 <i2c_master_init+0x118>)
   16430:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   16432:	69bb      	ldr	r3, [r7, #24]
   16434:	b2db      	uxtb	r3, r3
   16436:	0018      	movs	r0, r3
   16438:	4b2b      	ldr	r3, [pc, #172]	; (164e8 <i2c_master_init+0x11c>)
   1643a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1643c:	687b      	ldr	r3, [r7, #4]
   1643e:	7b1b      	ldrb	r3, [r3, #12]
   16440:	2100      	movs	r1, #0
   16442:	0018      	movs	r0, r3
   16444:	4b29      	ldr	r3, [pc, #164]	; (164ec <i2c_master_init+0x120>)
   16446:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   16448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1644a:	681b      	ldr	r3, [r3, #0]
   1644c:	2202      	movs	r2, #2
   1644e:	4013      	ands	r3, r2
   16450:	d001      	beq.n	16456 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   16452:	231c      	movs	r3, #28
   16454:	e03b      	b.n	164ce <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   16456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   16458:	681b      	ldr	r3, [r3, #0]
   1645a:	2201      	movs	r2, #1
   1645c:	4013      	ands	r3, r2
   1645e:	d001      	beq.n	16464 <i2c_master_init+0x98>
		return STATUS_BUSY;
   16460:	2305      	movs	r3, #5
   16462:	e034      	b.n	164ce <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   16464:	68fb      	ldr	r3, [r7, #12]
   16466:	681b      	ldr	r3, [r3, #0]
   16468:	2217      	movs	r2, #23
   1646a:	18bc      	adds	r4, r7, r2
   1646c:	0018      	movs	r0, r3
   1646e:	4b1a      	ldr	r3, [pc, #104]	; (164d8 <i2c_master_init+0x10c>)
   16470:	4798      	blx	r3
   16472:	0003      	movs	r3, r0
   16474:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   16476:	4a1e      	ldr	r2, [pc, #120]	; (164f0 <i2c_master_init+0x124>)
   16478:	2317      	movs	r3, #23
   1647a:	18fb      	adds	r3, r7, r3
   1647c:	781b      	ldrb	r3, [r3, #0]
   1647e:	0011      	movs	r1, r2
   16480:	0018      	movs	r0, r3
   16482:	4b1c      	ldr	r3, [pc, #112]	; (164f4 <i2c_master_init+0x128>)
   16484:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   16486:	2317      	movs	r3, #23
   16488:	18fb      	adds	r3, r7, r3
   1648a:	781a      	ldrb	r2, [r3, #0]
   1648c:	4b1a      	ldr	r3, [pc, #104]	; (164f8 <i2c_master_init+0x12c>)
   1648e:	0092      	lsls	r2, r2, #2
   16490:	68f9      	ldr	r1, [r7, #12]
   16492:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   16494:	68fb      	ldr	r3, [r7, #12]
   16496:	2200      	movs	r2, #0
   16498:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1649a:	68fb      	ldr	r3, [r7, #12]
   1649c:	2200      	movs	r2, #0
   1649e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   164a0:	68fb      	ldr	r3, [r7, #12]
   164a2:	2200      	movs	r2, #0
   164a4:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   164a6:	68fb      	ldr	r3, [r7, #12]
   164a8:	2200      	movs	r2, #0
   164aa:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   164ac:	68fb      	ldr	r3, [r7, #12]
   164ae:	2225      	movs	r2, #37	; 0x25
   164b0:	2100      	movs	r1, #0
   164b2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   164b4:	68fb      	ldr	r3, [r7, #12]
   164b6:	2200      	movs	r2, #0
   164b8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   164ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   164bc:	2214      	movs	r2, #20
   164be:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   164c0:	687a      	ldr	r2, [r7, #4]
   164c2:	68fb      	ldr	r3, [r7, #12]
   164c4:	0011      	movs	r1, r2
   164c6:	0018      	movs	r0, r3
   164c8:	4b0c      	ldr	r3, [pc, #48]	; (164fc <i2c_master_init+0x130>)
   164ca:	4798      	blx	r3
   164cc:	0003      	movs	r3, r0
}
   164ce:	0018      	movs	r0, r3
   164d0:	46bd      	mov	sp, r7
   164d2:	b00b      	add	sp, #44	; 0x2c
   164d4:	bd90      	pop	{r4, r7, pc}
   164d6:	46c0      	nop			; (mov r8, r8)
   164d8:	00025f3d 	.word	0x00025f3d
   164dc:	00015e21 	.word	0x00015e21
   164e0:	00015e09 	.word	0x00015e09
   164e4:	000287cd 	.word	0x000287cd
   164e8:	00028811 	.word	0x00028811
   164ec:	00025cf5 	.word	0x00025cf5
   164f0:	00012e1d 	.word	0x00012e1d
   164f4:	00025fa1 	.word	0x00025fa1
   164f8:	200059c8 	.word	0x200059c8
   164fc:	00015fbd 	.word	0x00015fbd

00016500 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   16500:	b580      	push	{r7, lr}
   16502:	b084      	sub	sp, #16
   16504:	af00      	add	r7, sp, #0
   16506:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16508:	687b      	ldr	r3, [r7, #4]
   1650a:	681b      	ldr	r3, [r3, #0]
   1650c:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   1650e:	687b      	ldr	r3, [r7, #4]
   16510:	0018      	movs	r0, r3
   16512:	4b0f      	ldr	r3, [pc, #60]	; (16550 <i2c_master_reset+0x50>)
   16514:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   16516:	687b      	ldr	r3, [r7, #4]
   16518:	0018      	movs	r0, r3
   1651a:	4b0e      	ldr	r3, [pc, #56]	; (16554 <i2c_master_reset+0x54>)
   1651c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1651e:	4b0e      	ldr	r3, [pc, #56]	; (16558 <i2c_master_reset+0x58>)
   16520:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   16522:	687b      	ldr	r3, [r7, #4]
   16524:	681b      	ldr	r3, [r3, #0]
   16526:	0018      	movs	r0, r3
   16528:	4b0c      	ldr	r3, [pc, #48]	; (1655c <i2c_master_reset+0x5c>)
   1652a:	4798      	blx	r3
   1652c:	0003      	movs	r3, r0
   1652e:	0018      	movs	r0, r3
   16530:	4b0b      	ldr	r3, [pc, #44]	; (16560 <i2c_master_reset+0x60>)
   16532:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   16534:	4b0b      	ldr	r3, [pc, #44]	; (16564 <i2c_master_reset+0x64>)
   16536:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   16538:	687b      	ldr	r3, [r7, #4]
   1653a:	0018      	movs	r0, r3
   1653c:	4b04      	ldr	r3, [pc, #16]	; (16550 <i2c_master_reset+0x50>)
   1653e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   16540:	68fb      	ldr	r3, [r7, #12]
   16542:	2201      	movs	r2, #1
   16544:	601a      	str	r2, [r3, #0]
}
   16546:	46c0      	nop			; (mov r8, r8)
   16548:	46bd      	mov	sp, r7
   1654a:	b004      	add	sp, #16
   1654c:	bd80      	pop	{r7, pc}
   1654e:	46c0      	nop			; (mov r8, r8)
   16550:	00015f41 	.word	0x00015f41
   16554:	00015f65 	.word	0x00015f65
   16558:	00015ec5 	.word	0x00015ec5
   1655c:	0002600d 	.word	0x0002600d
   16560:	00028949 	.word	0x00028949
   16564:	00015ed9 	.word	0x00015ed9

00016568 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   16568:	b580      	push	{r7, lr}
   1656a:	b084      	sub	sp, #16
   1656c:	af00      	add	r7, sp, #0
   1656e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16570:	687b      	ldr	r3, [r7, #4]
   16572:	681b      	ldr	r3, [r3, #0]
   16574:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   16576:	68fb      	ldr	r3, [r7, #12]
   16578:	7e1b      	ldrb	r3, [r3, #24]
   1657a:	b2db      	uxtb	r3, r3
   1657c:	001a      	movs	r2, r3
   1657e:	2302      	movs	r3, #2
   16580:	4013      	ands	r3, r2
   16582:	d00b      	beq.n	1659c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   16584:	68fb      	ldr	r3, [r7, #12]
   16586:	2202      	movs	r2, #2
   16588:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1658a:	68fb      	ldr	r3, [r7, #12]
   1658c:	8b5b      	ldrh	r3, [r3, #26]
   1658e:	b29b      	uxth	r3, r3
   16590:	001a      	movs	r2, r3
   16592:	2302      	movs	r3, #2
   16594:	4013      	ands	r3, r2
   16596:	d011      	beq.n	165bc <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   16598:	2341      	movs	r3, #65	; 0x41
   1659a:	e010      	b.n	165be <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1659c:	68fb      	ldr	r3, [r7, #12]
   1659e:	8b5b      	ldrh	r3, [r3, #26]
   165a0:	b29b      	uxth	r3, r3
   165a2:	001a      	movs	r2, r3
   165a4:	2304      	movs	r3, #4
   165a6:	4013      	ands	r3, r2
   165a8:	d008      	beq.n	165bc <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   165aa:	68fb      	ldr	r3, [r7, #12]
   165ac:	685b      	ldr	r3, [r3, #4]
   165ae:	22c0      	movs	r2, #192	; 0xc0
   165b0:	0292      	lsls	r2, r2, #10
   165b2:	431a      	orrs	r2, r3
   165b4:	68fb      	ldr	r3, [r7, #12]
   165b6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   165b8:	2318      	movs	r3, #24
   165ba:	e000      	b.n	165be <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   165bc:	2300      	movs	r3, #0
}
   165be:	0018      	movs	r0, r3
   165c0:	46bd      	mov	sp, r7
   165c2:	b004      	add	sp, #16
   165c4:	bd80      	pop	{r7, pc}

000165c6 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   165c6:	b580      	push	{r7, lr}
   165c8:	b084      	sub	sp, #16
   165ca:	af00      	add	r7, sp, #0
   165cc:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   165ce:	687b      	ldr	r3, [r7, #4]
   165d0:	681b      	ldr	r3, [r3, #0]
   165d2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   165d4:	230e      	movs	r3, #14
   165d6:	18fb      	adds	r3, r7, r3
   165d8:	2200      	movs	r2, #0
   165da:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   165dc:	e00f      	b.n	165fe <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   165de:	230e      	movs	r3, #14
   165e0:	18fb      	adds	r3, r7, r3
   165e2:	220e      	movs	r2, #14
   165e4:	18ba      	adds	r2, r7, r2
   165e6:	8812      	ldrh	r2, [r2, #0]
   165e8:	3201      	adds	r2, #1
   165ea:	801a      	strh	r2, [r3, #0]
   165ec:	687b      	ldr	r3, [r7, #4]
   165ee:	891b      	ldrh	r3, [r3, #8]
   165f0:	220e      	movs	r2, #14
   165f2:	18ba      	adds	r2, r7, r2
   165f4:	8812      	ldrh	r2, [r2, #0]
   165f6:	429a      	cmp	r2, r3
   165f8:	d301      	bcc.n	165fe <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   165fa:	2312      	movs	r3, #18
   165fc:	e00e      	b.n	1661c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   165fe:	68bb      	ldr	r3, [r7, #8]
   16600:	7e1b      	ldrb	r3, [r3, #24]
   16602:	b2db      	uxtb	r3, r3
   16604:	001a      	movs	r2, r3
   16606:	2301      	movs	r3, #1
   16608:	4013      	ands	r3, r2
   1660a:	d106      	bne.n	1661a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   1660c:	68bb      	ldr	r3, [r7, #8]
   1660e:	7e1b      	ldrb	r3, [r3, #24]
   16610:	b2db      	uxtb	r3, r3
   16612:	001a      	movs	r2, r3
   16614:	2302      	movs	r3, #2
   16616:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   16618:	d0e1      	beq.n	165de <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   1661a:	2300      	movs	r3, #0
}
   1661c:	0018      	movs	r0, r3
   1661e:	46bd      	mov	sp, r7
   16620:	b004      	add	sp, #16
   16622:	bd80      	pop	{r7, pc}

00016624 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   16624:	b590      	push	{r4, r7, lr}
   16626:	b085      	sub	sp, #20
   16628:	af00      	add	r7, sp, #0
   1662a:	6078      	str	r0, [r7, #4]
   1662c:	000a      	movs	r2, r1
   1662e:	1cfb      	adds	r3, r7, #3
   16630:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   16632:	687b      	ldr	r3, [r7, #4]
   16634:	681b      	ldr	r3, [r3, #0]
   16636:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   16638:	68fb      	ldr	r3, [r7, #12]
   1663a:	685b      	ldr	r3, [r3, #4]
   1663c:	2280      	movs	r2, #128	; 0x80
   1663e:	02d2      	lsls	r2, r2, #11
   16640:	431a      	orrs	r2, r3
   16642:	68fb      	ldr	r3, [r7, #12]
   16644:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   16646:	1cfb      	adds	r3, r7, #3
   16648:	781a      	ldrb	r2, [r3, #0]
   1664a:	68fb      	ldr	r3, [r7, #12]
   1664c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   1664e:	230b      	movs	r3, #11
   16650:	18fc      	adds	r4, r7, r3
   16652:	687b      	ldr	r3, [r7, #4]
   16654:	0018      	movs	r0, r3
   16656:	4b07      	ldr	r3, [pc, #28]	; (16674 <_i2c_master_send_hs_master_code+0x50>)
   16658:	4798      	blx	r3
   1665a:	0003      	movs	r3, r0
   1665c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   1665e:	68fb      	ldr	r3, [r7, #12]
   16660:	2201      	movs	r2, #1
   16662:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   16664:	230b      	movs	r3, #11
   16666:	18fb      	adds	r3, r7, r3
   16668:	781b      	ldrb	r3, [r3, #0]
}
   1666a:	0018      	movs	r0, r3
   1666c:	46bd      	mov	sp, r7
   1666e:	b005      	add	sp, #20
   16670:	bd90      	pop	{r4, r7, pc}
   16672:	46c0      	nop			; (mov r8, r8)
   16674:	000165c7 	.word	0x000165c7

00016678 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   16678:	b580      	push	{r7, lr}
   1667a:	af00      	add	r7, sp, #0
   1667c:	2000      	movs	r0, #0
   1667e:	4b02      	ldr	r3, [pc, #8]	; (16688 <TC3_Handler+0x10>)
   16680:	4798      	blx	r3
   16682:	46c0      	nop			; (mov r8, r8)
   16684:	46bd      	mov	sp, r7
   16686:	bd80      	pop	{r7, pc}
   16688:	000166b5 	.word	0x000166b5

0001668c <TC4_Handler>:
   1668c:	b580      	push	{r7, lr}
   1668e:	af00      	add	r7, sp, #0
   16690:	2001      	movs	r0, #1
   16692:	4b02      	ldr	r3, [pc, #8]	; (1669c <TC4_Handler+0x10>)
   16694:	4798      	blx	r3
   16696:	46c0      	nop			; (mov r8, r8)
   16698:	46bd      	mov	sp, r7
   1669a:	bd80      	pop	{r7, pc}
   1669c:	000166b5 	.word	0x000166b5

000166a0 <TC5_Handler>:
   166a0:	b580      	push	{r7, lr}
   166a2:	af00      	add	r7, sp, #0
   166a4:	2002      	movs	r0, #2
   166a6:	4b02      	ldr	r3, [pc, #8]	; (166b0 <TC5_Handler+0x10>)
   166a8:	4798      	blx	r3
   166aa:	46c0      	nop			; (mov r8, r8)
   166ac:	46bd      	mov	sp, r7
   166ae:	bd80      	pop	{r7, pc}
   166b0:	000166b5 	.word	0x000166b5

000166b4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   166b4:	b580      	push	{r7, lr}
   166b6:	b084      	sub	sp, #16
   166b8:	af00      	add	r7, sp, #0
   166ba:	0002      	movs	r2, r0
   166bc:	1dfb      	adds	r3, r7, #7
   166be:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   166c0:	1dfb      	adds	r3, r7, #7
   166c2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   166c4:	4b28      	ldr	r3, [pc, #160]	; (16768 <_tc_interrupt_handler+0xb4>)
   166c6:	0092      	lsls	r2, r2, #2
   166c8:	58d3      	ldr	r3, [r2, r3]
   166ca:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   166cc:	68fb      	ldr	r3, [r7, #12]
   166ce:	681b      	ldr	r3, [r3, #0]
   166d0:	7b9b      	ldrb	r3, [r3, #14]
   166d2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   166d4:	68fa      	ldr	r2, [r7, #12]
   166d6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   166d8:	4013      	ands	r3, r2
   166da:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   166dc:	68fb      	ldr	r3, [r7, #12]
   166de:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   166e0:	230b      	movs	r3, #11
   166e2:	18fb      	adds	r3, r7, r3
   166e4:	400a      	ands	r2, r1
   166e6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   166e8:	230b      	movs	r3, #11
   166ea:	18fb      	adds	r3, r7, r3
   166ec:	781b      	ldrb	r3, [r3, #0]
   166ee:	2201      	movs	r2, #1
   166f0:	4013      	ands	r3, r2
   166f2:	d008      	beq.n	16706 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   166f4:	68fb      	ldr	r3, [r7, #12]
   166f6:	689b      	ldr	r3, [r3, #8]
   166f8:	68fa      	ldr	r2, [r7, #12]
   166fa:	0010      	movs	r0, r2
   166fc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   166fe:	68fb      	ldr	r3, [r7, #12]
   16700:	681b      	ldr	r3, [r3, #0]
   16702:	2201      	movs	r2, #1
   16704:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   16706:	230b      	movs	r3, #11
   16708:	18fb      	adds	r3, r7, r3
   1670a:	781b      	ldrb	r3, [r3, #0]
   1670c:	2202      	movs	r2, #2
   1670e:	4013      	ands	r3, r2
   16710:	d008      	beq.n	16724 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   16712:	68fb      	ldr	r3, [r7, #12]
   16714:	68db      	ldr	r3, [r3, #12]
   16716:	68fa      	ldr	r2, [r7, #12]
   16718:	0010      	movs	r0, r2
   1671a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   1671c:	68fb      	ldr	r3, [r7, #12]
   1671e:	681b      	ldr	r3, [r3, #0]
   16720:	2202      	movs	r2, #2
   16722:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   16724:	230b      	movs	r3, #11
   16726:	18fb      	adds	r3, r7, r3
   16728:	781b      	ldrb	r3, [r3, #0]
   1672a:	2210      	movs	r2, #16
   1672c:	4013      	ands	r3, r2
   1672e:	d008      	beq.n	16742 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   16730:	68fb      	ldr	r3, [r7, #12]
   16732:	691b      	ldr	r3, [r3, #16]
   16734:	68fa      	ldr	r2, [r7, #12]
   16736:	0010      	movs	r0, r2
   16738:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   1673a:	68fb      	ldr	r3, [r7, #12]
   1673c:	681b      	ldr	r3, [r3, #0]
   1673e:	2210      	movs	r2, #16
   16740:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   16742:	230b      	movs	r3, #11
   16744:	18fb      	adds	r3, r7, r3
   16746:	781b      	ldrb	r3, [r3, #0]
   16748:	2220      	movs	r2, #32
   1674a:	4013      	ands	r3, r2
   1674c:	d008      	beq.n	16760 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   1674e:	68fb      	ldr	r3, [r7, #12]
   16750:	695b      	ldr	r3, [r3, #20]
   16752:	68fa      	ldr	r2, [r7, #12]
   16754:	0010      	movs	r0, r2
   16756:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   16758:	68fb      	ldr	r3, [r7, #12]
   1675a:	681b      	ldr	r3, [r3, #0]
   1675c:	2220      	movs	r2, #32
   1675e:	739a      	strb	r2, [r3, #14]
	}
}
   16760:	46c0      	nop			; (mov r8, r8)
   16762:	46bd      	mov	sp, r7
   16764:	b004      	add	sp, #16
   16766:	bd80      	pop	{r7, pc}
   16768:	200047b0 	.word	0x200047b0

0001676c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   1676c:	b580      	push	{r7, lr}
   1676e:	b084      	sub	sp, #16
   16770:	af00      	add	r7, sp, #0
   16772:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   16774:	2300      	movs	r3, #0
   16776:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   16778:	687b      	ldr	r3, [r7, #4]
   1677a:	2b00      	cmp	r3, #0
   1677c:	d101      	bne.n	16782 <FreeRTOS_CLIRegisterCommand+0x16>
   1677e:	b672      	cpsid	i
   16780:	e7fe      	b.n	16780 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   16782:	2008      	movs	r0, #8
   16784:	4b11      	ldr	r3, [pc, #68]	; (167cc <FreeRTOS_CLIRegisterCommand+0x60>)
   16786:	4798      	blx	r3
   16788:	0003      	movs	r3, r0
   1678a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   1678c:	68bb      	ldr	r3, [r7, #8]
   1678e:	2b00      	cmp	r3, #0
   16790:	d101      	bne.n	16796 <FreeRTOS_CLIRegisterCommand+0x2a>
   16792:	b672      	cpsid	i
   16794:	e7fe      	b.n	16794 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   16796:	68bb      	ldr	r3, [r7, #8]
   16798:	2b00      	cmp	r3, #0
   1679a:	d012      	beq.n	167c2 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   1679c:	4b0c      	ldr	r3, [pc, #48]	; (167d0 <FreeRTOS_CLIRegisterCommand+0x64>)
   1679e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   167a0:	68bb      	ldr	r3, [r7, #8]
   167a2:	687a      	ldr	r2, [r7, #4]
   167a4:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   167a6:	68bb      	ldr	r3, [r7, #8]
   167a8:	2200      	movs	r2, #0
   167aa:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   167ac:	4b09      	ldr	r3, [pc, #36]	; (167d4 <FreeRTOS_CLIRegisterCommand+0x68>)
   167ae:	681b      	ldr	r3, [r3, #0]
   167b0:	68ba      	ldr	r2, [r7, #8]
   167b2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   167b4:	4b07      	ldr	r3, [pc, #28]	; (167d4 <FreeRTOS_CLIRegisterCommand+0x68>)
   167b6:	68ba      	ldr	r2, [r7, #8]
   167b8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   167ba:	4b07      	ldr	r3, [pc, #28]	; (167d8 <FreeRTOS_CLIRegisterCommand+0x6c>)
   167bc:	4798      	blx	r3

		xReturn = pdPASS;
   167be:	2301      	movs	r3, #1
   167c0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   167c2:	68fb      	ldr	r3, [r7, #12]
}
   167c4:	0018      	movs	r0, r3
   167c6:	46bd      	mov	sp, r7
   167c8:	b004      	add	sp, #16
   167ca:	bd80      	pop	{r7, pc}
   167cc:	00018b81 	.word	0x00018b81
   167d0:	00018a49 	.word	0x00018a49
   167d4:	20000100 	.word	0x20000100
   167d8:	00018a6d 	.word	0x00018a6d

000167dc <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   167dc:	b580      	push	{r7, lr}
   167de:	b088      	sub	sp, #32
   167e0:	af00      	add	r7, sp, #0
   167e2:	60f8      	str	r0, [r7, #12]
   167e4:	60b9      	str	r1, [r7, #8]
   167e6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   167e8:	2301      	movs	r3, #1
   167ea:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   167ec:	4b3d      	ldr	r3, [pc, #244]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   167ee:	681b      	ldr	r3, [r3, #0]
   167f0:	2b00      	cmp	r3, #0
   167f2:	d144      	bne.n	1687e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   167f4:	4b3b      	ldr	r3, [pc, #236]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   167f6:	4a3c      	ldr	r2, [pc, #240]	; (168e8 <FreeRTOS_CLIProcessCommand+0x10c>)
   167f8:	601a      	str	r2, [r3, #0]
   167fa:	e03a      	b.n	16872 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   167fc:	4b39      	ldr	r3, [pc, #228]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   167fe:	681b      	ldr	r3, [r3, #0]
   16800:	681b      	ldr	r3, [r3, #0]
   16802:	681b      	ldr	r3, [r3, #0]
   16804:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   16806:	69bb      	ldr	r3, [r7, #24]
   16808:	0018      	movs	r0, r3
   1680a:	4b38      	ldr	r3, [pc, #224]	; (168ec <FreeRTOS_CLIProcessCommand+0x110>)
   1680c:	4798      	blx	r3
   1680e:	0003      	movs	r3, r0
   16810:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   16812:	68fa      	ldr	r2, [r7, #12]
   16814:	697b      	ldr	r3, [r7, #20]
   16816:	18d3      	adds	r3, r2, r3
   16818:	781b      	ldrb	r3, [r3, #0]
   1681a:	2b20      	cmp	r3, #32
   1681c:	d005      	beq.n	1682a <FreeRTOS_CLIProcessCommand+0x4e>
   1681e:	68fa      	ldr	r2, [r7, #12]
   16820:	697b      	ldr	r3, [r7, #20]
   16822:	18d3      	adds	r3, r2, r3
   16824:	781b      	ldrb	r3, [r3, #0]
   16826:	2b00      	cmp	r3, #0
   16828:	d11e      	bne.n	16868 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   1682a:	697a      	ldr	r2, [r7, #20]
   1682c:	69b9      	ldr	r1, [r7, #24]
   1682e:	68fb      	ldr	r3, [r7, #12]
   16830:	0018      	movs	r0, r3
   16832:	4b2f      	ldr	r3, [pc, #188]	; (168f0 <FreeRTOS_CLIProcessCommand+0x114>)
   16834:	4798      	blx	r3
   16836:	1e03      	subs	r3, r0, #0
   16838:	d116      	bne.n	16868 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   1683a:	4b2a      	ldr	r3, [pc, #168]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   1683c:	681b      	ldr	r3, [r3, #0]
   1683e:	681b      	ldr	r3, [r3, #0]
   16840:	7b1b      	ldrb	r3, [r3, #12]
   16842:	b25b      	sxtb	r3, r3
   16844:	2b00      	cmp	r3, #0
   16846:	db19      	blt.n	1687c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   16848:	68fb      	ldr	r3, [r7, #12]
   1684a:	0018      	movs	r0, r3
   1684c:	4b29      	ldr	r3, [pc, #164]	; (168f4 <FreeRTOS_CLIProcessCommand+0x118>)
   1684e:	4798      	blx	r3
   16850:	0003      	movs	r3, r0
   16852:	001a      	movs	r2, r3
   16854:	4b23      	ldr	r3, [pc, #140]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   16856:	681b      	ldr	r3, [r3, #0]
   16858:	681b      	ldr	r3, [r3, #0]
   1685a:	7b1b      	ldrb	r3, [r3, #12]
   1685c:	b25b      	sxtb	r3, r3
   1685e:	429a      	cmp	r2, r3
   16860:	d00c      	beq.n	1687c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   16862:	2300      	movs	r3, #0
   16864:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   16866:	e009      	b.n	1687c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   16868:	4b1e      	ldr	r3, [pc, #120]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   1686a:	681b      	ldr	r3, [r3, #0]
   1686c:	685a      	ldr	r2, [r3, #4]
   1686e:	4b1d      	ldr	r3, [pc, #116]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   16870:	601a      	str	r2, [r3, #0]
   16872:	4b1c      	ldr	r3, [pc, #112]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   16874:	681b      	ldr	r3, [r3, #0]
   16876:	2b00      	cmp	r3, #0
   16878:	d1c0      	bne.n	167fc <FreeRTOS_CLIProcessCommand+0x20>
   1687a:	e000      	b.n	1687e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   1687c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   1687e:	4b19      	ldr	r3, [pc, #100]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   16880:	681b      	ldr	r3, [r3, #0]
   16882:	2b00      	cmp	r3, #0
   16884:	d00c      	beq.n	168a0 <FreeRTOS_CLIProcessCommand+0xc4>
   16886:	69fb      	ldr	r3, [r7, #28]
   16888:	2b00      	cmp	r3, #0
   1688a:	d109      	bne.n	168a0 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   1688c:	687a      	ldr	r2, [r7, #4]
   1688e:	491a      	ldr	r1, [pc, #104]	; (168f8 <FreeRTOS_CLIProcessCommand+0x11c>)
   16890:	68bb      	ldr	r3, [r7, #8]
   16892:	0018      	movs	r0, r3
   16894:	4b19      	ldr	r3, [pc, #100]	; (168fc <FreeRTOS_CLIProcessCommand+0x120>)
   16896:	4798      	blx	r3
		pxCommand = NULL;
   16898:	4b12      	ldr	r3, [pc, #72]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   1689a:	2200      	movs	r2, #0
   1689c:	601a      	str	r2, [r3, #0]
   1689e:	e01c      	b.n	168da <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   168a0:	4b10      	ldr	r3, [pc, #64]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   168a2:	681b      	ldr	r3, [r3, #0]
   168a4:	2b00      	cmp	r3, #0
   168a6:	d010      	beq.n	168ca <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   168a8:	4b0e      	ldr	r3, [pc, #56]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   168aa:	681b      	ldr	r3, [r3, #0]
   168ac:	681b      	ldr	r3, [r3, #0]
   168ae:	689b      	ldr	r3, [r3, #8]
   168b0:	68fa      	ldr	r2, [r7, #12]
   168b2:	6879      	ldr	r1, [r7, #4]
   168b4:	68b8      	ldr	r0, [r7, #8]
   168b6:	4798      	blx	r3
   168b8:	0003      	movs	r3, r0
   168ba:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   168bc:	69fb      	ldr	r3, [r7, #28]
   168be:	2b00      	cmp	r3, #0
   168c0:	d10b      	bne.n	168da <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   168c2:	4b08      	ldr	r3, [pc, #32]	; (168e4 <FreeRTOS_CLIProcessCommand+0x108>)
   168c4:	2200      	movs	r2, #0
   168c6:	601a      	str	r2, [r3, #0]
   168c8:	e007      	b.n	168da <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   168ca:	687a      	ldr	r2, [r7, #4]
   168cc:	490c      	ldr	r1, [pc, #48]	; (16900 <FreeRTOS_CLIProcessCommand+0x124>)
   168ce:	68bb      	ldr	r3, [r7, #8]
   168d0:	0018      	movs	r0, r3
   168d2:	4b0a      	ldr	r3, [pc, #40]	; (168fc <FreeRTOS_CLIProcessCommand+0x120>)
   168d4:	4798      	blx	r3
		xReturn = pdFALSE;
   168d6:	2300      	movs	r3, #0
   168d8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   168da:	69fb      	ldr	r3, [r7, #28]
}
   168dc:	0018      	movs	r0, r3
   168de:	46bd      	mov	sp, r7
   168e0:	b008      	add	sp, #32
   168e2:	bd80      	pop	{r7, pc}
   168e4:	20000b4c 	.word	0x20000b4c
   168e8:	200000f8 	.word	0x200000f8
   168ec:	0003353b 	.word	0x0003353b
   168f0:	00033549 	.word	0x00033549
   168f4:	00016965 	.word	0x00016965
   168f8:	00035264 	.word	0x00035264
   168fc:	0003356b 	.word	0x0003356b
   16900:	000352bc 	.word	0x000352bc

00016904 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   16904:	b580      	push	{r7, lr}
   16906:	b086      	sub	sp, #24
   16908:	af00      	add	r7, sp, #0
   1690a:	60f8      	str	r0, [r7, #12]
   1690c:	60b9      	str	r1, [r7, #8]
   1690e:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   16910:	4b11      	ldr	r3, [pc, #68]	; (16958 <prvHelpCommand+0x54>)
   16912:	681b      	ldr	r3, [r3, #0]
   16914:	2b00      	cmp	r3, #0
   16916:	d102      	bne.n	1691e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   16918:	4b0f      	ldr	r3, [pc, #60]	; (16958 <prvHelpCommand+0x54>)
   1691a:	4a10      	ldr	r2, [pc, #64]	; (1695c <prvHelpCommand+0x58>)
   1691c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   1691e:	4b0e      	ldr	r3, [pc, #56]	; (16958 <prvHelpCommand+0x54>)
   16920:	681b      	ldr	r3, [r3, #0]
   16922:	681b      	ldr	r3, [r3, #0]
   16924:	6859      	ldr	r1, [r3, #4]
   16926:	68ba      	ldr	r2, [r7, #8]
   16928:	68fb      	ldr	r3, [r7, #12]
   1692a:	0018      	movs	r0, r3
   1692c:	4b0c      	ldr	r3, [pc, #48]	; (16960 <prvHelpCommand+0x5c>)
   1692e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   16930:	4b09      	ldr	r3, [pc, #36]	; (16958 <prvHelpCommand+0x54>)
   16932:	681b      	ldr	r3, [r3, #0]
   16934:	685a      	ldr	r2, [r3, #4]
   16936:	4b08      	ldr	r3, [pc, #32]	; (16958 <prvHelpCommand+0x54>)
   16938:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   1693a:	4b07      	ldr	r3, [pc, #28]	; (16958 <prvHelpCommand+0x54>)
   1693c:	681b      	ldr	r3, [r3, #0]
   1693e:	2b00      	cmp	r3, #0
   16940:	d102      	bne.n	16948 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   16942:	2300      	movs	r3, #0
   16944:	617b      	str	r3, [r7, #20]
   16946:	e001      	b.n	1694c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   16948:	2301      	movs	r3, #1
   1694a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   1694c:	697b      	ldr	r3, [r7, #20]
}
   1694e:	0018      	movs	r0, r3
   16950:	46bd      	mov	sp, r7
   16952:	b006      	add	sp, #24
   16954:	bd80      	pop	{r7, pc}
   16956:	46c0      	nop			; (mov r8, r8)
   16958:	20000b50 	.word	0x20000b50
   1695c:	200000f8 	.word	0x200000f8
   16960:	0003356b 	.word	0x0003356b

00016964 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   16964:	b580      	push	{r7, lr}
   16966:	b084      	sub	sp, #16
   16968:	af00      	add	r7, sp, #0
   1696a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   1696c:	230f      	movs	r3, #15
   1696e:	18fb      	adds	r3, r7, r3
   16970:	2200      	movs	r2, #0
   16972:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   16974:	2300      	movs	r3, #0
   16976:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   16978:	e018      	b.n	169ac <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   1697a:	687b      	ldr	r3, [r7, #4]
   1697c:	781b      	ldrb	r3, [r3, #0]
   1697e:	2b20      	cmp	r3, #32
   16980:	d10f      	bne.n	169a2 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   16982:	68bb      	ldr	r3, [r7, #8]
   16984:	2b01      	cmp	r3, #1
   16986:	d00e      	beq.n	169a6 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   16988:	230f      	movs	r3, #15
   1698a:	18fb      	adds	r3, r7, r3
   1698c:	781b      	ldrb	r3, [r3, #0]
   1698e:	b25b      	sxtb	r3, r3
   16990:	b2db      	uxtb	r3, r3
   16992:	3301      	adds	r3, #1
   16994:	b2da      	uxtb	r2, r3
   16996:	230f      	movs	r3, #15
   16998:	18fb      	adds	r3, r7, r3
   1699a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   1699c:	2301      	movs	r3, #1
   1699e:	60bb      	str	r3, [r7, #8]
   169a0:	e001      	b.n	169a6 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   169a2:	2300      	movs	r3, #0
   169a4:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   169a6:	687b      	ldr	r3, [r7, #4]
   169a8:	3301      	adds	r3, #1
   169aa:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   169ac:	687b      	ldr	r3, [r7, #4]
   169ae:	781b      	ldrb	r3, [r3, #0]
   169b0:	2b00      	cmp	r3, #0
   169b2:	d1e2      	bne.n	1697a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   169b4:	68bb      	ldr	r3, [r7, #8]
   169b6:	2b01      	cmp	r3, #1
   169b8:	d109      	bne.n	169ce <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   169ba:	230f      	movs	r3, #15
   169bc:	18fb      	adds	r3, r7, r3
   169be:	781b      	ldrb	r3, [r3, #0]
   169c0:	b25b      	sxtb	r3, r3
   169c2:	b2db      	uxtb	r3, r3
   169c4:	3b01      	subs	r3, #1
   169c6:	b2da      	uxtb	r2, r3
   169c8:	230f      	movs	r3, #15
   169ca:	18fb      	adds	r3, r7, r3
   169cc:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   169ce:	230f      	movs	r3, #15
   169d0:	18fb      	adds	r3, r7, r3
   169d2:	781b      	ldrb	r3, [r3, #0]
   169d4:	b25b      	sxtb	r3, r3
}
   169d6:	0018      	movs	r0, r3
   169d8:	46bd      	mov	sp, r7
   169da:	b004      	add	sp, #16
   169dc:	bd80      	pop	{r7, pc}
	...

000169e0 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   169e0:	b580      	push	{r7, lr}
   169e2:	b082      	sub	sp, #8
   169e4:	af00      	add	r7, sp, #0
   169e6:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   169e8:	687b      	ldr	r3, [r7, #4]
   169ea:	0018      	movs	r0, r3
   169ec:	4b03      	ldr	r3, [pc, #12]	; (169fc <prvTraceGetQueueNumber+0x1c>)
   169ee:	4798      	blx	r3
   169f0:	0003      	movs	r3, r0
}
   169f2:	0018      	movs	r0, r3
   169f4:	46bd      	mov	sp, r7
   169f6:	b002      	add	sp, #8
   169f8:	bd80      	pop	{r7, pc}
   169fa:	46c0      	nop			; (mov r8, r8)
   169fc:	0001a1a5 	.word	0x0001a1a5

00016a00 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   16a00:	b580      	push	{r7, lr}
   16a02:	b082      	sub	sp, #8
   16a04:	af00      	add	r7, sp, #0
   16a06:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   16a08:	687b      	ldr	r3, [r7, #4]
   16a0a:	0018      	movs	r0, r3
   16a0c:	4b03      	ldr	r3, [pc, #12]	; (16a1c <prvTraceGetQueueType+0x1c>)
   16a0e:	4798      	blx	r3
   16a10:	0003      	movs	r3, r0
}
   16a12:	0018      	movs	r0, r3
   16a14:	46bd      	mov	sp, r7
   16a16:	b002      	add	sp, #8
   16a18:	bd80      	pop	{r7, pc}
   16a1a:	46c0      	nop			; (mov r8, r8)
   16a1c:	0001a1d1 	.word	0x0001a1d1

00016a20 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   16a20:	b580      	push	{r7, lr}
   16a22:	b082      	sub	sp, #8
   16a24:	af00      	add	r7, sp, #0
   16a26:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   16a28:	687b      	ldr	r3, [r7, #4]
   16a2a:	0018      	movs	r0, r3
   16a2c:	4b03      	ldr	r3, [pc, #12]	; (16a3c <prvTraceGetTaskNumberLow16+0x1c>)
   16a2e:	4798      	blx	r3
   16a30:	0003      	movs	r3, r0
   16a32:	b29b      	uxth	r3, r3
}
   16a34:	0018      	movs	r0, r3
   16a36:	46bd      	mov	sp, r7
   16a38:	b002      	add	sp, #8
   16a3a:	bd80      	pop	{r7, pc}
   16a3c:	0001b501 	.word	0x0001b501

00016a40 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   16a40:	b580      	push	{r7, lr}
   16a42:	b082      	sub	sp, #8
   16a44:	af00      	add	r7, sp, #0
   16a46:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   16a48:	687b      	ldr	r3, [r7, #4]
   16a4a:	0018      	movs	r0, r3
   16a4c:	4b04      	ldr	r3, [pc, #16]	; (16a60 <prvTraceGetTaskNumberHigh16+0x20>)
   16a4e:	4798      	blx	r3
   16a50:	0003      	movs	r3, r0
   16a52:	0c1b      	lsrs	r3, r3, #16
   16a54:	b29b      	uxth	r3, r3
}
   16a56:	0018      	movs	r0, r3
   16a58:	46bd      	mov	sp, r7
   16a5a:	b002      	add	sp, #8
   16a5c:	bd80      	pop	{r7, pc}
   16a5e:	46c0      	nop			; (mov r8, r8)
   16a60:	0001b501 	.word	0x0001b501

00016a64 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   16a64:	b580      	push	{r7, lr}
   16a66:	b082      	sub	sp, #8
   16a68:	af00      	add	r7, sp, #0
   16a6a:	6078      	str	r0, [r7, #4]
   16a6c:	000a      	movs	r2, r1
   16a6e:	1cbb      	adds	r3, r7, #2
   16a70:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   16a72:	687b      	ldr	r3, [r7, #4]
   16a74:	0018      	movs	r0, r3
   16a76:	4b08      	ldr	r3, [pc, #32]	; (16a98 <prvTraceSetTaskNumberLow16+0x34>)
   16a78:	4798      	blx	r3
   16a7a:	0003      	movs	r3, r0
   16a7c:	0c1b      	lsrs	r3, r3, #16
   16a7e:	041a      	lsls	r2, r3, #16
   16a80:	1cbb      	adds	r3, r7, #2
   16a82:	881b      	ldrh	r3, [r3, #0]
   16a84:	431a      	orrs	r2, r3
   16a86:	687b      	ldr	r3, [r7, #4]
   16a88:	0011      	movs	r1, r2
   16a8a:	0018      	movs	r0, r3
   16a8c:	4b03      	ldr	r3, [pc, #12]	; (16a9c <prvTraceSetTaskNumberLow16+0x38>)
   16a8e:	4798      	blx	r3
}
   16a90:	46c0      	nop			; (mov r8, r8)
   16a92:	46bd      	mov	sp, r7
   16a94:	b002      	add	sp, #8
   16a96:	bd80      	pop	{r7, pc}
   16a98:	0001b501 	.word	0x0001b501
   16a9c:	0001b529 	.word	0x0001b529

00016aa0 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   16aa0:	b580      	push	{r7, lr}
   16aa2:	b082      	sub	sp, #8
   16aa4:	af00      	add	r7, sp, #0
   16aa6:	6078      	str	r0, [r7, #4]
   16aa8:	000a      	movs	r2, r1
   16aaa:	1cbb      	adds	r3, r7, #2
   16aac:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   16aae:	687b      	ldr	r3, [r7, #4]
   16ab0:	0018      	movs	r0, r3
   16ab2:	4b09      	ldr	r3, [pc, #36]	; (16ad8 <prvTraceSetTaskNumberHigh16+0x38>)
   16ab4:	4798      	blx	r3
   16ab6:	0003      	movs	r3, r0
   16ab8:	041b      	lsls	r3, r3, #16
   16aba:	0c1a      	lsrs	r2, r3, #16
   16abc:	1cbb      	adds	r3, r7, #2
   16abe:	881b      	ldrh	r3, [r3, #0]
   16ac0:	041b      	lsls	r3, r3, #16
   16ac2:	431a      	orrs	r2, r3
   16ac4:	687b      	ldr	r3, [r7, #4]
   16ac6:	0011      	movs	r1, r2
   16ac8:	0018      	movs	r0, r3
   16aca:	4b04      	ldr	r3, [pc, #16]	; (16adc <prvTraceSetTaskNumberHigh16+0x3c>)
   16acc:	4798      	blx	r3
}
   16ace:	46c0      	nop			; (mov r8, r8)
   16ad0:	46bd      	mov	sp, r7
   16ad2:	b002      	add	sp, #8
   16ad4:	bd80      	pop	{r7, pc}
   16ad6:	46c0      	nop			; (mov r8, r8)
   16ad8:	0001b501 	.word	0x0001b501
   16adc:	0001b529 	.word	0x0001b529

00016ae0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   16ae0:	b580      	push	{r7, lr}
   16ae2:	b082      	sub	sp, #8
   16ae4:	af00      	add	r7, sp, #0
   16ae6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   16ae8:	687b      	ldr	r3, [r7, #4]
   16aea:	0018      	movs	r0, r3
   16aec:	4b03      	ldr	r3, [pc, #12]	; (16afc <prvTraceGetQueueNumberLow16+0x1c>)
   16aee:	4798      	blx	r3
   16af0:	0003      	movs	r3, r0
   16af2:	b29b      	uxth	r3, r3
}
   16af4:	0018      	movs	r0, r3
   16af6:	46bd      	mov	sp, r7
   16af8:	b002      	add	sp, #8
   16afa:	bd80      	pop	{r7, pc}
   16afc:	000169e1 	.word	0x000169e1

00016b00 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   16b00:	b580      	push	{r7, lr}
   16b02:	b082      	sub	sp, #8
   16b04:	af00      	add	r7, sp, #0
   16b06:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   16b08:	687b      	ldr	r3, [r7, #4]
   16b0a:	0018      	movs	r0, r3
   16b0c:	4b04      	ldr	r3, [pc, #16]	; (16b20 <prvTraceGetQueueNumberHigh16+0x20>)
   16b0e:	4798      	blx	r3
   16b10:	0003      	movs	r3, r0
   16b12:	0c1b      	lsrs	r3, r3, #16
   16b14:	b29b      	uxth	r3, r3
}
   16b16:	0018      	movs	r0, r3
   16b18:	46bd      	mov	sp, r7
   16b1a:	b002      	add	sp, #8
   16b1c:	bd80      	pop	{r7, pc}
   16b1e:	46c0      	nop			; (mov r8, r8)
   16b20:	000169e1 	.word	0x000169e1

00016b24 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   16b24:	b580      	push	{r7, lr}
   16b26:	b082      	sub	sp, #8
   16b28:	af00      	add	r7, sp, #0
   16b2a:	6078      	str	r0, [r7, #4]
   16b2c:	000a      	movs	r2, r1
   16b2e:	1cbb      	adds	r3, r7, #2
   16b30:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   16b32:	687b      	ldr	r3, [r7, #4]
   16b34:	0018      	movs	r0, r3
   16b36:	4b08      	ldr	r3, [pc, #32]	; (16b58 <prvTraceSetQueueNumberLow16+0x34>)
   16b38:	4798      	blx	r3
   16b3a:	0003      	movs	r3, r0
   16b3c:	0c1b      	lsrs	r3, r3, #16
   16b3e:	041a      	lsls	r2, r3, #16
   16b40:	1cbb      	adds	r3, r7, #2
   16b42:	881b      	ldrh	r3, [r3, #0]
   16b44:	431a      	orrs	r2, r3
   16b46:	687b      	ldr	r3, [r7, #4]
   16b48:	0011      	movs	r1, r2
   16b4a:	0018      	movs	r0, r3
   16b4c:	4b03      	ldr	r3, [pc, #12]	; (16b5c <prvTraceSetQueueNumberLow16+0x38>)
   16b4e:	4798      	blx	r3
}
   16b50:	46c0      	nop			; (mov r8, r8)
   16b52:	46bd      	mov	sp, r7
   16b54:	b002      	add	sp, #8
   16b56:	bd80      	pop	{r7, pc}
   16b58:	000169e1 	.word	0x000169e1
   16b5c:	0001a1b9 	.word	0x0001a1b9

00016b60 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   16b60:	b580      	push	{r7, lr}
   16b62:	b082      	sub	sp, #8
   16b64:	af00      	add	r7, sp, #0
   16b66:	6078      	str	r0, [r7, #4]
   16b68:	000a      	movs	r2, r1
   16b6a:	1cbb      	adds	r3, r7, #2
   16b6c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   16b6e:	687b      	ldr	r3, [r7, #4]
   16b70:	0018      	movs	r0, r3
   16b72:	4b09      	ldr	r3, [pc, #36]	; (16b98 <prvTraceSetQueueNumberHigh16+0x38>)
   16b74:	4798      	blx	r3
   16b76:	0003      	movs	r3, r0
   16b78:	041b      	lsls	r3, r3, #16
   16b7a:	0c1a      	lsrs	r2, r3, #16
   16b7c:	1cbb      	adds	r3, r7, #2
   16b7e:	881b      	ldrh	r3, [r3, #0]
   16b80:	041b      	lsls	r3, r3, #16
   16b82:	431a      	orrs	r2, r3
   16b84:	687b      	ldr	r3, [r7, #4]
   16b86:	0011      	movs	r1, r2
   16b88:	0018      	movs	r0, r3
   16b8a:	4b04      	ldr	r3, [pc, #16]	; (16b9c <prvTraceSetQueueNumberHigh16+0x3c>)
   16b8c:	4798      	blx	r3
}
   16b8e:	46c0      	nop			; (mov r8, r8)
   16b90:	46bd      	mov	sp, r7
   16b92:	b002      	add	sp, #8
   16b94:	bd80      	pop	{r7, pc}
   16b96:	46c0      	nop			; (mov r8, r8)
   16b98:	000169e1 	.word	0x000169e1
   16b9c:	0001a1b9 	.word	0x0001a1b9

00016ba0 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   16ba0:	b580      	push	{r7, lr}
   16ba2:	b084      	sub	sp, #16
   16ba4:	af00      	add	r7, sp, #0
   16ba6:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   16ba8:	2300      	movs	r3, #0
   16baa:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   16bac:	2300      	movs	r3, #0
   16bae:	60bb      	str	r3, [r7, #8]
   16bb0:	e018      	b.n	16be4 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   16bb2:	4b14      	ldr	r3, [pc, #80]	; (16c04 <prvAddTaskToStackMonitor+0x64>)
   16bb4:	68ba      	ldr	r2, [r7, #8]
   16bb6:	00d2      	lsls	r2, r2, #3
   16bb8:	58d3      	ldr	r3, [r2, r3]
   16bba:	2b00      	cmp	r3, #0
   16bbc:	d10f      	bne.n	16bde <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   16bbe:	4b11      	ldr	r3, [pc, #68]	; (16c04 <prvAddTaskToStackMonitor+0x64>)
   16bc0:	68ba      	ldr	r2, [r7, #8]
   16bc2:	00d2      	lsls	r2, r2, #3
   16bc4:	6879      	ldr	r1, [r7, #4]
   16bc6:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   16bc8:	4a0e      	ldr	r2, [pc, #56]	; (16c04 <prvAddTaskToStackMonitor+0x64>)
   16bca:	68bb      	ldr	r3, [r7, #8]
   16bcc:	00db      	lsls	r3, r3, #3
   16bce:	18d3      	adds	r3, r2, r3
   16bd0:	3304      	adds	r3, #4
   16bd2:	2201      	movs	r2, #1
   16bd4:	4252      	negs	r2, r2
   16bd6:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   16bd8:	2301      	movs	r3, #1
   16bda:	60fb      	str	r3, [r7, #12]
			break;
   16bdc:	e005      	b.n	16bea <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   16bde:	68bb      	ldr	r3, [r7, #8]
   16be0:	3301      	adds	r3, #1
   16be2:	60bb      	str	r3, [r7, #8]
   16be4:	68bb      	ldr	r3, [r7, #8]
   16be6:	2b09      	cmp	r3, #9
   16be8:	dde3      	ble.n	16bb2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   16bea:	68fb      	ldr	r3, [r7, #12]
   16bec:	2b00      	cmp	r3, #0
   16bee:	d104      	bne.n	16bfa <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   16bf0:	4b05      	ldr	r3, [pc, #20]	; (16c08 <prvAddTaskToStackMonitor+0x68>)
   16bf2:	681b      	ldr	r3, [r3, #0]
   16bf4:	1c5a      	adds	r2, r3, #1
   16bf6:	4b04      	ldr	r3, [pc, #16]	; (16c08 <prvAddTaskToStackMonitor+0x68>)
   16bf8:	601a      	str	r2, [r3, #0]
	}
}
   16bfa:	46c0      	nop			; (mov r8, r8)
   16bfc:	46bd      	mov	sp, r7
   16bfe:	b004      	add	sp, #16
   16c00:	bd80      	pop	{r7, pc}
   16c02:	46c0      	nop			; (mov r8, r8)
   16c04:	20000b58 	.word	0x20000b58
   16c08:	20000ba8 	.word	0x20000ba8

00016c0c <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   16c0c:	b590      	push	{r4, r7, lr}
   16c0e:	b085      	sub	sp, #20
   16c10:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   16c12:	2300      	movs	r3, #0
   16c14:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   16c16:	4b2b      	ldr	r3, [pc, #172]	; (16cc4 <prvReportStackUsage+0xb8>)
   16c18:	681b      	ldr	r3, [r3, #0]
   16c1a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   16c1c:	4b29      	ldr	r3, [pc, #164]	; (16cc4 <prvReportStackUsage+0xb8>)
   16c1e:	681a      	ldr	r2, [r3, #0]
   16c20:	4b29      	ldr	r3, [pc, #164]	; (16cc8 <prvReportStackUsage+0xbc>)
   16c22:	00d2      	lsls	r2, r2, #3
   16c24:	58d3      	ldr	r3, [r2, r3]
   16c26:	2b00      	cmp	r3, #0
   16c28:	d035      	beq.n	16c96 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   16c2a:	4b26      	ldr	r3, [pc, #152]	; (16cc4 <prvReportStackUsage+0xb8>)
   16c2c:	681a      	ldr	r2, [r3, #0]
   16c2e:	4b26      	ldr	r3, [pc, #152]	; (16cc8 <prvReportStackUsage+0xbc>)
   16c30:	00d2      	lsls	r2, r2, #3
   16c32:	58d3      	ldr	r3, [r2, r3]
   16c34:	0018      	movs	r0, r3
   16c36:	4b25      	ldr	r3, [pc, #148]	; (16ccc <prvReportStackUsage+0xc0>)
   16c38:	4798      	blx	r3
   16c3a:	0003      	movs	r3, r0
   16c3c:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   16c3e:	4b21      	ldr	r3, [pc, #132]	; (16cc4 <prvReportStackUsage+0xb8>)
   16c40:	681b      	ldr	r3, [r3, #0]
   16c42:	4a21      	ldr	r2, [pc, #132]	; (16cc8 <prvReportStackUsage+0xbc>)
   16c44:	00db      	lsls	r3, r3, #3
   16c46:	18d3      	adds	r3, r2, r3
   16c48:	3304      	adds	r3, #4
   16c4a:	681a      	ldr	r2, [r3, #0]
   16c4c:	687b      	ldr	r3, [r7, #4]
   16c4e:	429a      	cmp	r2, r3
   16c50:	d907      	bls.n	16c62 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   16c52:	4b1c      	ldr	r3, [pc, #112]	; (16cc4 <prvReportStackUsage+0xb8>)
   16c54:	681b      	ldr	r3, [r3, #0]
   16c56:	4a1c      	ldr	r2, [pc, #112]	; (16cc8 <prvReportStackUsage+0xbc>)
   16c58:	00db      	lsls	r3, r3, #3
   16c5a:	18d3      	adds	r3, r2, r3
   16c5c:	3304      	adds	r3, #4
   16c5e:	687a      	ldr	r2, [r7, #4]
   16c60:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   16c62:	4b18      	ldr	r3, [pc, #96]	; (16cc4 <prvReportStackUsage+0xb8>)
   16c64:	681a      	ldr	r2, [r3, #0]
   16c66:	4b18      	ldr	r3, [pc, #96]	; (16cc8 <prvReportStackUsage+0xbc>)
   16c68:	00d2      	lsls	r2, r2, #3
   16c6a:	58d3      	ldr	r3, [r2, r3]
   16c6c:	0018      	movs	r0, r3
   16c6e:	4b18      	ldr	r3, [pc, #96]	; (16cd0 <prvReportStackUsage+0xc4>)
   16c70:	4798      	blx	r3
   16c72:	0003      	movs	r3, r0
   16c74:	b2db      	uxtb	r3, r3
   16c76:	0019      	movs	r1, r3
   16c78:	4b12      	ldr	r3, [pc, #72]	; (16cc4 <prvReportStackUsage+0xb8>)
   16c7a:	681b      	ldr	r3, [r3, #0]
   16c7c:	4a12      	ldr	r2, [pc, #72]	; (16cc8 <prvReportStackUsage+0xbc>)
   16c7e:	00db      	lsls	r3, r3, #3
   16c80:	18d3      	adds	r3, r2, r3
   16c82:	3304      	adds	r3, #4
   16c84:	681b      	ldr	r3, [r3, #0]
   16c86:	000a      	movs	r2, r1
   16c88:	2103      	movs	r1, #3
   16c8a:	20ea      	movs	r0, #234	; 0xea
   16c8c:	4c11      	ldr	r4, [pc, #68]	; (16cd4 <prvReportStackUsage+0xc8>)
   16c8e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   16c90:	68fb      	ldr	r3, [r7, #12]
   16c92:	3301      	adds	r3, #1
   16c94:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   16c96:	4b0b      	ldr	r3, [pc, #44]	; (16cc4 <prvReportStackUsage+0xb8>)
   16c98:	681b      	ldr	r3, [r3, #0]
   16c9a:	1c5a      	adds	r2, r3, #1
   16c9c:	4b0e      	ldr	r3, [pc, #56]	; (16cd8 <prvReportStackUsage+0xcc>)
   16c9e:	210a      	movs	r1, #10
   16ca0:	0010      	movs	r0, r2
   16ca2:	4798      	blx	r3
   16ca4:	000b      	movs	r3, r1
   16ca6:	001a      	movs	r2, r3
   16ca8:	4b06      	ldr	r3, [pc, #24]	; (16cc4 <prvReportStackUsage+0xb8>)
   16caa:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   16cac:	68fb      	ldr	r3, [r7, #12]
   16cae:	2b00      	cmp	r3, #0
   16cb0:	dc04      	bgt.n	16cbc <prvReportStackUsage+0xb0>
   16cb2:	4b04      	ldr	r3, [pc, #16]	; (16cc4 <prvReportStackUsage+0xb8>)
   16cb4:	681a      	ldr	r2, [r3, #0]
   16cb6:	68bb      	ldr	r3, [r7, #8]
   16cb8:	429a      	cmp	r2, r3
   16cba:	d1af      	bne.n	16c1c <prvReportStackUsage+0x10>
}
   16cbc:	46c0      	nop			; (mov r8, r8)
   16cbe:	46bd      	mov	sp, r7
   16cc0:	b005      	add	sp, #20
   16cc2:	bd90      	pop	{r4, r7, pc}
   16cc4:	20000bac 	.word	0x20000bac
   16cc8:	20000b58 	.word	0x20000b58
   16ccc:	0001b6a1 	.word	0x0001b6a1
   16cd0:	00016a21 	.word	0x00016a21
   16cd4:	00017569 	.word	0x00017569
   16cd8:	000315ed 	.word	0x000315ed

00016cdc <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   16cdc:	b580      	push	{r7, lr}
   16cde:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   16ce0:	4b02      	ldr	r3, [pc, #8]	; (16cec <prvTraceGetCurrentTaskHandle+0x10>)
   16ce2:	4798      	blx	r3
   16ce4:	0003      	movs	r3, r0
}
   16ce6:	0018      	movs	r0, r3
   16ce8:	46bd      	mov	sp, r7
   16cea:	bd80      	pop	{r7, pc}
   16cec:	0001b74d 	.word	0x0001b74d

00016cf0 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   16cf0:	b590      	push	{r4, r7, lr}
   16cf2:	b085      	sub	sp, #20
   16cf4:	af02      	add	r7, sp, #8
   16cf6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   16cf8:	4b14      	ldr	r3, [pc, #80]	; (16d4c <vTraceEnable+0x5c>)
   16cfa:	4798      	blx	r3

	if (startOption == TRC_START)
   16cfc:	687b      	ldr	r3, [r7, #4]
   16cfe:	2b01      	cmp	r3, #1
   16d00:	d102      	bne.n	16d08 <vTraceEnable+0x18>
	{
		vTraceStart();
   16d02:	4b13      	ldr	r3, [pc, #76]	; (16d50 <vTraceEnable+0x60>)
   16d04:	4798      	blx	r3
   16d06:	e00e      	b.n	16d26 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   16d08:	687b      	ldr	r3, [r7, #4]
   16d0a:	2b02      	cmp	r3, #2
   16d0c:	d104      	bne.n	16d18 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   16d0e:	4b11      	ldr	r3, [pc, #68]	; (16d54 <vTraceEnable+0x64>)
   16d10:	0018      	movs	r0, r3
   16d12:	4b11      	ldr	r3, [pc, #68]	; (16d58 <vTraceEnable+0x68>)
   16d14:	4798      	blx	r3
   16d16:	e006      	b.n	16d26 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   16d18:	687b      	ldr	r3, [r7, #4]
   16d1a:	2b00      	cmp	r3, #0
   16d1c:	d003      	beq.n	16d26 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   16d1e:	4b0f      	ldr	r3, [pc, #60]	; (16d5c <vTraceEnable+0x6c>)
   16d20:	0018      	movs	r0, r3
   16d22:	4b0d      	ldr	r3, [pc, #52]	; (16d58 <vTraceEnable+0x68>)
   16d24:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   16d26:	4b0e      	ldr	r3, [pc, #56]	; (16d60 <vTraceEnable+0x70>)
   16d28:	681b      	ldr	r3, [r3, #0]
   16d2a:	2b00      	cmp	r3, #0
   16d2c:	d10a      	bne.n	16d44 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   16d2e:	2396      	movs	r3, #150	; 0x96
   16d30:	005a      	lsls	r2, r3, #1
   16d32:	490c      	ldr	r1, [pc, #48]	; (16d64 <vTraceEnable+0x74>)
   16d34:	480c      	ldr	r0, [pc, #48]	; (16d68 <vTraceEnable+0x78>)
   16d36:	4b0a      	ldr	r3, [pc, #40]	; (16d60 <vTraceEnable+0x70>)
   16d38:	9301      	str	r3, [sp, #4]
   16d3a:	2304      	movs	r3, #4
   16d3c:	9300      	str	r3, [sp, #0]
   16d3e:	2300      	movs	r3, #0
   16d40:	4c0a      	ldr	r4, [pc, #40]	; (16d6c <vTraceEnable+0x7c>)
   16d42:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   16d44:	46c0      	nop			; (mov r8, r8)
   16d46:	46bd      	mov	sp, r7
   16d48:	b003      	add	sp, #12
   16d4a:	bd90      	pop	{r4, r7, pc}
   16d4c:	00017c35 	.word	0x00017c35
   16d50:	0001718d 	.word	0x0001718d
   16d54:	0003531c 	.word	0x0003531c
   16d58:	000182dd 	.word	0x000182dd
   16d5c:	0003535c 	.word	0x0003535c
   16d60:	20000b54 	.word	0x20000b54
   16d64:	00035390 	.word	0x00035390
   16d68:	00016d71 	.word	0x00016d71
   16d6c:	0001a6a5 	.word	0x0001a6a5

00016d70 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   16d70:	b580      	push	{r7, lr}
   16d72:	b082      	sub	sp, #8
   16d74:	af00      	add	r7, sp, #0
   16d76:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   16d78:	4b04      	ldr	r3, [pc, #16]	; (16d8c <TzCtrl+0x1c>)
   16d7a:	4798      	blx	r3
   16d7c:	1e03      	subs	r3, r0, #0
   16d7e:	d001      	beq.n	16d84 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   16d80:	4b03      	ldr	r3, [pc, #12]	; (16d90 <TzCtrl+0x20>)
   16d82:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   16d84:	2004      	movs	r0, #4
   16d86:	4b03      	ldr	r3, [pc, #12]	; (16d94 <TzCtrl+0x24>)
   16d88:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   16d8a:	e7f5      	b.n	16d78 <TzCtrl+0x8>
   16d8c:	000171d1 	.word	0x000171d1
   16d90:	00016c0d 	.word	0x00016c0d
   16d94:	0001aa41 	.word	0x0001aa41

00016d98 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   16d98:	b580      	push	{r7, lr}
   16d9a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   16d9c:	4b60      	ldr	r3, [pc, #384]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16d9e:	681b      	ldr	r3, [r3, #0]
   16da0:	2209      	movs	r2, #9
   16da2:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   16da4:	4b5e      	ldr	r3, [pc, #376]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16da6:	681b      	ldr	r3, [r3, #0]
   16da8:	2264      	movs	r2, #100	; 0x64
   16daa:	210a      	movs	r1, #10
   16dac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   16dae:	4b5c      	ldr	r3, [pc, #368]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16db0:	681b      	ldr	r3, [r3, #0]
   16db2:	2265      	movs	r2, #101	; 0x65
   16db4:	210a      	movs	r1, #10
   16db6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   16db8:	4b59      	ldr	r3, [pc, #356]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16dba:	681b      	ldr	r3, [r3, #0]
   16dbc:	2266      	movs	r2, #102	; 0x66
   16dbe:	210a      	movs	r1, #10
   16dc0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   16dc2:	4b57      	ldr	r3, [pc, #348]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16dc4:	681b      	ldr	r3, [r3, #0]
   16dc6:	2267      	movs	r2, #103	; 0x67
   16dc8:	210f      	movs	r1, #15
   16dca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   16dcc:	4b54      	ldr	r3, [pc, #336]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16dce:	681b      	ldr	r3, [r3, #0]
   16dd0:	2268      	movs	r2, #104	; 0x68
   16dd2:	2105      	movs	r1, #5
   16dd4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   16dd6:	4b52      	ldr	r3, [pc, #328]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16dd8:	681b      	ldr	r3, [r3, #0]
   16dda:	2269      	movs	r2, #105	; 0x69
   16ddc:	2105      	movs	r1, #5
   16dde:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   16de0:	4b4f      	ldr	r3, [pc, #316]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16de2:	681b      	ldr	r3, [r3, #0]
   16de4:	226a      	movs	r2, #106	; 0x6a
   16de6:	2105      	movs	r1, #5
   16de8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   16dea:	4b4d      	ldr	r3, [pc, #308]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16dec:	681b      	ldr	r3, [r3, #0]
   16dee:	226b      	movs	r2, #107	; 0x6b
   16df0:	2105      	movs	r1, #5
   16df2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   16df4:	4b4a      	ldr	r3, [pc, #296]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16df6:	681b      	ldr	r3, [r3, #0]
   16df8:	226c      	movs	r2, #108	; 0x6c
   16dfa:	2105      	movs	r1, #5
   16dfc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   16dfe:	4b48      	ldr	r3, [pc, #288]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e00:	681b      	ldr	r3, [r3, #0]
   16e02:	2270      	movs	r2, #112	; 0x70
   16e04:	210f      	movs	r1, #15
   16e06:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   16e08:	4b45      	ldr	r3, [pc, #276]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e0a:	681b      	ldr	r3, [r3, #0]
   16e0c:	2271      	movs	r2, #113	; 0x71
   16e0e:	210f      	movs	r1, #15
   16e10:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   16e12:	4b43      	ldr	r3, [pc, #268]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e14:	681b      	ldr	r3, [r3, #0]
   16e16:	2272      	movs	r2, #114	; 0x72
   16e18:	210f      	movs	r1, #15
   16e1a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   16e1c:	4b40      	ldr	r3, [pc, #256]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e1e:	681b      	ldr	r3, [r3, #0]
   16e20:	2273      	movs	r2, #115	; 0x73
   16e22:	210f      	movs	r1, #15
   16e24:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   16e26:	4b3e      	ldr	r3, [pc, #248]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e28:	681b      	ldr	r3, [r3, #0]
   16e2a:	2274      	movs	r2, #116	; 0x74
   16e2c:	210f      	movs	r1, #15
   16e2e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   16e30:	4b3b      	ldr	r3, [pc, #236]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e32:	681b      	ldr	r3, [r3, #0]
   16e34:	2275      	movs	r2, #117	; 0x75
   16e36:	210f      	movs	r1, #15
   16e38:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   16e3a:	4b39      	ldr	r3, [pc, #228]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e3c:	681b      	ldr	r3, [r3, #0]
   16e3e:	2276      	movs	r2, #118	; 0x76
   16e40:	210f      	movs	r1, #15
   16e42:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   16e44:	4b36      	ldr	r3, [pc, #216]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e46:	681b      	ldr	r3, [r3, #0]
   16e48:	2277      	movs	r2, #119	; 0x77
   16e4a:	210f      	movs	r1, #15
   16e4c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   16e4e:	4b34      	ldr	r3, [pc, #208]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e50:	681b      	ldr	r3, [r3, #0]
   16e52:	2278      	movs	r2, #120	; 0x78
   16e54:	210f      	movs	r1, #15
   16e56:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   16e58:	4b31      	ldr	r3, [pc, #196]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e5a:	681b      	ldr	r3, [r3, #0]
   16e5c:	227c      	movs	r2, #124	; 0x7c
   16e5e:	2110      	movs	r1, #16
   16e60:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   16e62:	4b2f      	ldr	r3, [pc, #188]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e64:	681b      	ldr	r3, [r3, #0]
   16e66:	227d      	movs	r2, #125	; 0x7d
   16e68:	2110      	movs	r1, #16
   16e6a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   16e6c:	4b2c      	ldr	r3, [pc, #176]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e6e:	681b      	ldr	r3, [r3, #0]
   16e70:	227e      	movs	r2, #126	; 0x7e
   16e72:	2110      	movs	r1, #16
   16e74:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   16e76:	4b2a      	ldr	r3, [pc, #168]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e78:	681b      	ldr	r3, [r3, #0]
   16e7a:	227f      	movs	r2, #127	; 0x7f
   16e7c:	2113      	movs	r1, #19
   16e7e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   16e80:	4b27      	ldr	r3, [pc, #156]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e82:	681b      	ldr	r3, [r3, #0]
   16e84:	2280      	movs	r2, #128	; 0x80
   16e86:	2111      	movs	r1, #17
   16e88:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   16e8a:	4b25      	ldr	r3, [pc, #148]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e8c:	681b      	ldr	r3, [r3, #0]
   16e8e:	2281      	movs	r2, #129	; 0x81
   16e90:	2110      	movs	r1, #16
   16e92:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   16e94:	4b22      	ldr	r3, [pc, #136]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16e96:	681b      	ldr	r3, [r3, #0]
   16e98:	2282      	movs	r2, #130	; 0x82
   16e9a:	2113      	movs	r1, #19
   16e9c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   16e9e:	4b20      	ldr	r3, [pc, #128]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16ea0:	681b      	ldr	r3, [r3, #0]
   16ea2:	2283      	movs	r2, #131	; 0x83
   16ea4:	2113      	movs	r1, #19
   16ea6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   16ea8:	4b1d      	ldr	r3, [pc, #116]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16eaa:	681b      	ldr	r3, [r3, #0]
   16eac:	2284      	movs	r2, #132	; 0x84
   16eae:	2113      	movs	r1, #19
   16eb0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   16eb2:	4b1b      	ldr	r3, [pc, #108]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16eb4:	681b      	ldr	r3, [r3, #0]
   16eb6:	2288      	movs	r2, #136	; 0x88
   16eb8:	2100      	movs	r1, #0
   16eba:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   16ebc:	4b18      	ldr	r3, [pc, #96]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16ebe:	681b      	ldr	r3, [r3, #0]
   16ec0:	228a      	movs	r2, #138	; 0x8a
   16ec2:	21a0      	movs	r1, #160	; 0xa0
   16ec4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   16ec6:	4b16      	ldr	r3, [pc, #88]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16ec8:	681b      	ldr	r3, [r3, #0]
   16eca:	228c      	movs	r2, #140	; 0x8c
   16ecc:	21a0      	movs	r1, #160	; 0xa0
   16ece:	0049      	lsls	r1, r1, #1
   16ed0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   16ed2:	4b13      	ldr	r3, [pc, #76]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16ed4:	681b      	ldr	r3, [r3, #0]
   16ed6:	228e      	movs	r2, #142	; 0x8e
   16ed8:	21f0      	movs	r1, #240	; 0xf0
   16eda:	0049      	lsls	r1, r1, #1
   16edc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   16ede:	4b10      	ldr	r3, [pc, #64]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16ee0:	681b      	ldr	r3, [r3, #0]
   16ee2:	2290      	movs	r2, #144	; 0x90
   16ee4:	490f      	ldr	r1, [pc, #60]	; (16f24 <vTraceInitObjectPropertyTable+0x18c>)
   16ee6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   16ee8:	4b0d      	ldr	r3, [pc, #52]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16eea:	681b      	ldr	r3, [r3, #0]
   16eec:	2292      	movs	r2, #146	; 0x92
   16eee:	490e      	ldr	r1, [pc, #56]	; (16f28 <vTraceInitObjectPropertyTable+0x190>)
   16ef0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   16ef2:	4b0b      	ldr	r3, [pc, #44]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16ef4:	681b      	ldr	r3, [r3, #0]
   16ef6:	2294      	movs	r2, #148	; 0x94
   16ef8:	490c      	ldr	r1, [pc, #48]	; (16f2c <vTraceInitObjectPropertyTable+0x194>)
   16efa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   16efc:	4b08      	ldr	r3, [pc, #32]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16efe:	681b      	ldr	r3, [r3, #0]
   16f00:	2296      	movs	r2, #150	; 0x96
   16f02:	490b      	ldr	r1, [pc, #44]	; (16f30 <vTraceInitObjectPropertyTable+0x198>)
   16f04:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   16f06:	4b06      	ldr	r3, [pc, #24]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16f08:	681b      	ldr	r3, [r3, #0]
   16f0a:	2298      	movs	r2, #152	; 0x98
   16f0c:	218c      	movs	r1, #140	; 0x8c
   16f0e:	00c9      	lsls	r1, r1, #3
   16f10:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   16f12:	4b03      	ldr	r3, [pc, #12]	; (16f20 <vTraceInitObjectPropertyTable+0x188>)
   16f14:	681b      	ldr	r3, [r3, #0]
   16f16:	4a07      	ldr	r2, [pc, #28]	; (16f34 <vTraceInitObjectPropertyTable+0x19c>)
   16f18:	661a      	str	r2, [r3, #96]	; 0x60
}
   16f1a:	46c0      	nop			; (mov r8, r8)
   16f1c:	46bd      	mov	sp, r7
   16f1e:	bd80      	pop	{r7, pc}
   16f20:	20000c6c 	.word	0x20000c6c
   16f24:	000002fd 	.word	0x000002fd
   16f28:	00000352 	.word	0x00000352
   16f2c:	000003a2 	.word	0x000003a2
   16f30:	00000401 	.word	0x00000401
   16f34:	000004bf 	.word	0x000004bf

00016f38 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   16f38:	b580      	push	{r7, lr}
   16f3a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   16f3c:	4b2e      	ldr	r3, [pc, #184]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f3e:	2200      	movs	r2, #0
   16f40:	825a      	strh	r2, [r3, #18]
   16f42:	4b2d      	ldr	r3, [pc, #180]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f44:	8a5a      	ldrh	r2, [r3, #18]
   16f46:	4b2c      	ldr	r3, [pc, #176]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f48:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   16f4a:	4b2b      	ldr	r3, [pc, #172]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f4c:	220a      	movs	r2, #10
   16f4e:	829a      	strh	r2, [r3, #20]
   16f50:	4b29      	ldr	r3, [pc, #164]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f52:	8a9a      	ldrh	r2, [r3, #20]
   16f54:	4b28      	ldr	r3, [pc, #160]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f56:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   16f58:	4b27      	ldr	r3, [pc, #156]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f5a:	2214      	movs	r2, #20
   16f5c:	82da      	strh	r2, [r3, #22]
   16f5e:	4b26      	ldr	r3, [pc, #152]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f60:	8ada      	ldrh	r2, [r3, #22]
   16f62:	4b25      	ldr	r3, [pc, #148]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f64:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   16f66:	4b24      	ldr	r3, [pc, #144]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f68:	221e      	movs	r2, #30
   16f6a:	831a      	strh	r2, [r3, #24]
   16f6c:	4b22      	ldr	r3, [pc, #136]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f6e:	8b1a      	ldrh	r2, [r3, #24]
   16f70:	4b21      	ldr	r3, [pc, #132]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f72:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   16f74:	4b20      	ldr	r3, [pc, #128]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f76:	222d      	movs	r2, #45	; 0x2d
   16f78:	835a      	strh	r2, [r3, #26]
   16f7a:	4b1f      	ldr	r3, [pc, #124]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f7c:	8b5a      	ldrh	r2, [r3, #26]
   16f7e:	4b1e      	ldr	r3, [pc, #120]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f80:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   16f82:	4b1d      	ldr	r3, [pc, #116]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f84:	2232      	movs	r2, #50	; 0x32
   16f86:	839a      	strh	r2, [r3, #28]
   16f88:	4b1b      	ldr	r3, [pc, #108]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f8a:	8b9a      	ldrh	r2, [r3, #28]
   16f8c:	4b1a      	ldr	r3, [pc, #104]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f8e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   16f90:	4b19      	ldr	r3, [pc, #100]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f92:	2237      	movs	r2, #55	; 0x37
   16f94:	83da      	strh	r2, [r3, #30]
   16f96:	4b18      	ldr	r3, [pc, #96]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f98:	8bda      	ldrh	r2, [r3, #30]
   16f9a:	4b17      	ldr	r3, [pc, #92]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16f9c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   16f9e:	4b16      	ldr	r3, [pc, #88]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fa0:	223c      	movs	r2, #60	; 0x3c
   16fa2:	841a      	strh	r2, [r3, #32]
   16fa4:	4b14      	ldr	r3, [pc, #80]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fa6:	8c1a      	ldrh	r2, [r3, #32]
   16fa8:	4b13      	ldr	r3, [pc, #76]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16faa:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   16fac:	4b12      	ldr	r3, [pc, #72]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fae:	2241      	movs	r2, #65	; 0x41
   16fb0:	845a      	strh	r2, [r3, #34]	; 0x22
   16fb2:	4b11      	ldr	r3, [pc, #68]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fb4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   16fb6:	4b10      	ldr	r3, [pc, #64]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fb8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   16fba:	4b0f      	ldr	r3, [pc, #60]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fbc:	2209      	movs	r2, #9
   16fbe:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   16fc0:	4b0d      	ldr	r3, [pc, #52]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fc2:	2213      	movs	r2, #19
   16fc4:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   16fc6:	4b0c      	ldr	r3, [pc, #48]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fc8:	221d      	movs	r2, #29
   16fca:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   16fcc:	4b0a      	ldr	r3, [pc, #40]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fce:	222c      	movs	r2, #44	; 0x2c
   16fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   16fd2:	4b09      	ldr	r3, [pc, #36]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fd4:	2231      	movs	r2, #49	; 0x31
   16fd6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   16fd8:	4b07      	ldr	r3, [pc, #28]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fda:	2236      	movs	r2, #54	; 0x36
   16fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   16fde:	4b06      	ldr	r3, [pc, #24]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fe0:	223b      	movs	r2, #59	; 0x3b
   16fe2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   16fe4:	4b04      	ldr	r3, [pc, #16]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fe6:	2240      	movs	r2, #64	; 0x40
   16fe8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   16fea:	4b03      	ldr	r3, [pc, #12]	; (16ff8 <vTraceInitObjectHandleStack+0xc0>)
   16fec:	2245      	movs	r2, #69	; 0x45
   16fee:	869a      	strh	r2, [r3, #52]	; 0x34
}
   16ff0:	46c0      	nop			; (mov r8, r8)
   16ff2:	46bd      	mov	sp, r7
   16ff4:	bd80      	pop	{r7, pc}
   16ff6:	46c0      	nop			; (mov r8, r8)
   16ff8:	20000bdc 	.word	0x20000bdc

00016ffc <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   16ffc:	b580      	push	{r7, lr}
   16ffe:	b082      	sub	sp, #8
   17000:	af00      	add	r7, sp, #0
   17002:	0002      	movs	r2, r0
   17004:	1dfb      	adds	r3, r7, #7
   17006:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   17008:	1dfb      	adds	r3, r7, #7
   1700a:	781b      	ldrb	r3, [r3, #0]
   1700c:	2b08      	cmp	r3, #8
   1700e:	d816      	bhi.n	1703e <pszTraceGetErrorNotEnoughHandles+0x42>
   17010:	009a      	lsls	r2, r3, #2
   17012:	4b0d      	ldr	r3, [pc, #52]	; (17048 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   17014:	18d3      	adds	r3, r2, r3
   17016:	681b      	ldr	r3, [r3, #0]
   17018:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1701a:	4b0c      	ldr	r3, [pc, #48]	; (1704c <pszTraceGetErrorNotEnoughHandles+0x50>)
   1701c:	e010      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1701e:	4b0c      	ldr	r3, [pc, #48]	; (17050 <pszTraceGetErrorNotEnoughHandles+0x54>)
   17020:	e00e      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   17022:	4b0c      	ldr	r3, [pc, #48]	; (17054 <pszTraceGetErrorNotEnoughHandles+0x58>)
   17024:	e00c      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   17026:	4b0c      	ldr	r3, [pc, #48]	; (17058 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   17028:	e00a      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1702a:	4b0c      	ldr	r3, [pc, #48]	; (1705c <pszTraceGetErrorNotEnoughHandles+0x60>)
   1702c:	e008      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1702e:	4b0c      	ldr	r3, [pc, #48]	; (17060 <pszTraceGetErrorNotEnoughHandles+0x64>)
   17030:	e006      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   17032:	4b0c      	ldr	r3, [pc, #48]	; (17064 <pszTraceGetErrorNotEnoughHandles+0x68>)
   17034:	e004      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   17036:	4b0c      	ldr	r3, [pc, #48]	; (17068 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   17038:	e002      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1703a:	4b0c      	ldr	r3, [pc, #48]	; (1706c <pszTraceGetErrorNotEnoughHandles+0x70>)
   1703c:	e000      	b.n	17040 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1703e:	4b0c      	ldr	r3, [pc, #48]	; (17070 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   17040:	0018      	movs	r0, r3
   17042:	46bd      	mov	sp, r7
   17044:	b002      	add	sp, #8
   17046:	bd80      	pop	{r7, pc}
   17048:	00035698 	.word	0x00035698
   1704c:	00035398 	.word	0x00035398
   17050:	000353e0 	.word	0x000353e0
   17054:	00035428 	.word	0x00035428
   17058:	0003547c 	.word	0x0003547c
   1705c:	000354c8 	.word	0x000354c8
   17060:	00035514 	.word	0x00035514
   17064:	00035560 	.word	0x00035560
   17068:	000355b4 	.word	0x000355b4
   1706c:	0003560c 	.word	0x0003560c
   17070:	00035668 	.word	0x00035668

00017074 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   17074:	b590      	push	{r4, r7, lr}
   17076:	b087      	sub	sp, #28
   17078:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1707a:	2317      	movs	r3, #23
   1707c:	18fb      	adds	r3, r7, r3
   1707e:	2200      	movs	r2, #0
   17080:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   17082:	4b36      	ldr	r3, [pc, #216]	; (1715c <uiTraceStart+0xe8>)
   17084:	681b      	ldr	r3, [r3, #0]
   17086:	2b00      	cmp	r3, #0
   17088:	d10b      	bne.n	170a2 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1708a:	4b34      	ldr	r3, [pc, #208]	; (1715c <uiTraceStart+0xe8>)
   1708c:	681b      	ldr	r3, [r3, #0]
   1708e:	2b00      	cmp	r3, #0
   17090:	d105      	bne.n	1709e <uiTraceStart+0x2a>
   17092:	4b33      	ldr	r3, [pc, #204]	; (17160 <uiTraceStart+0xec>)
   17094:	0018      	movs	r0, r3
   17096:	4b33      	ldr	r3, [pc, #204]	; (17164 <uiTraceStart+0xf0>)
   17098:	4798      	blx	r3
   1709a:	2300      	movs	r3, #0
   1709c:	e059      	b.n	17152 <uiTraceStart+0xde>
		return 0;
   1709e:	2300      	movs	r3, #0
   170a0:	e057      	b.n	17152 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   170a2:	4b2e      	ldr	r3, [pc, #184]	; (1715c <uiTraceStart+0xe8>)
   170a4:	681b      	ldr	r3, [r3, #0]
   170a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   170a8:	2b01      	cmp	r3, #1
   170aa:	d101      	bne.n	170b0 <uiTraceStart+0x3c>
		return 1; /* Already running */
   170ac:	2301      	movs	r3, #1
   170ae:	e050      	b.n	17152 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   170b0:	4b2d      	ldr	r3, [pc, #180]	; (17168 <uiTraceStart+0xf4>)
   170b2:	681b      	ldr	r3, [r3, #0]
   170b4:	2b00      	cmp	r3, #0
   170b6:	d149      	bne.n	1714c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   170b8:	f3ef 8310 	mrs	r3, PRIMASK
   170bc:	60bb      	str	r3, [r7, #8]
  return(result);
   170be:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   170c0:	613b      	str	r3, [r7, #16]
   170c2:	2301      	movs	r3, #1
   170c4:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   170c6:	68fb      	ldr	r3, [r7, #12]
   170c8:	f383 8810 	msr	PRIMASK, r3
   170cc:	4b27      	ldr	r3, [pc, #156]	; (1716c <uiTraceStart+0xf8>)
   170ce:	681b      	ldr	r3, [r3, #0]
   170d0:	1c5a      	adds	r2, r3, #1
   170d2:	4b26      	ldr	r3, [pc, #152]	; (1716c <uiTraceStart+0xf8>)
   170d4:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   170d6:	4b21      	ldr	r3, [pc, #132]	; (1715c <uiTraceStart+0xe8>)
   170d8:	681b      	ldr	r3, [r3, #0]
   170da:	2201      	movs	r2, #1
   170dc:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   170de:	4b24      	ldr	r3, [pc, #144]	; (17170 <uiTraceStart+0xfc>)
   170e0:	4798      	blx	r3
   170e2:	0003      	movs	r3, r0
   170e4:	0018      	movs	r0, r3
   170e6:	4b23      	ldr	r3, [pc, #140]	; (17174 <uiTraceStart+0x100>)
   170e8:	4798      	blx	r3
   170ea:	0003      	movs	r3, r0
   170ec:	001a      	movs	r2, r3
   170ee:	2317      	movs	r3, #23
   170f0:	18fb      	adds	r3, r7, r3
   170f2:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   170f4:	2317      	movs	r3, #23
   170f6:	18fb      	adds	r3, r7, r3
   170f8:	781b      	ldrb	r3, [r3, #0]
   170fa:	2b00      	cmp	r3, #0
   170fc:	d116      	bne.n	1712c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   170fe:	2317      	movs	r3, #23
   17100:	18fc      	adds	r4, r7, r3
   17102:	2003      	movs	r0, #3
   17104:	4b1c      	ldr	r3, [pc, #112]	; (17178 <uiTraceStart+0x104>)
   17106:	4798      	blx	r3
   17108:	0003      	movs	r3, r0
   1710a:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   1710c:	4a1b      	ldr	r2, [pc, #108]	; (1717c <uiTraceStart+0x108>)
   1710e:	2317      	movs	r3, #23
   17110:	18fb      	adds	r3, r7, r3
   17112:	781b      	ldrb	r3, [r3, #0]
   17114:	0019      	movs	r1, r3
   17116:	2003      	movs	r0, #3
   17118:	4b19      	ldr	r3, [pc, #100]	; (17180 <uiTraceStart+0x10c>)
   1711a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1711c:	2317      	movs	r3, #23
   1711e:	18fb      	adds	r3, r7, r3
   17120:	781b      	ldrb	r3, [r3, #0]
   17122:	2200      	movs	r2, #0
   17124:	0019      	movs	r1, r3
   17126:	2003      	movs	r0, #3
   17128:	4b16      	ldr	r3, [pc, #88]	; (17184 <uiTraceStart+0x110>)
   1712a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1712c:	2317      	movs	r3, #23
   1712e:	18fb      	adds	r3, r7, r3
   17130:	781b      	ldrb	r3, [r3, #0]
   17132:	0018      	movs	r0, r3
   17134:	4b14      	ldr	r3, [pc, #80]	; (17188 <uiTraceStart+0x114>)
   17136:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   17138:	4b0c      	ldr	r3, [pc, #48]	; (1716c <uiTraceStart+0xf8>)
   1713a:	681b      	ldr	r3, [r3, #0]
   1713c:	1e5a      	subs	r2, r3, #1
   1713e:	4b0b      	ldr	r3, [pc, #44]	; (1716c <uiTraceStart+0xf8>)
   17140:	601a      	str	r2, [r3, #0]
   17142:	693b      	ldr	r3, [r7, #16]
   17144:	607b      	str	r3, [r7, #4]
   17146:	687b      	ldr	r3, [r7, #4]
   17148:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1714c:	4b03      	ldr	r3, [pc, #12]	; (1715c <uiTraceStart+0xe8>)
   1714e:	681b      	ldr	r3, [r3, #0]
   17150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   17152:	0018      	movs	r0, r3
   17154:	46bd      	mov	sp, r7
   17156:	b007      	add	sp, #28
   17158:	bd90      	pop	{r4, r7, pc}
   1715a:	46c0      	nop			; (mov r8, r8)
   1715c:	20000c6c 	.word	0x20000c6c
   17160:	000356bc 	.word	0x000356bc
   17164:	000182dd 	.word	0x000182dd
   17168:	20000bcc 	.word	0x20000bcc
   1716c:	20000bc4 	.word	0x20000bc4
   17170:	00016cdd 	.word	0x00016cdd
   17174:	00016a21 	.word	0x00016a21
   17178:	00017fc1 	.word	0x00017fc1
   1717c:	00035700 	.word	0x00035700
   17180:	000181f1 	.word	0x000181f1
   17184:	00017955 	.word	0x00017955
   17188:	0001783d 	.word	0x0001783d

0001718c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1718c:	b580      	push	{r7, lr}
   1718e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   17190:	4b02      	ldr	r3, [pc, #8]	; (1719c <vTraceStart+0x10>)
   17192:	4798      	blx	r3
}
   17194:	46c0      	nop			; (mov r8, r8)
   17196:	46bd      	mov	sp, r7
   17198:	bd80      	pop	{r7, pc}
   1719a:	46c0      	nop			; (mov r8, r8)
   1719c:	00017075 	.word	0x00017075

000171a0 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   171a0:	b580      	push	{r7, lr}
   171a2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   171a4:	4b08      	ldr	r3, [pc, #32]	; (171c8 <vTraceStop+0x28>)
   171a6:	681b      	ldr	r3, [r3, #0]
   171a8:	2b00      	cmp	r3, #0
   171aa:	d003      	beq.n	171b4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   171ac:	4b06      	ldr	r3, [pc, #24]	; (171c8 <vTraceStop+0x28>)
   171ae:	681b      	ldr	r3, [r3, #0]
   171b0:	2200      	movs	r2, #0
   171b2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   171b4:	4b05      	ldr	r3, [pc, #20]	; (171cc <vTraceStop+0x2c>)
   171b6:	681b      	ldr	r3, [r3, #0]
   171b8:	2b00      	cmp	r3, #0
   171ba:	d002      	beq.n	171c2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   171bc:	4b03      	ldr	r3, [pc, #12]	; (171cc <vTraceStop+0x2c>)
   171be:	681b      	ldr	r3, [r3, #0]
   171c0:	4798      	blx	r3
	}
}
   171c2:	46c0      	nop			; (mov r8, r8)
   171c4:	46bd      	mov	sp, r7
   171c6:	bd80      	pop	{r7, pc}
   171c8:	20000c6c 	.word	0x20000c6c
   171cc:	20000bd4 	.word	0x20000bd4

000171d0 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   171d0:	b580      	push	{r7, lr}
   171d2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   171d4:	4b05      	ldr	r3, [pc, #20]	; (171ec <xTraceIsRecordingEnabled+0x1c>)
   171d6:	681b      	ldr	r3, [r3, #0]
   171d8:	2b00      	cmp	r3, #0
   171da:	d003      	beq.n	171e4 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   171dc:	4b03      	ldr	r3, [pc, #12]	; (171ec <xTraceIsRecordingEnabled+0x1c>)
   171de:	681b      	ldr	r3, [r3, #0]
   171e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   171e2:	e000      	b.n	171e6 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   171e4:	2300      	movs	r3, #0
	}
}
   171e6:	0018      	movs	r0, r3
   171e8:	46bd      	mov	sp, r7
   171ea:	bd80      	pop	{r7, pc}
   171ec:	20000c6c 	.word	0x20000c6c

000171f0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   171f0:	b590      	push	{r4, r7, lr}
   171f2:	b089      	sub	sp, #36	; 0x24
   171f4:	af00      	add	r7, sp, #0
   171f6:	0002      	movs	r2, r0
   171f8:	1dfb      	adds	r3, r7, #7
   171fa:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   171fc:	1dfb      	adds	r3, r7, #7
   171fe:	781b      	ldrb	r3, [r3, #0]
   17200:	2b00      	cmp	r3, #0
   17202:	d057      	beq.n	172b4 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   17204:	4b2e      	ldr	r3, [pc, #184]	; (172c0 <prvTraceStoreTaskReady+0xd0>)
   17206:	681b      	ldr	r3, [r3, #0]
   17208:	2b00      	cmp	r3, #0
   1720a:	d055      	beq.n	172b8 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   1720c:	1dfb      	adds	r3, r7, #7
   1720e:	781b      	ldrb	r3, [r3, #0]
   17210:	2b0f      	cmp	r3, #15
   17212:	d904      	bls.n	1721e <prvTraceStoreTaskReady+0x2e>
   17214:	4b2b      	ldr	r3, [pc, #172]	; (172c4 <prvTraceStoreTaskReady+0xd4>)
   17216:	0018      	movs	r0, r3
   17218:	4b2b      	ldr	r3, [pc, #172]	; (172c8 <prvTraceStoreTaskReady+0xd8>)
   1721a:	4798      	blx	r3
   1721c:	e04d      	b.n	172ba <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1721e:	4b2b      	ldr	r3, [pc, #172]	; (172cc <prvTraceStoreTaskReady+0xdc>)
   17220:	681b      	ldr	r3, [r3, #0]
   17222:	2b00      	cmp	r3, #0
   17224:	d004      	beq.n	17230 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   17226:	4b2a      	ldr	r3, [pc, #168]	; (172d0 <prvTraceStoreTaskReady+0xe0>)
   17228:	0018      	movs	r0, r3
   1722a:	4b27      	ldr	r3, [pc, #156]	; (172c8 <prvTraceStoreTaskReady+0xd8>)
   1722c:	4798      	blx	r3
		return;
   1722e:	e044      	b.n	172ba <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17230:	f3ef 8310 	mrs	r3, PRIMASK
   17234:	60fb      	str	r3, [r7, #12]
  return(result);
   17236:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   17238:	61fb      	str	r3, [r7, #28]
   1723a:	2301      	movs	r3, #1
   1723c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1723e:	693b      	ldr	r3, [r7, #16]
   17240:	f383 8810 	msr	PRIMASK, r3
   17244:	4b21      	ldr	r3, [pc, #132]	; (172cc <prvTraceStoreTaskReady+0xdc>)
   17246:	681b      	ldr	r3, [r3, #0]
   17248:	1c5a      	adds	r2, r3, #1
   1724a:	4b20      	ldr	r3, [pc, #128]	; (172cc <prvTraceStoreTaskReady+0xdc>)
   1724c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1724e:	4b21      	ldr	r3, [pc, #132]	; (172d4 <prvTraceStoreTaskReady+0xe4>)
   17250:	681b      	ldr	r3, [r3, #0]
   17252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17254:	2b00      	cmp	r3, #0
   17256:	d022      	beq.n	1729e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17258:	231a      	movs	r3, #26
   1725a:	18fc      	adds	r4, r7, r3
   1725c:	4b1e      	ldr	r3, [pc, #120]	; (172d8 <prvTraceStoreTaskReady+0xe8>)
   1725e:	0018      	movs	r0, r3
   17260:	4b1e      	ldr	r3, [pc, #120]	; (172dc <prvTraceStoreTaskReady+0xec>)
   17262:	4798      	blx	r3
   17264:	0003      	movs	r3, r0
   17266:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   17268:	2319      	movs	r3, #25
   1726a:	18fb      	adds	r3, r7, r3
   1726c:	1dfa      	adds	r2, r7, #7
   1726e:	7812      	ldrb	r2, [r2, #0]
   17270:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   17272:	4b1b      	ldr	r3, [pc, #108]	; (172e0 <prvTraceStoreTaskReady+0xf0>)
   17274:	4798      	blx	r3
   17276:	0003      	movs	r3, r0
   17278:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1727a:	697b      	ldr	r3, [r7, #20]
   1727c:	2b00      	cmp	r3, #0
   1727e:	d00e      	beq.n	1729e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   17280:	697b      	ldr	r3, [r7, #20]
   17282:	2202      	movs	r2, #2
   17284:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   17286:	697b      	ldr	r3, [r7, #20]
   17288:	221a      	movs	r2, #26
   1728a:	18ba      	adds	r2, r7, r2
   1728c:	8812      	ldrh	r2, [r2, #0]
   1728e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   17290:	697b      	ldr	r3, [r7, #20]
   17292:	2219      	movs	r2, #25
   17294:	18ba      	adds	r2, r7, r2
   17296:	7812      	ldrb	r2, [r2, #0]
   17298:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1729a:	4b12      	ldr	r3, [pc, #72]	; (172e4 <prvTraceStoreTaskReady+0xf4>)
   1729c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1729e:	4b0b      	ldr	r3, [pc, #44]	; (172cc <prvTraceStoreTaskReady+0xdc>)
   172a0:	681b      	ldr	r3, [r3, #0]
   172a2:	1e5a      	subs	r2, r3, #1
   172a4:	4b09      	ldr	r3, [pc, #36]	; (172cc <prvTraceStoreTaskReady+0xdc>)
   172a6:	601a      	str	r2, [r3, #0]
   172a8:	69fb      	ldr	r3, [r7, #28]
   172aa:	60bb      	str	r3, [r7, #8]
   172ac:	68bb      	ldr	r3, [r7, #8]
   172ae:	f383 8810 	msr	PRIMASK, r3
   172b2:	e002      	b.n	172ba <prvTraceStoreTaskReady+0xca>
		return;
   172b4:	46c0      	nop			; (mov r8, r8)
   172b6:	e000      	b.n	172ba <prvTraceStoreTaskReady+0xca>
		return;
   172b8:	46c0      	nop			; (mov r8, r8)
}
   172ba:	46bd      	mov	sp, r7
   172bc:	b009      	add	sp, #36	; 0x24
   172be:	bd90      	pop	{r4, r7, pc}
   172c0:	2000010c 	.word	0x2000010c
   172c4:	00035a68 	.word	0x00035a68
   172c8:	000182dd 	.word	0x000182dd
   172cc:	20000bc4 	.word	0x20000bc4
   172d0:	00035aa8 	.word	0x00035aa8
   172d4:	20000c6c 	.word	0x20000c6c
   172d8:	0000ffff 	.word	0x0000ffff
   172dc:	000184f1 	.word	0x000184f1
   172e0:	00017e95 	.word	0x00017e95
   172e4:	00018499 	.word	0x00018499

000172e8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   172e8:	b580      	push	{r7, lr}
   172ea:	b08e      	sub	sp, #56	; 0x38
   172ec:	af00      	add	r7, sp, #0
   172ee:	60f8      	str	r0, [r7, #12]
   172f0:	60b9      	str	r1, [r7, #8]
   172f2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   172f4:	4b48      	ldr	r3, [pc, #288]	; (17418 <vTraceStoreMemMangEvent+0x130>)
   172f6:	681b      	ldr	r3, [r3, #0]
   172f8:	2b00      	cmp	r3, #0
   172fa:	d100      	bne.n	172fe <vTraceStoreMemMangEvent+0x16>
   172fc:	e088      	b.n	17410 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   172fe:	687b      	ldr	r3, [r7, #4]
   17300:	2b00      	cmp	r3, #0
   17302:	da03      	bge.n	1730c <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   17304:	687b      	ldr	r3, [r7, #4]
   17306:	425b      	negs	r3, r3
   17308:	637b      	str	r3, [r7, #52]	; 0x34
   1730a:	e001      	b.n	17310 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   1730c:	687b      	ldr	r3, [r7, #4]
   1730e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17310:	f3ef 8310 	mrs	r3, PRIMASK
   17314:	61bb      	str	r3, [r7, #24]
  return(result);
   17316:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   17318:	633b      	str	r3, [r7, #48]	; 0x30
   1731a:	2301      	movs	r3, #1
   1731c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1731e:	69fb      	ldr	r3, [r7, #28]
   17320:	f383 8810 	msr	PRIMASK, r3
   17324:	4b3d      	ldr	r3, [pc, #244]	; (1741c <vTraceStoreMemMangEvent+0x134>)
   17326:	681b      	ldr	r3, [r3, #0]
   17328:	1c5a      	adds	r2, r3, #1
   1732a:	4b3c      	ldr	r3, [pc, #240]	; (1741c <vTraceStoreMemMangEvent+0x134>)
   1732c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1732e:	68bb      	ldr	r3, [r7, #8]
   17330:	2b00      	cmp	r3, #0
   17332:	d005      	beq.n	17340 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   17334:	4b3a      	ldr	r3, [pc, #232]	; (17420 <vTraceStoreMemMangEvent+0x138>)
   17336:	681a      	ldr	r2, [r3, #0]
   17338:	687b      	ldr	r3, [r7, #4]
   1733a:	18d2      	adds	r2, r2, r3
   1733c:	4b38      	ldr	r3, [pc, #224]	; (17420 <vTraceStoreMemMangEvent+0x138>)
   1733e:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   17340:	4b35      	ldr	r3, [pc, #212]	; (17418 <vTraceStoreMemMangEvent+0x130>)
   17342:	681b      	ldr	r3, [r3, #0]
   17344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17346:	2b00      	cmp	r3, #0
   17348:	d057      	beq.n	173fa <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1734a:	20ff      	movs	r0, #255	; 0xff
   1734c:	4b35      	ldr	r3, [pc, #212]	; (17424 <vTraceStoreMemMangEvent+0x13c>)
   1734e:	4798      	blx	r3
   17350:	0003      	movs	r3, r0
   17352:	001a      	movs	r2, r3
   17354:	232f      	movs	r3, #47	; 0x2f
   17356:	18fb      	adds	r3, r7, r3
   17358:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1735a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1735c:	4a32      	ldr	r2, [pc, #200]	; (17428 <vTraceStoreMemMangEvent+0x140>)
   1735e:	0019      	movs	r1, r3
   17360:	0010      	movs	r0, r2
   17362:	4b32      	ldr	r3, [pc, #200]	; (1742c <vTraceStoreMemMangEvent+0x144>)
   17364:	4798      	blx	r3
   17366:	0002      	movs	r2, r0
   17368:	232c      	movs	r3, #44	; 0x2c
   1736a:	18fb      	adds	r3, r7, r3
   1736c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1736e:	4b30      	ldr	r3, [pc, #192]	; (17430 <vTraceStoreMemMangEvent+0x148>)
   17370:	4798      	blx	r3
   17372:	0003      	movs	r3, r0
   17374:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   17376:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17378:	2b00      	cmp	r3, #0
   1737a:	d03e      	beq.n	173fa <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1737e:	222f      	movs	r2, #47	; 0x2f
   17380:	18ba      	adds	r2, r7, r2
   17382:	7812      	ldrb	r2, [r2, #0]
   17384:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   17386:	6abb      	ldr	r3, [r7, #40]	; 0x28
   17388:	2200      	movs	r2, #0
   1738a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1738c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1738e:	222c      	movs	r2, #44	; 0x2c
   17390:	18ba      	adds	r2, r7, r2
   17392:	8812      	ldrh	r2, [r2, #0]
   17394:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17396:	4b27      	ldr	r3, [pc, #156]	; (17434 <vTraceStoreMemMangEvent+0x14c>)
   17398:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1739a:	68bb      	ldr	r3, [r7, #8]
   1739c:	4a22      	ldr	r2, [pc, #136]	; (17428 <vTraceStoreMemMangEvent+0x140>)
   1739e:	0019      	movs	r1, r3
   173a0:	0010      	movs	r0, r2
   173a2:	4b22      	ldr	r3, [pc, #136]	; (1742c <vTraceStoreMemMangEvent+0x144>)
   173a4:	4798      	blx	r3
   173a6:	0002      	movs	r2, r0
   173a8:	2326      	movs	r3, #38	; 0x26
   173aa:	18fb      	adds	r3, r7, r3
   173ac:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   173ae:	2325      	movs	r3, #37	; 0x25
   173b0:	18fb      	adds	r3, r7, r3
   173b2:	2200      	movs	r2, #0
   173b4:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   173b6:	4b1e      	ldr	r3, [pc, #120]	; (17430 <vTraceStoreMemMangEvent+0x148>)
   173b8:	4798      	blx	r3
   173ba:	0003      	movs	r3, r0
   173bc:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   173be:	6a3b      	ldr	r3, [r7, #32]
   173c0:	2b00      	cmp	r3, #0
   173c2:	d01a      	beq.n	173fa <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   173c4:	6a3b      	ldr	r3, [r7, #32]
   173c6:	2226      	movs	r2, #38	; 0x26
   173c8:	18ba      	adds	r2, r7, r2
   173ca:	8812      	ldrh	r2, [r2, #0]
   173cc:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   173ce:	6a3b      	ldr	r3, [r7, #32]
   173d0:	2225      	movs	r2, #37	; 0x25
   173d2:	18ba      	adds	r2, r7, r2
   173d4:	7812      	ldrb	r2, [r2, #0]
   173d6:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   173d8:	68fb      	ldr	r3, [r7, #12]
   173da:	b2db      	uxtb	r3, r3
   173dc:	3301      	adds	r3, #1
   173de:	b2da      	uxtb	r2, r3
   173e0:	6a3b      	ldr	r3, [r7, #32]
   173e2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   173e4:	68fb      	ldr	r3, [r7, #12]
   173e6:	b2da      	uxtb	r2, r3
   173e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   173ea:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   173ec:	4b11      	ldr	r3, [pc, #68]	; (17434 <vTraceStoreMemMangEvent+0x14c>)
   173ee:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   173f0:	4b09      	ldr	r3, [pc, #36]	; (17418 <vTraceStoreMemMangEvent+0x130>)
   173f2:	681b      	ldr	r3, [r3, #0]
   173f4:	4a0a      	ldr	r2, [pc, #40]	; (17420 <vTraceStoreMemMangEvent+0x138>)
   173f6:	6812      	ldr	r2, [r2, #0]
   173f8:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   173fa:	4b08      	ldr	r3, [pc, #32]	; (1741c <vTraceStoreMemMangEvent+0x134>)
   173fc:	681b      	ldr	r3, [r3, #0]
   173fe:	1e5a      	subs	r2, r3, #1
   17400:	4b06      	ldr	r3, [pc, #24]	; (1741c <vTraceStoreMemMangEvent+0x134>)
   17402:	601a      	str	r2, [r3, #0]
   17404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   17406:	617b      	str	r3, [r7, #20]
   17408:	697b      	ldr	r3, [r7, #20]
   1740a:	f383 8810 	msr	PRIMASK, r3
   1740e:	e000      	b.n	17412 <vTraceStoreMemMangEvent+0x12a>
		return;
   17410:	46c0      	nop			; (mov r8, r8)
}
   17412:	46bd      	mov	sp, r7
   17414:	b00e      	add	sp, #56	; 0x38
   17416:	bd80      	pop	{r7, pc}
   17418:	20000c6c 	.word	0x20000c6c
   1741c:	20000bc4 	.word	0x20000bc4
   17420:	20000bd8 	.word	0x20000bd8
   17424:	000184f1 	.word	0x000184f1
   17428:	0000ffff 	.word	0x0000ffff
   1742c:	000176b5 	.word	0x000176b5
   17430:	00017e95 	.word	0x00017e95
   17434:	00018499 	.word	0x00018499

00017438 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   17438:	b590      	push	{r4, r7, lr}
   1743a:	b08b      	sub	sp, #44	; 0x2c
   1743c:	af00      	add	r7, sp, #0
   1743e:	60f8      	str	r0, [r7, #12]
   17440:	607a      	str	r2, [r7, #4]
   17442:	230b      	movs	r3, #11
   17444:	18fb      	adds	r3, r7, r3
   17446:	1c0a      	adds	r2, r1, #0
   17448:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1744a:	68fb      	ldr	r3, [r7, #12]
   1744c:	2bfe      	cmp	r3, #254	; 0xfe
   1744e:	d904      	bls.n	1745a <prvTraceStoreKernelCall+0x22>
   17450:	4b39      	ldr	r3, [pc, #228]	; (17538 <prvTraceStoreKernelCall+0x100>)
   17452:	0018      	movs	r0, r3
   17454:	4b39      	ldr	r3, [pc, #228]	; (1753c <prvTraceStoreKernelCall+0x104>)
   17456:	4798      	blx	r3
   17458:	e06b      	b.n	17532 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1745a:	230b      	movs	r3, #11
   1745c:	18fb      	adds	r3, r7, r3
   1745e:	781b      	ldrb	r3, [r3, #0]
   17460:	2b08      	cmp	r3, #8
   17462:	d904      	bls.n	1746e <prvTraceStoreKernelCall+0x36>
   17464:	4b36      	ldr	r3, [pc, #216]	; (17540 <prvTraceStoreKernelCall+0x108>)
   17466:	0018      	movs	r0, r3
   17468:	4b34      	ldr	r3, [pc, #208]	; (1753c <prvTraceStoreKernelCall+0x104>)
   1746a:	4798      	blx	r3
   1746c:	e061      	b.n	17532 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1746e:	4b35      	ldr	r3, [pc, #212]	; (17544 <prvTraceStoreKernelCall+0x10c>)
   17470:	681a      	ldr	r2, [r3, #0]
   17472:	230b      	movs	r3, #11
   17474:	18fb      	adds	r3, r7, r3
   17476:	781b      	ldrb	r3, [r3, #0]
   17478:	2164      	movs	r1, #100	; 0x64
   1747a:	18d3      	adds	r3, r2, r3
   1747c:	185b      	adds	r3, r3, r1
   1747e:	781b      	ldrb	r3, [r3, #0]
   17480:	001a      	movs	r2, r3
   17482:	687b      	ldr	r3, [r7, #4]
   17484:	429a      	cmp	r2, r3
   17486:	d204      	bcs.n	17492 <prvTraceStoreKernelCall+0x5a>
   17488:	4b2f      	ldr	r3, [pc, #188]	; (17548 <prvTraceStoreKernelCall+0x110>)
   1748a:	0018      	movs	r0, r3
   1748c:	4b2b      	ldr	r3, [pc, #172]	; (1753c <prvTraceStoreKernelCall+0x104>)
   1748e:	4798      	blx	r3
   17490:	e04f      	b.n	17532 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   17492:	4b2e      	ldr	r3, [pc, #184]	; (1754c <prvTraceStoreKernelCall+0x114>)
   17494:	681b      	ldr	r3, [r3, #0]
   17496:	2b00      	cmp	r3, #0
   17498:	d004      	beq.n	174a4 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1749a:	4b2d      	ldr	r3, [pc, #180]	; (17550 <prvTraceStoreKernelCall+0x118>)
   1749c:	0018      	movs	r0, r3
   1749e:	4b27      	ldr	r3, [pc, #156]	; (1753c <prvTraceStoreKernelCall+0x104>)
   174a0:	4798      	blx	r3
		return;
   174a2:	e046      	b.n	17532 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   174a4:	4b2b      	ldr	r3, [pc, #172]	; (17554 <prvTraceStoreKernelCall+0x11c>)
   174a6:	781b      	ldrb	r3, [r3, #0]
   174a8:	2b00      	cmp	r3, #0
   174aa:	d041      	beq.n	17530 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   174ac:	f3ef 8310 	mrs	r3, PRIMASK
   174b0:	617b      	str	r3, [r7, #20]
  return(result);
   174b2:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   174b4:	627b      	str	r3, [r7, #36]	; 0x24
   174b6:	2301      	movs	r3, #1
   174b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   174ba:	69bb      	ldr	r3, [r7, #24]
   174bc:	f383 8810 	msr	PRIMASK, r3
   174c0:	4b22      	ldr	r3, [pc, #136]	; (1754c <prvTraceStoreKernelCall+0x114>)
   174c2:	681b      	ldr	r3, [r3, #0]
   174c4:	1c5a      	adds	r2, r3, #1
   174c6:	4b21      	ldr	r3, [pc, #132]	; (1754c <prvTraceStoreKernelCall+0x114>)
   174c8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   174ca:	4b1e      	ldr	r3, [pc, #120]	; (17544 <prvTraceStoreKernelCall+0x10c>)
   174cc:	681b      	ldr	r3, [r3, #0]
   174ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   174d0:	2b00      	cmp	r3, #0
   174d2:	d022      	beq.n	1751a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   174d4:	2322      	movs	r3, #34	; 0x22
   174d6:	18fc      	adds	r4, r7, r3
   174d8:	4b1f      	ldr	r3, [pc, #124]	; (17558 <prvTraceStoreKernelCall+0x120>)
   174da:	0018      	movs	r0, r3
   174dc:	4b1f      	ldr	r3, [pc, #124]	; (1755c <prvTraceStoreKernelCall+0x124>)
   174de:	4798      	blx	r3
   174e0:	0003      	movs	r3, r0
   174e2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   174e4:	2321      	movs	r3, #33	; 0x21
   174e6:	18fb      	adds	r3, r7, r3
   174e8:	687a      	ldr	r2, [r7, #4]
   174ea:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   174ec:	4b1c      	ldr	r3, [pc, #112]	; (17560 <prvTraceStoreKernelCall+0x128>)
   174ee:	4798      	blx	r3
   174f0:	0003      	movs	r3, r0
   174f2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   174f4:	69fb      	ldr	r3, [r7, #28]
   174f6:	2b00      	cmp	r3, #0
   174f8:	d00f      	beq.n	1751a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   174fa:	69fb      	ldr	r3, [r7, #28]
   174fc:	2222      	movs	r2, #34	; 0x22
   174fe:	18ba      	adds	r2, r7, r2
   17500:	8812      	ldrh	r2, [r2, #0]
   17502:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   17504:	68fb      	ldr	r3, [r7, #12]
   17506:	b2da      	uxtb	r2, r3
   17508:	69fb      	ldr	r3, [r7, #28]
   1750a:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   1750c:	69fb      	ldr	r3, [r7, #28]
   1750e:	2221      	movs	r2, #33	; 0x21
   17510:	18ba      	adds	r2, r7, r2
   17512:	7812      	ldrb	r2, [r2, #0]
   17514:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   17516:	4b13      	ldr	r3, [pc, #76]	; (17564 <prvTraceStoreKernelCall+0x12c>)
   17518:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1751a:	4b0c      	ldr	r3, [pc, #48]	; (1754c <prvTraceStoreKernelCall+0x114>)
   1751c:	681b      	ldr	r3, [r3, #0]
   1751e:	1e5a      	subs	r2, r3, #1
   17520:	4b0a      	ldr	r3, [pc, #40]	; (1754c <prvTraceStoreKernelCall+0x114>)
   17522:	601a      	str	r2, [r3, #0]
   17524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17526:	613b      	str	r3, [r7, #16]
   17528:	693b      	ldr	r3, [r7, #16]
   1752a:	f383 8810 	msr	PRIMASK, r3
   1752e:	e000      	b.n	17532 <prvTraceStoreKernelCall+0xfa>
		return;
   17530:	46c0      	nop			; (mov r8, r8)
}
   17532:	46bd      	mov	sp, r7
   17534:	b00b      	add	sp, #44	; 0x2c
   17536:	bd90      	pop	{r4, r7, pc}
   17538:	00035b18 	.word	0x00035b18
   1753c:	000182dd 	.word	0x000182dd
   17540:	00035b50 	.word	0x00035b50
   17544:	20000c6c 	.word	0x20000c6c
   17548:	00035b98 	.word	0x00035b98
   1754c:	20000bc4 	.word	0x20000bc4
   17550:	00035be0 	.word	0x00035be0
   17554:	20000bd0 	.word	0x20000bd0
   17558:	0000ffff 	.word	0x0000ffff
   1755c:	000184f1 	.word	0x000184f1
   17560:	00017e95 	.word	0x00017e95
   17564:	00018499 	.word	0x00018499

00017568 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   17568:	b580      	push	{r7, lr}
   1756a:	b08a      	sub	sp, #40	; 0x28
   1756c:	af00      	add	r7, sp, #0
   1756e:	60f8      	str	r0, [r7, #12]
   17570:	607a      	str	r2, [r7, #4]
   17572:	603b      	str	r3, [r7, #0]
   17574:	230b      	movs	r3, #11
   17576:	18fb      	adds	r3, r7, r3
   17578:	1c0a      	adds	r2, r1, #0
   1757a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1757c:	68fb      	ldr	r3, [r7, #12]
   1757e:	2bfe      	cmp	r3, #254	; 0xfe
   17580:	d904      	bls.n	1758c <prvTraceStoreKernelCallWithParam+0x24>
   17582:	4b40      	ldr	r3, [pc, #256]	; (17684 <prvTraceStoreKernelCallWithParam+0x11c>)
   17584:	0018      	movs	r0, r3
   17586:	4b40      	ldr	r3, [pc, #256]	; (17688 <prvTraceStoreKernelCallWithParam+0x120>)
   17588:	4798      	blx	r3
   1758a:	e077      	b.n	1767c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1758c:	230b      	movs	r3, #11
   1758e:	18fb      	adds	r3, r7, r3
   17590:	781b      	ldrb	r3, [r3, #0]
   17592:	2b08      	cmp	r3, #8
   17594:	d904      	bls.n	175a0 <prvTraceStoreKernelCallWithParam+0x38>
   17596:	4b3d      	ldr	r3, [pc, #244]	; (1768c <prvTraceStoreKernelCallWithParam+0x124>)
   17598:	0018      	movs	r0, r3
   1759a:	4b3b      	ldr	r3, [pc, #236]	; (17688 <prvTraceStoreKernelCallWithParam+0x120>)
   1759c:	4798      	blx	r3
   1759e:	e06d      	b.n	1767c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   175a0:	4b3b      	ldr	r3, [pc, #236]	; (17690 <prvTraceStoreKernelCallWithParam+0x128>)
   175a2:	681a      	ldr	r2, [r3, #0]
   175a4:	230b      	movs	r3, #11
   175a6:	18fb      	adds	r3, r7, r3
   175a8:	781b      	ldrb	r3, [r3, #0]
   175aa:	2164      	movs	r1, #100	; 0x64
   175ac:	18d3      	adds	r3, r2, r3
   175ae:	185b      	adds	r3, r3, r1
   175b0:	781b      	ldrb	r3, [r3, #0]
   175b2:	001a      	movs	r2, r3
   175b4:	687b      	ldr	r3, [r7, #4]
   175b6:	429a      	cmp	r2, r3
   175b8:	d204      	bcs.n	175c4 <prvTraceStoreKernelCallWithParam+0x5c>
   175ba:	4b36      	ldr	r3, [pc, #216]	; (17694 <prvTraceStoreKernelCallWithParam+0x12c>)
   175bc:	0018      	movs	r0, r3
   175be:	4b32      	ldr	r3, [pc, #200]	; (17688 <prvTraceStoreKernelCallWithParam+0x120>)
   175c0:	4798      	blx	r3
   175c2:	e05b      	b.n	1767c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   175c4:	4b34      	ldr	r3, [pc, #208]	; (17698 <prvTraceStoreKernelCallWithParam+0x130>)
   175c6:	681b      	ldr	r3, [r3, #0]
   175c8:	2b00      	cmp	r3, #0
   175ca:	d004      	beq.n	175d6 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   175cc:	4b33      	ldr	r3, [pc, #204]	; (1769c <prvTraceStoreKernelCallWithParam+0x134>)
   175ce:	0018      	movs	r0, r3
   175d0:	4b2d      	ldr	r3, [pc, #180]	; (17688 <prvTraceStoreKernelCallWithParam+0x120>)
   175d2:	4798      	blx	r3
		return;
   175d4:	e052      	b.n	1767c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   175d6:	f3ef 8310 	mrs	r3, PRIMASK
   175da:	617b      	str	r3, [r7, #20]
  return(result);
   175dc:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   175de:	627b      	str	r3, [r7, #36]	; 0x24
   175e0:	2301      	movs	r3, #1
   175e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   175e4:	69bb      	ldr	r3, [r7, #24]
   175e6:	f383 8810 	msr	PRIMASK, r3
   175ea:	4b2b      	ldr	r3, [pc, #172]	; (17698 <prvTraceStoreKernelCallWithParam+0x130>)
   175ec:	681b      	ldr	r3, [r3, #0]
   175ee:	1c5a      	adds	r2, r3, #1
   175f0:	4b29      	ldr	r3, [pc, #164]	; (17698 <prvTraceStoreKernelCallWithParam+0x130>)
   175f2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   175f4:	4b26      	ldr	r3, [pc, #152]	; (17690 <prvTraceStoreKernelCallWithParam+0x128>)
   175f6:	681b      	ldr	r3, [r3, #0]
   175f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   175fa:	2b00      	cmp	r3, #0
   175fc:	d034      	beq.n	17668 <prvTraceStoreKernelCallWithParam+0x100>
   175fe:	4b28      	ldr	r3, [pc, #160]	; (176a0 <prvTraceStoreKernelCallWithParam+0x138>)
   17600:	781b      	ldrb	r3, [r3, #0]
   17602:	2b00      	cmp	r3, #0
   17604:	d030      	beq.n	17668 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   17606:	20ff      	movs	r0, #255	; 0xff
   17608:	4b26      	ldr	r3, [pc, #152]	; (176a4 <prvTraceStoreKernelCallWithParam+0x13c>)
   1760a:	4798      	blx	r3
   1760c:	0003      	movs	r3, r0
   1760e:	001a      	movs	r2, r3
   17610:	2323      	movs	r3, #35	; 0x23
   17612:	18fb      	adds	r3, r7, r3
   17614:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   17616:	683b      	ldr	r3, [r7, #0]
   17618:	0019      	movs	r1, r3
   1761a:	20ff      	movs	r0, #255	; 0xff
   1761c:	4b22      	ldr	r3, [pc, #136]	; (176a8 <prvTraceStoreKernelCallWithParam+0x140>)
   1761e:	4798      	blx	r3
   17620:	0002      	movs	r2, r0
   17622:	2322      	movs	r3, #34	; 0x22
   17624:	18fb      	adds	r3, r7, r3
   17626:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   17628:	2321      	movs	r3, #33	; 0x21
   1762a:	18fb      	adds	r3, r7, r3
   1762c:	687a      	ldr	r2, [r7, #4]
   1762e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   17630:	4b1e      	ldr	r3, [pc, #120]	; (176ac <prvTraceStoreKernelCallWithParam+0x144>)
   17632:	4798      	blx	r3
   17634:	0003      	movs	r3, r0
   17636:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   17638:	69fb      	ldr	r3, [r7, #28]
   1763a:	2b00      	cmp	r3, #0
   1763c:	d014      	beq.n	17668 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   1763e:	69fb      	ldr	r3, [r7, #28]
   17640:	2223      	movs	r2, #35	; 0x23
   17642:	18ba      	adds	r2, r7, r2
   17644:	7812      	ldrb	r2, [r2, #0]
   17646:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   17648:	68fb      	ldr	r3, [r7, #12]
   1764a:	b2da      	uxtb	r2, r3
   1764c:	69fb      	ldr	r3, [r7, #28]
   1764e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   17650:	69fb      	ldr	r3, [r7, #28]
   17652:	2221      	movs	r2, #33	; 0x21
   17654:	18ba      	adds	r2, r7, r2
   17656:	7812      	ldrb	r2, [r2, #0]
   17658:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   1765a:	69fb      	ldr	r3, [r7, #28]
   1765c:	2222      	movs	r2, #34	; 0x22
   1765e:	18ba      	adds	r2, r7, r2
   17660:	7812      	ldrb	r2, [r2, #0]
   17662:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   17664:	4b12      	ldr	r3, [pc, #72]	; (176b0 <prvTraceStoreKernelCallWithParam+0x148>)
   17666:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   17668:	4b0b      	ldr	r3, [pc, #44]	; (17698 <prvTraceStoreKernelCallWithParam+0x130>)
   1766a:	681b      	ldr	r3, [r3, #0]
   1766c:	1e5a      	subs	r2, r3, #1
   1766e:	4b0a      	ldr	r3, [pc, #40]	; (17698 <prvTraceStoreKernelCallWithParam+0x130>)
   17670:	601a      	str	r2, [r3, #0]
   17672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   17674:	613b      	str	r3, [r7, #16]
   17676:	693b      	ldr	r3, [r7, #16]
   17678:	f383 8810 	msr	PRIMASK, r3
}
   1767c:	46bd      	mov	sp, r7
   1767e:	b00a      	add	sp, #40	; 0x28
   17680:	bd80      	pop	{r7, pc}
   17682:	46c0      	nop			; (mov r8, r8)
   17684:	00035c18 	.word	0x00035c18
   17688:	000182dd 	.word	0x000182dd
   1768c:	00035c58 	.word	0x00035c58
   17690:	20000c6c 	.word	0x20000c6c
   17694:	00035ca8 	.word	0x00035ca8
   17698:	20000bc4 	.word	0x20000bc4
   1769c:	00035cf8 	.word	0x00035cf8
   176a0:	20000bd0 	.word	0x20000bd0
   176a4:	000184f1 	.word	0x000184f1
   176a8:	000176b5 	.word	0x000176b5
   176ac:	00017e95 	.word	0x00017e95
   176b0:	00018499 	.word	0x00018499

000176b4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   176b4:	b580      	push	{r7, lr}
   176b6:	b084      	sub	sp, #16
   176b8:	af00      	add	r7, sp, #0
   176ba:	6078      	str	r0, [r7, #4]
   176bc:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   176be:	687b      	ldr	r3, [r7, #4]
   176c0:	2bff      	cmp	r3, #255	; 0xff
   176c2:	d009      	beq.n	176d8 <prvTraceGetParam+0x24>
   176c4:	687b      	ldr	r3, [r7, #4]
   176c6:	4a19      	ldr	r2, [pc, #100]	; (1772c <prvTraceGetParam+0x78>)
   176c8:	4293      	cmp	r3, r2
   176ca:	d005      	beq.n	176d8 <prvTraceGetParam+0x24>
   176cc:	4b18      	ldr	r3, [pc, #96]	; (17730 <prvTraceGetParam+0x7c>)
   176ce:	0018      	movs	r0, r3
   176d0:	4b18      	ldr	r3, [pc, #96]	; (17734 <prvTraceGetParam+0x80>)
   176d2:	4798      	blx	r3
   176d4:	683b      	ldr	r3, [r7, #0]
   176d6:	e024      	b.n	17722 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   176d8:	683a      	ldr	r2, [r7, #0]
   176da:	687b      	ldr	r3, [r7, #4]
   176dc:	429a      	cmp	r2, r3
   176de:	d801      	bhi.n	176e4 <prvTraceGetParam+0x30>
	{
		return param;
   176e0:	683b      	ldr	r3, [r7, #0]
   176e2:	e01e      	b.n	17722 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   176e4:	4b14      	ldr	r3, [pc, #80]	; (17738 <prvTraceGetParam+0x84>)
   176e6:	4798      	blx	r3
   176e8:	0003      	movs	r3, r0
   176ea:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   176ec:	68fb      	ldr	r3, [r7, #12]
   176ee:	2b00      	cmp	r3, #0
   176f0:	d014      	beq.n	1771c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   176f2:	68fb      	ldr	r3, [r7, #12]
   176f4:	2201      	movs	r2, #1
   176f6:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   176f8:	687b      	ldr	r3, [r7, #4]
   176fa:	43db      	mvns	r3, r3
   176fc:	683a      	ldr	r2, [r7, #0]
   176fe:	4013      	ands	r3, r2
   17700:	0a1b      	lsrs	r3, r3, #8
   17702:	b2da      	uxtb	r2, r3
   17704:	68fb      	ldr	r3, [r7, #12]
   17706:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   17708:	687b      	ldr	r3, [r7, #4]
   1770a:	43db      	mvns	r3, r3
   1770c:	683a      	ldr	r2, [r7, #0]
   1770e:	4013      	ands	r3, r2
   17710:	0c1b      	lsrs	r3, r3, #16
   17712:	b29a      	uxth	r2, r3
   17714:	68fb      	ldr	r3, [r7, #12]
   17716:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   17718:	4b08      	ldr	r3, [pc, #32]	; (1773c <prvTraceGetParam+0x88>)
   1771a:	4798      	blx	r3
		}

		return param & param_max;
   1771c:	683b      	ldr	r3, [r7, #0]
   1771e:	687a      	ldr	r2, [r7, #4]
   17720:	4013      	ands	r3, r2
	}
}
   17722:	0018      	movs	r0, r3
   17724:	46bd      	mov	sp, r7
   17726:	b004      	add	sp, #16
   17728:	bd80      	pop	{r7, pc}
   1772a:	46c0      	nop			; (mov r8, r8)
   1772c:	0000ffff 	.word	0x0000ffff
   17730:	00035d30 	.word	0x00035d30
   17734:	000182dd 	.word	0x000182dd
   17738:	00017e95 	.word	0x00017e95
   1773c:	00018499 	.word	0x00018499

00017740 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   17740:	b580      	push	{r7, lr}
   17742:	b08a      	sub	sp, #40	; 0x28
   17744:	af00      	add	r7, sp, #0
   17746:	6078      	str	r0, [r7, #4]
   17748:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   1774a:	2326      	movs	r3, #38	; 0x26
   1774c:	18fb      	adds	r3, r7, r3
   1774e:	2200      	movs	r2, #0
   17750:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   17752:	687b      	ldr	r3, [r7, #4]
   17754:	2bfe      	cmp	r3, #254	; 0xfe
   17756:	d904      	bls.n	17762 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   17758:	4b2d      	ldr	r3, [pc, #180]	; (17810 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   1775a:	0018      	movs	r0, r3
   1775c:	4b2d      	ldr	r3, [pc, #180]	; (17814 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   1775e:	4798      	blx	r3
   17760:	e053      	b.n	1780a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   17762:	4b2d      	ldr	r3, [pc, #180]	; (17818 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17764:	681b      	ldr	r3, [r3, #0]
   17766:	2b00      	cmp	r3, #0
   17768:	d004      	beq.n	17774 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   1776a:	4b2c      	ldr	r3, [pc, #176]	; (1781c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   1776c:	0018      	movs	r0, r3
   1776e:	4b29      	ldr	r3, [pc, #164]	; (17814 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   17770:	4798      	blx	r3
		return;
   17772:	e04a      	b.n	1780a <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17774:	f3ef 8310 	mrs	r3, PRIMASK
   17778:	613b      	str	r3, [r7, #16]
  return(result);
   1777a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   1777c:	623b      	str	r3, [r7, #32]
   1777e:	2301      	movs	r3, #1
   17780:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17782:	697b      	ldr	r3, [r7, #20]
   17784:	f383 8810 	msr	PRIMASK, r3
   17788:	4b23      	ldr	r3, [pc, #140]	; (17818 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   1778a:	681b      	ldr	r3, [r3, #0]
   1778c:	1c5a      	adds	r2, r3, #1
   1778e:	4b22      	ldr	r3, [pc, #136]	; (17818 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   17790:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   17792:	4b23      	ldr	r3, [pc, #140]	; (17820 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   17794:	681b      	ldr	r3, [r3, #0]
   17796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17798:	2b00      	cmp	r3, #0
   1779a:	d02c      	beq.n	177f6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   1779c:	4b21      	ldr	r3, [pc, #132]	; (17824 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   1779e:	781b      	ldrb	r3, [r3, #0]
   177a0:	2b00      	cmp	r3, #0
   177a2:	d028      	beq.n	177f6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   177a4:	20ff      	movs	r0, #255	; 0xff
   177a6:	4b20      	ldr	r3, [pc, #128]	; (17828 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   177a8:	4798      	blx	r3
   177aa:	0003      	movs	r3, r0
   177ac:	001a      	movs	r2, r3
   177ae:	231f      	movs	r3, #31
   177b0:	18fb      	adds	r3, r7, r3
   177b2:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   177b4:	683b      	ldr	r3, [r7, #0]
   177b6:	4a1d      	ldr	r2, [pc, #116]	; (1782c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   177b8:	0019      	movs	r1, r3
   177ba:	0010      	movs	r0, r2
   177bc:	4b1c      	ldr	r3, [pc, #112]	; (17830 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   177be:	4798      	blx	r3
   177c0:	0002      	movs	r2, r0
   177c2:	2326      	movs	r3, #38	; 0x26
   177c4:	18fb      	adds	r3, r7, r3
   177c6:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   177c8:	4b1a      	ldr	r3, [pc, #104]	; (17834 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   177ca:	4798      	blx	r3
   177cc:	0003      	movs	r3, r0
   177ce:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   177d0:	69bb      	ldr	r3, [r7, #24]
   177d2:	2b00      	cmp	r3, #0
   177d4:	d00f      	beq.n	177f6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   177d6:	69bb      	ldr	r3, [r7, #24]
   177d8:	221f      	movs	r2, #31
   177da:	18ba      	adds	r2, r7, r2
   177dc:	7812      	ldrb	r2, [r2, #0]
   177de:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   177e0:	687b      	ldr	r3, [r7, #4]
   177e2:	b2da      	uxtb	r2, r3
   177e4:	69bb      	ldr	r3, [r7, #24]
   177e6:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   177e8:	69bb      	ldr	r3, [r7, #24]
   177ea:	2226      	movs	r2, #38	; 0x26
   177ec:	18ba      	adds	r2, r7, r2
   177ee:	8812      	ldrh	r2, [r2, #0]
   177f0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   177f2:	4b11      	ldr	r3, [pc, #68]	; (17838 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   177f4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   177f6:	4b08      	ldr	r3, [pc, #32]	; (17818 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   177f8:	681b      	ldr	r3, [r3, #0]
   177fa:	1e5a      	subs	r2, r3, #1
   177fc:	4b06      	ldr	r3, [pc, #24]	; (17818 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   177fe:	601a      	str	r2, [r3, #0]
   17800:	6a3b      	ldr	r3, [r7, #32]
   17802:	60fb      	str	r3, [r7, #12]
   17804:	68fb      	ldr	r3, [r7, #12]
   17806:	f383 8810 	msr	PRIMASK, r3
}
   1780a:	46bd      	mov	sp, r7
   1780c:	b00a      	add	sp, #40	; 0x28
   1780e:	bd80      	pop	{r7, pc}
   17810:	00035d6c 	.word	0x00035d6c
   17814:	000182dd 	.word	0x000182dd
   17818:	20000bc4 	.word	0x20000bc4
   1781c:	00035dc4 	.word	0x00035dc4
   17820:	20000c6c 	.word	0x20000c6c
   17824:	20000bd0 	.word	0x20000bd0
   17828:	000184f1 	.word	0x000184f1
   1782c:	0000ffff 	.word	0x0000ffff
   17830:	000176b5 	.word	0x000176b5
   17834:	00017e95 	.word	0x00017e95
   17838:	00018499 	.word	0x00018499

0001783c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   1783c:	b590      	push	{r4, r7, lr}
   1783e:	b089      	sub	sp, #36	; 0x24
   17840:	af00      	add	r7, sp, #0
   17842:	0002      	movs	r2, r0
   17844:	1dfb      	adds	r3, r7, #7
   17846:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   17848:	1dfb      	adds	r3, r7, #7
   1784a:	781b      	ldrb	r3, [r3, #0]
   1784c:	2b0f      	cmp	r3, #15
   1784e:	d904      	bls.n	1785a <prvTraceStoreTaskswitch+0x1e>
   17850:	4b34      	ldr	r3, [pc, #208]	; (17924 <prvTraceStoreTaskswitch+0xe8>)
   17852:	0018      	movs	r0, r3
   17854:	4b34      	ldr	r3, [pc, #208]	; (17928 <prvTraceStoreTaskswitch+0xec>)
   17856:	4798      	blx	r3
   17858:	e061      	b.n	1791e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1785a:	f3ef 8310 	mrs	r3, PRIMASK
   1785e:	60fb      	str	r3, [r7, #12]
  return(result);
   17860:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   17862:	61fb      	str	r3, [r7, #28]
   17864:	2301      	movs	r3, #1
   17866:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   17868:	693b      	ldr	r3, [r7, #16]
   1786a:	f383 8810 	msr	PRIMASK, r3
   1786e:	4b2f      	ldr	r3, [pc, #188]	; (1792c <prvTraceStoreTaskswitch+0xf0>)
   17870:	681b      	ldr	r3, [r3, #0]
   17872:	1c5a      	adds	r2, r3, #1
   17874:	4b2d      	ldr	r3, [pc, #180]	; (1792c <prvTraceStoreTaskswitch+0xf0>)
   17876:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   17878:	4b2d      	ldr	r3, [pc, #180]	; (17930 <prvTraceStoreTaskswitch+0xf4>)
   1787a:	781b      	ldrb	r3, [r3, #0]
   1787c:	1dfa      	adds	r2, r7, #7
   1787e:	7812      	ldrb	r2, [r2, #0]
   17880:	429a      	cmp	r2, r3
   17882:	d042      	beq.n	1790a <prvTraceStoreTaskswitch+0xce>
   17884:	4b2b      	ldr	r3, [pc, #172]	; (17934 <prvTraceStoreTaskswitch+0xf8>)
   17886:	681b      	ldr	r3, [r3, #0]
   17888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1788a:	2b00      	cmp	r3, #0
   1788c:	d03d      	beq.n	1790a <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   1788e:	4b2a      	ldr	r3, [pc, #168]	; (17938 <prvTraceStoreTaskswitch+0xfc>)
   17890:	2200      	movs	r2, #0
   17892:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   17894:	231a      	movs	r3, #26
   17896:	18fc      	adds	r4, r7, r3
   17898:	4b28      	ldr	r3, [pc, #160]	; (1793c <prvTraceStoreTaskswitch+0x100>)
   1789a:	0018      	movs	r0, r3
   1789c:	4b28      	ldr	r3, [pc, #160]	; (17940 <prvTraceStoreTaskswitch+0x104>)
   1789e:	4798      	blx	r3
   178a0:	0003      	movs	r3, r0
   178a2:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   178a4:	4b22      	ldr	r3, [pc, #136]	; (17930 <prvTraceStoreTaskswitch+0xf4>)
   178a6:	1dfa      	adds	r2, r7, #7
   178a8:	7812      	ldrb	r2, [r2, #0]
   178aa:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   178ac:	2319      	movs	r3, #25
   178ae:	18fb      	adds	r3, r7, r3
   178b0:	4a1f      	ldr	r2, [pc, #124]	; (17930 <prvTraceStoreTaskswitch+0xf4>)
   178b2:	7812      	ldrb	r2, [r2, #0]
   178b4:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   178b6:	4b23      	ldr	r3, [pc, #140]	; (17944 <prvTraceStoreTaskswitch+0x108>)
   178b8:	4798      	blx	r3
   178ba:	0003      	movs	r3, r0
   178bc:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   178be:	697b      	ldr	r3, [r7, #20]
   178c0:	2b00      	cmp	r3, #0
   178c2:	d022      	beq.n	1790a <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   178c4:	4b1a      	ldr	r3, [pc, #104]	; (17930 <prvTraceStoreTaskswitch+0xf4>)
   178c6:	781b      	ldrb	r3, [r3, #0]
   178c8:	0019      	movs	r1, r3
   178ca:	2003      	movs	r0, #3
   178cc:	4b1e      	ldr	r3, [pc, #120]	; (17948 <prvTraceStoreTaskswitch+0x10c>)
   178ce:	4798      	blx	r3
   178d0:	0003      	movs	r3, r0
   178d2:	2b01      	cmp	r3, #1
   178d4:	d103      	bne.n	178de <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   178d6:	697b      	ldr	r3, [r7, #20]
   178d8:	2207      	movs	r2, #7
   178da:	701a      	strb	r2, [r3, #0]
   178dc:	e002      	b.n	178e4 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   178de:	697b      	ldr	r3, [r7, #20]
   178e0:	2206      	movs	r2, #6
   178e2:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   178e4:	697b      	ldr	r3, [r7, #20]
   178e6:	221a      	movs	r2, #26
   178e8:	18ba      	adds	r2, r7, r2
   178ea:	8812      	ldrh	r2, [r2, #0]
   178ec:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   178ee:	697b      	ldr	r3, [r7, #20]
   178f0:	2219      	movs	r2, #25
   178f2:	18ba      	adds	r2, r7, r2
   178f4:	7812      	ldrb	r2, [r2, #0]
   178f6:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   178f8:	4b0d      	ldr	r3, [pc, #52]	; (17930 <prvTraceStoreTaskswitch+0xf4>)
   178fa:	781b      	ldrb	r3, [r3, #0]
   178fc:	2201      	movs	r2, #1
   178fe:	0019      	movs	r1, r3
   17900:	2003      	movs	r0, #3
   17902:	4b12      	ldr	r3, [pc, #72]	; (1794c <prvTraceStoreTaskswitch+0x110>)
   17904:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   17906:	4b12      	ldr	r3, [pc, #72]	; (17950 <prvTraceStoreTaskswitch+0x114>)
   17908:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   1790a:	4b08      	ldr	r3, [pc, #32]	; (1792c <prvTraceStoreTaskswitch+0xf0>)
   1790c:	681b      	ldr	r3, [r3, #0]
   1790e:	1e5a      	subs	r2, r3, #1
   17910:	4b06      	ldr	r3, [pc, #24]	; (1792c <prvTraceStoreTaskswitch+0xf0>)
   17912:	601a      	str	r2, [r3, #0]
   17914:	69fb      	ldr	r3, [r7, #28]
   17916:	60bb      	str	r3, [r7, #8]
   17918:	68bb      	ldr	r3, [r7, #8]
   1791a:	f383 8810 	msr	PRIMASK, r3
}
   1791e:	46bd      	mov	sp, r7
   17920:	b009      	add	sp, #36	; 0x24
   17922:	bd90      	pop	{r4, r7, pc}
   17924:	00035dfc 	.word	0x00035dfc
   17928:	000182dd 	.word	0x000182dd
   1792c:	20000bc4 	.word	0x20000bc4
   17930:	20000bd0 	.word	0x20000bd0
   17934:	20000c6c 	.word	0x20000c6c
   17938:	20000bb0 	.word	0x20000bb0
   1793c:	0000ffff 	.word	0x0000ffff
   17940:	000184f1 	.word	0x000184f1
   17944:	00017e95 	.word	0x00017e95
   17948:	00017b39 	.word	0x00017b39
   1794c:	00017a95 	.word	0x00017a95
   17950:	00018499 	.word	0x00018499

00017954 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   17954:	b590      	push	{r4, r7, lr}
   17956:	b083      	sub	sp, #12
   17958:	af00      	add	r7, sp, #0
   1795a:	0004      	movs	r4, r0
   1795c:	0008      	movs	r0, r1
   1795e:	0011      	movs	r1, r2
   17960:	1dfb      	adds	r3, r7, #7
   17962:	1c22      	adds	r2, r4, #0
   17964:	701a      	strb	r2, [r3, #0]
   17966:	1dbb      	adds	r3, r7, #6
   17968:	1c02      	adds	r2, r0, #0
   1796a:	701a      	strb	r2, [r3, #0]
   1796c:	1d7b      	adds	r3, r7, #5
   1796e:	1c0a      	adds	r2, r1, #0
   17970:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   17972:	1dfb      	adds	r3, r7, #7
   17974:	781b      	ldrb	r3, [r3, #0]
   17976:	2b08      	cmp	r3, #8
   17978:	d904      	bls.n	17984 <prvTraceSetPriorityProperty+0x30>
   1797a:	4b1a      	ldr	r3, [pc, #104]	; (179e4 <prvTraceSetPriorityProperty+0x90>)
   1797c:	0018      	movs	r0, r3
   1797e:	4b1a      	ldr	r3, [pc, #104]	; (179e8 <prvTraceSetPriorityProperty+0x94>)
   17980:	4798      	blx	r3
   17982:	e02c      	b.n	179de <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   17984:	4b19      	ldr	r3, [pc, #100]	; (179ec <prvTraceSetPriorityProperty+0x98>)
   17986:	681a      	ldr	r2, [r3, #0]
   17988:	1dfb      	adds	r3, r7, #7
   1798a:	781b      	ldrb	r3, [r3, #0]
   1798c:	2164      	movs	r1, #100	; 0x64
   1798e:	18d3      	adds	r3, r2, r3
   17990:	185b      	adds	r3, r3, r1
   17992:	781b      	ldrb	r3, [r3, #0]
   17994:	1dba      	adds	r2, r7, #6
   17996:	7812      	ldrb	r2, [r2, #0]
   17998:	429a      	cmp	r2, r3
   1799a:	d904      	bls.n	179a6 <prvTraceSetPriorityProperty+0x52>
   1799c:	4b14      	ldr	r3, [pc, #80]	; (179f0 <prvTraceSetPriorityProperty+0x9c>)
   1799e:	0018      	movs	r0, r3
   179a0:	4b11      	ldr	r3, [pc, #68]	; (179e8 <prvTraceSetPriorityProperty+0x94>)
   179a2:	4798      	blx	r3
   179a4:	e01b      	b.n	179de <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   179a6:	4b11      	ldr	r3, [pc, #68]	; (179ec <prvTraceSetPriorityProperty+0x98>)
   179a8:	681c      	ldr	r4, [r3, #0]
   179aa:	1dfb      	adds	r3, r7, #7
   179ac:	781a      	ldrb	r2, [r3, #0]
   179ae:	1dbb      	adds	r3, r7, #6
   179b0:	781b      	ldrb	r3, [r3, #0]
   179b2:	0011      	movs	r1, r2
   179b4:	0018      	movs	r0, r3
   179b6:	4b0f      	ldr	r3, [pc, #60]	; (179f4 <prvTraceSetPriorityProperty+0xa0>)
   179b8:	4798      	blx	r3
   179ba:	0003      	movs	r3, r0
   179bc:	0018      	movs	r0, r3
   179be:	4b0b      	ldr	r3, [pc, #44]	; (179ec <prvTraceSetPriorityProperty+0x98>)
   179c0:	681a      	ldr	r2, [r3, #0]
   179c2:	1dfb      	adds	r3, r7, #7
   179c4:	781b      	ldrb	r3, [r3, #0]
   179c6:	2170      	movs	r1, #112	; 0x70
   179c8:	18d3      	adds	r3, r2, r3
   179ca:	185b      	adds	r3, r3, r1
   179cc:	781b      	ldrb	r3, [r3, #0]
   179ce:	18c3      	adds	r3, r0, r3
   179d0:	3301      	adds	r3, #1
   179d2:	229c      	movs	r2, #156	; 0x9c
   179d4:	18e3      	adds	r3, r4, r3
   179d6:	189b      	adds	r3, r3, r2
   179d8:	1d7a      	adds	r2, r7, #5
   179da:	7812      	ldrb	r2, [r2, #0]
   179dc:	701a      	strb	r2, [r3, #0]
}
   179de:	46bd      	mov	sp, r7
   179e0:	b003      	add	sp, #12
   179e2:	bd90      	pop	{r4, r7, pc}
   179e4:	00035f90 	.word	0x00035f90
   179e8:	000182dd 	.word	0x000182dd
   179ec:	20000c6c 	.word	0x20000c6c
   179f0:	00035fdc 	.word	0x00035fdc
   179f4:	00017ee9 	.word	0x00017ee9

000179f8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   179f8:	b590      	push	{r4, r7, lr}
   179fa:	b083      	sub	sp, #12
   179fc:	af00      	add	r7, sp, #0
   179fe:	0002      	movs	r2, r0
   17a00:	1dfb      	adds	r3, r7, #7
   17a02:	701a      	strb	r2, [r3, #0]
   17a04:	1dbb      	adds	r3, r7, #6
   17a06:	1c0a      	adds	r2, r1, #0
   17a08:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   17a0a:	1dfb      	adds	r3, r7, #7
   17a0c:	781b      	ldrb	r3, [r3, #0]
   17a0e:	2b08      	cmp	r3, #8
   17a10:	d905      	bls.n	17a1e <prvTraceGetPriorityProperty+0x26>
   17a12:	4b1b      	ldr	r3, [pc, #108]	; (17a80 <prvTraceGetPriorityProperty+0x88>)
   17a14:	0018      	movs	r0, r3
   17a16:	4b1b      	ldr	r3, [pc, #108]	; (17a84 <prvTraceGetPriorityProperty+0x8c>)
   17a18:	4798      	blx	r3
   17a1a:	2300      	movs	r3, #0
   17a1c:	e02b      	b.n	17a76 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   17a1e:	4b1a      	ldr	r3, [pc, #104]	; (17a88 <prvTraceGetPriorityProperty+0x90>)
   17a20:	681a      	ldr	r2, [r3, #0]
   17a22:	1dfb      	adds	r3, r7, #7
   17a24:	781b      	ldrb	r3, [r3, #0]
   17a26:	2164      	movs	r1, #100	; 0x64
   17a28:	18d3      	adds	r3, r2, r3
   17a2a:	185b      	adds	r3, r3, r1
   17a2c:	781b      	ldrb	r3, [r3, #0]
   17a2e:	1dba      	adds	r2, r7, #6
   17a30:	7812      	ldrb	r2, [r2, #0]
   17a32:	429a      	cmp	r2, r3
   17a34:	d905      	bls.n	17a42 <prvTraceGetPriorityProperty+0x4a>
   17a36:	4b15      	ldr	r3, [pc, #84]	; (17a8c <prvTraceGetPriorityProperty+0x94>)
   17a38:	0018      	movs	r0, r3
   17a3a:	4b12      	ldr	r3, [pc, #72]	; (17a84 <prvTraceGetPriorityProperty+0x8c>)
   17a3c:	4798      	blx	r3
   17a3e:	2300      	movs	r3, #0
   17a40:	e019      	b.n	17a76 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   17a42:	4b11      	ldr	r3, [pc, #68]	; (17a88 <prvTraceGetPriorityProperty+0x90>)
   17a44:	681c      	ldr	r4, [r3, #0]
   17a46:	1dfb      	adds	r3, r7, #7
   17a48:	781a      	ldrb	r2, [r3, #0]
   17a4a:	1dbb      	adds	r3, r7, #6
   17a4c:	781b      	ldrb	r3, [r3, #0]
   17a4e:	0011      	movs	r1, r2
   17a50:	0018      	movs	r0, r3
   17a52:	4b0f      	ldr	r3, [pc, #60]	; (17a90 <prvTraceGetPriorityProperty+0x98>)
   17a54:	4798      	blx	r3
   17a56:	0003      	movs	r3, r0
   17a58:	0018      	movs	r0, r3
   17a5a:	4b0b      	ldr	r3, [pc, #44]	; (17a88 <prvTraceGetPriorityProperty+0x90>)
   17a5c:	681a      	ldr	r2, [r3, #0]
   17a5e:	1dfb      	adds	r3, r7, #7
   17a60:	781b      	ldrb	r3, [r3, #0]
   17a62:	2170      	movs	r1, #112	; 0x70
   17a64:	18d3      	adds	r3, r2, r3
   17a66:	185b      	adds	r3, r3, r1
   17a68:	781b      	ldrb	r3, [r3, #0]
   17a6a:	18c3      	adds	r3, r0, r3
   17a6c:	3301      	adds	r3, #1
   17a6e:	229c      	movs	r2, #156	; 0x9c
   17a70:	18e3      	adds	r3, r4, r3
   17a72:	189b      	adds	r3, r3, r2
   17a74:	781b      	ldrb	r3, [r3, #0]
}
   17a76:	0018      	movs	r0, r3
   17a78:	46bd      	mov	sp, r7
   17a7a:	b003      	add	sp, #12
   17a7c:	bd90      	pop	{r4, r7, pc}
   17a7e:	46c0      	nop			; (mov r8, r8)
   17a80:	0003601c 	.word	0x0003601c
   17a84:	000182dd 	.word	0x000182dd
   17a88:	20000c6c 	.word	0x20000c6c
   17a8c:	00036068 	.word	0x00036068
   17a90:	00017ee9 	.word	0x00017ee9

00017a94 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   17a94:	b590      	push	{r4, r7, lr}
   17a96:	b083      	sub	sp, #12
   17a98:	af00      	add	r7, sp, #0
   17a9a:	0004      	movs	r4, r0
   17a9c:	0008      	movs	r0, r1
   17a9e:	0011      	movs	r1, r2
   17aa0:	1dfb      	adds	r3, r7, #7
   17aa2:	1c22      	adds	r2, r4, #0
   17aa4:	701a      	strb	r2, [r3, #0]
   17aa6:	1dbb      	adds	r3, r7, #6
   17aa8:	1c02      	adds	r2, r0, #0
   17aaa:	701a      	strb	r2, [r3, #0]
   17aac:	1d7b      	adds	r3, r7, #5
   17aae:	1c0a      	adds	r2, r1, #0
   17ab0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   17ab2:	1dfb      	adds	r3, r7, #7
   17ab4:	781b      	ldrb	r3, [r3, #0]
   17ab6:	2b08      	cmp	r3, #8
   17ab8:	d904      	bls.n	17ac4 <prvTraceSetObjectState+0x30>
   17aba:	4b1a      	ldr	r3, [pc, #104]	; (17b24 <prvTraceSetObjectState+0x90>)
   17abc:	0018      	movs	r0, r3
   17abe:	4b1a      	ldr	r3, [pc, #104]	; (17b28 <prvTraceSetObjectState+0x94>)
   17ac0:	4798      	blx	r3
   17ac2:	e02b      	b.n	17b1c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   17ac4:	4b19      	ldr	r3, [pc, #100]	; (17b2c <prvTraceSetObjectState+0x98>)
   17ac6:	681a      	ldr	r2, [r3, #0]
   17ac8:	1dfb      	adds	r3, r7, #7
   17aca:	781b      	ldrb	r3, [r3, #0]
   17acc:	2164      	movs	r1, #100	; 0x64
   17ace:	18d3      	adds	r3, r2, r3
   17ad0:	185b      	adds	r3, r3, r1
   17ad2:	781b      	ldrb	r3, [r3, #0]
   17ad4:	1dba      	adds	r2, r7, #6
   17ad6:	7812      	ldrb	r2, [r2, #0]
   17ad8:	429a      	cmp	r2, r3
   17ada:	d904      	bls.n	17ae6 <prvTraceSetObjectState+0x52>
   17adc:	4b14      	ldr	r3, [pc, #80]	; (17b30 <prvTraceSetObjectState+0x9c>)
   17ade:	0018      	movs	r0, r3
   17ae0:	4b11      	ldr	r3, [pc, #68]	; (17b28 <prvTraceSetObjectState+0x94>)
   17ae2:	4798      	blx	r3
   17ae4:	e01a      	b.n	17b1c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   17ae6:	4b11      	ldr	r3, [pc, #68]	; (17b2c <prvTraceSetObjectState+0x98>)
   17ae8:	681c      	ldr	r4, [r3, #0]
   17aea:	1dfb      	adds	r3, r7, #7
   17aec:	781a      	ldrb	r2, [r3, #0]
   17aee:	1dbb      	adds	r3, r7, #6
   17af0:	781b      	ldrb	r3, [r3, #0]
   17af2:	0011      	movs	r1, r2
   17af4:	0018      	movs	r0, r3
   17af6:	4b0f      	ldr	r3, [pc, #60]	; (17b34 <prvTraceSetObjectState+0xa0>)
   17af8:	4798      	blx	r3
   17afa:	0003      	movs	r3, r0
   17afc:	0018      	movs	r0, r3
   17afe:	4b0b      	ldr	r3, [pc, #44]	; (17b2c <prvTraceSetObjectState+0x98>)
   17b00:	681a      	ldr	r2, [r3, #0]
   17b02:	1dfb      	adds	r3, r7, #7
   17b04:	781b      	ldrb	r3, [r3, #0]
   17b06:	2170      	movs	r1, #112	; 0x70
   17b08:	18d3      	adds	r3, r2, r3
   17b0a:	185b      	adds	r3, r3, r1
   17b0c:	781b      	ldrb	r3, [r3, #0]
   17b0e:	18c3      	adds	r3, r0, r3
   17b10:	229c      	movs	r2, #156	; 0x9c
   17b12:	18e3      	adds	r3, r4, r3
   17b14:	189b      	adds	r3, r3, r2
   17b16:	1d7a      	adds	r2, r7, #5
   17b18:	7812      	ldrb	r2, [r2, #0]
   17b1a:	701a      	strb	r2, [r3, #0]
}
   17b1c:	46bd      	mov	sp, r7
   17b1e:	b003      	add	sp, #12
   17b20:	bd90      	pop	{r4, r7, pc}
   17b22:	46c0      	nop			; (mov r8, r8)
   17b24:	000360a8 	.word	0x000360a8
   17b28:	000182dd 	.word	0x000182dd
   17b2c:	20000c6c 	.word	0x20000c6c
   17b30:	000360ec 	.word	0x000360ec
   17b34:	00017ee9 	.word	0x00017ee9

00017b38 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   17b38:	b590      	push	{r4, r7, lr}
   17b3a:	b083      	sub	sp, #12
   17b3c:	af00      	add	r7, sp, #0
   17b3e:	0002      	movs	r2, r0
   17b40:	1dfb      	adds	r3, r7, #7
   17b42:	701a      	strb	r2, [r3, #0]
   17b44:	1dbb      	adds	r3, r7, #6
   17b46:	1c0a      	adds	r2, r1, #0
   17b48:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   17b4a:	1dfb      	adds	r3, r7, #7
   17b4c:	781b      	ldrb	r3, [r3, #0]
   17b4e:	2b08      	cmp	r3, #8
   17b50:	d905      	bls.n	17b5e <prvTraceGetObjectState+0x26>
   17b52:	4b1a      	ldr	r3, [pc, #104]	; (17bbc <prvTraceGetObjectState+0x84>)
   17b54:	0018      	movs	r0, r3
   17b56:	4b1a      	ldr	r3, [pc, #104]	; (17bc0 <prvTraceGetObjectState+0x88>)
   17b58:	4798      	blx	r3
   17b5a:	2300      	movs	r3, #0
   17b5c:	e02a      	b.n	17bb4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   17b5e:	4b19      	ldr	r3, [pc, #100]	; (17bc4 <prvTraceGetObjectState+0x8c>)
   17b60:	681a      	ldr	r2, [r3, #0]
   17b62:	1dfb      	adds	r3, r7, #7
   17b64:	781b      	ldrb	r3, [r3, #0]
   17b66:	2164      	movs	r1, #100	; 0x64
   17b68:	18d3      	adds	r3, r2, r3
   17b6a:	185b      	adds	r3, r3, r1
   17b6c:	781b      	ldrb	r3, [r3, #0]
   17b6e:	1dba      	adds	r2, r7, #6
   17b70:	7812      	ldrb	r2, [r2, #0]
   17b72:	429a      	cmp	r2, r3
   17b74:	d905      	bls.n	17b82 <prvTraceGetObjectState+0x4a>
   17b76:	4b14      	ldr	r3, [pc, #80]	; (17bc8 <prvTraceGetObjectState+0x90>)
   17b78:	0018      	movs	r0, r3
   17b7a:	4b11      	ldr	r3, [pc, #68]	; (17bc0 <prvTraceGetObjectState+0x88>)
   17b7c:	4798      	blx	r3
   17b7e:	2300      	movs	r3, #0
   17b80:	e018      	b.n	17bb4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   17b82:	4b10      	ldr	r3, [pc, #64]	; (17bc4 <prvTraceGetObjectState+0x8c>)
   17b84:	681c      	ldr	r4, [r3, #0]
   17b86:	1dfb      	adds	r3, r7, #7
   17b88:	781a      	ldrb	r2, [r3, #0]
   17b8a:	1dbb      	adds	r3, r7, #6
   17b8c:	781b      	ldrb	r3, [r3, #0]
   17b8e:	0011      	movs	r1, r2
   17b90:	0018      	movs	r0, r3
   17b92:	4b0e      	ldr	r3, [pc, #56]	; (17bcc <prvTraceGetObjectState+0x94>)
   17b94:	4798      	blx	r3
   17b96:	0003      	movs	r3, r0
   17b98:	0018      	movs	r0, r3
   17b9a:	4b0a      	ldr	r3, [pc, #40]	; (17bc4 <prvTraceGetObjectState+0x8c>)
   17b9c:	681a      	ldr	r2, [r3, #0]
   17b9e:	1dfb      	adds	r3, r7, #7
   17ba0:	781b      	ldrb	r3, [r3, #0]
   17ba2:	2170      	movs	r1, #112	; 0x70
   17ba4:	18d3      	adds	r3, r2, r3
   17ba6:	185b      	adds	r3, r3, r1
   17ba8:	781b      	ldrb	r3, [r3, #0]
   17baa:	18c3      	adds	r3, r0, r3
   17bac:	229c      	movs	r2, #156	; 0x9c
   17bae:	18e3      	adds	r3, r4, r3
   17bb0:	189b      	adds	r3, r3, r2
   17bb2:	781b      	ldrb	r3, [r3, #0]
}
   17bb4:	0018      	movs	r0, r3
   17bb6:	46bd      	mov	sp, r7
   17bb8:	b003      	add	sp, #12
   17bba:	bd90      	pop	{r4, r7, pc}
   17bbc:	00036128 	.word	0x00036128
   17bc0:	000182dd 	.word	0x000182dd
   17bc4:	20000c6c 	.word	0x20000c6c
   17bc8:	0003616c 	.word	0x0003616c
   17bcc:	00017ee9 	.word	0x00017ee9

00017bd0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   17bd0:	b590      	push	{r4, r7, lr}
   17bd2:	b083      	sub	sp, #12
   17bd4:	af00      	add	r7, sp, #0
   17bd6:	0002      	movs	r2, r0
   17bd8:	1dfb      	adds	r3, r7, #7
   17bda:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   17bdc:	4b11      	ldr	r3, [pc, #68]	; (17c24 <prvTraceSetTaskInstanceFinished+0x54>)
   17bde:	681b      	ldr	r3, [r3, #0]
   17be0:	2267      	movs	r2, #103	; 0x67
   17be2:	5c9b      	ldrb	r3, [r3, r2]
   17be4:	1dfa      	adds	r2, r7, #7
   17be6:	7812      	ldrb	r2, [r2, #0]
   17be8:	429a      	cmp	r2, r3
   17bea:	d904      	bls.n	17bf6 <prvTraceSetTaskInstanceFinished+0x26>
   17bec:	4b0e      	ldr	r3, [pc, #56]	; (17c28 <prvTraceSetTaskInstanceFinished+0x58>)
   17bee:	0018      	movs	r0, r3
   17bf0:	4b0e      	ldr	r3, [pc, #56]	; (17c2c <prvTraceSetTaskInstanceFinished+0x5c>)
   17bf2:	4798      	blx	r3
   17bf4:	e013      	b.n	17c1e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   17bf6:	4b0b      	ldr	r3, [pc, #44]	; (17c24 <prvTraceSetTaskInstanceFinished+0x54>)
   17bf8:	681c      	ldr	r4, [r3, #0]
   17bfa:	1dfb      	adds	r3, r7, #7
   17bfc:	781b      	ldrb	r3, [r3, #0]
   17bfe:	2103      	movs	r1, #3
   17c00:	0018      	movs	r0, r3
   17c02:	4b0b      	ldr	r3, [pc, #44]	; (17c30 <prvTraceSetTaskInstanceFinished+0x60>)
   17c04:	4798      	blx	r3
   17c06:	0003      	movs	r3, r0
   17c08:	0019      	movs	r1, r3
   17c0a:	4b06      	ldr	r3, [pc, #24]	; (17c24 <prvTraceSetTaskInstanceFinished+0x54>)
   17c0c:	681b      	ldr	r3, [r3, #0]
   17c0e:	2273      	movs	r2, #115	; 0x73
   17c10:	5c9b      	ldrb	r3, [r3, r2]
   17c12:	18cb      	adds	r3, r1, r3
   17c14:	229c      	movs	r2, #156	; 0x9c
   17c16:	18e3      	adds	r3, r4, r3
   17c18:	189b      	adds	r3, r3, r2
   17c1a:	2200      	movs	r2, #0
   17c1c:	701a      	strb	r2, [r3, #0]
#endif
}
   17c1e:	46bd      	mov	sp, r7
   17c20:	b003      	add	sp, #12
   17c22:	bd90      	pop	{r4, r7, pc}
   17c24:	20000c6c 	.word	0x20000c6c
   17c28:	000361a8 	.word	0x000361a8
   17c2c:	000182dd 	.word	0x000182dd
   17c30:	00017ee9 	.word	0x00017ee9

00017c34 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   17c34:	b580      	push	{r7, lr}
   17c36:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   17c38:	4b75      	ldr	r3, [pc, #468]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c3a:	681b      	ldr	r3, [r3, #0]
   17c3c:	2b00      	cmp	r3, #0
   17c3e:	d103      	bne.n	17c48 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   17c40:	4b73      	ldr	r3, [pc, #460]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c42:	4a74      	ldr	r2, [pc, #464]	; (17e14 <prvTraceInitTraceData+0x1e0>)
   17c44:	601a      	str	r2, [r3, #0]
   17c46:	e006      	b.n	17c56 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   17c48:	4b71      	ldr	r3, [pc, #452]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c4a:	681b      	ldr	r3, [r3, #0]
   17c4c:	781b      	ldrb	r3, [r3, #0]
   17c4e:	b2db      	uxtb	r3, r3
   17c50:	2b01      	cmp	r3, #1
   17c52:	d100      	bne.n	17c56 <prvTraceInitTraceData+0x22>
   17c54:	e0d8      	b.n	17e08 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   17c56:	4b70      	ldr	r3, [pc, #448]	; (17e18 <prvTraceInitTraceData+0x1e4>)
   17c58:	681a      	ldr	r2, [r3, #0]
   17c5a:	4b70      	ldr	r3, [pc, #448]	; (17e1c <prvTraceInitTraceData+0x1e8>)
   17c5c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   17c5e:	4b6c      	ldr	r3, [pc, #432]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c60:	6818      	ldr	r0, [r3, #0]
   17c62:	23bd      	movs	r3, #189	; 0xbd
   17c64:	011b      	lsls	r3, r3, #4
   17c66:	001a      	movs	r2, r3
   17c68:	2100      	movs	r1, #0
   17c6a:	4b6d      	ldr	r3, [pc, #436]	; (17e20 <prvTraceInitTraceData+0x1ec>)
   17c6c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   17c6e:	4b68      	ldr	r3, [pc, #416]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c70:	681b      	ldr	r3, [r3, #0]
   17c72:	4a6c      	ldr	r2, [pc, #432]	; (17e24 <prvTraceInitTraceData+0x1f0>)
   17c74:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   17c76:	4b66      	ldr	r3, [pc, #408]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c78:	681b      	ldr	r3, [r3, #0]
   17c7a:	2205      	movs	r2, #5
   17c7c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   17c7e:	4b64      	ldr	r3, [pc, #400]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c80:	681b      	ldr	r3, [r3, #0]
   17c82:	2200      	movs	r2, #0
   17c84:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   17c86:	4b62      	ldr	r3, [pc, #392]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c88:	681b      	ldr	r3, [r3, #0]
   17c8a:	22bd      	movs	r2, #189	; 0xbd
   17c8c:	0112      	lsls	r2, r2, #4
   17c8e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   17c90:	4b5f      	ldr	r3, [pc, #380]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c92:	681b      	ldr	r3, [r3, #0]
   17c94:	2296      	movs	r2, #150	; 0x96
   17c96:	0052      	lsls	r2, r2, #1
   17c98:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   17c9a:	4b5d      	ldr	r3, [pc, #372]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17c9c:	681b      	ldr	r3, [r3, #0]
   17c9e:	4a62      	ldr	r2, [pc, #392]	; (17e28 <prvTraceInitTraceData+0x1f4>)
   17ca0:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   17ca2:	4b5b      	ldr	r3, [pc, #364]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17ca4:	681b      	ldr	r3, [r3, #0]
   17ca6:	2200      	movs	r2, #0
   17ca8:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   17caa:	4b59      	ldr	r3, [pc, #356]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17cac:	681b      	ldr	r3, [r3, #0]
   17cae:	2200      	movs	r2, #0
   17cb0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   17cb2:	4b5e      	ldr	r3, [pc, #376]	; (17e2c <prvTraceInitTraceData+0x1f8>)
   17cb4:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   17cb6:	4b56      	ldr	r3, [pc, #344]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17cb8:	681b      	ldr	r3, [r3, #0]
   17cba:	4a5d      	ldr	r2, [pc, #372]	; (17e30 <prvTraceInitTraceData+0x1fc>)
   17cbc:	495d      	ldr	r1, [pc, #372]	; (17e34 <prvTraceInitTraceData+0x200>)
   17cbe:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   17cc0:	4b53      	ldr	r3, [pc, #332]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17cc2:	681a      	ldr	r2, [r3, #0]
   17cc4:	23ac      	movs	r3, #172	; 0xac
   17cc6:	00db      	lsls	r3, r3, #3
   17cc8:	21c8      	movs	r1, #200	; 0xc8
   17cca:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   17ccc:	4b50      	ldr	r3, [pc, #320]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17cce:	681b      	ldr	r3, [r3, #0]
   17cd0:	4a59      	ldr	r2, [pc, #356]	; (17e38 <prvTraceInitTraceData+0x204>)
   17cd2:	2101      	movs	r1, #1
   17cd4:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   17cd6:	4b4e      	ldr	r3, [pc, #312]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17cd8:	681a      	ldr	r2, [r3, #0]
   17cda:	23d7      	movs	r3, #215	; 0xd7
   17cdc:	00db      	lsls	r3, r3, #3
   17cde:	4957      	ldr	r1, [pc, #348]	; (17e3c <prvTraceInitTraceData+0x208>)
   17ce0:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   17ce2:	4b4b      	ldr	r3, [pc, #300]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17ce4:	681b      	ldr	r3, [r3, #0]
   17ce6:	4a56      	ldr	r2, [pc, #344]	; (17e40 <prvTraceInitTraceData+0x20c>)
   17ce8:	4694      	mov	ip, r2
   17cea:	4463      	add	r3, ip
   17cec:	4955      	ldr	r1, [pc, #340]	; (17e44 <prvTraceInitTraceData+0x210>)
   17cee:	2250      	movs	r2, #80	; 0x50
   17cf0:	0018      	movs	r0, r3
   17cf2:	4b55      	ldr	r3, [pc, #340]	; (17e48 <prvTraceInitTraceData+0x214>)
   17cf4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   17cf6:	4b46      	ldr	r3, [pc, #280]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17cf8:	681b      	ldr	r3, [r3, #0]
   17cfa:	4a54      	ldr	r2, [pc, #336]	; (17e4c <prvTraceInitTraceData+0x218>)
   17cfc:	4954      	ldr	r1, [pc, #336]	; (17e50 <prvTraceInitTraceData+0x21c>)
   17cfe:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   17d00:	4b43      	ldr	r3, [pc, #268]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d02:	681b      	ldr	r3, [r3, #0]
   17d04:	4a53      	ldr	r2, [pc, #332]	; (17e54 <prvTraceInitTraceData+0x220>)
   17d06:	210a      	movs	r1, #10
   17d08:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   17d0a:	4b41      	ldr	r3, [pc, #260]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d0c:	681b      	ldr	r3, [r3, #0]
   17d0e:	4a52      	ldr	r2, [pc, #328]	; (17e58 <prvTraceInitTraceData+0x224>)
   17d10:	210b      	movs	r1, #11
   17d12:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   17d14:	4b3e      	ldr	r3, [pc, #248]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d16:	681b      	ldr	r3, [r3, #0]
   17d18:	4a50      	ldr	r2, [pc, #320]	; (17e5c <prvTraceInitTraceData+0x228>)
   17d1a:	210c      	movs	r1, #12
   17d1c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   17d1e:	4b3c      	ldr	r3, [pc, #240]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d20:	681b      	ldr	r3, [r3, #0]
   17d22:	4a4f      	ldr	r2, [pc, #316]	; (17e60 <prvTraceInitTraceData+0x22c>)
   17d24:	210d      	movs	r1, #13
   17d26:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   17d28:	4b39      	ldr	r3, [pc, #228]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d2a:	681b      	ldr	r3, [r3, #0]
   17d2c:	4a4d      	ldr	r2, [pc, #308]	; (17e64 <prvTraceInitTraceData+0x230>)
   17d2e:	2171      	movs	r1, #113	; 0x71
   17d30:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   17d32:	4b37      	ldr	r3, [pc, #220]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d34:	681b      	ldr	r3, [r3, #0]
   17d36:	4a4c      	ldr	r2, [pc, #304]	; (17e68 <prvTraceInitTraceData+0x234>)
   17d38:	2172      	movs	r1, #114	; 0x72
   17d3a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   17d3c:	4b34      	ldr	r3, [pc, #208]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d3e:	681b      	ldr	r3, [r3, #0]
   17d40:	4a4a      	ldr	r2, [pc, #296]	; (17e6c <prvTraceInitTraceData+0x238>)
   17d42:	2173      	movs	r1, #115	; 0x73
   17d44:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   17d46:	4b32      	ldr	r3, [pc, #200]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d48:	681b      	ldr	r3, [r3, #0]
   17d4a:	4a49      	ldr	r2, [pc, #292]	; (17e70 <prvTraceInitTraceData+0x23c>)
   17d4c:	2174      	movs	r1, #116	; 0x74
   17d4e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   17d50:	4b2f      	ldr	r3, [pc, #188]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d52:	681b      	ldr	r3, [r3, #0]
   17d54:	4a47      	ldr	r2, [pc, #284]	; (17e74 <prvTraceInitTraceData+0x240>)
   17d56:	21f1      	movs	r1, #241	; 0xf1
   17d58:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   17d5a:	4b2d      	ldr	r3, [pc, #180]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d5c:	681b      	ldr	r3, [r3, #0]
   17d5e:	4a46      	ldr	r2, [pc, #280]	; (17e78 <prvTraceInitTraceData+0x244>)
   17d60:	21f2      	movs	r1, #242	; 0xf2
   17d62:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   17d64:	4b2a      	ldr	r3, [pc, #168]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d66:	681b      	ldr	r3, [r3, #0]
   17d68:	4a44      	ldr	r2, [pc, #272]	; (17e7c <prvTraceInitTraceData+0x248>)
   17d6a:	21f3      	movs	r1, #243	; 0xf3
   17d6c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   17d6e:	4b28      	ldr	r3, [pc, #160]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d70:	681b      	ldr	r3, [r3, #0]
   17d72:	4a43      	ldr	r2, [pc, #268]	; (17e80 <prvTraceInitTraceData+0x24c>)
   17d74:	21f4      	movs	r1, #244	; 0xf4
   17d76:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   17d78:	4b42      	ldr	r3, [pc, #264]	; (17e84 <prvTraceInitTraceData+0x250>)
   17d7a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   17d7c:	4b24      	ldr	r3, [pc, #144]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d7e:	681b      	ldr	r3, [r3, #0]
   17d80:	22f4      	movs	r2, #244	; 0xf4
   17d82:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   17d84:	4b22      	ldr	r3, [pc, #136]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d86:	681b      	ldr	r3, [r3, #0]
   17d88:	22f3      	movs	r2, #243	; 0xf3
   17d8a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   17d8c:	4b20      	ldr	r3, [pc, #128]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d8e:	681b      	ldr	r3, [r3, #0]
   17d90:	22f2      	movs	r2, #242	; 0xf2
   17d92:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   17d94:	4b1e      	ldr	r3, [pc, #120]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d96:	681b      	ldr	r3, [r3, #0]
   17d98:	22f1      	movs	r2, #241	; 0xf1
   17d9a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   17d9c:	4b1c      	ldr	r3, [pc, #112]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17d9e:	681b      	ldr	r3, [r3, #0]
   17da0:	2274      	movs	r2, #116	; 0x74
   17da2:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   17da4:	4b1a      	ldr	r3, [pc, #104]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17da6:	681b      	ldr	r3, [r3, #0]
   17da8:	2273      	movs	r2, #115	; 0x73
   17daa:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   17dac:	4b18      	ldr	r3, [pc, #96]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17dae:	681b      	ldr	r3, [r3, #0]
   17db0:	2272      	movs	r2, #114	; 0x72
   17db2:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   17db4:	4b16      	ldr	r3, [pc, #88]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17db6:	681b      	ldr	r3, [r3, #0]
   17db8:	2271      	movs	r2, #113	; 0x71
   17dba:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   17dbc:	4b14      	ldr	r3, [pc, #80]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17dbe:	681b      	ldr	r3, [r3, #0]
   17dc0:	2204      	movs	r2, #4
   17dc2:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   17dc4:	4b12      	ldr	r3, [pc, #72]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17dc6:	681b      	ldr	r3, [r3, #0]
   17dc8:	2203      	movs	r2, #3
   17dca:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   17dcc:	4b10      	ldr	r3, [pc, #64]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17dce:	681b      	ldr	r3, [r3, #0]
   17dd0:	2202      	movs	r2, #2
   17dd2:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   17dd4:	4b0e      	ldr	r3, [pc, #56]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17dd6:	681b      	ldr	r3, [r3, #0]
   17dd8:	2201      	movs	r2, #1
   17dda:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   17ddc:	4b2a      	ldr	r3, [pc, #168]	; (17e88 <prvTraceInitTraceData+0x254>)
   17dde:	681b      	ldr	r3, [r3, #0]
   17de0:	2b00      	cmp	r3, #0
   17de2:	d012      	beq.n	17e0a <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   17de4:	4b0a      	ldr	r3, [pc, #40]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17de6:	681b      	ldr	r3, [r3, #0]
   17de8:	4a15      	ldr	r2, [pc, #84]	; (17e40 <prvTraceInitTraceData+0x20c>)
   17dea:	1898      	adds	r0, r3, r2
   17dec:	4b26      	ldr	r3, [pc, #152]	; (17e88 <prvTraceInitTraceData+0x254>)
   17dee:	681b      	ldr	r3, [r3, #0]
   17df0:	2250      	movs	r2, #80	; 0x50
   17df2:	0019      	movs	r1, r3
   17df4:	4b14      	ldr	r3, [pc, #80]	; (17e48 <prvTraceInitTraceData+0x214>)
   17df6:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   17df8:	4b05      	ldr	r3, [pc, #20]	; (17e10 <prvTraceInitTraceData+0x1dc>)
   17dfa:	681b      	ldr	r3, [r3, #0]
   17dfc:	4a23      	ldr	r2, [pc, #140]	; (17e8c <prvTraceInitTraceData+0x258>)
   17dfe:	2101      	movs	r1, #1
   17e00:	5099      	str	r1, [r3, r2]
		vTraceStop();
   17e02:	4b23      	ldr	r3, [pc, #140]	; (17e90 <prvTraceInitTraceData+0x25c>)
   17e04:	4798      	blx	r3
   17e06:	e000      	b.n	17e0a <prvTraceInitTraceData+0x1d6>
			return;
   17e08:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   17e0a:	46bd      	mov	sp, r7
   17e0c:	bd80      	pop	{r7, pc}
   17e0e:	46c0      	nop			; (mov r8, r8)
   17e10:	20000c6c 	.word	0x20000c6c
   17e14:	200047bc 	.word	0x200047bc
   17e18:	e000e018 	.word	0xe000e018
   17e1c:	2000538c 	.word	0x2000538c
   17e20:	0003319f 	.word	0x0003319f
   17e24:	00001aa1 	.word	0x00001aa1
   17e28:	f0f0f0f0 	.word	0xf0f0f0f0
   17e2c:	00016d99 	.word	0x00016d99
   17e30:	0000055c 	.word	0x0000055c
   17e34:	f1f1f1f1 	.word	0xf1f1f1f1
   17e38:	00000564 	.word	0x00000564
   17e3c:	f2f2f2f2 	.word	0xf2f2f2f2
   17e40:	000006bc 	.word	0x000006bc
   17e44:	000361f0 	.word	0x000361f0
   17e48:	000181a9 	.word	0x000181a9
   17e4c:	0000070c 	.word	0x0000070c
   17e50:	f3f3f3f3 	.word	0xf3f3f3f3
   17e54:	00000bc4 	.word	0x00000bc4
   17e58:	00000bc5 	.word	0x00000bc5
   17e5c:	00000bc6 	.word	0x00000bc6
   17e60:	00000bc7 	.word	0x00000bc7
   17e64:	00000bc8 	.word	0x00000bc8
   17e68:	00000bc9 	.word	0x00000bc9
   17e6c:	00000bca 	.word	0x00000bca
   17e70:	00000bcb 	.word	0x00000bcb
   17e74:	00000bcc 	.word	0x00000bcc
   17e78:	00000bcd 	.word	0x00000bcd
   17e7c:	00000bce 	.word	0x00000bce
   17e80:	00000bcf 	.word	0x00000bcf
   17e84:	00016f39 	.word	0x00016f39
   17e88:	20000bcc 	.word	0x20000bcc
   17e8c:	000006b4 	.word	0x000006b4
   17e90:	000171a1 	.word	0x000171a1

00017e94 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   17e94:	b580      	push	{r7, lr}
   17e96:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   17e98:	4b10      	ldr	r3, [pc, #64]	; (17edc <prvTraceNextFreeEventBufferSlot+0x48>)
   17e9a:	681b      	ldr	r3, [r3, #0]
   17e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   17e9e:	2b00      	cmp	r3, #0
   17ea0:	d101      	bne.n	17ea6 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   17ea2:	2300      	movs	r3, #0
   17ea4:	e017      	b.n	17ed6 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   17ea6:	4b0d      	ldr	r3, [pc, #52]	; (17edc <prvTraceNextFreeEventBufferSlot+0x48>)
   17ea8:	681b      	ldr	r3, [r3, #0]
   17eaa:	69da      	ldr	r2, [r3, #28]
   17eac:	232c      	movs	r3, #44	; 0x2c
   17eae:	33ff      	adds	r3, #255	; 0xff
   17eb0:	429a      	cmp	r2, r3
   17eb2:	d905      	bls.n	17ec0 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   17eb4:	4b0a      	ldr	r3, [pc, #40]	; (17ee0 <prvTraceNextFreeEventBufferSlot+0x4c>)
   17eb6:	0018      	movs	r0, r3
   17eb8:	4b0a      	ldr	r3, [pc, #40]	; (17ee4 <prvTraceNextFreeEventBufferSlot+0x50>)
   17eba:	4798      	blx	r3
		return NULL;
   17ebc:	2300      	movs	r3, #0
   17ebe:	e00a      	b.n	17ed6 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   17ec0:	4b06      	ldr	r3, [pc, #24]	; (17edc <prvTraceNextFreeEventBufferSlot+0x48>)
   17ec2:	681a      	ldr	r2, [r3, #0]
   17ec4:	4b05      	ldr	r3, [pc, #20]	; (17edc <prvTraceNextFreeEventBufferSlot+0x48>)
   17ec6:	681b      	ldr	r3, [r3, #0]
   17ec8:	69db      	ldr	r3, [r3, #28]
   17eca:	009b      	lsls	r3, r3, #2
   17ecc:	21e2      	movs	r1, #226	; 0xe2
   17ece:	00c9      	lsls	r1, r1, #3
   17ed0:	468c      	mov	ip, r1
   17ed2:	4463      	add	r3, ip
   17ed4:	18d3      	adds	r3, r2, r3
}
   17ed6:	0018      	movs	r0, r3
   17ed8:	46bd      	mov	sp, r7
   17eda:	bd80      	pop	{r7, pc}
   17edc:	20000c6c 	.word	0x20000c6c
   17ee0:	00036204 	.word	0x00036204
   17ee4:	000182dd 	.word	0x000182dd

00017ee8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   17ee8:	b580      	push	{r7, lr}
   17eea:	b082      	sub	sp, #8
   17eec:	af00      	add	r7, sp, #0
   17eee:	0002      	movs	r2, r0
   17ef0:	1dfb      	adds	r3, r7, #7
   17ef2:	701a      	strb	r2, [r3, #0]
   17ef4:	1dbb      	adds	r3, r7, #6
   17ef6:	1c0a      	adds	r2, r1, #0
   17ef8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   17efa:	1dbb      	adds	r3, r7, #6
   17efc:	781b      	ldrb	r3, [r3, #0]
   17efe:	2b08      	cmp	r3, #8
   17f00:	d905      	bls.n	17f0e <uiIndexOfObject+0x26>
   17f02:	4b2a      	ldr	r3, [pc, #168]	; (17fac <uiIndexOfObject+0xc4>)
   17f04:	0018      	movs	r0, r3
   17f06:	4b2a      	ldr	r3, [pc, #168]	; (17fb0 <uiIndexOfObject+0xc8>)
   17f08:	4798      	blx	r3
   17f0a:	2300      	movs	r3, #0
   17f0c:	e049      	b.n	17fa2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   17f0e:	1dfb      	adds	r3, r7, #7
   17f10:	781b      	ldrb	r3, [r3, #0]
   17f12:	2b00      	cmp	r3, #0
   17f14:	d00b      	beq.n	17f2e <uiIndexOfObject+0x46>
   17f16:	4b27      	ldr	r3, [pc, #156]	; (17fb4 <uiIndexOfObject+0xcc>)
   17f18:	681a      	ldr	r2, [r3, #0]
   17f1a:	1dbb      	adds	r3, r7, #6
   17f1c:	781b      	ldrb	r3, [r3, #0]
   17f1e:	2164      	movs	r1, #100	; 0x64
   17f20:	18d3      	adds	r3, r2, r3
   17f22:	185b      	adds	r3, r3, r1
   17f24:	781b      	ldrb	r3, [r3, #0]
   17f26:	1dfa      	adds	r2, r7, #7
   17f28:	7812      	ldrb	r2, [r2, #0]
   17f2a:	429a      	cmp	r2, r3
   17f2c:	d905      	bls.n	17f3a <uiIndexOfObject+0x52>
   17f2e:	4b22      	ldr	r3, [pc, #136]	; (17fb8 <uiIndexOfObject+0xd0>)
   17f30:	0018      	movs	r0, r3
   17f32:	4b1f      	ldr	r3, [pc, #124]	; (17fb0 <uiIndexOfObject+0xc8>)
   17f34:	4798      	blx	r3
   17f36:	2300      	movs	r3, #0
   17f38:	e033      	b.n	17fa2 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   17f3a:	1dbb      	adds	r3, r7, #6
   17f3c:	781b      	ldrb	r3, [r3, #0]
   17f3e:	2b08      	cmp	r3, #8
   17f40:	d82a      	bhi.n	17f98 <uiIndexOfObject+0xb0>
   17f42:	1dfb      	adds	r3, r7, #7
   17f44:	781b      	ldrb	r3, [r3, #0]
   17f46:	2b00      	cmp	r3, #0
   17f48:	d026      	beq.n	17f98 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   17f4a:	4b1a      	ldr	r3, [pc, #104]	; (17fb4 <uiIndexOfObject+0xcc>)
   17f4c:	681a      	ldr	r2, [r3, #0]
   17f4e:	1dbb      	adds	r3, r7, #6
   17f50:	781b      	ldrb	r3, [r3, #0]
   17f52:	2164      	movs	r1, #100	; 0x64
   17f54:	18d3      	adds	r3, r2, r3
   17f56:	185b      	adds	r3, r3, r1
   17f58:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   17f5a:	1dfa      	adds	r2, r7, #7
   17f5c:	7812      	ldrb	r2, [r2, #0]
   17f5e:	429a      	cmp	r2, r3
   17f60:	d81a      	bhi.n	17f98 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   17f62:	4b14      	ldr	r3, [pc, #80]	; (17fb4 <uiIndexOfObject+0xcc>)
   17f64:	681a      	ldr	r2, [r3, #0]
   17f66:	1dbb      	adds	r3, r7, #6
   17f68:	781b      	ldrb	r3, [r3, #0]
   17f6a:	3340      	adds	r3, #64	; 0x40
   17f6c:	005b      	lsls	r3, r3, #1
   17f6e:	18d3      	adds	r3, r2, r3
   17f70:	3308      	adds	r3, #8
   17f72:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   17f74:	4b0f      	ldr	r3, [pc, #60]	; (17fb4 <uiIndexOfObject+0xcc>)
   17f76:	6819      	ldr	r1, [r3, #0]
   17f78:	1dbb      	adds	r3, r7, #6
   17f7a:	781b      	ldrb	r3, [r3, #0]
   17f7c:	207c      	movs	r0, #124	; 0x7c
   17f7e:	18cb      	adds	r3, r1, r3
   17f80:	181b      	adds	r3, r3, r0
   17f82:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   17f84:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   17f86:	1df9      	adds	r1, r7, #7
   17f88:	7809      	ldrb	r1, [r1, #0]
   17f8a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   17f8c:	b289      	uxth	r1, r1
   17f8e:	434b      	muls	r3, r1
   17f90:	b29b      	uxth	r3, r3
   17f92:	18d3      	adds	r3, r2, r3
   17f94:	b29b      	uxth	r3, r3
   17f96:	e004      	b.n	17fa2 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   17f98:	4b08      	ldr	r3, [pc, #32]	; (17fbc <uiIndexOfObject+0xd4>)
   17f9a:	0018      	movs	r0, r3
   17f9c:	4b04      	ldr	r3, [pc, #16]	; (17fb0 <uiIndexOfObject+0xc8>)
   17f9e:	4798      	blx	r3
	return 0;
   17fa0:	2300      	movs	r3, #0
}
   17fa2:	0018      	movs	r0, r3
   17fa4:	46bd      	mov	sp, r7
   17fa6:	b002      	add	sp, #8
   17fa8:	bd80      	pop	{r7, pc}
   17faa:	46c0      	nop			; (mov r8, r8)
   17fac:	0003622c 	.word	0x0003622c
   17fb0:	000182dd 	.word	0x000182dd
   17fb4:	20000c6c 	.word	0x20000c6c
   17fb8:	0003626c 	.word	0x0003626c
   17fbc:	000362ac 	.word	0x000362ac

00017fc0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   17fc0:	b580      	push	{r7, lr}
   17fc2:	b088      	sub	sp, #32
   17fc4:	af00      	add	r7, sp, #0
   17fc6:	0002      	movs	r2, r0
   17fc8:	1dfb      	adds	r3, r7, #7
   17fca:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   17fcc:	4b5a      	ldr	r3, [pc, #360]	; (18138 <prvTraceGetObjectHandle+0x178>)
   17fce:	681b      	ldr	r3, [r3, #0]
   17fd0:	2b00      	cmp	r3, #0
   17fd2:	d105      	bne.n	17fe0 <prvTraceGetObjectHandle+0x20>
   17fd4:	4b59      	ldr	r3, [pc, #356]	; (1813c <prvTraceGetObjectHandle+0x17c>)
   17fd6:	0018      	movs	r0, r3
   17fd8:	4b59      	ldr	r3, [pc, #356]	; (18140 <prvTraceGetObjectHandle+0x180>)
   17fda:	4798      	blx	r3
   17fdc:	2300      	movs	r3, #0
   17fde:	e0a7      	b.n	18130 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   17fe0:	1dfb      	adds	r3, r7, #7
   17fe2:	781b      	ldrb	r3, [r3, #0]
   17fe4:	2b08      	cmp	r3, #8
   17fe6:	d905      	bls.n	17ff4 <prvTraceGetObjectHandle+0x34>
   17fe8:	4b56      	ldr	r3, [pc, #344]	; (18144 <prvTraceGetObjectHandle+0x184>)
   17fea:	0018      	movs	r0, r3
   17fec:	4b54      	ldr	r3, [pc, #336]	; (18140 <prvTraceGetObjectHandle+0x180>)
   17fee:	4798      	blx	r3
   17ff0:	2300      	movs	r3, #0
   17ff2:	e09d      	b.n	18130 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   17ff4:	f3ef 8310 	mrs	r3, PRIMASK
   17ff8:	60fb      	str	r3, [r7, #12]
  return(result);
   17ffa:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   17ffc:	61bb      	str	r3, [r7, #24]
   17ffe:	2301      	movs	r3, #1
   18000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   18002:	693b      	ldr	r3, [r7, #16]
   18004:	f383 8810 	msr	PRIMASK, r3
   18008:	4b4f      	ldr	r3, [pc, #316]	; (18148 <prvTraceGetObjectHandle+0x188>)
   1800a:	681b      	ldr	r3, [r3, #0]
   1800c:	1c5a      	adds	r2, r3, #1
   1800e:	4b4e      	ldr	r3, [pc, #312]	; (18148 <prvTraceGetObjectHandle+0x188>)
   18010:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   18012:	1dfb      	adds	r3, r7, #7
   18014:	781a      	ldrb	r2, [r3, #0]
   18016:	4b4d      	ldr	r3, [pc, #308]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   18018:	0052      	lsls	r2, r2, #1
   1801a:	5ad3      	ldrh	r3, [r2, r3]
   1801c:	001a      	movs	r2, r3
   1801e:	4b4c      	ldr	r3, [pc, #304]	; (18150 <prvTraceGetObjectHandle+0x190>)
   18020:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   18022:	4b4b      	ldr	r3, [pc, #300]	; (18150 <prvTraceGetObjectHandle+0x190>)
   18024:	681b      	ldr	r3, [r3, #0]
   18026:	4a49      	ldr	r2, [pc, #292]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   18028:	2148      	movs	r1, #72	; 0x48
   1802a:	18d3      	adds	r3, r2, r3
   1802c:	185b      	adds	r3, r3, r1
   1802e:	781b      	ldrb	r3, [r3, #0]
   18030:	2b00      	cmp	r3, #0
   18032:	d117      	bne.n	18064 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   18034:	4b46      	ldr	r3, [pc, #280]	; (18150 <prvTraceGetObjectHandle+0x190>)
   18036:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   18038:	4b45      	ldr	r3, [pc, #276]	; (18150 <prvTraceGetObjectHandle+0x190>)
   1803a:	681b      	ldr	r3, [r3, #0]
   1803c:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1803e:	1dfb      	adds	r3, r7, #7
   18040:	781b      	ldrb	r3, [r3, #0]
   18042:	4842      	ldr	r0, [pc, #264]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   18044:	3308      	adds	r3, #8
   18046:	005b      	lsls	r3, r3, #1
   18048:	18c3      	adds	r3, r0, r3
   1804a:	3302      	adds	r3, #2
   1804c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1804e:	b2db      	uxtb	r3, r3
   18050:	1acb      	subs	r3, r1, r3
   18052:	b2db      	uxtb	r3, r3
   18054:	3301      	adds	r3, #1
   18056:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   18058:	4b3c      	ldr	r3, [pc, #240]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   1805a:	2148      	movs	r1, #72	; 0x48
   1805c:	189b      	adds	r3, r3, r2
   1805e:	185b      	adds	r3, r3, r1
   18060:	1c02      	adds	r2, r0, #0
   18062:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   18064:	4b3a      	ldr	r3, [pc, #232]	; (18150 <prvTraceGetObjectHandle+0x190>)
   18066:	681a      	ldr	r2, [r3, #0]
   18068:	231f      	movs	r3, #31
   1806a:	18fb      	adds	r3, r7, r3
   1806c:	4937      	ldr	r1, [pc, #220]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   1806e:	2048      	movs	r0, #72	; 0x48
   18070:	188a      	adds	r2, r1, r2
   18072:	1812      	adds	r2, r2, r0
   18074:	7812      	ldrb	r2, [r2, #0]
   18076:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18078:	1dfb      	adds	r3, r7, #7
   1807a:	781a      	ldrb	r2, [r3, #0]
   1807c:	4b33      	ldr	r3, [pc, #204]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   1807e:	0052      	lsls	r2, r2, #1
   18080:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   18082:	1dfb      	adds	r3, r7, #7
   18084:	781b      	ldrb	r3, [r3, #0]
   18086:	4931      	ldr	r1, [pc, #196]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   18088:	3310      	adds	r3, #16
   1808a:	005b      	lsls	r3, r3, #1
   1808c:	18cb      	adds	r3, r1, r3
   1808e:	3304      	adds	r3, #4
   18090:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   18092:	429a      	cmp	r2, r3
   18094:	d90d      	bls.n	180b2 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   18096:	1dfb      	adds	r3, r7, #7
   18098:	781b      	ldrb	r3, [r3, #0]
   1809a:	0018      	movs	r0, r3
   1809c:	4b2d      	ldr	r3, [pc, #180]	; (18154 <prvTraceGetObjectHandle+0x194>)
   1809e:	4798      	blx	r3
   180a0:	0003      	movs	r3, r0
   180a2:	0018      	movs	r0, r3
   180a4:	4b26      	ldr	r3, [pc, #152]	; (18140 <prvTraceGetObjectHandle+0x180>)
   180a6:	4798      	blx	r3
		handle = 0;
   180a8:	231f      	movs	r3, #31
   180aa:	18fb      	adds	r3, r7, r3
   180ac:	2200      	movs	r2, #0
   180ae:	701a      	strb	r2, [r3, #0]
   180b0:	e031      	b.n	18116 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   180b2:	1dfb      	adds	r3, r7, #7
   180b4:	781b      	ldrb	r3, [r3, #0]
   180b6:	4a25      	ldr	r2, [pc, #148]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   180b8:	0059      	lsls	r1, r3, #1
   180ba:	5a8a      	ldrh	r2, [r1, r2]
   180bc:	3201      	adds	r2, #1
   180be:	b291      	uxth	r1, r2
   180c0:	4a22      	ldr	r2, [pc, #136]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   180c2:	005b      	lsls	r3, r3, #1
   180c4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   180c6:	1dfb      	adds	r3, r7, #7
   180c8:	781a      	ldrb	r2, [r3, #0]
   180ca:	4b20      	ldr	r3, [pc, #128]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   180cc:	0052      	lsls	r2, r2, #1
   180ce:	5ad3      	ldrh	r3, [r2, r3]
   180d0:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   180d2:	1dfb      	adds	r3, r7, #7
   180d4:	781b      	ldrb	r3, [r3, #0]
   180d6:	4a1d      	ldr	r2, [pc, #116]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   180d8:	3308      	adds	r3, #8
   180da:	005b      	lsls	r3, r3, #1
   180dc:	18d3      	adds	r3, r2, r3
   180de:	3302      	adds	r3, #2
   180e0:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   180e2:	1acb      	subs	r3, r1, r3
   180e4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   180e6:	1dfb      	adds	r3, r7, #7
   180e8:	781b      	ldrb	r3, [r3, #0]
   180ea:	4a18      	ldr	r2, [pc, #96]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   180ec:	3318      	adds	r3, #24
   180ee:	005b      	lsls	r3, r3, #1
   180f0:	18d3      	adds	r3, r2, r3
   180f2:	3306      	adds	r3, #6
   180f4:	881b      	ldrh	r3, [r3, #0]
   180f6:	001a      	movs	r2, r3
		if (hndCount >
   180f8:	697b      	ldr	r3, [r7, #20]
   180fa:	429a      	cmp	r2, r3
   180fc:	da0b      	bge.n	18116 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   180fe:	1dfb      	adds	r3, r7, #7
   18100:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   18102:	697a      	ldr	r2, [r7, #20]
   18104:	b2d2      	uxtb	r2, r2
   18106:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   18108:	4a10      	ldr	r2, [pc, #64]	; (1814c <prvTraceGetObjectHandle+0x18c>)
   1810a:	3318      	adds	r3, #24
   1810c:	005b      	lsls	r3, r3, #1
   1810e:	18d3      	adds	r3, r2, r3
   18110:	3306      	adds	r3, #6
   18112:	1c0a      	adds	r2, r1, #0
   18114:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   18116:	4b0c      	ldr	r3, [pc, #48]	; (18148 <prvTraceGetObjectHandle+0x188>)
   18118:	681b      	ldr	r3, [r3, #0]
   1811a:	1e5a      	subs	r2, r3, #1
   1811c:	4b0a      	ldr	r3, [pc, #40]	; (18148 <prvTraceGetObjectHandle+0x188>)
   1811e:	601a      	str	r2, [r3, #0]
   18120:	69bb      	ldr	r3, [r7, #24]
   18122:	60bb      	str	r3, [r7, #8]
   18124:	68bb      	ldr	r3, [r7, #8]
   18126:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1812a:	231f      	movs	r3, #31
   1812c:	18fb      	adds	r3, r7, r3
   1812e:	781b      	ldrb	r3, [r3, #0]
}
   18130:	0018      	movs	r0, r3
   18132:	46bd      	mov	sp, r7
   18134:	b008      	add	sp, #32
   18136:	bd80      	pop	{r7, pc}
   18138:	20000c6c 	.word	0x20000c6c
   1813c:	0003570c 	.word	0x0003570c
   18140:	000182dd 	.word	0x000182dd
   18144:	000362ec 	.word	0x000362ec
   18148:	20000bc4 	.word	0x20000bc4
   1814c:	20000bdc 	.word	0x20000bdc
   18150:	20000c70 	.word	0x20000c70
   18154:	00016ffd 	.word	0x00016ffd

00018158 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   18158:	b590      	push	{r4, r7, lr}
   1815a:	b085      	sub	sp, #20
   1815c:	af00      	add	r7, sp, #0
   1815e:	0002      	movs	r2, r0
   18160:	1dfb      	adds	r3, r7, #7
   18162:	701a      	strb	r2, [r3, #0]
   18164:	1dbb      	adds	r3, r7, #6
   18166:	1c0a      	adds	r2, r1, #0
   18168:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1816a:	230e      	movs	r3, #14
   1816c:	18fc      	adds	r4, r7, r3
   1816e:	1dfb      	adds	r3, r7, #7
   18170:	781a      	ldrb	r2, [r3, #0]
   18172:	1dbb      	adds	r3, r7, #6
   18174:	781b      	ldrb	r3, [r3, #0]
   18176:	0011      	movs	r1, r2
   18178:	0018      	movs	r0, r3
   1817a:	4b09      	ldr	r3, [pc, #36]	; (181a0 <prvMarkObjectAsUsed+0x48>)
   1817c:	4798      	blx	r3
   1817e:	0003      	movs	r3, r0
   18180:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   18182:	4b08      	ldr	r3, [pc, #32]	; (181a4 <prvMarkObjectAsUsed+0x4c>)
   18184:	681a      	ldr	r2, [r3, #0]
   18186:	230e      	movs	r3, #14
   18188:	18fb      	adds	r3, r7, r3
   1818a:	881b      	ldrh	r3, [r3, #0]
   1818c:	219c      	movs	r1, #156	; 0x9c
   1818e:	18d3      	adds	r3, r2, r3
   18190:	185b      	adds	r3, r3, r1
   18192:	2201      	movs	r2, #1
   18194:	701a      	strb	r2, [r3, #0]
}
   18196:	46c0      	nop			; (mov r8, r8)
   18198:	46bd      	mov	sp, r7
   1819a:	b005      	add	sp, #20
   1819c:	bd90      	pop	{r4, r7, pc}
   1819e:	46c0      	nop			; (mov r8, r8)
   181a0:	00017ee9 	.word	0x00017ee9
   181a4:	20000c6c 	.word	0x20000c6c

000181a8 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   181a8:	b580      	push	{r7, lr}
   181aa:	b086      	sub	sp, #24
   181ac:	af00      	add	r7, sp, #0
   181ae:	60f8      	str	r0, [r7, #12]
   181b0:	60b9      	str	r1, [r7, #8]
   181b2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   181b4:	2300      	movs	r3, #0
   181b6:	617b      	str	r3, [r7, #20]
   181b8:	e010      	b.n	181dc <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   181ba:	68fa      	ldr	r2, [r7, #12]
   181bc:	697b      	ldr	r3, [r7, #20]
   181be:	18d3      	adds	r3, r2, r3
   181c0:	68b9      	ldr	r1, [r7, #8]
   181c2:	697a      	ldr	r2, [r7, #20]
   181c4:	188a      	adds	r2, r1, r2
   181c6:	7812      	ldrb	r2, [r2, #0]
   181c8:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   181ca:	68ba      	ldr	r2, [r7, #8]
   181cc:	697b      	ldr	r3, [r7, #20]
   181ce:	18d3      	adds	r3, r2, r3
   181d0:	781b      	ldrb	r3, [r3, #0]
   181d2:	2b00      	cmp	r3, #0
   181d4:	d007      	beq.n	181e6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   181d6:	697b      	ldr	r3, [r7, #20]
   181d8:	3301      	adds	r3, #1
   181da:	617b      	str	r3, [r7, #20]
   181dc:	697a      	ldr	r2, [r7, #20]
   181de:	687b      	ldr	r3, [r7, #4]
   181e0:	429a      	cmp	r2, r3
   181e2:	d3ea      	bcc.n	181ba <prvStrncpy+0x12>
			break;
	}
}
   181e4:	e000      	b.n	181e8 <prvStrncpy+0x40>
			break;
   181e6:	46c0      	nop			; (mov r8, r8)
}
   181e8:	46c0      	nop			; (mov r8, r8)
   181ea:	46bd      	mov	sp, r7
   181ec:	b006      	add	sp, #24
   181ee:	bd80      	pop	{r7, pc}

000181f0 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   181f0:	b580      	push	{r7, lr}
   181f2:	b082      	sub	sp, #8
   181f4:	af00      	add	r7, sp, #0
   181f6:	603a      	str	r2, [r7, #0]
   181f8:	1dfb      	adds	r3, r7, #7
   181fa:	1c02      	adds	r2, r0, #0
   181fc:	701a      	strb	r2, [r3, #0]
   181fe:	1dbb      	adds	r3, r7, #6
   18200:	1c0a      	adds	r2, r1, #0
   18202:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   18204:	683b      	ldr	r3, [r7, #0]
   18206:	2b00      	cmp	r3, #0
   18208:	d104      	bne.n	18214 <prvTraceSetObjectName+0x24>
   1820a:	4b2a      	ldr	r3, [pc, #168]	; (182b4 <prvTraceSetObjectName+0xc4>)
   1820c:	0018      	movs	r0, r3
   1820e:	4b2a      	ldr	r3, [pc, #168]	; (182b8 <prvTraceSetObjectName+0xc8>)
   18210:	4798      	blx	r3
   18212:	e04b      	b.n	182ac <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   18214:	1dfb      	adds	r3, r7, #7
   18216:	781b      	ldrb	r3, [r3, #0]
   18218:	2b08      	cmp	r3, #8
   1821a:	d904      	bls.n	18226 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1821c:	4b27      	ldr	r3, [pc, #156]	; (182bc <prvTraceSetObjectName+0xcc>)
   1821e:	0018      	movs	r0, r3
   18220:	4b25      	ldr	r3, [pc, #148]	; (182b8 <prvTraceSetObjectName+0xc8>)
   18222:	4798      	blx	r3
		return;
   18224:	e042      	b.n	182ac <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   18226:	1dbb      	adds	r3, r7, #6
   18228:	781b      	ldrb	r3, [r3, #0]
   1822a:	2b00      	cmp	r3, #0
   1822c:	d104      	bne.n	18238 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1822e:	4b24      	ldr	r3, [pc, #144]	; (182c0 <prvTraceSetObjectName+0xd0>)
   18230:	0018      	movs	r0, r3
   18232:	4b21      	ldr	r3, [pc, #132]	; (182b8 <prvTraceSetObjectName+0xc8>)
   18234:	4798      	blx	r3
		return;
   18236:	e039      	b.n	182ac <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   18238:	4b22      	ldr	r3, [pc, #136]	; (182c4 <prvTraceSetObjectName+0xd4>)
   1823a:	681a      	ldr	r2, [r3, #0]
   1823c:	1dfb      	adds	r3, r7, #7
   1823e:	781b      	ldrb	r3, [r3, #0]
   18240:	2164      	movs	r1, #100	; 0x64
   18242:	18d3      	adds	r3, r2, r3
   18244:	185b      	adds	r3, r3, r1
   18246:	781b      	ldrb	r3, [r3, #0]
   18248:	1dba      	adds	r2, r7, #6
   1824a:	7812      	ldrb	r2, [r2, #0]
   1824c:	429a      	cmp	r2, r3
   1824e:	d909      	bls.n	18264 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   18250:	1dfb      	adds	r3, r7, #7
   18252:	781b      	ldrb	r3, [r3, #0]
   18254:	0018      	movs	r0, r3
   18256:	4b1c      	ldr	r3, [pc, #112]	; (182c8 <prvTraceSetObjectName+0xd8>)
   18258:	4798      	blx	r3
   1825a:	0003      	movs	r3, r0
   1825c:	0018      	movs	r0, r3
   1825e:	4b16      	ldr	r3, [pc, #88]	; (182b8 <prvTraceSetObjectName+0xc8>)
   18260:	4798      	blx	r3
   18262:	e023      	b.n	182ac <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   18264:	1dfb      	adds	r3, r7, #7
   18266:	781a      	ldrb	r2, [r3, #0]
   18268:	1dbb      	adds	r3, r7, #6
   1826a:	781b      	ldrb	r3, [r3, #0]
   1826c:	0011      	movs	r1, r2
   1826e:	0018      	movs	r0, r3
   18270:	4b16      	ldr	r3, [pc, #88]	; (182cc <prvTraceSetObjectName+0xdc>)
   18272:	4798      	blx	r3
   18274:	0003      	movs	r3, r0
   18276:	001a      	movs	r2, r3
   18278:	4b15      	ldr	r3, [pc, #84]	; (182d0 <prvTraceSetObjectName+0xe0>)
   1827a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1827c:	4b15      	ldr	r3, [pc, #84]	; (182d4 <prvTraceSetObjectName+0xe4>)
   1827e:	681b      	ldr	r3, [r3, #0]
   18280:	2b00      	cmp	r3, #0
   18282:	d113      	bne.n	182ac <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   18284:	4b0f      	ldr	r3, [pc, #60]	; (182c4 <prvTraceSetObjectName+0xd4>)
   18286:	681a      	ldr	r2, [r3, #0]
   18288:	4b11      	ldr	r3, [pc, #68]	; (182d0 <prvTraceSetObjectName+0xe0>)
   1828a:	881b      	ldrh	r3, [r3, #0]
   1828c:	3398      	adds	r3, #152	; 0x98
   1828e:	18d3      	adds	r3, r2, r3
   18290:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   18292:	4b0c      	ldr	r3, [pc, #48]	; (182c4 <prvTraceSetObjectName+0xd4>)
   18294:	681a      	ldr	r2, [r3, #0]
   18296:	1dfb      	adds	r3, r7, #7
   18298:	781b      	ldrb	r3, [r3, #0]
   1829a:	2170      	movs	r1, #112	; 0x70
   1829c:	18d3      	adds	r3, r2, r3
   1829e:	185b      	adds	r3, r3, r1
   182a0:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   182a2:	001a      	movs	r2, r3
   182a4:	683b      	ldr	r3, [r7, #0]
   182a6:	0019      	movs	r1, r3
   182a8:	4b0b      	ldr	r3, [pc, #44]	; (182d8 <prvTraceSetObjectName+0xe8>)
   182aa:	4798      	blx	r3
		}
	}
}
   182ac:	46bd      	mov	sp, r7
   182ae:	b002      	add	sp, #8
   182b0:	bd80      	pop	{r7, pc}
   182b2:	46c0      	nop			; (mov r8, r8)
   182b4:	000363f0 	.word	0x000363f0
   182b8:	000182dd 	.word	0x000182dd
   182bc:	00036424 	.word	0x00036424
   182c0:	00036454 	.word	0x00036454
   182c4:	20000c6c 	.word	0x20000c6c
   182c8:	00016ffd 	.word	0x00016ffd
   182cc:	00017ee9 	.word	0x00017ee9
   182d0:	20000c74 	.word	0x20000c74
   182d4:	20000bcc 	.word	0x20000bcc
   182d8:	000181a9 	.word	0x000181a9

000182dc <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   182dc:	b580      	push	{r7, lr}
   182de:	b082      	sub	sp, #8
   182e0:	af00      	add	r7, sp, #0
   182e2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   182e4:	4b11      	ldr	r3, [pc, #68]	; (1832c <prvTraceError+0x50>)
   182e6:	681b      	ldr	r3, [r3, #0]
   182e8:	2b00      	cmp	r3, #0
   182ea:	d001      	beq.n	182f0 <prvTraceError+0x14>
	{
		vTraceStop();
   182ec:	4b10      	ldr	r3, [pc, #64]	; (18330 <prvTraceError+0x54>)
   182ee:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   182f0:	4b10      	ldr	r3, [pc, #64]	; (18334 <prvTraceError+0x58>)
   182f2:	681b      	ldr	r3, [r3, #0]
   182f4:	2b00      	cmp	r3, #0
   182f6:	d115      	bne.n	18324 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   182f8:	4b0e      	ldr	r3, [pc, #56]	; (18334 <prvTraceError+0x58>)
   182fa:	687a      	ldr	r2, [r7, #4]
   182fc:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   182fe:	4b0b      	ldr	r3, [pc, #44]	; (1832c <prvTraceError+0x50>)
   18300:	681b      	ldr	r3, [r3, #0]
   18302:	2b00      	cmp	r3, #0
   18304:	d00e      	beq.n	18324 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   18306:	4b09      	ldr	r3, [pc, #36]	; (1832c <prvTraceError+0x50>)
   18308:	681b      	ldr	r3, [r3, #0]
   1830a:	4a0b      	ldr	r2, [pc, #44]	; (18338 <prvTraceError+0x5c>)
   1830c:	1898      	adds	r0, r3, r2
   1830e:	4b09      	ldr	r3, [pc, #36]	; (18334 <prvTraceError+0x58>)
   18310:	681b      	ldr	r3, [r3, #0]
   18312:	2250      	movs	r2, #80	; 0x50
   18314:	0019      	movs	r1, r3
   18316:	4b09      	ldr	r3, [pc, #36]	; (1833c <prvTraceError+0x60>)
   18318:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1831a:	4b04      	ldr	r3, [pc, #16]	; (1832c <prvTraceError+0x50>)
   1831c:	681b      	ldr	r3, [r3, #0]
   1831e:	4a08      	ldr	r2, [pc, #32]	; (18340 <prvTraceError+0x64>)
   18320:	2101      	movs	r1, #1
   18322:	5099      	str	r1, [r3, r2]
		}
	}
}
   18324:	46c0      	nop			; (mov r8, r8)
   18326:	46bd      	mov	sp, r7
   18328:	b002      	add	sp, #8
   1832a:	bd80      	pop	{r7, pc}
   1832c:	20000c6c 	.word	0x20000c6c
   18330:	000171a1 	.word	0x000171a1
   18334:	20000bcc 	.word	0x20000bcc
   18338:	000006bc 	.word	0x000006bc
   1833c:	000181a9 	.word	0x000181a9
   18340:	000006b4 	.word	0x000006b4

00018344 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   18344:	b580      	push	{r7, lr}
   18346:	b086      	sub	sp, #24
   18348:	af00      	add	r7, sp, #0
   1834a:	0002      	movs	r2, r0
   1834c:	1dfb      	adds	r3, r7, #7
   1834e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   18350:	2300      	movs	r3, #0
   18352:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   18354:	2300      	movs	r3, #0
   18356:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   18358:	1dfb      	adds	r3, r7, #7
   1835a:	781b      	ldrb	r3, [r3, #0]
   1835c:	2b00      	cmp	r3, #0
   1835e:	d000      	beq.n	18362 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   18360:	e089      	b.n	18476 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   18362:	4b49      	ldr	r3, [pc, #292]	; (18488 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   18364:	0018      	movs	r0, r3
   18366:	4b49      	ldr	r3, [pc, #292]	; (1848c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   18368:	4798      	blx	r3
   1836a:	e08a      	b.n	18482 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1836c:	4b48      	ldr	r3, [pc, #288]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1836e:	681b      	ldr	r3, [r3, #0]
   18370:	69da      	ldr	r2, [r3, #28]
   18372:	697b      	ldr	r3, [r7, #20]
   18374:	18d3      	adds	r3, r2, r3
   18376:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   18378:	4b45      	ldr	r3, [pc, #276]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1837a:	6819      	ldr	r1, [r3, #0]
   1837c:	693b      	ldr	r3, [r7, #16]
   1837e:	009a      	lsls	r2, r3, #2
   18380:	23e2      	movs	r3, #226	; 0xe2
   18382:	00db      	lsls	r3, r3, #3
   18384:	188a      	adds	r2, r1, r2
   18386:	18d3      	adds	r3, r2, r3
   18388:	781b      	ldrb	r3, [r3, #0]
   1838a:	2b98      	cmp	r3, #152	; 0x98
   1838c:	d934      	bls.n	183f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1838e:	4b40      	ldr	r3, [pc, #256]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18390:	6819      	ldr	r1, [r3, #0]
   18392:	693b      	ldr	r3, [r7, #16]
   18394:	009a      	lsls	r2, r3, #2
   18396:	23e2      	movs	r3, #226	; 0xe2
   18398:	00db      	lsls	r3, r3, #3
   1839a:	188a      	adds	r2, r1, r2
   1839c:	18d3      	adds	r3, r2, r3
   1839e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   183a0:	2ba7      	cmp	r3, #167	; 0xa7
   183a2:	d829      	bhi.n	183f8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   183a4:	4b3a      	ldr	r3, [pc, #232]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   183a6:	6819      	ldr	r1, [r3, #0]
   183a8:	693b      	ldr	r3, [r7, #16]
   183aa:	009a      	lsls	r2, r3, #2
   183ac:	23e2      	movs	r3, #226	; 0xe2
   183ae:	00db      	lsls	r3, r3, #3
   183b0:	188a      	adds	r2, r1, r2
   183b2:	18d3      	adds	r3, r2, r3
   183b4:	781a      	ldrb	r2, [r3, #0]
   183b6:	230f      	movs	r3, #15
   183b8:	18fb      	adds	r3, r7, r3
   183ba:	3268      	adds	r2, #104	; 0x68
   183bc:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   183be:	230f      	movs	r3, #15
   183c0:	18fb      	adds	r3, r7, r3
   183c2:	781a      	ldrb	r2, [r3, #0]
   183c4:	693b      	ldr	r3, [r7, #16]
   183c6:	18d2      	adds	r2, r2, r3
   183c8:	4b31      	ldr	r3, [pc, #196]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   183ca:	681b      	ldr	r3, [r3, #0]
   183cc:	699b      	ldr	r3, [r3, #24]
   183ce:	429a      	cmp	r2, r3
   183d0:	d24d      	bcs.n	1846e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   183d2:	4b2f      	ldr	r3, [pc, #188]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   183d4:	681a      	ldr	r2, [r3, #0]
   183d6:	693b      	ldr	r3, [r7, #16]
   183d8:	009b      	lsls	r3, r3, #2
   183da:	21e2      	movs	r1, #226	; 0xe2
   183dc:	00c9      	lsls	r1, r1, #3
   183de:	468c      	mov	ip, r1
   183e0:	4463      	add	r3, ip
   183e2:	18d0      	adds	r0, r2, r3
   183e4:	230f      	movs	r3, #15
   183e6:	18fb      	adds	r3, r7, r3
   183e8:	781b      	ldrb	r3, [r3, #0]
   183ea:	3301      	adds	r3, #1
   183ec:	009b      	lsls	r3, r3, #2
   183ee:	001a      	movs	r2, r3
   183f0:	2100      	movs	r1, #0
   183f2:	4b28      	ldr	r3, [pc, #160]	; (18494 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   183f4:	4798      	blx	r3
		{
   183f6:	e03a      	b.n	1846e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   183f8:	4b25      	ldr	r3, [pc, #148]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   183fa:	6819      	ldr	r1, [r3, #0]
   183fc:	693b      	ldr	r3, [r7, #16]
   183fe:	009a      	lsls	r2, r3, #2
   18400:	23e2      	movs	r3, #226	; 0xe2
   18402:	00db      	lsls	r3, r3, #3
   18404:	188a      	adds	r2, r1, r2
   18406:	18d3      	adds	r3, r2, r3
   18408:	781b      	ldrb	r3, [r3, #0]
   1840a:	2b01      	cmp	r3, #1
   1840c:	d130      	bne.n	18470 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1840e:	693b      	ldr	r3, [r7, #16]
   18410:	1c5a      	adds	r2, r3, #1
   18412:	4b1f      	ldr	r3, [pc, #124]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18414:	681b      	ldr	r3, [r3, #0]
   18416:	699b      	ldr	r3, [r3, #24]
   18418:	429a      	cmp	r2, r3
   1841a:	d20e      	bcs.n	1843a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1841c:	4b1c      	ldr	r3, [pc, #112]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1841e:	681a      	ldr	r2, [r3, #0]
   18420:	693b      	ldr	r3, [r7, #16]
   18422:	009b      	lsls	r3, r3, #2
   18424:	21e2      	movs	r1, #226	; 0xe2
   18426:	00c9      	lsls	r1, r1, #3
   18428:	468c      	mov	ip, r1
   1842a:	4463      	add	r3, ip
   1842c:	18d3      	adds	r3, r2, r3
   1842e:	2208      	movs	r2, #8
   18430:	2100      	movs	r1, #0
   18432:	0018      	movs	r0, r3
   18434:	4b17      	ldr	r3, [pc, #92]	; (18494 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   18436:	4798      	blx	r3
   18438:	e01a      	b.n	18470 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1843a:	4b15      	ldr	r3, [pc, #84]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1843c:	681b      	ldr	r3, [r3, #0]
   1843e:	22e2      	movs	r2, #226	; 0xe2
   18440:	00d2      	lsls	r2, r2, #3
   18442:	4694      	mov	ip, r2
   18444:	4463      	add	r3, ip
   18446:	2204      	movs	r2, #4
   18448:	2100      	movs	r1, #0
   1844a:	0018      	movs	r0, r3
   1844c:	4b11      	ldr	r3, [pc, #68]	; (18494 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1844e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   18450:	4b0f      	ldr	r3, [pc, #60]	; (18490 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   18452:	681a      	ldr	r2, [r3, #0]
   18454:	693b      	ldr	r3, [r7, #16]
   18456:	009b      	lsls	r3, r3, #2
   18458:	21e2      	movs	r1, #226	; 0xe2
   1845a:	00c9      	lsls	r1, r1, #3
   1845c:	468c      	mov	ip, r1
   1845e:	4463      	add	r3, ip
   18460:	18d3      	adds	r3, r2, r3
   18462:	2204      	movs	r2, #4
   18464:	2100      	movs	r1, #0
   18466:	0018      	movs	r0, r3
   18468:	4b0a      	ldr	r3, [pc, #40]	; (18494 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1846a:	4798      	blx	r3
   1846c:	e000      	b.n	18470 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1846e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   18470:	697b      	ldr	r3, [r7, #20]
   18472:	3301      	adds	r3, #1
   18474:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   18476:	1dfb      	adds	r3, r7, #7
   18478:	781a      	ldrb	r2, [r3, #0]
   1847a:	697b      	ldr	r3, [r7, #20]
   1847c:	429a      	cmp	r2, r3
   1847e:	d900      	bls.n	18482 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   18480:	e774      	b.n	1836c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   18482:	46bd      	mov	sp, r7
   18484:	b006      	add	sp, #24
   18486:	bd80      	pop	{r7, pc}
   18488:	000364b4 	.word	0x000364b4
   1848c:	000182dd 	.word	0x000182dd
   18490:	20000c6c 	.word	0x20000c6c
   18494:	0003319f 	.word	0x0003319f

00018498 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   18498:	b580      	push	{r7, lr}
   1849a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1849c:	4b12      	ldr	r3, [pc, #72]	; (184e8 <prvTraceUpdateCounters+0x50>)
   1849e:	681b      	ldr	r3, [r3, #0]
   184a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   184a2:	2b00      	cmp	r3, #0
   184a4:	d01c      	beq.n	184e0 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   184a6:	4b10      	ldr	r3, [pc, #64]	; (184e8 <prvTraceUpdateCounters+0x50>)
   184a8:	681b      	ldr	r3, [r3, #0]
   184aa:	695a      	ldr	r2, [r3, #20]
   184ac:	3201      	adds	r2, #1
   184ae:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   184b0:	4b0d      	ldr	r3, [pc, #52]	; (184e8 <prvTraceUpdateCounters+0x50>)
   184b2:	681b      	ldr	r3, [r3, #0]
   184b4:	69da      	ldr	r2, [r3, #28]
   184b6:	3201      	adds	r2, #1
   184b8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   184ba:	4b0b      	ldr	r3, [pc, #44]	; (184e8 <prvTraceUpdateCounters+0x50>)
   184bc:	681b      	ldr	r3, [r3, #0]
   184be:	69da      	ldr	r2, [r3, #28]
   184c0:	232c      	movs	r3, #44	; 0x2c
   184c2:	33ff      	adds	r3, #255	; 0xff
   184c4:	429a      	cmp	r2, r3
   184c6:	d907      	bls.n	184d8 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   184c8:	4b07      	ldr	r3, [pc, #28]	; (184e8 <prvTraceUpdateCounters+0x50>)
   184ca:	681b      	ldr	r3, [r3, #0]
   184cc:	2201      	movs	r2, #1
   184ce:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   184d0:	4b05      	ldr	r3, [pc, #20]	; (184e8 <prvTraceUpdateCounters+0x50>)
   184d2:	681b      	ldr	r3, [r3, #0]
   184d4:	2200      	movs	r2, #0
   184d6:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   184d8:	2001      	movs	r0, #1
   184da:	4b04      	ldr	r3, [pc, #16]	; (184ec <prvTraceUpdateCounters+0x54>)
   184dc:	4798      	blx	r3
   184de:	e000      	b.n	184e2 <prvTraceUpdateCounters+0x4a>
		return;
   184e0:	46c0      	nop			; (mov r8, r8)
#endif
}
   184e2:	46bd      	mov	sp, r7
   184e4:	bd80      	pop	{r7, pc}
   184e6:	46c0      	nop			; (mov r8, r8)
   184e8:	20000c6c 	.word	0x20000c6c
   184ec:	00018345 	.word	0x00018345

000184f0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   184f0:	b5b0      	push	{r4, r5, r7, lr}
   184f2:	b086      	sub	sp, #24
   184f4:	af00      	add	r7, sp, #0
   184f6:	0002      	movs	r2, r0
   184f8:	1dbb      	adds	r3, r7, #6
   184fa:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   184fc:	2300      	movs	r3, #0
   184fe:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   18500:	2300      	movs	r3, #0
   18502:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   18504:	2300      	movs	r3, #0
   18506:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   18508:	1dbb      	adds	r3, r7, #6
   1850a:	881b      	ldrh	r3, [r3, #0]
   1850c:	2bff      	cmp	r3, #255	; 0xff
   1850e:	d00a      	beq.n	18526 <prvTraceGetDTS+0x36>
   18510:	1dbb      	adds	r3, r7, #6
   18512:	881b      	ldrh	r3, [r3, #0]
   18514:	4a60      	ldr	r2, [pc, #384]	; (18698 <prvTraceGetDTS+0x1a8>)
   18516:	4293      	cmp	r3, r2
   18518:	d005      	beq.n	18526 <prvTraceGetDTS+0x36>
   1851a:	4b60      	ldr	r3, [pc, #384]	; (1869c <prvTraceGetDTS+0x1ac>)
   1851c:	0018      	movs	r0, r3
   1851e:	4b60      	ldr	r3, [pc, #384]	; (186a0 <prvTraceGetDTS+0x1b0>)
   18520:	4798      	blx	r3
   18522:	2300      	movs	r3, #0
   18524:	e0b3      	b.n	1868e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   18526:	4b5f      	ldr	r3, [pc, #380]	; (186a4 <prvTraceGetDTS+0x1b4>)
   18528:	681b      	ldr	r3, [r3, #0]
   1852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1852c:	2b00      	cmp	r3, #0
   1852e:	d118      	bne.n	18562 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   18530:	4b5d      	ldr	r3, [pc, #372]	; (186a8 <prvTraceGetDTS+0x1b8>)
   18532:	681b      	ldr	r3, [r3, #0]
   18534:	2b00      	cmp	r3, #0
   18536:	d006      	beq.n	18546 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   18538:	4b5a      	ldr	r3, [pc, #360]	; (186a4 <prvTraceGetDTS+0x1b4>)
   1853a:	681b      	ldr	r3, [r3, #0]
   1853c:	4a5a      	ldr	r2, [pc, #360]	; (186a8 <prvTraceGetDTS+0x1b8>)
   1853e:	6812      	ldr	r2, [r2, #0]
   18540:	0892      	lsrs	r2, r2, #2
   18542:	625a      	str	r2, [r3, #36]	; 0x24
   18544:	e00d      	b.n	18562 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   18546:	4b59      	ldr	r3, [pc, #356]	; (186ac <prvTraceGetDTS+0x1bc>)
   18548:	681a      	ldr	r2, [r3, #0]
   1854a:	4b59      	ldr	r3, [pc, #356]	; (186b0 <prvTraceGetDTS+0x1c0>)
   1854c:	681b      	ldr	r3, [r3, #0]
   1854e:	429a      	cmp	r2, r3
   18550:	d007      	beq.n	18562 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   18552:	4b54      	ldr	r3, [pc, #336]	; (186a4 <prvTraceGetDTS+0x1b4>)
   18554:	681c      	ldr	r4, [r3, #0]
   18556:	2000      	movs	r0, #0
   18558:	4b56      	ldr	r3, [pc, #344]	; (186b4 <prvTraceGetDTS+0x1c4>)
   1855a:	4798      	blx	r3
   1855c:	0003      	movs	r3, r0
   1855e:	089b      	lsrs	r3, r3, #2
   18560:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   18562:	230c      	movs	r3, #12
   18564:	18fb      	adds	r3, r7, r3
   18566:	0018      	movs	r0, r3
   18568:	4b53      	ldr	r3, [pc, #332]	; (186b8 <prvTraceGetDTS+0x1c8>)
   1856a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1856c:	68fa      	ldr	r2, [r7, #12]
   1856e:	4b53      	ldr	r3, [pc, #332]	; (186bc <prvTraceGetDTS+0x1cc>)
   18570:	681b      	ldr	r3, [r3, #0]
   18572:	1ad3      	subs	r3, r2, r3
   18574:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   18576:	68fa      	ldr	r2, [r7, #12]
   18578:	4b50      	ldr	r3, [pc, #320]	; (186bc <prvTraceGetDTS+0x1cc>)
   1857a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1857c:	4b49      	ldr	r3, [pc, #292]	; (186a4 <prvTraceGetDTS+0x1b4>)
   1857e:	681b      	ldr	r3, [r3, #0]
   18580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18582:	2b00      	cmp	r3, #0
   18584:	d044      	beq.n	18610 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   18586:	4b47      	ldr	r3, [pc, #284]	; (186a4 <prvTraceGetDTS+0x1b4>)
   18588:	681b      	ldr	r3, [r3, #0]
   1858a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1858c:	693b      	ldr	r3, [r7, #16]
   1858e:	429a      	cmp	r2, r3
   18590:	d21e      	bcs.n	185d0 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   18592:	4b44      	ldr	r3, [pc, #272]	; (186a4 <prvTraceGetDTS+0x1b4>)
   18594:	681c      	ldr	r4, [r3, #0]
   18596:	4b43      	ldr	r3, [pc, #268]	; (186a4 <prvTraceGetDTS+0x1b4>)
   18598:	681b      	ldr	r3, [r3, #0]
   1859a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1859c:	4b41      	ldr	r3, [pc, #260]	; (186a4 <prvTraceGetDTS+0x1b4>)
   1859e:	681b      	ldr	r3, [r3, #0]
   185a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   185a2:	4b47      	ldr	r3, [pc, #284]	; (186c0 <prvTraceGetDTS+0x1d0>)
   185a4:	0011      	movs	r1, r2
   185a6:	6938      	ldr	r0, [r7, #16]
   185a8:	4798      	blx	r3
   185aa:	0003      	movs	r3, r0
   185ac:	18eb      	adds	r3, r5, r3
   185ae:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   185b0:	4b3c      	ldr	r3, [pc, #240]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185b2:	681c      	ldr	r4, [r3, #0]
   185b4:	4b3b      	ldr	r3, [pc, #236]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185b6:	681b      	ldr	r3, [r3, #0]
   185b8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   185ba:	4b3a      	ldr	r3, [pc, #232]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185bc:	681b      	ldr	r3, [r3, #0]
   185be:	6a59      	ldr	r1, [r3, #36]	; 0x24
   185c0:	693a      	ldr	r2, [r7, #16]
   185c2:	4b40      	ldr	r3, [pc, #256]	; (186c4 <prvTraceGetDTS+0x1d4>)
   185c4:	0010      	movs	r0, r2
   185c6:	4798      	blx	r3
   185c8:	000b      	movs	r3, r1
   185ca:	18eb      	adds	r3, r5, r3
   185cc:	62a3      	str	r3, [r4, #40]	; 0x28
   185ce:	e007      	b.n	185e0 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   185d0:	4b34      	ldr	r3, [pc, #208]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185d2:	681b      	ldr	r3, [r3, #0]
   185d4:	4a33      	ldr	r2, [pc, #204]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185d6:	6812      	ldr	r2, [r2, #0]
   185d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
   185da:	693a      	ldr	r2, [r7, #16]
   185dc:	188a      	adds	r2, r1, r2
   185de:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   185e0:	4b30      	ldr	r3, [pc, #192]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185e2:	681b      	ldr	r3, [r3, #0]
   185e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   185e6:	4b2f      	ldr	r3, [pc, #188]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185e8:	681b      	ldr	r3, [r3, #0]
   185ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   185ec:	429a      	cmp	r2, r3
   185ee:	d313      	bcc.n	18618 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   185f0:	4b2c      	ldr	r3, [pc, #176]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185f2:	681b      	ldr	r3, [r3, #0]
   185f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   185f6:	3201      	adds	r2, #1
   185f8:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   185fa:	4b2a      	ldr	r3, [pc, #168]	; (186a4 <prvTraceGetDTS+0x1b4>)
   185fc:	681b      	ldr	r3, [r3, #0]
   185fe:	4a29      	ldr	r2, [pc, #164]	; (186a4 <prvTraceGetDTS+0x1b4>)
   18600:	6812      	ldr	r2, [r2, #0]
   18602:	6a91      	ldr	r1, [r2, #40]	; 0x28
   18604:	4a27      	ldr	r2, [pc, #156]	; (186a4 <prvTraceGetDTS+0x1b4>)
   18606:	6812      	ldr	r2, [r2, #0]
   18608:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1860a:	1a8a      	subs	r2, r1, r2
   1860c:	629a      	str	r2, [r3, #40]	; 0x28
   1860e:	e003      	b.n	18618 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   18610:	4b24      	ldr	r3, [pc, #144]	; (186a4 <prvTraceGetDTS+0x1b4>)
   18612:	681b      	ldr	r3, [r3, #0]
   18614:	68fa      	ldr	r2, [r7, #12]
   18616:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   18618:	1dbb      	adds	r3, r7, #6
   1861a:	881a      	ldrh	r2, [r3, #0]
   1861c:	693b      	ldr	r3, [r7, #16]
   1861e:	429a      	cmp	r2, r3
   18620:	d22f      	bcs.n	18682 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   18622:	4b29      	ldr	r3, [pc, #164]	; (186c8 <prvTraceGetDTS+0x1d8>)
   18624:	4798      	blx	r3
   18626:	0003      	movs	r3, r0
   18628:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1862a:	697b      	ldr	r3, [r7, #20]
   1862c:	2b00      	cmp	r3, #0
   1862e:	d028      	beq.n	18682 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   18630:	1dbb      	adds	r3, r7, #6
   18632:	881b      	ldrh	r3, [r3, #0]
   18634:	4a18      	ldr	r2, [pc, #96]	; (18698 <prvTraceGetDTS+0x1a8>)
   18636:	4293      	cmp	r3, r2
   18638:	d10b      	bne.n	18652 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1863a:	697b      	ldr	r3, [r7, #20]
   1863c:	22a9      	movs	r2, #169	; 0xa9
   1863e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   18640:	693b      	ldr	r3, [r7, #16]
   18642:	0c1b      	lsrs	r3, r3, #16
   18644:	b29a      	uxth	r2, r3
   18646:	697b      	ldr	r3, [r7, #20]
   18648:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1864a:	697b      	ldr	r3, [r7, #20]
   1864c:	2200      	movs	r2, #0
   1864e:	705a      	strb	r2, [r3, #1]
   18650:	e015      	b.n	1867e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   18652:	1dbb      	adds	r3, r7, #6
   18654:	881b      	ldrh	r3, [r3, #0]
   18656:	2bff      	cmp	r3, #255	; 0xff
   18658:	d10d      	bne.n	18676 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1865a:	697b      	ldr	r3, [r7, #20]
   1865c:	22a8      	movs	r2, #168	; 0xa8
   1865e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   18660:	693b      	ldr	r3, [r7, #16]
   18662:	0a1b      	lsrs	r3, r3, #8
   18664:	b29a      	uxth	r2, r3
   18666:	697b      	ldr	r3, [r7, #20]
   18668:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1866a:	693b      	ldr	r3, [r7, #16]
   1866c:	0e1b      	lsrs	r3, r3, #24
   1866e:	b2da      	uxtb	r2, r3
   18670:	697b      	ldr	r3, [r7, #20]
   18672:	705a      	strb	r2, [r3, #1]
   18674:	e003      	b.n	1867e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   18676:	4b15      	ldr	r3, [pc, #84]	; (186cc <prvTraceGetDTS+0x1dc>)
   18678:	0018      	movs	r0, r3
   1867a:	4b09      	ldr	r3, [pc, #36]	; (186a0 <prvTraceGetDTS+0x1b0>)
   1867c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1867e:	4b14      	ldr	r3, [pc, #80]	; (186d0 <prvTraceGetDTS+0x1e0>)
   18680:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   18682:	693b      	ldr	r3, [r7, #16]
   18684:	b29b      	uxth	r3, r3
   18686:	1dba      	adds	r2, r7, #6
   18688:	8812      	ldrh	r2, [r2, #0]
   1868a:	4013      	ands	r3, r2
   1868c:	b29b      	uxth	r3, r3
}
   1868e:	0018      	movs	r0, r3
   18690:	46bd      	mov	sp, r7
   18692:	b006      	add	sp, #24
   18694:	bdb0      	pop	{r4, r5, r7, pc}
   18696:	46c0      	nop			; (mov r8, r8)
   18698:	0000ffff 	.word	0x0000ffff
   1869c:	0003650c 	.word	0x0003650c
   186a0:	000182dd 	.word	0x000182dd
   186a4:	20000c6c 	.word	0x20000c6c
   186a8:	20000bc8 	.word	0x20000bc8
   186ac:	e000e018 	.word	0xe000e018
   186b0:	2000538c 	.word	0x2000538c
   186b4:	000286f5 	.word	0x000286f5
   186b8:	000186d5 	.word	0x000186d5
   186bc:	20000c78 	.word	0x20000c78
   186c0:	0003130d 	.word	0x0003130d
   186c4:	00031419 	.word	0x00031419
   186c8:	00017e95 	.word	0x00017e95
   186cc:	0003654c 	.word	0x0003654c
   186d0:	00018499 	.word	0x00018499

000186d4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   186d4:	b580      	push	{r7, lr}
   186d6:	b084      	sub	sp, #16
   186d8:	af00      	add	r7, sp, #0
   186da:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   186dc:	2300      	movs	r3, #0
   186de:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   186e0:	2300      	movs	r3, #0
   186e2:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   186e4:	4b2d      	ldr	r3, [pc, #180]	; (1879c <prvTracePortGetTimeStamp+0xc8>)
   186e6:	681b      	ldr	r3, [r3, #0]
   186e8:	2b01      	cmp	r3, #1
   186ea:	d107      	bne.n	186fc <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   186ec:	687b      	ldr	r3, [r7, #4]
   186ee:	2b00      	cmp	r3, #0
   186f0:	d04f      	beq.n	18792 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   186f2:	4b2b      	ldr	r3, [pc, #172]	; (187a0 <prvTracePortGetTimeStamp+0xcc>)
   186f4:	681a      	ldr	r2, [r3, #0]
   186f6:	687b      	ldr	r3, [r7, #4]
   186f8:	601a      	str	r2, [r3, #0]
		return;
   186fa:	e04a      	b.n	18792 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   186fc:	4b29      	ldr	r3, [pc, #164]	; (187a4 <prvTracePortGetTimeStamp+0xd0>)
   186fe:	681a      	ldr	r2, [r3, #0]
   18700:	4b29      	ldr	r3, [pc, #164]	; (187a8 <prvTracePortGetTimeStamp+0xd4>)
   18702:	681b      	ldr	r3, [r3, #0]
   18704:	1ad3      	subs	r3, r2, r3
   18706:	3301      	adds	r3, #1
   18708:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1870a:	4b28      	ldr	r3, [pc, #160]	; (187ac <prvTracePortGetTimeStamp+0xd8>)
   1870c:	681a      	ldr	r2, [r3, #0]
   1870e:	4b28      	ldr	r3, [pc, #160]	; (187b0 <prvTracePortGetTimeStamp+0xdc>)
   18710:	681b      	ldr	r3, [r3, #0]
   18712:	1ad3      	subs	r3, r2, r3
   18714:	3b01      	subs	r3, #1
   18716:	2b00      	cmp	r3, #0
   18718:	db03      	blt.n	18722 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1871a:	4b24      	ldr	r3, [pc, #144]	; (187ac <prvTracePortGetTimeStamp+0xd8>)
   1871c:	681b      	ldr	r3, [r3, #0]
   1871e:	60fb      	str	r3, [r7, #12]
   18720:	e002      	b.n	18728 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   18722:	4b23      	ldr	r3, [pc, #140]	; (187b0 <prvTracePortGetTimeStamp+0xdc>)
   18724:	681b      	ldr	r3, [r3, #0]
   18726:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   18728:	4b20      	ldr	r3, [pc, #128]	; (187ac <prvTracePortGetTimeStamp+0xd8>)
   1872a:	681b      	ldr	r3, [r3, #0]
   1872c:	68fa      	ldr	r2, [r7, #12]
   1872e:	429a      	cmp	r2, r3
   18730:	d107      	bne.n	18742 <prvTracePortGetTimeStamp+0x6e>
   18732:	4b20      	ldr	r3, [pc, #128]	; (187b4 <prvTracePortGetTimeStamp+0xe0>)
   18734:	681b      	ldr	r3, [r3, #0]
   18736:	68ba      	ldr	r2, [r7, #8]
   18738:	429a      	cmp	r2, r3
   1873a:	d202      	bcs.n	18742 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1873c:	68fb      	ldr	r3, [r7, #12]
   1873e:	3301      	adds	r3, #1
   18740:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   18742:	687b      	ldr	r3, [r7, #4]
   18744:	2b00      	cmp	r3, #0
   18746:	d016      	beq.n	18776 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   18748:	4b16      	ldr	r3, [pc, #88]	; (187a4 <prvTracePortGetTimeStamp+0xd0>)
   1874a:	681b      	ldr	r3, [r3, #0]
   1874c:	3301      	adds	r3, #1
   1874e:	089b      	lsrs	r3, r3, #2
   18750:	68fa      	ldr	r2, [r7, #12]
   18752:	435a      	muls	r2, r3
   18754:	4b12      	ldr	r3, [pc, #72]	; (187a0 <prvTracePortGetTimeStamp+0xcc>)
   18756:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   18758:	4b12      	ldr	r3, [pc, #72]	; (187a4 <prvTracePortGetTimeStamp+0xd0>)
   1875a:	681b      	ldr	r3, [r3, #0]
   1875c:	3301      	adds	r3, #1
   1875e:	2203      	movs	r2, #3
   18760:	4013      	ands	r3, r2
   18762:	68fa      	ldr	r2, [r7, #12]
   18764:	435a      	muls	r2, r3
   18766:	68bb      	ldr	r3, [r7, #8]
   18768:	18d3      	adds	r3, r2, r3
   1876a:	089a      	lsrs	r2, r3, #2
   1876c:	4b0c      	ldr	r3, [pc, #48]	; (187a0 <prvTracePortGetTimeStamp+0xcc>)
   1876e:	681b      	ldr	r3, [r3, #0]
   18770:	18d2      	adds	r2, r2, r3
   18772:	4b0b      	ldr	r3, [pc, #44]	; (187a0 <prvTracePortGetTimeStamp+0xcc>)
   18774:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   18776:	4b0d      	ldr	r3, [pc, #52]	; (187ac <prvTracePortGetTimeStamp+0xd8>)
   18778:	68fa      	ldr	r2, [r7, #12]
   1877a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1877c:	687b      	ldr	r3, [r7, #4]
   1877e:	2b00      	cmp	r3, #0
   18780:	d003      	beq.n	1878a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   18782:	4b07      	ldr	r3, [pc, #28]	; (187a0 <prvTracePortGetTimeStamp+0xcc>)
   18784:	681a      	ldr	r2, [r3, #0]
   18786:	687b      	ldr	r3, [r7, #4]
   18788:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1878a:	4b0a      	ldr	r3, [pc, #40]	; (187b4 <prvTracePortGetTimeStamp+0xe0>)
   1878c:	68ba      	ldr	r2, [r7, #8]
   1878e:	601a      	str	r2, [r3, #0]
   18790:	e000      	b.n	18794 <prvTracePortGetTimeStamp+0xc0>
		return;
   18792:	46c0      	nop			; (mov r8, r8)
}
   18794:	46bd      	mov	sp, r7
   18796:	b004      	add	sp, #16
   18798:	bd80      	pop	{r7, pc}
   1879a:	46c0      	nop			; (mov r8, r8)
   1879c:	20000bb8 	.word	0x20000bb8
   187a0:	20000bbc 	.word	0x20000bbc
   187a4:	e000e014 	.word	0xe000e014
   187a8:	e000e018 	.word	0xe000e018
   187ac:	20000c7c 	.word	0x20000c7c
   187b0:	20000bb4 	.word	0x20000bb4
   187b4:	20000c80 	.word	0x20000c80

000187b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   187b8:	b580      	push	{r7, lr}
   187ba:	b082      	sub	sp, #8
   187bc:	af00      	add	r7, sp, #0
   187be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   187c0:	687b      	ldr	r3, [r7, #4]
   187c2:	3308      	adds	r3, #8
   187c4:	001a      	movs	r2, r3
   187c6:	687b      	ldr	r3, [r7, #4]
   187c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   187ca:	687b      	ldr	r3, [r7, #4]
   187cc:	2201      	movs	r2, #1
   187ce:	4252      	negs	r2, r2
   187d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   187d2:	687b      	ldr	r3, [r7, #4]
   187d4:	3308      	adds	r3, #8
   187d6:	001a      	movs	r2, r3
   187d8:	687b      	ldr	r3, [r7, #4]
   187da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   187dc:	687b      	ldr	r3, [r7, #4]
   187de:	3308      	adds	r3, #8
   187e0:	001a      	movs	r2, r3
   187e2:	687b      	ldr	r3, [r7, #4]
   187e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   187e6:	687b      	ldr	r3, [r7, #4]
   187e8:	2200      	movs	r2, #0
   187ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   187ec:	46c0      	nop			; (mov r8, r8)
   187ee:	46bd      	mov	sp, r7
   187f0:	b002      	add	sp, #8
   187f2:	bd80      	pop	{r7, pc}

000187f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   187f4:	b580      	push	{r7, lr}
   187f6:	b082      	sub	sp, #8
   187f8:	af00      	add	r7, sp, #0
   187fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   187fc:	687b      	ldr	r3, [r7, #4]
   187fe:	2200      	movs	r2, #0
   18800:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   18802:	46c0      	nop			; (mov r8, r8)
   18804:	46bd      	mov	sp, r7
   18806:	b002      	add	sp, #8
   18808:	bd80      	pop	{r7, pc}

0001880a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1880a:	b580      	push	{r7, lr}
   1880c:	b084      	sub	sp, #16
   1880e:	af00      	add	r7, sp, #0
   18810:	6078      	str	r0, [r7, #4]
   18812:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   18814:	687b      	ldr	r3, [r7, #4]
   18816:	685b      	ldr	r3, [r3, #4]
   18818:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1881a:	683b      	ldr	r3, [r7, #0]
   1881c:	68fa      	ldr	r2, [r7, #12]
   1881e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   18820:	68fb      	ldr	r3, [r7, #12]
   18822:	689a      	ldr	r2, [r3, #8]
   18824:	683b      	ldr	r3, [r7, #0]
   18826:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   18828:	68fb      	ldr	r3, [r7, #12]
   1882a:	689b      	ldr	r3, [r3, #8]
   1882c:	683a      	ldr	r2, [r7, #0]
   1882e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   18830:	68fb      	ldr	r3, [r7, #12]
   18832:	683a      	ldr	r2, [r7, #0]
   18834:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   18836:	683b      	ldr	r3, [r7, #0]
   18838:	687a      	ldr	r2, [r7, #4]
   1883a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1883c:	687b      	ldr	r3, [r7, #4]
   1883e:	681b      	ldr	r3, [r3, #0]
   18840:	1c5a      	adds	r2, r3, #1
   18842:	687b      	ldr	r3, [r7, #4]
   18844:	601a      	str	r2, [r3, #0]
}
   18846:	46c0      	nop			; (mov r8, r8)
   18848:	46bd      	mov	sp, r7
   1884a:	b004      	add	sp, #16
   1884c:	bd80      	pop	{r7, pc}

0001884e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1884e:	b580      	push	{r7, lr}
   18850:	b084      	sub	sp, #16
   18852:	af00      	add	r7, sp, #0
   18854:	6078      	str	r0, [r7, #4]
   18856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   18858:	683b      	ldr	r3, [r7, #0]
   1885a:	681b      	ldr	r3, [r3, #0]
   1885c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1885e:	68bb      	ldr	r3, [r7, #8]
   18860:	3301      	adds	r3, #1
   18862:	d103      	bne.n	1886c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   18864:	687b      	ldr	r3, [r7, #4]
   18866:	691b      	ldr	r3, [r3, #16]
   18868:	60fb      	str	r3, [r7, #12]
   1886a:	e00c      	b.n	18886 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1886c:	687b      	ldr	r3, [r7, #4]
   1886e:	3308      	adds	r3, #8
   18870:	60fb      	str	r3, [r7, #12]
   18872:	e002      	b.n	1887a <vListInsert+0x2c>
   18874:	68fb      	ldr	r3, [r7, #12]
   18876:	685b      	ldr	r3, [r3, #4]
   18878:	60fb      	str	r3, [r7, #12]
   1887a:	68fb      	ldr	r3, [r7, #12]
   1887c:	685b      	ldr	r3, [r3, #4]
   1887e:	681a      	ldr	r2, [r3, #0]
   18880:	68bb      	ldr	r3, [r7, #8]
   18882:	429a      	cmp	r2, r3
   18884:	d9f6      	bls.n	18874 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   18886:	68fb      	ldr	r3, [r7, #12]
   18888:	685a      	ldr	r2, [r3, #4]
   1888a:	683b      	ldr	r3, [r7, #0]
   1888c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1888e:	683b      	ldr	r3, [r7, #0]
   18890:	685b      	ldr	r3, [r3, #4]
   18892:	683a      	ldr	r2, [r7, #0]
   18894:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   18896:	683b      	ldr	r3, [r7, #0]
   18898:	68fa      	ldr	r2, [r7, #12]
   1889a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1889c:	68fb      	ldr	r3, [r7, #12]
   1889e:	683a      	ldr	r2, [r7, #0]
   188a0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   188a2:	683b      	ldr	r3, [r7, #0]
   188a4:	687a      	ldr	r2, [r7, #4]
   188a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   188a8:	687b      	ldr	r3, [r7, #4]
   188aa:	681b      	ldr	r3, [r3, #0]
   188ac:	1c5a      	adds	r2, r3, #1
   188ae:	687b      	ldr	r3, [r7, #4]
   188b0:	601a      	str	r2, [r3, #0]
}
   188b2:	46c0      	nop			; (mov r8, r8)
   188b4:	46bd      	mov	sp, r7
   188b6:	b004      	add	sp, #16
   188b8:	bd80      	pop	{r7, pc}

000188ba <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   188ba:	b580      	push	{r7, lr}
   188bc:	b084      	sub	sp, #16
   188be:	af00      	add	r7, sp, #0
   188c0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   188c2:	687b      	ldr	r3, [r7, #4]
   188c4:	691b      	ldr	r3, [r3, #16]
   188c6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   188c8:	687b      	ldr	r3, [r7, #4]
   188ca:	685b      	ldr	r3, [r3, #4]
   188cc:	687a      	ldr	r2, [r7, #4]
   188ce:	6892      	ldr	r2, [r2, #8]
   188d0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   188d2:	687b      	ldr	r3, [r7, #4]
   188d4:	689b      	ldr	r3, [r3, #8]
   188d6:	687a      	ldr	r2, [r7, #4]
   188d8:	6852      	ldr	r2, [r2, #4]
   188da:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   188dc:	68fb      	ldr	r3, [r7, #12]
   188de:	685a      	ldr	r2, [r3, #4]
   188e0:	687b      	ldr	r3, [r7, #4]
   188e2:	429a      	cmp	r2, r3
   188e4:	d103      	bne.n	188ee <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   188e6:	687b      	ldr	r3, [r7, #4]
   188e8:	689a      	ldr	r2, [r3, #8]
   188ea:	68fb      	ldr	r3, [r7, #12]
   188ec:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   188ee:	687b      	ldr	r3, [r7, #4]
   188f0:	2200      	movs	r2, #0
   188f2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   188f4:	68fb      	ldr	r3, [r7, #12]
   188f6:	681b      	ldr	r3, [r3, #0]
   188f8:	1e5a      	subs	r2, r3, #1
   188fa:	68fb      	ldr	r3, [r7, #12]
   188fc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   188fe:	68fb      	ldr	r3, [r7, #12]
   18900:	681b      	ldr	r3, [r3, #0]
}
   18902:	0018      	movs	r0, r3
   18904:	46bd      	mov	sp, r7
   18906:	b004      	add	sp, #16
   18908:	bd80      	pop	{r7, pc}
	...

0001890c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1890c:	b580      	push	{r7, lr}
   1890e:	b084      	sub	sp, #16
   18910:	af00      	add	r7, sp, #0
   18912:	60f8      	str	r0, [r7, #12]
   18914:	60b9      	str	r1, [r7, #8]
   18916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   18918:	68fb      	ldr	r3, [r7, #12]
   1891a:	3b04      	subs	r3, #4
   1891c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1891e:	68fb      	ldr	r3, [r7, #12]
   18920:	2280      	movs	r2, #128	; 0x80
   18922:	0452      	lsls	r2, r2, #17
   18924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   18926:	68fb      	ldr	r3, [r7, #12]
   18928:	3b04      	subs	r3, #4
   1892a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1892c:	68ba      	ldr	r2, [r7, #8]
   1892e:	68fb      	ldr	r3, [r7, #12]
   18930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   18932:	68fb      	ldr	r3, [r7, #12]
   18934:	3b04      	subs	r3, #4
   18936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   18938:	4a08      	ldr	r2, [pc, #32]	; (1895c <pxPortInitialiseStack+0x50>)
   1893a:	68fb      	ldr	r3, [r7, #12]
   1893c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1893e:	68fb      	ldr	r3, [r7, #12]
   18940:	3b14      	subs	r3, #20
   18942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   18944:	687a      	ldr	r2, [r7, #4]
   18946:	68fb      	ldr	r3, [r7, #12]
   18948:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1894a:	68fb      	ldr	r3, [r7, #12]
   1894c:	3b20      	subs	r3, #32
   1894e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   18950:	68fb      	ldr	r3, [r7, #12]
}
   18952:	0018      	movs	r0, r3
   18954:	46bd      	mov	sp, r7
   18956:	b004      	add	sp, #16
   18958:	bd80      	pop	{r7, pc}
   1895a:	46c0      	nop			; (mov r8, r8)
   1895c:	00018961 	.word	0x00018961

00018960 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   18960:	b580      	push	{r7, lr}
   18962:	b082      	sub	sp, #8
   18964:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   18966:	2300      	movs	r3, #0
   18968:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1896a:	4b07      	ldr	r3, [pc, #28]	; (18988 <prvTaskExitError+0x28>)
   1896c:	681b      	ldr	r3, [r3, #0]
   1896e:	3301      	adds	r3, #1
   18970:	d001      	beq.n	18976 <prvTaskExitError+0x16>
   18972:	b672      	cpsid	i
   18974:	e7fe      	b.n	18974 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   18976:	b672      	cpsid	i
	while( ulDummy == 0 )
   18978:	46c0      	nop			; (mov r8, r8)
   1897a:	687b      	ldr	r3, [r7, #4]
   1897c:	2b00      	cmp	r3, #0
   1897e:	d0fc      	beq.n	1897a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   18980:	46c0      	nop			; (mov r8, r8)
   18982:	46bd      	mov	sp, r7
   18984:	b002      	add	sp, #8
   18986:	bd80      	pop	{r7, pc}
   18988:	20000114 	.word	0x20000114

0001898c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1898c:	b580      	push	{r7, lr}
   1898e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   18990:	46c0      	nop			; (mov r8, r8)
   18992:	46bd      	mov	sp, r7
   18994:	bd80      	pop	{r7, pc}
	...

000189a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   189a0:	4a0b      	ldr	r2, [pc, #44]	; (189d0 <pxCurrentTCBConst2>)
   189a2:	6813      	ldr	r3, [r2, #0]
   189a4:	6818      	ldr	r0, [r3, #0]
   189a6:	3020      	adds	r0, #32
   189a8:	f380 8809 	msr	PSP, r0
   189ac:	2002      	movs	r0, #2
   189ae:	f380 8814 	msr	CONTROL, r0
   189b2:	f3bf 8f6f 	isb	sy
   189b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   189b8:	46ae      	mov	lr, r5
   189ba:	bc08      	pop	{r3}
   189bc:	bc04      	pop	{r2}
   189be:	b662      	cpsie	i
   189c0:	4718      	bx	r3
   189c2:	46c0      	nop			; (mov r8, r8)
   189c4:	46c0      	nop			; (mov r8, r8)
   189c6:	46c0      	nop			; (mov r8, r8)
   189c8:	46c0      	nop			; (mov r8, r8)
   189ca:	46c0      	nop			; (mov r8, r8)
   189cc:	46c0      	nop			; (mov r8, r8)
   189ce:	46c0      	nop			; (mov r8, r8)

000189d0 <pxCurrentTCBConst2>:
   189d0:	20003f54 	.word	0x20003f54
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   189d4:	46c0      	nop			; (mov r8, r8)
   189d6:	46c0      	nop			; (mov r8, r8)

000189d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   189d8:	b580      	push	{r7, lr}
   189da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   189dc:	4b0e      	ldr	r3, [pc, #56]	; (18a18 <xPortStartScheduler+0x40>)
   189de:	4a0e      	ldr	r2, [pc, #56]	; (18a18 <xPortStartScheduler+0x40>)
   189e0:	6812      	ldr	r2, [r2, #0]
   189e2:	21ff      	movs	r1, #255	; 0xff
   189e4:	0409      	lsls	r1, r1, #16
   189e6:	430a      	orrs	r2, r1
   189e8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   189ea:	4b0b      	ldr	r3, [pc, #44]	; (18a18 <xPortStartScheduler+0x40>)
   189ec:	4a0a      	ldr	r2, [pc, #40]	; (18a18 <xPortStartScheduler+0x40>)
   189ee:	6812      	ldr	r2, [r2, #0]
   189f0:	21ff      	movs	r1, #255	; 0xff
   189f2:	0609      	lsls	r1, r1, #24
   189f4:	430a      	orrs	r2, r1
   189f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   189f8:	4b08      	ldr	r3, [pc, #32]	; (18a1c <xPortStartScheduler+0x44>)
   189fa:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   189fc:	4b08      	ldr	r3, [pc, #32]	; (18a20 <xPortStartScheduler+0x48>)
   189fe:	2200      	movs	r2, #0
   18a00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   18a02:	4b08      	ldr	r3, [pc, #32]	; (18a24 <xPortStartScheduler+0x4c>)
   18a04:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   18a06:	4b08      	ldr	r3, [pc, #32]	; (18a28 <xPortStartScheduler+0x50>)
   18a08:	4798      	blx	r3
	prvTaskExitError();
   18a0a:	4b08      	ldr	r3, [pc, #32]	; (18a2c <xPortStartScheduler+0x54>)
   18a0c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   18a0e:	2300      	movs	r3, #0
}
   18a10:	0018      	movs	r0, r3
   18a12:	46bd      	mov	sp, r7
   18a14:	bd80      	pop	{r7, pc}
   18a16:	46c0      	nop			; (mov r8, r8)
   18a18:	e000ed20 	.word	0xe000ed20
   18a1c:	00018b39 	.word	0x00018b39
   18a20:	20000114 	.word	0x20000114
   18a24:	000189a1 	.word	0x000189a1
   18a28:	0001b095 	.word	0x0001b095
   18a2c:	00018961 	.word	0x00018961

00018a30 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   18a30:	b580      	push	{r7, lr}
   18a32:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   18a34:	4b03      	ldr	r3, [pc, #12]	; (18a44 <vPortYield+0x14>)
   18a36:	2280      	movs	r2, #128	; 0x80
   18a38:	0552      	lsls	r2, r2, #21
   18a3a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   18a3c:	46c0      	nop			; (mov r8, r8)
   18a3e:	46bd      	mov	sp, r7
   18a40:	bd80      	pop	{r7, pc}
   18a42:	46c0      	nop			; (mov r8, r8)
   18a44:	e000ed04 	.word	0xe000ed04

00018a48 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   18a48:	b580      	push	{r7, lr}
   18a4a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   18a4c:	b672      	cpsid	i
    uxCriticalNesting++;
   18a4e:	4b06      	ldr	r3, [pc, #24]	; (18a68 <vPortEnterCritical+0x20>)
   18a50:	681b      	ldr	r3, [r3, #0]
   18a52:	1c5a      	adds	r2, r3, #1
   18a54:	4b04      	ldr	r3, [pc, #16]	; (18a68 <vPortEnterCritical+0x20>)
   18a56:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   18a58:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   18a5c:	f3bf 8f6f 	isb	sy
}
   18a60:	46c0      	nop			; (mov r8, r8)
   18a62:	46bd      	mov	sp, r7
   18a64:	bd80      	pop	{r7, pc}
   18a66:	46c0      	nop			; (mov r8, r8)
   18a68:	20000114 	.word	0x20000114

00018a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   18a6c:	b580      	push	{r7, lr}
   18a6e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   18a70:	4b09      	ldr	r3, [pc, #36]	; (18a98 <vPortExitCritical+0x2c>)
   18a72:	681b      	ldr	r3, [r3, #0]
   18a74:	2b00      	cmp	r3, #0
   18a76:	d101      	bne.n	18a7c <vPortExitCritical+0x10>
   18a78:	b672      	cpsid	i
   18a7a:	e7fe      	b.n	18a7a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   18a7c:	4b06      	ldr	r3, [pc, #24]	; (18a98 <vPortExitCritical+0x2c>)
   18a7e:	681b      	ldr	r3, [r3, #0]
   18a80:	1e5a      	subs	r2, r3, #1
   18a82:	4b05      	ldr	r3, [pc, #20]	; (18a98 <vPortExitCritical+0x2c>)
   18a84:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   18a86:	4b04      	ldr	r3, [pc, #16]	; (18a98 <vPortExitCritical+0x2c>)
   18a88:	681b      	ldr	r3, [r3, #0]
   18a8a:	2b00      	cmp	r3, #0
   18a8c:	d100      	bne.n	18a90 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   18a8e:	b662      	cpsie	i
    }
}
   18a90:	46c0      	nop			; (mov r8, r8)
   18a92:	46bd      	mov	sp, r7
   18a94:	bd80      	pop	{r7, pc}
   18a96:	46c0      	nop			; (mov r8, r8)
   18a98:	20000114 	.word	0x20000114

00018a9c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   18a9c:	f3ef 8010 	mrs	r0, PRIMASK
   18aa0:	b672      	cpsid	i
   18aa2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   18aa4:	46c0      	nop			; (mov r8, r8)
   18aa6:	0018      	movs	r0, r3

00018aa8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   18aa8:	f380 8810 	msr	PRIMASK, r0
   18aac:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   18aae:	46c0      	nop			; (mov r8, r8)

00018ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   18ab0:	f3ef 8009 	mrs	r0, PSP
   18ab4:	4b0e      	ldr	r3, [pc, #56]	; (18af0 <pxCurrentTCBConst>)
   18ab6:	681a      	ldr	r2, [r3, #0]
   18ab8:	3820      	subs	r0, #32
   18aba:	6010      	str	r0, [r2, #0]
   18abc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   18abe:	4644      	mov	r4, r8
   18ac0:	464d      	mov	r5, r9
   18ac2:	4656      	mov	r6, sl
   18ac4:	465f      	mov	r7, fp
   18ac6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   18ac8:	b508      	push	{r3, lr}
   18aca:	b672      	cpsid	i
   18acc:	f002 fae2 	bl	1b094 <vTaskSwitchContext>
   18ad0:	b662      	cpsie	i
   18ad2:	bc0c      	pop	{r2, r3}
   18ad4:	6811      	ldr	r1, [r2, #0]
   18ad6:	6808      	ldr	r0, [r1, #0]
   18ad8:	3010      	adds	r0, #16
   18ada:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   18adc:	46a0      	mov	r8, r4
   18ade:	46a9      	mov	r9, r5
   18ae0:	46b2      	mov	sl, r6
   18ae2:	46bb      	mov	fp, r7
   18ae4:	f380 8809 	msr	PSP, r0
   18ae8:	3820      	subs	r0, #32
   18aea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   18aec:	4718      	bx	r3
   18aee:	46c0      	nop			; (mov r8, r8)

00018af0 <pxCurrentTCBConst>:
   18af0:	20003f54 	.word	0x20003f54
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   18af4:	46c0      	nop			; (mov r8, r8)
   18af6:	46c0      	nop			; (mov r8, r8)

00018af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   18af8:	b580      	push	{r7, lr}
   18afa:	b082      	sub	sp, #8
   18afc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   18afe:	4b0a      	ldr	r3, [pc, #40]	; (18b28 <SysTick_Handler+0x30>)
   18b00:	4798      	blx	r3
   18b02:	0003      	movs	r3, r0
   18b04:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   18b06:	4b09      	ldr	r3, [pc, #36]	; (18b2c <SysTick_Handler+0x34>)
   18b08:	4798      	blx	r3
   18b0a:	1e03      	subs	r3, r0, #0
   18b0c:	d003      	beq.n	18b16 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   18b0e:	4b08      	ldr	r3, [pc, #32]	; (18b30 <SysTick_Handler+0x38>)
   18b10:	2280      	movs	r2, #128	; 0x80
   18b12:	0552      	lsls	r2, r2, #21
   18b14:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   18b16:	687b      	ldr	r3, [r7, #4]
   18b18:	0018      	movs	r0, r3
   18b1a:	4b06      	ldr	r3, [pc, #24]	; (18b34 <SysTick_Handler+0x3c>)
   18b1c:	4798      	blx	r3
}
   18b1e:	46c0      	nop			; (mov r8, r8)
   18b20:	46bd      	mov	sp, r7
   18b22:	b002      	add	sp, #8
   18b24:	bd80      	pop	{r7, pc}
   18b26:	46c0      	nop			; (mov r8, r8)
   18b28:	00018a9d 	.word	0x00018a9d
   18b2c:	0001aea5 	.word	0x0001aea5
   18b30:	e000ed04 	.word	0xe000ed04
   18b34:	00018aa9 	.word	0x00018aa9

00018b38 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   18b38:	b5b0      	push	{r4, r5, r7, lr}
   18b3a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   18b3c:	4b0b      	ldr	r3, [pc, #44]	; (18b6c <prvSetupTimerInterrupt+0x34>)
   18b3e:	2200      	movs	r2, #0
   18b40:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   18b42:	4b0b      	ldr	r3, [pc, #44]	; (18b70 <prvSetupTimerInterrupt+0x38>)
   18b44:	2200      	movs	r2, #0
   18b46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   18b48:	4c0a      	ldr	r4, [pc, #40]	; (18b74 <prvSetupTimerInterrupt+0x3c>)
   18b4a:	2000      	movs	r0, #0
   18b4c:	4b0a      	ldr	r3, [pc, #40]	; (18b78 <prvSetupTimerInterrupt+0x40>)
   18b4e:	4798      	blx	r3
   18b50:	4b0a      	ldr	r3, [pc, #40]	; (18b7c <prvSetupTimerInterrupt+0x44>)
   18b52:	22fa      	movs	r2, #250	; 0xfa
   18b54:	0091      	lsls	r1, r2, #2
   18b56:	4798      	blx	r3
   18b58:	0003      	movs	r3, r0
   18b5a:	3b01      	subs	r3, #1
   18b5c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   18b5e:	4b03      	ldr	r3, [pc, #12]	; (18b6c <prvSetupTimerInterrupt+0x34>)
   18b60:	2207      	movs	r2, #7
   18b62:	601a      	str	r2, [r3, #0]
}
   18b64:	46c0      	nop			; (mov r8, r8)
   18b66:	46bd      	mov	sp, r7
   18b68:	bdb0      	pop	{r4, r5, r7, pc}
   18b6a:	46c0      	nop			; (mov r8, r8)
   18b6c:	e000e010 	.word	0xe000e010
   18b70:	e000e018 	.word	0xe000e018
   18b74:	e000e014 	.word	0xe000e014
   18b78:	000286f5 	.word	0x000286f5
   18b7c:	0003130d 	.word	0x0003130d

00018b80 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   18b80:	b580      	push	{r7, lr}
   18b82:	b084      	sub	sp, #16
   18b84:	af00      	add	r7, sp, #0
   18b86:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   18b88:	2300      	movs	r3, #0
   18b8a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   18b8c:	687b      	ldr	r3, [r7, #4]
   18b8e:	2207      	movs	r2, #7
   18b90:	4013      	ands	r3, r2
   18b92:	d004      	beq.n	18b9e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   18b94:	687b      	ldr	r3, [r7, #4]
   18b96:	2207      	movs	r2, #7
   18b98:	4393      	bics	r3, r2
   18b9a:	3308      	adds	r3, #8
   18b9c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   18b9e:	4b21      	ldr	r3, [pc, #132]	; (18c24 <pvPortMalloc+0xa4>)
   18ba0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   18ba2:	4b21      	ldr	r3, [pc, #132]	; (18c28 <pvPortMalloc+0xa8>)
   18ba4:	681b      	ldr	r3, [r3, #0]
   18ba6:	2b00      	cmp	r3, #0
   18ba8:	d105      	bne.n	18bb6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   18baa:	4b20      	ldr	r3, [pc, #128]	; (18c2c <pvPortMalloc+0xac>)
   18bac:	2207      	movs	r2, #7
   18bae:	4393      	bics	r3, r2
   18bb0:	001a      	movs	r2, r3
   18bb2:	4b1d      	ldr	r3, [pc, #116]	; (18c28 <pvPortMalloc+0xa8>)
   18bb4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   18bb6:	4b1e      	ldr	r3, [pc, #120]	; (18c30 <pvPortMalloc+0xb0>)
   18bb8:	681a      	ldr	r2, [r3, #0]
   18bba:	687b      	ldr	r3, [r7, #4]
   18bbc:	18d3      	adds	r3, r2, r3
   18bbe:	4a1d      	ldr	r2, [pc, #116]	; (18c34 <pvPortMalloc+0xb4>)
   18bc0:	4293      	cmp	r3, r2
   18bc2:	d813      	bhi.n	18bec <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   18bc4:	4b1a      	ldr	r3, [pc, #104]	; (18c30 <pvPortMalloc+0xb0>)
   18bc6:	681a      	ldr	r2, [r3, #0]
   18bc8:	687b      	ldr	r3, [r7, #4]
   18bca:	18d2      	adds	r2, r2, r3
   18bcc:	4b18      	ldr	r3, [pc, #96]	; (18c30 <pvPortMalloc+0xb0>)
   18bce:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   18bd0:	429a      	cmp	r2, r3
   18bd2:	d90b      	bls.n	18bec <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   18bd4:	4b14      	ldr	r3, [pc, #80]	; (18c28 <pvPortMalloc+0xa8>)
   18bd6:	681a      	ldr	r2, [r3, #0]
   18bd8:	4b15      	ldr	r3, [pc, #84]	; (18c30 <pvPortMalloc+0xb0>)
   18bda:	681b      	ldr	r3, [r3, #0]
   18bdc:	18d3      	adds	r3, r2, r3
   18bde:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   18be0:	4b13      	ldr	r3, [pc, #76]	; (18c30 <pvPortMalloc+0xb0>)
   18be2:	681a      	ldr	r2, [r3, #0]
   18be4:	687b      	ldr	r3, [r7, #4]
   18be6:	18d2      	adds	r2, r2, r3
   18be8:	4b11      	ldr	r3, [pc, #68]	; (18c30 <pvPortMalloc+0xb0>)
   18bea:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   18bec:	68fb      	ldr	r3, [r7, #12]
   18bee:	2b00      	cmp	r3, #0
   18bf0:	d006      	beq.n	18c00 <pvPortMalloc+0x80>
   18bf2:	68fb      	ldr	r3, [r7, #12]
   18bf4:	687a      	ldr	r2, [r7, #4]
   18bf6:	0019      	movs	r1, r3
   18bf8:	2094      	movs	r0, #148	; 0x94
   18bfa:	4b0f      	ldr	r3, [pc, #60]	; (18c38 <pvPortMalloc+0xb8>)
   18bfc:	4798      	blx	r3
   18bfe:	e005      	b.n	18c0c <pvPortMalloc+0x8c>
   18c00:	68fb      	ldr	r3, [r7, #12]
   18c02:	687a      	ldr	r2, [r7, #4]
   18c04:	0019      	movs	r1, r3
   18c06:	20e8      	movs	r0, #232	; 0xe8
   18c08:	4b0b      	ldr	r3, [pc, #44]	; (18c38 <pvPortMalloc+0xb8>)
   18c0a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   18c0c:	4b0b      	ldr	r3, [pc, #44]	; (18c3c <pvPortMalloc+0xbc>)
   18c0e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   18c10:	68fb      	ldr	r3, [r7, #12]
   18c12:	2b00      	cmp	r3, #0
   18c14:	d101      	bne.n	18c1a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   18c16:	4b0a      	ldr	r3, [pc, #40]	; (18c40 <pvPortMalloc+0xc0>)
   18c18:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   18c1a:	68fb      	ldr	r3, [r7, #12]
}
   18c1c:	0018      	movs	r0, r3
   18c1e:	46bd      	mov	sp, r7
   18c20:	b004      	add	sp, #16
   18c22:	bd80      	pop	{r7, pc}
   18c24:	0001ad01 	.word	0x0001ad01
   18c28:	20003f50 	.word	0x20003f50
   18c2c:	20000c8c 	.word	0x20000c8c
   18c30:	20003f4c 	.word	0x20003f4c
   18c34:	000032bf 	.word	0x000032bf
   18c38:	000172e9 	.word	0x000172e9
   18c3c:	0001ad19 	.word	0x0001ad19
   18c40:	000312dd 	.word	0x000312dd

00018c44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   18c44:	b580      	push	{r7, lr}
   18c46:	b082      	sub	sp, #8
   18c48:	af00      	add	r7, sp, #0
   18c4a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   18c4c:	687b      	ldr	r3, [r7, #4]
   18c4e:	2b00      	cmp	r3, #0
   18c50:	d001      	beq.n	18c56 <vPortFree+0x12>
   18c52:	b672      	cpsid	i
   18c54:	e7fe      	b.n	18c54 <vPortFree+0x10>
}
   18c56:	46c0      	nop			; (mov r8, r8)
   18c58:	46bd      	mov	sp, r7
   18c5a:	b002      	add	sp, #8
   18c5c:	bd80      	pop	{r7, pc}
	...

00018c60 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   18c60:	b580      	push	{r7, lr}
   18c62:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   18c64:	4b03      	ldr	r3, [pc, #12]	; (18c74 <xPortGetFreeHeapSize+0x14>)
   18c66:	681b      	ldr	r3, [r3, #0]
   18c68:	22cb      	movs	r2, #203	; 0xcb
   18c6a:	0192      	lsls	r2, r2, #6
   18c6c:	1ad3      	subs	r3, r2, r3
}
   18c6e:	0018      	movs	r0, r3
   18c70:	46bd      	mov	sp, r7
   18c72:	bd80      	pop	{r7, pc}
   18c74:	20003f4c 	.word	0x20003f4c

00018c78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   18c78:	b580      	push	{r7, lr}
   18c7a:	b084      	sub	sp, #16
   18c7c:	af00      	add	r7, sp, #0
   18c7e:	6078      	str	r0, [r7, #4]
   18c80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   18c82:	687b      	ldr	r3, [r7, #4]
   18c84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   18c86:	68fb      	ldr	r3, [r7, #12]
   18c88:	2b00      	cmp	r3, #0
   18c8a:	d101      	bne.n	18c90 <xQueueGenericReset+0x18>
   18c8c:	b672      	cpsid	i
   18c8e:	e7fe      	b.n	18c8e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   18c90:	4b23      	ldr	r3, [pc, #140]	; (18d20 <xQueueGenericReset+0xa8>)
   18c92:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   18c94:	68fb      	ldr	r3, [r7, #12]
   18c96:	681a      	ldr	r2, [r3, #0]
   18c98:	68fb      	ldr	r3, [r7, #12]
   18c9a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   18c9c:	68fb      	ldr	r3, [r7, #12]
   18c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18ca0:	434b      	muls	r3, r1
   18ca2:	18d2      	adds	r2, r2, r3
   18ca4:	68fb      	ldr	r3, [r7, #12]
   18ca6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   18ca8:	68fb      	ldr	r3, [r7, #12]
   18caa:	2200      	movs	r2, #0
   18cac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   18cae:	68fb      	ldr	r3, [r7, #12]
   18cb0:	681a      	ldr	r2, [r3, #0]
   18cb2:	68fb      	ldr	r3, [r7, #12]
   18cb4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   18cb6:	68fb      	ldr	r3, [r7, #12]
   18cb8:	681a      	ldr	r2, [r3, #0]
   18cba:	68fb      	ldr	r3, [r7, #12]
   18cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   18cbe:	1e59      	subs	r1, r3, #1
   18cc0:	68fb      	ldr	r3, [r7, #12]
   18cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   18cc4:	434b      	muls	r3, r1
   18cc6:	18d2      	adds	r2, r2, r3
   18cc8:	68fb      	ldr	r3, [r7, #12]
   18cca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   18ccc:	68fb      	ldr	r3, [r7, #12]
   18cce:	2244      	movs	r2, #68	; 0x44
   18cd0:	21ff      	movs	r1, #255	; 0xff
   18cd2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   18cd4:	68fb      	ldr	r3, [r7, #12]
   18cd6:	2245      	movs	r2, #69	; 0x45
   18cd8:	21ff      	movs	r1, #255	; 0xff
   18cda:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   18cdc:	683b      	ldr	r3, [r7, #0]
   18cde:	2b00      	cmp	r3, #0
   18ce0:	d10d      	bne.n	18cfe <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   18ce2:	68fb      	ldr	r3, [r7, #12]
   18ce4:	691b      	ldr	r3, [r3, #16]
   18ce6:	2b00      	cmp	r3, #0
   18ce8:	d013      	beq.n	18d12 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   18cea:	68fb      	ldr	r3, [r7, #12]
   18cec:	3310      	adds	r3, #16
   18cee:	0018      	movs	r0, r3
   18cf0:	4b0c      	ldr	r3, [pc, #48]	; (18d24 <xQueueGenericReset+0xac>)
   18cf2:	4798      	blx	r3
   18cf4:	1e03      	subs	r3, r0, #0
   18cf6:	d00c      	beq.n	18d12 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   18cf8:	4b0b      	ldr	r3, [pc, #44]	; (18d28 <xQueueGenericReset+0xb0>)
   18cfa:	4798      	blx	r3
   18cfc:	e009      	b.n	18d12 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   18cfe:	68fb      	ldr	r3, [r7, #12]
   18d00:	3310      	adds	r3, #16
   18d02:	0018      	movs	r0, r3
   18d04:	4b09      	ldr	r3, [pc, #36]	; (18d2c <xQueueGenericReset+0xb4>)
   18d06:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   18d08:	68fb      	ldr	r3, [r7, #12]
   18d0a:	3324      	adds	r3, #36	; 0x24
   18d0c:	0018      	movs	r0, r3
   18d0e:	4b07      	ldr	r3, [pc, #28]	; (18d2c <xQueueGenericReset+0xb4>)
   18d10:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   18d12:	4b07      	ldr	r3, [pc, #28]	; (18d30 <xQueueGenericReset+0xb8>)
   18d14:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   18d16:	2301      	movs	r3, #1
}
   18d18:	0018      	movs	r0, r3
   18d1a:	46bd      	mov	sp, r7
   18d1c:	b004      	add	sp, #16
   18d1e:	bd80      	pop	{r7, pc}
   18d20:	00018a49 	.word	0x00018a49
   18d24:	0001b2d9 	.word	0x0001b2d9
   18d28:	00018a31 	.word	0x00018a31
   18d2c:	000187b9 	.word	0x000187b9
   18d30:	00018a6d 	.word	0x00018a6d

00018d34 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   18d34:	b590      	push	{r4, r7, lr}
   18d36:	b08b      	sub	sp, #44	; 0x2c
   18d38:	af02      	add	r7, sp, #8
   18d3a:	60f8      	str	r0, [r7, #12]
   18d3c:	60b9      	str	r1, [r7, #8]
   18d3e:	1dfb      	adds	r3, r7, #7
   18d40:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   18d42:	68fb      	ldr	r3, [r7, #12]
   18d44:	2b00      	cmp	r3, #0
   18d46:	d101      	bne.n	18d4c <xQueueGenericCreate+0x18>
   18d48:	b672      	cpsid	i
   18d4a:	e7fe      	b.n	18d4a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   18d4c:	68bb      	ldr	r3, [r7, #8]
   18d4e:	2b00      	cmp	r3, #0
   18d50:	d102      	bne.n	18d58 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   18d52:	2300      	movs	r3, #0
   18d54:	61fb      	str	r3, [r7, #28]
   18d56:	e003      	b.n	18d60 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   18d58:	68fb      	ldr	r3, [r7, #12]
   18d5a:	68ba      	ldr	r2, [r7, #8]
   18d5c:	4353      	muls	r3, r2
   18d5e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   18d60:	69fb      	ldr	r3, [r7, #28]
   18d62:	3354      	adds	r3, #84	; 0x54
   18d64:	0018      	movs	r0, r3
   18d66:	4b19      	ldr	r3, [pc, #100]	; (18dcc <xQueueGenericCreate+0x98>)
   18d68:	4798      	blx	r3
   18d6a:	0003      	movs	r3, r0
   18d6c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   18d6e:	69bb      	ldr	r3, [r7, #24]
   18d70:	2b00      	cmp	r3, #0
   18d72:	d00d      	beq.n	18d90 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   18d74:	69bb      	ldr	r3, [r7, #24]
   18d76:	3354      	adds	r3, #84	; 0x54
   18d78:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   18d7a:	1dfb      	adds	r3, r7, #7
   18d7c:	781c      	ldrb	r4, [r3, #0]
   18d7e:	697a      	ldr	r2, [r7, #20]
   18d80:	68b9      	ldr	r1, [r7, #8]
   18d82:	68f8      	ldr	r0, [r7, #12]
   18d84:	69bb      	ldr	r3, [r7, #24]
   18d86:	9300      	str	r3, [sp, #0]
   18d88:	0023      	movs	r3, r4
   18d8a:	4c11      	ldr	r4, [pc, #68]	; (18dd0 <xQueueGenericCreate+0x9c>)
   18d8c:	47a0      	blx	r4
   18d8e:	e017      	b.n	18dc0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   18d90:	4b10      	ldr	r3, [pc, #64]	; (18dd4 <xQueueGenericCreate+0xa0>)
   18d92:	4798      	blx	r3
   18d94:	0003      	movs	r3, r0
   18d96:	0018      	movs	r0, r3
   18d98:	4b0f      	ldr	r3, [pc, #60]	; (18dd8 <xQueueGenericCreate+0xa4>)
   18d9a:	4798      	blx	r3
   18d9c:	0003      	movs	r3, r0
   18d9e:	001a      	movs	r2, r3
   18da0:	4b0e      	ldr	r3, [pc, #56]	; (18ddc <xQueueGenericCreate+0xa8>)
   18da2:	881b      	ldrh	r3, [r3, #0]
   18da4:	4013      	ands	r3, r2
   18da6:	b29b      	uxth	r3, r3
   18da8:	2b00      	cmp	r3, #0
   18daa:	d009      	beq.n	18dc0 <xQueueGenericCreate+0x8c>
   18dac:	1dfb      	adds	r3, r7, #7
   18dae:	781b      	ldrb	r3, [r3, #0]
   18db0:	4a0b      	ldr	r2, [pc, #44]	; (18de0 <xQueueGenericCreate+0xac>)
   18db2:	5cd3      	ldrb	r3, [r2, r3]
   18db4:	3340      	adds	r3, #64	; 0x40
   18db6:	b2db      	uxtb	r3, r3
   18db8:	2100      	movs	r1, #0
   18dba:	0018      	movs	r0, r3
   18dbc:	4b09      	ldr	r3, [pc, #36]	; (18de4 <xQueueGenericCreate+0xb0>)
   18dbe:	4798      	blx	r3
		}

		return pxNewQueue;
   18dc0:	69bb      	ldr	r3, [r7, #24]
	}
   18dc2:	0018      	movs	r0, r3
   18dc4:	46bd      	mov	sp, r7
   18dc6:	b009      	add	sp, #36	; 0x24
   18dc8:	bd90      	pop	{r4, r7, pc}
   18dca:	46c0      	nop			; (mov r8, r8)
   18dcc:	00018b81 	.word	0x00018b81
   18dd0:	00018de9 	.word	0x00018de9
   18dd4:	00016cdd 	.word	0x00016cdd
   18dd8:	00016a41 	.word	0x00016a41
   18ddc:	20000110 	.word	0x20000110
   18de0:	20000104 	.word	0x20000104
   18de4:	00017741 	.word	0x00017741

00018de8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   18de8:	b5b0      	push	{r4, r5, r7, lr}
   18dea:	b084      	sub	sp, #16
   18dec:	af00      	add	r7, sp, #0
   18dee:	60f8      	str	r0, [r7, #12]
   18df0:	60b9      	str	r1, [r7, #8]
   18df2:	607a      	str	r2, [r7, #4]
   18df4:	001a      	movs	r2, r3
   18df6:	1cfb      	adds	r3, r7, #3
   18df8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   18dfa:	68bb      	ldr	r3, [r7, #8]
   18dfc:	2b00      	cmp	r3, #0
   18dfe:	d103      	bne.n	18e08 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   18e00:	6a3b      	ldr	r3, [r7, #32]
   18e02:	6a3a      	ldr	r2, [r7, #32]
   18e04:	601a      	str	r2, [r3, #0]
   18e06:	e002      	b.n	18e0e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   18e08:	6a3b      	ldr	r3, [r7, #32]
   18e0a:	687a      	ldr	r2, [r7, #4]
   18e0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   18e0e:	6a3b      	ldr	r3, [r7, #32]
   18e10:	68fa      	ldr	r2, [r7, #12]
   18e12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   18e14:	6a3b      	ldr	r3, [r7, #32]
   18e16:	68ba      	ldr	r2, [r7, #8]
   18e18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   18e1a:	6a3b      	ldr	r3, [r7, #32]
   18e1c:	2101      	movs	r1, #1
   18e1e:	0018      	movs	r0, r3
   18e20:	4b41      	ldr	r3, [pc, #260]	; (18f28 <prvInitialiseNewQueue+0x140>)
   18e22:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   18e24:	6a3b      	ldr	r3, [r7, #32]
   18e26:	1cfa      	adds	r2, r7, #3
   18e28:	2150      	movs	r1, #80	; 0x50
   18e2a:	7812      	ldrb	r2, [r2, #0]
   18e2c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   18e2e:	6a3b      	ldr	r3, [r7, #32]
   18e30:	2200      	movs	r2, #0
   18e32:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   18e34:	6a3b      	ldr	r3, [r7, #32]
   18e36:	0018      	movs	r0, r3
   18e38:	4b3c      	ldr	r3, [pc, #240]	; (18f2c <prvInitialiseNewQueue+0x144>)
   18e3a:	4798      	blx	r3
   18e3c:	0003      	movs	r3, r0
   18e3e:	001a      	movs	r2, r3
   18e40:	4b3b      	ldr	r3, [pc, #236]	; (18f30 <prvInitialiseNewQueue+0x148>)
   18e42:	5c9b      	ldrb	r3, [r3, r2]
   18e44:	0018      	movs	r0, r3
   18e46:	4b3b      	ldr	r3, [pc, #236]	; (18f34 <prvInitialiseNewQueue+0x14c>)
   18e48:	4798      	blx	r3
   18e4a:	0003      	movs	r3, r0
   18e4c:	b29a      	uxth	r2, r3
   18e4e:	6a3b      	ldr	r3, [r7, #32]
   18e50:	0011      	movs	r1, r2
   18e52:	0018      	movs	r0, r3
   18e54:	4b38      	ldr	r3, [pc, #224]	; (18f38 <prvInitialiseNewQueue+0x150>)
   18e56:	4798      	blx	r3
   18e58:	4b38      	ldr	r3, [pc, #224]	; (18f3c <prvInitialiseNewQueue+0x154>)
   18e5a:	881a      	ldrh	r2, [r3, #0]
   18e5c:	6a3b      	ldr	r3, [r7, #32]
   18e5e:	0011      	movs	r1, r2
   18e60:	0018      	movs	r0, r3
   18e62:	4b37      	ldr	r3, [pc, #220]	; (18f40 <prvInitialiseNewQueue+0x158>)
   18e64:	4798      	blx	r3
   18e66:	6a3b      	ldr	r3, [r7, #32]
   18e68:	0018      	movs	r0, r3
   18e6a:	4b30      	ldr	r3, [pc, #192]	; (18f2c <prvInitialiseNewQueue+0x144>)
   18e6c:	4798      	blx	r3
   18e6e:	0003      	movs	r3, r0
   18e70:	001a      	movs	r2, r3
   18e72:	4b2f      	ldr	r3, [pc, #188]	; (18f30 <prvInitialiseNewQueue+0x148>)
   18e74:	5c9c      	ldrb	r4, [r3, r2]
   18e76:	6a3b      	ldr	r3, [r7, #32]
   18e78:	0018      	movs	r0, r3
   18e7a:	4b32      	ldr	r3, [pc, #200]	; (18f44 <prvInitialiseNewQueue+0x15c>)
   18e7c:	4798      	blx	r3
   18e7e:	0003      	movs	r3, r0
   18e80:	b2db      	uxtb	r3, r3
   18e82:	0019      	movs	r1, r3
   18e84:	0020      	movs	r0, r4
   18e86:	4b30      	ldr	r3, [pc, #192]	; (18f48 <prvInitialiseNewQueue+0x160>)
   18e88:	4798      	blx	r3
   18e8a:	4b30      	ldr	r3, [pc, #192]	; (18f4c <prvInitialiseNewQueue+0x164>)
   18e8c:	4798      	blx	r3
   18e8e:	0003      	movs	r3, r0
   18e90:	0018      	movs	r0, r3
   18e92:	4b2f      	ldr	r3, [pc, #188]	; (18f50 <prvInitialiseNewQueue+0x168>)
   18e94:	4798      	blx	r3
   18e96:	0003      	movs	r3, r0
   18e98:	001a      	movs	r2, r3
   18e9a:	4b2e      	ldr	r3, [pc, #184]	; (18f54 <prvInitialiseNewQueue+0x16c>)
   18e9c:	881b      	ldrh	r3, [r3, #0]
   18e9e:	4013      	ands	r3, r2
   18ea0:	b29b      	uxth	r3, r3
   18ea2:	2b00      	cmp	r3, #0
   18ea4:	d029      	beq.n	18efa <prvInitialiseNewQueue+0x112>
   18ea6:	6a3b      	ldr	r3, [r7, #32]
   18ea8:	0018      	movs	r0, r3
   18eaa:	4b2b      	ldr	r3, [pc, #172]	; (18f58 <prvInitialiseNewQueue+0x170>)
   18eac:	4798      	blx	r3
   18eae:	0003      	movs	r3, r0
   18eb0:	001a      	movs	r2, r3
   18eb2:	4b28      	ldr	r3, [pc, #160]	; (18f54 <prvInitialiseNewQueue+0x16c>)
   18eb4:	881b      	ldrh	r3, [r3, #0]
   18eb6:	4013      	ands	r3, r2
   18eb8:	b29b      	uxth	r3, r3
   18eba:	2b00      	cmp	r3, #0
   18ebc:	d01d      	beq.n	18efa <prvInitialiseNewQueue+0x112>
   18ebe:	6a3b      	ldr	r3, [r7, #32]
   18ec0:	0018      	movs	r0, r3
   18ec2:	4b1a      	ldr	r3, [pc, #104]	; (18f2c <prvInitialiseNewQueue+0x144>)
   18ec4:	4798      	blx	r3
   18ec6:	0003      	movs	r3, r0
   18ec8:	001a      	movs	r2, r3
   18eca:	4b19      	ldr	r3, [pc, #100]	; (18f30 <prvInitialiseNewQueue+0x148>)
   18ecc:	5c9b      	ldrb	r3, [r3, r2]
   18ece:	3318      	adds	r3, #24
   18ed0:	b2db      	uxtb	r3, r3
   18ed2:	001d      	movs	r5, r3
   18ed4:	6a3b      	ldr	r3, [r7, #32]
   18ed6:	0018      	movs	r0, r3
   18ed8:	4b14      	ldr	r3, [pc, #80]	; (18f2c <prvInitialiseNewQueue+0x144>)
   18eda:	4798      	blx	r3
   18edc:	0003      	movs	r3, r0
   18ede:	001a      	movs	r2, r3
   18ee0:	4b13      	ldr	r3, [pc, #76]	; (18f30 <prvInitialiseNewQueue+0x148>)
   18ee2:	5c9c      	ldrb	r4, [r3, r2]
   18ee4:	6a3b      	ldr	r3, [r7, #32]
   18ee6:	0018      	movs	r0, r3
   18ee8:	4b16      	ldr	r3, [pc, #88]	; (18f44 <prvInitialiseNewQueue+0x15c>)
   18eea:	4798      	blx	r3
   18eec:	0003      	movs	r3, r0
   18eee:	b2db      	uxtb	r3, r3
   18ef0:	001a      	movs	r2, r3
   18ef2:	0021      	movs	r1, r4
   18ef4:	0028      	movs	r0, r5
   18ef6:	4b19      	ldr	r3, [pc, #100]	; (18f5c <prvInitialiseNewQueue+0x174>)
   18ef8:	4798      	blx	r3
   18efa:	6a3b      	ldr	r3, [r7, #32]
   18efc:	0018      	movs	r0, r3
   18efe:	4b0b      	ldr	r3, [pc, #44]	; (18f2c <prvInitialiseNewQueue+0x144>)
   18f00:	4798      	blx	r3
   18f02:	0003      	movs	r3, r0
   18f04:	001a      	movs	r2, r3
   18f06:	4b0a      	ldr	r3, [pc, #40]	; (18f30 <prvInitialiseNewQueue+0x148>)
   18f08:	5c9c      	ldrb	r4, [r3, r2]
   18f0a:	6a3b      	ldr	r3, [r7, #32]
   18f0c:	0018      	movs	r0, r3
   18f0e:	4b0d      	ldr	r3, [pc, #52]	; (18f44 <prvInitialiseNewQueue+0x15c>)
   18f10:	4798      	blx	r3
   18f12:	0003      	movs	r3, r0
   18f14:	b2db      	uxtb	r3, r3
   18f16:	2200      	movs	r2, #0
   18f18:	0019      	movs	r1, r3
   18f1a:	0020      	movs	r0, r4
   18f1c:	4b10      	ldr	r3, [pc, #64]	; (18f60 <prvInitialiseNewQueue+0x178>)
   18f1e:	4798      	blx	r3
}
   18f20:	46c0      	nop			; (mov r8, r8)
   18f22:	46bd      	mov	sp, r7
   18f24:	b004      	add	sp, #16
   18f26:	bdb0      	pop	{r4, r5, r7, pc}
   18f28:	00018c79 	.word	0x00018c79
   18f2c:	00016a01 	.word	0x00016a01
   18f30:	20000104 	.word	0x20000104
   18f34:	00017fc1 	.word	0x00017fc1
   18f38:	00016b25 	.word	0x00016b25
   18f3c:	20000112 	.word	0x20000112
   18f40:	00016b61 	.word	0x00016b61
   18f44:	00016ae1 	.word	0x00016ae1
   18f48:	00018159 	.word	0x00018159
   18f4c:	00016cdd 	.word	0x00016cdd
   18f50:	00016a41 	.word	0x00016a41
   18f54:	20000110 	.word	0x20000110
   18f58:	00016b01 	.word	0x00016b01
   18f5c:	00017439 	.word	0x00017439
   18f60:	00017a95 	.word	0x00017a95

00018f64 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   18f64:	b590      	push	{r4, r7, lr}
   18f66:	b083      	sub	sp, #12
   18f68:	af00      	add	r7, sp, #0
   18f6a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   18f6c:	687b      	ldr	r3, [r7, #4]
   18f6e:	2b00      	cmp	r3, #0
   18f70:	d00e      	beq.n	18f90 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   18f72:	687b      	ldr	r3, [r7, #4]
   18f74:	2200      	movs	r2, #0
   18f76:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   18f78:	687b      	ldr	r3, [r7, #4]
   18f7a:	2200      	movs	r2, #0
   18f7c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   18f7e:	687b      	ldr	r3, [r7, #4]
   18f80:	2200      	movs	r2, #0
   18f82:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   18f84:	6878      	ldr	r0, [r7, #4]
   18f86:	2300      	movs	r3, #0
   18f88:	2200      	movs	r2, #0
   18f8a:	2100      	movs	r1, #0
   18f8c:	4c02      	ldr	r4, [pc, #8]	; (18f98 <prvInitialiseMutex+0x34>)
   18f8e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   18f90:	46c0      	nop			; (mov r8, r8)
   18f92:	46bd      	mov	sp, r7
   18f94:	b003      	add	sp, #12
   18f96:	bd90      	pop	{r4, r7, pc}
   18f98:	00018fdd 	.word	0x00018fdd

00018f9c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   18f9c:	b580      	push	{r7, lr}
   18f9e:	b086      	sub	sp, #24
   18fa0:	af00      	add	r7, sp, #0
   18fa2:	0002      	movs	r2, r0
   18fa4:	1dfb      	adds	r3, r7, #7
   18fa6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   18fa8:	2301      	movs	r3, #1
   18faa:	617b      	str	r3, [r7, #20]
   18fac:	2300      	movs	r3, #0
   18fae:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   18fb0:	1dfb      	adds	r3, r7, #7
   18fb2:	781a      	ldrb	r2, [r3, #0]
   18fb4:	6939      	ldr	r1, [r7, #16]
   18fb6:	697b      	ldr	r3, [r7, #20]
   18fb8:	0018      	movs	r0, r3
   18fba:	4b06      	ldr	r3, [pc, #24]	; (18fd4 <xQueueCreateMutex+0x38>)
   18fbc:	4798      	blx	r3
   18fbe:	0003      	movs	r3, r0
   18fc0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   18fc2:	68fb      	ldr	r3, [r7, #12]
   18fc4:	0018      	movs	r0, r3
   18fc6:	4b04      	ldr	r3, [pc, #16]	; (18fd8 <xQueueCreateMutex+0x3c>)
   18fc8:	4798      	blx	r3

		return pxNewQueue;
   18fca:	68fb      	ldr	r3, [r7, #12]
	}
   18fcc:	0018      	movs	r0, r3
   18fce:	46bd      	mov	sp, r7
   18fd0:	b006      	add	sp, #24
   18fd2:	bd80      	pop	{r7, pc}
   18fd4:	00018d35 	.word	0x00018d35
   18fd8:	00018f65 	.word	0x00018f65

00018fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   18fdc:	b5b0      	push	{r4, r5, r7, lr}
   18fde:	b08a      	sub	sp, #40	; 0x28
   18fe0:	af00      	add	r7, sp, #0
   18fe2:	60f8      	str	r0, [r7, #12]
   18fe4:	60b9      	str	r1, [r7, #8]
   18fe6:	607a      	str	r2, [r7, #4]
   18fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   18fea:	2300      	movs	r3, #0
   18fec:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   18fee:	68fb      	ldr	r3, [r7, #12]
   18ff0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   18ff2:	6a3b      	ldr	r3, [r7, #32]
   18ff4:	2b00      	cmp	r3, #0
   18ff6:	d101      	bne.n	18ffc <xQueueGenericSend+0x20>
   18ff8:	b672      	cpsid	i
   18ffa:	e7fe      	b.n	18ffa <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   18ffc:	68bb      	ldr	r3, [r7, #8]
   18ffe:	2b00      	cmp	r3, #0
   19000:	d103      	bne.n	1900a <xQueueGenericSend+0x2e>
   19002:	6a3b      	ldr	r3, [r7, #32]
   19004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19006:	2b00      	cmp	r3, #0
   19008:	d101      	bne.n	1900e <xQueueGenericSend+0x32>
   1900a:	2301      	movs	r3, #1
   1900c:	e000      	b.n	19010 <xQueueGenericSend+0x34>
   1900e:	2300      	movs	r3, #0
   19010:	2b00      	cmp	r3, #0
   19012:	d101      	bne.n	19018 <xQueueGenericSend+0x3c>
   19014:	b672      	cpsid	i
   19016:	e7fe      	b.n	19016 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19018:	683b      	ldr	r3, [r7, #0]
   1901a:	2b02      	cmp	r3, #2
   1901c:	d103      	bne.n	19026 <xQueueGenericSend+0x4a>
   1901e:	6a3b      	ldr	r3, [r7, #32]
   19020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   19022:	2b01      	cmp	r3, #1
   19024:	d101      	bne.n	1902a <xQueueGenericSend+0x4e>
   19026:	2301      	movs	r3, #1
   19028:	e000      	b.n	1902c <xQueueGenericSend+0x50>
   1902a:	2300      	movs	r3, #0
   1902c:	2b00      	cmp	r3, #0
   1902e:	d101      	bne.n	19034 <xQueueGenericSend+0x58>
   19030:	b672      	cpsid	i
   19032:	e7fe      	b.n	19032 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   19034:	4bbc      	ldr	r3, [pc, #752]	; (19328 <xQueueGenericSend+0x34c>)
   19036:	4798      	blx	r3
   19038:	1e03      	subs	r3, r0, #0
   1903a:	d102      	bne.n	19042 <xQueueGenericSend+0x66>
   1903c:	687b      	ldr	r3, [r7, #4]
   1903e:	2b00      	cmp	r3, #0
   19040:	d101      	bne.n	19046 <xQueueGenericSend+0x6a>
   19042:	2301      	movs	r3, #1
   19044:	e000      	b.n	19048 <xQueueGenericSend+0x6c>
   19046:	2300      	movs	r3, #0
   19048:	2b00      	cmp	r3, #0
   1904a:	d101      	bne.n	19050 <xQueueGenericSend+0x74>
   1904c:	b672      	cpsid	i
   1904e:	e7fe      	b.n	1904e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   19050:	4bb6      	ldr	r3, [pc, #728]	; (1932c <xQueueGenericSend+0x350>)
   19052:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19054:	6a3b      	ldr	r3, [r7, #32]
   19056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   19058:	6a3b      	ldr	r3, [r7, #32]
   1905a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1905c:	429a      	cmp	r2, r3
   1905e:	d303      	bcc.n	19068 <xQueueGenericSend+0x8c>
   19060:	683b      	ldr	r3, [r7, #0]
   19062:	2b02      	cmp	r3, #2
   19064:	d000      	beq.n	19068 <xQueueGenericSend+0x8c>
   19066:	e08e      	b.n	19186 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   19068:	4bb1      	ldr	r3, [pc, #708]	; (19330 <xQueueGenericSend+0x354>)
   1906a:	4798      	blx	r3
   1906c:	0003      	movs	r3, r0
   1906e:	0018      	movs	r0, r3
   19070:	4bb0      	ldr	r3, [pc, #704]	; (19334 <xQueueGenericSend+0x358>)
   19072:	4798      	blx	r3
   19074:	0003      	movs	r3, r0
   19076:	001a      	movs	r2, r3
   19078:	4baf      	ldr	r3, [pc, #700]	; (19338 <xQueueGenericSend+0x35c>)
   1907a:	881b      	ldrh	r3, [r3, #0]
   1907c:	4013      	ands	r3, r2
   1907e:	b29b      	uxth	r3, r3
   19080:	2b00      	cmp	r3, #0
   19082:	d02e      	beq.n	190e2 <xQueueGenericSend+0x106>
   19084:	6a3b      	ldr	r3, [r7, #32]
   19086:	0018      	movs	r0, r3
   19088:	4bac      	ldr	r3, [pc, #688]	; (1933c <xQueueGenericSend+0x360>)
   1908a:	4798      	blx	r3
   1908c:	0003      	movs	r3, r0
   1908e:	001a      	movs	r2, r3
   19090:	4ba9      	ldr	r3, [pc, #676]	; (19338 <xQueueGenericSend+0x35c>)
   19092:	881b      	ldrh	r3, [r3, #0]
   19094:	4013      	ands	r3, r2
   19096:	b29b      	uxth	r3, r3
   19098:	2b00      	cmp	r3, #0
   1909a:	d022      	beq.n	190e2 <xQueueGenericSend+0x106>
   1909c:	683b      	ldr	r3, [r7, #0]
   1909e:	2b00      	cmp	r3, #0
   190a0:	d10b      	bne.n	190ba <xQueueGenericSend+0xde>
   190a2:	6a3b      	ldr	r3, [r7, #32]
   190a4:	0018      	movs	r0, r3
   190a6:	4ba6      	ldr	r3, [pc, #664]	; (19340 <xQueueGenericSend+0x364>)
   190a8:	4798      	blx	r3
   190aa:	0003      	movs	r3, r0
   190ac:	001a      	movs	r2, r3
   190ae:	4ba5      	ldr	r3, [pc, #660]	; (19344 <xQueueGenericSend+0x368>)
   190b0:	5c9b      	ldrb	r3, [r3, r2]
   190b2:	3320      	adds	r3, #32
   190b4:	b2db      	uxtb	r3, r3
   190b6:	001d      	movs	r5, r3
   190b8:	e000      	b.n	190bc <xQueueGenericSend+0xe0>
   190ba:	2525      	movs	r5, #37	; 0x25
   190bc:	6a3b      	ldr	r3, [r7, #32]
   190be:	0018      	movs	r0, r3
   190c0:	4b9f      	ldr	r3, [pc, #636]	; (19340 <xQueueGenericSend+0x364>)
   190c2:	4798      	blx	r3
   190c4:	0003      	movs	r3, r0
   190c6:	001a      	movs	r2, r3
   190c8:	4b9e      	ldr	r3, [pc, #632]	; (19344 <xQueueGenericSend+0x368>)
   190ca:	5c9c      	ldrb	r4, [r3, r2]
   190cc:	6a3b      	ldr	r3, [r7, #32]
   190ce:	0018      	movs	r0, r3
   190d0:	4b9d      	ldr	r3, [pc, #628]	; (19348 <xQueueGenericSend+0x36c>)
   190d2:	4798      	blx	r3
   190d4:	0003      	movs	r3, r0
   190d6:	b2db      	uxtb	r3, r3
   190d8:	001a      	movs	r2, r3
   190da:	0021      	movs	r1, r4
   190dc:	0028      	movs	r0, r5
   190de:	4b9b      	ldr	r3, [pc, #620]	; (1934c <xQueueGenericSend+0x370>)
   190e0:	4798      	blx	r3
   190e2:	6a3b      	ldr	r3, [r7, #32]
   190e4:	0018      	movs	r0, r3
   190e6:	4b96      	ldr	r3, [pc, #600]	; (19340 <xQueueGenericSend+0x364>)
   190e8:	4798      	blx	r3
   190ea:	0003      	movs	r3, r0
   190ec:	001a      	movs	r2, r3
   190ee:	4b95      	ldr	r3, [pc, #596]	; (19344 <xQueueGenericSend+0x368>)
   190f0:	5c9c      	ldrb	r4, [r3, r2]
   190f2:	6a3b      	ldr	r3, [r7, #32]
   190f4:	0018      	movs	r0, r3
   190f6:	4b94      	ldr	r3, [pc, #592]	; (19348 <xQueueGenericSend+0x36c>)
   190f8:	4798      	blx	r3
   190fa:	0003      	movs	r3, r0
   190fc:	b2dd      	uxtb	r5, r3
   190fe:	6a3b      	ldr	r3, [r7, #32]
   19100:	0018      	movs	r0, r3
   19102:	4b8f      	ldr	r3, [pc, #572]	; (19340 <xQueueGenericSend+0x364>)
   19104:	4798      	blx	r3
   19106:	0003      	movs	r3, r0
   19108:	001a      	movs	r2, r3
   1910a:	4b8e      	ldr	r3, [pc, #568]	; (19344 <xQueueGenericSend+0x368>)
   1910c:	5c9b      	ldrb	r3, [r3, r2]
   1910e:	2b02      	cmp	r3, #2
   19110:	d005      	beq.n	1911e <xQueueGenericSend+0x142>
   19112:	6a3b      	ldr	r3, [r7, #32]
   19114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19116:	b2db      	uxtb	r3, r3
   19118:	3301      	adds	r3, #1
   1911a:	b2db      	uxtb	r3, r3
   1911c:	e000      	b.n	19120 <xQueueGenericSend+0x144>
   1911e:	2300      	movs	r3, #0
   19120:	001a      	movs	r2, r3
   19122:	0029      	movs	r1, r5
   19124:	0020      	movs	r0, r4
   19126:	4b8a      	ldr	r3, [pc, #552]	; (19350 <xQueueGenericSend+0x374>)
   19128:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1912a:	683a      	ldr	r2, [r7, #0]
   1912c:	68b9      	ldr	r1, [r7, #8]
   1912e:	6a3b      	ldr	r3, [r7, #32]
   19130:	0018      	movs	r0, r3
   19132:	4b88      	ldr	r3, [pc, #544]	; (19354 <xQueueGenericSend+0x378>)
   19134:	4798      	blx	r3
   19136:	0003      	movs	r3, r0
   19138:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1913a:	6a3b      	ldr	r3, [r7, #32]
   1913c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1913e:	2b00      	cmp	r3, #0
   19140:	d00a      	beq.n	19158 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   19142:	683a      	ldr	r2, [r7, #0]
   19144:	6a3b      	ldr	r3, [r7, #32]
   19146:	0011      	movs	r1, r2
   19148:	0018      	movs	r0, r3
   1914a:	4b83      	ldr	r3, [pc, #524]	; (19358 <xQueueGenericSend+0x37c>)
   1914c:	4798      	blx	r3
   1914e:	1e03      	subs	r3, r0, #0
   19150:	d015      	beq.n	1917e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   19152:	4b82      	ldr	r3, [pc, #520]	; (1935c <xQueueGenericSend+0x380>)
   19154:	4798      	blx	r3
   19156:	e012      	b.n	1917e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19158:	6a3b      	ldr	r3, [r7, #32]
   1915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1915c:	2b00      	cmp	r3, #0
   1915e:	d009      	beq.n	19174 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   19160:	6a3b      	ldr	r3, [r7, #32]
   19162:	3324      	adds	r3, #36	; 0x24
   19164:	0018      	movs	r0, r3
   19166:	4b7e      	ldr	r3, [pc, #504]	; (19360 <xQueueGenericSend+0x384>)
   19168:	4798      	blx	r3
   1916a:	1e03      	subs	r3, r0, #0
   1916c:	d007      	beq.n	1917e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1916e:	4b7b      	ldr	r3, [pc, #492]	; (1935c <xQueueGenericSend+0x380>)
   19170:	4798      	blx	r3
   19172:	e004      	b.n	1917e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   19174:	69fb      	ldr	r3, [r7, #28]
   19176:	2b00      	cmp	r3, #0
   19178:	d001      	beq.n	1917e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1917a:	4b78      	ldr	r3, [pc, #480]	; (1935c <xQueueGenericSend+0x380>)
   1917c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1917e:	4b79      	ldr	r3, [pc, #484]	; (19364 <xQueueGenericSend+0x388>)
   19180:	4798      	blx	r3
				return pdPASS;
   19182:	2301      	movs	r3, #1
   19184:	e142      	b.n	1940c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   19186:	687b      	ldr	r3, [r7, #4]
   19188:	2b00      	cmp	r3, #0
   1918a:	d140      	bne.n	1920e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1918c:	4b75      	ldr	r3, [pc, #468]	; (19364 <xQueueGenericSend+0x388>)
   1918e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   19190:	4b67      	ldr	r3, [pc, #412]	; (19330 <xQueueGenericSend+0x354>)
   19192:	4798      	blx	r3
   19194:	0003      	movs	r3, r0
   19196:	0018      	movs	r0, r3
   19198:	4b66      	ldr	r3, [pc, #408]	; (19334 <xQueueGenericSend+0x358>)
   1919a:	4798      	blx	r3
   1919c:	0003      	movs	r3, r0
   1919e:	001a      	movs	r2, r3
   191a0:	4b65      	ldr	r3, [pc, #404]	; (19338 <xQueueGenericSend+0x35c>)
   191a2:	881b      	ldrh	r3, [r3, #0]
   191a4:	4013      	ands	r3, r2
   191a6:	b29b      	uxth	r3, r3
   191a8:	2b00      	cmp	r3, #0
   191aa:	d02e      	beq.n	1920a <xQueueGenericSend+0x22e>
   191ac:	6a3b      	ldr	r3, [r7, #32]
   191ae:	0018      	movs	r0, r3
   191b0:	4b62      	ldr	r3, [pc, #392]	; (1933c <xQueueGenericSend+0x360>)
   191b2:	4798      	blx	r3
   191b4:	0003      	movs	r3, r0
   191b6:	001a      	movs	r2, r3
   191b8:	4b5f      	ldr	r3, [pc, #380]	; (19338 <xQueueGenericSend+0x35c>)
   191ba:	881b      	ldrh	r3, [r3, #0]
   191bc:	4013      	ands	r3, r2
   191be:	b29b      	uxth	r3, r3
   191c0:	2b00      	cmp	r3, #0
   191c2:	d022      	beq.n	1920a <xQueueGenericSend+0x22e>
   191c4:	683b      	ldr	r3, [r7, #0]
   191c6:	2b00      	cmp	r3, #0
   191c8:	d10b      	bne.n	191e2 <xQueueGenericSend+0x206>
   191ca:	6a3b      	ldr	r3, [r7, #32]
   191cc:	0018      	movs	r0, r3
   191ce:	4b5c      	ldr	r3, [pc, #368]	; (19340 <xQueueGenericSend+0x364>)
   191d0:	4798      	blx	r3
   191d2:	0003      	movs	r3, r0
   191d4:	001a      	movs	r2, r3
   191d6:	4b5b      	ldr	r3, [pc, #364]	; (19344 <xQueueGenericSend+0x368>)
   191d8:	5c9b      	ldrb	r3, [r3, r2]
   191da:	3348      	adds	r3, #72	; 0x48
   191dc:	b2db      	uxtb	r3, r3
   191de:	001d      	movs	r5, r3
   191e0:	e000      	b.n	191e4 <xQueueGenericSend+0x208>
   191e2:	254d      	movs	r5, #77	; 0x4d
   191e4:	6a3b      	ldr	r3, [r7, #32]
   191e6:	0018      	movs	r0, r3
   191e8:	4b55      	ldr	r3, [pc, #340]	; (19340 <xQueueGenericSend+0x364>)
   191ea:	4798      	blx	r3
   191ec:	0003      	movs	r3, r0
   191ee:	001a      	movs	r2, r3
   191f0:	4b54      	ldr	r3, [pc, #336]	; (19344 <xQueueGenericSend+0x368>)
   191f2:	5c9c      	ldrb	r4, [r3, r2]
   191f4:	6a3b      	ldr	r3, [r7, #32]
   191f6:	0018      	movs	r0, r3
   191f8:	4b53      	ldr	r3, [pc, #332]	; (19348 <xQueueGenericSend+0x36c>)
   191fa:	4798      	blx	r3
   191fc:	0003      	movs	r3, r0
   191fe:	b2db      	uxtb	r3, r3
   19200:	001a      	movs	r2, r3
   19202:	0021      	movs	r1, r4
   19204:	0028      	movs	r0, r5
   19206:	4b51      	ldr	r3, [pc, #324]	; (1934c <xQueueGenericSend+0x370>)
   19208:	4798      	blx	r3
					return errQUEUE_FULL;
   1920a:	2300      	movs	r3, #0
   1920c:	e0fe      	b.n	1940c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19210:	2b00      	cmp	r3, #0
   19212:	d106      	bne.n	19222 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19214:	2314      	movs	r3, #20
   19216:	18fb      	adds	r3, r7, r3
   19218:	0018      	movs	r0, r3
   1921a:	4b53      	ldr	r3, [pc, #332]	; (19368 <xQueueGenericSend+0x38c>)
   1921c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1921e:	2301      	movs	r3, #1
   19220:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19222:	4b50      	ldr	r3, [pc, #320]	; (19364 <xQueueGenericSend+0x388>)
   19224:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   19226:	4b51      	ldr	r3, [pc, #324]	; (1936c <xQueueGenericSend+0x390>)
   19228:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1922a:	4b40      	ldr	r3, [pc, #256]	; (1932c <xQueueGenericSend+0x350>)
   1922c:	4798      	blx	r3
   1922e:	6a3b      	ldr	r3, [r7, #32]
   19230:	2244      	movs	r2, #68	; 0x44
   19232:	5c9b      	ldrb	r3, [r3, r2]
   19234:	b25b      	sxtb	r3, r3
   19236:	3301      	adds	r3, #1
   19238:	d103      	bne.n	19242 <xQueueGenericSend+0x266>
   1923a:	6a3b      	ldr	r3, [r7, #32]
   1923c:	2244      	movs	r2, #68	; 0x44
   1923e:	2100      	movs	r1, #0
   19240:	5499      	strb	r1, [r3, r2]
   19242:	6a3b      	ldr	r3, [r7, #32]
   19244:	2245      	movs	r2, #69	; 0x45
   19246:	5c9b      	ldrb	r3, [r3, r2]
   19248:	b25b      	sxtb	r3, r3
   1924a:	3301      	adds	r3, #1
   1924c:	d103      	bne.n	19256 <xQueueGenericSend+0x27a>
   1924e:	6a3b      	ldr	r3, [r7, #32]
   19250:	2245      	movs	r2, #69	; 0x45
   19252:	2100      	movs	r1, #0
   19254:	5499      	strb	r1, [r3, r2]
   19256:	4b43      	ldr	r3, [pc, #268]	; (19364 <xQueueGenericSend+0x388>)
   19258:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1925a:	1d3a      	adds	r2, r7, #4
   1925c:	2314      	movs	r3, #20
   1925e:	18fb      	adds	r3, r7, r3
   19260:	0011      	movs	r1, r2
   19262:	0018      	movs	r0, r3
   19264:	4b42      	ldr	r3, [pc, #264]	; (19370 <xQueueGenericSend+0x394>)
   19266:	4798      	blx	r3
   19268:	1e03      	subs	r3, r0, #0
   1926a:	d000      	beq.n	1926e <xQueueGenericSend+0x292>
   1926c:	e08a      	b.n	19384 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1926e:	6a3b      	ldr	r3, [r7, #32]
   19270:	0018      	movs	r0, r3
   19272:	4b40      	ldr	r3, [pc, #256]	; (19374 <xQueueGenericSend+0x398>)
   19274:	4798      	blx	r3
   19276:	1e03      	subs	r3, r0, #0
   19278:	d04f      	beq.n	1931a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1927a:	4b2d      	ldr	r3, [pc, #180]	; (19330 <xQueueGenericSend+0x354>)
   1927c:	4798      	blx	r3
   1927e:	0003      	movs	r3, r0
   19280:	0018      	movs	r0, r3
   19282:	4b2c      	ldr	r3, [pc, #176]	; (19334 <xQueueGenericSend+0x358>)
   19284:	4798      	blx	r3
   19286:	0003      	movs	r3, r0
   19288:	001a      	movs	r2, r3
   1928a:	4b2b      	ldr	r3, [pc, #172]	; (19338 <xQueueGenericSend+0x35c>)
   1928c:	881b      	ldrh	r3, [r3, #0]
   1928e:	4013      	ands	r3, r2
   19290:	b29b      	uxth	r3, r3
   19292:	2b00      	cmp	r3, #0
   19294:	d02e      	beq.n	192f4 <xQueueGenericSend+0x318>
   19296:	6a3b      	ldr	r3, [r7, #32]
   19298:	0018      	movs	r0, r3
   1929a:	4b28      	ldr	r3, [pc, #160]	; (1933c <xQueueGenericSend+0x360>)
   1929c:	4798      	blx	r3
   1929e:	0003      	movs	r3, r0
   192a0:	001a      	movs	r2, r3
   192a2:	4b25      	ldr	r3, [pc, #148]	; (19338 <xQueueGenericSend+0x35c>)
   192a4:	881b      	ldrh	r3, [r3, #0]
   192a6:	4013      	ands	r3, r2
   192a8:	b29b      	uxth	r3, r3
   192aa:	2b00      	cmp	r3, #0
   192ac:	d022      	beq.n	192f4 <xQueueGenericSend+0x318>
   192ae:	683b      	ldr	r3, [r7, #0]
   192b0:	2b00      	cmp	r3, #0
   192b2:	d10b      	bne.n	192cc <xQueueGenericSend+0x2f0>
   192b4:	6a3b      	ldr	r3, [r7, #32]
   192b6:	0018      	movs	r0, r3
   192b8:	4b21      	ldr	r3, [pc, #132]	; (19340 <xQueueGenericSend+0x364>)
   192ba:	4798      	blx	r3
   192bc:	0003      	movs	r3, r0
   192be:	001a      	movs	r2, r3
   192c0:	4b20      	ldr	r3, [pc, #128]	; (19344 <xQueueGenericSend+0x368>)
   192c2:	5c9b      	ldrb	r3, [r3, r2]
   192c4:	3370      	adds	r3, #112	; 0x70
   192c6:	b2db      	uxtb	r3, r3
   192c8:	001d      	movs	r5, r3
   192ca:	e000      	b.n	192ce <xQueueGenericSend+0x2f2>
   192cc:	2575      	movs	r5, #117	; 0x75
   192ce:	6a3b      	ldr	r3, [r7, #32]
   192d0:	0018      	movs	r0, r3
   192d2:	4b1b      	ldr	r3, [pc, #108]	; (19340 <xQueueGenericSend+0x364>)
   192d4:	4798      	blx	r3
   192d6:	0003      	movs	r3, r0
   192d8:	001a      	movs	r2, r3
   192da:	4b1a      	ldr	r3, [pc, #104]	; (19344 <xQueueGenericSend+0x368>)
   192dc:	5c9c      	ldrb	r4, [r3, r2]
   192de:	6a3b      	ldr	r3, [r7, #32]
   192e0:	0018      	movs	r0, r3
   192e2:	4b19      	ldr	r3, [pc, #100]	; (19348 <xQueueGenericSend+0x36c>)
   192e4:	4798      	blx	r3
   192e6:	0003      	movs	r3, r0
   192e8:	b2db      	uxtb	r3, r3
   192ea:	001a      	movs	r2, r3
   192ec:	0021      	movs	r1, r4
   192ee:	0028      	movs	r0, r5
   192f0:	4b16      	ldr	r3, [pc, #88]	; (1934c <xQueueGenericSend+0x370>)
   192f2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   192f4:	6a3b      	ldr	r3, [r7, #32]
   192f6:	3310      	adds	r3, #16
   192f8:	687a      	ldr	r2, [r7, #4]
   192fa:	0011      	movs	r1, r2
   192fc:	0018      	movs	r0, r3
   192fe:	4b1e      	ldr	r3, [pc, #120]	; (19378 <xQueueGenericSend+0x39c>)
   19300:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   19302:	6a3b      	ldr	r3, [r7, #32]
   19304:	0018      	movs	r0, r3
   19306:	4b1d      	ldr	r3, [pc, #116]	; (1937c <xQueueGenericSend+0x3a0>)
   19308:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1930a:	4b1d      	ldr	r3, [pc, #116]	; (19380 <xQueueGenericSend+0x3a4>)
   1930c:	4798      	blx	r3
   1930e:	1e03      	subs	r3, r0, #0
   19310:	d000      	beq.n	19314 <xQueueGenericSend+0x338>
   19312:	e69d      	b.n	19050 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   19314:	4b11      	ldr	r3, [pc, #68]	; (1935c <xQueueGenericSend+0x380>)
   19316:	4798      	blx	r3
   19318:	e69a      	b.n	19050 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1931a:	6a3b      	ldr	r3, [r7, #32]
   1931c:	0018      	movs	r0, r3
   1931e:	4b17      	ldr	r3, [pc, #92]	; (1937c <xQueueGenericSend+0x3a0>)
   19320:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19322:	4b17      	ldr	r3, [pc, #92]	; (19380 <xQueueGenericSend+0x3a4>)
   19324:	4798      	blx	r3
   19326:	e693      	b.n	19050 <xQueueGenericSend+0x74>
   19328:	0001b769 	.word	0x0001b769
   1932c:	00018a49 	.word	0x00018a49
   19330:	00016cdd 	.word	0x00016cdd
   19334:	00016a41 	.word	0x00016a41
   19338:	20000110 	.word	0x20000110
   1933c:	00016b01 	.word	0x00016b01
   19340:	00016a01 	.word	0x00016a01
   19344:	20000104 	.word	0x20000104
   19348:	00016ae1 	.word	0x00016ae1
   1934c:	00017439 	.word	0x00017439
   19350:	00017a95 	.word	0x00017a95
   19354:	0001a215 	.word	0x0001a215
   19358:	0001a519 	.word	0x0001a519
   1935c:	00018a31 	.word	0x00018a31
   19360:	0001b2d9 	.word	0x0001b2d9
   19364:	00018a6d 	.word	0x00018a6d
   19368:	0001b419 	.word	0x0001b419
   1936c:	0001ad01 	.word	0x0001ad01
   19370:	0001b441 	.word	0x0001b441
   19374:	0001a469 	.word	0x0001a469
   19378:	0001b1b5 	.word	0x0001b1b5
   1937c:	0001a345 	.word	0x0001a345
   19380:	0001ad19 	.word	0x0001ad19
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   19384:	6a3b      	ldr	r3, [r7, #32]
   19386:	0018      	movs	r0, r3
   19388:	4b22      	ldr	r3, [pc, #136]	; (19414 <xQueueGenericSend+0x438>)
   1938a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1938c:	4b22      	ldr	r3, [pc, #136]	; (19418 <xQueueGenericSend+0x43c>)
   1938e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   19390:	4b22      	ldr	r3, [pc, #136]	; (1941c <xQueueGenericSend+0x440>)
   19392:	4798      	blx	r3
   19394:	0003      	movs	r3, r0
   19396:	0018      	movs	r0, r3
   19398:	4b21      	ldr	r3, [pc, #132]	; (19420 <xQueueGenericSend+0x444>)
   1939a:	4798      	blx	r3
   1939c:	0003      	movs	r3, r0
   1939e:	001a      	movs	r2, r3
   193a0:	4b20      	ldr	r3, [pc, #128]	; (19424 <xQueueGenericSend+0x448>)
   193a2:	881b      	ldrh	r3, [r3, #0]
   193a4:	4013      	ands	r3, r2
   193a6:	b29b      	uxth	r3, r3
   193a8:	2b00      	cmp	r3, #0
   193aa:	d02e      	beq.n	1940a <xQueueGenericSend+0x42e>
   193ac:	6a3b      	ldr	r3, [r7, #32]
   193ae:	0018      	movs	r0, r3
   193b0:	4b1d      	ldr	r3, [pc, #116]	; (19428 <xQueueGenericSend+0x44c>)
   193b2:	4798      	blx	r3
   193b4:	0003      	movs	r3, r0
   193b6:	001a      	movs	r2, r3
   193b8:	4b1a      	ldr	r3, [pc, #104]	; (19424 <xQueueGenericSend+0x448>)
   193ba:	881b      	ldrh	r3, [r3, #0]
   193bc:	4013      	ands	r3, r2
   193be:	b29b      	uxth	r3, r3
   193c0:	2b00      	cmp	r3, #0
   193c2:	d022      	beq.n	1940a <xQueueGenericSend+0x42e>
   193c4:	683b      	ldr	r3, [r7, #0]
   193c6:	2b00      	cmp	r3, #0
   193c8:	d10b      	bne.n	193e2 <xQueueGenericSend+0x406>
   193ca:	6a3b      	ldr	r3, [r7, #32]
   193cc:	0018      	movs	r0, r3
   193ce:	4b17      	ldr	r3, [pc, #92]	; (1942c <xQueueGenericSend+0x450>)
   193d0:	4798      	blx	r3
   193d2:	0003      	movs	r3, r0
   193d4:	001a      	movs	r2, r3
   193d6:	4b16      	ldr	r3, [pc, #88]	; (19430 <xQueueGenericSend+0x454>)
   193d8:	5c9b      	ldrb	r3, [r3, r2]
   193da:	3348      	adds	r3, #72	; 0x48
   193dc:	b2db      	uxtb	r3, r3
   193de:	001d      	movs	r5, r3
   193e0:	e000      	b.n	193e4 <xQueueGenericSend+0x408>
   193e2:	254d      	movs	r5, #77	; 0x4d
   193e4:	6a3b      	ldr	r3, [r7, #32]
   193e6:	0018      	movs	r0, r3
   193e8:	4b10      	ldr	r3, [pc, #64]	; (1942c <xQueueGenericSend+0x450>)
   193ea:	4798      	blx	r3
   193ec:	0003      	movs	r3, r0
   193ee:	001a      	movs	r2, r3
   193f0:	4b0f      	ldr	r3, [pc, #60]	; (19430 <xQueueGenericSend+0x454>)
   193f2:	5c9c      	ldrb	r4, [r3, r2]
   193f4:	6a3b      	ldr	r3, [r7, #32]
   193f6:	0018      	movs	r0, r3
   193f8:	4b0e      	ldr	r3, [pc, #56]	; (19434 <xQueueGenericSend+0x458>)
   193fa:	4798      	blx	r3
   193fc:	0003      	movs	r3, r0
   193fe:	b2db      	uxtb	r3, r3
   19400:	001a      	movs	r2, r3
   19402:	0021      	movs	r1, r4
   19404:	0028      	movs	r0, r5
   19406:	4b0c      	ldr	r3, [pc, #48]	; (19438 <xQueueGenericSend+0x45c>)
   19408:	4798      	blx	r3
			return errQUEUE_FULL;
   1940a:	2300      	movs	r3, #0
		}
	}
}
   1940c:	0018      	movs	r0, r3
   1940e:	46bd      	mov	sp, r7
   19410:	b00a      	add	sp, #40	; 0x28
   19412:	bdb0      	pop	{r4, r5, r7, pc}
   19414:	0001a345 	.word	0x0001a345
   19418:	0001ad19 	.word	0x0001ad19
   1941c:	00016cdd 	.word	0x00016cdd
   19420:	00016a41 	.word	0x00016a41
   19424:	20000110 	.word	0x20000110
   19428:	00016b01 	.word	0x00016b01
   1942c:	00016a01 	.word	0x00016a01
   19430:	20000104 	.word	0x20000104
   19434:	00016ae1 	.word	0x00016ae1
   19438:	00017439 	.word	0x00017439

0001943c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1943c:	b5b0      	push	{r4, r5, r7, lr}
   1943e:	b088      	sub	sp, #32
   19440:	af00      	add	r7, sp, #0
   19442:	60f8      	str	r0, [r7, #12]
   19444:	60b9      	str	r1, [r7, #8]
   19446:	607a      	str	r2, [r7, #4]
   19448:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1944a:	68fb      	ldr	r3, [r7, #12]
   1944c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1944e:	69bb      	ldr	r3, [r7, #24]
   19450:	2b00      	cmp	r3, #0
   19452:	d101      	bne.n	19458 <xQueueGenericSendFromISR+0x1c>
   19454:	b672      	cpsid	i
   19456:	e7fe      	b.n	19456 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   19458:	68bb      	ldr	r3, [r7, #8]
   1945a:	2b00      	cmp	r3, #0
   1945c:	d103      	bne.n	19466 <xQueueGenericSendFromISR+0x2a>
   1945e:	69bb      	ldr	r3, [r7, #24]
   19460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19462:	2b00      	cmp	r3, #0
   19464:	d101      	bne.n	1946a <xQueueGenericSendFromISR+0x2e>
   19466:	2301      	movs	r3, #1
   19468:	e000      	b.n	1946c <xQueueGenericSendFromISR+0x30>
   1946a:	2300      	movs	r3, #0
   1946c:	2b00      	cmp	r3, #0
   1946e:	d101      	bne.n	19474 <xQueueGenericSendFromISR+0x38>
   19470:	b672      	cpsid	i
   19472:	e7fe      	b.n	19472 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   19474:	683b      	ldr	r3, [r7, #0]
   19476:	2b02      	cmp	r3, #2
   19478:	d103      	bne.n	19482 <xQueueGenericSendFromISR+0x46>
   1947a:	69bb      	ldr	r3, [r7, #24]
   1947c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1947e:	2b01      	cmp	r3, #1
   19480:	d101      	bne.n	19486 <xQueueGenericSendFromISR+0x4a>
   19482:	2301      	movs	r3, #1
   19484:	e000      	b.n	19488 <xQueueGenericSendFromISR+0x4c>
   19486:	2300      	movs	r3, #0
   19488:	2b00      	cmp	r3, #0
   1948a:	d101      	bne.n	19490 <xQueueGenericSendFromISR+0x54>
   1948c:	b672      	cpsid	i
   1948e:	e7fe      	b.n	1948e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   19490:	4b68      	ldr	r3, [pc, #416]	; (19634 <xQueueGenericSendFromISR+0x1f8>)
   19492:	4798      	blx	r3
   19494:	0003      	movs	r3, r0
   19496:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   19498:	69bb      	ldr	r3, [r7, #24]
   1949a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1949c:	69bb      	ldr	r3, [r7, #24]
   1949e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   194a0:	429a      	cmp	r2, r3
   194a2:	d303      	bcc.n	194ac <xQueueGenericSendFromISR+0x70>
   194a4:	683b      	ldr	r3, [r7, #0]
   194a6:	2b02      	cmp	r3, #2
   194a8:	d000      	beq.n	194ac <xQueueGenericSendFromISR+0x70>
   194aa:	e088      	b.n	195be <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   194ac:	2313      	movs	r3, #19
   194ae:	18fb      	adds	r3, r7, r3
   194b0:	69ba      	ldr	r2, [r7, #24]
   194b2:	2145      	movs	r1, #69	; 0x45
   194b4:	5c52      	ldrb	r2, [r2, r1]
   194b6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   194b8:	69bb      	ldr	r3, [r7, #24]
   194ba:	0018      	movs	r0, r3
   194bc:	4b5e      	ldr	r3, [pc, #376]	; (19638 <xQueueGenericSendFromISR+0x1fc>)
   194be:	4798      	blx	r3
   194c0:	0003      	movs	r3, r0
   194c2:	001a      	movs	r2, r3
   194c4:	4b5d      	ldr	r3, [pc, #372]	; (1963c <xQueueGenericSendFromISR+0x200>)
   194c6:	881b      	ldrh	r3, [r3, #0]
   194c8:	4013      	ands	r3, r2
   194ca:	b29b      	uxth	r3, r3
   194cc:	2b00      	cmp	r3, #0
   194ce:	d022      	beq.n	19516 <xQueueGenericSendFromISR+0xda>
   194d0:	683b      	ldr	r3, [r7, #0]
   194d2:	2b00      	cmp	r3, #0
   194d4:	d10b      	bne.n	194ee <xQueueGenericSendFromISR+0xb2>
   194d6:	69bb      	ldr	r3, [r7, #24]
   194d8:	0018      	movs	r0, r3
   194da:	4b59      	ldr	r3, [pc, #356]	; (19640 <xQueueGenericSendFromISR+0x204>)
   194dc:	4798      	blx	r3
   194de:	0003      	movs	r3, r0
   194e0:	001a      	movs	r2, r3
   194e2:	4b58      	ldr	r3, [pc, #352]	; (19644 <xQueueGenericSendFromISR+0x208>)
   194e4:	5c9b      	ldrb	r3, [r3, r2]
   194e6:	3330      	adds	r3, #48	; 0x30
   194e8:	b2db      	uxtb	r3, r3
   194ea:	001d      	movs	r5, r3
   194ec:	e000      	b.n	194f0 <xQueueGenericSendFromISR+0xb4>
   194ee:	2535      	movs	r5, #53	; 0x35
   194f0:	69bb      	ldr	r3, [r7, #24]
   194f2:	0018      	movs	r0, r3
   194f4:	4b52      	ldr	r3, [pc, #328]	; (19640 <xQueueGenericSendFromISR+0x204>)
   194f6:	4798      	blx	r3
   194f8:	0003      	movs	r3, r0
   194fa:	001a      	movs	r2, r3
   194fc:	4b51      	ldr	r3, [pc, #324]	; (19644 <xQueueGenericSendFromISR+0x208>)
   194fe:	5c9c      	ldrb	r4, [r3, r2]
   19500:	69bb      	ldr	r3, [r7, #24]
   19502:	0018      	movs	r0, r3
   19504:	4b50      	ldr	r3, [pc, #320]	; (19648 <xQueueGenericSendFromISR+0x20c>)
   19506:	4798      	blx	r3
   19508:	0003      	movs	r3, r0
   1950a:	b2db      	uxtb	r3, r3
   1950c:	001a      	movs	r2, r3
   1950e:	0021      	movs	r1, r4
   19510:	0028      	movs	r0, r5
   19512:	4b4e      	ldr	r3, [pc, #312]	; (1964c <xQueueGenericSendFromISR+0x210>)
   19514:	4798      	blx	r3
   19516:	69bb      	ldr	r3, [r7, #24]
   19518:	0018      	movs	r0, r3
   1951a:	4b49      	ldr	r3, [pc, #292]	; (19640 <xQueueGenericSendFromISR+0x204>)
   1951c:	4798      	blx	r3
   1951e:	0003      	movs	r3, r0
   19520:	001a      	movs	r2, r3
   19522:	4b48      	ldr	r3, [pc, #288]	; (19644 <xQueueGenericSendFromISR+0x208>)
   19524:	5c9c      	ldrb	r4, [r3, r2]
   19526:	69bb      	ldr	r3, [r7, #24]
   19528:	0018      	movs	r0, r3
   1952a:	4b47      	ldr	r3, [pc, #284]	; (19648 <xQueueGenericSendFromISR+0x20c>)
   1952c:	4798      	blx	r3
   1952e:	0003      	movs	r3, r0
   19530:	b2d9      	uxtb	r1, r3
   19532:	69bb      	ldr	r3, [r7, #24]
   19534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19536:	b2db      	uxtb	r3, r3
   19538:	3301      	adds	r3, #1
   1953a:	b2db      	uxtb	r3, r3
   1953c:	001a      	movs	r2, r3
   1953e:	0020      	movs	r0, r4
   19540:	4b43      	ldr	r3, [pc, #268]	; (19650 <xQueueGenericSendFromISR+0x214>)
   19542:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   19544:	683a      	ldr	r2, [r7, #0]
   19546:	68b9      	ldr	r1, [r7, #8]
   19548:	69bb      	ldr	r3, [r7, #24]
   1954a:	0018      	movs	r0, r3
   1954c:	4b41      	ldr	r3, [pc, #260]	; (19654 <xQueueGenericSendFromISR+0x218>)
   1954e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   19550:	2313      	movs	r3, #19
   19552:	18fb      	adds	r3, r7, r3
   19554:	781b      	ldrb	r3, [r3, #0]
   19556:	b25b      	sxtb	r3, r3
   19558:	3301      	adds	r3, #1
   1955a:	d124      	bne.n	195a6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1955c:	69bb      	ldr	r3, [r7, #24]
   1955e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19560:	2b00      	cmp	r3, #0
   19562:	d00e      	beq.n	19582 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   19564:	683a      	ldr	r2, [r7, #0]
   19566:	69bb      	ldr	r3, [r7, #24]
   19568:	0011      	movs	r1, r2
   1956a:	0018      	movs	r0, r3
   1956c:	4b3a      	ldr	r3, [pc, #232]	; (19658 <xQueueGenericSendFromISR+0x21c>)
   1956e:	4798      	blx	r3
   19570:	1e03      	subs	r3, r0, #0
   19572:	d021      	beq.n	195b8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   19574:	687b      	ldr	r3, [r7, #4]
   19576:	2b00      	cmp	r3, #0
   19578:	d01e      	beq.n	195b8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1957a:	687b      	ldr	r3, [r7, #4]
   1957c:	2201      	movs	r2, #1
   1957e:	601a      	str	r2, [r3, #0]
   19580:	e01a      	b.n	195b8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   19582:	69bb      	ldr	r3, [r7, #24]
   19584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19586:	2b00      	cmp	r3, #0
   19588:	d016      	beq.n	195b8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1958a:	69bb      	ldr	r3, [r7, #24]
   1958c:	3324      	adds	r3, #36	; 0x24
   1958e:	0018      	movs	r0, r3
   19590:	4b32      	ldr	r3, [pc, #200]	; (1965c <xQueueGenericSendFromISR+0x220>)
   19592:	4798      	blx	r3
   19594:	1e03      	subs	r3, r0, #0
   19596:	d00f      	beq.n	195b8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   19598:	687b      	ldr	r3, [r7, #4]
   1959a:	2b00      	cmp	r3, #0
   1959c:	d00c      	beq.n	195b8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1959e:	687b      	ldr	r3, [r7, #4]
   195a0:	2201      	movs	r2, #1
   195a2:	601a      	str	r2, [r3, #0]
   195a4:	e008      	b.n	195b8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   195a6:	2313      	movs	r3, #19
   195a8:	18fb      	adds	r3, r7, r3
   195aa:	781b      	ldrb	r3, [r3, #0]
   195ac:	3301      	adds	r3, #1
   195ae:	b2db      	uxtb	r3, r3
   195b0:	b259      	sxtb	r1, r3
   195b2:	69bb      	ldr	r3, [r7, #24]
   195b4:	2245      	movs	r2, #69	; 0x45
   195b6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   195b8:	2301      	movs	r3, #1
   195ba:	61fb      	str	r3, [r7, #28]
		{
   195bc:	e030      	b.n	19620 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   195be:	69bb      	ldr	r3, [r7, #24]
   195c0:	0018      	movs	r0, r3
   195c2:	4b1d      	ldr	r3, [pc, #116]	; (19638 <xQueueGenericSendFromISR+0x1fc>)
   195c4:	4798      	blx	r3
   195c6:	0003      	movs	r3, r0
   195c8:	001a      	movs	r2, r3
   195ca:	4b1c      	ldr	r3, [pc, #112]	; (1963c <xQueueGenericSendFromISR+0x200>)
   195cc:	881b      	ldrh	r3, [r3, #0]
   195ce:	4013      	ands	r3, r2
   195d0:	b29b      	uxth	r3, r3
   195d2:	2b00      	cmp	r3, #0
   195d4:	d022      	beq.n	1961c <xQueueGenericSendFromISR+0x1e0>
   195d6:	683b      	ldr	r3, [r7, #0]
   195d8:	2b00      	cmp	r3, #0
   195da:	d10b      	bne.n	195f4 <xQueueGenericSendFromISR+0x1b8>
   195dc:	69bb      	ldr	r3, [r7, #24]
   195de:	0018      	movs	r0, r3
   195e0:	4b17      	ldr	r3, [pc, #92]	; (19640 <xQueueGenericSendFromISR+0x204>)
   195e2:	4798      	blx	r3
   195e4:	0003      	movs	r3, r0
   195e6:	001a      	movs	r2, r3
   195e8:	4b16      	ldr	r3, [pc, #88]	; (19644 <xQueueGenericSendFromISR+0x208>)
   195ea:	5c9b      	ldrb	r3, [r3, r2]
   195ec:	3358      	adds	r3, #88	; 0x58
   195ee:	b2db      	uxtb	r3, r3
   195f0:	001d      	movs	r5, r3
   195f2:	e000      	b.n	195f6 <xQueueGenericSendFromISR+0x1ba>
   195f4:	255d      	movs	r5, #93	; 0x5d
   195f6:	69bb      	ldr	r3, [r7, #24]
   195f8:	0018      	movs	r0, r3
   195fa:	4b11      	ldr	r3, [pc, #68]	; (19640 <xQueueGenericSendFromISR+0x204>)
   195fc:	4798      	blx	r3
   195fe:	0003      	movs	r3, r0
   19600:	001a      	movs	r2, r3
   19602:	4b10      	ldr	r3, [pc, #64]	; (19644 <xQueueGenericSendFromISR+0x208>)
   19604:	5c9c      	ldrb	r4, [r3, r2]
   19606:	69bb      	ldr	r3, [r7, #24]
   19608:	0018      	movs	r0, r3
   1960a:	4b0f      	ldr	r3, [pc, #60]	; (19648 <xQueueGenericSendFromISR+0x20c>)
   1960c:	4798      	blx	r3
   1960e:	0003      	movs	r3, r0
   19610:	b2db      	uxtb	r3, r3
   19612:	001a      	movs	r2, r3
   19614:	0021      	movs	r1, r4
   19616:	0028      	movs	r0, r5
   19618:	4b0c      	ldr	r3, [pc, #48]	; (1964c <xQueueGenericSendFromISR+0x210>)
   1961a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1961c:	2300      	movs	r3, #0
   1961e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   19620:	697b      	ldr	r3, [r7, #20]
   19622:	0018      	movs	r0, r3
   19624:	4b0e      	ldr	r3, [pc, #56]	; (19660 <xQueueGenericSendFromISR+0x224>)
   19626:	4798      	blx	r3

	return xReturn;
   19628:	69fb      	ldr	r3, [r7, #28]
}
   1962a:	0018      	movs	r0, r3
   1962c:	46bd      	mov	sp, r7
   1962e:	b008      	add	sp, #32
   19630:	bdb0      	pop	{r4, r5, r7, pc}
   19632:	46c0      	nop			; (mov r8, r8)
   19634:	00018a9d 	.word	0x00018a9d
   19638:	00016b01 	.word	0x00016b01
   1963c:	20000110 	.word	0x20000110
   19640:	00016a01 	.word	0x00016a01
   19644:	20000104 	.word	0x20000104
   19648:	00016ae1 	.word	0x00016ae1
   1964c:	00017439 	.word	0x00017439
   19650:	00017a95 	.word	0x00017a95
   19654:	0001a215 	.word	0x0001a215
   19658:	0001a519 	.word	0x0001a519
   1965c:	0001b2d9 	.word	0x0001b2d9
   19660:	00018aa9 	.word	0x00018aa9

00019664 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   19664:	b580      	push	{r7, lr}
   19666:	b082      	sub	sp, #8
   19668:	af00      	add	r7, sp, #0
   1966a:	6078      	str	r0, [r7, #4]
   1966c:	6039      	str	r1, [r7, #0]
   1966e:	6839      	ldr	r1, [r7, #0]
   19670:	687b      	ldr	r3, [r7, #4]
   19672:	2200      	movs	r2, #0
   19674:	0018      	movs	r0, r3
   19676:	4b03      	ldr	r3, [pc, #12]	; (19684 <xQueueGiveFromISR+0x20>)
   19678:	4798      	blx	r3
   1967a:	0003      	movs	r3, r0
   1967c:	0018      	movs	r0, r3
   1967e:	46bd      	mov	sp, r7
   19680:	b002      	add	sp, #8
   19682:	bd80      	pop	{r7, pc}
   19684:	00019689 	.word	0x00019689

00019688 <MyWrapper>:
{
   19688:	b5b0      	push	{r4, r5, r7, lr}
   1968a:	b08a      	sub	sp, #40	; 0x28
   1968c:	af00      	add	r7, sp, #0
   1968e:	60f8      	str	r0, [r7, #12]
   19690:	60b9      	str	r1, [r7, #8]
   19692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19694:	68fb      	ldr	r3, [r7, #12]
   19696:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   19698:	6a3b      	ldr	r3, [r7, #32]
   1969a:	2b00      	cmp	r3, #0
   1969c:	d101      	bne.n	196a2 <MyWrapper+0x1a>
   1969e:	b672      	cpsid	i
   196a0:	e7fe      	b.n	196a0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   196a2:	6a3b      	ldr	r3, [r7, #32]
   196a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   196a6:	2b00      	cmp	r3, #0
   196a8:	d001      	beq.n	196ae <MyWrapper+0x26>
   196aa:	b672      	cpsid	i
   196ac:	e7fe      	b.n	196ac <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   196ae:	6a3b      	ldr	r3, [r7, #32]
   196b0:	681b      	ldr	r3, [r3, #0]
   196b2:	2b00      	cmp	r3, #0
   196b4:	d103      	bne.n	196be <MyWrapper+0x36>
   196b6:	6a3b      	ldr	r3, [r7, #32]
   196b8:	685b      	ldr	r3, [r3, #4]
   196ba:	2b00      	cmp	r3, #0
   196bc:	d101      	bne.n	196c2 <MyWrapper+0x3a>
   196be:	2301      	movs	r3, #1
   196c0:	e000      	b.n	196c4 <MyWrapper+0x3c>
   196c2:	2300      	movs	r3, #0
   196c4:	2b00      	cmp	r3, #0
   196c6:	d101      	bne.n	196cc <MyWrapper+0x44>
   196c8:	b672      	cpsid	i
   196ca:	e7fe      	b.n	196ca <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   196cc:	4b66      	ldr	r3, [pc, #408]	; (19868 <MyWrapper+0x1e0>)
   196ce:	4798      	blx	r3
   196d0:	0003      	movs	r3, r0
   196d2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   196d4:	6a3b      	ldr	r3, [r7, #32]
   196d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   196d8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   196da:	6a3b      	ldr	r3, [r7, #32]
   196dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   196de:	69bb      	ldr	r3, [r7, #24]
   196e0:	429a      	cmp	r2, r3
   196e2:	d800      	bhi.n	196e6 <MyWrapper+0x5e>
   196e4:	e085      	b.n	197f2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   196e6:	2317      	movs	r3, #23
   196e8:	18fb      	adds	r3, r7, r3
   196ea:	6a3a      	ldr	r2, [r7, #32]
   196ec:	2145      	movs	r1, #69	; 0x45
   196ee:	5c52      	ldrb	r2, [r2, r1]
   196f0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   196f2:	6a3b      	ldr	r3, [r7, #32]
   196f4:	0018      	movs	r0, r3
   196f6:	4b5d      	ldr	r3, [pc, #372]	; (1986c <MyWrapper+0x1e4>)
   196f8:	4798      	blx	r3
   196fa:	0003      	movs	r3, r0
   196fc:	001a      	movs	r2, r3
   196fe:	4b5c      	ldr	r3, [pc, #368]	; (19870 <MyWrapper+0x1e8>)
   19700:	881b      	ldrh	r3, [r3, #0]
   19702:	4013      	ands	r3, r2
   19704:	b29b      	uxth	r3, r3
   19706:	2b00      	cmp	r3, #0
   19708:	d022      	beq.n	19750 <MyWrapper+0xc8>
   1970a:	687b      	ldr	r3, [r7, #4]
   1970c:	2b00      	cmp	r3, #0
   1970e:	d10b      	bne.n	19728 <MyWrapper+0xa0>
   19710:	6a3b      	ldr	r3, [r7, #32]
   19712:	0018      	movs	r0, r3
   19714:	4b57      	ldr	r3, [pc, #348]	; (19874 <MyWrapper+0x1ec>)
   19716:	4798      	blx	r3
   19718:	0003      	movs	r3, r0
   1971a:	001a      	movs	r2, r3
   1971c:	4b56      	ldr	r3, [pc, #344]	; (19878 <MyWrapper+0x1f0>)
   1971e:	5c9b      	ldrb	r3, [r3, r2]
   19720:	3330      	adds	r3, #48	; 0x30
   19722:	b2db      	uxtb	r3, r3
   19724:	001d      	movs	r5, r3
   19726:	e000      	b.n	1972a <MyWrapper+0xa2>
   19728:	2535      	movs	r5, #53	; 0x35
   1972a:	6a3b      	ldr	r3, [r7, #32]
   1972c:	0018      	movs	r0, r3
   1972e:	4b51      	ldr	r3, [pc, #324]	; (19874 <MyWrapper+0x1ec>)
   19730:	4798      	blx	r3
   19732:	0003      	movs	r3, r0
   19734:	001a      	movs	r2, r3
   19736:	4b50      	ldr	r3, [pc, #320]	; (19878 <MyWrapper+0x1f0>)
   19738:	5c9c      	ldrb	r4, [r3, r2]
   1973a:	6a3b      	ldr	r3, [r7, #32]
   1973c:	0018      	movs	r0, r3
   1973e:	4b4f      	ldr	r3, [pc, #316]	; (1987c <MyWrapper+0x1f4>)
   19740:	4798      	blx	r3
   19742:	0003      	movs	r3, r0
   19744:	b2db      	uxtb	r3, r3
   19746:	001a      	movs	r2, r3
   19748:	0021      	movs	r1, r4
   1974a:	0028      	movs	r0, r5
   1974c:	4b4c      	ldr	r3, [pc, #304]	; (19880 <MyWrapper+0x1f8>)
   1974e:	4798      	blx	r3
   19750:	6a3b      	ldr	r3, [r7, #32]
   19752:	0018      	movs	r0, r3
   19754:	4b47      	ldr	r3, [pc, #284]	; (19874 <MyWrapper+0x1ec>)
   19756:	4798      	blx	r3
   19758:	0003      	movs	r3, r0
   1975a:	001a      	movs	r2, r3
   1975c:	4b46      	ldr	r3, [pc, #280]	; (19878 <MyWrapper+0x1f0>)
   1975e:	5c9c      	ldrb	r4, [r3, r2]
   19760:	6a3b      	ldr	r3, [r7, #32]
   19762:	0018      	movs	r0, r3
   19764:	4b45      	ldr	r3, [pc, #276]	; (1987c <MyWrapper+0x1f4>)
   19766:	4798      	blx	r3
   19768:	0003      	movs	r3, r0
   1976a:	b2d9      	uxtb	r1, r3
   1976c:	6a3b      	ldr	r3, [r7, #32]
   1976e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19770:	b2db      	uxtb	r3, r3
   19772:	3301      	adds	r3, #1
   19774:	b2db      	uxtb	r3, r3
   19776:	001a      	movs	r2, r3
   19778:	0020      	movs	r0, r4
   1977a:	4b42      	ldr	r3, [pc, #264]	; (19884 <MyWrapper+0x1fc>)
   1977c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1977e:	69bb      	ldr	r3, [r7, #24]
   19780:	1c5a      	adds	r2, r3, #1
   19782:	6a3b      	ldr	r3, [r7, #32]
   19784:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   19786:	2317      	movs	r3, #23
   19788:	18fb      	adds	r3, r7, r3
   1978a:	781b      	ldrb	r3, [r3, #0]
   1978c:	b25b      	sxtb	r3, r3
   1978e:	3301      	adds	r3, #1
   19790:	d123      	bne.n	197da <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   19792:	6a3b      	ldr	r3, [r7, #32]
   19794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   19796:	2b00      	cmp	r3, #0
   19798:	d00d      	beq.n	197b6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1979a:	6a3b      	ldr	r3, [r7, #32]
   1979c:	2100      	movs	r1, #0
   1979e:	0018      	movs	r0, r3
   197a0:	4b39      	ldr	r3, [pc, #228]	; (19888 <MyWrapper+0x200>)
   197a2:	4798      	blx	r3
   197a4:	1e03      	subs	r3, r0, #0
   197a6:	d021      	beq.n	197ec <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   197a8:	68bb      	ldr	r3, [r7, #8]
   197aa:	2b00      	cmp	r3, #0
   197ac:	d01e      	beq.n	197ec <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   197ae:	68bb      	ldr	r3, [r7, #8]
   197b0:	2201      	movs	r2, #1
   197b2:	601a      	str	r2, [r3, #0]
   197b4:	e01a      	b.n	197ec <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   197b6:	6a3b      	ldr	r3, [r7, #32]
   197b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   197ba:	2b00      	cmp	r3, #0
   197bc:	d016      	beq.n	197ec <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   197be:	6a3b      	ldr	r3, [r7, #32]
   197c0:	3324      	adds	r3, #36	; 0x24
   197c2:	0018      	movs	r0, r3
   197c4:	4b31      	ldr	r3, [pc, #196]	; (1988c <MyWrapper+0x204>)
   197c6:	4798      	blx	r3
   197c8:	1e03      	subs	r3, r0, #0
   197ca:	d00f      	beq.n	197ec <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   197cc:	68bb      	ldr	r3, [r7, #8]
   197ce:	2b00      	cmp	r3, #0
   197d0:	d00c      	beq.n	197ec <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   197d2:	68bb      	ldr	r3, [r7, #8]
   197d4:	2201      	movs	r2, #1
   197d6:	601a      	str	r2, [r3, #0]
   197d8:	e008      	b.n	197ec <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   197da:	2317      	movs	r3, #23
   197dc:	18fb      	adds	r3, r7, r3
   197de:	781b      	ldrb	r3, [r3, #0]
   197e0:	3301      	adds	r3, #1
   197e2:	b2db      	uxtb	r3, r3
   197e4:	b259      	sxtb	r1, r3
   197e6:	6a3b      	ldr	r3, [r7, #32]
   197e8:	2245      	movs	r2, #69	; 0x45
   197ea:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   197ec:	2301      	movs	r3, #1
   197ee:	627b      	str	r3, [r7, #36]	; 0x24
   197f0:	e030      	b.n	19854 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   197f2:	6a3b      	ldr	r3, [r7, #32]
   197f4:	0018      	movs	r0, r3
   197f6:	4b1d      	ldr	r3, [pc, #116]	; (1986c <MyWrapper+0x1e4>)
   197f8:	4798      	blx	r3
   197fa:	0003      	movs	r3, r0
   197fc:	001a      	movs	r2, r3
   197fe:	4b1c      	ldr	r3, [pc, #112]	; (19870 <MyWrapper+0x1e8>)
   19800:	881b      	ldrh	r3, [r3, #0]
   19802:	4013      	ands	r3, r2
   19804:	b29b      	uxth	r3, r3
   19806:	2b00      	cmp	r3, #0
   19808:	d022      	beq.n	19850 <MyWrapper+0x1c8>
   1980a:	687b      	ldr	r3, [r7, #4]
   1980c:	2b00      	cmp	r3, #0
   1980e:	d10b      	bne.n	19828 <MyWrapper+0x1a0>
   19810:	6a3b      	ldr	r3, [r7, #32]
   19812:	0018      	movs	r0, r3
   19814:	4b17      	ldr	r3, [pc, #92]	; (19874 <MyWrapper+0x1ec>)
   19816:	4798      	blx	r3
   19818:	0003      	movs	r3, r0
   1981a:	001a      	movs	r2, r3
   1981c:	4b16      	ldr	r3, [pc, #88]	; (19878 <MyWrapper+0x1f0>)
   1981e:	5c9b      	ldrb	r3, [r3, r2]
   19820:	3358      	adds	r3, #88	; 0x58
   19822:	b2db      	uxtb	r3, r3
   19824:	001d      	movs	r5, r3
   19826:	e000      	b.n	1982a <MyWrapper+0x1a2>
   19828:	255d      	movs	r5, #93	; 0x5d
   1982a:	6a3b      	ldr	r3, [r7, #32]
   1982c:	0018      	movs	r0, r3
   1982e:	4b11      	ldr	r3, [pc, #68]	; (19874 <MyWrapper+0x1ec>)
   19830:	4798      	blx	r3
   19832:	0003      	movs	r3, r0
   19834:	001a      	movs	r2, r3
   19836:	4b10      	ldr	r3, [pc, #64]	; (19878 <MyWrapper+0x1f0>)
   19838:	5c9c      	ldrb	r4, [r3, r2]
   1983a:	6a3b      	ldr	r3, [r7, #32]
   1983c:	0018      	movs	r0, r3
   1983e:	4b0f      	ldr	r3, [pc, #60]	; (1987c <MyWrapper+0x1f4>)
   19840:	4798      	blx	r3
   19842:	0003      	movs	r3, r0
   19844:	b2db      	uxtb	r3, r3
   19846:	001a      	movs	r2, r3
   19848:	0021      	movs	r1, r4
   1984a:	0028      	movs	r0, r5
   1984c:	4b0c      	ldr	r3, [pc, #48]	; (19880 <MyWrapper+0x1f8>)
   1984e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   19850:	2300      	movs	r3, #0
   19852:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   19854:	69fb      	ldr	r3, [r7, #28]
   19856:	0018      	movs	r0, r3
   19858:	4b0d      	ldr	r3, [pc, #52]	; (19890 <MyWrapper+0x208>)
   1985a:	4798      	blx	r3

	return xReturn;
   1985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1985e:	0018      	movs	r0, r3
   19860:	46bd      	mov	sp, r7
   19862:	b00a      	add	sp, #40	; 0x28
   19864:	bdb0      	pop	{r4, r5, r7, pc}
   19866:	46c0      	nop			; (mov r8, r8)
   19868:	00018a9d 	.word	0x00018a9d
   1986c:	00016b01 	.word	0x00016b01
   19870:	20000110 	.word	0x20000110
   19874:	00016a01 	.word	0x00016a01
   19878:	20000104 	.word	0x20000104
   1987c:	00016ae1 	.word	0x00016ae1
   19880:	00017439 	.word	0x00017439
   19884:	00017a95 	.word	0x00017a95
   19888:	0001a519 	.word	0x0001a519
   1988c:	0001b2d9 	.word	0x0001b2d9
   19890:	00018aa9 	.word	0x00018aa9

00019894 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   19894:	b5b0      	push	{r4, r5, r7, lr}
   19896:	b08a      	sub	sp, #40	; 0x28
   19898:	af00      	add	r7, sp, #0
   1989a:	60f8      	str	r0, [r7, #12]
   1989c:	60b9      	str	r1, [r7, #8]
   1989e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   198a0:	2300      	movs	r3, #0
   198a2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   198a4:	68fb      	ldr	r3, [r7, #12]
   198a6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   198a8:	6a3b      	ldr	r3, [r7, #32]
   198aa:	2b00      	cmp	r3, #0
   198ac:	d101      	bne.n	198b2 <xQueueReceive+0x1e>
   198ae:	b672      	cpsid	i
   198b0:	e7fe      	b.n	198b0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   198b2:	68bb      	ldr	r3, [r7, #8]
   198b4:	2b00      	cmp	r3, #0
   198b6:	d103      	bne.n	198c0 <xQueueReceive+0x2c>
   198b8:	6a3b      	ldr	r3, [r7, #32]
   198ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   198bc:	2b00      	cmp	r3, #0
   198be:	d101      	bne.n	198c4 <xQueueReceive+0x30>
   198c0:	2301      	movs	r3, #1
   198c2:	e000      	b.n	198c6 <xQueueReceive+0x32>
   198c4:	2300      	movs	r3, #0
   198c6:	2b00      	cmp	r3, #0
   198c8:	d101      	bne.n	198ce <xQueueReceive+0x3a>
   198ca:	b672      	cpsid	i
   198cc:	e7fe      	b.n	198cc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   198ce:	4bbf      	ldr	r3, [pc, #764]	; (19bcc <xQueueReceive+0x338>)
   198d0:	4798      	blx	r3
   198d2:	1e03      	subs	r3, r0, #0
   198d4:	d102      	bne.n	198dc <xQueueReceive+0x48>
   198d6:	687b      	ldr	r3, [r7, #4]
   198d8:	2b00      	cmp	r3, #0
   198da:	d101      	bne.n	198e0 <xQueueReceive+0x4c>
   198dc:	2301      	movs	r3, #1
   198de:	e000      	b.n	198e2 <xQueueReceive+0x4e>
   198e0:	2300      	movs	r3, #0
   198e2:	2b00      	cmp	r3, #0
   198e4:	d101      	bne.n	198ea <xQueueReceive+0x56>
   198e6:	b672      	cpsid	i
   198e8:	e7fe      	b.n	198e8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   198ea:	4bb9      	ldr	r3, [pc, #740]	; (19bd0 <xQueueReceive+0x33c>)
   198ec:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   198ee:	6a3b      	ldr	r3, [r7, #32]
   198f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   198f2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   198f4:	69fb      	ldr	r3, [r7, #28]
   198f6:	2b00      	cmp	r3, #0
   198f8:	d100      	bne.n	198fc <xQueueReceive+0x68>
   198fa:	e07d      	b.n	199f8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   198fc:	68ba      	ldr	r2, [r7, #8]
   198fe:	6a3b      	ldr	r3, [r7, #32]
   19900:	0011      	movs	r1, r2
   19902:	0018      	movs	r0, r3
   19904:	4bb3      	ldr	r3, [pc, #716]	; (19bd4 <xQueueReceive+0x340>)
   19906:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   19908:	4bb3      	ldr	r3, [pc, #716]	; (19bd8 <xQueueReceive+0x344>)
   1990a:	4798      	blx	r3
   1990c:	0003      	movs	r3, r0
   1990e:	0018      	movs	r0, r3
   19910:	4bb2      	ldr	r3, [pc, #712]	; (19bdc <xQueueReceive+0x348>)
   19912:	4798      	blx	r3
   19914:	0003      	movs	r3, r0
   19916:	001a      	movs	r2, r3
   19918:	4bb1      	ldr	r3, [pc, #708]	; (19be0 <xQueueReceive+0x34c>)
   1991a:	881b      	ldrh	r3, [r3, #0]
   1991c:	4013      	ands	r3, r2
   1991e:	b29b      	uxth	r3, r3
   19920:	2b00      	cmp	r3, #0
   19922:	d029      	beq.n	19978 <xQueueReceive+0xe4>
   19924:	6a3b      	ldr	r3, [r7, #32]
   19926:	0018      	movs	r0, r3
   19928:	4bae      	ldr	r3, [pc, #696]	; (19be4 <xQueueReceive+0x350>)
   1992a:	4798      	blx	r3
   1992c:	0003      	movs	r3, r0
   1992e:	001a      	movs	r2, r3
   19930:	4bab      	ldr	r3, [pc, #684]	; (19be0 <xQueueReceive+0x34c>)
   19932:	881b      	ldrh	r3, [r3, #0]
   19934:	4013      	ands	r3, r2
   19936:	b29b      	uxth	r3, r3
   19938:	2b00      	cmp	r3, #0
   1993a:	d01d      	beq.n	19978 <xQueueReceive+0xe4>
   1993c:	6a3b      	ldr	r3, [r7, #32]
   1993e:	0018      	movs	r0, r3
   19940:	4ba9      	ldr	r3, [pc, #676]	; (19be8 <xQueueReceive+0x354>)
   19942:	4798      	blx	r3
   19944:	0003      	movs	r3, r0
   19946:	001a      	movs	r2, r3
   19948:	4ba8      	ldr	r3, [pc, #672]	; (19bec <xQueueReceive+0x358>)
   1994a:	5c9b      	ldrb	r3, [r3, r2]
   1994c:	3328      	adds	r3, #40	; 0x28
   1994e:	b2db      	uxtb	r3, r3
   19950:	001d      	movs	r5, r3
   19952:	6a3b      	ldr	r3, [r7, #32]
   19954:	0018      	movs	r0, r3
   19956:	4ba4      	ldr	r3, [pc, #656]	; (19be8 <xQueueReceive+0x354>)
   19958:	4798      	blx	r3
   1995a:	0003      	movs	r3, r0
   1995c:	001a      	movs	r2, r3
   1995e:	4ba3      	ldr	r3, [pc, #652]	; (19bec <xQueueReceive+0x358>)
   19960:	5c9c      	ldrb	r4, [r3, r2]
   19962:	6a3b      	ldr	r3, [r7, #32]
   19964:	0018      	movs	r0, r3
   19966:	4ba2      	ldr	r3, [pc, #648]	; (19bf0 <xQueueReceive+0x35c>)
   19968:	4798      	blx	r3
   1996a:	0003      	movs	r3, r0
   1996c:	b2db      	uxtb	r3, r3
   1996e:	001a      	movs	r2, r3
   19970:	0021      	movs	r1, r4
   19972:	0028      	movs	r0, r5
   19974:	4b9f      	ldr	r3, [pc, #636]	; (19bf4 <xQueueReceive+0x360>)
   19976:	4798      	blx	r3
   19978:	6a3b      	ldr	r3, [r7, #32]
   1997a:	0018      	movs	r0, r3
   1997c:	4b9a      	ldr	r3, [pc, #616]	; (19be8 <xQueueReceive+0x354>)
   1997e:	4798      	blx	r3
   19980:	0003      	movs	r3, r0
   19982:	001a      	movs	r2, r3
   19984:	4b99      	ldr	r3, [pc, #612]	; (19bec <xQueueReceive+0x358>)
   19986:	5c9c      	ldrb	r4, [r3, r2]
   19988:	6a3b      	ldr	r3, [r7, #32]
   1998a:	0018      	movs	r0, r3
   1998c:	4b98      	ldr	r3, [pc, #608]	; (19bf0 <xQueueReceive+0x35c>)
   1998e:	4798      	blx	r3
   19990:	0003      	movs	r3, r0
   19992:	b2dd      	uxtb	r5, r3
   19994:	6a3b      	ldr	r3, [r7, #32]
   19996:	0018      	movs	r0, r3
   19998:	4b93      	ldr	r3, [pc, #588]	; (19be8 <xQueueReceive+0x354>)
   1999a:	4798      	blx	r3
   1999c:	0003      	movs	r3, r0
   1999e:	001a      	movs	r2, r3
   199a0:	4b92      	ldr	r3, [pc, #584]	; (19bec <xQueueReceive+0x358>)
   199a2:	5c9b      	ldrb	r3, [r3, r2]
   199a4:	2b02      	cmp	r3, #2
   199a6:	d108      	bne.n	199ba <xQueueReceive+0x126>
   199a8:	4b8b      	ldr	r3, [pc, #556]	; (19bd8 <xQueueReceive+0x344>)
   199aa:	4798      	blx	r3
   199ac:	0003      	movs	r3, r0
   199ae:	0018      	movs	r0, r3
   199b0:	4b91      	ldr	r3, [pc, #580]	; (19bf8 <xQueueReceive+0x364>)
   199b2:	4798      	blx	r3
   199b4:	0003      	movs	r3, r0
   199b6:	b2db      	uxtb	r3, r3
   199b8:	e004      	b.n	199c4 <xQueueReceive+0x130>
   199ba:	6a3b      	ldr	r3, [r7, #32]
   199bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   199be:	b2db      	uxtb	r3, r3
   199c0:	3b01      	subs	r3, #1
   199c2:	b2db      	uxtb	r3, r3
   199c4:	001a      	movs	r2, r3
   199c6:	0029      	movs	r1, r5
   199c8:	0020      	movs	r0, r4
   199ca:	4b8c      	ldr	r3, [pc, #560]	; (19bfc <xQueueReceive+0x368>)
   199cc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   199ce:	69fb      	ldr	r3, [r7, #28]
   199d0:	1e5a      	subs	r2, r3, #1
   199d2:	6a3b      	ldr	r3, [r7, #32]
   199d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   199d6:	6a3b      	ldr	r3, [r7, #32]
   199d8:	691b      	ldr	r3, [r3, #16]
   199da:	2b00      	cmp	r3, #0
   199dc:	d008      	beq.n	199f0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   199de:	6a3b      	ldr	r3, [r7, #32]
   199e0:	3310      	adds	r3, #16
   199e2:	0018      	movs	r0, r3
   199e4:	4b86      	ldr	r3, [pc, #536]	; (19c00 <xQueueReceive+0x36c>)
   199e6:	4798      	blx	r3
   199e8:	1e03      	subs	r3, r0, #0
   199ea:	d001      	beq.n	199f0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   199ec:	4b85      	ldr	r3, [pc, #532]	; (19c04 <xQueueReceive+0x370>)
   199ee:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   199f0:	4b85      	ldr	r3, [pc, #532]	; (19c08 <xQueueReceive+0x374>)
   199f2:	4798      	blx	r3
				return pdPASS;
   199f4:	2301      	movs	r3, #1
   199f6:	e15f      	b.n	19cb8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   199f8:	687b      	ldr	r3, [r7, #4]
   199fa:	2b00      	cmp	r3, #0
   199fc:	d13b      	bne.n	19a76 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   199fe:	4b82      	ldr	r3, [pc, #520]	; (19c08 <xQueueReceive+0x374>)
   19a00:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   19a02:	4b75      	ldr	r3, [pc, #468]	; (19bd8 <xQueueReceive+0x344>)
   19a04:	4798      	blx	r3
   19a06:	0003      	movs	r3, r0
   19a08:	0018      	movs	r0, r3
   19a0a:	4b74      	ldr	r3, [pc, #464]	; (19bdc <xQueueReceive+0x348>)
   19a0c:	4798      	blx	r3
   19a0e:	0003      	movs	r3, r0
   19a10:	001a      	movs	r2, r3
   19a12:	4b73      	ldr	r3, [pc, #460]	; (19be0 <xQueueReceive+0x34c>)
   19a14:	881b      	ldrh	r3, [r3, #0]
   19a16:	4013      	ands	r3, r2
   19a18:	b29b      	uxth	r3, r3
   19a1a:	2b00      	cmp	r3, #0
   19a1c:	d029      	beq.n	19a72 <xQueueReceive+0x1de>
   19a1e:	6a3b      	ldr	r3, [r7, #32]
   19a20:	0018      	movs	r0, r3
   19a22:	4b70      	ldr	r3, [pc, #448]	; (19be4 <xQueueReceive+0x350>)
   19a24:	4798      	blx	r3
   19a26:	0003      	movs	r3, r0
   19a28:	001a      	movs	r2, r3
   19a2a:	4b6d      	ldr	r3, [pc, #436]	; (19be0 <xQueueReceive+0x34c>)
   19a2c:	881b      	ldrh	r3, [r3, #0]
   19a2e:	4013      	ands	r3, r2
   19a30:	b29b      	uxth	r3, r3
   19a32:	2b00      	cmp	r3, #0
   19a34:	d01d      	beq.n	19a72 <xQueueReceive+0x1de>
   19a36:	6a3b      	ldr	r3, [r7, #32]
   19a38:	0018      	movs	r0, r3
   19a3a:	4b6b      	ldr	r3, [pc, #428]	; (19be8 <xQueueReceive+0x354>)
   19a3c:	4798      	blx	r3
   19a3e:	0003      	movs	r3, r0
   19a40:	001a      	movs	r2, r3
   19a42:	4b6a      	ldr	r3, [pc, #424]	; (19bec <xQueueReceive+0x358>)
   19a44:	5c9b      	ldrb	r3, [r3, r2]
   19a46:	3350      	adds	r3, #80	; 0x50
   19a48:	b2db      	uxtb	r3, r3
   19a4a:	001d      	movs	r5, r3
   19a4c:	6a3b      	ldr	r3, [r7, #32]
   19a4e:	0018      	movs	r0, r3
   19a50:	4b65      	ldr	r3, [pc, #404]	; (19be8 <xQueueReceive+0x354>)
   19a52:	4798      	blx	r3
   19a54:	0003      	movs	r3, r0
   19a56:	001a      	movs	r2, r3
   19a58:	4b64      	ldr	r3, [pc, #400]	; (19bec <xQueueReceive+0x358>)
   19a5a:	5c9c      	ldrb	r4, [r3, r2]
   19a5c:	6a3b      	ldr	r3, [r7, #32]
   19a5e:	0018      	movs	r0, r3
   19a60:	4b63      	ldr	r3, [pc, #396]	; (19bf0 <xQueueReceive+0x35c>)
   19a62:	4798      	blx	r3
   19a64:	0003      	movs	r3, r0
   19a66:	b2db      	uxtb	r3, r3
   19a68:	001a      	movs	r2, r3
   19a6a:	0021      	movs	r1, r4
   19a6c:	0028      	movs	r0, r5
   19a6e:	4b61      	ldr	r3, [pc, #388]	; (19bf4 <xQueueReceive+0x360>)
   19a70:	4798      	blx	r3
					return errQUEUE_EMPTY;
   19a72:	2300      	movs	r3, #0
   19a74:	e120      	b.n	19cb8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   19a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a78:	2b00      	cmp	r3, #0
   19a7a:	d106      	bne.n	19a8a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19a7c:	2314      	movs	r3, #20
   19a7e:	18fb      	adds	r3, r7, r3
   19a80:	0018      	movs	r0, r3
   19a82:	4b62      	ldr	r3, [pc, #392]	; (19c0c <xQueueReceive+0x378>)
   19a84:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   19a86:	2301      	movs	r3, #1
   19a88:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19a8a:	4b5f      	ldr	r3, [pc, #380]	; (19c08 <xQueueReceive+0x374>)
   19a8c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   19a8e:	4b60      	ldr	r3, [pc, #384]	; (19c10 <xQueueReceive+0x37c>)
   19a90:	4798      	blx	r3
		prvLockQueue( pxQueue );
   19a92:	4b4f      	ldr	r3, [pc, #316]	; (19bd0 <xQueueReceive+0x33c>)
   19a94:	4798      	blx	r3
   19a96:	6a3b      	ldr	r3, [r7, #32]
   19a98:	2244      	movs	r2, #68	; 0x44
   19a9a:	5c9b      	ldrb	r3, [r3, r2]
   19a9c:	b25b      	sxtb	r3, r3
   19a9e:	3301      	adds	r3, #1
   19aa0:	d103      	bne.n	19aaa <xQueueReceive+0x216>
   19aa2:	6a3b      	ldr	r3, [r7, #32]
   19aa4:	2244      	movs	r2, #68	; 0x44
   19aa6:	2100      	movs	r1, #0
   19aa8:	5499      	strb	r1, [r3, r2]
   19aaa:	6a3b      	ldr	r3, [r7, #32]
   19aac:	2245      	movs	r2, #69	; 0x45
   19aae:	5c9b      	ldrb	r3, [r3, r2]
   19ab0:	b25b      	sxtb	r3, r3
   19ab2:	3301      	adds	r3, #1
   19ab4:	d103      	bne.n	19abe <xQueueReceive+0x22a>
   19ab6:	6a3b      	ldr	r3, [r7, #32]
   19ab8:	2245      	movs	r2, #69	; 0x45
   19aba:	2100      	movs	r1, #0
   19abc:	5499      	strb	r1, [r3, r2]
   19abe:	4b52      	ldr	r3, [pc, #328]	; (19c08 <xQueueReceive+0x374>)
   19ac0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   19ac2:	1d3a      	adds	r2, r7, #4
   19ac4:	2314      	movs	r3, #20
   19ac6:	18fb      	adds	r3, r7, r3
   19ac8:	0011      	movs	r1, r2
   19aca:	0018      	movs	r0, r3
   19acc:	4b51      	ldr	r3, [pc, #324]	; (19c14 <xQueueReceive+0x380>)
   19ace:	4798      	blx	r3
   19ad0:	1e03      	subs	r3, r0, #0
   19ad2:	d000      	beq.n	19ad6 <xQueueReceive+0x242>
   19ad4:	e0aa      	b.n	19c2c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   19ad6:	6a3b      	ldr	r3, [r7, #32]
   19ad8:	0018      	movs	r0, r3
   19ada:	4b4f      	ldr	r3, [pc, #316]	; (19c18 <xQueueReceive+0x384>)
   19adc:	4798      	blx	r3
   19ade:	1e03      	subs	r3, r0, #0
   19ae0:	d06d      	beq.n	19bbe <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   19ae2:	4b3d      	ldr	r3, [pc, #244]	; (19bd8 <xQueueReceive+0x344>)
   19ae4:	4798      	blx	r3
   19ae6:	0003      	movs	r3, r0
   19ae8:	0018      	movs	r0, r3
   19aea:	4b3c      	ldr	r3, [pc, #240]	; (19bdc <xQueueReceive+0x348>)
   19aec:	4798      	blx	r3
   19aee:	0003      	movs	r3, r0
   19af0:	001a      	movs	r2, r3
   19af2:	4b3b      	ldr	r3, [pc, #236]	; (19be0 <xQueueReceive+0x34c>)
   19af4:	881b      	ldrh	r3, [r3, #0]
   19af6:	4013      	ands	r3, r2
   19af8:	b29b      	uxth	r3, r3
   19afa:	2b00      	cmp	r3, #0
   19afc:	d029      	beq.n	19b52 <xQueueReceive+0x2be>
   19afe:	6a3b      	ldr	r3, [r7, #32]
   19b00:	0018      	movs	r0, r3
   19b02:	4b38      	ldr	r3, [pc, #224]	; (19be4 <xQueueReceive+0x350>)
   19b04:	4798      	blx	r3
   19b06:	0003      	movs	r3, r0
   19b08:	001a      	movs	r2, r3
   19b0a:	4b35      	ldr	r3, [pc, #212]	; (19be0 <xQueueReceive+0x34c>)
   19b0c:	881b      	ldrh	r3, [r3, #0]
   19b0e:	4013      	ands	r3, r2
   19b10:	b29b      	uxth	r3, r3
   19b12:	2b00      	cmp	r3, #0
   19b14:	d01d      	beq.n	19b52 <xQueueReceive+0x2be>
   19b16:	6a3b      	ldr	r3, [r7, #32]
   19b18:	0018      	movs	r0, r3
   19b1a:	4b33      	ldr	r3, [pc, #204]	; (19be8 <xQueueReceive+0x354>)
   19b1c:	4798      	blx	r3
   19b1e:	0003      	movs	r3, r0
   19b20:	001a      	movs	r2, r3
   19b22:	4b32      	ldr	r3, [pc, #200]	; (19bec <xQueueReceive+0x358>)
   19b24:	5c9b      	ldrb	r3, [r3, r2]
   19b26:	3368      	adds	r3, #104	; 0x68
   19b28:	b2db      	uxtb	r3, r3
   19b2a:	001d      	movs	r5, r3
   19b2c:	6a3b      	ldr	r3, [r7, #32]
   19b2e:	0018      	movs	r0, r3
   19b30:	4b2d      	ldr	r3, [pc, #180]	; (19be8 <xQueueReceive+0x354>)
   19b32:	4798      	blx	r3
   19b34:	0003      	movs	r3, r0
   19b36:	001a      	movs	r2, r3
   19b38:	4b2c      	ldr	r3, [pc, #176]	; (19bec <xQueueReceive+0x358>)
   19b3a:	5c9c      	ldrb	r4, [r3, r2]
   19b3c:	6a3b      	ldr	r3, [r7, #32]
   19b3e:	0018      	movs	r0, r3
   19b40:	4b2b      	ldr	r3, [pc, #172]	; (19bf0 <xQueueReceive+0x35c>)
   19b42:	4798      	blx	r3
   19b44:	0003      	movs	r3, r0
   19b46:	b2db      	uxtb	r3, r3
   19b48:	001a      	movs	r2, r3
   19b4a:	0021      	movs	r1, r4
   19b4c:	0028      	movs	r0, r5
   19b4e:	4b29      	ldr	r3, [pc, #164]	; (19bf4 <xQueueReceive+0x360>)
   19b50:	4798      	blx	r3
   19b52:	6a3b      	ldr	r3, [r7, #32]
   19b54:	0018      	movs	r0, r3
   19b56:	4b24      	ldr	r3, [pc, #144]	; (19be8 <xQueueReceive+0x354>)
   19b58:	4798      	blx	r3
   19b5a:	0003      	movs	r3, r0
   19b5c:	001a      	movs	r2, r3
   19b5e:	4b23      	ldr	r3, [pc, #140]	; (19bec <xQueueReceive+0x358>)
   19b60:	5c9b      	ldrb	r3, [r3, r2]
   19b62:	2b02      	cmp	r3, #2
   19b64:	d018      	beq.n	19b98 <xQueueReceive+0x304>
   19b66:	4b1c      	ldr	r3, [pc, #112]	; (19bd8 <xQueueReceive+0x344>)
   19b68:	4798      	blx	r3
   19b6a:	0003      	movs	r3, r0
   19b6c:	0018      	movs	r0, r3
   19b6e:	4b1b      	ldr	r3, [pc, #108]	; (19bdc <xQueueReceive+0x348>)
   19b70:	4798      	blx	r3
   19b72:	0003      	movs	r3, r0
   19b74:	001a      	movs	r2, r3
   19b76:	4b1a      	ldr	r3, [pc, #104]	; (19be0 <xQueueReceive+0x34c>)
   19b78:	881b      	ldrh	r3, [r3, #0]
   19b7a:	4013      	ands	r3, r2
   19b7c:	b29b      	uxth	r3, r3
   19b7e:	2b00      	cmp	r3, #0
   19b80:	d00a      	beq.n	19b98 <xQueueReceive+0x304>
   19b82:	4b15      	ldr	r3, [pc, #84]	; (19bd8 <xQueueReceive+0x344>)
   19b84:	4798      	blx	r3
   19b86:	0003      	movs	r3, r0
   19b88:	0018      	movs	r0, r3
   19b8a:	4b1b      	ldr	r3, [pc, #108]	; (19bf8 <xQueueReceive+0x364>)
   19b8c:	4798      	blx	r3
   19b8e:	0003      	movs	r3, r0
   19b90:	b2db      	uxtb	r3, r3
   19b92:	0018      	movs	r0, r3
   19b94:	4b21      	ldr	r3, [pc, #132]	; (19c1c <xQueueReceive+0x388>)
   19b96:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   19b98:	6a3b      	ldr	r3, [r7, #32]
   19b9a:	3324      	adds	r3, #36	; 0x24
   19b9c:	687a      	ldr	r2, [r7, #4]
   19b9e:	0011      	movs	r1, r2
   19ba0:	0018      	movs	r0, r3
   19ba2:	4b1f      	ldr	r3, [pc, #124]	; (19c20 <xQueueReceive+0x38c>)
   19ba4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   19ba6:	6a3b      	ldr	r3, [r7, #32]
   19ba8:	0018      	movs	r0, r3
   19baa:	4b1e      	ldr	r3, [pc, #120]	; (19c24 <xQueueReceive+0x390>)
   19bac:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   19bae:	4b1e      	ldr	r3, [pc, #120]	; (19c28 <xQueueReceive+0x394>)
   19bb0:	4798      	blx	r3
   19bb2:	1e03      	subs	r3, r0, #0
   19bb4:	d000      	beq.n	19bb8 <xQueueReceive+0x324>
   19bb6:	e698      	b.n	198ea <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   19bb8:	4b12      	ldr	r3, [pc, #72]	; (19c04 <xQueueReceive+0x370>)
   19bba:	4798      	blx	r3
   19bbc:	e695      	b.n	198ea <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   19bbe:	6a3b      	ldr	r3, [r7, #32]
   19bc0:	0018      	movs	r0, r3
   19bc2:	4b18      	ldr	r3, [pc, #96]	; (19c24 <xQueueReceive+0x390>)
   19bc4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   19bc6:	4b18      	ldr	r3, [pc, #96]	; (19c28 <xQueueReceive+0x394>)
   19bc8:	4798      	blx	r3
   19bca:	e68e      	b.n	198ea <xQueueReceive+0x56>
   19bcc:	0001b769 	.word	0x0001b769
   19bd0:	00018a49 	.word	0x00018a49
   19bd4:	0001a2f5 	.word	0x0001a2f5
   19bd8:	00016cdd 	.word	0x00016cdd
   19bdc:	00016a41 	.word	0x00016a41
   19be0:	20000110 	.word	0x20000110
   19be4:	00016b01 	.word	0x00016b01
   19be8:	00016a01 	.word	0x00016a01
   19bec:	20000104 	.word	0x20000104
   19bf0:	00016ae1 	.word	0x00016ae1
   19bf4:	00017439 	.word	0x00017439
   19bf8:	00016a21 	.word	0x00016a21
   19bfc:	00017a95 	.word	0x00017a95
   19c00:	0001b2d9 	.word	0x0001b2d9
   19c04:	00018a31 	.word	0x00018a31
   19c08:	00018a6d 	.word	0x00018a6d
   19c0c:	0001b419 	.word	0x0001b419
   19c10:	0001ad01 	.word	0x0001ad01
   19c14:	0001b441 	.word	0x0001b441
   19c18:	0001a435 	.word	0x0001a435
   19c1c:	00017bd1 	.word	0x00017bd1
   19c20:	0001b1b5 	.word	0x0001b1b5
   19c24:	0001a345 	.word	0x0001a345
   19c28:	0001ad19 	.word	0x0001ad19
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   19c2c:	6a3b      	ldr	r3, [r7, #32]
   19c2e:	0018      	movs	r0, r3
   19c30:	4b23      	ldr	r3, [pc, #140]	; (19cc0 <xQueueReceive+0x42c>)
   19c32:	4798      	blx	r3
			( void ) xTaskResumeAll();
   19c34:	4b23      	ldr	r3, [pc, #140]	; (19cc4 <xQueueReceive+0x430>)
   19c36:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   19c38:	6a3b      	ldr	r3, [r7, #32]
   19c3a:	0018      	movs	r0, r3
   19c3c:	4b22      	ldr	r3, [pc, #136]	; (19cc8 <xQueueReceive+0x434>)
   19c3e:	4798      	blx	r3
   19c40:	1e03      	subs	r3, r0, #0
   19c42:	d100      	bne.n	19c46 <xQueueReceive+0x3b2>
   19c44:	e651      	b.n	198ea <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   19c46:	4b21      	ldr	r3, [pc, #132]	; (19ccc <xQueueReceive+0x438>)
   19c48:	4798      	blx	r3
   19c4a:	0003      	movs	r3, r0
   19c4c:	0018      	movs	r0, r3
   19c4e:	4b20      	ldr	r3, [pc, #128]	; (19cd0 <xQueueReceive+0x43c>)
   19c50:	4798      	blx	r3
   19c52:	0003      	movs	r3, r0
   19c54:	001a      	movs	r2, r3
   19c56:	4b1f      	ldr	r3, [pc, #124]	; (19cd4 <xQueueReceive+0x440>)
   19c58:	881b      	ldrh	r3, [r3, #0]
   19c5a:	4013      	ands	r3, r2
   19c5c:	b29b      	uxth	r3, r3
   19c5e:	2b00      	cmp	r3, #0
   19c60:	d029      	beq.n	19cb6 <xQueueReceive+0x422>
   19c62:	6a3b      	ldr	r3, [r7, #32]
   19c64:	0018      	movs	r0, r3
   19c66:	4b1c      	ldr	r3, [pc, #112]	; (19cd8 <xQueueReceive+0x444>)
   19c68:	4798      	blx	r3
   19c6a:	0003      	movs	r3, r0
   19c6c:	001a      	movs	r2, r3
   19c6e:	4b19      	ldr	r3, [pc, #100]	; (19cd4 <xQueueReceive+0x440>)
   19c70:	881b      	ldrh	r3, [r3, #0]
   19c72:	4013      	ands	r3, r2
   19c74:	b29b      	uxth	r3, r3
   19c76:	2b00      	cmp	r3, #0
   19c78:	d01d      	beq.n	19cb6 <xQueueReceive+0x422>
   19c7a:	6a3b      	ldr	r3, [r7, #32]
   19c7c:	0018      	movs	r0, r3
   19c7e:	4b17      	ldr	r3, [pc, #92]	; (19cdc <xQueueReceive+0x448>)
   19c80:	4798      	blx	r3
   19c82:	0003      	movs	r3, r0
   19c84:	001a      	movs	r2, r3
   19c86:	4b16      	ldr	r3, [pc, #88]	; (19ce0 <xQueueReceive+0x44c>)
   19c88:	5c9b      	ldrb	r3, [r3, r2]
   19c8a:	3350      	adds	r3, #80	; 0x50
   19c8c:	b2db      	uxtb	r3, r3
   19c8e:	001d      	movs	r5, r3
   19c90:	6a3b      	ldr	r3, [r7, #32]
   19c92:	0018      	movs	r0, r3
   19c94:	4b11      	ldr	r3, [pc, #68]	; (19cdc <xQueueReceive+0x448>)
   19c96:	4798      	blx	r3
   19c98:	0003      	movs	r3, r0
   19c9a:	001a      	movs	r2, r3
   19c9c:	4b10      	ldr	r3, [pc, #64]	; (19ce0 <xQueueReceive+0x44c>)
   19c9e:	5c9c      	ldrb	r4, [r3, r2]
   19ca0:	6a3b      	ldr	r3, [r7, #32]
   19ca2:	0018      	movs	r0, r3
   19ca4:	4b0f      	ldr	r3, [pc, #60]	; (19ce4 <xQueueReceive+0x450>)
   19ca6:	4798      	blx	r3
   19ca8:	0003      	movs	r3, r0
   19caa:	b2db      	uxtb	r3, r3
   19cac:	001a      	movs	r2, r3
   19cae:	0021      	movs	r1, r4
   19cb0:	0028      	movs	r0, r5
   19cb2:	4b0d      	ldr	r3, [pc, #52]	; (19ce8 <xQueueReceive+0x454>)
   19cb4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   19cb6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   19cb8:	0018      	movs	r0, r3
   19cba:	46bd      	mov	sp, r7
   19cbc:	b00a      	add	sp, #40	; 0x28
   19cbe:	bdb0      	pop	{r4, r5, r7, pc}
   19cc0:	0001a345 	.word	0x0001a345
   19cc4:	0001ad19 	.word	0x0001ad19
   19cc8:	0001a435 	.word	0x0001a435
   19ccc:	00016cdd 	.word	0x00016cdd
   19cd0:	00016a41 	.word	0x00016a41
   19cd4:	20000110 	.word	0x20000110
   19cd8:	00016b01 	.word	0x00016b01
   19cdc:	00016a01 	.word	0x00016a01
   19ce0:	20000104 	.word	0x20000104
   19ce4:	00016ae1 	.word	0x00016ae1
   19ce8:	00017439 	.word	0x00017439

00019cec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   19cec:	b5b0      	push	{r4, r5, r7, lr}
   19cee:	b08a      	sub	sp, #40	; 0x28
   19cf0:	af00      	add	r7, sp, #0
   19cf2:	6078      	str	r0, [r7, #4]
   19cf4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   19cf6:	2300      	movs	r3, #0
   19cf8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   19cfa:	687b      	ldr	r3, [r7, #4]
   19cfc:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   19cfe:	2300      	movs	r3, #0
   19d00:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   19d02:	69fb      	ldr	r3, [r7, #28]
   19d04:	2b00      	cmp	r3, #0
   19d06:	d101      	bne.n	19d0c <xQueueSemaphoreTake+0x20>
   19d08:	b672      	cpsid	i
   19d0a:	e7fe      	b.n	19d0a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   19d0c:	69fb      	ldr	r3, [r7, #28]
   19d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   19d10:	2b00      	cmp	r3, #0
   19d12:	d001      	beq.n	19d18 <xQueueSemaphoreTake+0x2c>
   19d14:	b672      	cpsid	i
   19d16:	e7fe      	b.n	19d16 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   19d18:	4bcb      	ldr	r3, [pc, #812]	; (1a048 <xQueueSemaphoreTake+0x35c>)
   19d1a:	4798      	blx	r3
   19d1c:	1e03      	subs	r3, r0, #0
   19d1e:	d102      	bne.n	19d26 <xQueueSemaphoreTake+0x3a>
   19d20:	683b      	ldr	r3, [r7, #0]
   19d22:	2b00      	cmp	r3, #0
   19d24:	d101      	bne.n	19d2a <xQueueSemaphoreTake+0x3e>
   19d26:	2301      	movs	r3, #1
   19d28:	e000      	b.n	19d2c <xQueueSemaphoreTake+0x40>
   19d2a:	2300      	movs	r3, #0
   19d2c:	2b00      	cmp	r3, #0
   19d2e:	d101      	bne.n	19d34 <xQueueSemaphoreTake+0x48>
   19d30:	b672      	cpsid	i
   19d32:	e7fe      	b.n	19d32 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   19d34:	4bc5      	ldr	r3, [pc, #788]	; (1a04c <xQueueSemaphoreTake+0x360>)
   19d36:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   19d38:	69fb      	ldr	r3, [r7, #28]
   19d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19d3c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   19d3e:	69bb      	ldr	r3, [r7, #24]
   19d40:	2b00      	cmp	r3, #0
   19d42:	d100      	bne.n	19d46 <xQueueSemaphoreTake+0x5a>
   19d44:	e080      	b.n	19e48 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   19d46:	4bc2      	ldr	r3, [pc, #776]	; (1a050 <xQueueSemaphoreTake+0x364>)
   19d48:	4798      	blx	r3
   19d4a:	0003      	movs	r3, r0
   19d4c:	0018      	movs	r0, r3
   19d4e:	4bc1      	ldr	r3, [pc, #772]	; (1a054 <xQueueSemaphoreTake+0x368>)
   19d50:	4798      	blx	r3
   19d52:	0003      	movs	r3, r0
   19d54:	001a      	movs	r2, r3
   19d56:	4bc0      	ldr	r3, [pc, #768]	; (1a058 <xQueueSemaphoreTake+0x36c>)
   19d58:	881b      	ldrh	r3, [r3, #0]
   19d5a:	4013      	ands	r3, r2
   19d5c:	b29b      	uxth	r3, r3
   19d5e:	2b00      	cmp	r3, #0
   19d60:	d029      	beq.n	19db6 <xQueueSemaphoreTake+0xca>
   19d62:	69fb      	ldr	r3, [r7, #28]
   19d64:	0018      	movs	r0, r3
   19d66:	4bbd      	ldr	r3, [pc, #756]	; (1a05c <xQueueSemaphoreTake+0x370>)
   19d68:	4798      	blx	r3
   19d6a:	0003      	movs	r3, r0
   19d6c:	001a      	movs	r2, r3
   19d6e:	4bba      	ldr	r3, [pc, #744]	; (1a058 <xQueueSemaphoreTake+0x36c>)
   19d70:	881b      	ldrh	r3, [r3, #0]
   19d72:	4013      	ands	r3, r2
   19d74:	b29b      	uxth	r3, r3
   19d76:	2b00      	cmp	r3, #0
   19d78:	d01d      	beq.n	19db6 <xQueueSemaphoreTake+0xca>
   19d7a:	69fb      	ldr	r3, [r7, #28]
   19d7c:	0018      	movs	r0, r3
   19d7e:	4bb8      	ldr	r3, [pc, #736]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19d80:	4798      	blx	r3
   19d82:	0003      	movs	r3, r0
   19d84:	001a      	movs	r2, r3
   19d86:	4bb7      	ldr	r3, [pc, #732]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19d88:	5c9b      	ldrb	r3, [r3, r2]
   19d8a:	3328      	adds	r3, #40	; 0x28
   19d8c:	b2db      	uxtb	r3, r3
   19d8e:	001d      	movs	r5, r3
   19d90:	69fb      	ldr	r3, [r7, #28]
   19d92:	0018      	movs	r0, r3
   19d94:	4bb2      	ldr	r3, [pc, #712]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19d96:	4798      	blx	r3
   19d98:	0003      	movs	r3, r0
   19d9a:	001a      	movs	r2, r3
   19d9c:	4bb1      	ldr	r3, [pc, #708]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19d9e:	5c9c      	ldrb	r4, [r3, r2]
   19da0:	69fb      	ldr	r3, [r7, #28]
   19da2:	0018      	movs	r0, r3
   19da4:	4bb0      	ldr	r3, [pc, #704]	; (1a068 <xQueueSemaphoreTake+0x37c>)
   19da6:	4798      	blx	r3
   19da8:	0003      	movs	r3, r0
   19daa:	b2db      	uxtb	r3, r3
   19dac:	001a      	movs	r2, r3
   19dae:	0021      	movs	r1, r4
   19db0:	0028      	movs	r0, r5
   19db2:	4bae      	ldr	r3, [pc, #696]	; (1a06c <xQueueSemaphoreTake+0x380>)
   19db4:	4798      	blx	r3
   19db6:	69fb      	ldr	r3, [r7, #28]
   19db8:	0018      	movs	r0, r3
   19dba:	4ba9      	ldr	r3, [pc, #676]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19dbc:	4798      	blx	r3
   19dbe:	0003      	movs	r3, r0
   19dc0:	001a      	movs	r2, r3
   19dc2:	4ba8      	ldr	r3, [pc, #672]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19dc4:	5c9c      	ldrb	r4, [r3, r2]
   19dc6:	69fb      	ldr	r3, [r7, #28]
   19dc8:	0018      	movs	r0, r3
   19dca:	4ba7      	ldr	r3, [pc, #668]	; (1a068 <xQueueSemaphoreTake+0x37c>)
   19dcc:	4798      	blx	r3
   19dce:	0003      	movs	r3, r0
   19dd0:	b2dd      	uxtb	r5, r3
   19dd2:	69fb      	ldr	r3, [r7, #28]
   19dd4:	0018      	movs	r0, r3
   19dd6:	4ba2      	ldr	r3, [pc, #648]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19dd8:	4798      	blx	r3
   19dda:	0003      	movs	r3, r0
   19ddc:	001a      	movs	r2, r3
   19dde:	4ba1      	ldr	r3, [pc, #644]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19de0:	5c9b      	ldrb	r3, [r3, r2]
   19de2:	2b02      	cmp	r3, #2
   19de4:	d108      	bne.n	19df8 <xQueueSemaphoreTake+0x10c>
   19de6:	4b9a      	ldr	r3, [pc, #616]	; (1a050 <xQueueSemaphoreTake+0x364>)
   19de8:	4798      	blx	r3
   19dea:	0003      	movs	r3, r0
   19dec:	0018      	movs	r0, r3
   19dee:	4ba0      	ldr	r3, [pc, #640]	; (1a070 <xQueueSemaphoreTake+0x384>)
   19df0:	4798      	blx	r3
   19df2:	0003      	movs	r3, r0
   19df4:	b2db      	uxtb	r3, r3
   19df6:	e004      	b.n	19e02 <xQueueSemaphoreTake+0x116>
   19df8:	69fb      	ldr	r3, [r7, #28]
   19dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   19dfc:	b2db      	uxtb	r3, r3
   19dfe:	3b01      	subs	r3, #1
   19e00:	b2db      	uxtb	r3, r3
   19e02:	001a      	movs	r2, r3
   19e04:	0029      	movs	r1, r5
   19e06:	0020      	movs	r0, r4
   19e08:	4b9a      	ldr	r3, [pc, #616]	; (1a074 <xQueueSemaphoreTake+0x388>)
   19e0a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   19e0c:	69bb      	ldr	r3, [r7, #24]
   19e0e:	1e5a      	subs	r2, r3, #1
   19e10:	69fb      	ldr	r3, [r7, #28]
   19e12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   19e14:	69fb      	ldr	r3, [r7, #28]
   19e16:	681b      	ldr	r3, [r3, #0]
   19e18:	2b00      	cmp	r3, #0
   19e1a:	d104      	bne.n	19e26 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   19e1c:	4b96      	ldr	r3, [pc, #600]	; (1a078 <xQueueSemaphoreTake+0x38c>)
   19e1e:	4798      	blx	r3
   19e20:	0002      	movs	r2, r0
   19e22:	69fb      	ldr	r3, [r7, #28]
   19e24:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   19e26:	69fb      	ldr	r3, [r7, #28]
   19e28:	691b      	ldr	r3, [r3, #16]
   19e2a:	2b00      	cmp	r3, #0
   19e2c:	d008      	beq.n	19e40 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   19e2e:	69fb      	ldr	r3, [r7, #28]
   19e30:	3310      	adds	r3, #16
   19e32:	0018      	movs	r0, r3
   19e34:	4b91      	ldr	r3, [pc, #580]	; (1a07c <xQueueSemaphoreTake+0x390>)
   19e36:	4798      	blx	r3
   19e38:	1e03      	subs	r3, r0, #0
   19e3a:	d001      	beq.n	19e40 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   19e3c:	4b90      	ldr	r3, [pc, #576]	; (1a080 <xQueueSemaphoreTake+0x394>)
   19e3e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   19e40:	4b90      	ldr	r3, [pc, #576]	; (1a084 <xQueueSemaphoreTake+0x398>)
   19e42:	4798      	blx	r3
				return pdPASS;
   19e44:	2301      	movs	r3, #1
   19e46:	e18b      	b.n	1a160 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   19e48:	683b      	ldr	r3, [r7, #0]
   19e4a:	2b00      	cmp	r3, #0
   19e4c:	d140      	bne.n	19ed0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   19e4e:	6a3b      	ldr	r3, [r7, #32]
   19e50:	2b00      	cmp	r3, #0
   19e52:	d001      	beq.n	19e58 <xQueueSemaphoreTake+0x16c>
   19e54:	b672      	cpsid	i
   19e56:	e7fe      	b.n	19e56 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   19e58:	4b8a      	ldr	r3, [pc, #552]	; (1a084 <xQueueSemaphoreTake+0x398>)
   19e5a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   19e5c:	4b7c      	ldr	r3, [pc, #496]	; (1a050 <xQueueSemaphoreTake+0x364>)
   19e5e:	4798      	blx	r3
   19e60:	0003      	movs	r3, r0
   19e62:	0018      	movs	r0, r3
   19e64:	4b7b      	ldr	r3, [pc, #492]	; (1a054 <xQueueSemaphoreTake+0x368>)
   19e66:	4798      	blx	r3
   19e68:	0003      	movs	r3, r0
   19e6a:	001a      	movs	r2, r3
   19e6c:	4b7a      	ldr	r3, [pc, #488]	; (1a058 <xQueueSemaphoreTake+0x36c>)
   19e6e:	881b      	ldrh	r3, [r3, #0]
   19e70:	4013      	ands	r3, r2
   19e72:	b29b      	uxth	r3, r3
   19e74:	2b00      	cmp	r3, #0
   19e76:	d029      	beq.n	19ecc <xQueueSemaphoreTake+0x1e0>
   19e78:	69fb      	ldr	r3, [r7, #28]
   19e7a:	0018      	movs	r0, r3
   19e7c:	4b77      	ldr	r3, [pc, #476]	; (1a05c <xQueueSemaphoreTake+0x370>)
   19e7e:	4798      	blx	r3
   19e80:	0003      	movs	r3, r0
   19e82:	001a      	movs	r2, r3
   19e84:	4b74      	ldr	r3, [pc, #464]	; (1a058 <xQueueSemaphoreTake+0x36c>)
   19e86:	881b      	ldrh	r3, [r3, #0]
   19e88:	4013      	ands	r3, r2
   19e8a:	b29b      	uxth	r3, r3
   19e8c:	2b00      	cmp	r3, #0
   19e8e:	d01d      	beq.n	19ecc <xQueueSemaphoreTake+0x1e0>
   19e90:	69fb      	ldr	r3, [r7, #28]
   19e92:	0018      	movs	r0, r3
   19e94:	4b72      	ldr	r3, [pc, #456]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19e96:	4798      	blx	r3
   19e98:	0003      	movs	r3, r0
   19e9a:	001a      	movs	r2, r3
   19e9c:	4b71      	ldr	r3, [pc, #452]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19e9e:	5c9b      	ldrb	r3, [r3, r2]
   19ea0:	3350      	adds	r3, #80	; 0x50
   19ea2:	b2db      	uxtb	r3, r3
   19ea4:	001d      	movs	r5, r3
   19ea6:	69fb      	ldr	r3, [r7, #28]
   19ea8:	0018      	movs	r0, r3
   19eaa:	4b6d      	ldr	r3, [pc, #436]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19eac:	4798      	blx	r3
   19eae:	0003      	movs	r3, r0
   19eb0:	001a      	movs	r2, r3
   19eb2:	4b6c      	ldr	r3, [pc, #432]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19eb4:	5c9c      	ldrb	r4, [r3, r2]
   19eb6:	69fb      	ldr	r3, [r7, #28]
   19eb8:	0018      	movs	r0, r3
   19eba:	4b6b      	ldr	r3, [pc, #428]	; (1a068 <xQueueSemaphoreTake+0x37c>)
   19ebc:	4798      	blx	r3
   19ebe:	0003      	movs	r3, r0
   19ec0:	b2db      	uxtb	r3, r3
   19ec2:	001a      	movs	r2, r3
   19ec4:	0021      	movs	r1, r4
   19ec6:	0028      	movs	r0, r5
   19ec8:	4b68      	ldr	r3, [pc, #416]	; (1a06c <xQueueSemaphoreTake+0x380>)
   19eca:	4798      	blx	r3
					return errQUEUE_EMPTY;
   19ecc:	2300      	movs	r3, #0
   19ece:	e147      	b.n	1a160 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   19ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19ed2:	2b00      	cmp	r3, #0
   19ed4:	d106      	bne.n	19ee4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   19ed6:	230c      	movs	r3, #12
   19ed8:	18fb      	adds	r3, r7, r3
   19eda:	0018      	movs	r0, r3
   19edc:	4b6a      	ldr	r3, [pc, #424]	; (1a088 <xQueueSemaphoreTake+0x39c>)
   19ede:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   19ee0:	2301      	movs	r3, #1
   19ee2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   19ee4:	4b67      	ldr	r3, [pc, #412]	; (1a084 <xQueueSemaphoreTake+0x398>)
   19ee6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   19ee8:	4b68      	ldr	r3, [pc, #416]	; (1a08c <xQueueSemaphoreTake+0x3a0>)
   19eea:	4798      	blx	r3
		prvLockQueue( pxQueue );
   19eec:	4b57      	ldr	r3, [pc, #348]	; (1a04c <xQueueSemaphoreTake+0x360>)
   19eee:	4798      	blx	r3
   19ef0:	69fb      	ldr	r3, [r7, #28]
   19ef2:	2244      	movs	r2, #68	; 0x44
   19ef4:	5c9b      	ldrb	r3, [r3, r2]
   19ef6:	b25b      	sxtb	r3, r3
   19ef8:	3301      	adds	r3, #1
   19efa:	d103      	bne.n	19f04 <xQueueSemaphoreTake+0x218>
   19efc:	69fb      	ldr	r3, [r7, #28]
   19efe:	2244      	movs	r2, #68	; 0x44
   19f00:	2100      	movs	r1, #0
   19f02:	5499      	strb	r1, [r3, r2]
   19f04:	69fb      	ldr	r3, [r7, #28]
   19f06:	2245      	movs	r2, #69	; 0x45
   19f08:	5c9b      	ldrb	r3, [r3, r2]
   19f0a:	b25b      	sxtb	r3, r3
   19f0c:	3301      	adds	r3, #1
   19f0e:	d103      	bne.n	19f18 <xQueueSemaphoreTake+0x22c>
   19f10:	69fb      	ldr	r3, [r7, #28]
   19f12:	2245      	movs	r2, #69	; 0x45
   19f14:	2100      	movs	r1, #0
   19f16:	5499      	strb	r1, [r3, r2]
   19f18:	4b5a      	ldr	r3, [pc, #360]	; (1a084 <xQueueSemaphoreTake+0x398>)
   19f1a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   19f1c:	003a      	movs	r2, r7
   19f1e:	230c      	movs	r3, #12
   19f20:	18fb      	adds	r3, r7, r3
   19f22:	0011      	movs	r1, r2
   19f24:	0018      	movs	r0, r3
   19f26:	4b5a      	ldr	r3, [pc, #360]	; (1a090 <xQueueSemaphoreTake+0x3a4>)
   19f28:	4798      	blx	r3
   19f2a:	1e03      	subs	r3, r0, #0
   19f2c:	d000      	beq.n	19f30 <xQueueSemaphoreTake+0x244>
   19f2e:	e0bd      	b.n	1a0ac <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   19f30:	69fb      	ldr	r3, [r7, #28]
   19f32:	0018      	movs	r0, r3
   19f34:	4b57      	ldr	r3, [pc, #348]	; (1a094 <xQueueSemaphoreTake+0x3a8>)
   19f36:	4798      	blx	r3
   19f38:	1e03      	subs	r3, r0, #0
   19f3a:	d100      	bne.n	19f3e <xQueueSemaphoreTake+0x252>
   19f3c:	e07c      	b.n	1a038 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   19f3e:	4b44      	ldr	r3, [pc, #272]	; (1a050 <xQueueSemaphoreTake+0x364>)
   19f40:	4798      	blx	r3
   19f42:	0003      	movs	r3, r0
   19f44:	0018      	movs	r0, r3
   19f46:	4b43      	ldr	r3, [pc, #268]	; (1a054 <xQueueSemaphoreTake+0x368>)
   19f48:	4798      	blx	r3
   19f4a:	0003      	movs	r3, r0
   19f4c:	001a      	movs	r2, r3
   19f4e:	4b42      	ldr	r3, [pc, #264]	; (1a058 <xQueueSemaphoreTake+0x36c>)
   19f50:	881b      	ldrh	r3, [r3, #0]
   19f52:	4013      	ands	r3, r2
   19f54:	b29b      	uxth	r3, r3
   19f56:	2b00      	cmp	r3, #0
   19f58:	d029      	beq.n	19fae <xQueueSemaphoreTake+0x2c2>
   19f5a:	69fb      	ldr	r3, [r7, #28]
   19f5c:	0018      	movs	r0, r3
   19f5e:	4b3f      	ldr	r3, [pc, #252]	; (1a05c <xQueueSemaphoreTake+0x370>)
   19f60:	4798      	blx	r3
   19f62:	0003      	movs	r3, r0
   19f64:	001a      	movs	r2, r3
   19f66:	4b3c      	ldr	r3, [pc, #240]	; (1a058 <xQueueSemaphoreTake+0x36c>)
   19f68:	881b      	ldrh	r3, [r3, #0]
   19f6a:	4013      	ands	r3, r2
   19f6c:	b29b      	uxth	r3, r3
   19f6e:	2b00      	cmp	r3, #0
   19f70:	d01d      	beq.n	19fae <xQueueSemaphoreTake+0x2c2>
   19f72:	69fb      	ldr	r3, [r7, #28]
   19f74:	0018      	movs	r0, r3
   19f76:	4b3a      	ldr	r3, [pc, #232]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19f78:	4798      	blx	r3
   19f7a:	0003      	movs	r3, r0
   19f7c:	001a      	movs	r2, r3
   19f7e:	4b39      	ldr	r3, [pc, #228]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19f80:	5c9b      	ldrb	r3, [r3, r2]
   19f82:	3368      	adds	r3, #104	; 0x68
   19f84:	b2db      	uxtb	r3, r3
   19f86:	001d      	movs	r5, r3
   19f88:	69fb      	ldr	r3, [r7, #28]
   19f8a:	0018      	movs	r0, r3
   19f8c:	4b34      	ldr	r3, [pc, #208]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19f8e:	4798      	blx	r3
   19f90:	0003      	movs	r3, r0
   19f92:	001a      	movs	r2, r3
   19f94:	4b33      	ldr	r3, [pc, #204]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19f96:	5c9c      	ldrb	r4, [r3, r2]
   19f98:	69fb      	ldr	r3, [r7, #28]
   19f9a:	0018      	movs	r0, r3
   19f9c:	4b32      	ldr	r3, [pc, #200]	; (1a068 <xQueueSemaphoreTake+0x37c>)
   19f9e:	4798      	blx	r3
   19fa0:	0003      	movs	r3, r0
   19fa2:	b2db      	uxtb	r3, r3
   19fa4:	001a      	movs	r2, r3
   19fa6:	0021      	movs	r1, r4
   19fa8:	0028      	movs	r0, r5
   19faa:	4b30      	ldr	r3, [pc, #192]	; (1a06c <xQueueSemaphoreTake+0x380>)
   19fac:	4798      	blx	r3
   19fae:	69fb      	ldr	r3, [r7, #28]
   19fb0:	0018      	movs	r0, r3
   19fb2:	4b2b      	ldr	r3, [pc, #172]	; (1a060 <xQueueSemaphoreTake+0x374>)
   19fb4:	4798      	blx	r3
   19fb6:	0003      	movs	r3, r0
   19fb8:	001a      	movs	r2, r3
   19fba:	4b2a      	ldr	r3, [pc, #168]	; (1a064 <xQueueSemaphoreTake+0x378>)
   19fbc:	5c9b      	ldrb	r3, [r3, r2]
   19fbe:	2b02      	cmp	r3, #2
   19fc0:	d018      	beq.n	19ff4 <xQueueSemaphoreTake+0x308>
   19fc2:	4b23      	ldr	r3, [pc, #140]	; (1a050 <xQueueSemaphoreTake+0x364>)
   19fc4:	4798      	blx	r3
   19fc6:	0003      	movs	r3, r0
   19fc8:	0018      	movs	r0, r3
   19fca:	4b22      	ldr	r3, [pc, #136]	; (1a054 <xQueueSemaphoreTake+0x368>)
   19fcc:	4798      	blx	r3
   19fce:	0003      	movs	r3, r0
   19fd0:	001a      	movs	r2, r3
   19fd2:	4b21      	ldr	r3, [pc, #132]	; (1a058 <xQueueSemaphoreTake+0x36c>)
   19fd4:	881b      	ldrh	r3, [r3, #0]
   19fd6:	4013      	ands	r3, r2
   19fd8:	b29b      	uxth	r3, r3
   19fda:	2b00      	cmp	r3, #0
   19fdc:	d00a      	beq.n	19ff4 <xQueueSemaphoreTake+0x308>
   19fde:	4b1c      	ldr	r3, [pc, #112]	; (1a050 <xQueueSemaphoreTake+0x364>)
   19fe0:	4798      	blx	r3
   19fe2:	0003      	movs	r3, r0
   19fe4:	0018      	movs	r0, r3
   19fe6:	4b22      	ldr	r3, [pc, #136]	; (1a070 <xQueueSemaphoreTake+0x384>)
   19fe8:	4798      	blx	r3
   19fea:	0003      	movs	r3, r0
   19fec:	b2db      	uxtb	r3, r3
   19fee:	0018      	movs	r0, r3
   19ff0:	4b29      	ldr	r3, [pc, #164]	; (1a098 <xQueueSemaphoreTake+0x3ac>)
   19ff2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   19ff4:	69fb      	ldr	r3, [r7, #28]
   19ff6:	681b      	ldr	r3, [r3, #0]
   19ff8:	2b00      	cmp	r3, #0
   19ffa:	d10a      	bne.n	1a012 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   19ffc:	4b13      	ldr	r3, [pc, #76]	; (1a04c <xQueueSemaphoreTake+0x360>)
   19ffe:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1a000:	69fb      	ldr	r3, [r7, #28]
   1a002:	685b      	ldr	r3, [r3, #4]
   1a004:	0018      	movs	r0, r3
   1a006:	4b25      	ldr	r3, [pc, #148]	; (1a09c <xQueueSemaphoreTake+0x3b0>)
   1a008:	4798      	blx	r3
   1a00a:	0003      	movs	r3, r0
   1a00c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1a00e:	4b1d      	ldr	r3, [pc, #116]	; (1a084 <xQueueSemaphoreTake+0x398>)
   1a010:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1a012:	69fb      	ldr	r3, [r7, #28]
   1a014:	3324      	adds	r3, #36	; 0x24
   1a016:	683a      	ldr	r2, [r7, #0]
   1a018:	0011      	movs	r1, r2
   1a01a:	0018      	movs	r0, r3
   1a01c:	4b20      	ldr	r3, [pc, #128]	; (1a0a0 <xQueueSemaphoreTake+0x3b4>)
   1a01e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1a020:	69fb      	ldr	r3, [r7, #28]
   1a022:	0018      	movs	r0, r3
   1a024:	4b1f      	ldr	r3, [pc, #124]	; (1a0a4 <xQueueSemaphoreTake+0x3b8>)
   1a026:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1a028:	4b1f      	ldr	r3, [pc, #124]	; (1a0a8 <xQueueSemaphoreTake+0x3bc>)
   1a02a:	4798      	blx	r3
   1a02c:	1e03      	subs	r3, r0, #0
   1a02e:	d000      	beq.n	1a032 <xQueueSemaphoreTake+0x346>
   1a030:	e680      	b.n	19d34 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1a032:	4b13      	ldr	r3, [pc, #76]	; (1a080 <xQueueSemaphoreTake+0x394>)
   1a034:	4798      	blx	r3
   1a036:	e67d      	b.n	19d34 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1a038:	69fb      	ldr	r3, [r7, #28]
   1a03a:	0018      	movs	r0, r3
   1a03c:	4b19      	ldr	r3, [pc, #100]	; (1a0a4 <xQueueSemaphoreTake+0x3b8>)
   1a03e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1a040:	4b19      	ldr	r3, [pc, #100]	; (1a0a8 <xQueueSemaphoreTake+0x3bc>)
   1a042:	4798      	blx	r3
   1a044:	e676      	b.n	19d34 <xQueueSemaphoreTake+0x48>
   1a046:	46c0      	nop			; (mov r8, r8)
   1a048:	0001b769 	.word	0x0001b769
   1a04c:	00018a49 	.word	0x00018a49
   1a050:	00016cdd 	.word	0x00016cdd
   1a054:	00016a41 	.word	0x00016a41
   1a058:	20000110 	.word	0x20000110
   1a05c:	00016b01 	.word	0x00016b01
   1a060:	00016a01 	.word	0x00016a01
   1a064:	20000104 	.word	0x20000104
   1a068:	00016ae1 	.word	0x00016ae1
   1a06c:	00017439 	.word	0x00017439
   1a070:	00016a21 	.word	0x00016a21
   1a074:	00017a95 	.word	0x00017a95
   1a078:	0001bc35 	.word	0x0001bc35
   1a07c:	0001b2d9 	.word	0x0001b2d9
   1a080:	00018a31 	.word	0x00018a31
   1a084:	00018a6d 	.word	0x00018a6d
   1a088:	0001b419 	.word	0x0001b419
   1a08c:	0001ad01 	.word	0x0001ad01
   1a090:	0001b441 	.word	0x0001b441
   1a094:	0001a435 	.word	0x0001a435
   1a098:	00017bd1 	.word	0x00017bd1
   1a09c:	0001b7a1 	.word	0x0001b7a1
   1a0a0:	0001b1b5 	.word	0x0001b1b5
   1a0a4:	0001a345 	.word	0x0001a345
   1a0a8:	0001ad19 	.word	0x0001ad19
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1a0ac:	69fb      	ldr	r3, [r7, #28]
   1a0ae:	0018      	movs	r0, r3
   1a0b0:	4b2d      	ldr	r3, [pc, #180]	; (1a168 <xQueueSemaphoreTake+0x47c>)
   1a0b2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1a0b4:	4b2d      	ldr	r3, [pc, #180]	; (1a16c <xQueueSemaphoreTake+0x480>)
   1a0b6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1a0b8:	69fb      	ldr	r3, [r7, #28]
   1a0ba:	0018      	movs	r0, r3
   1a0bc:	4b2c      	ldr	r3, [pc, #176]	; (1a170 <xQueueSemaphoreTake+0x484>)
   1a0be:	4798      	blx	r3
   1a0c0:	1e03      	subs	r3, r0, #0
   1a0c2:	d100      	bne.n	1a0c6 <xQueueSemaphoreTake+0x3da>
   1a0c4:	e636      	b.n	19d34 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1a0c6:	6a3b      	ldr	r3, [r7, #32]
   1a0c8:	2b00      	cmp	r3, #0
   1a0ca:	d010      	beq.n	1a0ee <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1a0cc:	4b29      	ldr	r3, [pc, #164]	; (1a174 <xQueueSemaphoreTake+0x488>)
   1a0ce:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1a0d0:	69fb      	ldr	r3, [r7, #28]
   1a0d2:	0018      	movs	r0, r3
   1a0d4:	4b28      	ldr	r3, [pc, #160]	; (1a178 <xQueueSemaphoreTake+0x48c>)
   1a0d6:	4798      	blx	r3
   1a0d8:	0003      	movs	r3, r0
   1a0da:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1a0dc:	69fb      	ldr	r3, [r7, #28]
   1a0de:	685b      	ldr	r3, [r3, #4]
   1a0e0:	697a      	ldr	r2, [r7, #20]
   1a0e2:	0011      	movs	r1, r2
   1a0e4:	0018      	movs	r0, r3
   1a0e6:	4b25      	ldr	r3, [pc, #148]	; (1a17c <xQueueSemaphoreTake+0x490>)
   1a0e8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1a0ea:	4b25      	ldr	r3, [pc, #148]	; (1a180 <xQueueSemaphoreTake+0x494>)
   1a0ec:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1a0ee:	4b25      	ldr	r3, [pc, #148]	; (1a184 <xQueueSemaphoreTake+0x498>)
   1a0f0:	4798      	blx	r3
   1a0f2:	0003      	movs	r3, r0
   1a0f4:	0018      	movs	r0, r3
   1a0f6:	4b24      	ldr	r3, [pc, #144]	; (1a188 <xQueueSemaphoreTake+0x49c>)
   1a0f8:	4798      	blx	r3
   1a0fa:	0003      	movs	r3, r0
   1a0fc:	001a      	movs	r2, r3
   1a0fe:	4b23      	ldr	r3, [pc, #140]	; (1a18c <xQueueSemaphoreTake+0x4a0>)
   1a100:	881b      	ldrh	r3, [r3, #0]
   1a102:	4013      	ands	r3, r2
   1a104:	b29b      	uxth	r3, r3
   1a106:	2b00      	cmp	r3, #0
   1a108:	d029      	beq.n	1a15e <xQueueSemaphoreTake+0x472>
   1a10a:	69fb      	ldr	r3, [r7, #28]
   1a10c:	0018      	movs	r0, r3
   1a10e:	4b20      	ldr	r3, [pc, #128]	; (1a190 <xQueueSemaphoreTake+0x4a4>)
   1a110:	4798      	blx	r3
   1a112:	0003      	movs	r3, r0
   1a114:	001a      	movs	r2, r3
   1a116:	4b1d      	ldr	r3, [pc, #116]	; (1a18c <xQueueSemaphoreTake+0x4a0>)
   1a118:	881b      	ldrh	r3, [r3, #0]
   1a11a:	4013      	ands	r3, r2
   1a11c:	b29b      	uxth	r3, r3
   1a11e:	2b00      	cmp	r3, #0
   1a120:	d01d      	beq.n	1a15e <xQueueSemaphoreTake+0x472>
   1a122:	69fb      	ldr	r3, [r7, #28]
   1a124:	0018      	movs	r0, r3
   1a126:	4b1b      	ldr	r3, [pc, #108]	; (1a194 <xQueueSemaphoreTake+0x4a8>)
   1a128:	4798      	blx	r3
   1a12a:	0003      	movs	r3, r0
   1a12c:	001a      	movs	r2, r3
   1a12e:	4b1a      	ldr	r3, [pc, #104]	; (1a198 <xQueueSemaphoreTake+0x4ac>)
   1a130:	5c9b      	ldrb	r3, [r3, r2]
   1a132:	3350      	adds	r3, #80	; 0x50
   1a134:	b2db      	uxtb	r3, r3
   1a136:	001d      	movs	r5, r3
   1a138:	69fb      	ldr	r3, [r7, #28]
   1a13a:	0018      	movs	r0, r3
   1a13c:	4b15      	ldr	r3, [pc, #84]	; (1a194 <xQueueSemaphoreTake+0x4a8>)
   1a13e:	4798      	blx	r3
   1a140:	0003      	movs	r3, r0
   1a142:	001a      	movs	r2, r3
   1a144:	4b14      	ldr	r3, [pc, #80]	; (1a198 <xQueueSemaphoreTake+0x4ac>)
   1a146:	5c9c      	ldrb	r4, [r3, r2]
   1a148:	69fb      	ldr	r3, [r7, #28]
   1a14a:	0018      	movs	r0, r3
   1a14c:	4b13      	ldr	r3, [pc, #76]	; (1a19c <xQueueSemaphoreTake+0x4b0>)
   1a14e:	4798      	blx	r3
   1a150:	0003      	movs	r3, r0
   1a152:	b2db      	uxtb	r3, r3
   1a154:	001a      	movs	r2, r3
   1a156:	0021      	movs	r1, r4
   1a158:	0028      	movs	r0, r5
   1a15a:	4b11      	ldr	r3, [pc, #68]	; (1a1a0 <xQueueSemaphoreTake+0x4b4>)
   1a15c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1a15e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1a160:	0018      	movs	r0, r3
   1a162:	46bd      	mov	sp, r7
   1a164:	b00a      	add	sp, #40	; 0x28
   1a166:	bdb0      	pop	{r4, r5, r7, pc}
   1a168:	0001a345 	.word	0x0001a345
   1a16c:	0001ad19 	.word	0x0001ad19
   1a170:	0001a435 	.word	0x0001a435
   1a174:	00018a49 	.word	0x00018a49
   1a178:	0001a1e7 	.word	0x0001a1e7
   1a17c:	0001ba99 	.word	0x0001ba99
   1a180:	00018a6d 	.word	0x00018a6d
   1a184:	00016cdd 	.word	0x00016cdd
   1a188:	00016a41 	.word	0x00016a41
   1a18c:	20000110 	.word	0x20000110
   1a190:	00016b01 	.word	0x00016b01
   1a194:	00016a01 	.word	0x00016a01
   1a198:	20000104 	.word	0x20000104
   1a19c:	00016ae1 	.word	0x00016ae1
   1a1a0:	00017439 	.word	0x00017439

0001a1a4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1a1a4:	b580      	push	{r7, lr}
   1a1a6:	b082      	sub	sp, #8
   1a1a8:	af00      	add	r7, sp, #0
   1a1aa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1a1ac:	687b      	ldr	r3, [r7, #4]
   1a1ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1a1b0:	0018      	movs	r0, r3
   1a1b2:	46bd      	mov	sp, r7
   1a1b4:	b002      	add	sp, #8
   1a1b6:	bd80      	pop	{r7, pc}

0001a1b8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1a1b8:	b580      	push	{r7, lr}
   1a1ba:	b082      	sub	sp, #8
   1a1bc:	af00      	add	r7, sp, #0
   1a1be:	6078      	str	r0, [r7, #4]
   1a1c0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1a1c2:	687b      	ldr	r3, [r7, #4]
   1a1c4:	683a      	ldr	r2, [r7, #0]
   1a1c6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1a1c8:	46c0      	nop			; (mov r8, r8)
   1a1ca:	46bd      	mov	sp, r7
   1a1cc:	b002      	add	sp, #8
   1a1ce:	bd80      	pop	{r7, pc}

0001a1d0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1a1d0:	b580      	push	{r7, lr}
   1a1d2:	b082      	sub	sp, #8
   1a1d4:	af00      	add	r7, sp, #0
   1a1d6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1a1d8:	687b      	ldr	r3, [r7, #4]
   1a1da:	2250      	movs	r2, #80	; 0x50
   1a1dc:	5c9b      	ldrb	r3, [r3, r2]
	}
   1a1de:	0018      	movs	r0, r3
   1a1e0:	46bd      	mov	sp, r7
   1a1e2:	b002      	add	sp, #8
   1a1e4:	bd80      	pop	{r7, pc}

0001a1e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1a1e6:	b580      	push	{r7, lr}
   1a1e8:	b084      	sub	sp, #16
   1a1ea:	af00      	add	r7, sp, #0
   1a1ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1a1ee:	687b      	ldr	r3, [r7, #4]
   1a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a1f2:	2b00      	cmp	r3, #0
   1a1f4:	d006      	beq.n	1a204 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1a1f6:	687b      	ldr	r3, [r7, #4]
   1a1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a1fa:	681b      	ldr	r3, [r3, #0]
   1a1fc:	2205      	movs	r2, #5
   1a1fe:	1ad3      	subs	r3, r2, r3
   1a200:	60fb      	str	r3, [r7, #12]
   1a202:	e001      	b.n	1a208 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1a204:	2300      	movs	r3, #0
   1a206:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1a208:	68fb      	ldr	r3, [r7, #12]
	}
   1a20a:	0018      	movs	r0, r3
   1a20c:	46bd      	mov	sp, r7
   1a20e:	b004      	add	sp, #16
   1a210:	bd80      	pop	{r7, pc}
	...

0001a214 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1a214:	b580      	push	{r7, lr}
   1a216:	b086      	sub	sp, #24
   1a218:	af00      	add	r7, sp, #0
   1a21a:	60f8      	str	r0, [r7, #12]
   1a21c:	60b9      	str	r1, [r7, #8]
   1a21e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1a220:	2300      	movs	r3, #0
   1a222:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1a224:	68fb      	ldr	r3, [r7, #12]
   1a226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a228:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1a22a:	68fb      	ldr	r3, [r7, #12]
   1a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a22e:	2b00      	cmp	r3, #0
   1a230:	d10e      	bne.n	1a250 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1a232:	68fb      	ldr	r3, [r7, #12]
   1a234:	681b      	ldr	r3, [r3, #0]
   1a236:	2b00      	cmp	r3, #0
   1a238:	d14e      	bne.n	1a2d8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1a23a:	68fb      	ldr	r3, [r7, #12]
   1a23c:	685b      	ldr	r3, [r3, #4]
   1a23e:	0018      	movs	r0, r3
   1a240:	4b2a      	ldr	r3, [pc, #168]	; (1a2ec <prvCopyDataToQueue+0xd8>)
   1a242:	4798      	blx	r3
   1a244:	0003      	movs	r3, r0
   1a246:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1a248:	68fb      	ldr	r3, [r7, #12]
   1a24a:	2200      	movs	r2, #0
   1a24c:	605a      	str	r2, [r3, #4]
   1a24e:	e043      	b.n	1a2d8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1a250:	687b      	ldr	r3, [r7, #4]
   1a252:	2b00      	cmp	r3, #0
   1a254:	d119      	bne.n	1a28a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1a256:	68fb      	ldr	r3, [r7, #12]
   1a258:	6898      	ldr	r0, [r3, #8]
   1a25a:	68fb      	ldr	r3, [r7, #12]
   1a25c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a25e:	68bb      	ldr	r3, [r7, #8]
   1a260:	0019      	movs	r1, r3
   1a262:	4b23      	ldr	r3, [pc, #140]	; (1a2f0 <prvCopyDataToQueue+0xdc>)
   1a264:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1a266:	68fb      	ldr	r3, [r7, #12]
   1a268:	689a      	ldr	r2, [r3, #8]
   1a26a:	68fb      	ldr	r3, [r7, #12]
   1a26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a26e:	18d2      	adds	r2, r2, r3
   1a270:	68fb      	ldr	r3, [r7, #12]
   1a272:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a274:	68fb      	ldr	r3, [r7, #12]
   1a276:	689a      	ldr	r2, [r3, #8]
   1a278:	68fb      	ldr	r3, [r7, #12]
   1a27a:	685b      	ldr	r3, [r3, #4]
   1a27c:	429a      	cmp	r2, r3
   1a27e:	d32b      	bcc.n	1a2d8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1a280:	68fb      	ldr	r3, [r7, #12]
   1a282:	681a      	ldr	r2, [r3, #0]
   1a284:	68fb      	ldr	r3, [r7, #12]
   1a286:	609a      	str	r2, [r3, #8]
   1a288:	e026      	b.n	1a2d8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a28a:	68fb      	ldr	r3, [r7, #12]
   1a28c:	68d8      	ldr	r0, [r3, #12]
   1a28e:	68fb      	ldr	r3, [r7, #12]
   1a290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a292:	68bb      	ldr	r3, [r7, #8]
   1a294:	0019      	movs	r1, r3
   1a296:	4b16      	ldr	r3, [pc, #88]	; (1a2f0 <prvCopyDataToQueue+0xdc>)
   1a298:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1a29a:	68fb      	ldr	r3, [r7, #12]
   1a29c:	68da      	ldr	r2, [r3, #12]
   1a29e:	68fb      	ldr	r3, [r7, #12]
   1a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a2a2:	425b      	negs	r3, r3
   1a2a4:	18d2      	adds	r2, r2, r3
   1a2a6:	68fb      	ldr	r3, [r7, #12]
   1a2a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1a2aa:	68fb      	ldr	r3, [r7, #12]
   1a2ac:	68da      	ldr	r2, [r3, #12]
   1a2ae:	68fb      	ldr	r3, [r7, #12]
   1a2b0:	681b      	ldr	r3, [r3, #0]
   1a2b2:	429a      	cmp	r2, r3
   1a2b4:	d207      	bcs.n	1a2c6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1a2b6:	68fb      	ldr	r3, [r7, #12]
   1a2b8:	685a      	ldr	r2, [r3, #4]
   1a2ba:	68fb      	ldr	r3, [r7, #12]
   1a2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a2be:	425b      	negs	r3, r3
   1a2c0:	18d2      	adds	r2, r2, r3
   1a2c2:	68fb      	ldr	r3, [r7, #12]
   1a2c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1a2c6:	687b      	ldr	r3, [r7, #4]
   1a2c8:	2b02      	cmp	r3, #2
   1a2ca:	d105      	bne.n	1a2d8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1a2cc:	693b      	ldr	r3, [r7, #16]
   1a2ce:	2b00      	cmp	r3, #0
   1a2d0:	d002      	beq.n	1a2d8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1a2d2:	693b      	ldr	r3, [r7, #16]
   1a2d4:	3b01      	subs	r3, #1
   1a2d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1a2d8:	693b      	ldr	r3, [r7, #16]
   1a2da:	1c5a      	adds	r2, r3, #1
   1a2dc:	68fb      	ldr	r3, [r7, #12]
   1a2de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1a2e0:	697b      	ldr	r3, [r7, #20]
}
   1a2e2:	0018      	movs	r0, r3
   1a2e4:	46bd      	mov	sp, r7
   1a2e6:	b006      	add	sp, #24
   1a2e8:	bd80      	pop	{r7, pc}
   1a2ea:	46c0      	nop			; (mov r8, r8)
   1a2ec:	0001b931 	.word	0x0001b931
   1a2f0:	00033169 	.word	0x00033169

0001a2f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1a2f4:	b580      	push	{r7, lr}
   1a2f6:	b082      	sub	sp, #8
   1a2f8:	af00      	add	r7, sp, #0
   1a2fa:	6078      	str	r0, [r7, #4]
   1a2fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1a2fe:	687b      	ldr	r3, [r7, #4]
   1a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a302:	2b00      	cmp	r3, #0
   1a304:	d018      	beq.n	1a338 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1a306:	687b      	ldr	r3, [r7, #4]
   1a308:	68da      	ldr	r2, [r3, #12]
   1a30a:	687b      	ldr	r3, [r7, #4]
   1a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1a30e:	18d2      	adds	r2, r2, r3
   1a310:	687b      	ldr	r3, [r7, #4]
   1a312:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1a314:	687b      	ldr	r3, [r7, #4]
   1a316:	68da      	ldr	r2, [r3, #12]
   1a318:	687b      	ldr	r3, [r7, #4]
   1a31a:	685b      	ldr	r3, [r3, #4]
   1a31c:	429a      	cmp	r2, r3
   1a31e:	d303      	bcc.n	1a328 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1a320:	687b      	ldr	r3, [r7, #4]
   1a322:	681a      	ldr	r2, [r3, #0]
   1a324:	687b      	ldr	r3, [r7, #4]
   1a326:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1a328:	687b      	ldr	r3, [r7, #4]
   1a32a:	68d9      	ldr	r1, [r3, #12]
   1a32c:	687b      	ldr	r3, [r7, #4]
   1a32e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1a330:	683b      	ldr	r3, [r7, #0]
   1a332:	0018      	movs	r0, r3
   1a334:	4b02      	ldr	r3, [pc, #8]	; (1a340 <prvCopyDataFromQueue+0x4c>)
   1a336:	4798      	blx	r3
	}
}
   1a338:	46c0      	nop			; (mov r8, r8)
   1a33a:	46bd      	mov	sp, r7
   1a33c:	b002      	add	sp, #8
   1a33e:	bd80      	pop	{r7, pc}
   1a340:	00033169 	.word	0x00033169

0001a344 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1a344:	b580      	push	{r7, lr}
   1a346:	b084      	sub	sp, #16
   1a348:	af00      	add	r7, sp, #0
   1a34a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1a34c:	4b34      	ldr	r3, [pc, #208]	; (1a420 <prvUnlockQueue+0xdc>)
   1a34e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1a350:	230f      	movs	r3, #15
   1a352:	18fb      	adds	r3, r7, r3
   1a354:	687a      	ldr	r2, [r7, #4]
   1a356:	2145      	movs	r1, #69	; 0x45
   1a358:	5c52      	ldrb	r2, [r2, r1]
   1a35a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a35c:	e022      	b.n	1a3a4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1a35e:	687b      	ldr	r3, [r7, #4]
   1a360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a362:	2b00      	cmp	r3, #0
   1a364:	d009      	beq.n	1a37a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1a366:	687b      	ldr	r3, [r7, #4]
   1a368:	2100      	movs	r1, #0
   1a36a:	0018      	movs	r0, r3
   1a36c:	4b2d      	ldr	r3, [pc, #180]	; (1a424 <prvUnlockQueue+0xe0>)
   1a36e:	4798      	blx	r3
   1a370:	1e03      	subs	r3, r0, #0
   1a372:	d00f      	beq.n	1a394 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1a374:	4b2c      	ldr	r3, [pc, #176]	; (1a428 <prvUnlockQueue+0xe4>)
   1a376:	4798      	blx	r3
   1a378:	e00c      	b.n	1a394 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1a37a:	687b      	ldr	r3, [r7, #4]
   1a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a37e:	2b00      	cmp	r3, #0
   1a380:	d017      	beq.n	1a3b2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1a382:	687b      	ldr	r3, [r7, #4]
   1a384:	3324      	adds	r3, #36	; 0x24
   1a386:	0018      	movs	r0, r3
   1a388:	4b28      	ldr	r3, [pc, #160]	; (1a42c <prvUnlockQueue+0xe8>)
   1a38a:	4798      	blx	r3
   1a38c:	1e03      	subs	r3, r0, #0
   1a38e:	d001      	beq.n	1a394 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1a390:	4b25      	ldr	r3, [pc, #148]	; (1a428 <prvUnlockQueue+0xe4>)
   1a392:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1a394:	230f      	movs	r3, #15
   1a396:	18fb      	adds	r3, r7, r3
   1a398:	781b      	ldrb	r3, [r3, #0]
   1a39a:	3b01      	subs	r3, #1
   1a39c:	b2da      	uxtb	r2, r3
   1a39e:	230f      	movs	r3, #15
   1a3a0:	18fb      	adds	r3, r7, r3
   1a3a2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1a3a4:	230f      	movs	r3, #15
   1a3a6:	18fb      	adds	r3, r7, r3
   1a3a8:	781b      	ldrb	r3, [r3, #0]
   1a3aa:	b25b      	sxtb	r3, r3
   1a3ac:	2b00      	cmp	r3, #0
   1a3ae:	dcd6      	bgt.n	1a35e <prvUnlockQueue+0x1a>
   1a3b0:	e000      	b.n	1a3b4 <prvUnlockQueue+0x70>
						break;
   1a3b2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1a3b4:	687b      	ldr	r3, [r7, #4]
   1a3b6:	2245      	movs	r2, #69	; 0x45
   1a3b8:	21ff      	movs	r1, #255	; 0xff
   1a3ba:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1a3bc:	4b1c      	ldr	r3, [pc, #112]	; (1a430 <prvUnlockQueue+0xec>)
   1a3be:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1a3c0:	4b17      	ldr	r3, [pc, #92]	; (1a420 <prvUnlockQueue+0xdc>)
   1a3c2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1a3c4:	230e      	movs	r3, #14
   1a3c6:	18fb      	adds	r3, r7, r3
   1a3c8:	687a      	ldr	r2, [r7, #4]
   1a3ca:	2144      	movs	r1, #68	; 0x44
   1a3cc:	5c52      	ldrb	r2, [r2, r1]
   1a3ce:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a3d0:	e014      	b.n	1a3fc <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1a3d2:	687b      	ldr	r3, [r7, #4]
   1a3d4:	691b      	ldr	r3, [r3, #16]
   1a3d6:	2b00      	cmp	r3, #0
   1a3d8:	d017      	beq.n	1a40a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1a3da:	687b      	ldr	r3, [r7, #4]
   1a3dc:	3310      	adds	r3, #16
   1a3de:	0018      	movs	r0, r3
   1a3e0:	4b12      	ldr	r3, [pc, #72]	; (1a42c <prvUnlockQueue+0xe8>)
   1a3e2:	4798      	blx	r3
   1a3e4:	1e03      	subs	r3, r0, #0
   1a3e6:	d001      	beq.n	1a3ec <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1a3e8:	4b0f      	ldr	r3, [pc, #60]	; (1a428 <prvUnlockQueue+0xe4>)
   1a3ea:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1a3ec:	230e      	movs	r3, #14
   1a3ee:	18fb      	adds	r3, r7, r3
   1a3f0:	781b      	ldrb	r3, [r3, #0]
   1a3f2:	3b01      	subs	r3, #1
   1a3f4:	b2da      	uxtb	r2, r3
   1a3f6:	230e      	movs	r3, #14
   1a3f8:	18fb      	adds	r3, r7, r3
   1a3fa:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1a3fc:	230e      	movs	r3, #14
   1a3fe:	18fb      	adds	r3, r7, r3
   1a400:	781b      	ldrb	r3, [r3, #0]
   1a402:	b25b      	sxtb	r3, r3
   1a404:	2b00      	cmp	r3, #0
   1a406:	dce4      	bgt.n	1a3d2 <prvUnlockQueue+0x8e>
   1a408:	e000      	b.n	1a40c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1a40a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1a40c:	687b      	ldr	r3, [r7, #4]
   1a40e:	2244      	movs	r2, #68	; 0x44
   1a410:	21ff      	movs	r1, #255	; 0xff
   1a412:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1a414:	4b06      	ldr	r3, [pc, #24]	; (1a430 <prvUnlockQueue+0xec>)
   1a416:	4798      	blx	r3
}
   1a418:	46c0      	nop			; (mov r8, r8)
   1a41a:	46bd      	mov	sp, r7
   1a41c:	b004      	add	sp, #16
   1a41e:	bd80      	pop	{r7, pc}
   1a420:	00018a49 	.word	0x00018a49
   1a424:	0001a519 	.word	0x0001a519
   1a428:	0001b4ed 	.word	0x0001b4ed
   1a42c:	0001b2d9 	.word	0x0001b2d9
   1a430:	00018a6d 	.word	0x00018a6d

0001a434 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1a434:	b580      	push	{r7, lr}
   1a436:	b084      	sub	sp, #16
   1a438:	af00      	add	r7, sp, #0
   1a43a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1a43c:	4b08      	ldr	r3, [pc, #32]	; (1a460 <prvIsQueueEmpty+0x2c>)
   1a43e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1a440:	687b      	ldr	r3, [r7, #4]
   1a442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a444:	2b00      	cmp	r3, #0
   1a446:	d102      	bne.n	1a44e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1a448:	2301      	movs	r3, #1
   1a44a:	60fb      	str	r3, [r7, #12]
   1a44c:	e001      	b.n	1a452 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1a44e:	2300      	movs	r3, #0
   1a450:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1a452:	4b04      	ldr	r3, [pc, #16]	; (1a464 <prvIsQueueEmpty+0x30>)
   1a454:	4798      	blx	r3

	return xReturn;
   1a456:	68fb      	ldr	r3, [r7, #12]
}
   1a458:	0018      	movs	r0, r3
   1a45a:	46bd      	mov	sp, r7
   1a45c:	b004      	add	sp, #16
   1a45e:	bd80      	pop	{r7, pc}
   1a460:	00018a49 	.word	0x00018a49
   1a464:	00018a6d 	.word	0x00018a6d

0001a468 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1a468:	b580      	push	{r7, lr}
   1a46a:	b084      	sub	sp, #16
   1a46c:	af00      	add	r7, sp, #0
   1a46e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1a470:	4b09      	ldr	r3, [pc, #36]	; (1a498 <prvIsQueueFull+0x30>)
   1a472:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1a474:	687b      	ldr	r3, [r7, #4]
   1a476:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a478:	687b      	ldr	r3, [r7, #4]
   1a47a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a47c:	429a      	cmp	r2, r3
   1a47e:	d102      	bne.n	1a486 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1a480:	2301      	movs	r3, #1
   1a482:	60fb      	str	r3, [r7, #12]
   1a484:	e001      	b.n	1a48a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1a486:	2300      	movs	r3, #0
   1a488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1a48a:	4b04      	ldr	r3, [pc, #16]	; (1a49c <prvIsQueueFull+0x34>)
   1a48c:	4798      	blx	r3

	return xReturn;
   1a48e:	68fb      	ldr	r3, [r7, #12]
}
   1a490:	0018      	movs	r0, r3
   1a492:	46bd      	mov	sp, r7
   1a494:	b004      	add	sp, #16
   1a496:	bd80      	pop	{r7, pc}
   1a498:	00018a49 	.word	0x00018a49
   1a49c:	00018a6d 	.word	0x00018a6d

0001a4a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1a4a0:	b580      	push	{r7, lr}
   1a4a2:	b086      	sub	sp, #24
   1a4a4:	af00      	add	r7, sp, #0
   1a4a6:	60f8      	str	r0, [r7, #12]
   1a4a8:	60b9      	str	r1, [r7, #8]
   1a4aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1a4ac:	68fb      	ldr	r3, [r7, #12]
   1a4ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1a4b0:	4b15      	ldr	r3, [pc, #84]	; (1a508 <vQueueWaitForMessageRestricted+0x68>)
   1a4b2:	4798      	blx	r3
   1a4b4:	697b      	ldr	r3, [r7, #20]
   1a4b6:	2244      	movs	r2, #68	; 0x44
   1a4b8:	5c9b      	ldrb	r3, [r3, r2]
   1a4ba:	b25b      	sxtb	r3, r3
   1a4bc:	3301      	adds	r3, #1
   1a4be:	d103      	bne.n	1a4c8 <vQueueWaitForMessageRestricted+0x28>
   1a4c0:	697b      	ldr	r3, [r7, #20]
   1a4c2:	2244      	movs	r2, #68	; 0x44
   1a4c4:	2100      	movs	r1, #0
   1a4c6:	5499      	strb	r1, [r3, r2]
   1a4c8:	697b      	ldr	r3, [r7, #20]
   1a4ca:	2245      	movs	r2, #69	; 0x45
   1a4cc:	5c9b      	ldrb	r3, [r3, r2]
   1a4ce:	b25b      	sxtb	r3, r3
   1a4d0:	3301      	adds	r3, #1
   1a4d2:	d103      	bne.n	1a4dc <vQueueWaitForMessageRestricted+0x3c>
   1a4d4:	697b      	ldr	r3, [r7, #20]
   1a4d6:	2245      	movs	r2, #69	; 0x45
   1a4d8:	2100      	movs	r1, #0
   1a4da:	5499      	strb	r1, [r3, r2]
   1a4dc:	4b0b      	ldr	r3, [pc, #44]	; (1a50c <vQueueWaitForMessageRestricted+0x6c>)
   1a4de:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1a4e0:	697b      	ldr	r3, [r7, #20]
   1a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a4e4:	2b00      	cmp	r3, #0
   1a4e6:	d106      	bne.n	1a4f6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1a4e8:	697b      	ldr	r3, [r7, #20]
   1a4ea:	3324      	adds	r3, #36	; 0x24
   1a4ec:	687a      	ldr	r2, [r7, #4]
   1a4ee:	68b9      	ldr	r1, [r7, #8]
   1a4f0:	0018      	movs	r0, r3
   1a4f2:	4b07      	ldr	r3, [pc, #28]	; (1a510 <vQueueWaitForMessageRestricted+0x70>)
   1a4f4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1a4f6:	697b      	ldr	r3, [r7, #20]
   1a4f8:	0018      	movs	r0, r3
   1a4fa:	4b06      	ldr	r3, [pc, #24]	; (1a514 <vQueueWaitForMessageRestricted+0x74>)
   1a4fc:	4798      	blx	r3
	}
   1a4fe:	46c0      	nop			; (mov r8, r8)
   1a500:	46bd      	mov	sp, r7
   1a502:	b006      	add	sp, #24
   1a504:	bd80      	pop	{r7, pc}
   1a506:	46c0      	nop			; (mov r8, r8)
   1a508:	00018a49 	.word	0x00018a49
   1a50c:	00018a6d 	.word	0x00018a6d
   1a510:	0001b1f9 	.word	0x0001b1f9
   1a514:	0001a345 	.word	0x0001a345

0001a518 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1a518:	b5b0      	push	{r4, r5, r7, lr}
   1a51a:	b086      	sub	sp, #24
   1a51c:	af00      	add	r7, sp, #0
   1a51e:	6078      	str	r0, [r7, #4]
   1a520:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1a522:	687b      	ldr	r3, [r7, #4]
   1a524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1a526:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1a528:	2300      	movs	r3, #0
   1a52a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1a52c:	693b      	ldr	r3, [r7, #16]
   1a52e:	2b00      	cmp	r3, #0
   1a530:	d101      	bne.n	1a536 <prvNotifyQueueSetContainer+0x1e>
   1a532:	b672      	cpsid	i
   1a534:	e7fe      	b.n	1a534 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1a536:	693b      	ldr	r3, [r7, #16]
   1a538:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a53a:	693b      	ldr	r3, [r7, #16]
   1a53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a53e:	429a      	cmp	r2, r3
   1a540:	d301      	bcc.n	1a546 <prvNotifyQueueSetContainer+0x2e>
   1a542:	b672      	cpsid	i
   1a544:	e7fe      	b.n	1a544 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1a546:	693b      	ldr	r3, [r7, #16]
   1a548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1a54a:	693b      	ldr	r3, [r7, #16]
   1a54c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1a54e:	429a      	cmp	r2, r3
   1a550:	d300      	bcc.n	1a554 <prvNotifyQueueSetContainer+0x3c>
   1a552:	e08b      	b.n	1a66c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1a554:	230f      	movs	r3, #15
   1a556:	18fb      	adds	r3, r7, r3
   1a558:	693a      	ldr	r2, [r7, #16]
   1a55a:	2145      	movs	r1, #69	; 0x45
   1a55c:	5c52      	ldrb	r2, [r2, r1]
   1a55e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1a560:	4b45      	ldr	r3, [pc, #276]	; (1a678 <prvNotifyQueueSetContainer+0x160>)
   1a562:	4798      	blx	r3
   1a564:	0003      	movs	r3, r0
   1a566:	0018      	movs	r0, r3
   1a568:	4b44      	ldr	r3, [pc, #272]	; (1a67c <prvNotifyQueueSetContainer+0x164>)
   1a56a:	4798      	blx	r3
   1a56c:	0003      	movs	r3, r0
   1a56e:	001a      	movs	r2, r3
   1a570:	4b43      	ldr	r3, [pc, #268]	; (1a680 <prvNotifyQueueSetContainer+0x168>)
   1a572:	881b      	ldrh	r3, [r3, #0]
   1a574:	4013      	ands	r3, r2
   1a576:	b29b      	uxth	r3, r3
   1a578:	2b00      	cmp	r3, #0
   1a57a:	d02e      	beq.n	1a5da <prvNotifyQueueSetContainer+0xc2>
   1a57c:	693b      	ldr	r3, [r7, #16]
   1a57e:	0018      	movs	r0, r3
   1a580:	4b40      	ldr	r3, [pc, #256]	; (1a684 <prvNotifyQueueSetContainer+0x16c>)
   1a582:	4798      	blx	r3
   1a584:	0003      	movs	r3, r0
   1a586:	001a      	movs	r2, r3
   1a588:	4b3d      	ldr	r3, [pc, #244]	; (1a680 <prvNotifyQueueSetContainer+0x168>)
   1a58a:	881b      	ldrh	r3, [r3, #0]
   1a58c:	4013      	ands	r3, r2
   1a58e:	b29b      	uxth	r3, r3
   1a590:	2b00      	cmp	r3, #0
   1a592:	d022      	beq.n	1a5da <prvNotifyQueueSetContainer+0xc2>
   1a594:	683b      	ldr	r3, [r7, #0]
   1a596:	2b00      	cmp	r3, #0
   1a598:	d10b      	bne.n	1a5b2 <prvNotifyQueueSetContainer+0x9a>
   1a59a:	693b      	ldr	r3, [r7, #16]
   1a59c:	0018      	movs	r0, r3
   1a59e:	4b3a      	ldr	r3, [pc, #232]	; (1a688 <prvNotifyQueueSetContainer+0x170>)
   1a5a0:	4798      	blx	r3
   1a5a2:	0003      	movs	r3, r0
   1a5a4:	001a      	movs	r2, r3
   1a5a6:	4b39      	ldr	r3, [pc, #228]	; (1a68c <prvNotifyQueueSetContainer+0x174>)
   1a5a8:	5c9b      	ldrb	r3, [r3, r2]
   1a5aa:	3320      	adds	r3, #32
   1a5ac:	b2db      	uxtb	r3, r3
   1a5ae:	001d      	movs	r5, r3
   1a5b0:	e000      	b.n	1a5b4 <prvNotifyQueueSetContainer+0x9c>
   1a5b2:	2525      	movs	r5, #37	; 0x25
   1a5b4:	693b      	ldr	r3, [r7, #16]
   1a5b6:	0018      	movs	r0, r3
   1a5b8:	4b33      	ldr	r3, [pc, #204]	; (1a688 <prvNotifyQueueSetContainer+0x170>)
   1a5ba:	4798      	blx	r3
   1a5bc:	0003      	movs	r3, r0
   1a5be:	001a      	movs	r2, r3
   1a5c0:	4b32      	ldr	r3, [pc, #200]	; (1a68c <prvNotifyQueueSetContainer+0x174>)
   1a5c2:	5c9c      	ldrb	r4, [r3, r2]
   1a5c4:	693b      	ldr	r3, [r7, #16]
   1a5c6:	0018      	movs	r0, r3
   1a5c8:	4b31      	ldr	r3, [pc, #196]	; (1a690 <prvNotifyQueueSetContainer+0x178>)
   1a5ca:	4798      	blx	r3
   1a5cc:	0003      	movs	r3, r0
   1a5ce:	b2db      	uxtb	r3, r3
   1a5d0:	001a      	movs	r2, r3
   1a5d2:	0021      	movs	r1, r4
   1a5d4:	0028      	movs	r0, r5
   1a5d6:	4b2f      	ldr	r3, [pc, #188]	; (1a694 <prvNotifyQueueSetContainer+0x17c>)
   1a5d8:	4798      	blx	r3
   1a5da:	693b      	ldr	r3, [r7, #16]
   1a5dc:	0018      	movs	r0, r3
   1a5de:	4b2a      	ldr	r3, [pc, #168]	; (1a688 <prvNotifyQueueSetContainer+0x170>)
   1a5e0:	4798      	blx	r3
   1a5e2:	0003      	movs	r3, r0
   1a5e4:	001a      	movs	r2, r3
   1a5e6:	4b29      	ldr	r3, [pc, #164]	; (1a68c <prvNotifyQueueSetContainer+0x174>)
   1a5e8:	5c9c      	ldrb	r4, [r3, r2]
   1a5ea:	693b      	ldr	r3, [r7, #16]
   1a5ec:	0018      	movs	r0, r3
   1a5ee:	4b28      	ldr	r3, [pc, #160]	; (1a690 <prvNotifyQueueSetContainer+0x178>)
   1a5f0:	4798      	blx	r3
   1a5f2:	0003      	movs	r3, r0
   1a5f4:	b2dd      	uxtb	r5, r3
   1a5f6:	693b      	ldr	r3, [r7, #16]
   1a5f8:	0018      	movs	r0, r3
   1a5fa:	4b23      	ldr	r3, [pc, #140]	; (1a688 <prvNotifyQueueSetContainer+0x170>)
   1a5fc:	4798      	blx	r3
   1a5fe:	0003      	movs	r3, r0
   1a600:	001a      	movs	r2, r3
   1a602:	4b22      	ldr	r3, [pc, #136]	; (1a68c <prvNotifyQueueSetContainer+0x174>)
   1a604:	5c9b      	ldrb	r3, [r3, r2]
   1a606:	2b02      	cmp	r3, #2
   1a608:	d005      	beq.n	1a616 <prvNotifyQueueSetContainer+0xfe>
   1a60a:	693b      	ldr	r3, [r7, #16]
   1a60c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1a60e:	b2db      	uxtb	r3, r3
   1a610:	3301      	adds	r3, #1
   1a612:	b2db      	uxtb	r3, r3
   1a614:	e000      	b.n	1a618 <prvNotifyQueueSetContainer+0x100>
   1a616:	2300      	movs	r3, #0
   1a618:	001a      	movs	r2, r3
   1a61a:	0029      	movs	r1, r5
   1a61c:	0020      	movs	r0, r4
   1a61e:	4b1e      	ldr	r3, [pc, #120]	; (1a698 <prvNotifyQueueSetContainer+0x180>)
   1a620:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1a622:	683a      	ldr	r2, [r7, #0]
   1a624:	1d39      	adds	r1, r7, #4
   1a626:	693b      	ldr	r3, [r7, #16]
   1a628:	0018      	movs	r0, r3
   1a62a:	4b1c      	ldr	r3, [pc, #112]	; (1a69c <prvNotifyQueueSetContainer+0x184>)
   1a62c:	4798      	blx	r3
   1a62e:	0003      	movs	r3, r0
   1a630:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1a632:	230f      	movs	r3, #15
   1a634:	18fb      	adds	r3, r7, r3
   1a636:	781b      	ldrb	r3, [r3, #0]
   1a638:	b25b      	sxtb	r3, r3
   1a63a:	3301      	adds	r3, #1
   1a63c:	d10d      	bne.n	1a65a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1a63e:	693b      	ldr	r3, [r7, #16]
   1a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a642:	2b00      	cmp	r3, #0
   1a644:	d012      	beq.n	1a66c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1a646:	693b      	ldr	r3, [r7, #16]
   1a648:	3324      	adds	r3, #36	; 0x24
   1a64a:	0018      	movs	r0, r3
   1a64c:	4b14      	ldr	r3, [pc, #80]	; (1a6a0 <prvNotifyQueueSetContainer+0x188>)
   1a64e:	4798      	blx	r3
   1a650:	1e03      	subs	r3, r0, #0
   1a652:	d00b      	beq.n	1a66c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1a654:	2301      	movs	r3, #1
   1a656:	617b      	str	r3, [r7, #20]
   1a658:	e008      	b.n	1a66c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1a65a:	230f      	movs	r3, #15
   1a65c:	18fb      	adds	r3, r7, r3
   1a65e:	781b      	ldrb	r3, [r3, #0]
   1a660:	3301      	adds	r3, #1
   1a662:	b2db      	uxtb	r3, r3
   1a664:	b259      	sxtb	r1, r3
   1a666:	693b      	ldr	r3, [r7, #16]
   1a668:	2245      	movs	r2, #69	; 0x45
   1a66a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1a66c:	697b      	ldr	r3, [r7, #20]
	}
   1a66e:	0018      	movs	r0, r3
   1a670:	46bd      	mov	sp, r7
   1a672:	b006      	add	sp, #24
   1a674:	bdb0      	pop	{r4, r5, r7, pc}
   1a676:	46c0      	nop			; (mov r8, r8)
   1a678:	00016cdd 	.word	0x00016cdd
   1a67c:	00016a41 	.word	0x00016a41
   1a680:	20000110 	.word	0x20000110
   1a684:	00016b01 	.word	0x00016b01
   1a688:	00016a01 	.word	0x00016a01
   1a68c:	20000104 	.word	0x20000104
   1a690:	00016ae1 	.word	0x00016ae1
   1a694:	00017439 	.word	0x00017439
   1a698:	00017a95 	.word	0x00017a95
   1a69c:	0001a215 	.word	0x0001a215
   1a6a0:	0001b2d9 	.word	0x0001b2d9

0001a6a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1a6a4:	b590      	push	{r4, r7, lr}
   1a6a6:	b08d      	sub	sp, #52	; 0x34
   1a6a8:	af04      	add	r7, sp, #16
   1a6aa:	60f8      	str	r0, [r7, #12]
   1a6ac:	60b9      	str	r1, [r7, #8]
   1a6ae:	603b      	str	r3, [r7, #0]
   1a6b0:	1dbb      	adds	r3, r7, #6
   1a6b2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a6b4:	1dbb      	adds	r3, r7, #6
   1a6b6:	881b      	ldrh	r3, [r3, #0]
   1a6b8:	009b      	lsls	r3, r3, #2
   1a6ba:	0018      	movs	r0, r3
   1a6bc:	4b1d      	ldr	r3, [pc, #116]	; (1a734 <xTaskCreate+0x90>)
   1a6be:	4798      	blx	r3
   1a6c0:	0003      	movs	r3, r0
   1a6c2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1a6c4:	697b      	ldr	r3, [r7, #20]
   1a6c6:	2b00      	cmp	r3, #0
   1a6c8:	d010      	beq.n	1a6ec <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1a6ca:	2054      	movs	r0, #84	; 0x54
   1a6cc:	4b19      	ldr	r3, [pc, #100]	; (1a734 <xTaskCreate+0x90>)
   1a6ce:	4798      	blx	r3
   1a6d0:	0003      	movs	r3, r0
   1a6d2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1a6d4:	69fb      	ldr	r3, [r7, #28]
   1a6d6:	2b00      	cmp	r3, #0
   1a6d8:	d003      	beq.n	1a6e2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1a6da:	69fb      	ldr	r3, [r7, #28]
   1a6dc:	697a      	ldr	r2, [r7, #20]
   1a6de:	631a      	str	r2, [r3, #48]	; 0x30
   1a6e0:	e006      	b.n	1a6f0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1a6e2:	697b      	ldr	r3, [r7, #20]
   1a6e4:	0018      	movs	r0, r3
   1a6e6:	4b14      	ldr	r3, [pc, #80]	; (1a738 <xTaskCreate+0x94>)
   1a6e8:	4798      	blx	r3
   1a6ea:	e001      	b.n	1a6f0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1a6ec:	2300      	movs	r3, #0
   1a6ee:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1a6f0:	69fb      	ldr	r3, [r7, #28]
   1a6f2:	2b00      	cmp	r3, #0
   1a6f4:	d016      	beq.n	1a724 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1a6f6:	1dbb      	adds	r3, r7, #6
   1a6f8:	881a      	ldrh	r2, [r3, #0]
   1a6fa:	683c      	ldr	r4, [r7, #0]
   1a6fc:	68b9      	ldr	r1, [r7, #8]
   1a6fe:	68f8      	ldr	r0, [r7, #12]
   1a700:	2300      	movs	r3, #0
   1a702:	9303      	str	r3, [sp, #12]
   1a704:	69fb      	ldr	r3, [r7, #28]
   1a706:	9302      	str	r3, [sp, #8]
   1a708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1a70a:	9301      	str	r3, [sp, #4]
   1a70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1a70e:	9300      	str	r3, [sp, #0]
   1a710:	0023      	movs	r3, r4
   1a712:	4c0a      	ldr	r4, [pc, #40]	; (1a73c <xTaskCreate+0x98>)
   1a714:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1a716:	69fb      	ldr	r3, [r7, #28]
   1a718:	0018      	movs	r0, r3
   1a71a:	4b09      	ldr	r3, [pc, #36]	; (1a740 <xTaskCreate+0x9c>)
   1a71c:	4798      	blx	r3
			xReturn = pdPASS;
   1a71e:	2301      	movs	r3, #1
   1a720:	61bb      	str	r3, [r7, #24]
   1a722:	e002      	b.n	1a72a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1a724:	2301      	movs	r3, #1
   1a726:	425b      	negs	r3, r3
   1a728:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1a72a:	69bb      	ldr	r3, [r7, #24]
	}
   1a72c:	0018      	movs	r0, r3
   1a72e:	46bd      	mov	sp, r7
   1a730:	b009      	add	sp, #36	; 0x24
   1a732:	bd90      	pop	{r4, r7, pc}
   1a734:	00018b81 	.word	0x00018b81
   1a738:	00018c45 	.word	0x00018c45
   1a73c:	0001a745 	.word	0x0001a745
   1a740:	0001a855 	.word	0x0001a855

0001a744 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1a744:	b580      	push	{r7, lr}
   1a746:	b086      	sub	sp, #24
   1a748:	af00      	add	r7, sp, #0
   1a74a:	60f8      	str	r0, [r7, #12]
   1a74c:	60b9      	str	r1, [r7, #8]
   1a74e:	607a      	str	r2, [r7, #4]
   1a750:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1a752:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a754:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1a756:	687b      	ldr	r3, [r7, #4]
   1a758:	009b      	lsls	r3, r3, #2
   1a75a:	001a      	movs	r2, r3
   1a75c:	21a5      	movs	r1, #165	; 0xa5
   1a75e:	4b39      	ldr	r3, [pc, #228]	; (1a844 <prvInitialiseNewTask+0x100>)
   1a760:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1a762:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a766:	687b      	ldr	r3, [r7, #4]
   1a768:	4937      	ldr	r1, [pc, #220]	; (1a848 <prvInitialiseNewTask+0x104>)
   1a76a:	468c      	mov	ip, r1
   1a76c:	4463      	add	r3, ip
   1a76e:	009b      	lsls	r3, r3, #2
   1a770:	18d3      	adds	r3, r2, r3
   1a772:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1a774:	693b      	ldr	r3, [r7, #16]
   1a776:	2207      	movs	r2, #7
   1a778:	4393      	bics	r3, r2
   1a77a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1a77c:	693b      	ldr	r3, [r7, #16]
   1a77e:	2207      	movs	r2, #7
   1a780:	4013      	ands	r3, r2
   1a782:	d001      	beq.n	1a788 <prvInitialiseNewTask+0x44>
   1a784:	b672      	cpsid	i
   1a786:	e7fe      	b.n	1a786 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1a788:	2300      	movs	r3, #0
   1a78a:	617b      	str	r3, [r7, #20]
   1a78c:	e013      	b.n	1a7b6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1a78e:	68ba      	ldr	r2, [r7, #8]
   1a790:	697b      	ldr	r3, [r7, #20]
   1a792:	18d3      	adds	r3, r2, r3
   1a794:	7818      	ldrb	r0, [r3, #0]
   1a796:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a798:	2134      	movs	r1, #52	; 0x34
   1a79a:	697b      	ldr	r3, [r7, #20]
   1a79c:	18d3      	adds	r3, r2, r3
   1a79e:	185b      	adds	r3, r3, r1
   1a7a0:	1c02      	adds	r2, r0, #0
   1a7a2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1a7a4:	68ba      	ldr	r2, [r7, #8]
   1a7a6:	697b      	ldr	r3, [r7, #20]
   1a7a8:	18d3      	adds	r3, r2, r3
   1a7aa:	781b      	ldrb	r3, [r3, #0]
   1a7ac:	2b00      	cmp	r3, #0
   1a7ae:	d006      	beq.n	1a7be <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1a7b0:	697b      	ldr	r3, [r7, #20]
   1a7b2:	3301      	adds	r3, #1
   1a7b4:	617b      	str	r3, [r7, #20]
   1a7b6:	697b      	ldr	r3, [r7, #20]
   1a7b8:	2b07      	cmp	r3, #7
   1a7ba:	d9e8      	bls.n	1a78e <prvInitialiseNewTask+0x4a>
   1a7bc:	e000      	b.n	1a7c0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1a7be:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1a7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a7c2:	223b      	movs	r2, #59	; 0x3b
   1a7c4:	2100      	movs	r1, #0
   1a7c6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1a7c8:	6a3b      	ldr	r3, [r7, #32]
   1a7ca:	2b04      	cmp	r3, #4
   1a7cc:	d901      	bls.n	1a7d2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1a7ce:	2304      	movs	r3, #4
   1a7d0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1a7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a7d4:	6a3a      	ldr	r2, [r7, #32]
   1a7d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1a7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a7da:	6a3a      	ldr	r2, [r7, #32]
   1a7dc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a7e0:	2200      	movs	r2, #0
   1a7e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1a7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a7e6:	3304      	adds	r3, #4
   1a7e8:	0018      	movs	r0, r3
   1a7ea:	4b18      	ldr	r3, [pc, #96]	; (1a84c <prvInitialiseNewTask+0x108>)
   1a7ec:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1a7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a7f0:	3318      	adds	r3, #24
   1a7f2:	0018      	movs	r0, r3
   1a7f4:	4b15      	ldr	r3, [pc, #84]	; (1a84c <prvInitialiseNewTask+0x108>)
   1a7f6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1a7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a7fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a7fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1a7fe:	6a3b      	ldr	r3, [r7, #32]
   1a800:	2205      	movs	r2, #5
   1a802:	1ad2      	subs	r2, r2, r3
   1a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a806:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1a808:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a80a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a80c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a810:	2200      	movs	r2, #0
   1a812:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1a814:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a816:	2250      	movs	r2, #80	; 0x50
   1a818:	2100      	movs	r1, #0
   1a81a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1a81c:	683a      	ldr	r2, [r7, #0]
   1a81e:	68f9      	ldr	r1, [r7, #12]
   1a820:	693b      	ldr	r3, [r7, #16]
   1a822:	0018      	movs	r0, r3
   1a824:	4b0a      	ldr	r3, [pc, #40]	; (1a850 <prvInitialiseNewTask+0x10c>)
   1a826:	4798      	blx	r3
   1a828:	0002      	movs	r2, r0
   1a82a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1a82c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1a82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a830:	2b00      	cmp	r3, #0
   1a832:	d002      	beq.n	1a83a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1a834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1a836:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1a838:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1a83a:	46c0      	nop			; (mov r8, r8)
   1a83c:	46bd      	mov	sp, r7
   1a83e:	b006      	add	sp, #24
   1a840:	bd80      	pop	{r7, pc}
   1a842:	46c0      	nop			; (mov r8, r8)
   1a844:	0003319f 	.word	0x0003319f
   1a848:	3fffffff 	.word	0x3fffffff
   1a84c:	000187f5 	.word	0x000187f5
   1a850:	0001890d 	.word	0x0001890d

0001a854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1a854:	b580      	push	{r7, lr}
   1a856:	b082      	sub	sp, #8
   1a858:	af00      	add	r7, sp, #0
   1a85a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1a85c:	4b60      	ldr	r3, [pc, #384]	; (1a9e0 <prvAddNewTaskToReadyList+0x18c>)
   1a85e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1a860:	4b60      	ldr	r3, [pc, #384]	; (1a9e4 <prvAddNewTaskToReadyList+0x190>)
   1a862:	681b      	ldr	r3, [r3, #0]
   1a864:	1c5a      	adds	r2, r3, #1
   1a866:	4b5f      	ldr	r3, [pc, #380]	; (1a9e4 <prvAddNewTaskToReadyList+0x190>)
   1a868:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1a86a:	4b5f      	ldr	r3, [pc, #380]	; (1a9e8 <prvAddNewTaskToReadyList+0x194>)
   1a86c:	681b      	ldr	r3, [r3, #0]
   1a86e:	2b00      	cmp	r3, #0
   1a870:	d109      	bne.n	1a886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1a872:	4b5d      	ldr	r3, [pc, #372]	; (1a9e8 <prvAddNewTaskToReadyList+0x194>)
   1a874:	687a      	ldr	r2, [r7, #4]
   1a876:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1a878:	4b5a      	ldr	r3, [pc, #360]	; (1a9e4 <prvAddNewTaskToReadyList+0x190>)
   1a87a:	681b      	ldr	r3, [r3, #0]
   1a87c:	2b01      	cmp	r3, #1
   1a87e:	d110      	bne.n	1a8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1a880:	4b5a      	ldr	r3, [pc, #360]	; (1a9ec <prvAddNewTaskToReadyList+0x198>)
   1a882:	4798      	blx	r3
   1a884:	e00d      	b.n	1a8a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1a886:	4b5a      	ldr	r3, [pc, #360]	; (1a9f0 <prvAddNewTaskToReadyList+0x19c>)
   1a888:	681b      	ldr	r3, [r3, #0]
   1a88a:	2b00      	cmp	r3, #0
   1a88c:	d109      	bne.n	1a8a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1a88e:	4b56      	ldr	r3, [pc, #344]	; (1a9e8 <prvAddNewTaskToReadyList+0x194>)
   1a890:	681b      	ldr	r3, [r3, #0]
   1a892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a894:	687b      	ldr	r3, [r7, #4]
   1a896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a898:	429a      	cmp	r2, r3
   1a89a:	d802      	bhi.n	1a8a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1a89c:	4b52      	ldr	r3, [pc, #328]	; (1a9e8 <prvAddNewTaskToReadyList+0x194>)
   1a89e:	687a      	ldr	r2, [r7, #4]
   1a8a0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1a8a2:	4b54      	ldr	r3, [pc, #336]	; (1a9f4 <prvAddNewTaskToReadyList+0x1a0>)
   1a8a4:	681b      	ldr	r3, [r3, #0]
   1a8a6:	1c5a      	adds	r2, r3, #1
   1a8a8:	4b52      	ldr	r3, [pc, #328]	; (1a9f4 <prvAddNewTaskToReadyList+0x1a0>)
   1a8aa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1a8ac:	4b51      	ldr	r3, [pc, #324]	; (1a9f4 <prvAddNewTaskToReadyList+0x1a0>)
   1a8ae:	681a      	ldr	r2, [r3, #0]
   1a8b0:	687b      	ldr	r3, [r7, #4]
   1a8b2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1a8b4:	687b      	ldr	r3, [r7, #4]
   1a8b6:	2b00      	cmp	r3, #0
   1a8b8:	d052      	beq.n	1a960 <prvAddNewTaskToReadyList+0x10c>
   1a8ba:	2003      	movs	r0, #3
   1a8bc:	4b4e      	ldr	r3, [pc, #312]	; (1a9f8 <prvAddNewTaskToReadyList+0x1a4>)
   1a8be:	4798      	blx	r3
   1a8c0:	0003      	movs	r3, r0
   1a8c2:	b29a      	uxth	r2, r3
   1a8c4:	687b      	ldr	r3, [r7, #4]
   1a8c6:	0011      	movs	r1, r2
   1a8c8:	0018      	movs	r0, r3
   1a8ca:	4b4c      	ldr	r3, [pc, #304]	; (1a9fc <prvAddNewTaskToReadyList+0x1a8>)
   1a8cc:	4798      	blx	r3
   1a8ce:	4b4c      	ldr	r3, [pc, #304]	; (1aa00 <prvAddNewTaskToReadyList+0x1ac>)
   1a8d0:	881a      	ldrh	r2, [r3, #0]
   1a8d2:	687b      	ldr	r3, [r7, #4]
   1a8d4:	0011      	movs	r1, r2
   1a8d6:	0018      	movs	r0, r3
   1a8d8:	4b4a      	ldr	r3, [pc, #296]	; (1aa04 <prvAddNewTaskToReadyList+0x1b0>)
   1a8da:	4798      	blx	r3
   1a8dc:	687b      	ldr	r3, [r7, #4]
   1a8de:	0018      	movs	r0, r3
   1a8e0:	4b49      	ldr	r3, [pc, #292]	; (1aa08 <prvAddNewTaskToReadyList+0x1b4>)
   1a8e2:	4798      	blx	r3
   1a8e4:	0003      	movs	r3, r0
   1a8e6:	b2d9      	uxtb	r1, r3
   1a8e8:	687b      	ldr	r3, [r7, #4]
   1a8ea:	3334      	adds	r3, #52	; 0x34
   1a8ec:	001a      	movs	r2, r3
   1a8ee:	2003      	movs	r0, #3
   1a8f0:	4b46      	ldr	r3, [pc, #280]	; (1aa0c <prvAddNewTaskToReadyList+0x1b8>)
   1a8f2:	4798      	blx	r3
   1a8f4:	687b      	ldr	r3, [r7, #4]
   1a8f6:	0018      	movs	r0, r3
   1a8f8:	4b43      	ldr	r3, [pc, #268]	; (1aa08 <prvAddNewTaskToReadyList+0x1b4>)
   1a8fa:	4798      	blx	r3
   1a8fc:	0003      	movs	r3, r0
   1a8fe:	b2d9      	uxtb	r1, r3
   1a900:	687b      	ldr	r3, [r7, #4]
   1a902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a904:	b2db      	uxtb	r3, r3
   1a906:	001a      	movs	r2, r3
   1a908:	2003      	movs	r0, #3
   1a90a:	4b41      	ldr	r3, [pc, #260]	; (1aa10 <prvAddNewTaskToReadyList+0x1bc>)
   1a90c:	4798      	blx	r3
   1a90e:	4b41      	ldr	r3, [pc, #260]	; (1aa14 <prvAddNewTaskToReadyList+0x1c0>)
   1a910:	4798      	blx	r3
   1a912:	0003      	movs	r3, r0
   1a914:	0018      	movs	r0, r3
   1a916:	4b40      	ldr	r3, [pc, #256]	; (1aa18 <prvAddNewTaskToReadyList+0x1c4>)
   1a918:	4798      	blx	r3
   1a91a:	0003      	movs	r3, r0
   1a91c:	001a      	movs	r2, r3
   1a91e:	4b3f      	ldr	r3, [pc, #252]	; (1aa1c <prvAddNewTaskToReadyList+0x1c8>)
   1a920:	881b      	ldrh	r3, [r3, #0]
   1a922:	4013      	ands	r3, r2
   1a924:	b29b      	uxth	r3, r3
   1a926:	2b00      	cmp	r3, #0
   1a928:	d016      	beq.n	1a958 <prvAddNewTaskToReadyList+0x104>
   1a92a:	687b      	ldr	r3, [r7, #4]
   1a92c:	0018      	movs	r0, r3
   1a92e:	4b3a      	ldr	r3, [pc, #232]	; (1aa18 <prvAddNewTaskToReadyList+0x1c4>)
   1a930:	4798      	blx	r3
   1a932:	0003      	movs	r3, r0
   1a934:	001a      	movs	r2, r3
   1a936:	4b39      	ldr	r3, [pc, #228]	; (1aa1c <prvAddNewTaskToReadyList+0x1c8>)
   1a938:	881b      	ldrh	r3, [r3, #0]
   1a93a:	4013      	ands	r3, r2
   1a93c:	b29b      	uxth	r3, r3
   1a93e:	2b00      	cmp	r3, #0
   1a940:	d00a      	beq.n	1a958 <prvAddNewTaskToReadyList+0x104>
   1a942:	687b      	ldr	r3, [r7, #4]
   1a944:	0018      	movs	r0, r3
   1a946:	4b30      	ldr	r3, [pc, #192]	; (1aa08 <prvAddNewTaskToReadyList+0x1b4>)
   1a948:	4798      	blx	r3
   1a94a:	0003      	movs	r3, r0
   1a94c:	b2db      	uxtb	r3, r3
   1a94e:	001a      	movs	r2, r3
   1a950:	2103      	movs	r1, #3
   1a952:	201b      	movs	r0, #27
   1a954:	4b32      	ldr	r3, [pc, #200]	; (1aa20 <prvAddNewTaskToReadyList+0x1cc>)
   1a956:	4798      	blx	r3
   1a958:	687b      	ldr	r3, [r7, #4]
   1a95a:	0018      	movs	r0, r3
   1a95c:	4b31      	ldr	r3, [pc, #196]	; (1aa24 <prvAddNewTaskToReadyList+0x1d0>)
   1a95e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1a960:	687b      	ldr	r3, [r7, #4]
   1a962:	0018      	movs	r0, r3
   1a964:	4b2c      	ldr	r3, [pc, #176]	; (1aa18 <prvAddNewTaskToReadyList+0x1c4>)
   1a966:	4798      	blx	r3
   1a968:	0003      	movs	r3, r0
   1a96a:	001a      	movs	r2, r3
   1a96c:	4b2b      	ldr	r3, [pc, #172]	; (1aa1c <prvAddNewTaskToReadyList+0x1c8>)
   1a96e:	881b      	ldrh	r3, [r3, #0]
   1a970:	4013      	ands	r3, r2
   1a972:	b29b      	uxth	r3, r3
   1a974:	2b00      	cmp	r3, #0
   1a976:	d008      	beq.n	1a98a <prvAddNewTaskToReadyList+0x136>
   1a978:	687b      	ldr	r3, [r7, #4]
   1a97a:	0018      	movs	r0, r3
   1a97c:	4b22      	ldr	r3, [pc, #136]	; (1aa08 <prvAddNewTaskToReadyList+0x1b4>)
   1a97e:	4798      	blx	r3
   1a980:	0003      	movs	r3, r0
   1a982:	b2db      	uxtb	r3, r3
   1a984:	0018      	movs	r0, r3
   1a986:	4b28      	ldr	r3, [pc, #160]	; (1aa28 <prvAddNewTaskToReadyList+0x1d4>)
   1a988:	4798      	blx	r3
   1a98a:	687b      	ldr	r3, [r7, #4]
   1a98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a98e:	4b27      	ldr	r3, [pc, #156]	; (1aa2c <prvAddNewTaskToReadyList+0x1d8>)
   1a990:	681b      	ldr	r3, [r3, #0]
   1a992:	429a      	cmp	r2, r3
   1a994:	d903      	bls.n	1a99e <prvAddNewTaskToReadyList+0x14a>
   1a996:	687b      	ldr	r3, [r7, #4]
   1a998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a99a:	4b24      	ldr	r3, [pc, #144]	; (1aa2c <prvAddNewTaskToReadyList+0x1d8>)
   1a99c:	601a      	str	r2, [r3, #0]
   1a99e:	687b      	ldr	r3, [r7, #4]
   1a9a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a9a2:	0013      	movs	r3, r2
   1a9a4:	009b      	lsls	r3, r3, #2
   1a9a6:	189b      	adds	r3, r3, r2
   1a9a8:	009b      	lsls	r3, r3, #2
   1a9aa:	4a21      	ldr	r2, [pc, #132]	; (1aa30 <prvAddNewTaskToReadyList+0x1dc>)
   1a9ac:	189a      	adds	r2, r3, r2
   1a9ae:	687b      	ldr	r3, [r7, #4]
   1a9b0:	3304      	adds	r3, #4
   1a9b2:	0019      	movs	r1, r3
   1a9b4:	0010      	movs	r0, r2
   1a9b6:	4b1f      	ldr	r3, [pc, #124]	; (1aa34 <prvAddNewTaskToReadyList+0x1e0>)
   1a9b8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1a9ba:	4b1f      	ldr	r3, [pc, #124]	; (1aa38 <prvAddNewTaskToReadyList+0x1e4>)
   1a9bc:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1a9be:	4b0c      	ldr	r3, [pc, #48]	; (1a9f0 <prvAddNewTaskToReadyList+0x19c>)
   1a9c0:	681b      	ldr	r3, [r3, #0]
   1a9c2:	2b00      	cmp	r3, #0
   1a9c4:	d008      	beq.n	1a9d8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1a9c6:	4b08      	ldr	r3, [pc, #32]	; (1a9e8 <prvAddNewTaskToReadyList+0x194>)
   1a9c8:	681b      	ldr	r3, [r3, #0]
   1a9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a9cc:	687b      	ldr	r3, [r7, #4]
   1a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1a9d0:	429a      	cmp	r2, r3
   1a9d2:	d201      	bcs.n	1a9d8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1a9d4:	4b19      	ldr	r3, [pc, #100]	; (1aa3c <prvAddNewTaskToReadyList+0x1e8>)
   1a9d6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1a9d8:	46c0      	nop			; (mov r8, r8)
   1a9da:	46bd      	mov	sp, r7
   1a9dc:	b002      	add	sp, #8
   1a9de:	bd80      	pop	{r7, pc}
   1a9e0:	00018a49 	.word	0x00018a49
   1a9e4:	2000402c 	.word	0x2000402c
   1a9e8:	20003f54 	.word	0x20003f54
   1a9ec:	0001b575 	.word	0x0001b575
   1a9f0:	20004038 	.word	0x20004038
   1a9f4:	20004048 	.word	0x20004048
   1a9f8:	00017fc1 	.word	0x00017fc1
   1a9fc:	00016a65 	.word	0x00016a65
   1aa00:	20000112 	.word	0x20000112
   1aa04:	00016aa1 	.word	0x00016aa1
   1aa08:	00016a21 	.word	0x00016a21
   1aa0c:	000181f1 	.word	0x000181f1
   1aa10:	00017955 	.word	0x00017955
   1aa14:	00016cdd 	.word	0x00016cdd
   1aa18:	00016a41 	.word	0x00016a41
   1aa1c:	20000110 	.word	0x20000110
   1aa20:	00017439 	.word	0x00017439
   1aa24:	00016ba1 	.word	0x00016ba1
   1aa28:	000171f1 	.word	0x000171f1
   1aa2c:	20004034 	.word	0x20004034
   1aa30:	20003f58 	.word	0x20003f58
   1aa34:	0001880b 	.word	0x0001880b
   1aa38:	00018a6d 	.word	0x00018a6d
   1aa3c:	00018a31 	.word	0x00018a31

0001aa40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1aa40:	b580      	push	{r7, lr}
   1aa42:	b084      	sub	sp, #16
   1aa44:	af00      	add	r7, sp, #0
   1aa46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1aa48:	2300      	movs	r3, #0
   1aa4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1aa4c:	687b      	ldr	r3, [r7, #4]
   1aa4e:	2b00      	cmp	r3, #0
   1aa50:	d045      	beq.n	1aade <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1aa52:	4b27      	ldr	r3, [pc, #156]	; (1aaf0 <vTaskDelay+0xb0>)
   1aa54:	681b      	ldr	r3, [r3, #0]
   1aa56:	2b00      	cmp	r3, #0
   1aa58:	d001      	beq.n	1aa5e <vTaskDelay+0x1e>
   1aa5a:	b672      	cpsid	i
   1aa5c:	e7fe      	b.n	1aa5c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1aa5e:	4b25      	ldr	r3, [pc, #148]	; (1aaf4 <vTaskDelay+0xb4>)
   1aa60:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1aa62:	4b25      	ldr	r3, [pc, #148]	; (1aaf8 <vTaskDelay+0xb8>)
   1aa64:	681b      	ldr	r3, [r3, #0]
   1aa66:	0018      	movs	r0, r3
   1aa68:	4b24      	ldr	r3, [pc, #144]	; (1aafc <vTaskDelay+0xbc>)
   1aa6a:	4798      	blx	r3
   1aa6c:	0003      	movs	r3, r0
   1aa6e:	001a      	movs	r2, r3
   1aa70:	4b23      	ldr	r3, [pc, #140]	; (1ab00 <vTaskDelay+0xc0>)
   1aa72:	881b      	ldrh	r3, [r3, #0]
   1aa74:	4013      	ands	r3, r2
   1aa76:	b29b      	uxth	r3, r3
   1aa78:	2b00      	cmp	r3, #0
   1aa7a:	d00e      	beq.n	1aa9a <vTaskDelay+0x5a>
   1aa7c:	687b      	ldr	r3, [r7, #4]
   1aa7e:	0019      	movs	r1, r3
   1aa80:	2089      	movs	r0, #137	; 0x89
   1aa82:	4b20      	ldr	r3, [pc, #128]	; (1ab04 <vTaskDelay+0xc4>)
   1aa84:	4798      	blx	r3
   1aa86:	4b1c      	ldr	r3, [pc, #112]	; (1aaf8 <vTaskDelay+0xb8>)
   1aa88:	681b      	ldr	r3, [r3, #0]
   1aa8a:	0018      	movs	r0, r3
   1aa8c:	4b1e      	ldr	r3, [pc, #120]	; (1ab08 <vTaskDelay+0xc8>)
   1aa8e:	4798      	blx	r3
   1aa90:	0003      	movs	r3, r0
   1aa92:	b2db      	uxtb	r3, r3
   1aa94:	0018      	movs	r0, r3
   1aa96:	4b1d      	ldr	r3, [pc, #116]	; (1ab0c <vTaskDelay+0xcc>)
   1aa98:	4798      	blx	r3
   1aa9a:	4b1d      	ldr	r3, [pc, #116]	; (1ab10 <vTaskDelay+0xd0>)
   1aa9c:	4798      	blx	r3
   1aa9e:	0003      	movs	r3, r0
   1aaa0:	0018      	movs	r0, r3
   1aaa2:	4b16      	ldr	r3, [pc, #88]	; (1aafc <vTaskDelay+0xbc>)
   1aaa4:	4798      	blx	r3
   1aaa6:	0003      	movs	r3, r0
   1aaa8:	001a      	movs	r2, r3
   1aaaa:	4b15      	ldr	r3, [pc, #84]	; (1ab00 <vTaskDelay+0xc0>)
   1aaac:	881b      	ldrh	r3, [r3, #0]
   1aaae:	4013      	ands	r3, r2
   1aab0:	b29b      	uxth	r3, r3
   1aab2:	2b00      	cmp	r3, #0
   1aab4:	d00a      	beq.n	1aacc <vTaskDelay+0x8c>
   1aab6:	4b16      	ldr	r3, [pc, #88]	; (1ab10 <vTaskDelay+0xd0>)
   1aab8:	4798      	blx	r3
   1aaba:	0003      	movs	r3, r0
   1aabc:	0018      	movs	r0, r3
   1aabe:	4b12      	ldr	r3, [pc, #72]	; (1ab08 <vTaskDelay+0xc8>)
   1aac0:	4798      	blx	r3
   1aac2:	0003      	movs	r3, r0
   1aac4:	b2db      	uxtb	r3, r3
   1aac6:	0018      	movs	r0, r3
   1aac8:	4b10      	ldr	r3, [pc, #64]	; (1ab0c <vTaskDelay+0xcc>)
   1aaca:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1aacc:	687b      	ldr	r3, [r7, #4]
   1aace:	2100      	movs	r1, #0
   1aad0:	0018      	movs	r0, r3
   1aad2:	4b10      	ldr	r3, [pc, #64]	; (1ab14 <vTaskDelay+0xd4>)
   1aad4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1aad6:	4b10      	ldr	r3, [pc, #64]	; (1ab18 <vTaskDelay+0xd8>)
   1aad8:	4798      	blx	r3
   1aada:	0003      	movs	r3, r0
   1aadc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1aade:	68fb      	ldr	r3, [r7, #12]
   1aae0:	2b00      	cmp	r3, #0
   1aae2:	d101      	bne.n	1aae8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1aae4:	4b0d      	ldr	r3, [pc, #52]	; (1ab1c <vTaskDelay+0xdc>)
   1aae6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1aae8:	46c0      	nop			; (mov r8, r8)
   1aaea:	46bd      	mov	sp, r7
   1aaec:	b004      	add	sp, #16
   1aaee:	bd80      	pop	{r7, pc}
   1aaf0:	20004054 	.word	0x20004054
   1aaf4:	0001ad01 	.word	0x0001ad01
   1aaf8:	20003f54 	.word	0x20003f54
   1aafc:	00016a41 	.word	0x00016a41
   1ab00:	20000110 	.word	0x20000110
   1ab04:	00017741 	.word	0x00017741
   1ab08:	00016a21 	.word	0x00016a21
   1ab0c:	00017bd1 	.word	0x00017bd1
   1ab10:	00016cdd 	.word	0x00016cdd
   1ab14:	0001bc59 	.word	0x0001bc59
   1ab18:	0001ad19 	.word	0x0001ad19
   1ab1c:	00018a31 	.word	0x00018a31

0001ab20 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1ab20:	b580      	push	{r7, lr}
   1ab22:	b084      	sub	sp, #16
   1ab24:	af00      	add	r7, sp, #0
   1ab26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1ab28:	4b42      	ldr	r3, [pc, #264]	; (1ac34 <vTaskSuspend+0x114>)
   1ab2a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1ab2c:	687b      	ldr	r3, [r7, #4]
   1ab2e:	2b00      	cmp	r3, #0
   1ab30:	d102      	bne.n	1ab38 <vTaskSuspend+0x18>
   1ab32:	4b41      	ldr	r3, [pc, #260]	; (1ac38 <vTaskSuspend+0x118>)
   1ab34:	681b      	ldr	r3, [r3, #0]
   1ab36:	e000      	b.n	1ab3a <vTaskSuspend+0x1a>
   1ab38:	687b      	ldr	r3, [r7, #4]
   1ab3a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1ab3c:	4b3f      	ldr	r3, [pc, #252]	; (1ac3c <vTaskSuspend+0x11c>)
   1ab3e:	4798      	blx	r3
   1ab40:	0003      	movs	r3, r0
   1ab42:	0018      	movs	r0, r3
   1ab44:	4b3e      	ldr	r3, [pc, #248]	; (1ac40 <vTaskSuspend+0x120>)
   1ab46:	4798      	blx	r3
   1ab48:	0003      	movs	r3, r0
   1ab4a:	001a      	movs	r2, r3
   1ab4c:	4b3d      	ldr	r3, [pc, #244]	; (1ac44 <vTaskSuspend+0x124>)
   1ab4e:	881b      	ldrh	r3, [r3, #0]
   1ab50:	4013      	ands	r3, r2
   1ab52:	b29b      	uxth	r3, r3
   1ab54:	2b00      	cmp	r3, #0
   1ab56:	d016      	beq.n	1ab86 <vTaskSuspend+0x66>
   1ab58:	68fb      	ldr	r3, [r7, #12]
   1ab5a:	0018      	movs	r0, r3
   1ab5c:	4b38      	ldr	r3, [pc, #224]	; (1ac40 <vTaskSuspend+0x120>)
   1ab5e:	4798      	blx	r3
   1ab60:	0003      	movs	r3, r0
   1ab62:	001a      	movs	r2, r3
   1ab64:	4b37      	ldr	r3, [pc, #220]	; (1ac44 <vTaskSuspend+0x124>)
   1ab66:	881b      	ldrh	r3, [r3, #0]
   1ab68:	4013      	ands	r3, r2
   1ab6a:	b29b      	uxth	r3, r3
   1ab6c:	2b00      	cmp	r3, #0
   1ab6e:	d00a      	beq.n	1ab86 <vTaskSuspend+0x66>
   1ab70:	68fb      	ldr	r3, [r7, #12]
   1ab72:	0018      	movs	r0, r3
   1ab74:	4b34      	ldr	r3, [pc, #208]	; (1ac48 <vTaskSuspend+0x128>)
   1ab76:	4798      	blx	r3
   1ab78:	0003      	movs	r3, r0
   1ab7a:	b2db      	uxtb	r3, r3
   1ab7c:	001a      	movs	r2, r3
   1ab7e:	2103      	movs	r1, #3
   1ab80:	208a      	movs	r0, #138	; 0x8a
   1ab82:	4b32      	ldr	r3, [pc, #200]	; (1ac4c <vTaskSuspend+0x12c>)
   1ab84:	4798      	blx	r3
   1ab86:	68fb      	ldr	r3, [r7, #12]
   1ab88:	0018      	movs	r0, r3
   1ab8a:	4b2f      	ldr	r3, [pc, #188]	; (1ac48 <vTaskSuspend+0x128>)
   1ab8c:	4798      	blx	r3
   1ab8e:	0003      	movs	r3, r0
   1ab90:	b2db      	uxtb	r3, r3
   1ab92:	0018      	movs	r0, r3
   1ab94:	4b2e      	ldr	r3, [pc, #184]	; (1ac50 <vTaskSuspend+0x130>)
   1ab96:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ab98:	68fb      	ldr	r3, [r7, #12]
   1ab9a:	3304      	adds	r3, #4
   1ab9c:	0018      	movs	r0, r3
   1ab9e:	4b2d      	ldr	r3, [pc, #180]	; (1ac54 <vTaskSuspend+0x134>)
   1aba0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1aba2:	68fb      	ldr	r3, [r7, #12]
   1aba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1aba6:	2b00      	cmp	r3, #0
   1aba8:	d004      	beq.n	1abb4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1abaa:	68fb      	ldr	r3, [r7, #12]
   1abac:	3318      	adds	r3, #24
   1abae:	0018      	movs	r0, r3
   1abb0:	4b28      	ldr	r3, [pc, #160]	; (1ac54 <vTaskSuspend+0x134>)
   1abb2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1abb4:	68fb      	ldr	r3, [r7, #12]
   1abb6:	1d1a      	adds	r2, r3, #4
   1abb8:	4b27      	ldr	r3, [pc, #156]	; (1ac58 <vTaskSuspend+0x138>)
   1abba:	0011      	movs	r1, r2
   1abbc:	0018      	movs	r0, r3
   1abbe:	4b27      	ldr	r3, [pc, #156]	; (1ac5c <vTaskSuspend+0x13c>)
   1abc0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1abc2:	68fb      	ldr	r3, [r7, #12]
   1abc4:	2250      	movs	r2, #80	; 0x50
   1abc6:	5c9b      	ldrb	r3, [r3, r2]
   1abc8:	b2db      	uxtb	r3, r3
   1abca:	2b01      	cmp	r3, #1
   1abcc:	d103      	bne.n	1abd6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1abce:	68fb      	ldr	r3, [r7, #12]
   1abd0:	2250      	movs	r2, #80	; 0x50
   1abd2:	2100      	movs	r1, #0
   1abd4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1abd6:	4b22      	ldr	r3, [pc, #136]	; (1ac60 <vTaskSuspend+0x140>)
   1abd8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1abda:	4b22      	ldr	r3, [pc, #136]	; (1ac64 <vTaskSuspend+0x144>)
   1abdc:	681b      	ldr	r3, [r3, #0]
   1abde:	2b00      	cmp	r3, #0
   1abe0:	d005      	beq.n	1abee <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1abe2:	4b14      	ldr	r3, [pc, #80]	; (1ac34 <vTaskSuspend+0x114>)
   1abe4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1abe6:	4b20      	ldr	r3, [pc, #128]	; (1ac68 <vTaskSuspend+0x148>)
   1abe8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1abea:	4b1d      	ldr	r3, [pc, #116]	; (1ac60 <vTaskSuspend+0x140>)
   1abec:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1abee:	4b12      	ldr	r3, [pc, #72]	; (1ac38 <vTaskSuspend+0x118>)
   1abf0:	681b      	ldr	r3, [r3, #0]
   1abf2:	68fa      	ldr	r2, [r7, #12]
   1abf4:	429a      	cmp	r2, r3
   1abf6:	d118      	bne.n	1ac2a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1abf8:	4b1a      	ldr	r3, [pc, #104]	; (1ac64 <vTaskSuspend+0x144>)
   1abfa:	681b      	ldr	r3, [r3, #0]
   1abfc:	2b00      	cmp	r3, #0
   1abfe:	d008      	beq.n	1ac12 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1ac00:	4b1a      	ldr	r3, [pc, #104]	; (1ac6c <vTaskSuspend+0x14c>)
   1ac02:	681b      	ldr	r3, [r3, #0]
   1ac04:	2b00      	cmp	r3, #0
   1ac06:	d001      	beq.n	1ac0c <vTaskSuspend+0xec>
   1ac08:	b672      	cpsid	i
   1ac0a:	e7fe      	b.n	1ac0a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1ac0c:	4b18      	ldr	r3, [pc, #96]	; (1ac70 <vTaskSuspend+0x150>)
   1ac0e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ac10:	e00b      	b.n	1ac2a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1ac12:	4b11      	ldr	r3, [pc, #68]	; (1ac58 <vTaskSuspend+0x138>)
   1ac14:	681a      	ldr	r2, [r3, #0]
   1ac16:	4b17      	ldr	r3, [pc, #92]	; (1ac74 <vTaskSuspend+0x154>)
   1ac18:	681b      	ldr	r3, [r3, #0]
   1ac1a:	429a      	cmp	r2, r3
   1ac1c:	d103      	bne.n	1ac26 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1ac1e:	4b06      	ldr	r3, [pc, #24]	; (1ac38 <vTaskSuspend+0x118>)
   1ac20:	2200      	movs	r2, #0
   1ac22:	601a      	str	r2, [r3, #0]
	}
   1ac24:	e001      	b.n	1ac2a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1ac26:	4b14      	ldr	r3, [pc, #80]	; (1ac78 <vTaskSuspend+0x158>)
   1ac28:	4798      	blx	r3
	}
   1ac2a:	46c0      	nop			; (mov r8, r8)
   1ac2c:	46bd      	mov	sp, r7
   1ac2e:	b004      	add	sp, #16
   1ac30:	bd80      	pop	{r7, pc}
   1ac32:	46c0      	nop			; (mov r8, r8)
   1ac34:	00018a49 	.word	0x00018a49
   1ac38:	20003f54 	.word	0x20003f54
   1ac3c:	00016cdd 	.word	0x00016cdd
   1ac40:	00016a41 	.word	0x00016a41
   1ac44:	20000110 	.word	0x20000110
   1ac48:	00016a21 	.word	0x00016a21
   1ac4c:	00017439 	.word	0x00017439
   1ac50:	00017bd1 	.word	0x00017bd1
   1ac54:	000188bb 	.word	0x000188bb
   1ac58:	20004018 	.word	0x20004018
   1ac5c:	0001880b 	.word	0x0001880b
   1ac60:	00018a6d 	.word	0x00018a6d
   1ac64:	20004038 	.word	0x20004038
   1ac68:	0001b705 	.word	0x0001b705
   1ac6c:	20004054 	.word	0x20004054
   1ac70:	00018a31 	.word	0x00018a31
   1ac74:	2000402c 	.word	0x2000402c
   1ac78:	0001b095 	.word	0x0001b095

0001ac7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1ac7c:	b590      	push	{r4, r7, lr}
   1ac7e:	b085      	sub	sp, #20
   1ac80:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1ac82:	4916      	ldr	r1, [pc, #88]	; (1acdc <vTaskStartScheduler+0x60>)
   1ac84:	4816      	ldr	r0, [pc, #88]	; (1ace0 <vTaskStartScheduler+0x64>)
   1ac86:	4b17      	ldr	r3, [pc, #92]	; (1ace4 <vTaskStartScheduler+0x68>)
   1ac88:	9301      	str	r3, [sp, #4]
   1ac8a:	2300      	movs	r3, #0
   1ac8c:	9300      	str	r3, [sp, #0]
   1ac8e:	2300      	movs	r3, #0
   1ac90:	2296      	movs	r2, #150	; 0x96
   1ac92:	4c15      	ldr	r4, [pc, #84]	; (1ace8 <vTaskStartScheduler+0x6c>)
   1ac94:	47a0      	blx	r4
   1ac96:	0003      	movs	r3, r0
   1ac98:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1ac9a:	687b      	ldr	r3, [r7, #4]
   1ac9c:	2b01      	cmp	r3, #1
   1ac9e:	d103      	bne.n	1aca8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1aca0:	4b12      	ldr	r3, [pc, #72]	; (1acec <vTaskStartScheduler+0x70>)
   1aca2:	4798      	blx	r3
   1aca4:	0003      	movs	r3, r0
   1aca6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1aca8:	687b      	ldr	r3, [r7, #4]
   1acaa:	2b01      	cmp	r3, #1
   1acac:	d10d      	bne.n	1acca <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1acae:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1acb0:	4b0f      	ldr	r3, [pc, #60]	; (1acf0 <vTaskStartScheduler+0x74>)
   1acb2:	2201      	movs	r2, #1
   1acb4:	4252      	negs	r2, r2
   1acb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1acb8:	4b0e      	ldr	r3, [pc, #56]	; (1acf4 <vTaskStartScheduler+0x78>)
   1acba:	2201      	movs	r2, #1
   1acbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1acbe:	4b0e      	ldr	r3, [pc, #56]	; (1acf8 <vTaskStartScheduler+0x7c>)
   1acc0:	2200      	movs	r2, #0
   1acc2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1acc4:	4b0d      	ldr	r3, [pc, #52]	; (1acfc <vTaskStartScheduler+0x80>)
   1acc6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1acc8:	e004      	b.n	1acd4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1acca:	687b      	ldr	r3, [r7, #4]
   1accc:	3301      	adds	r3, #1
   1acce:	d101      	bne.n	1acd4 <vTaskStartScheduler+0x58>
   1acd0:	b672      	cpsid	i
   1acd2:	e7fe      	b.n	1acd2 <vTaskStartScheduler+0x56>
}
   1acd4:	46c0      	nop			; (mov r8, r8)
   1acd6:	46bd      	mov	sp, r7
   1acd8:	b003      	add	sp, #12
   1acda:	bd90      	pop	{r4, r7, pc}
   1acdc:	00036738 	.word	0x00036738
   1ace0:	0001b54d 	.word	0x0001b54d
   1ace4:	20004050 	.word	0x20004050
   1ace8:	0001a6a5 	.word	0x0001a6a5
   1acec:	0001bd0d 	.word	0x0001bd0d
   1acf0:	2000404c 	.word	0x2000404c
   1acf4:	20004038 	.word	0x20004038
   1acf8:	20004030 	.word	0x20004030
   1acfc:	000189d9 	.word	0x000189d9

0001ad00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1ad00:	b580      	push	{r7, lr}
   1ad02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1ad04:	4b03      	ldr	r3, [pc, #12]	; (1ad14 <vTaskSuspendAll+0x14>)
   1ad06:	681b      	ldr	r3, [r3, #0]
   1ad08:	1c5a      	adds	r2, r3, #1
   1ad0a:	4b02      	ldr	r3, [pc, #8]	; (1ad14 <vTaskSuspendAll+0x14>)
   1ad0c:	601a      	str	r2, [r3, #0]
}
   1ad0e:	46c0      	nop			; (mov r8, r8)
   1ad10:	46bd      	mov	sp, r7
   1ad12:	bd80      	pop	{r7, pc}
   1ad14:	20004054 	.word	0x20004054

0001ad18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1ad18:	b580      	push	{r7, lr}
   1ad1a:	b084      	sub	sp, #16
   1ad1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1ad1e:	2300      	movs	r3, #0
   1ad20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1ad22:	2300      	movs	r3, #0
   1ad24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1ad26:	4b45      	ldr	r3, [pc, #276]	; (1ae3c <xTaskResumeAll+0x124>)
   1ad28:	681b      	ldr	r3, [r3, #0]
   1ad2a:	2b00      	cmp	r3, #0
   1ad2c:	d101      	bne.n	1ad32 <xTaskResumeAll+0x1a>
   1ad2e:	b672      	cpsid	i
   1ad30:	e7fe      	b.n	1ad30 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1ad32:	4b43      	ldr	r3, [pc, #268]	; (1ae40 <xTaskResumeAll+0x128>)
   1ad34:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1ad36:	4b41      	ldr	r3, [pc, #260]	; (1ae3c <xTaskResumeAll+0x124>)
   1ad38:	681b      	ldr	r3, [r3, #0]
   1ad3a:	1e5a      	subs	r2, r3, #1
   1ad3c:	4b3f      	ldr	r3, [pc, #252]	; (1ae3c <xTaskResumeAll+0x124>)
   1ad3e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1ad40:	4b3e      	ldr	r3, [pc, #248]	; (1ae3c <xTaskResumeAll+0x124>)
   1ad42:	681b      	ldr	r3, [r3, #0]
   1ad44:	2b00      	cmp	r3, #0
   1ad46:	d000      	beq.n	1ad4a <xTaskResumeAll+0x32>
   1ad48:	e071      	b.n	1ae2e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1ad4a:	4b3e      	ldr	r3, [pc, #248]	; (1ae44 <xTaskResumeAll+0x12c>)
   1ad4c:	681b      	ldr	r3, [r3, #0]
   1ad4e:	2b00      	cmp	r3, #0
   1ad50:	d100      	bne.n	1ad54 <xTaskResumeAll+0x3c>
   1ad52:	e06c      	b.n	1ae2e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ad54:	e044      	b.n	1ade0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1ad56:	4b3c      	ldr	r3, [pc, #240]	; (1ae48 <xTaskResumeAll+0x130>)
   1ad58:	68db      	ldr	r3, [r3, #12]
   1ad5a:	68db      	ldr	r3, [r3, #12]
   1ad5c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1ad5e:	68fb      	ldr	r3, [r7, #12]
   1ad60:	3318      	adds	r3, #24
   1ad62:	0018      	movs	r0, r3
   1ad64:	4b39      	ldr	r3, [pc, #228]	; (1ae4c <xTaskResumeAll+0x134>)
   1ad66:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1ad68:	68fb      	ldr	r3, [r7, #12]
   1ad6a:	3304      	adds	r3, #4
   1ad6c:	0018      	movs	r0, r3
   1ad6e:	4b37      	ldr	r3, [pc, #220]	; (1ae4c <xTaskResumeAll+0x134>)
   1ad70:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1ad72:	68fb      	ldr	r3, [r7, #12]
   1ad74:	0018      	movs	r0, r3
   1ad76:	4b36      	ldr	r3, [pc, #216]	; (1ae50 <xTaskResumeAll+0x138>)
   1ad78:	4798      	blx	r3
   1ad7a:	0003      	movs	r3, r0
   1ad7c:	001a      	movs	r2, r3
   1ad7e:	4b35      	ldr	r3, [pc, #212]	; (1ae54 <xTaskResumeAll+0x13c>)
   1ad80:	881b      	ldrh	r3, [r3, #0]
   1ad82:	4013      	ands	r3, r2
   1ad84:	b29b      	uxth	r3, r3
   1ad86:	2b00      	cmp	r3, #0
   1ad88:	d008      	beq.n	1ad9c <xTaskResumeAll+0x84>
   1ad8a:	68fb      	ldr	r3, [r7, #12]
   1ad8c:	0018      	movs	r0, r3
   1ad8e:	4b32      	ldr	r3, [pc, #200]	; (1ae58 <xTaskResumeAll+0x140>)
   1ad90:	4798      	blx	r3
   1ad92:	0003      	movs	r3, r0
   1ad94:	b2db      	uxtb	r3, r3
   1ad96:	0018      	movs	r0, r3
   1ad98:	4b30      	ldr	r3, [pc, #192]	; (1ae5c <xTaskResumeAll+0x144>)
   1ad9a:	4798      	blx	r3
   1ad9c:	68fb      	ldr	r3, [r7, #12]
   1ad9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ada0:	4b2f      	ldr	r3, [pc, #188]	; (1ae60 <xTaskResumeAll+0x148>)
   1ada2:	681b      	ldr	r3, [r3, #0]
   1ada4:	429a      	cmp	r2, r3
   1ada6:	d903      	bls.n	1adb0 <xTaskResumeAll+0x98>
   1ada8:	68fb      	ldr	r3, [r7, #12]
   1adaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1adac:	4b2c      	ldr	r3, [pc, #176]	; (1ae60 <xTaskResumeAll+0x148>)
   1adae:	601a      	str	r2, [r3, #0]
   1adb0:	68fb      	ldr	r3, [r7, #12]
   1adb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1adb4:	0013      	movs	r3, r2
   1adb6:	009b      	lsls	r3, r3, #2
   1adb8:	189b      	adds	r3, r3, r2
   1adba:	009b      	lsls	r3, r3, #2
   1adbc:	4a29      	ldr	r2, [pc, #164]	; (1ae64 <xTaskResumeAll+0x14c>)
   1adbe:	189a      	adds	r2, r3, r2
   1adc0:	68fb      	ldr	r3, [r7, #12]
   1adc2:	3304      	adds	r3, #4
   1adc4:	0019      	movs	r1, r3
   1adc6:	0010      	movs	r0, r2
   1adc8:	4b27      	ldr	r3, [pc, #156]	; (1ae68 <xTaskResumeAll+0x150>)
   1adca:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1adcc:	68fb      	ldr	r3, [r7, #12]
   1adce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1add0:	4b26      	ldr	r3, [pc, #152]	; (1ae6c <xTaskResumeAll+0x154>)
   1add2:	681b      	ldr	r3, [r3, #0]
   1add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1add6:	429a      	cmp	r2, r3
   1add8:	d302      	bcc.n	1ade0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1adda:	4b25      	ldr	r3, [pc, #148]	; (1ae70 <xTaskResumeAll+0x158>)
   1addc:	2201      	movs	r2, #1
   1adde:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1ade0:	4b19      	ldr	r3, [pc, #100]	; (1ae48 <xTaskResumeAll+0x130>)
   1ade2:	681b      	ldr	r3, [r3, #0]
   1ade4:	2b00      	cmp	r3, #0
   1ade6:	d1b6      	bne.n	1ad56 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1ade8:	68fb      	ldr	r3, [r7, #12]
   1adea:	2b00      	cmp	r3, #0
   1adec:	d001      	beq.n	1adf2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1adee:	4b21      	ldr	r3, [pc, #132]	; (1ae74 <xTaskResumeAll+0x15c>)
   1adf0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1adf2:	4b21      	ldr	r3, [pc, #132]	; (1ae78 <xTaskResumeAll+0x160>)
   1adf4:	681b      	ldr	r3, [r3, #0]
   1adf6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1adf8:	687b      	ldr	r3, [r7, #4]
   1adfa:	2b00      	cmp	r3, #0
   1adfc:	d00f      	beq.n	1ae1e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1adfe:	4b1f      	ldr	r3, [pc, #124]	; (1ae7c <xTaskResumeAll+0x164>)
   1ae00:	4798      	blx	r3
   1ae02:	1e03      	subs	r3, r0, #0
   1ae04:	d002      	beq.n	1ae0c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1ae06:	4b1a      	ldr	r3, [pc, #104]	; (1ae70 <xTaskResumeAll+0x158>)
   1ae08:	2201      	movs	r2, #1
   1ae0a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1ae0c:	687b      	ldr	r3, [r7, #4]
   1ae0e:	3b01      	subs	r3, #1
   1ae10:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1ae12:	687b      	ldr	r3, [r7, #4]
   1ae14:	2b00      	cmp	r3, #0
   1ae16:	d1f2      	bne.n	1adfe <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1ae18:	4b17      	ldr	r3, [pc, #92]	; (1ae78 <xTaskResumeAll+0x160>)
   1ae1a:	2200      	movs	r2, #0
   1ae1c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1ae1e:	4b14      	ldr	r3, [pc, #80]	; (1ae70 <xTaskResumeAll+0x158>)
   1ae20:	681b      	ldr	r3, [r3, #0]
   1ae22:	2b00      	cmp	r3, #0
   1ae24:	d003      	beq.n	1ae2e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1ae26:	2301      	movs	r3, #1
   1ae28:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1ae2a:	4b15      	ldr	r3, [pc, #84]	; (1ae80 <xTaskResumeAll+0x168>)
   1ae2c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1ae2e:	4b15      	ldr	r3, [pc, #84]	; (1ae84 <xTaskResumeAll+0x16c>)
   1ae30:	4798      	blx	r3

	return xAlreadyYielded;
   1ae32:	68bb      	ldr	r3, [r7, #8]
}
   1ae34:	0018      	movs	r0, r3
   1ae36:	46bd      	mov	sp, r7
   1ae38:	b004      	add	sp, #16
   1ae3a:	bd80      	pop	{r7, pc}
   1ae3c:	20004054 	.word	0x20004054
   1ae40:	00018a49 	.word	0x00018a49
   1ae44:	2000402c 	.word	0x2000402c
   1ae48:	20003fec 	.word	0x20003fec
   1ae4c:	000188bb 	.word	0x000188bb
   1ae50:	00016a41 	.word	0x00016a41
   1ae54:	20000110 	.word	0x20000110
   1ae58:	00016a21 	.word	0x00016a21
   1ae5c:	000171f1 	.word	0x000171f1
   1ae60:	20004034 	.word	0x20004034
   1ae64:	20003f58 	.word	0x20003f58
   1ae68:	0001880b 	.word	0x0001880b
   1ae6c:	20003f54 	.word	0x20003f54
   1ae70:	20004040 	.word	0x20004040
   1ae74:	0001b705 	.word	0x0001b705
   1ae78:	2000403c 	.word	0x2000403c
   1ae7c:	0001aea5 	.word	0x0001aea5
   1ae80:	00018a31 	.word	0x00018a31
   1ae84:	00018a6d 	.word	0x00018a6d

0001ae88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1ae88:	b580      	push	{r7, lr}
   1ae8a:	b082      	sub	sp, #8
   1ae8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1ae8e:	4b04      	ldr	r3, [pc, #16]	; (1aea0 <xTaskGetTickCount+0x18>)
   1ae90:	681b      	ldr	r3, [r3, #0]
   1ae92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1ae94:	687b      	ldr	r3, [r7, #4]
}
   1ae96:	0018      	movs	r0, r3
   1ae98:	46bd      	mov	sp, r7
   1ae9a:	b002      	add	sp, #8
   1ae9c:	bd80      	pop	{r7, pc}
   1ae9e:	46c0      	nop			; (mov r8, r8)
   1aea0:	20004030 	.word	0x20004030

0001aea4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1aea4:	b580      	push	{r7, lr}
   1aea6:	b086      	sub	sp, #24
   1aea8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1aeaa:	2300      	movs	r3, #0
   1aeac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1aeae:	4b64      	ldr	r3, [pc, #400]	; (1b040 <xTaskIncrementTick+0x19c>)
   1aeb0:	681b      	ldr	r3, [r3, #0]
   1aeb2:	2b01      	cmp	r3, #1
   1aeb4:	d003      	beq.n	1aebe <xTaskIncrementTick+0x1a>
   1aeb6:	4b63      	ldr	r3, [pc, #396]	; (1b044 <xTaskIncrementTick+0x1a0>)
   1aeb8:	681b      	ldr	r3, [r3, #0]
   1aeba:	2b00      	cmp	r3, #0
   1aebc:	d107      	bne.n	1aece <xTaskIncrementTick+0x2a>
   1aebe:	4b62      	ldr	r3, [pc, #392]	; (1b048 <xTaskIncrementTick+0x1a4>)
   1aec0:	681b      	ldr	r3, [r3, #0]
   1aec2:	1c5a      	adds	r2, r3, #1
   1aec4:	4b60      	ldr	r3, [pc, #384]	; (1b048 <xTaskIncrementTick+0x1a4>)
   1aec6:	601a      	str	r2, [r3, #0]
   1aec8:	2000      	movs	r0, #0
   1aeca:	4b60      	ldr	r3, [pc, #384]	; (1b04c <xTaskIncrementTick+0x1a8>)
   1aecc:	4798      	blx	r3
   1aece:	4b5c      	ldr	r3, [pc, #368]	; (1b040 <xTaskIncrementTick+0x19c>)
   1aed0:	681b      	ldr	r3, [r3, #0]
   1aed2:	2b00      	cmp	r3, #0
   1aed4:	d106      	bne.n	1aee4 <xTaskIncrementTick+0x40>
   1aed6:	4b5e      	ldr	r3, [pc, #376]	; (1b050 <xTaskIncrementTick+0x1ac>)
   1aed8:	681b      	ldr	r3, [r3, #0]
   1aeda:	3301      	adds	r3, #1
   1aedc:	0019      	movs	r1, r3
   1aede:	2003      	movs	r0, #3
   1aee0:	4b5c      	ldr	r3, [pc, #368]	; (1b054 <xTaskIncrementTick+0x1b0>)
   1aee2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1aee4:	4b56      	ldr	r3, [pc, #344]	; (1b040 <xTaskIncrementTick+0x19c>)
   1aee6:	681b      	ldr	r3, [r3, #0]
   1aee8:	2b00      	cmp	r3, #0
   1aeea:	d000      	beq.n	1aeee <xTaskIncrementTick+0x4a>
   1aeec:	e098      	b.n	1b020 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1aeee:	4b58      	ldr	r3, [pc, #352]	; (1b050 <xTaskIncrementTick+0x1ac>)
   1aef0:	681b      	ldr	r3, [r3, #0]
   1aef2:	3301      	adds	r3, #1
   1aef4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1aef6:	4b56      	ldr	r3, [pc, #344]	; (1b050 <xTaskIncrementTick+0x1ac>)
   1aef8:	693a      	ldr	r2, [r7, #16]
   1aefa:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1aefc:	693b      	ldr	r3, [r7, #16]
   1aefe:	2b00      	cmp	r3, #0
   1af00:	d117      	bne.n	1af32 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1af02:	4b55      	ldr	r3, [pc, #340]	; (1b058 <xTaskIncrementTick+0x1b4>)
   1af04:	681b      	ldr	r3, [r3, #0]
   1af06:	681b      	ldr	r3, [r3, #0]
   1af08:	2b00      	cmp	r3, #0
   1af0a:	d001      	beq.n	1af10 <xTaskIncrementTick+0x6c>
   1af0c:	b672      	cpsid	i
   1af0e:	e7fe      	b.n	1af0e <xTaskIncrementTick+0x6a>
   1af10:	4b51      	ldr	r3, [pc, #324]	; (1b058 <xTaskIncrementTick+0x1b4>)
   1af12:	681b      	ldr	r3, [r3, #0]
   1af14:	60fb      	str	r3, [r7, #12]
   1af16:	4b51      	ldr	r3, [pc, #324]	; (1b05c <xTaskIncrementTick+0x1b8>)
   1af18:	681a      	ldr	r2, [r3, #0]
   1af1a:	4b4f      	ldr	r3, [pc, #316]	; (1b058 <xTaskIncrementTick+0x1b4>)
   1af1c:	601a      	str	r2, [r3, #0]
   1af1e:	4b4f      	ldr	r3, [pc, #316]	; (1b05c <xTaskIncrementTick+0x1b8>)
   1af20:	68fa      	ldr	r2, [r7, #12]
   1af22:	601a      	str	r2, [r3, #0]
   1af24:	4b4e      	ldr	r3, [pc, #312]	; (1b060 <xTaskIncrementTick+0x1bc>)
   1af26:	681b      	ldr	r3, [r3, #0]
   1af28:	1c5a      	adds	r2, r3, #1
   1af2a:	4b4d      	ldr	r3, [pc, #308]	; (1b060 <xTaskIncrementTick+0x1bc>)
   1af2c:	601a      	str	r2, [r3, #0]
   1af2e:	4b4d      	ldr	r3, [pc, #308]	; (1b064 <xTaskIncrementTick+0x1c0>)
   1af30:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1af32:	4b4d      	ldr	r3, [pc, #308]	; (1b068 <xTaskIncrementTick+0x1c4>)
   1af34:	681b      	ldr	r3, [r3, #0]
   1af36:	693a      	ldr	r2, [r7, #16]
   1af38:	429a      	cmp	r2, r3
   1af3a:	d363      	bcc.n	1b004 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1af3c:	4b46      	ldr	r3, [pc, #280]	; (1b058 <xTaskIncrementTick+0x1b4>)
   1af3e:	681b      	ldr	r3, [r3, #0]
   1af40:	681b      	ldr	r3, [r3, #0]
   1af42:	2b00      	cmp	r3, #0
   1af44:	d101      	bne.n	1af4a <xTaskIncrementTick+0xa6>
   1af46:	2301      	movs	r3, #1
   1af48:	e000      	b.n	1af4c <xTaskIncrementTick+0xa8>
   1af4a:	2300      	movs	r3, #0
   1af4c:	2b00      	cmp	r3, #0
   1af4e:	d004      	beq.n	1af5a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1af50:	4b45      	ldr	r3, [pc, #276]	; (1b068 <xTaskIncrementTick+0x1c4>)
   1af52:	2201      	movs	r2, #1
   1af54:	4252      	negs	r2, r2
   1af56:	601a      	str	r2, [r3, #0]
					break;
   1af58:	e054      	b.n	1b004 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1af5a:	4b3f      	ldr	r3, [pc, #252]	; (1b058 <xTaskIncrementTick+0x1b4>)
   1af5c:	681b      	ldr	r3, [r3, #0]
   1af5e:	68db      	ldr	r3, [r3, #12]
   1af60:	68db      	ldr	r3, [r3, #12]
   1af62:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1af64:	68bb      	ldr	r3, [r7, #8]
   1af66:	685b      	ldr	r3, [r3, #4]
   1af68:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1af6a:	693a      	ldr	r2, [r7, #16]
   1af6c:	687b      	ldr	r3, [r7, #4]
   1af6e:	429a      	cmp	r2, r3
   1af70:	d203      	bcs.n	1af7a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1af72:	4b3d      	ldr	r3, [pc, #244]	; (1b068 <xTaskIncrementTick+0x1c4>)
   1af74:	687a      	ldr	r2, [r7, #4]
   1af76:	601a      	str	r2, [r3, #0]
						break;
   1af78:	e044      	b.n	1b004 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1af7a:	68bb      	ldr	r3, [r7, #8]
   1af7c:	3304      	adds	r3, #4
   1af7e:	0018      	movs	r0, r3
   1af80:	4b3a      	ldr	r3, [pc, #232]	; (1b06c <xTaskIncrementTick+0x1c8>)
   1af82:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1af84:	68bb      	ldr	r3, [r7, #8]
   1af86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1af88:	2b00      	cmp	r3, #0
   1af8a:	d004      	beq.n	1af96 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1af8c:	68bb      	ldr	r3, [r7, #8]
   1af8e:	3318      	adds	r3, #24
   1af90:	0018      	movs	r0, r3
   1af92:	4b36      	ldr	r3, [pc, #216]	; (1b06c <xTaskIncrementTick+0x1c8>)
   1af94:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1af96:	68bb      	ldr	r3, [r7, #8]
   1af98:	0018      	movs	r0, r3
   1af9a:	4b35      	ldr	r3, [pc, #212]	; (1b070 <xTaskIncrementTick+0x1cc>)
   1af9c:	4798      	blx	r3
   1af9e:	0003      	movs	r3, r0
   1afa0:	001a      	movs	r2, r3
   1afa2:	4b34      	ldr	r3, [pc, #208]	; (1b074 <xTaskIncrementTick+0x1d0>)
   1afa4:	881b      	ldrh	r3, [r3, #0]
   1afa6:	4013      	ands	r3, r2
   1afa8:	b29b      	uxth	r3, r3
   1afaa:	2b00      	cmp	r3, #0
   1afac:	d008      	beq.n	1afc0 <xTaskIncrementTick+0x11c>
   1afae:	68bb      	ldr	r3, [r7, #8]
   1afb0:	0018      	movs	r0, r3
   1afb2:	4b31      	ldr	r3, [pc, #196]	; (1b078 <xTaskIncrementTick+0x1d4>)
   1afb4:	4798      	blx	r3
   1afb6:	0003      	movs	r3, r0
   1afb8:	b2db      	uxtb	r3, r3
   1afba:	0018      	movs	r0, r3
   1afbc:	4b2f      	ldr	r3, [pc, #188]	; (1b07c <xTaskIncrementTick+0x1d8>)
   1afbe:	4798      	blx	r3
   1afc0:	68bb      	ldr	r3, [r7, #8]
   1afc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1afc4:	4b2e      	ldr	r3, [pc, #184]	; (1b080 <xTaskIncrementTick+0x1dc>)
   1afc6:	681b      	ldr	r3, [r3, #0]
   1afc8:	429a      	cmp	r2, r3
   1afca:	d903      	bls.n	1afd4 <xTaskIncrementTick+0x130>
   1afcc:	68bb      	ldr	r3, [r7, #8]
   1afce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1afd0:	4b2b      	ldr	r3, [pc, #172]	; (1b080 <xTaskIncrementTick+0x1dc>)
   1afd2:	601a      	str	r2, [r3, #0]
   1afd4:	68bb      	ldr	r3, [r7, #8]
   1afd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1afd8:	0013      	movs	r3, r2
   1afda:	009b      	lsls	r3, r3, #2
   1afdc:	189b      	adds	r3, r3, r2
   1afde:	009b      	lsls	r3, r3, #2
   1afe0:	4a28      	ldr	r2, [pc, #160]	; (1b084 <xTaskIncrementTick+0x1e0>)
   1afe2:	189a      	adds	r2, r3, r2
   1afe4:	68bb      	ldr	r3, [r7, #8]
   1afe6:	3304      	adds	r3, #4
   1afe8:	0019      	movs	r1, r3
   1afea:	0010      	movs	r0, r2
   1afec:	4b26      	ldr	r3, [pc, #152]	; (1b088 <xTaskIncrementTick+0x1e4>)
   1afee:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1aff0:	68bb      	ldr	r3, [r7, #8]
   1aff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1aff4:	4b25      	ldr	r3, [pc, #148]	; (1b08c <xTaskIncrementTick+0x1e8>)
   1aff6:	681b      	ldr	r3, [r3, #0]
   1aff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1affa:	429a      	cmp	r2, r3
   1affc:	d39e      	bcc.n	1af3c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1affe:	2301      	movs	r3, #1
   1b000:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b002:	e79b      	b.n	1af3c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1b004:	4b21      	ldr	r3, [pc, #132]	; (1b08c <xTaskIncrementTick+0x1e8>)
   1b006:	681b      	ldr	r3, [r3, #0]
   1b008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b00a:	491e      	ldr	r1, [pc, #120]	; (1b084 <xTaskIncrementTick+0x1e0>)
   1b00c:	0013      	movs	r3, r2
   1b00e:	009b      	lsls	r3, r3, #2
   1b010:	189b      	adds	r3, r3, r2
   1b012:	009b      	lsls	r3, r3, #2
   1b014:	585b      	ldr	r3, [r3, r1]
   1b016:	2b01      	cmp	r3, #1
   1b018:	d907      	bls.n	1b02a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1b01a:	2301      	movs	r3, #1
   1b01c:	617b      	str	r3, [r7, #20]
   1b01e:	e004      	b.n	1b02a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1b020:	4b08      	ldr	r3, [pc, #32]	; (1b044 <xTaskIncrementTick+0x1a0>)
   1b022:	681b      	ldr	r3, [r3, #0]
   1b024:	1c5a      	adds	r2, r3, #1
   1b026:	4b07      	ldr	r3, [pc, #28]	; (1b044 <xTaskIncrementTick+0x1a0>)
   1b028:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1b02a:	4b19      	ldr	r3, [pc, #100]	; (1b090 <xTaskIncrementTick+0x1ec>)
   1b02c:	681b      	ldr	r3, [r3, #0]
   1b02e:	2b00      	cmp	r3, #0
   1b030:	d001      	beq.n	1b036 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1b032:	2301      	movs	r3, #1
   1b034:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1b036:	697b      	ldr	r3, [r7, #20]
}
   1b038:	0018      	movs	r0, r3
   1b03a:	46bd      	mov	sp, r7
   1b03c:	b006      	add	sp, #24
   1b03e:	bd80      	pop	{r7, pc}
   1b040:	20004054 	.word	0x20004054
   1b044:	2000403c 	.word	0x2000403c
   1b048:	20000bb4 	.word	0x20000bb4
   1b04c:	000186d5 	.word	0x000186d5
   1b050:	20004030 	.word	0x20004030
   1b054:	00017741 	.word	0x00017741
   1b058:	20003fe4 	.word	0x20003fe4
   1b05c:	20003fe8 	.word	0x20003fe8
   1b060:	20004044 	.word	0x20004044
   1b064:	0001b705 	.word	0x0001b705
   1b068:	2000404c 	.word	0x2000404c
   1b06c:	000188bb 	.word	0x000188bb
   1b070:	00016a41 	.word	0x00016a41
   1b074:	20000110 	.word	0x20000110
   1b078:	00016a21 	.word	0x00016a21
   1b07c:	000171f1 	.word	0x000171f1
   1b080:	20004034 	.word	0x20004034
   1b084:	20003f58 	.word	0x20003f58
   1b088:	0001880b 	.word	0x0001880b
   1b08c:	20003f54 	.word	0x20003f54
   1b090:	20004040 	.word	0x20004040

0001b094 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1b094:	b580      	push	{r7, lr}
   1b096:	b082      	sub	sp, #8
   1b098:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1b09a:	4b3a      	ldr	r3, [pc, #232]	; (1b184 <vTaskSwitchContext+0xf0>)
   1b09c:	681b      	ldr	r3, [r3, #0]
   1b09e:	2b00      	cmp	r3, #0
   1b0a0:	d003      	beq.n	1b0aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1b0a2:	4b39      	ldr	r3, [pc, #228]	; (1b188 <vTaskSwitchContext+0xf4>)
   1b0a4:	2201      	movs	r2, #1
   1b0a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1b0a8:	e067      	b.n	1b17a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1b0aa:	4b37      	ldr	r3, [pc, #220]	; (1b188 <vTaskSwitchContext+0xf4>)
   1b0ac:	2200      	movs	r2, #0
   1b0ae:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1b0b0:	4b36      	ldr	r3, [pc, #216]	; (1b18c <vTaskSwitchContext+0xf8>)
   1b0b2:	681b      	ldr	r3, [r3, #0]
   1b0b4:	681a      	ldr	r2, [r3, #0]
   1b0b6:	4b35      	ldr	r3, [pc, #212]	; (1b18c <vTaskSwitchContext+0xf8>)
   1b0b8:	681b      	ldr	r3, [r3, #0]
   1b0ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b0bc:	429a      	cmp	r2, r3
   1b0be:	d808      	bhi.n	1b0d2 <vTaskSwitchContext+0x3e>
   1b0c0:	4b32      	ldr	r3, [pc, #200]	; (1b18c <vTaskSwitchContext+0xf8>)
   1b0c2:	681a      	ldr	r2, [r3, #0]
   1b0c4:	4b31      	ldr	r3, [pc, #196]	; (1b18c <vTaskSwitchContext+0xf8>)
   1b0c6:	681b      	ldr	r3, [r3, #0]
   1b0c8:	3334      	adds	r3, #52	; 0x34
   1b0ca:	0019      	movs	r1, r3
   1b0cc:	0010      	movs	r0, r2
   1b0ce:	4b30      	ldr	r3, [pc, #192]	; (1b190 <vTaskSwitchContext+0xfc>)
   1b0d0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1b0d2:	4b30      	ldr	r3, [pc, #192]	; (1b194 <vTaskSwitchContext+0x100>)
   1b0d4:	681b      	ldr	r3, [r3, #0]
   1b0d6:	607b      	str	r3, [r7, #4]
   1b0d8:	e007      	b.n	1b0ea <vTaskSwitchContext+0x56>
   1b0da:	687b      	ldr	r3, [r7, #4]
   1b0dc:	2b00      	cmp	r3, #0
   1b0de:	d101      	bne.n	1b0e4 <vTaskSwitchContext+0x50>
   1b0e0:	b672      	cpsid	i
   1b0e2:	e7fe      	b.n	1b0e2 <vTaskSwitchContext+0x4e>
   1b0e4:	687b      	ldr	r3, [r7, #4]
   1b0e6:	3b01      	subs	r3, #1
   1b0e8:	607b      	str	r3, [r7, #4]
   1b0ea:	492b      	ldr	r1, [pc, #172]	; (1b198 <vTaskSwitchContext+0x104>)
   1b0ec:	687a      	ldr	r2, [r7, #4]
   1b0ee:	0013      	movs	r3, r2
   1b0f0:	009b      	lsls	r3, r3, #2
   1b0f2:	189b      	adds	r3, r3, r2
   1b0f4:	009b      	lsls	r3, r3, #2
   1b0f6:	585b      	ldr	r3, [r3, r1]
   1b0f8:	2b00      	cmp	r3, #0
   1b0fa:	d0ee      	beq.n	1b0da <vTaskSwitchContext+0x46>
   1b0fc:	687a      	ldr	r2, [r7, #4]
   1b0fe:	0013      	movs	r3, r2
   1b100:	009b      	lsls	r3, r3, #2
   1b102:	189b      	adds	r3, r3, r2
   1b104:	009b      	lsls	r3, r3, #2
   1b106:	4a24      	ldr	r2, [pc, #144]	; (1b198 <vTaskSwitchContext+0x104>)
   1b108:	189b      	adds	r3, r3, r2
   1b10a:	603b      	str	r3, [r7, #0]
   1b10c:	683b      	ldr	r3, [r7, #0]
   1b10e:	685b      	ldr	r3, [r3, #4]
   1b110:	685a      	ldr	r2, [r3, #4]
   1b112:	683b      	ldr	r3, [r7, #0]
   1b114:	605a      	str	r2, [r3, #4]
   1b116:	683b      	ldr	r3, [r7, #0]
   1b118:	685a      	ldr	r2, [r3, #4]
   1b11a:	683b      	ldr	r3, [r7, #0]
   1b11c:	3308      	adds	r3, #8
   1b11e:	429a      	cmp	r2, r3
   1b120:	d104      	bne.n	1b12c <vTaskSwitchContext+0x98>
   1b122:	683b      	ldr	r3, [r7, #0]
   1b124:	685b      	ldr	r3, [r3, #4]
   1b126:	685a      	ldr	r2, [r3, #4]
   1b128:	683b      	ldr	r3, [r7, #0]
   1b12a:	605a      	str	r2, [r3, #4]
   1b12c:	683b      	ldr	r3, [r7, #0]
   1b12e:	685b      	ldr	r3, [r3, #4]
   1b130:	68da      	ldr	r2, [r3, #12]
   1b132:	4b16      	ldr	r3, [pc, #88]	; (1b18c <vTaskSwitchContext+0xf8>)
   1b134:	601a      	str	r2, [r3, #0]
   1b136:	4b17      	ldr	r3, [pc, #92]	; (1b194 <vTaskSwitchContext+0x100>)
   1b138:	687a      	ldr	r2, [r7, #4]
   1b13a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1b13c:	4b17      	ldr	r3, [pc, #92]	; (1b19c <vTaskSwitchContext+0x108>)
   1b13e:	2201      	movs	r2, #1
   1b140:	601a      	str	r2, [r3, #0]
   1b142:	4b17      	ldr	r3, [pc, #92]	; (1b1a0 <vTaskSwitchContext+0x10c>)
   1b144:	4798      	blx	r3
   1b146:	0003      	movs	r3, r0
   1b148:	0018      	movs	r0, r3
   1b14a:	4b16      	ldr	r3, [pc, #88]	; (1b1a4 <vTaskSwitchContext+0x110>)
   1b14c:	4798      	blx	r3
   1b14e:	0003      	movs	r3, r0
   1b150:	001a      	movs	r2, r3
   1b152:	4b15      	ldr	r3, [pc, #84]	; (1b1a8 <vTaskSwitchContext+0x114>)
   1b154:	881b      	ldrh	r3, [r3, #0]
   1b156:	4013      	ands	r3, r2
   1b158:	b29b      	uxth	r3, r3
   1b15a:	2b00      	cmp	r3, #0
   1b15c:	d00a      	beq.n	1b174 <vTaskSwitchContext+0xe0>
   1b15e:	4b10      	ldr	r3, [pc, #64]	; (1b1a0 <vTaskSwitchContext+0x10c>)
   1b160:	4798      	blx	r3
   1b162:	0003      	movs	r3, r0
   1b164:	0018      	movs	r0, r3
   1b166:	4b11      	ldr	r3, [pc, #68]	; (1b1ac <vTaskSwitchContext+0x118>)
   1b168:	4798      	blx	r3
   1b16a:	0003      	movs	r3, r0
   1b16c:	b2db      	uxtb	r3, r3
   1b16e:	0018      	movs	r0, r3
   1b170:	4b0f      	ldr	r3, [pc, #60]	; (1b1b0 <vTaskSwitchContext+0x11c>)
   1b172:	4798      	blx	r3
   1b174:	4b09      	ldr	r3, [pc, #36]	; (1b19c <vTaskSwitchContext+0x108>)
   1b176:	2202      	movs	r2, #2
   1b178:	601a      	str	r2, [r3, #0]
}
   1b17a:	46c0      	nop			; (mov r8, r8)
   1b17c:	46bd      	mov	sp, r7
   1b17e:	b002      	add	sp, #8
   1b180:	bd80      	pop	{r7, pc}
   1b182:	46c0      	nop			; (mov r8, r8)
   1b184:	20004054 	.word	0x20004054
   1b188:	20004040 	.word	0x20004040
   1b18c:	20003f54 	.word	0x20003f54
   1b190:	000312f5 	.word	0x000312f5
   1b194:	20004034 	.word	0x20004034
   1b198:	20003f58 	.word	0x20003f58
   1b19c:	20000bc0 	.word	0x20000bc0
   1b1a0:	00016cdd 	.word	0x00016cdd
   1b1a4:	00016a41 	.word	0x00016a41
   1b1a8:	20000110 	.word	0x20000110
   1b1ac:	00016a21 	.word	0x00016a21
   1b1b0:	0001783d 	.word	0x0001783d

0001b1b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1b1b4:	b580      	push	{r7, lr}
   1b1b6:	b082      	sub	sp, #8
   1b1b8:	af00      	add	r7, sp, #0
   1b1ba:	6078      	str	r0, [r7, #4]
   1b1bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1b1be:	687b      	ldr	r3, [r7, #4]
   1b1c0:	2b00      	cmp	r3, #0
   1b1c2:	d101      	bne.n	1b1c8 <vTaskPlaceOnEventList+0x14>
   1b1c4:	b672      	cpsid	i
   1b1c6:	e7fe      	b.n	1b1c6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b1c8:	4b08      	ldr	r3, [pc, #32]	; (1b1ec <vTaskPlaceOnEventList+0x38>)
   1b1ca:	681b      	ldr	r3, [r3, #0]
   1b1cc:	3318      	adds	r3, #24
   1b1ce:	001a      	movs	r2, r3
   1b1d0:	687b      	ldr	r3, [r7, #4]
   1b1d2:	0011      	movs	r1, r2
   1b1d4:	0018      	movs	r0, r3
   1b1d6:	4b06      	ldr	r3, [pc, #24]	; (1b1f0 <vTaskPlaceOnEventList+0x3c>)
   1b1d8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1b1da:	683b      	ldr	r3, [r7, #0]
   1b1dc:	2101      	movs	r1, #1
   1b1de:	0018      	movs	r0, r3
   1b1e0:	4b04      	ldr	r3, [pc, #16]	; (1b1f4 <vTaskPlaceOnEventList+0x40>)
   1b1e2:	4798      	blx	r3
}
   1b1e4:	46c0      	nop			; (mov r8, r8)
   1b1e6:	46bd      	mov	sp, r7
   1b1e8:	b002      	add	sp, #8
   1b1ea:	bd80      	pop	{r7, pc}
   1b1ec:	20003f54 	.word	0x20003f54
   1b1f0:	0001884f 	.word	0x0001884f
   1b1f4:	0001bc59 	.word	0x0001bc59

0001b1f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1b1f8:	b580      	push	{r7, lr}
   1b1fa:	b084      	sub	sp, #16
   1b1fc:	af00      	add	r7, sp, #0
   1b1fe:	60f8      	str	r0, [r7, #12]
   1b200:	60b9      	str	r1, [r7, #8]
   1b202:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1b204:	68fb      	ldr	r3, [r7, #12]
   1b206:	2b00      	cmp	r3, #0
   1b208:	d101      	bne.n	1b20e <vTaskPlaceOnEventListRestricted+0x16>
   1b20a:	b672      	cpsid	i
   1b20c:	e7fe      	b.n	1b20c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1b20e:	4b28      	ldr	r3, [pc, #160]	; (1b2b0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b210:	681b      	ldr	r3, [r3, #0]
   1b212:	3318      	adds	r3, #24
   1b214:	001a      	movs	r2, r3
   1b216:	68fb      	ldr	r3, [r7, #12]
   1b218:	0011      	movs	r1, r2
   1b21a:	0018      	movs	r0, r3
   1b21c:	4b25      	ldr	r3, [pc, #148]	; (1b2b4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1b21e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1b220:	687b      	ldr	r3, [r7, #4]
   1b222:	2b00      	cmp	r3, #0
   1b224:	d002      	beq.n	1b22c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1b226:	2301      	movs	r3, #1
   1b228:	425b      	negs	r3, r3
   1b22a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1b22c:	4b20      	ldr	r3, [pc, #128]	; (1b2b0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b22e:	681b      	ldr	r3, [r3, #0]
   1b230:	0018      	movs	r0, r3
   1b232:	4b21      	ldr	r3, [pc, #132]	; (1b2b8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1b234:	4798      	blx	r3
   1b236:	0003      	movs	r3, r0
   1b238:	001a      	movs	r2, r3
   1b23a:	4b20      	ldr	r3, [pc, #128]	; (1b2bc <vTaskPlaceOnEventListRestricted+0xc4>)
   1b23c:	881b      	ldrh	r3, [r3, #0]
   1b23e:	4013      	ands	r3, r2
   1b240:	b29b      	uxth	r3, r3
   1b242:	2b00      	cmp	r3, #0
   1b244:	d011      	beq.n	1b26a <vTaskPlaceOnEventListRestricted+0x72>
   1b246:	4b1e      	ldr	r3, [pc, #120]	; (1b2c0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1b248:	681a      	ldr	r2, [r3, #0]
   1b24a:	68bb      	ldr	r3, [r7, #8]
   1b24c:	18d3      	adds	r3, r2, r3
   1b24e:	0019      	movs	r1, r3
   1b250:	2088      	movs	r0, #136	; 0x88
   1b252:	4b1c      	ldr	r3, [pc, #112]	; (1b2c4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1b254:	4798      	blx	r3
   1b256:	4b16      	ldr	r3, [pc, #88]	; (1b2b0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1b258:	681b      	ldr	r3, [r3, #0]
   1b25a:	0018      	movs	r0, r3
   1b25c:	4b1a      	ldr	r3, [pc, #104]	; (1b2c8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1b25e:	4798      	blx	r3
   1b260:	0003      	movs	r3, r0
   1b262:	b2db      	uxtb	r3, r3
   1b264:	0018      	movs	r0, r3
   1b266:	4b19      	ldr	r3, [pc, #100]	; (1b2cc <vTaskPlaceOnEventListRestricted+0xd4>)
   1b268:	4798      	blx	r3
   1b26a:	4b19      	ldr	r3, [pc, #100]	; (1b2d0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1b26c:	4798      	blx	r3
   1b26e:	0003      	movs	r3, r0
   1b270:	0018      	movs	r0, r3
   1b272:	4b11      	ldr	r3, [pc, #68]	; (1b2b8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1b274:	4798      	blx	r3
   1b276:	0003      	movs	r3, r0
   1b278:	001a      	movs	r2, r3
   1b27a:	4b10      	ldr	r3, [pc, #64]	; (1b2bc <vTaskPlaceOnEventListRestricted+0xc4>)
   1b27c:	881b      	ldrh	r3, [r3, #0]
   1b27e:	4013      	ands	r3, r2
   1b280:	b29b      	uxth	r3, r3
   1b282:	2b00      	cmp	r3, #0
   1b284:	d00a      	beq.n	1b29c <vTaskPlaceOnEventListRestricted+0xa4>
   1b286:	4b12      	ldr	r3, [pc, #72]	; (1b2d0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1b288:	4798      	blx	r3
   1b28a:	0003      	movs	r3, r0
   1b28c:	0018      	movs	r0, r3
   1b28e:	4b0e      	ldr	r3, [pc, #56]	; (1b2c8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1b290:	4798      	blx	r3
   1b292:	0003      	movs	r3, r0
   1b294:	b2db      	uxtb	r3, r3
   1b296:	0018      	movs	r0, r3
   1b298:	4b0c      	ldr	r3, [pc, #48]	; (1b2cc <vTaskPlaceOnEventListRestricted+0xd4>)
   1b29a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1b29c:	687a      	ldr	r2, [r7, #4]
   1b29e:	68bb      	ldr	r3, [r7, #8]
   1b2a0:	0011      	movs	r1, r2
   1b2a2:	0018      	movs	r0, r3
   1b2a4:	4b0b      	ldr	r3, [pc, #44]	; (1b2d4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1b2a6:	4798      	blx	r3
	}
   1b2a8:	46c0      	nop			; (mov r8, r8)
   1b2aa:	46bd      	mov	sp, r7
   1b2ac:	b004      	add	sp, #16
   1b2ae:	bd80      	pop	{r7, pc}
   1b2b0:	20003f54 	.word	0x20003f54
   1b2b4:	0001880b 	.word	0x0001880b
   1b2b8:	00016a41 	.word	0x00016a41
   1b2bc:	20000110 	.word	0x20000110
   1b2c0:	20004030 	.word	0x20004030
   1b2c4:	00017741 	.word	0x00017741
   1b2c8:	00016a21 	.word	0x00016a21
   1b2cc:	00017bd1 	.word	0x00017bd1
   1b2d0:	00016cdd 	.word	0x00016cdd
   1b2d4:	0001bc59 	.word	0x0001bc59

0001b2d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1b2d8:	b580      	push	{r7, lr}
   1b2da:	b084      	sub	sp, #16
   1b2dc:	af00      	add	r7, sp, #0
   1b2de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1b2e0:	687b      	ldr	r3, [r7, #4]
   1b2e2:	68db      	ldr	r3, [r3, #12]
   1b2e4:	68db      	ldr	r3, [r3, #12]
   1b2e6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1b2e8:	68bb      	ldr	r3, [r7, #8]
   1b2ea:	2b00      	cmp	r3, #0
   1b2ec:	d101      	bne.n	1b2f2 <xTaskRemoveFromEventList+0x1a>
   1b2ee:	b672      	cpsid	i
   1b2f0:	e7fe      	b.n	1b2f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1b2f2:	68bb      	ldr	r3, [r7, #8]
   1b2f4:	3318      	adds	r3, #24
   1b2f6:	0018      	movs	r0, r3
   1b2f8:	4b2a      	ldr	r3, [pc, #168]	; (1b3a4 <xTaskRemoveFromEventList+0xcc>)
   1b2fa:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b2fc:	4b2a      	ldr	r3, [pc, #168]	; (1b3a8 <xTaskRemoveFromEventList+0xd0>)
   1b2fe:	681b      	ldr	r3, [r3, #0]
   1b300:	2b00      	cmp	r3, #0
   1b302:	d132      	bne.n	1b36a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1b304:	68bb      	ldr	r3, [r7, #8]
   1b306:	3304      	adds	r3, #4
   1b308:	0018      	movs	r0, r3
   1b30a:	4b26      	ldr	r3, [pc, #152]	; (1b3a4 <xTaskRemoveFromEventList+0xcc>)
   1b30c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1b30e:	68bb      	ldr	r3, [r7, #8]
   1b310:	0018      	movs	r0, r3
   1b312:	4b26      	ldr	r3, [pc, #152]	; (1b3ac <xTaskRemoveFromEventList+0xd4>)
   1b314:	4798      	blx	r3
   1b316:	0003      	movs	r3, r0
   1b318:	001a      	movs	r2, r3
   1b31a:	4b25      	ldr	r3, [pc, #148]	; (1b3b0 <xTaskRemoveFromEventList+0xd8>)
   1b31c:	881b      	ldrh	r3, [r3, #0]
   1b31e:	4013      	ands	r3, r2
   1b320:	b29b      	uxth	r3, r3
   1b322:	2b00      	cmp	r3, #0
   1b324:	d008      	beq.n	1b338 <xTaskRemoveFromEventList+0x60>
   1b326:	68bb      	ldr	r3, [r7, #8]
   1b328:	0018      	movs	r0, r3
   1b32a:	4b22      	ldr	r3, [pc, #136]	; (1b3b4 <xTaskRemoveFromEventList+0xdc>)
   1b32c:	4798      	blx	r3
   1b32e:	0003      	movs	r3, r0
   1b330:	b2db      	uxtb	r3, r3
   1b332:	0018      	movs	r0, r3
   1b334:	4b20      	ldr	r3, [pc, #128]	; (1b3b8 <xTaskRemoveFromEventList+0xe0>)
   1b336:	4798      	blx	r3
   1b338:	68bb      	ldr	r3, [r7, #8]
   1b33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b33c:	4b1f      	ldr	r3, [pc, #124]	; (1b3bc <xTaskRemoveFromEventList+0xe4>)
   1b33e:	681b      	ldr	r3, [r3, #0]
   1b340:	429a      	cmp	r2, r3
   1b342:	d903      	bls.n	1b34c <xTaskRemoveFromEventList+0x74>
   1b344:	68bb      	ldr	r3, [r7, #8]
   1b346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b348:	4b1c      	ldr	r3, [pc, #112]	; (1b3bc <xTaskRemoveFromEventList+0xe4>)
   1b34a:	601a      	str	r2, [r3, #0]
   1b34c:	68bb      	ldr	r3, [r7, #8]
   1b34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b350:	0013      	movs	r3, r2
   1b352:	009b      	lsls	r3, r3, #2
   1b354:	189b      	adds	r3, r3, r2
   1b356:	009b      	lsls	r3, r3, #2
   1b358:	4a19      	ldr	r2, [pc, #100]	; (1b3c0 <xTaskRemoveFromEventList+0xe8>)
   1b35a:	189a      	adds	r2, r3, r2
   1b35c:	68bb      	ldr	r3, [r7, #8]
   1b35e:	3304      	adds	r3, #4
   1b360:	0019      	movs	r1, r3
   1b362:	0010      	movs	r0, r2
   1b364:	4b17      	ldr	r3, [pc, #92]	; (1b3c4 <xTaskRemoveFromEventList+0xec>)
   1b366:	4798      	blx	r3
   1b368:	e007      	b.n	1b37a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1b36a:	68bb      	ldr	r3, [r7, #8]
   1b36c:	3318      	adds	r3, #24
   1b36e:	001a      	movs	r2, r3
   1b370:	4b15      	ldr	r3, [pc, #84]	; (1b3c8 <xTaskRemoveFromEventList+0xf0>)
   1b372:	0011      	movs	r1, r2
   1b374:	0018      	movs	r0, r3
   1b376:	4b13      	ldr	r3, [pc, #76]	; (1b3c4 <xTaskRemoveFromEventList+0xec>)
   1b378:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1b37a:	68bb      	ldr	r3, [r7, #8]
   1b37c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b37e:	4b13      	ldr	r3, [pc, #76]	; (1b3cc <xTaskRemoveFromEventList+0xf4>)
   1b380:	681b      	ldr	r3, [r3, #0]
   1b382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b384:	429a      	cmp	r2, r3
   1b386:	d905      	bls.n	1b394 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1b388:	2301      	movs	r3, #1
   1b38a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1b38c:	4b10      	ldr	r3, [pc, #64]	; (1b3d0 <xTaskRemoveFromEventList+0xf8>)
   1b38e:	2201      	movs	r2, #1
   1b390:	601a      	str	r2, [r3, #0]
   1b392:	e001      	b.n	1b398 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1b394:	2300      	movs	r3, #0
   1b396:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1b398:	68fb      	ldr	r3, [r7, #12]
}
   1b39a:	0018      	movs	r0, r3
   1b39c:	46bd      	mov	sp, r7
   1b39e:	b004      	add	sp, #16
   1b3a0:	bd80      	pop	{r7, pc}
   1b3a2:	46c0      	nop			; (mov r8, r8)
   1b3a4:	000188bb 	.word	0x000188bb
   1b3a8:	20004054 	.word	0x20004054
   1b3ac:	00016a41 	.word	0x00016a41
   1b3b0:	20000110 	.word	0x20000110
   1b3b4:	00016a21 	.word	0x00016a21
   1b3b8:	000171f1 	.word	0x000171f1
   1b3bc:	20004034 	.word	0x20004034
   1b3c0:	20003f58 	.word	0x20003f58
   1b3c4:	0001880b 	.word	0x0001880b
   1b3c8:	20003fec 	.word	0x20003fec
   1b3cc:	20003f54 	.word	0x20003f54
   1b3d0:	20004040 	.word	0x20004040

0001b3d4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1b3d4:	b580      	push	{r7, lr}
   1b3d6:	b082      	sub	sp, #8
   1b3d8:	af00      	add	r7, sp, #0
   1b3da:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1b3dc:	687b      	ldr	r3, [r7, #4]
   1b3de:	2b00      	cmp	r3, #0
   1b3e0:	d101      	bne.n	1b3e6 <vTaskSetTimeOutState+0x12>
   1b3e2:	b672      	cpsid	i
   1b3e4:	e7fe      	b.n	1b3e4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1b3e6:	4b08      	ldr	r3, [pc, #32]	; (1b408 <vTaskSetTimeOutState+0x34>)
   1b3e8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1b3ea:	4b08      	ldr	r3, [pc, #32]	; (1b40c <vTaskSetTimeOutState+0x38>)
   1b3ec:	681a      	ldr	r2, [r3, #0]
   1b3ee:	687b      	ldr	r3, [r7, #4]
   1b3f0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1b3f2:	4b07      	ldr	r3, [pc, #28]	; (1b410 <vTaskSetTimeOutState+0x3c>)
   1b3f4:	681a      	ldr	r2, [r3, #0]
   1b3f6:	687b      	ldr	r3, [r7, #4]
   1b3f8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1b3fa:	4b06      	ldr	r3, [pc, #24]	; (1b414 <vTaskSetTimeOutState+0x40>)
   1b3fc:	4798      	blx	r3
}
   1b3fe:	46c0      	nop			; (mov r8, r8)
   1b400:	46bd      	mov	sp, r7
   1b402:	b002      	add	sp, #8
   1b404:	bd80      	pop	{r7, pc}
   1b406:	46c0      	nop			; (mov r8, r8)
   1b408:	00018a49 	.word	0x00018a49
   1b40c:	20004044 	.word	0x20004044
   1b410:	20004030 	.word	0x20004030
   1b414:	00018a6d 	.word	0x00018a6d

0001b418 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1b418:	b580      	push	{r7, lr}
   1b41a:	b082      	sub	sp, #8
   1b41c:	af00      	add	r7, sp, #0
   1b41e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1b420:	4b05      	ldr	r3, [pc, #20]	; (1b438 <vTaskInternalSetTimeOutState+0x20>)
   1b422:	681a      	ldr	r2, [r3, #0]
   1b424:	687b      	ldr	r3, [r7, #4]
   1b426:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1b428:	4b04      	ldr	r3, [pc, #16]	; (1b43c <vTaskInternalSetTimeOutState+0x24>)
   1b42a:	681a      	ldr	r2, [r3, #0]
   1b42c:	687b      	ldr	r3, [r7, #4]
   1b42e:	605a      	str	r2, [r3, #4]
}
   1b430:	46c0      	nop			; (mov r8, r8)
   1b432:	46bd      	mov	sp, r7
   1b434:	b002      	add	sp, #8
   1b436:	bd80      	pop	{r7, pc}
   1b438:	20004044 	.word	0x20004044
   1b43c:	20004030 	.word	0x20004030

0001b440 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1b440:	b580      	push	{r7, lr}
   1b442:	b086      	sub	sp, #24
   1b444:	af00      	add	r7, sp, #0
   1b446:	6078      	str	r0, [r7, #4]
   1b448:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1b44a:	687b      	ldr	r3, [r7, #4]
   1b44c:	2b00      	cmp	r3, #0
   1b44e:	d101      	bne.n	1b454 <xTaskCheckForTimeOut+0x14>
   1b450:	b672      	cpsid	i
   1b452:	e7fe      	b.n	1b452 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1b454:	683b      	ldr	r3, [r7, #0]
   1b456:	2b00      	cmp	r3, #0
   1b458:	d101      	bne.n	1b45e <xTaskCheckForTimeOut+0x1e>
   1b45a:	b672      	cpsid	i
   1b45c:	e7fe      	b.n	1b45c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1b45e:	4b1e      	ldr	r3, [pc, #120]	; (1b4d8 <xTaskCheckForTimeOut+0x98>)
   1b460:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1b462:	4b1e      	ldr	r3, [pc, #120]	; (1b4dc <xTaskCheckForTimeOut+0x9c>)
   1b464:	681b      	ldr	r3, [r3, #0]
   1b466:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1b468:	687b      	ldr	r3, [r7, #4]
   1b46a:	685b      	ldr	r3, [r3, #4]
   1b46c:	693a      	ldr	r2, [r7, #16]
   1b46e:	1ad3      	subs	r3, r2, r3
   1b470:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1b472:	683b      	ldr	r3, [r7, #0]
   1b474:	681b      	ldr	r3, [r3, #0]
   1b476:	3301      	adds	r3, #1
   1b478:	d102      	bne.n	1b480 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1b47a:	2300      	movs	r3, #0
   1b47c:	617b      	str	r3, [r7, #20]
   1b47e:	e024      	b.n	1b4ca <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1b480:	687b      	ldr	r3, [r7, #4]
   1b482:	681a      	ldr	r2, [r3, #0]
   1b484:	4b16      	ldr	r3, [pc, #88]	; (1b4e0 <xTaskCheckForTimeOut+0xa0>)
   1b486:	681b      	ldr	r3, [r3, #0]
   1b488:	429a      	cmp	r2, r3
   1b48a:	d007      	beq.n	1b49c <xTaskCheckForTimeOut+0x5c>
   1b48c:	687b      	ldr	r3, [r7, #4]
   1b48e:	685a      	ldr	r2, [r3, #4]
   1b490:	693b      	ldr	r3, [r7, #16]
   1b492:	429a      	cmp	r2, r3
   1b494:	d802      	bhi.n	1b49c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1b496:	2301      	movs	r3, #1
   1b498:	617b      	str	r3, [r7, #20]
   1b49a:	e016      	b.n	1b4ca <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1b49c:	683b      	ldr	r3, [r7, #0]
   1b49e:	681a      	ldr	r2, [r3, #0]
   1b4a0:	68fb      	ldr	r3, [r7, #12]
   1b4a2:	429a      	cmp	r2, r3
   1b4a4:	d90c      	bls.n	1b4c0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1b4a6:	683b      	ldr	r3, [r7, #0]
   1b4a8:	681a      	ldr	r2, [r3, #0]
   1b4aa:	68fb      	ldr	r3, [r7, #12]
   1b4ac:	1ad2      	subs	r2, r2, r3
   1b4ae:	683b      	ldr	r3, [r7, #0]
   1b4b0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1b4b2:	687b      	ldr	r3, [r7, #4]
   1b4b4:	0018      	movs	r0, r3
   1b4b6:	4b0b      	ldr	r3, [pc, #44]	; (1b4e4 <xTaskCheckForTimeOut+0xa4>)
   1b4b8:	4798      	blx	r3
			xReturn = pdFALSE;
   1b4ba:	2300      	movs	r3, #0
   1b4bc:	617b      	str	r3, [r7, #20]
   1b4be:	e004      	b.n	1b4ca <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1b4c0:	683b      	ldr	r3, [r7, #0]
   1b4c2:	2200      	movs	r2, #0
   1b4c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1b4c6:	2301      	movs	r3, #1
   1b4c8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1b4ca:	4b07      	ldr	r3, [pc, #28]	; (1b4e8 <xTaskCheckForTimeOut+0xa8>)
   1b4cc:	4798      	blx	r3

	return xReturn;
   1b4ce:	697b      	ldr	r3, [r7, #20]
}
   1b4d0:	0018      	movs	r0, r3
   1b4d2:	46bd      	mov	sp, r7
   1b4d4:	b006      	add	sp, #24
   1b4d6:	bd80      	pop	{r7, pc}
   1b4d8:	00018a49 	.word	0x00018a49
   1b4dc:	20004030 	.word	0x20004030
   1b4e0:	20004044 	.word	0x20004044
   1b4e4:	0001b419 	.word	0x0001b419
   1b4e8:	00018a6d 	.word	0x00018a6d

0001b4ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1b4ec:	b580      	push	{r7, lr}
   1b4ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1b4f0:	4b02      	ldr	r3, [pc, #8]	; (1b4fc <vTaskMissedYield+0x10>)
   1b4f2:	2201      	movs	r2, #1
   1b4f4:	601a      	str	r2, [r3, #0]
}
   1b4f6:	46c0      	nop			; (mov r8, r8)
   1b4f8:	46bd      	mov	sp, r7
   1b4fa:	bd80      	pop	{r7, pc}
   1b4fc:	20004040 	.word	0x20004040

0001b500 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1b500:	b580      	push	{r7, lr}
   1b502:	b084      	sub	sp, #16
   1b504:	af00      	add	r7, sp, #0
   1b506:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1b508:	687b      	ldr	r3, [r7, #4]
   1b50a:	2b00      	cmp	r3, #0
   1b50c:	d005      	beq.n	1b51a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1b50e:	687b      	ldr	r3, [r7, #4]
   1b510:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1b512:	68bb      	ldr	r3, [r7, #8]
   1b514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b516:	60fb      	str	r3, [r7, #12]
   1b518:	e001      	b.n	1b51e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1b51a:	2300      	movs	r3, #0
   1b51c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1b51e:	68fb      	ldr	r3, [r7, #12]
	}
   1b520:	0018      	movs	r0, r3
   1b522:	46bd      	mov	sp, r7
   1b524:	b004      	add	sp, #16
   1b526:	bd80      	pop	{r7, pc}

0001b528 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1b528:	b580      	push	{r7, lr}
   1b52a:	b084      	sub	sp, #16
   1b52c:	af00      	add	r7, sp, #0
   1b52e:	6078      	str	r0, [r7, #4]
   1b530:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1b532:	687b      	ldr	r3, [r7, #4]
   1b534:	2b00      	cmp	r3, #0
   1b536:	d004      	beq.n	1b542 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1b538:	687b      	ldr	r3, [r7, #4]
   1b53a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1b53c:	68fb      	ldr	r3, [r7, #12]
   1b53e:	683a      	ldr	r2, [r7, #0]
   1b540:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1b542:	46c0      	nop			; (mov r8, r8)
   1b544:	46bd      	mov	sp, r7
   1b546:	b004      	add	sp, #16
   1b548:	bd80      	pop	{r7, pc}
	...

0001b54c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1b54c:	b580      	push	{r7, lr}
   1b54e:	b082      	sub	sp, #8
   1b550:	af00      	add	r7, sp, #0
   1b552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1b554:	4b04      	ldr	r3, [pc, #16]	; (1b568 <prvIdleTask+0x1c>)
   1b556:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1b558:	4b04      	ldr	r3, [pc, #16]	; (1b56c <prvIdleTask+0x20>)
   1b55a:	681b      	ldr	r3, [r3, #0]
   1b55c:	2b01      	cmp	r3, #1
   1b55e:	d9f9      	bls.n	1b554 <prvIdleTask+0x8>
			{
				taskYIELD();
   1b560:	4b03      	ldr	r3, [pc, #12]	; (1b570 <prvIdleTask+0x24>)
   1b562:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1b564:	e7f6      	b.n	1b554 <prvIdleTask+0x8>
   1b566:	46c0      	nop			; (mov r8, r8)
   1b568:	0001b601 	.word	0x0001b601
   1b56c:	20003f58 	.word	0x20003f58
   1b570:	00018a31 	.word	0x00018a31

0001b574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1b574:	b580      	push	{r7, lr}
   1b576:	b082      	sub	sp, #8
   1b578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1b57a:	2300      	movs	r3, #0
   1b57c:	607b      	str	r3, [r7, #4]
   1b57e:	e00c      	b.n	1b59a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1b580:	687a      	ldr	r2, [r7, #4]
   1b582:	0013      	movs	r3, r2
   1b584:	009b      	lsls	r3, r3, #2
   1b586:	189b      	adds	r3, r3, r2
   1b588:	009b      	lsls	r3, r3, #2
   1b58a:	4a14      	ldr	r2, [pc, #80]	; (1b5dc <prvInitialiseTaskLists+0x68>)
   1b58c:	189b      	adds	r3, r3, r2
   1b58e:	0018      	movs	r0, r3
   1b590:	4b13      	ldr	r3, [pc, #76]	; (1b5e0 <prvInitialiseTaskLists+0x6c>)
   1b592:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1b594:	687b      	ldr	r3, [r7, #4]
   1b596:	3301      	adds	r3, #1
   1b598:	607b      	str	r3, [r7, #4]
   1b59a:	687b      	ldr	r3, [r7, #4]
   1b59c:	2b04      	cmp	r3, #4
   1b59e:	d9ef      	bls.n	1b580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1b5a0:	4b10      	ldr	r3, [pc, #64]	; (1b5e4 <prvInitialiseTaskLists+0x70>)
   1b5a2:	0018      	movs	r0, r3
   1b5a4:	4b0e      	ldr	r3, [pc, #56]	; (1b5e0 <prvInitialiseTaskLists+0x6c>)
   1b5a6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1b5a8:	4b0f      	ldr	r3, [pc, #60]	; (1b5e8 <prvInitialiseTaskLists+0x74>)
   1b5aa:	0018      	movs	r0, r3
   1b5ac:	4b0c      	ldr	r3, [pc, #48]	; (1b5e0 <prvInitialiseTaskLists+0x6c>)
   1b5ae:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1b5b0:	4b0e      	ldr	r3, [pc, #56]	; (1b5ec <prvInitialiseTaskLists+0x78>)
   1b5b2:	0018      	movs	r0, r3
   1b5b4:	4b0a      	ldr	r3, [pc, #40]	; (1b5e0 <prvInitialiseTaskLists+0x6c>)
   1b5b6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1b5b8:	4b0d      	ldr	r3, [pc, #52]	; (1b5f0 <prvInitialiseTaskLists+0x7c>)
   1b5ba:	0018      	movs	r0, r3
   1b5bc:	4b08      	ldr	r3, [pc, #32]	; (1b5e0 <prvInitialiseTaskLists+0x6c>)
   1b5be:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1b5c0:	4b0c      	ldr	r3, [pc, #48]	; (1b5f4 <prvInitialiseTaskLists+0x80>)
   1b5c2:	0018      	movs	r0, r3
   1b5c4:	4b06      	ldr	r3, [pc, #24]	; (1b5e0 <prvInitialiseTaskLists+0x6c>)
   1b5c6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1b5c8:	4b0b      	ldr	r3, [pc, #44]	; (1b5f8 <prvInitialiseTaskLists+0x84>)
   1b5ca:	4a06      	ldr	r2, [pc, #24]	; (1b5e4 <prvInitialiseTaskLists+0x70>)
   1b5cc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1b5ce:	4b0b      	ldr	r3, [pc, #44]	; (1b5fc <prvInitialiseTaskLists+0x88>)
   1b5d0:	4a05      	ldr	r2, [pc, #20]	; (1b5e8 <prvInitialiseTaskLists+0x74>)
   1b5d2:	601a      	str	r2, [r3, #0]
}
   1b5d4:	46c0      	nop			; (mov r8, r8)
   1b5d6:	46bd      	mov	sp, r7
   1b5d8:	b002      	add	sp, #8
   1b5da:	bd80      	pop	{r7, pc}
   1b5dc:	20003f58 	.word	0x20003f58
   1b5e0:	000187b9 	.word	0x000187b9
   1b5e4:	20003fbc 	.word	0x20003fbc
   1b5e8:	20003fd0 	.word	0x20003fd0
   1b5ec:	20003fec 	.word	0x20003fec
   1b5f0:	20004000 	.word	0x20004000
   1b5f4:	20004018 	.word	0x20004018
   1b5f8:	20003fe4 	.word	0x20003fe4
   1b5fc:	20003fe8 	.word	0x20003fe8

0001b600 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1b600:	b580      	push	{r7, lr}
   1b602:	b082      	sub	sp, #8
   1b604:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1b606:	e01a      	b.n	1b63e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1b608:	4b11      	ldr	r3, [pc, #68]	; (1b650 <prvCheckTasksWaitingTermination+0x50>)
   1b60a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1b60c:	4b11      	ldr	r3, [pc, #68]	; (1b654 <prvCheckTasksWaitingTermination+0x54>)
   1b60e:	68db      	ldr	r3, [r3, #12]
   1b610:	68db      	ldr	r3, [r3, #12]
   1b612:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1b614:	687b      	ldr	r3, [r7, #4]
   1b616:	3304      	adds	r3, #4
   1b618:	0018      	movs	r0, r3
   1b61a:	4b0f      	ldr	r3, [pc, #60]	; (1b658 <prvCheckTasksWaitingTermination+0x58>)
   1b61c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1b61e:	4b0f      	ldr	r3, [pc, #60]	; (1b65c <prvCheckTasksWaitingTermination+0x5c>)
   1b620:	681b      	ldr	r3, [r3, #0]
   1b622:	1e5a      	subs	r2, r3, #1
   1b624:	4b0d      	ldr	r3, [pc, #52]	; (1b65c <prvCheckTasksWaitingTermination+0x5c>)
   1b626:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1b628:	4b0d      	ldr	r3, [pc, #52]	; (1b660 <prvCheckTasksWaitingTermination+0x60>)
   1b62a:	681b      	ldr	r3, [r3, #0]
   1b62c:	1e5a      	subs	r2, r3, #1
   1b62e:	4b0c      	ldr	r3, [pc, #48]	; (1b660 <prvCheckTasksWaitingTermination+0x60>)
   1b630:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1b632:	4b0c      	ldr	r3, [pc, #48]	; (1b664 <prvCheckTasksWaitingTermination+0x64>)
   1b634:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1b636:	687b      	ldr	r3, [r7, #4]
   1b638:	0018      	movs	r0, r3
   1b63a:	4b0b      	ldr	r3, [pc, #44]	; (1b668 <prvCheckTasksWaitingTermination+0x68>)
   1b63c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1b63e:	4b08      	ldr	r3, [pc, #32]	; (1b660 <prvCheckTasksWaitingTermination+0x60>)
   1b640:	681b      	ldr	r3, [r3, #0]
   1b642:	2b00      	cmp	r3, #0
   1b644:	d1e0      	bne.n	1b608 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1b646:	46c0      	nop			; (mov r8, r8)
   1b648:	46bd      	mov	sp, r7
   1b64a:	b002      	add	sp, #8
   1b64c:	bd80      	pop	{r7, pc}
   1b64e:	46c0      	nop			; (mov r8, r8)
   1b650:	00018a49 	.word	0x00018a49
   1b654:	20004000 	.word	0x20004000
   1b658:	000188bb 	.word	0x000188bb
   1b65c:	2000402c 	.word	0x2000402c
   1b660:	20004014 	.word	0x20004014
   1b664:	00018a6d 	.word	0x00018a6d
   1b668:	0001b6dd 	.word	0x0001b6dd

0001b66c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1b66c:	b580      	push	{r7, lr}
   1b66e:	b084      	sub	sp, #16
   1b670:	af00      	add	r7, sp, #0
   1b672:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1b674:	2300      	movs	r3, #0
   1b676:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1b678:	e005      	b.n	1b686 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1b67a:	687b      	ldr	r3, [r7, #4]
   1b67c:	3301      	adds	r3, #1
   1b67e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1b680:	68fb      	ldr	r3, [r7, #12]
   1b682:	3301      	adds	r3, #1
   1b684:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1b686:	687b      	ldr	r3, [r7, #4]
   1b688:	781b      	ldrb	r3, [r3, #0]
   1b68a:	2ba5      	cmp	r3, #165	; 0xa5
   1b68c:	d0f5      	beq.n	1b67a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1b68e:	68fb      	ldr	r3, [r7, #12]
   1b690:	089b      	lsrs	r3, r3, #2
   1b692:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1b694:	68fb      	ldr	r3, [r7, #12]
   1b696:	b29b      	uxth	r3, r3
	}
   1b698:	0018      	movs	r0, r3
   1b69a:	46bd      	mov	sp, r7
   1b69c:	b004      	add	sp, #16
   1b69e:	bd80      	pop	{r7, pc}

0001b6a0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1b6a0:	b580      	push	{r7, lr}
   1b6a2:	b086      	sub	sp, #24
   1b6a4:	af00      	add	r7, sp, #0
   1b6a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1b6a8:	687b      	ldr	r3, [r7, #4]
   1b6aa:	2b00      	cmp	r3, #0
   1b6ac:	d102      	bne.n	1b6b4 <uxTaskGetStackHighWaterMark+0x14>
   1b6ae:	4b09      	ldr	r3, [pc, #36]	; (1b6d4 <uxTaskGetStackHighWaterMark+0x34>)
   1b6b0:	681b      	ldr	r3, [r3, #0]
   1b6b2:	e000      	b.n	1b6b6 <uxTaskGetStackHighWaterMark+0x16>
   1b6b4:	687b      	ldr	r3, [r7, #4]
   1b6b6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1b6b8:	697b      	ldr	r3, [r7, #20]
   1b6ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b6bc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1b6be:	693b      	ldr	r3, [r7, #16]
   1b6c0:	0018      	movs	r0, r3
   1b6c2:	4b05      	ldr	r3, [pc, #20]	; (1b6d8 <uxTaskGetStackHighWaterMark+0x38>)
   1b6c4:	4798      	blx	r3
   1b6c6:	0003      	movs	r3, r0
   1b6c8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1b6ca:	68fb      	ldr	r3, [r7, #12]
	}
   1b6cc:	0018      	movs	r0, r3
   1b6ce:	46bd      	mov	sp, r7
   1b6d0:	b006      	add	sp, #24
   1b6d2:	bd80      	pop	{r7, pc}
   1b6d4:	20003f54 	.word	0x20003f54
   1b6d8:	0001b66d 	.word	0x0001b66d

0001b6dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1b6dc:	b580      	push	{r7, lr}
   1b6de:	b082      	sub	sp, #8
   1b6e0:	af00      	add	r7, sp, #0
   1b6e2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1b6e4:	687b      	ldr	r3, [r7, #4]
   1b6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1b6e8:	0018      	movs	r0, r3
   1b6ea:	4b05      	ldr	r3, [pc, #20]	; (1b700 <prvDeleteTCB+0x24>)
   1b6ec:	4798      	blx	r3
			vPortFree( pxTCB );
   1b6ee:	687b      	ldr	r3, [r7, #4]
   1b6f0:	0018      	movs	r0, r3
   1b6f2:	4b03      	ldr	r3, [pc, #12]	; (1b700 <prvDeleteTCB+0x24>)
   1b6f4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1b6f6:	46c0      	nop			; (mov r8, r8)
   1b6f8:	46bd      	mov	sp, r7
   1b6fa:	b002      	add	sp, #8
   1b6fc:	bd80      	pop	{r7, pc}
   1b6fe:	46c0      	nop			; (mov r8, r8)
   1b700:	00018c45 	.word	0x00018c45

0001b704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1b704:	b580      	push	{r7, lr}
   1b706:	b082      	sub	sp, #8
   1b708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1b70a:	4b0e      	ldr	r3, [pc, #56]	; (1b744 <prvResetNextTaskUnblockTime+0x40>)
   1b70c:	681b      	ldr	r3, [r3, #0]
   1b70e:	681b      	ldr	r3, [r3, #0]
   1b710:	2b00      	cmp	r3, #0
   1b712:	d101      	bne.n	1b718 <prvResetNextTaskUnblockTime+0x14>
   1b714:	2301      	movs	r3, #1
   1b716:	e000      	b.n	1b71a <prvResetNextTaskUnblockTime+0x16>
   1b718:	2300      	movs	r3, #0
   1b71a:	2b00      	cmp	r3, #0
   1b71c:	d004      	beq.n	1b728 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1b71e:	4b0a      	ldr	r3, [pc, #40]	; (1b748 <prvResetNextTaskUnblockTime+0x44>)
   1b720:	2201      	movs	r2, #1
   1b722:	4252      	negs	r2, r2
   1b724:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1b726:	e008      	b.n	1b73a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1b728:	4b06      	ldr	r3, [pc, #24]	; (1b744 <prvResetNextTaskUnblockTime+0x40>)
   1b72a:	681b      	ldr	r3, [r3, #0]
   1b72c:	68db      	ldr	r3, [r3, #12]
   1b72e:	68db      	ldr	r3, [r3, #12]
   1b730:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1b732:	687b      	ldr	r3, [r7, #4]
   1b734:	685a      	ldr	r2, [r3, #4]
   1b736:	4b04      	ldr	r3, [pc, #16]	; (1b748 <prvResetNextTaskUnblockTime+0x44>)
   1b738:	601a      	str	r2, [r3, #0]
}
   1b73a:	46c0      	nop			; (mov r8, r8)
   1b73c:	46bd      	mov	sp, r7
   1b73e:	b002      	add	sp, #8
   1b740:	bd80      	pop	{r7, pc}
   1b742:	46c0      	nop			; (mov r8, r8)
   1b744:	20003fe4 	.word	0x20003fe4
   1b748:	2000404c 	.word	0x2000404c

0001b74c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1b74c:	b580      	push	{r7, lr}
   1b74e:	b082      	sub	sp, #8
   1b750:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1b752:	4b04      	ldr	r3, [pc, #16]	; (1b764 <xTaskGetCurrentTaskHandle+0x18>)
   1b754:	681b      	ldr	r3, [r3, #0]
   1b756:	607b      	str	r3, [r7, #4]

		return xReturn;
   1b758:	687b      	ldr	r3, [r7, #4]
	}
   1b75a:	0018      	movs	r0, r3
   1b75c:	46bd      	mov	sp, r7
   1b75e:	b002      	add	sp, #8
   1b760:	bd80      	pop	{r7, pc}
   1b762:	46c0      	nop			; (mov r8, r8)
   1b764:	20003f54 	.word	0x20003f54

0001b768 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1b768:	b580      	push	{r7, lr}
   1b76a:	b082      	sub	sp, #8
   1b76c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1b76e:	4b0a      	ldr	r3, [pc, #40]	; (1b798 <xTaskGetSchedulerState+0x30>)
   1b770:	681b      	ldr	r3, [r3, #0]
   1b772:	2b00      	cmp	r3, #0
   1b774:	d102      	bne.n	1b77c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1b776:	2301      	movs	r3, #1
   1b778:	607b      	str	r3, [r7, #4]
   1b77a:	e008      	b.n	1b78e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1b77c:	4b07      	ldr	r3, [pc, #28]	; (1b79c <xTaskGetSchedulerState+0x34>)
   1b77e:	681b      	ldr	r3, [r3, #0]
   1b780:	2b00      	cmp	r3, #0
   1b782:	d102      	bne.n	1b78a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1b784:	2302      	movs	r3, #2
   1b786:	607b      	str	r3, [r7, #4]
   1b788:	e001      	b.n	1b78e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1b78a:	2300      	movs	r3, #0
   1b78c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1b78e:	687b      	ldr	r3, [r7, #4]
	}
   1b790:	0018      	movs	r0, r3
   1b792:	46bd      	mov	sp, r7
   1b794:	b002      	add	sp, #8
   1b796:	bd80      	pop	{r7, pc}
   1b798:	20004038 	.word	0x20004038
   1b79c:	20004054 	.word	0x20004054

0001b7a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1b7a0:	b590      	push	{r4, r7, lr}
   1b7a2:	b085      	sub	sp, #20
   1b7a4:	af00      	add	r7, sp, #0
   1b7a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1b7a8:	687b      	ldr	r3, [r7, #4]
   1b7aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1b7ac:	2300      	movs	r3, #0
   1b7ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1b7b0:	687b      	ldr	r3, [r7, #4]
   1b7b2:	2b00      	cmp	r3, #0
   1b7b4:	d100      	bne.n	1b7b8 <xTaskPriorityInherit+0x18>
   1b7b6:	e09d      	b.n	1b8f4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1b7b8:	68bb      	ldr	r3, [r7, #8]
   1b7ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b7bc:	4b50      	ldr	r3, [pc, #320]	; (1b900 <xTaskPriorityInherit+0x160>)
   1b7be:	681b      	ldr	r3, [r3, #0]
   1b7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b7c2:	429a      	cmp	r2, r3
   1b7c4:	d300      	bcc.n	1b7c8 <xTaskPriorityInherit+0x28>
   1b7c6:	e08c      	b.n	1b8e2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1b7c8:	68bb      	ldr	r3, [r7, #8]
   1b7ca:	699b      	ldr	r3, [r3, #24]
   1b7cc:	2b00      	cmp	r3, #0
   1b7ce:	db06      	blt.n	1b7de <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b7d0:	4b4b      	ldr	r3, [pc, #300]	; (1b900 <xTaskPriorityInherit+0x160>)
   1b7d2:	681b      	ldr	r3, [r3, #0]
   1b7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b7d6:	2205      	movs	r2, #5
   1b7d8:	1ad2      	subs	r2, r2, r3
   1b7da:	68bb      	ldr	r3, [r7, #8]
   1b7dc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1b7de:	68bb      	ldr	r3, [r7, #8]
   1b7e0:	6959      	ldr	r1, [r3, #20]
   1b7e2:	68bb      	ldr	r3, [r7, #8]
   1b7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b7e6:	0013      	movs	r3, r2
   1b7e8:	009b      	lsls	r3, r3, #2
   1b7ea:	189b      	adds	r3, r3, r2
   1b7ec:	009b      	lsls	r3, r3, #2
   1b7ee:	4a45      	ldr	r2, [pc, #276]	; (1b904 <xTaskPriorityInherit+0x164>)
   1b7f0:	189b      	adds	r3, r3, r2
   1b7f2:	4299      	cmp	r1, r3
   1b7f4:	d101      	bne.n	1b7fa <xTaskPriorityInherit+0x5a>
   1b7f6:	2301      	movs	r3, #1
   1b7f8:	e000      	b.n	1b7fc <xTaskPriorityInherit+0x5c>
   1b7fa:	2300      	movs	r3, #0
   1b7fc:	2b00      	cmp	r3, #0
   1b7fe:	d037      	beq.n	1b870 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b800:	68bb      	ldr	r3, [r7, #8]
   1b802:	3304      	adds	r3, #4
   1b804:	0018      	movs	r0, r3
   1b806:	4b40      	ldr	r3, [pc, #256]	; (1b908 <xTaskPriorityInherit+0x168>)
   1b808:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1b80a:	4b3d      	ldr	r3, [pc, #244]	; (1b900 <xTaskPriorityInherit+0x160>)
   1b80c:	681b      	ldr	r3, [r3, #0]
   1b80e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b810:	68bb      	ldr	r3, [r7, #8]
   1b812:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1b814:	68bb      	ldr	r3, [r7, #8]
   1b816:	0018      	movs	r0, r3
   1b818:	4b3c      	ldr	r3, [pc, #240]	; (1b90c <xTaskPriorityInherit+0x16c>)
   1b81a:	4798      	blx	r3
   1b81c:	0003      	movs	r3, r0
   1b81e:	001a      	movs	r2, r3
   1b820:	4b3b      	ldr	r3, [pc, #236]	; (1b910 <xTaskPriorityInherit+0x170>)
   1b822:	881b      	ldrh	r3, [r3, #0]
   1b824:	4013      	ands	r3, r2
   1b826:	b29b      	uxth	r3, r3
   1b828:	2b00      	cmp	r3, #0
   1b82a:	d008      	beq.n	1b83e <xTaskPriorityInherit+0x9e>
   1b82c:	68bb      	ldr	r3, [r7, #8]
   1b82e:	0018      	movs	r0, r3
   1b830:	4b38      	ldr	r3, [pc, #224]	; (1b914 <xTaskPriorityInherit+0x174>)
   1b832:	4798      	blx	r3
   1b834:	0003      	movs	r3, r0
   1b836:	b2db      	uxtb	r3, r3
   1b838:	0018      	movs	r0, r3
   1b83a:	4b37      	ldr	r3, [pc, #220]	; (1b918 <xTaskPriorityInherit+0x178>)
   1b83c:	4798      	blx	r3
   1b83e:	68bb      	ldr	r3, [r7, #8]
   1b840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b842:	4b36      	ldr	r3, [pc, #216]	; (1b91c <xTaskPriorityInherit+0x17c>)
   1b844:	681b      	ldr	r3, [r3, #0]
   1b846:	429a      	cmp	r2, r3
   1b848:	d903      	bls.n	1b852 <xTaskPriorityInherit+0xb2>
   1b84a:	68bb      	ldr	r3, [r7, #8]
   1b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b84e:	4b33      	ldr	r3, [pc, #204]	; (1b91c <xTaskPriorityInherit+0x17c>)
   1b850:	601a      	str	r2, [r3, #0]
   1b852:	68bb      	ldr	r3, [r7, #8]
   1b854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b856:	0013      	movs	r3, r2
   1b858:	009b      	lsls	r3, r3, #2
   1b85a:	189b      	adds	r3, r3, r2
   1b85c:	009b      	lsls	r3, r3, #2
   1b85e:	4a29      	ldr	r2, [pc, #164]	; (1b904 <xTaskPriorityInherit+0x164>)
   1b860:	189a      	adds	r2, r3, r2
   1b862:	68bb      	ldr	r3, [r7, #8]
   1b864:	3304      	adds	r3, #4
   1b866:	0019      	movs	r1, r3
   1b868:	0010      	movs	r0, r2
   1b86a:	4b2d      	ldr	r3, [pc, #180]	; (1b920 <xTaskPriorityInherit+0x180>)
   1b86c:	4798      	blx	r3
   1b86e:	e004      	b.n	1b87a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1b870:	4b23      	ldr	r3, [pc, #140]	; (1b900 <xTaskPriorityInherit+0x160>)
   1b872:	681b      	ldr	r3, [r3, #0]
   1b874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b876:	68bb      	ldr	r3, [r7, #8]
   1b878:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1b87a:	68bb      	ldr	r3, [r7, #8]
   1b87c:	0018      	movs	r0, r3
   1b87e:	4b23      	ldr	r3, [pc, #140]	; (1b90c <xTaskPriorityInherit+0x16c>)
   1b880:	4798      	blx	r3
   1b882:	0003      	movs	r3, r0
   1b884:	001a      	movs	r2, r3
   1b886:	4b22      	ldr	r3, [pc, #136]	; (1b910 <xTaskPriorityInherit+0x170>)
   1b888:	881b      	ldrh	r3, [r3, #0]
   1b88a:	4013      	ands	r3, r2
   1b88c:	b29b      	uxth	r3, r3
   1b88e:	2b00      	cmp	r3, #0
   1b890:	d024      	beq.n	1b8dc <xTaskPriorityInherit+0x13c>
   1b892:	68bb      	ldr	r3, [r7, #8]
   1b894:	0018      	movs	r0, r3
   1b896:	4b1f      	ldr	r3, [pc, #124]	; (1b914 <xTaskPriorityInherit+0x174>)
   1b898:	4798      	blx	r3
   1b89a:	0003      	movs	r3, r0
   1b89c:	b2db      	uxtb	r3, r3
   1b89e:	001c      	movs	r4, r3
   1b8a0:	68bb      	ldr	r3, [r7, #8]
   1b8a2:	0018      	movs	r0, r3
   1b8a4:	4b1b      	ldr	r3, [pc, #108]	; (1b914 <xTaskPriorityInherit+0x174>)
   1b8a6:	4798      	blx	r3
   1b8a8:	0003      	movs	r3, r0
   1b8aa:	b2db      	uxtb	r3, r3
   1b8ac:	0019      	movs	r1, r3
   1b8ae:	2003      	movs	r0, #3
   1b8b0:	4b1c      	ldr	r3, [pc, #112]	; (1b924 <xTaskPriorityInherit+0x184>)
   1b8b2:	4798      	blx	r3
   1b8b4:	0003      	movs	r3, r0
   1b8b6:	0022      	movs	r2, r4
   1b8b8:	2103      	movs	r1, #3
   1b8ba:	208e      	movs	r0, #142	; 0x8e
   1b8bc:	4c1a      	ldr	r4, [pc, #104]	; (1b928 <xTaskPriorityInherit+0x188>)
   1b8be:	47a0      	blx	r4
   1b8c0:	68bb      	ldr	r3, [r7, #8]
   1b8c2:	0018      	movs	r0, r3
   1b8c4:	4b13      	ldr	r3, [pc, #76]	; (1b914 <xTaskPriorityInherit+0x174>)
   1b8c6:	4798      	blx	r3
   1b8c8:	0003      	movs	r3, r0
   1b8ca:	b2d9      	uxtb	r1, r3
   1b8cc:	4b0c      	ldr	r3, [pc, #48]	; (1b900 <xTaskPriorityInherit+0x160>)
   1b8ce:	681b      	ldr	r3, [r3, #0]
   1b8d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b8d2:	b2db      	uxtb	r3, r3
   1b8d4:	001a      	movs	r2, r3
   1b8d6:	2003      	movs	r0, #3
   1b8d8:	4b14      	ldr	r3, [pc, #80]	; (1b92c <xTaskPriorityInherit+0x18c>)
   1b8da:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1b8dc:	2301      	movs	r3, #1
   1b8de:	60fb      	str	r3, [r7, #12]
   1b8e0:	e008      	b.n	1b8f4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1b8e2:	68bb      	ldr	r3, [r7, #8]
   1b8e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1b8e6:	4b06      	ldr	r3, [pc, #24]	; (1b900 <xTaskPriorityInherit+0x160>)
   1b8e8:	681b      	ldr	r3, [r3, #0]
   1b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b8ec:	429a      	cmp	r2, r3
   1b8ee:	d201      	bcs.n	1b8f4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1b8f0:	2301      	movs	r3, #1
   1b8f2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1b8f4:	68fb      	ldr	r3, [r7, #12]
	}
   1b8f6:	0018      	movs	r0, r3
   1b8f8:	46bd      	mov	sp, r7
   1b8fa:	b005      	add	sp, #20
   1b8fc:	bd90      	pop	{r4, r7, pc}
   1b8fe:	46c0      	nop			; (mov r8, r8)
   1b900:	20003f54 	.word	0x20003f54
   1b904:	20003f58 	.word	0x20003f58
   1b908:	000188bb 	.word	0x000188bb
   1b90c:	00016a41 	.word	0x00016a41
   1b910:	20000110 	.word	0x20000110
   1b914:	00016a21 	.word	0x00016a21
   1b918:	000171f1 	.word	0x000171f1
   1b91c:	20004034 	.word	0x20004034
   1b920:	0001880b 	.word	0x0001880b
   1b924:	000179f9 	.word	0x000179f9
   1b928:	00017569 	.word	0x00017569
   1b92c:	00017955 	.word	0x00017955

0001b930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1b930:	b590      	push	{r4, r7, lr}
   1b932:	b085      	sub	sp, #20
   1b934:	af00      	add	r7, sp, #0
   1b936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1b938:	687b      	ldr	r3, [r7, #4]
   1b93a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1b93c:	2300      	movs	r3, #0
   1b93e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1b940:	687b      	ldr	r3, [r7, #4]
   1b942:	2b00      	cmp	r3, #0
   1b944:	d100      	bne.n	1b948 <xTaskPriorityDisinherit+0x18>
   1b946:	e089      	b.n	1ba5c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1b948:	4b47      	ldr	r3, [pc, #284]	; (1ba68 <xTaskPriorityDisinherit+0x138>)
   1b94a:	681b      	ldr	r3, [r3, #0]
   1b94c:	68ba      	ldr	r2, [r7, #8]
   1b94e:	429a      	cmp	r2, r3
   1b950:	d001      	beq.n	1b956 <xTaskPriorityDisinherit+0x26>
   1b952:	b672      	cpsid	i
   1b954:	e7fe      	b.n	1b954 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1b956:	68bb      	ldr	r3, [r7, #8]
   1b958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b95a:	2b00      	cmp	r3, #0
   1b95c:	d101      	bne.n	1b962 <xTaskPriorityDisinherit+0x32>
   1b95e:	b672      	cpsid	i
   1b960:	e7fe      	b.n	1b960 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1b962:	68bb      	ldr	r3, [r7, #8]
   1b964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b966:	1e5a      	subs	r2, r3, #1
   1b968:	68bb      	ldr	r3, [r7, #8]
   1b96a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1b96c:	68bb      	ldr	r3, [r7, #8]
   1b96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1b970:	68bb      	ldr	r3, [r7, #8]
   1b972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b974:	429a      	cmp	r2, r3
   1b976:	d071      	beq.n	1ba5c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1b978:	68bb      	ldr	r3, [r7, #8]
   1b97a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b97c:	2b00      	cmp	r3, #0
   1b97e:	d16d      	bne.n	1ba5c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1b980:	68bb      	ldr	r3, [r7, #8]
   1b982:	3304      	adds	r3, #4
   1b984:	0018      	movs	r0, r3
   1b986:	4b39      	ldr	r3, [pc, #228]	; (1ba6c <xTaskPriorityDisinherit+0x13c>)
   1b988:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1b98a:	68bb      	ldr	r3, [r7, #8]
   1b98c:	0018      	movs	r0, r3
   1b98e:	4b38      	ldr	r3, [pc, #224]	; (1ba70 <xTaskPriorityDisinherit+0x140>)
   1b990:	4798      	blx	r3
   1b992:	0003      	movs	r3, r0
   1b994:	001a      	movs	r2, r3
   1b996:	4b37      	ldr	r3, [pc, #220]	; (1ba74 <xTaskPriorityDisinherit+0x144>)
   1b998:	881b      	ldrh	r3, [r3, #0]
   1b99a:	4013      	ands	r3, r2
   1b99c:	b29b      	uxth	r3, r3
   1b99e:	2b00      	cmp	r3, #0
   1b9a0:	d023      	beq.n	1b9ea <xTaskPriorityDisinherit+0xba>
   1b9a2:	68bb      	ldr	r3, [r7, #8]
   1b9a4:	0018      	movs	r0, r3
   1b9a6:	4b34      	ldr	r3, [pc, #208]	; (1ba78 <xTaskPriorityDisinherit+0x148>)
   1b9a8:	4798      	blx	r3
   1b9aa:	0003      	movs	r3, r0
   1b9ac:	b2db      	uxtb	r3, r3
   1b9ae:	001c      	movs	r4, r3
   1b9b0:	68bb      	ldr	r3, [r7, #8]
   1b9b2:	0018      	movs	r0, r3
   1b9b4:	4b30      	ldr	r3, [pc, #192]	; (1ba78 <xTaskPriorityDisinherit+0x148>)
   1b9b6:	4798      	blx	r3
   1b9b8:	0003      	movs	r3, r0
   1b9ba:	b2db      	uxtb	r3, r3
   1b9bc:	0019      	movs	r1, r3
   1b9be:	2003      	movs	r0, #3
   1b9c0:	4b2e      	ldr	r3, [pc, #184]	; (1ba7c <xTaskPriorityDisinherit+0x14c>)
   1b9c2:	4798      	blx	r3
   1b9c4:	0003      	movs	r3, r0
   1b9c6:	0022      	movs	r2, r4
   1b9c8:	2103      	movs	r1, #3
   1b9ca:	208f      	movs	r0, #143	; 0x8f
   1b9cc:	4c2c      	ldr	r4, [pc, #176]	; (1ba80 <xTaskPriorityDisinherit+0x150>)
   1b9ce:	47a0      	blx	r4
   1b9d0:	68bb      	ldr	r3, [r7, #8]
   1b9d2:	0018      	movs	r0, r3
   1b9d4:	4b28      	ldr	r3, [pc, #160]	; (1ba78 <xTaskPriorityDisinherit+0x148>)
   1b9d6:	4798      	blx	r3
   1b9d8:	0003      	movs	r3, r0
   1b9da:	b2d9      	uxtb	r1, r3
   1b9dc:	68bb      	ldr	r3, [r7, #8]
   1b9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1b9e0:	b2db      	uxtb	r3, r3
   1b9e2:	001a      	movs	r2, r3
   1b9e4:	2003      	movs	r0, #3
   1b9e6:	4b27      	ldr	r3, [pc, #156]	; (1ba84 <xTaskPriorityDisinherit+0x154>)
   1b9e8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1b9ea:	68bb      	ldr	r3, [r7, #8]
   1b9ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1b9ee:	68bb      	ldr	r3, [r7, #8]
   1b9f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b9f2:	68bb      	ldr	r3, [r7, #8]
   1b9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1b9f6:	2205      	movs	r2, #5
   1b9f8:	1ad2      	subs	r2, r2, r3
   1b9fa:	68bb      	ldr	r3, [r7, #8]
   1b9fc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1b9fe:	68bb      	ldr	r3, [r7, #8]
   1ba00:	0018      	movs	r0, r3
   1ba02:	4b1b      	ldr	r3, [pc, #108]	; (1ba70 <xTaskPriorityDisinherit+0x140>)
   1ba04:	4798      	blx	r3
   1ba06:	0003      	movs	r3, r0
   1ba08:	001a      	movs	r2, r3
   1ba0a:	4b1a      	ldr	r3, [pc, #104]	; (1ba74 <xTaskPriorityDisinherit+0x144>)
   1ba0c:	881b      	ldrh	r3, [r3, #0]
   1ba0e:	4013      	ands	r3, r2
   1ba10:	b29b      	uxth	r3, r3
   1ba12:	2b00      	cmp	r3, #0
   1ba14:	d008      	beq.n	1ba28 <xTaskPriorityDisinherit+0xf8>
   1ba16:	68bb      	ldr	r3, [r7, #8]
   1ba18:	0018      	movs	r0, r3
   1ba1a:	4b17      	ldr	r3, [pc, #92]	; (1ba78 <xTaskPriorityDisinherit+0x148>)
   1ba1c:	4798      	blx	r3
   1ba1e:	0003      	movs	r3, r0
   1ba20:	b2db      	uxtb	r3, r3
   1ba22:	0018      	movs	r0, r3
   1ba24:	4b18      	ldr	r3, [pc, #96]	; (1ba88 <xTaskPriorityDisinherit+0x158>)
   1ba26:	4798      	blx	r3
   1ba28:	68bb      	ldr	r3, [r7, #8]
   1ba2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba2c:	4b17      	ldr	r3, [pc, #92]	; (1ba8c <xTaskPriorityDisinherit+0x15c>)
   1ba2e:	681b      	ldr	r3, [r3, #0]
   1ba30:	429a      	cmp	r2, r3
   1ba32:	d903      	bls.n	1ba3c <xTaskPriorityDisinherit+0x10c>
   1ba34:	68bb      	ldr	r3, [r7, #8]
   1ba36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba38:	4b14      	ldr	r3, [pc, #80]	; (1ba8c <xTaskPriorityDisinherit+0x15c>)
   1ba3a:	601a      	str	r2, [r3, #0]
   1ba3c:	68bb      	ldr	r3, [r7, #8]
   1ba3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ba40:	0013      	movs	r3, r2
   1ba42:	009b      	lsls	r3, r3, #2
   1ba44:	189b      	adds	r3, r3, r2
   1ba46:	009b      	lsls	r3, r3, #2
   1ba48:	4a11      	ldr	r2, [pc, #68]	; (1ba90 <xTaskPriorityDisinherit+0x160>)
   1ba4a:	189a      	adds	r2, r3, r2
   1ba4c:	68bb      	ldr	r3, [r7, #8]
   1ba4e:	3304      	adds	r3, #4
   1ba50:	0019      	movs	r1, r3
   1ba52:	0010      	movs	r0, r2
   1ba54:	4b0f      	ldr	r3, [pc, #60]	; (1ba94 <xTaskPriorityDisinherit+0x164>)
   1ba56:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1ba58:	2301      	movs	r3, #1
   1ba5a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ba5c:	68fb      	ldr	r3, [r7, #12]
	}
   1ba5e:	0018      	movs	r0, r3
   1ba60:	46bd      	mov	sp, r7
   1ba62:	b005      	add	sp, #20
   1ba64:	bd90      	pop	{r4, r7, pc}
   1ba66:	46c0      	nop			; (mov r8, r8)
   1ba68:	20003f54 	.word	0x20003f54
   1ba6c:	000188bb 	.word	0x000188bb
   1ba70:	00016a41 	.word	0x00016a41
   1ba74:	20000110 	.word	0x20000110
   1ba78:	00016a21 	.word	0x00016a21
   1ba7c:	000179f9 	.word	0x000179f9
   1ba80:	00017569 	.word	0x00017569
   1ba84:	00017955 	.word	0x00017955
   1ba88:	000171f1 	.word	0x000171f1
   1ba8c:	20004034 	.word	0x20004034
   1ba90:	20003f58 	.word	0x20003f58
   1ba94:	0001880b 	.word	0x0001880b

0001ba98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1ba98:	b590      	push	{r4, r7, lr}
   1ba9a:	b087      	sub	sp, #28
   1ba9c:	af00      	add	r7, sp, #0
   1ba9e:	6078      	str	r0, [r7, #4]
   1baa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1baa2:	687b      	ldr	r3, [r7, #4]
   1baa4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1baa6:	2301      	movs	r3, #1
   1baa8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1baaa:	687b      	ldr	r3, [r7, #4]
   1baac:	2b00      	cmp	r3, #0
   1baae:	d100      	bne.n	1bab2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1bab0:	e0a4      	b.n	1bbfc <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1bab2:	693b      	ldr	r3, [r7, #16]
   1bab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bab6:	2b00      	cmp	r3, #0
   1bab8:	d101      	bne.n	1babe <vTaskPriorityDisinheritAfterTimeout+0x26>
   1baba:	b672      	cpsid	i
   1babc:	e7fe      	b.n	1babc <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1babe:	693b      	ldr	r3, [r7, #16]
   1bac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1bac2:	683b      	ldr	r3, [r7, #0]
   1bac4:	429a      	cmp	r2, r3
   1bac6:	d202      	bcs.n	1bace <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1bac8:	683b      	ldr	r3, [r7, #0]
   1baca:	617b      	str	r3, [r7, #20]
   1bacc:	e002      	b.n	1bad4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1bace:	693b      	ldr	r3, [r7, #16]
   1bad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1bad2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1bad4:	693b      	ldr	r3, [r7, #16]
   1bad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bad8:	697b      	ldr	r3, [r7, #20]
   1bada:	429a      	cmp	r2, r3
   1badc:	d100      	bne.n	1bae0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1bade:	e08d      	b.n	1bbfc <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1bae0:	693b      	ldr	r3, [r7, #16]
   1bae2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1bae4:	68fb      	ldr	r3, [r7, #12]
   1bae6:	429a      	cmp	r2, r3
   1bae8:	d000      	beq.n	1baec <vTaskPriorityDisinheritAfterTimeout+0x54>
   1baea:	e087      	b.n	1bbfc <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1baec:	4b45      	ldr	r3, [pc, #276]	; (1bc04 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1baee:	681b      	ldr	r3, [r3, #0]
   1baf0:	693a      	ldr	r2, [r7, #16]
   1baf2:	429a      	cmp	r2, r3
   1baf4:	d101      	bne.n	1bafa <vTaskPriorityDisinheritAfterTimeout+0x62>
   1baf6:	b672      	cpsid	i
   1baf8:	e7fe      	b.n	1baf8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1bafa:	693b      	ldr	r3, [r7, #16]
   1bafc:	0018      	movs	r0, r3
   1bafe:	4b42      	ldr	r3, [pc, #264]	; (1bc08 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1bb00:	4798      	blx	r3
   1bb02:	0003      	movs	r3, r0
   1bb04:	001a      	movs	r2, r3
   1bb06:	4b41      	ldr	r3, [pc, #260]	; (1bc0c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1bb08:	881b      	ldrh	r3, [r3, #0]
   1bb0a:	4013      	ands	r3, r2
   1bb0c:	b29b      	uxth	r3, r3
   1bb0e:	2b00      	cmp	r3, #0
   1bb10:	d023      	beq.n	1bb5a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1bb12:	693b      	ldr	r3, [r7, #16]
   1bb14:	0018      	movs	r0, r3
   1bb16:	4b3e      	ldr	r3, [pc, #248]	; (1bc10 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1bb18:	4798      	blx	r3
   1bb1a:	0003      	movs	r3, r0
   1bb1c:	b2db      	uxtb	r3, r3
   1bb1e:	001c      	movs	r4, r3
   1bb20:	693b      	ldr	r3, [r7, #16]
   1bb22:	0018      	movs	r0, r3
   1bb24:	4b3a      	ldr	r3, [pc, #232]	; (1bc10 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1bb26:	4798      	blx	r3
   1bb28:	0003      	movs	r3, r0
   1bb2a:	b2db      	uxtb	r3, r3
   1bb2c:	0019      	movs	r1, r3
   1bb2e:	2003      	movs	r0, #3
   1bb30:	4b38      	ldr	r3, [pc, #224]	; (1bc14 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1bb32:	4798      	blx	r3
   1bb34:	0003      	movs	r3, r0
   1bb36:	0022      	movs	r2, r4
   1bb38:	2103      	movs	r1, #3
   1bb3a:	208f      	movs	r0, #143	; 0x8f
   1bb3c:	4c36      	ldr	r4, [pc, #216]	; (1bc18 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1bb3e:	47a0      	blx	r4
   1bb40:	693b      	ldr	r3, [r7, #16]
   1bb42:	0018      	movs	r0, r3
   1bb44:	4b32      	ldr	r3, [pc, #200]	; (1bc10 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1bb46:	4798      	blx	r3
   1bb48:	0003      	movs	r3, r0
   1bb4a:	b2d9      	uxtb	r1, r3
   1bb4c:	693b      	ldr	r3, [r7, #16]
   1bb4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1bb50:	b2db      	uxtb	r3, r3
   1bb52:	001a      	movs	r2, r3
   1bb54:	2003      	movs	r0, #3
   1bb56:	4b31      	ldr	r3, [pc, #196]	; (1bc1c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1bb58:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1bb5a:	693b      	ldr	r3, [r7, #16]
   1bb5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1bb5e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1bb60:	693b      	ldr	r3, [r7, #16]
   1bb62:	697a      	ldr	r2, [r7, #20]
   1bb64:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1bb66:	693b      	ldr	r3, [r7, #16]
   1bb68:	699b      	ldr	r3, [r3, #24]
   1bb6a:	2b00      	cmp	r3, #0
   1bb6c:	db04      	blt.n	1bb78 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1bb6e:	697b      	ldr	r3, [r7, #20]
   1bb70:	2205      	movs	r2, #5
   1bb72:	1ad2      	subs	r2, r2, r3
   1bb74:	693b      	ldr	r3, [r7, #16]
   1bb76:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1bb78:	693b      	ldr	r3, [r7, #16]
   1bb7a:	6959      	ldr	r1, [r3, #20]
   1bb7c:	68ba      	ldr	r2, [r7, #8]
   1bb7e:	0013      	movs	r3, r2
   1bb80:	009b      	lsls	r3, r3, #2
   1bb82:	189b      	adds	r3, r3, r2
   1bb84:	009b      	lsls	r3, r3, #2
   1bb86:	4a26      	ldr	r2, [pc, #152]	; (1bc20 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1bb88:	189b      	adds	r3, r3, r2
   1bb8a:	4299      	cmp	r1, r3
   1bb8c:	d101      	bne.n	1bb92 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1bb8e:	2301      	movs	r3, #1
   1bb90:	e000      	b.n	1bb94 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1bb92:	2300      	movs	r3, #0
   1bb94:	2b00      	cmp	r3, #0
   1bb96:	d031      	beq.n	1bbfc <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bb98:	693b      	ldr	r3, [r7, #16]
   1bb9a:	3304      	adds	r3, #4
   1bb9c:	0018      	movs	r0, r3
   1bb9e:	4b21      	ldr	r3, [pc, #132]	; (1bc24 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1bba0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1bba2:	693b      	ldr	r3, [r7, #16]
   1bba4:	0018      	movs	r0, r3
   1bba6:	4b18      	ldr	r3, [pc, #96]	; (1bc08 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1bba8:	4798      	blx	r3
   1bbaa:	0003      	movs	r3, r0
   1bbac:	001a      	movs	r2, r3
   1bbae:	4b17      	ldr	r3, [pc, #92]	; (1bc0c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1bbb0:	881b      	ldrh	r3, [r3, #0]
   1bbb2:	4013      	ands	r3, r2
   1bbb4:	b29b      	uxth	r3, r3
   1bbb6:	2b00      	cmp	r3, #0
   1bbb8:	d008      	beq.n	1bbcc <vTaskPriorityDisinheritAfterTimeout+0x134>
   1bbba:	693b      	ldr	r3, [r7, #16]
   1bbbc:	0018      	movs	r0, r3
   1bbbe:	4b14      	ldr	r3, [pc, #80]	; (1bc10 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1bbc0:	4798      	blx	r3
   1bbc2:	0003      	movs	r3, r0
   1bbc4:	b2db      	uxtb	r3, r3
   1bbc6:	0018      	movs	r0, r3
   1bbc8:	4b17      	ldr	r3, [pc, #92]	; (1bc28 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1bbca:	4798      	blx	r3
   1bbcc:	693b      	ldr	r3, [r7, #16]
   1bbce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bbd0:	4b16      	ldr	r3, [pc, #88]	; (1bc2c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1bbd2:	681b      	ldr	r3, [r3, #0]
   1bbd4:	429a      	cmp	r2, r3
   1bbd6:	d903      	bls.n	1bbe0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1bbd8:	693b      	ldr	r3, [r7, #16]
   1bbda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bbdc:	4b13      	ldr	r3, [pc, #76]	; (1bc2c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1bbde:	601a      	str	r2, [r3, #0]
   1bbe0:	693b      	ldr	r3, [r7, #16]
   1bbe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1bbe4:	0013      	movs	r3, r2
   1bbe6:	009b      	lsls	r3, r3, #2
   1bbe8:	189b      	adds	r3, r3, r2
   1bbea:	009b      	lsls	r3, r3, #2
   1bbec:	4a0c      	ldr	r2, [pc, #48]	; (1bc20 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1bbee:	189a      	adds	r2, r3, r2
   1bbf0:	693b      	ldr	r3, [r7, #16]
   1bbf2:	3304      	adds	r3, #4
   1bbf4:	0019      	movs	r1, r3
   1bbf6:	0010      	movs	r0, r2
   1bbf8:	4b0d      	ldr	r3, [pc, #52]	; (1bc30 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1bbfa:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1bbfc:	46c0      	nop			; (mov r8, r8)
   1bbfe:	46bd      	mov	sp, r7
   1bc00:	b007      	add	sp, #28
   1bc02:	bd90      	pop	{r4, r7, pc}
   1bc04:	20003f54 	.word	0x20003f54
   1bc08:	00016a41 	.word	0x00016a41
   1bc0c:	20000110 	.word	0x20000110
   1bc10:	00016a21 	.word	0x00016a21
   1bc14:	000179f9 	.word	0x000179f9
   1bc18:	00017569 	.word	0x00017569
   1bc1c:	00017955 	.word	0x00017955
   1bc20:	20003f58 	.word	0x20003f58
   1bc24:	000188bb 	.word	0x000188bb
   1bc28:	000171f1 	.word	0x000171f1
   1bc2c:	20004034 	.word	0x20004034
   1bc30:	0001880b 	.word	0x0001880b

0001bc34 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1bc34:	b580      	push	{r7, lr}
   1bc36:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1bc38:	4b06      	ldr	r3, [pc, #24]	; (1bc54 <pvTaskIncrementMutexHeldCount+0x20>)
   1bc3a:	681b      	ldr	r3, [r3, #0]
   1bc3c:	2b00      	cmp	r3, #0
   1bc3e:	d004      	beq.n	1bc4a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1bc40:	4b04      	ldr	r3, [pc, #16]	; (1bc54 <pvTaskIncrementMutexHeldCount+0x20>)
   1bc42:	681b      	ldr	r3, [r3, #0]
   1bc44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1bc46:	3201      	adds	r2, #1
   1bc48:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1bc4a:	4b02      	ldr	r3, [pc, #8]	; (1bc54 <pvTaskIncrementMutexHeldCount+0x20>)
   1bc4c:	681b      	ldr	r3, [r3, #0]
	}
   1bc4e:	0018      	movs	r0, r3
   1bc50:	46bd      	mov	sp, r7
   1bc52:	bd80      	pop	{r7, pc}
   1bc54:	20003f54 	.word	0x20003f54

0001bc58 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1bc58:	b580      	push	{r7, lr}
   1bc5a:	b084      	sub	sp, #16
   1bc5c:	af00      	add	r7, sp, #0
   1bc5e:	6078      	str	r0, [r7, #4]
   1bc60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1bc62:	4b21      	ldr	r3, [pc, #132]	; (1bce8 <prvAddCurrentTaskToDelayedList+0x90>)
   1bc64:	681b      	ldr	r3, [r3, #0]
   1bc66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1bc68:	4b20      	ldr	r3, [pc, #128]	; (1bcec <prvAddCurrentTaskToDelayedList+0x94>)
   1bc6a:	681b      	ldr	r3, [r3, #0]
   1bc6c:	3304      	adds	r3, #4
   1bc6e:	0018      	movs	r0, r3
   1bc70:	4b1f      	ldr	r3, [pc, #124]	; (1bcf0 <prvAddCurrentTaskToDelayedList+0x98>)
   1bc72:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1bc74:	687b      	ldr	r3, [r7, #4]
   1bc76:	3301      	adds	r3, #1
   1bc78:	d10b      	bne.n	1bc92 <prvAddCurrentTaskToDelayedList+0x3a>
   1bc7a:	683b      	ldr	r3, [r7, #0]
   1bc7c:	2b00      	cmp	r3, #0
   1bc7e:	d008      	beq.n	1bc92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1bc80:	4b1a      	ldr	r3, [pc, #104]	; (1bcec <prvAddCurrentTaskToDelayedList+0x94>)
   1bc82:	681b      	ldr	r3, [r3, #0]
   1bc84:	1d1a      	adds	r2, r3, #4
   1bc86:	4b1b      	ldr	r3, [pc, #108]	; (1bcf4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1bc88:	0011      	movs	r1, r2
   1bc8a:	0018      	movs	r0, r3
   1bc8c:	4b1a      	ldr	r3, [pc, #104]	; (1bcf8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1bc8e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1bc90:	e026      	b.n	1bce0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1bc92:	68fa      	ldr	r2, [r7, #12]
   1bc94:	687b      	ldr	r3, [r7, #4]
   1bc96:	18d3      	adds	r3, r2, r3
   1bc98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1bc9a:	4b14      	ldr	r3, [pc, #80]	; (1bcec <prvAddCurrentTaskToDelayedList+0x94>)
   1bc9c:	681b      	ldr	r3, [r3, #0]
   1bc9e:	68ba      	ldr	r2, [r7, #8]
   1bca0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1bca2:	68ba      	ldr	r2, [r7, #8]
   1bca4:	68fb      	ldr	r3, [r7, #12]
   1bca6:	429a      	cmp	r2, r3
   1bca8:	d209      	bcs.n	1bcbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1bcaa:	4b14      	ldr	r3, [pc, #80]	; (1bcfc <prvAddCurrentTaskToDelayedList+0xa4>)
   1bcac:	681a      	ldr	r2, [r3, #0]
   1bcae:	4b0f      	ldr	r3, [pc, #60]	; (1bcec <prvAddCurrentTaskToDelayedList+0x94>)
   1bcb0:	681b      	ldr	r3, [r3, #0]
   1bcb2:	3304      	adds	r3, #4
   1bcb4:	0019      	movs	r1, r3
   1bcb6:	0010      	movs	r0, r2
   1bcb8:	4b11      	ldr	r3, [pc, #68]	; (1bd00 <prvAddCurrentTaskToDelayedList+0xa8>)
   1bcba:	4798      	blx	r3
}
   1bcbc:	e010      	b.n	1bce0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1bcbe:	4b11      	ldr	r3, [pc, #68]	; (1bd04 <prvAddCurrentTaskToDelayedList+0xac>)
   1bcc0:	681a      	ldr	r2, [r3, #0]
   1bcc2:	4b0a      	ldr	r3, [pc, #40]	; (1bcec <prvAddCurrentTaskToDelayedList+0x94>)
   1bcc4:	681b      	ldr	r3, [r3, #0]
   1bcc6:	3304      	adds	r3, #4
   1bcc8:	0019      	movs	r1, r3
   1bcca:	0010      	movs	r0, r2
   1bccc:	4b0c      	ldr	r3, [pc, #48]	; (1bd00 <prvAddCurrentTaskToDelayedList+0xa8>)
   1bcce:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1bcd0:	4b0d      	ldr	r3, [pc, #52]	; (1bd08 <prvAddCurrentTaskToDelayedList+0xb0>)
   1bcd2:	681b      	ldr	r3, [r3, #0]
   1bcd4:	68ba      	ldr	r2, [r7, #8]
   1bcd6:	429a      	cmp	r2, r3
   1bcd8:	d202      	bcs.n	1bce0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1bcda:	4b0b      	ldr	r3, [pc, #44]	; (1bd08 <prvAddCurrentTaskToDelayedList+0xb0>)
   1bcdc:	68ba      	ldr	r2, [r7, #8]
   1bcde:	601a      	str	r2, [r3, #0]
}
   1bce0:	46c0      	nop			; (mov r8, r8)
   1bce2:	46bd      	mov	sp, r7
   1bce4:	b004      	add	sp, #16
   1bce6:	bd80      	pop	{r7, pc}
   1bce8:	20004030 	.word	0x20004030
   1bcec:	20003f54 	.word	0x20003f54
   1bcf0:	000188bb 	.word	0x000188bb
   1bcf4:	20004018 	.word	0x20004018
   1bcf8:	0001880b 	.word	0x0001880b
   1bcfc:	20003fe8 	.word	0x20003fe8
   1bd00:	0001884f 	.word	0x0001884f
   1bd04:	20003fe4 	.word	0x20003fe4
   1bd08:	2000404c 	.word	0x2000404c

0001bd0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1bd0c:	b590      	push	{r4, r7, lr}
   1bd0e:	b085      	sub	sp, #20
   1bd10:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1bd12:	2300      	movs	r3, #0
   1bd14:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1bd16:	4b0e      	ldr	r3, [pc, #56]	; (1bd50 <xTimerCreateTimerTask+0x44>)
   1bd18:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1bd1a:	4b0e      	ldr	r3, [pc, #56]	; (1bd54 <xTimerCreateTimerTask+0x48>)
   1bd1c:	681b      	ldr	r3, [r3, #0]
   1bd1e:	2b00      	cmp	r3, #0
   1bd20:	d00b      	beq.n	1bd3a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1bd22:	490d      	ldr	r1, [pc, #52]	; (1bd58 <xTimerCreateTimerTask+0x4c>)
   1bd24:	480d      	ldr	r0, [pc, #52]	; (1bd5c <xTimerCreateTimerTask+0x50>)
   1bd26:	4b0e      	ldr	r3, [pc, #56]	; (1bd60 <xTimerCreateTimerTask+0x54>)
   1bd28:	9301      	str	r3, [sp, #4]
   1bd2a:	2302      	movs	r3, #2
   1bd2c:	9300      	str	r3, [sp, #0]
   1bd2e:	2300      	movs	r3, #0
   1bd30:	2280      	movs	r2, #128	; 0x80
   1bd32:	4c0c      	ldr	r4, [pc, #48]	; (1bd64 <xTimerCreateTimerTask+0x58>)
   1bd34:	47a0      	blx	r4
   1bd36:	0003      	movs	r3, r0
   1bd38:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1bd3a:	687b      	ldr	r3, [r7, #4]
   1bd3c:	2b00      	cmp	r3, #0
   1bd3e:	d101      	bne.n	1bd44 <xTimerCreateTimerTask+0x38>
   1bd40:	b672      	cpsid	i
   1bd42:	e7fe      	b.n	1bd42 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1bd44:	687b      	ldr	r3, [r7, #4]
}
   1bd46:	0018      	movs	r0, r3
   1bd48:	46bd      	mov	sp, r7
   1bd4a:	b003      	add	sp, #12
   1bd4c:	bd90      	pop	{r4, r7, pc}
   1bd4e:	46c0      	nop			; (mov r8, r8)
   1bd50:	0001c255 	.word	0x0001c255
   1bd54:	20004088 	.word	0x20004088
   1bd58:	00036740 	.word	0x00036740
   1bd5c:	0001be8d 	.word	0x0001be8d
   1bd60:	2000408c 	.word	0x2000408c
   1bd64:	0001a6a5 	.word	0x0001a6a5

0001bd68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1bd68:	b590      	push	{r4, r7, lr}
   1bd6a:	b089      	sub	sp, #36	; 0x24
   1bd6c:	af00      	add	r7, sp, #0
   1bd6e:	60f8      	str	r0, [r7, #12]
   1bd70:	60b9      	str	r1, [r7, #8]
   1bd72:	607a      	str	r2, [r7, #4]
   1bd74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1bd76:	2300      	movs	r3, #0
   1bd78:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1bd7a:	68fb      	ldr	r3, [r7, #12]
   1bd7c:	2b00      	cmp	r3, #0
   1bd7e:	d101      	bne.n	1bd84 <xTimerGenericCommand+0x1c>
   1bd80:	b672      	cpsid	i
   1bd82:	e7fe      	b.n	1bd82 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1bd84:	4b1e      	ldr	r3, [pc, #120]	; (1be00 <xTimerGenericCommand+0x98>)
   1bd86:	681b      	ldr	r3, [r3, #0]
   1bd88:	2b00      	cmp	r3, #0
   1bd8a:	d033      	beq.n	1bdf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1bd8c:	2310      	movs	r3, #16
   1bd8e:	18fb      	adds	r3, r7, r3
   1bd90:	68ba      	ldr	r2, [r7, #8]
   1bd92:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1bd94:	2310      	movs	r3, #16
   1bd96:	18fb      	adds	r3, r7, r3
   1bd98:	687a      	ldr	r2, [r7, #4]
   1bd9a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1bd9c:	2310      	movs	r3, #16
   1bd9e:	18fb      	adds	r3, r7, r3
   1bda0:	68fa      	ldr	r2, [r7, #12]
   1bda2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1bda4:	68bb      	ldr	r3, [r7, #8]
   1bda6:	2b05      	cmp	r3, #5
   1bda8:	dc1a      	bgt.n	1bde0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1bdaa:	4b16      	ldr	r3, [pc, #88]	; (1be04 <xTimerGenericCommand+0x9c>)
   1bdac:	4798      	blx	r3
   1bdae:	0003      	movs	r3, r0
   1bdb0:	2b02      	cmp	r3, #2
   1bdb2:	d10a      	bne.n	1bdca <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1bdb4:	4b12      	ldr	r3, [pc, #72]	; (1be00 <xTimerGenericCommand+0x98>)
   1bdb6:	6818      	ldr	r0, [r3, #0]
   1bdb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1bdba:	2310      	movs	r3, #16
   1bdbc:	18f9      	adds	r1, r7, r3
   1bdbe:	2300      	movs	r3, #0
   1bdc0:	4c11      	ldr	r4, [pc, #68]	; (1be08 <xTimerGenericCommand+0xa0>)
   1bdc2:	47a0      	blx	r4
   1bdc4:	0003      	movs	r3, r0
   1bdc6:	61fb      	str	r3, [r7, #28]
   1bdc8:	e014      	b.n	1bdf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1bdca:	4b0d      	ldr	r3, [pc, #52]	; (1be00 <xTimerGenericCommand+0x98>)
   1bdcc:	6818      	ldr	r0, [r3, #0]
   1bdce:	2310      	movs	r3, #16
   1bdd0:	18f9      	adds	r1, r7, r3
   1bdd2:	2300      	movs	r3, #0
   1bdd4:	2200      	movs	r2, #0
   1bdd6:	4c0c      	ldr	r4, [pc, #48]	; (1be08 <xTimerGenericCommand+0xa0>)
   1bdd8:	47a0      	blx	r4
   1bdda:	0003      	movs	r3, r0
   1bddc:	61fb      	str	r3, [r7, #28]
   1bdde:	e009      	b.n	1bdf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1bde0:	4b07      	ldr	r3, [pc, #28]	; (1be00 <xTimerGenericCommand+0x98>)
   1bde2:	6818      	ldr	r0, [r3, #0]
   1bde4:	683a      	ldr	r2, [r7, #0]
   1bde6:	2310      	movs	r3, #16
   1bde8:	18f9      	adds	r1, r7, r3
   1bdea:	2300      	movs	r3, #0
   1bdec:	4c07      	ldr	r4, [pc, #28]	; (1be0c <xTimerGenericCommand+0xa4>)
   1bdee:	47a0      	blx	r4
   1bdf0:	0003      	movs	r3, r0
   1bdf2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1bdf4:	69fb      	ldr	r3, [r7, #28]
}
   1bdf6:	0018      	movs	r0, r3
   1bdf8:	46bd      	mov	sp, r7
   1bdfa:	b009      	add	sp, #36	; 0x24
   1bdfc:	bd90      	pop	{r4, r7, pc}
   1bdfe:	46c0      	nop			; (mov r8, r8)
   1be00:	20004088 	.word	0x20004088
   1be04:	0001b769 	.word	0x0001b769
   1be08:	00018fdd 	.word	0x00018fdd
   1be0c:	0001943d 	.word	0x0001943d

0001be10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1be10:	b590      	push	{r4, r7, lr}
   1be12:	b087      	sub	sp, #28
   1be14:	af02      	add	r7, sp, #8
   1be16:	6078      	str	r0, [r7, #4]
   1be18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1be1a:	4b18      	ldr	r3, [pc, #96]	; (1be7c <prvProcessExpiredTimer+0x6c>)
   1be1c:	681b      	ldr	r3, [r3, #0]
   1be1e:	68db      	ldr	r3, [r3, #12]
   1be20:	68db      	ldr	r3, [r3, #12]
   1be22:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1be24:	68fb      	ldr	r3, [r7, #12]
   1be26:	3304      	adds	r3, #4
   1be28:	0018      	movs	r0, r3
   1be2a:	4b15      	ldr	r3, [pc, #84]	; (1be80 <prvProcessExpiredTimer+0x70>)
   1be2c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1be2e:	68fb      	ldr	r3, [r7, #12]
   1be30:	69db      	ldr	r3, [r3, #28]
   1be32:	2b01      	cmp	r3, #1
   1be34:	d119      	bne.n	1be6a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1be36:	68fb      	ldr	r3, [r7, #12]
   1be38:	699a      	ldr	r2, [r3, #24]
   1be3a:	687b      	ldr	r3, [r7, #4]
   1be3c:	18d1      	adds	r1, r2, r3
   1be3e:	687b      	ldr	r3, [r7, #4]
   1be40:	683a      	ldr	r2, [r7, #0]
   1be42:	68f8      	ldr	r0, [r7, #12]
   1be44:	4c0f      	ldr	r4, [pc, #60]	; (1be84 <prvProcessExpiredTimer+0x74>)
   1be46:	47a0      	blx	r4
   1be48:	1e03      	subs	r3, r0, #0
   1be4a:	d00e      	beq.n	1be6a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1be4c:	687a      	ldr	r2, [r7, #4]
   1be4e:	68f8      	ldr	r0, [r7, #12]
   1be50:	2300      	movs	r3, #0
   1be52:	9300      	str	r3, [sp, #0]
   1be54:	2300      	movs	r3, #0
   1be56:	2100      	movs	r1, #0
   1be58:	4c0b      	ldr	r4, [pc, #44]	; (1be88 <prvProcessExpiredTimer+0x78>)
   1be5a:	47a0      	blx	r4
   1be5c:	0003      	movs	r3, r0
   1be5e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1be60:	68bb      	ldr	r3, [r7, #8]
   1be62:	2b00      	cmp	r3, #0
   1be64:	d101      	bne.n	1be6a <prvProcessExpiredTimer+0x5a>
   1be66:	b672      	cpsid	i
   1be68:	e7fe      	b.n	1be68 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1be6a:	68fb      	ldr	r3, [r7, #12]
   1be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1be6e:	68fa      	ldr	r2, [r7, #12]
   1be70:	0010      	movs	r0, r2
   1be72:	4798      	blx	r3
}
   1be74:	46c0      	nop			; (mov r8, r8)
   1be76:	46bd      	mov	sp, r7
   1be78:	b005      	add	sp, #20
   1be7a:	bd90      	pop	{r4, r7, pc}
   1be7c:	20004080 	.word	0x20004080
   1be80:	000188bb 	.word	0x000188bb
   1be84:	0001bff5 	.word	0x0001bff5
   1be88:	0001bd69 	.word	0x0001bd69

0001be8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1be8c:	b580      	push	{r7, lr}
   1be8e:	b084      	sub	sp, #16
   1be90:	af00      	add	r7, sp, #0
   1be92:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1be94:	4b08      	ldr	r3, [pc, #32]	; (1beb8 <prvTimerTask+0x2c>)
   1be96:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1be98:	2308      	movs	r3, #8
   1be9a:	18fb      	adds	r3, r7, r3
   1be9c:	0018      	movs	r0, r3
   1be9e:	4b07      	ldr	r3, [pc, #28]	; (1bebc <prvTimerTask+0x30>)
   1bea0:	4798      	blx	r3
   1bea2:	0003      	movs	r3, r0
   1bea4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1bea6:	68ba      	ldr	r2, [r7, #8]
   1bea8:	68fb      	ldr	r3, [r7, #12]
   1beaa:	0011      	movs	r1, r2
   1beac:	0018      	movs	r0, r3
   1beae:	4b04      	ldr	r3, [pc, #16]	; (1bec0 <prvTimerTask+0x34>)
   1beb0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1beb2:	4b04      	ldr	r3, [pc, #16]	; (1bec4 <prvTimerTask+0x38>)
   1beb4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1beb6:	e7ef      	b.n	1be98 <prvTimerTask+0xc>
   1beb8:	000310c1 	.word	0x000310c1
   1bebc:	0001bf6d 	.word	0x0001bf6d
   1bec0:	0001bec9 	.word	0x0001bec9
   1bec4:	0001c07d 	.word	0x0001c07d

0001bec8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1bec8:	b580      	push	{r7, lr}
   1beca:	b084      	sub	sp, #16
   1becc:	af00      	add	r7, sp, #0
   1bece:	6078      	str	r0, [r7, #4]
   1bed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1bed2:	4b1e      	ldr	r3, [pc, #120]	; (1bf4c <prvProcessTimerOrBlockTask+0x84>)
   1bed4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1bed6:	2308      	movs	r3, #8
   1bed8:	18fb      	adds	r3, r7, r3
   1beda:	0018      	movs	r0, r3
   1bedc:	4b1c      	ldr	r3, [pc, #112]	; (1bf50 <prvProcessTimerOrBlockTask+0x88>)
   1bede:	4798      	blx	r3
   1bee0:	0003      	movs	r3, r0
   1bee2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1bee4:	68bb      	ldr	r3, [r7, #8]
   1bee6:	2b00      	cmp	r3, #0
   1bee8:	d129      	bne.n	1bf3e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1beea:	683b      	ldr	r3, [r7, #0]
   1beec:	2b00      	cmp	r3, #0
   1beee:	d10c      	bne.n	1bf0a <prvProcessTimerOrBlockTask+0x42>
   1bef0:	687a      	ldr	r2, [r7, #4]
   1bef2:	68fb      	ldr	r3, [r7, #12]
   1bef4:	429a      	cmp	r2, r3
   1bef6:	d808      	bhi.n	1bf0a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1bef8:	4b16      	ldr	r3, [pc, #88]	; (1bf54 <prvProcessTimerOrBlockTask+0x8c>)
   1befa:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1befc:	68fa      	ldr	r2, [r7, #12]
   1befe:	687b      	ldr	r3, [r7, #4]
   1bf00:	0011      	movs	r1, r2
   1bf02:	0018      	movs	r0, r3
   1bf04:	4b14      	ldr	r3, [pc, #80]	; (1bf58 <prvProcessTimerOrBlockTask+0x90>)
   1bf06:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1bf08:	e01b      	b.n	1bf42 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1bf0a:	683b      	ldr	r3, [r7, #0]
   1bf0c:	2b00      	cmp	r3, #0
   1bf0e:	d006      	beq.n	1bf1e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1bf10:	4b12      	ldr	r3, [pc, #72]	; (1bf5c <prvProcessTimerOrBlockTask+0x94>)
   1bf12:	681b      	ldr	r3, [r3, #0]
   1bf14:	681b      	ldr	r3, [r3, #0]
   1bf16:	425a      	negs	r2, r3
   1bf18:	4153      	adcs	r3, r2
   1bf1a:	b2db      	uxtb	r3, r3
   1bf1c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1bf1e:	4b10      	ldr	r3, [pc, #64]	; (1bf60 <prvProcessTimerOrBlockTask+0x98>)
   1bf20:	6818      	ldr	r0, [r3, #0]
   1bf22:	687a      	ldr	r2, [r7, #4]
   1bf24:	68fb      	ldr	r3, [r7, #12]
   1bf26:	1ad3      	subs	r3, r2, r3
   1bf28:	683a      	ldr	r2, [r7, #0]
   1bf2a:	0019      	movs	r1, r3
   1bf2c:	4b0d      	ldr	r3, [pc, #52]	; (1bf64 <prvProcessTimerOrBlockTask+0x9c>)
   1bf2e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bf30:	4b08      	ldr	r3, [pc, #32]	; (1bf54 <prvProcessTimerOrBlockTask+0x8c>)
   1bf32:	4798      	blx	r3
   1bf34:	1e03      	subs	r3, r0, #0
   1bf36:	d104      	bne.n	1bf42 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1bf38:	4b0b      	ldr	r3, [pc, #44]	; (1bf68 <prvProcessTimerOrBlockTask+0xa0>)
   1bf3a:	4798      	blx	r3
}
   1bf3c:	e001      	b.n	1bf42 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1bf3e:	4b05      	ldr	r3, [pc, #20]	; (1bf54 <prvProcessTimerOrBlockTask+0x8c>)
   1bf40:	4798      	blx	r3
}
   1bf42:	46c0      	nop			; (mov r8, r8)
   1bf44:	46bd      	mov	sp, r7
   1bf46:	b004      	add	sp, #16
   1bf48:	bd80      	pop	{r7, pc}
   1bf4a:	46c0      	nop			; (mov r8, r8)
   1bf4c:	0001ad01 	.word	0x0001ad01
   1bf50:	0001bfad 	.word	0x0001bfad
   1bf54:	0001ad19 	.word	0x0001ad19
   1bf58:	0001be11 	.word	0x0001be11
   1bf5c:	20004084 	.word	0x20004084
   1bf60:	20004088 	.word	0x20004088
   1bf64:	0001a4a1 	.word	0x0001a4a1
   1bf68:	00018a31 	.word	0x00018a31

0001bf6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1bf6c:	b580      	push	{r7, lr}
   1bf6e:	b084      	sub	sp, #16
   1bf70:	af00      	add	r7, sp, #0
   1bf72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1bf74:	4b0c      	ldr	r3, [pc, #48]	; (1bfa8 <prvGetNextExpireTime+0x3c>)
   1bf76:	681b      	ldr	r3, [r3, #0]
   1bf78:	681b      	ldr	r3, [r3, #0]
   1bf7a:	425a      	negs	r2, r3
   1bf7c:	4153      	adcs	r3, r2
   1bf7e:	b2db      	uxtb	r3, r3
   1bf80:	001a      	movs	r2, r3
   1bf82:	687b      	ldr	r3, [r7, #4]
   1bf84:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1bf86:	687b      	ldr	r3, [r7, #4]
   1bf88:	681b      	ldr	r3, [r3, #0]
   1bf8a:	2b00      	cmp	r3, #0
   1bf8c:	d105      	bne.n	1bf9a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1bf8e:	4b06      	ldr	r3, [pc, #24]	; (1bfa8 <prvGetNextExpireTime+0x3c>)
   1bf90:	681b      	ldr	r3, [r3, #0]
   1bf92:	68db      	ldr	r3, [r3, #12]
   1bf94:	681b      	ldr	r3, [r3, #0]
   1bf96:	60fb      	str	r3, [r7, #12]
   1bf98:	e001      	b.n	1bf9e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1bf9a:	2300      	movs	r3, #0
   1bf9c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1bf9e:	68fb      	ldr	r3, [r7, #12]
}
   1bfa0:	0018      	movs	r0, r3
   1bfa2:	46bd      	mov	sp, r7
   1bfa4:	b004      	add	sp, #16
   1bfa6:	bd80      	pop	{r7, pc}
   1bfa8:	20004080 	.word	0x20004080

0001bfac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1bfac:	b580      	push	{r7, lr}
   1bfae:	b084      	sub	sp, #16
   1bfb0:	af00      	add	r7, sp, #0
   1bfb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1bfb4:	4b0c      	ldr	r3, [pc, #48]	; (1bfe8 <prvSampleTimeNow+0x3c>)
   1bfb6:	4798      	blx	r3
   1bfb8:	0003      	movs	r3, r0
   1bfba:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1bfbc:	4b0b      	ldr	r3, [pc, #44]	; (1bfec <prvSampleTimeNow+0x40>)
   1bfbe:	681b      	ldr	r3, [r3, #0]
   1bfc0:	68fa      	ldr	r2, [r7, #12]
   1bfc2:	429a      	cmp	r2, r3
   1bfc4:	d205      	bcs.n	1bfd2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1bfc6:	4b0a      	ldr	r3, [pc, #40]	; (1bff0 <prvSampleTimeNow+0x44>)
   1bfc8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1bfca:	687b      	ldr	r3, [r7, #4]
   1bfcc:	2201      	movs	r2, #1
   1bfce:	601a      	str	r2, [r3, #0]
   1bfd0:	e002      	b.n	1bfd8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1bfd2:	687b      	ldr	r3, [r7, #4]
   1bfd4:	2200      	movs	r2, #0
   1bfd6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1bfd8:	4b04      	ldr	r3, [pc, #16]	; (1bfec <prvSampleTimeNow+0x40>)
   1bfda:	68fa      	ldr	r2, [r7, #12]
   1bfdc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1bfde:	68fb      	ldr	r3, [r7, #12]
}
   1bfe0:	0018      	movs	r0, r3
   1bfe2:	46bd      	mov	sp, r7
   1bfe4:	b004      	add	sp, #16
   1bfe6:	bd80      	pop	{r7, pc}
   1bfe8:	0001ae89 	.word	0x0001ae89
   1bfec:	20004090 	.word	0x20004090
   1bff0:	0001c195 	.word	0x0001c195

0001bff4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1bff4:	b580      	push	{r7, lr}
   1bff6:	b086      	sub	sp, #24
   1bff8:	af00      	add	r7, sp, #0
   1bffa:	60f8      	str	r0, [r7, #12]
   1bffc:	60b9      	str	r1, [r7, #8]
   1bffe:	607a      	str	r2, [r7, #4]
   1c000:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1c002:	2300      	movs	r3, #0
   1c004:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1c006:	68fb      	ldr	r3, [r7, #12]
   1c008:	68ba      	ldr	r2, [r7, #8]
   1c00a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c00c:	68fb      	ldr	r3, [r7, #12]
   1c00e:	68fa      	ldr	r2, [r7, #12]
   1c010:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1c012:	68ba      	ldr	r2, [r7, #8]
   1c014:	687b      	ldr	r3, [r7, #4]
   1c016:	429a      	cmp	r2, r3
   1c018:	d812      	bhi.n	1c040 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c01a:	687a      	ldr	r2, [r7, #4]
   1c01c:	683b      	ldr	r3, [r7, #0]
   1c01e:	1ad2      	subs	r2, r2, r3
   1c020:	68fb      	ldr	r3, [r7, #12]
   1c022:	699b      	ldr	r3, [r3, #24]
   1c024:	429a      	cmp	r2, r3
   1c026:	d302      	bcc.n	1c02e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1c028:	2301      	movs	r3, #1
   1c02a:	617b      	str	r3, [r7, #20]
   1c02c:	e01b      	b.n	1c066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1c02e:	4b10      	ldr	r3, [pc, #64]	; (1c070 <prvInsertTimerInActiveList+0x7c>)
   1c030:	681a      	ldr	r2, [r3, #0]
   1c032:	68fb      	ldr	r3, [r7, #12]
   1c034:	3304      	adds	r3, #4
   1c036:	0019      	movs	r1, r3
   1c038:	0010      	movs	r0, r2
   1c03a:	4b0e      	ldr	r3, [pc, #56]	; (1c074 <prvInsertTimerInActiveList+0x80>)
   1c03c:	4798      	blx	r3
   1c03e:	e012      	b.n	1c066 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1c040:	687a      	ldr	r2, [r7, #4]
   1c042:	683b      	ldr	r3, [r7, #0]
   1c044:	429a      	cmp	r2, r3
   1c046:	d206      	bcs.n	1c056 <prvInsertTimerInActiveList+0x62>
   1c048:	68ba      	ldr	r2, [r7, #8]
   1c04a:	683b      	ldr	r3, [r7, #0]
   1c04c:	429a      	cmp	r2, r3
   1c04e:	d302      	bcc.n	1c056 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1c050:	2301      	movs	r3, #1
   1c052:	617b      	str	r3, [r7, #20]
   1c054:	e007      	b.n	1c066 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c056:	4b08      	ldr	r3, [pc, #32]	; (1c078 <prvInsertTimerInActiveList+0x84>)
   1c058:	681a      	ldr	r2, [r3, #0]
   1c05a:	68fb      	ldr	r3, [r7, #12]
   1c05c:	3304      	adds	r3, #4
   1c05e:	0019      	movs	r1, r3
   1c060:	0010      	movs	r0, r2
   1c062:	4b04      	ldr	r3, [pc, #16]	; (1c074 <prvInsertTimerInActiveList+0x80>)
   1c064:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1c066:	697b      	ldr	r3, [r7, #20]
}
   1c068:	0018      	movs	r0, r3
   1c06a:	46bd      	mov	sp, r7
   1c06c:	b006      	add	sp, #24
   1c06e:	bd80      	pop	{r7, pc}
   1c070:	20004084 	.word	0x20004084
   1c074:	0001884f 	.word	0x0001884f
   1c078:	20004080 	.word	0x20004080

0001c07c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1c07c:	b590      	push	{r4, r7, lr}
   1c07e:	b08b      	sub	sp, #44	; 0x2c
   1c080:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c082:	e068      	b.n	1c156 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1c084:	2308      	movs	r3, #8
   1c086:	18fb      	adds	r3, r7, r3
   1c088:	681b      	ldr	r3, [r3, #0]
   1c08a:	2b00      	cmp	r3, #0
   1c08c:	db63      	blt.n	1c156 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1c08e:	2308      	movs	r3, #8
   1c090:	18fb      	adds	r3, r7, r3
   1c092:	689b      	ldr	r3, [r3, #8]
   1c094:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1c096:	69fb      	ldr	r3, [r7, #28]
   1c098:	695b      	ldr	r3, [r3, #20]
   1c09a:	2b00      	cmp	r3, #0
   1c09c:	d004      	beq.n	1c0a8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c09e:	69fb      	ldr	r3, [r7, #28]
   1c0a0:	3304      	adds	r3, #4
   1c0a2:	0018      	movs	r0, r3
   1c0a4:	4b33      	ldr	r3, [pc, #204]	; (1c174 <prvProcessReceivedCommands+0xf8>)
   1c0a6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1c0a8:	1d3b      	adds	r3, r7, #4
   1c0aa:	0018      	movs	r0, r3
   1c0ac:	4b32      	ldr	r3, [pc, #200]	; (1c178 <prvProcessReceivedCommands+0xfc>)
   1c0ae:	4798      	blx	r3
   1c0b0:	0003      	movs	r3, r0
   1c0b2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1c0b4:	2308      	movs	r3, #8
   1c0b6:	18fb      	adds	r3, r7, r3
   1c0b8:	681b      	ldr	r3, [r3, #0]
   1c0ba:	2b09      	cmp	r3, #9
   1c0bc:	d84a      	bhi.n	1c154 <prvProcessReceivedCommands+0xd8>
   1c0be:	009a      	lsls	r2, r3, #2
   1c0c0:	4b2e      	ldr	r3, [pc, #184]	; (1c17c <prvProcessReceivedCommands+0x100>)
   1c0c2:	18d3      	adds	r3, r2, r3
   1c0c4:	681b      	ldr	r3, [r3, #0]
   1c0c6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1c0c8:	2308      	movs	r3, #8
   1c0ca:	18fb      	adds	r3, r7, r3
   1c0cc:	685a      	ldr	r2, [r3, #4]
   1c0ce:	69fb      	ldr	r3, [r7, #28]
   1c0d0:	699b      	ldr	r3, [r3, #24]
   1c0d2:	18d1      	adds	r1, r2, r3
   1c0d4:	2308      	movs	r3, #8
   1c0d6:	18fb      	adds	r3, r7, r3
   1c0d8:	685b      	ldr	r3, [r3, #4]
   1c0da:	69ba      	ldr	r2, [r7, #24]
   1c0dc:	69f8      	ldr	r0, [r7, #28]
   1c0de:	4c28      	ldr	r4, [pc, #160]	; (1c180 <prvProcessReceivedCommands+0x104>)
   1c0e0:	47a0      	blx	r4
   1c0e2:	1e03      	subs	r3, r0, #0
   1c0e4:	d037      	beq.n	1c156 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c0e6:	69fb      	ldr	r3, [r7, #28]
   1c0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c0ea:	69fa      	ldr	r2, [r7, #28]
   1c0ec:	0010      	movs	r0, r2
   1c0ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c0f0:	69fb      	ldr	r3, [r7, #28]
   1c0f2:	69db      	ldr	r3, [r3, #28]
   1c0f4:	2b01      	cmp	r3, #1
   1c0f6:	d12e      	bne.n	1c156 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1c0f8:	2308      	movs	r3, #8
   1c0fa:	18fb      	adds	r3, r7, r3
   1c0fc:	685a      	ldr	r2, [r3, #4]
   1c0fe:	69fb      	ldr	r3, [r7, #28]
   1c100:	699b      	ldr	r3, [r3, #24]
   1c102:	18d2      	adds	r2, r2, r3
   1c104:	69f8      	ldr	r0, [r7, #28]
   1c106:	2300      	movs	r3, #0
   1c108:	9300      	str	r3, [sp, #0]
   1c10a:	2300      	movs	r3, #0
   1c10c:	2100      	movs	r1, #0
   1c10e:	4c1d      	ldr	r4, [pc, #116]	; (1c184 <prvProcessReceivedCommands+0x108>)
   1c110:	47a0      	blx	r4
   1c112:	0003      	movs	r3, r0
   1c114:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1c116:	697b      	ldr	r3, [r7, #20]
   1c118:	2b00      	cmp	r3, #0
   1c11a:	d11c      	bne.n	1c156 <prvProcessReceivedCommands+0xda>
   1c11c:	b672      	cpsid	i
   1c11e:	e7fe      	b.n	1c11e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1c120:	2308      	movs	r3, #8
   1c122:	18fb      	adds	r3, r7, r3
   1c124:	685a      	ldr	r2, [r3, #4]
   1c126:	69fb      	ldr	r3, [r7, #28]
   1c128:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1c12a:	69fb      	ldr	r3, [r7, #28]
   1c12c:	699b      	ldr	r3, [r3, #24]
   1c12e:	2b00      	cmp	r3, #0
   1c130:	d101      	bne.n	1c136 <prvProcessReceivedCommands+0xba>
   1c132:	b672      	cpsid	i
   1c134:	e7fe      	b.n	1c134 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1c136:	69fb      	ldr	r3, [r7, #28]
   1c138:	699a      	ldr	r2, [r3, #24]
   1c13a:	69bb      	ldr	r3, [r7, #24]
   1c13c:	18d1      	adds	r1, r2, r3
   1c13e:	69bb      	ldr	r3, [r7, #24]
   1c140:	69ba      	ldr	r2, [r7, #24]
   1c142:	69f8      	ldr	r0, [r7, #28]
   1c144:	4c0e      	ldr	r4, [pc, #56]	; (1c180 <prvProcessReceivedCommands+0x104>)
   1c146:	47a0      	blx	r4
					break;
   1c148:	e005      	b.n	1c156 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1c14a:	69fb      	ldr	r3, [r7, #28]
   1c14c:	0018      	movs	r0, r3
   1c14e:	4b0e      	ldr	r3, [pc, #56]	; (1c188 <prvProcessReceivedCommands+0x10c>)
   1c150:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1c152:	e000      	b.n	1c156 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1c154:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1c156:	4b0d      	ldr	r3, [pc, #52]	; (1c18c <prvProcessReceivedCommands+0x110>)
   1c158:	681b      	ldr	r3, [r3, #0]
   1c15a:	2208      	movs	r2, #8
   1c15c:	18b9      	adds	r1, r7, r2
   1c15e:	2200      	movs	r2, #0
   1c160:	0018      	movs	r0, r3
   1c162:	4b0b      	ldr	r3, [pc, #44]	; (1c190 <prvProcessReceivedCommands+0x114>)
   1c164:	4798      	blx	r3
   1c166:	1e03      	subs	r3, r0, #0
   1c168:	d18c      	bne.n	1c084 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1c16a:	46c0      	nop			; (mov r8, r8)
   1c16c:	46bd      	mov	sp, r7
   1c16e:	b009      	add	sp, #36	; 0x24
   1c170:	bd90      	pop	{r4, r7, pc}
   1c172:	46c0      	nop			; (mov r8, r8)
   1c174:	000188bb 	.word	0x000188bb
   1c178:	0001bfad 	.word	0x0001bfad
   1c17c:	00036748 	.word	0x00036748
   1c180:	0001bff5 	.word	0x0001bff5
   1c184:	0001bd69 	.word	0x0001bd69
   1c188:	00018c45 	.word	0x00018c45
   1c18c:	20004088 	.word	0x20004088
   1c190:	00019895 	.word	0x00019895

0001c194 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1c194:	b590      	push	{r4, r7, lr}
   1c196:	b089      	sub	sp, #36	; 0x24
   1c198:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c19a:	e03e      	b.n	1c21a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c19c:	4b28      	ldr	r3, [pc, #160]	; (1c240 <prvSwitchTimerLists+0xac>)
   1c19e:	681b      	ldr	r3, [r3, #0]
   1c1a0:	68db      	ldr	r3, [r3, #12]
   1c1a2:	681b      	ldr	r3, [r3, #0]
   1c1a4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1c1a6:	4b26      	ldr	r3, [pc, #152]	; (1c240 <prvSwitchTimerLists+0xac>)
   1c1a8:	681b      	ldr	r3, [r3, #0]
   1c1aa:	68db      	ldr	r3, [r3, #12]
   1c1ac:	68db      	ldr	r3, [r3, #12]
   1c1ae:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1c1b0:	693b      	ldr	r3, [r7, #16]
   1c1b2:	3304      	adds	r3, #4
   1c1b4:	0018      	movs	r0, r3
   1c1b6:	4b23      	ldr	r3, [pc, #140]	; (1c244 <prvSwitchTimerLists+0xb0>)
   1c1b8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1c1ba:	693b      	ldr	r3, [r7, #16]
   1c1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c1be:	693a      	ldr	r2, [r7, #16]
   1c1c0:	0010      	movs	r0, r2
   1c1c2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1c1c4:	693b      	ldr	r3, [r7, #16]
   1c1c6:	69db      	ldr	r3, [r3, #28]
   1c1c8:	2b01      	cmp	r3, #1
   1c1ca:	d126      	bne.n	1c21a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1c1cc:	693b      	ldr	r3, [r7, #16]
   1c1ce:	699a      	ldr	r2, [r3, #24]
   1c1d0:	697b      	ldr	r3, [r7, #20]
   1c1d2:	18d3      	adds	r3, r2, r3
   1c1d4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1c1d6:	68fa      	ldr	r2, [r7, #12]
   1c1d8:	697b      	ldr	r3, [r7, #20]
   1c1da:	429a      	cmp	r2, r3
   1c1dc:	d90e      	bls.n	1c1fc <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1c1de:	693b      	ldr	r3, [r7, #16]
   1c1e0:	68fa      	ldr	r2, [r7, #12]
   1c1e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1c1e4:	693b      	ldr	r3, [r7, #16]
   1c1e6:	693a      	ldr	r2, [r7, #16]
   1c1e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1c1ea:	4b15      	ldr	r3, [pc, #84]	; (1c240 <prvSwitchTimerLists+0xac>)
   1c1ec:	681a      	ldr	r2, [r3, #0]
   1c1ee:	693b      	ldr	r3, [r7, #16]
   1c1f0:	3304      	adds	r3, #4
   1c1f2:	0019      	movs	r1, r3
   1c1f4:	0010      	movs	r0, r2
   1c1f6:	4b14      	ldr	r3, [pc, #80]	; (1c248 <prvSwitchTimerLists+0xb4>)
   1c1f8:	4798      	blx	r3
   1c1fa:	e00e      	b.n	1c21a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1c1fc:	697a      	ldr	r2, [r7, #20]
   1c1fe:	6938      	ldr	r0, [r7, #16]
   1c200:	2300      	movs	r3, #0
   1c202:	9300      	str	r3, [sp, #0]
   1c204:	2300      	movs	r3, #0
   1c206:	2100      	movs	r1, #0
   1c208:	4c10      	ldr	r4, [pc, #64]	; (1c24c <prvSwitchTimerLists+0xb8>)
   1c20a:	47a0      	blx	r4
   1c20c:	0003      	movs	r3, r0
   1c20e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1c210:	68bb      	ldr	r3, [r7, #8]
   1c212:	2b00      	cmp	r3, #0
   1c214:	d101      	bne.n	1c21a <prvSwitchTimerLists+0x86>
   1c216:	b672      	cpsid	i
   1c218:	e7fe      	b.n	1c218 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1c21a:	4b09      	ldr	r3, [pc, #36]	; (1c240 <prvSwitchTimerLists+0xac>)
   1c21c:	681b      	ldr	r3, [r3, #0]
   1c21e:	681b      	ldr	r3, [r3, #0]
   1c220:	2b00      	cmp	r3, #0
   1c222:	d1bb      	bne.n	1c19c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1c224:	4b06      	ldr	r3, [pc, #24]	; (1c240 <prvSwitchTimerLists+0xac>)
   1c226:	681b      	ldr	r3, [r3, #0]
   1c228:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1c22a:	4b09      	ldr	r3, [pc, #36]	; (1c250 <prvSwitchTimerLists+0xbc>)
   1c22c:	681a      	ldr	r2, [r3, #0]
   1c22e:	4b04      	ldr	r3, [pc, #16]	; (1c240 <prvSwitchTimerLists+0xac>)
   1c230:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1c232:	4b07      	ldr	r3, [pc, #28]	; (1c250 <prvSwitchTimerLists+0xbc>)
   1c234:	687a      	ldr	r2, [r7, #4]
   1c236:	601a      	str	r2, [r3, #0]
}
   1c238:	46c0      	nop			; (mov r8, r8)
   1c23a:	46bd      	mov	sp, r7
   1c23c:	b007      	add	sp, #28
   1c23e:	bd90      	pop	{r4, r7, pc}
   1c240:	20004080 	.word	0x20004080
   1c244:	000188bb 	.word	0x000188bb
   1c248:	0001884f 	.word	0x0001884f
   1c24c:	0001bd69 	.word	0x0001bd69
   1c250:	20004084 	.word	0x20004084

0001c254 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1c254:	b580      	push	{r7, lr}
   1c256:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1c258:	4b10      	ldr	r3, [pc, #64]	; (1c29c <prvCheckForValidListAndQueue+0x48>)
   1c25a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1c25c:	4b10      	ldr	r3, [pc, #64]	; (1c2a0 <prvCheckForValidListAndQueue+0x4c>)
   1c25e:	681b      	ldr	r3, [r3, #0]
   1c260:	2b00      	cmp	r3, #0
   1c262:	d115      	bne.n	1c290 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1c264:	4b0f      	ldr	r3, [pc, #60]	; (1c2a4 <prvCheckForValidListAndQueue+0x50>)
   1c266:	0018      	movs	r0, r3
   1c268:	4b0f      	ldr	r3, [pc, #60]	; (1c2a8 <prvCheckForValidListAndQueue+0x54>)
   1c26a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1c26c:	4b0f      	ldr	r3, [pc, #60]	; (1c2ac <prvCheckForValidListAndQueue+0x58>)
   1c26e:	0018      	movs	r0, r3
   1c270:	4b0d      	ldr	r3, [pc, #52]	; (1c2a8 <prvCheckForValidListAndQueue+0x54>)
   1c272:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1c274:	4b0e      	ldr	r3, [pc, #56]	; (1c2b0 <prvCheckForValidListAndQueue+0x5c>)
   1c276:	4a0b      	ldr	r2, [pc, #44]	; (1c2a4 <prvCheckForValidListAndQueue+0x50>)
   1c278:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1c27a:	4b0e      	ldr	r3, [pc, #56]	; (1c2b4 <prvCheckForValidListAndQueue+0x60>)
   1c27c:	4a0b      	ldr	r2, [pc, #44]	; (1c2ac <prvCheckForValidListAndQueue+0x58>)
   1c27e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1c280:	2200      	movs	r2, #0
   1c282:	210c      	movs	r1, #12
   1c284:	2005      	movs	r0, #5
   1c286:	4b0c      	ldr	r3, [pc, #48]	; (1c2b8 <prvCheckForValidListAndQueue+0x64>)
   1c288:	4798      	blx	r3
   1c28a:	0002      	movs	r2, r0
   1c28c:	4b04      	ldr	r3, [pc, #16]	; (1c2a0 <prvCheckForValidListAndQueue+0x4c>)
   1c28e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1c290:	4b0a      	ldr	r3, [pc, #40]	; (1c2bc <prvCheckForValidListAndQueue+0x68>)
   1c292:	4798      	blx	r3
}
   1c294:	46c0      	nop			; (mov r8, r8)
   1c296:	46bd      	mov	sp, r7
   1c298:	bd80      	pop	{r7, pc}
   1c29a:	46c0      	nop			; (mov r8, r8)
   1c29c:	00018a49 	.word	0x00018a49
   1c2a0:	20004088 	.word	0x20004088
   1c2a4:	20004058 	.word	0x20004058
   1c2a8:	000187b9 	.word	0x000187b9
   1c2ac:	2000406c 	.word	0x2000406c
   1c2b0:	20004080 	.word	0x20004080
   1c2b4:	20004084 	.word	0x20004084
   1c2b8:	00018d35 	.word	0x00018d35
   1c2bc:	00018a6d 	.word	0x00018a6d

0001c2c0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1c2c0:	b580      	push	{r7, lr}
   1c2c2:	b082      	sub	sp, #8
   1c2c4:	af00      	add	r7, sp, #0
   1c2c6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1c2c8:	687b      	ldr	r3, [r7, #4]
   1c2ca:	7c1b      	ldrb	r3, [r3, #16]
   1c2cc:	2b00      	cmp	r3, #0
   1c2ce:	d00b      	beq.n	1c2e8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1c2d0:	687b      	ldr	r3, [r7, #4]
   1c2d2:	689b      	ldr	r3, [r3, #8]
   1c2d4:	1c5a      	adds	r2, r3, #1
   1c2d6:	687b      	ldr	r3, [r7, #4]
   1c2d8:	68d9      	ldr	r1, [r3, #12]
   1c2da:	4b10      	ldr	r3, [pc, #64]	; (1c31c <advance_pointer+0x5c>)
   1c2dc:	0010      	movs	r0, r2
   1c2de:	4798      	blx	r3
   1c2e0:	000b      	movs	r3, r1
   1c2e2:	001a      	movs	r2, r3
   1c2e4:	687b      	ldr	r3, [r7, #4]
   1c2e6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1c2e8:	687b      	ldr	r3, [r7, #4]
   1c2ea:	685b      	ldr	r3, [r3, #4]
   1c2ec:	1c5a      	adds	r2, r3, #1
   1c2ee:	687b      	ldr	r3, [r7, #4]
   1c2f0:	68d9      	ldr	r1, [r3, #12]
   1c2f2:	4b0a      	ldr	r3, [pc, #40]	; (1c31c <advance_pointer+0x5c>)
   1c2f4:	0010      	movs	r0, r2
   1c2f6:	4798      	blx	r3
   1c2f8:	000b      	movs	r3, r1
   1c2fa:	001a      	movs	r2, r3
   1c2fc:	687b      	ldr	r3, [r7, #4]
   1c2fe:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1c300:	687b      	ldr	r3, [r7, #4]
   1c302:	685a      	ldr	r2, [r3, #4]
   1c304:	687b      	ldr	r3, [r7, #4]
   1c306:	689b      	ldr	r3, [r3, #8]
   1c308:	1ad3      	subs	r3, r2, r3
   1c30a:	425a      	negs	r2, r3
   1c30c:	4153      	adcs	r3, r2
   1c30e:	b2da      	uxtb	r2, r3
   1c310:	687b      	ldr	r3, [r7, #4]
   1c312:	741a      	strb	r2, [r3, #16]
 }
   1c314:	46c0      	nop			; (mov r8, r8)
   1c316:	46bd      	mov	sp, r7
   1c318:	b002      	add	sp, #8
   1c31a:	bd80      	pop	{r7, pc}
   1c31c:	00031419 	.word	0x00031419

0001c320 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1c320:	b580      	push	{r7, lr}
   1c322:	b082      	sub	sp, #8
   1c324:	af00      	add	r7, sp, #0
   1c326:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1c328:	687b      	ldr	r3, [r7, #4]
   1c32a:	2200      	movs	r2, #0
   1c32c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1c32e:	687b      	ldr	r3, [r7, #4]
   1c330:	689b      	ldr	r3, [r3, #8]
   1c332:	1c5a      	adds	r2, r3, #1
   1c334:	687b      	ldr	r3, [r7, #4]
   1c336:	68d9      	ldr	r1, [r3, #12]
   1c338:	4b05      	ldr	r3, [pc, #20]	; (1c350 <retreat_pointer+0x30>)
   1c33a:	0010      	movs	r0, r2
   1c33c:	4798      	blx	r3
   1c33e:	000b      	movs	r3, r1
   1c340:	001a      	movs	r2, r3
   1c342:	687b      	ldr	r3, [r7, #4]
   1c344:	609a      	str	r2, [r3, #8]
 }
   1c346:	46c0      	nop			; (mov r8, r8)
   1c348:	46bd      	mov	sp, r7
   1c34a:	b002      	add	sp, #8
   1c34c:	bd80      	pop	{r7, pc}
   1c34e:	46c0      	nop			; (mov r8, r8)
   1c350:	00031419 	.word	0x00031419

0001c354 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1c354:	b580      	push	{r7, lr}
   1c356:	b084      	sub	sp, #16
   1c358:	af00      	add	r7, sp, #0
   1c35a:	6078      	str	r0, [r7, #4]
   1c35c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1c35e:	2014      	movs	r0, #20
   1c360:	4b09      	ldr	r3, [pc, #36]	; (1c388 <circular_buf_init+0x34>)
   1c362:	4798      	blx	r3
   1c364:	0003      	movs	r3, r0
   1c366:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1c368:	68fb      	ldr	r3, [r7, #12]
   1c36a:	687a      	ldr	r2, [r7, #4]
   1c36c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1c36e:	68fb      	ldr	r3, [r7, #12]
   1c370:	683a      	ldr	r2, [r7, #0]
   1c372:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1c374:	68fb      	ldr	r3, [r7, #12]
   1c376:	0018      	movs	r0, r3
   1c378:	4b04      	ldr	r3, [pc, #16]	; (1c38c <circular_buf_init+0x38>)
   1c37a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1c37c:	68fb      	ldr	r3, [r7, #12]
 }
   1c37e:	0018      	movs	r0, r3
   1c380:	46bd      	mov	sp, r7
   1c382:	b004      	add	sp, #16
   1c384:	bd80      	pop	{r7, pc}
   1c386:	46c0      	nop			; (mov r8, r8)
   1c388:	00033141 	.word	0x00033141
   1c38c:	0001c391 	.word	0x0001c391

0001c390 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1c390:	b580      	push	{r7, lr}
   1c392:	b082      	sub	sp, #8
   1c394:	af00      	add	r7, sp, #0
   1c396:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1c398:	687b      	ldr	r3, [r7, #4]
   1c39a:	2200      	movs	r2, #0
   1c39c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1c39e:	687b      	ldr	r3, [r7, #4]
   1c3a0:	2200      	movs	r2, #0
   1c3a2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1c3a4:	687b      	ldr	r3, [r7, #4]
   1c3a6:	2200      	movs	r2, #0
   1c3a8:	741a      	strb	r2, [r3, #16]
 }
   1c3aa:	46c0      	nop			; (mov r8, r8)
   1c3ac:	46bd      	mov	sp, r7
   1c3ae:	b002      	add	sp, #8
   1c3b0:	bd80      	pop	{r7, pc}
	...

0001c3b4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1c3b4:	b580      	push	{r7, lr}
   1c3b6:	b082      	sub	sp, #8
   1c3b8:	af00      	add	r7, sp, #0
   1c3ba:	6078      	str	r0, [r7, #4]
   1c3bc:	000a      	movs	r2, r1
   1c3be:	1cfb      	adds	r3, r7, #3
   1c3c0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1c3c2:	687b      	ldr	r3, [r7, #4]
   1c3c4:	681a      	ldr	r2, [r3, #0]
   1c3c6:	687b      	ldr	r3, [r7, #4]
   1c3c8:	685b      	ldr	r3, [r3, #4]
   1c3ca:	18d3      	adds	r3, r2, r3
   1c3cc:	1cfa      	adds	r2, r7, #3
   1c3ce:	7812      	ldrb	r2, [r2, #0]
   1c3d0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1c3d2:	687b      	ldr	r3, [r7, #4]
   1c3d4:	0018      	movs	r0, r3
   1c3d6:	4b03      	ldr	r3, [pc, #12]	; (1c3e4 <circular_buf_put+0x30>)
   1c3d8:	4798      	blx	r3
 }
   1c3da:	46c0      	nop			; (mov r8, r8)
   1c3dc:	46bd      	mov	sp, r7
   1c3de:	b002      	add	sp, #8
   1c3e0:	bd80      	pop	{r7, pc}
   1c3e2:	46c0      	nop			; (mov r8, r8)
   1c3e4:	0001c2c1 	.word	0x0001c2c1

0001c3e8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1c3e8:	b580      	push	{r7, lr}
   1c3ea:	b084      	sub	sp, #16
   1c3ec:	af00      	add	r7, sp, #0
   1c3ee:	6078      	str	r0, [r7, #4]
   1c3f0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1c3f2:	2301      	movs	r3, #1
   1c3f4:	425b      	negs	r3, r3
   1c3f6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1c3f8:	687b      	ldr	r3, [r7, #4]
   1c3fa:	0018      	movs	r0, r3
   1c3fc:	4b0d      	ldr	r3, [pc, #52]	; (1c434 <circular_buf_get+0x4c>)
   1c3fe:	4798      	blx	r3
   1c400:	0003      	movs	r3, r0
   1c402:	001a      	movs	r2, r3
   1c404:	2301      	movs	r3, #1
   1c406:	4053      	eors	r3, r2
   1c408:	b2db      	uxtb	r3, r3
   1c40a:	2b00      	cmp	r3, #0
   1c40c:	d00d      	beq.n	1c42a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1c40e:	687b      	ldr	r3, [r7, #4]
   1c410:	681a      	ldr	r2, [r3, #0]
   1c412:	687b      	ldr	r3, [r7, #4]
   1c414:	689b      	ldr	r3, [r3, #8]
   1c416:	18d3      	adds	r3, r2, r3
   1c418:	781a      	ldrb	r2, [r3, #0]
   1c41a:	683b      	ldr	r3, [r7, #0]
   1c41c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1c41e:	687b      	ldr	r3, [r7, #4]
   1c420:	0018      	movs	r0, r3
   1c422:	4b05      	ldr	r3, [pc, #20]	; (1c438 <circular_buf_get+0x50>)
   1c424:	4798      	blx	r3

		 r = 0;
   1c426:	2300      	movs	r3, #0
   1c428:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1c42a:	68fb      	ldr	r3, [r7, #12]
 }
   1c42c:	0018      	movs	r0, r3
   1c42e:	46bd      	mov	sp, r7
   1c430:	b004      	add	sp, #16
   1c432:	bd80      	pop	{r7, pc}
   1c434:	0001c43d 	.word	0x0001c43d
   1c438:	0001c321 	.word	0x0001c321

0001c43c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1c43c:	b580      	push	{r7, lr}
   1c43e:	b082      	sub	sp, #8
   1c440:	af00      	add	r7, sp, #0
   1c442:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1c444:	687b      	ldr	r3, [r7, #4]
   1c446:	7c1b      	ldrb	r3, [r3, #16]
   1c448:	2201      	movs	r2, #1
   1c44a:	4053      	eors	r3, r2
   1c44c:	b2db      	uxtb	r3, r3
   1c44e:	2b00      	cmp	r3, #0
   1c450:	d007      	beq.n	1c462 <circular_buf_empty+0x26>
   1c452:	687b      	ldr	r3, [r7, #4]
   1c454:	685a      	ldr	r2, [r3, #4]
   1c456:	687b      	ldr	r3, [r7, #4]
   1c458:	689b      	ldr	r3, [r3, #8]
   1c45a:	429a      	cmp	r2, r3
   1c45c:	d101      	bne.n	1c462 <circular_buf_empty+0x26>
   1c45e:	2301      	movs	r3, #1
   1c460:	e000      	b.n	1c464 <circular_buf_empty+0x28>
   1c462:	2300      	movs	r3, #0
   1c464:	1c1a      	adds	r2, r3, #0
   1c466:	2301      	movs	r3, #1
   1c468:	4013      	ands	r3, r2
   1c46a:	b2db      	uxtb	r3, r3
 }
   1c46c:	0018      	movs	r0, r3
   1c46e:	46bd      	mov	sp, r7
   1c470:	b002      	add	sp, #8
   1c472:	bd80      	pop	{r7, pc}

0001c474 <system_interrupt_enable>:
{
   1c474:	b580      	push	{r7, lr}
   1c476:	b082      	sub	sp, #8
   1c478:	af00      	add	r7, sp, #0
   1c47a:	0002      	movs	r2, r0
   1c47c:	1dfb      	adds	r3, r7, #7
   1c47e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1c480:	4b06      	ldr	r3, [pc, #24]	; (1c49c <system_interrupt_enable+0x28>)
   1c482:	1dfa      	adds	r2, r7, #7
   1c484:	7812      	ldrb	r2, [r2, #0]
   1c486:	0011      	movs	r1, r2
   1c488:	221f      	movs	r2, #31
   1c48a:	400a      	ands	r2, r1
   1c48c:	2101      	movs	r1, #1
   1c48e:	4091      	lsls	r1, r2
   1c490:	000a      	movs	r2, r1
   1c492:	601a      	str	r2, [r3, #0]
}
   1c494:	46c0      	nop			; (mov r8, r8)
   1c496:	46bd      	mov	sp, r7
   1c498:	b002      	add	sp, #8
   1c49a:	bd80      	pop	{r7, pc}
   1c49c:	e000e100 	.word	0xe000e100

0001c4a0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1c4a0:	b580      	push	{r7, lr}
   1c4a2:	b084      	sub	sp, #16
   1c4a4:	af00      	add	r7, sp, #0
   1c4a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1c4a8:	687b      	ldr	r3, [r7, #4]
   1c4aa:	681b      	ldr	r3, [r3, #0]
   1c4ac:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1c4ae:	68fb      	ldr	r3, [r7, #12]
   1c4b0:	69db      	ldr	r3, [r3, #28]
   1c4b2:	1e5a      	subs	r2, r3, #1
   1c4b4:	4193      	sbcs	r3, r2
   1c4b6:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1c4b8:	0018      	movs	r0, r3
   1c4ba:	46bd      	mov	sp, r7
   1c4bc:	b004      	add	sp, #16
   1c4be:	bd80      	pop	{r7, pc}

0001c4c0 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1c4c0:	b580      	push	{r7, lr}
   1c4c2:	b082      	sub	sp, #8
   1c4c4:	af00      	add	r7, sp, #0
   1c4c6:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1c4c8:	46c0      	nop			; (mov r8, r8)
   1c4ca:	687b      	ldr	r3, [r7, #4]
   1c4cc:	0018      	movs	r0, r3
   1c4ce:	4b04      	ldr	r3, [pc, #16]	; (1c4e0 <_usart_wait_for_sync+0x20>)
   1c4d0:	4798      	blx	r3
   1c4d2:	1e03      	subs	r3, r0, #0
   1c4d4:	d1f9      	bne.n	1c4ca <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1c4d6:	46c0      	nop			; (mov r8, r8)
   1c4d8:	46bd      	mov	sp, r7
   1c4da:	b002      	add	sp, #8
   1c4dc:	bd80      	pop	{r7, pc}
   1c4de:	46c0      	nop			; (mov r8, r8)
   1c4e0:	0001c4a1 	.word	0x0001c4a1

0001c4e4 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1c4e4:	b580      	push	{r7, lr}
   1c4e6:	b082      	sub	sp, #8
   1c4e8:	af00      	add	r7, sp, #0
   1c4ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1c4ec:	687b      	ldr	r3, [r7, #4]
   1c4ee:	2280      	movs	r2, #128	; 0x80
   1c4f0:	05d2      	lsls	r2, r2, #23
   1c4f2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1c4f4:	687b      	ldr	r3, [r7, #4]
   1c4f6:	2200      	movs	r2, #0
   1c4f8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1c4fa:	687b      	ldr	r3, [r7, #4]
   1c4fc:	22ff      	movs	r2, #255	; 0xff
   1c4fe:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1c500:	687b      	ldr	r3, [r7, #4]
   1c502:	2200      	movs	r2, #0
   1c504:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1c506:	687b      	ldr	r3, [r7, #4]
   1c508:	2200      	movs	r2, #0
   1c50a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1c50c:	687b      	ldr	r3, [r7, #4]
   1c50e:	2296      	movs	r2, #150	; 0x96
   1c510:	0192      	lsls	r2, r2, #6
   1c512:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1c514:	687b      	ldr	r3, [r7, #4]
   1c516:	2224      	movs	r2, #36	; 0x24
   1c518:	2101      	movs	r1, #1
   1c51a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1c51c:	687b      	ldr	r3, [r7, #4]
   1c51e:	2225      	movs	r2, #37	; 0x25
   1c520:	2101      	movs	r1, #1
   1c522:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1c524:	687b      	ldr	r3, [r7, #4]
   1c526:	2226      	movs	r2, #38	; 0x26
   1c528:	2100      	movs	r1, #0
   1c52a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1c52c:	687b      	ldr	r3, [r7, #4]
   1c52e:	2227      	movs	r2, #39	; 0x27
   1c530:	2100      	movs	r1, #0
   1c532:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1c534:	687b      	ldr	r3, [r7, #4]
   1c536:	2200      	movs	r2, #0
   1c538:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1c53a:	687b      	ldr	r3, [r7, #4]
   1c53c:	2288      	movs	r2, #136	; 0x88
   1c53e:	0352      	lsls	r2, r2, #13
   1c540:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1c542:	687b      	ldr	r3, [r7, #4]
   1c544:	222c      	movs	r2, #44	; 0x2c
   1c546:	2100      	movs	r1, #0
   1c548:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1c54a:	687b      	ldr	r3, [r7, #4]
   1c54c:	222d      	movs	r2, #45	; 0x2d
   1c54e:	2100      	movs	r1, #0
   1c550:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1c552:	687b      	ldr	r3, [r7, #4]
   1c554:	2200      	movs	r2, #0
   1c556:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1c558:	687b      	ldr	r3, [r7, #4]
   1c55a:	2200      	movs	r2, #0
   1c55c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1c55e:	687b      	ldr	r3, [r7, #4]
   1c560:	2200      	movs	r2, #0
   1c562:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1c564:	687b      	ldr	r3, [r7, #4]
   1c566:	2200      	movs	r2, #0
   1c568:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1c56a:	687b      	ldr	r3, [r7, #4]
   1c56c:	2200      	movs	r2, #0
   1c56e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1c570:	687b      	ldr	r3, [r7, #4]
   1c572:	2200      	movs	r2, #0
   1c574:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1c576:	687b      	ldr	r3, [r7, #4]
   1c578:	2200      	movs	r2, #0
   1c57a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1c57c:	687b      	ldr	r3, [r7, #4]
   1c57e:	2200      	movs	r2, #0
   1c580:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1c582:	687b      	ldr	r3, [r7, #4]
   1c584:	2200      	movs	r2, #0
   1c586:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1c588:	687b      	ldr	r3, [r7, #4]
   1c58a:	2200      	movs	r2, #0
   1c58c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1c58e:	687b      	ldr	r3, [r7, #4]
   1c590:	2213      	movs	r2, #19
   1c592:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1c594:	687b      	ldr	r3, [r7, #4]
   1c596:	2200      	movs	r2, #0
   1c598:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1c59a:	46c0      	nop			; (mov r8, r8)
   1c59c:	46bd      	mov	sp, r7
   1c59e:	b002      	add	sp, #8
   1c5a0:	bd80      	pop	{r7, pc}
	...

0001c5a4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1c5a4:	b580      	push	{r7, lr}
   1c5a6:	b084      	sub	sp, #16
   1c5a8:	af00      	add	r7, sp, #0
   1c5aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1c5ac:	687b      	ldr	r3, [r7, #4]
   1c5ae:	681b      	ldr	r3, [r3, #0]
   1c5b0:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1c5b2:	687b      	ldr	r3, [r7, #4]
   1c5b4:	681b      	ldr	r3, [r3, #0]
   1c5b6:	0018      	movs	r0, r3
   1c5b8:	4b09      	ldr	r3, [pc, #36]	; (1c5e0 <usart_enable+0x3c>)
   1c5ba:	4798      	blx	r3
   1c5bc:	0003      	movs	r3, r0
   1c5be:	0018      	movs	r0, r3
   1c5c0:	4b08      	ldr	r3, [pc, #32]	; (1c5e4 <usart_enable+0x40>)
   1c5c2:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1c5c4:	687b      	ldr	r3, [r7, #4]
   1c5c6:	0018      	movs	r0, r3
   1c5c8:	4b07      	ldr	r3, [pc, #28]	; (1c5e8 <usart_enable+0x44>)
   1c5ca:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1c5cc:	68fb      	ldr	r3, [r7, #12]
   1c5ce:	681b      	ldr	r3, [r3, #0]
   1c5d0:	2202      	movs	r2, #2
   1c5d2:	431a      	orrs	r2, r3
   1c5d4:	68fb      	ldr	r3, [r7, #12]
   1c5d6:	601a      	str	r2, [r3, #0]
}
   1c5d8:	46c0      	nop			; (mov r8, r8)
   1c5da:	46bd      	mov	sp, r7
   1c5dc:	b004      	add	sp, #16
   1c5de:	bd80      	pop	{r7, pc}
   1c5e0:	0002600d 	.word	0x0002600d
   1c5e4:	0001c475 	.word	0x0001c475
   1c5e8:	0001c4c1 	.word	0x0001c4c1

0001c5ec <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1c5ec:	b580      	push	{r7, lr}
   1c5ee:	b082      	sub	sp, #8
   1c5f0:	af00      	add	r7, sp, #0
   1c5f2:	6078      	str	r0, [r7, #4]
   1c5f4:	000a      	movs	r2, r1
   1c5f6:	1cfb      	adds	r3, r7, #3
   1c5f8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1c5fa:	687b      	ldr	r3, [r7, #4]
   1c5fc:	2231      	movs	r2, #49	; 0x31
   1c5fe:	5c9b      	ldrb	r3, [r3, r2]
   1c600:	b25a      	sxtb	r2, r3
   1c602:	1cfb      	adds	r3, r7, #3
   1c604:	781b      	ldrb	r3, [r3, #0]
   1c606:	2101      	movs	r1, #1
   1c608:	4099      	lsls	r1, r3
   1c60a:	000b      	movs	r3, r1
   1c60c:	b25b      	sxtb	r3, r3
   1c60e:	4313      	orrs	r3, r2
   1c610:	b25b      	sxtb	r3, r3
   1c612:	b2d9      	uxtb	r1, r3
   1c614:	687b      	ldr	r3, [r7, #4]
   1c616:	2231      	movs	r2, #49	; 0x31
   1c618:	5499      	strb	r1, [r3, r2]

}
   1c61a:	46c0      	nop			; (mov r8, r8)
   1c61c:	46bd      	mov	sp, r7
   1c61e:	b002      	add	sp, #8
   1c620:	bd80      	pop	{r7, pc}
	...

0001c624 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1c624:	b580      	push	{r7, lr}
   1c626:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1c628:	2380      	movs	r3, #128	; 0x80
   1c62a:	009a      	lsls	r2, r3, #2
   1c62c:	4b0f      	ldr	r3, [pc, #60]	; (1c66c <InitializeSerialConsole+0x48>)
   1c62e:	0011      	movs	r1, r2
   1c630:	0018      	movs	r0, r3
   1c632:	4b0f      	ldr	r3, [pc, #60]	; (1c670 <InitializeSerialConsole+0x4c>)
   1c634:	4798      	blx	r3
   1c636:	0002      	movs	r2, r0
   1c638:	4b0e      	ldr	r3, [pc, #56]	; (1c674 <InitializeSerialConsole+0x50>)
   1c63a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1c63c:	2380      	movs	r3, #128	; 0x80
   1c63e:	009a      	lsls	r2, r3, #2
   1c640:	4b0d      	ldr	r3, [pc, #52]	; (1c678 <InitializeSerialConsole+0x54>)
   1c642:	0011      	movs	r1, r2
   1c644:	0018      	movs	r0, r3
   1c646:	4b0a      	ldr	r3, [pc, #40]	; (1c670 <InitializeSerialConsole+0x4c>)
   1c648:	4798      	blx	r3
   1c64a:	0002      	movs	r2, r0
   1c64c:	4b0b      	ldr	r3, [pc, #44]	; (1c67c <InitializeSerialConsole+0x58>)
   1c64e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1c650:	4b0b      	ldr	r3, [pc, #44]	; (1c680 <InitializeSerialConsole+0x5c>)
   1c652:	4798      	blx	r3
    configure_usart_callbacks();
   1c654:	4b0b      	ldr	r3, [pc, #44]	; (1c684 <InitializeSerialConsole+0x60>)
   1c656:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1c658:	490b      	ldr	r1, [pc, #44]	; (1c688 <InitializeSerialConsole+0x64>)
   1c65a:	4b0c      	ldr	r3, [pc, #48]	; (1c68c <InitializeSerialConsole+0x68>)
   1c65c:	2201      	movs	r2, #1
   1c65e:	0018      	movs	r0, r3
   1c660:	4b0b      	ldr	r3, [pc, #44]	; (1c690 <InitializeSerialConsole+0x6c>)
   1c662:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1c664:	46c0      	nop			; (mov r8, r8)
   1c666:	46bd      	mov	sp, r7
   1c668:	bd80      	pop	{r7, pc}
   1c66a:	46c0      	nop			; (mov r8, r8)
   1c66c:	2000564c 	.word	0x2000564c
   1c670:	0001c355 	.word	0x0001c355
   1c674:	20005444 	.word	0x20005444
   1c678:	2000544c 	.word	0x2000544c
   1c67c:	20005850 	.word	0x20005850
   1c680:	0001c7f9 	.word	0x0001c7f9
   1c684:	0001c871 	.word	0x0001c871
   1c688:	20005448 	.word	0x20005448
   1c68c:	20005410 	.word	0x20005410
   1c690:	000278b5 	.word	0x000278b5

0001c694 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1c694:	b580      	push	{r7, lr}
   1c696:	b084      	sub	sp, #16
   1c698:	af00      	add	r7, sp, #0
   1c69a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1c69c:	4b1a      	ldr	r3, [pc, #104]	; (1c708 <SerialConsoleWriteString+0x74>)
   1c69e:	4798      	blx	r3
    if (string != NULL) {
   1c6a0:	687b      	ldr	r3, [r7, #4]
   1c6a2:	2b00      	cmp	r3, #0
   1c6a4:	d02a      	beq.n	1c6fc <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1c6a6:	2300      	movs	r3, #0
   1c6a8:	60fb      	str	r3, [r7, #12]
   1c6aa:	e00b      	b.n	1c6c4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1c6ac:	4b17      	ldr	r3, [pc, #92]	; (1c70c <SerialConsoleWriteString+0x78>)
   1c6ae:	6818      	ldr	r0, [r3, #0]
   1c6b0:	687a      	ldr	r2, [r7, #4]
   1c6b2:	68fb      	ldr	r3, [r7, #12]
   1c6b4:	18d3      	adds	r3, r2, r3
   1c6b6:	781b      	ldrb	r3, [r3, #0]
   1c6b8:	0019      	movs	r1, r3
   1c6ba:	4b15      	ldr	r3, [pc, #84]	; (1c710 <SerialConsoleWriteString+0x7c>)
   1c6bc:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1c6be:	68fb      	ldr	r3, [r7, #12]
   1c6c0:	3301      	adds	r3, #1
   1c6c2:	60fb      	str	r3, [r7, #12]
   1c6c4:	687b      	ldr	r3, [r7, #4]
   1c6c6:	0018      	movs	r0, r3
   1c6c8:	4b12      	ldr	r3, [pc, #72]	; (1c714 <SerialConsoleWriteString+0x80>)
   1c6ca:	4798      	blx	r3
   1c6cc:	0002      	movs	r2, r0
   1c6ce:	68fb      	ldr	r3, [r7, #12]
   1c6d0:	429a      	cmp	r2, r3
   1c6d2:	d8eb      	bhi.n	1c6ac <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1c6d4:	4b10      	ldr	r3, [pc, #64]	; (1c718 <SerialConsoleWriteString+0x84>)
   1c6d6:	2101      	movs	r1, #1
   1c6d8:	0018      	movs	r0, r3
   1c6da:	4b10      	ldr	r3, [pc, #64]	; (1c71c <SerialConsoleWriteString+0x88>)
   1c6dc:	4798      	blx	r3
   1c6de:	1e03      	subs	r3, r0, #0
   1c6e0:	d10c      	bne.n	1c6fc <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1c6e2:	4b0a      	ldr	r3, [pc, #40]	; (1c70c <SerialConsoleWriteString+0x78>)
   1c6e4:	681b      	ldr	r3, [r3, #0]
   1c6e6:	4a0e      	ldr	r2, [pc, #56]	; (1c720 <SerialConsoleWriteString+0x8c>)
   1c6e8:	0011      	movs	r1, r2
   1c6ea:	0018      	movs	r0, r3
   1c6ec:	4b0d      	ldr	r3, [pc, #52]	; (1c724 <SerialConsoleWriteString+0x90>)
   1c6ee:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1c6f0:	490b      	ldr	r1, [pc, #44]	; (1c720 <SerialConsoleWriteString+0x8c>)
   1c6f2:	4b09      	ldr	r3, [pc, #36]	; (1c718 <SerialConsoleWriteString+0x84>)
   1c6f4:	2201      	movs	r2, #1
   1c6f6:	0018      	movs	r0, r3
   1c6f8:	4b0b      	ldr	r3, [pc, #44]	; (1c728 <SerialConsoleWriteString+0x94>)
   1c6fa:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1c6fc:	4b0b      	ldr	r3, [pc, #44]	; (1c72c <SerialConsoleWriteString+0x98>)
   1c6fe:	4798      	blx	r3
}
   1c700:	46c0      	nop			; (mov r8, r8)
   1c702:	46bd      	mov	sp, r7
   1c704:	b004      	add	sp, #16
   1c706:	bd80      	pop	{r7, pc}
   1c708:	0001ad01 	.word	0x0001ad01
   1c70c:	20005850 	.word	0x20005850
   1c710:	0001c3b5 	.word	0x0001c3b5
   1c714:	0003353b 	.word	0x0003353b
   1c718:	20005410 	.word	0x20005410
   1c71c:	000278fd 	.word	0x000278fd
   1c720:	2000584c 	.word	0x2000584c
   1c724:	0001c3e9 	.word	0x0001c3e9
   1c728:	0002786d 	.word	0x0002786d
   1c72c:	0001ad19 	.word	0x0001ad19

0001c730 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1c730:	b580      	push	{r7, lr}
   1c732:	b084      	sub	sp, #16
   1c734:	af00      	add	r7, sp, #0
   1c736:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1c738:	4b08      	ldr	r3, [pc, #32]	; (1c75c <SerialConsoleReadCharacter+0x2c>)
   1c73a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1c73c:	4b08      	ldr	r3, [pc, #32]	; (1c760 <SerialConsoleReadCharacter+0x30>)
   1c73e:	681b      	ldr	r3, [r3, #0]
   1c740:	687a      	ldr	r2, [r7, #4]
   1c742:	0011      	movs	r1, r2
   1c744:	0018      	movs	r0, r3
   1c746:	4b07      	ldr	r3, [pc, #28]	; (1c764 <SerialConsoleReadCharacter+0x34>)
   1c748:	4798      	blx	r3
   1c74a:	0003      	movs	r3, r0
   1c74c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1c74e:	4b06      	ldr	r3, [pc, #24]	; (1c768 <SerialConsoleReadCharacter+0x38>)
   1c750:	4798      	blx	r3
    return a;
   1c752:	68fb      	ldr	r3, [r7, #12]
}
   1c754:	0018      	movs	r0, r3
   1c756:	46bd      	mov	sp, r7
   1c758:	b004      	add	sp, #16
   1c75a:	bd80      	pop	{r7, pc}
   1c75c:	0001ad01 	.word	0x0001ad01
   1c760:	20005444 	.word	0x20005444
   1c764:	0001c3e9 	.word	0x0001c3e9
   1c768:	0001ad19 	.word	0x0001ad19

0001c76c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1c76c:	b580      	push	{r7, lr}
   1c76e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1c770:	4b02      	ldr	r3, [pc, #8]	; (1c77c <getLogLevel+0x10>)
   1c772:	781b      	ldrb	r3, [r3, #0]
}
   1c774:	0018      	movs	r0, r3
   1c776:	46bd      	mov	sp, r7
   1c778:	bd80      	pop	{r7, pc}
   1c77a:	46c0      	nop			; (mov r8, r8)
   1c77c:	20004094 	.word	0x20004094

0001c780 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1c780:	b40e      	push	{r1, r2, r3}
   1c782:	b590      	push	{r4, r7, lr}
   1c784:	b084      	sub	sp, #16
   1c786:	af00      	add	r7, sp, #0
   1c788:	0002      	movs	r2, r0
   1c78a:	1dfb      	adds	r3, r7, #7
   1c78c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1c78e:	4b0e      	ldr	r3, [pc, #56]	; (1c7c8 <LogMessage+0x48>)
   1c790:	4798      	blx	r3
   1c792:	0003      	movs	r3, r0
   1c794:	001a      	movs	r2, r3
   1c796:	1dfb      	adds	r3, r7, #7
   1c798:	781b      	ldrb	r3, [r3, #0]
   1c79a:	4293      	cmp	r3, r2
   1c79c:	d30c      	bcc.n	1c7b8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1c79e:	2320      	movs	r3, #32
   1c7a0:	18fb      	adds	r3, r7, r3
   1c7a2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1c7a4:	68fb      	ldr	r3, [r7, #12]
   1c7a6:	69fa      	ldr	r2, [r7, #28]
   1c7a8:	4808      	ldr	r0, [pc, #32]	; (1c7cc <LogMessage+0x4c>)
   1c7aa:	217f      	movs	r1, #127	; 0x7f
   1c7ac:	4c08      	ldr	r4, [pc, #32]	; (1c7d0 <LogMessage+0x50>)
   1c7ae:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1c7b0:	4b06      	ldr	r3, [pc, #24]	; (1c7cc <LogMessage+0x4c>)
   1c7b2:	0018      	movs	r0, r3
   1c7b4:	4b07      	ldr	r3, [pc, #28]	; (1c7d4 <LogMessage+0x54>)
   1c7b6:	4798      	blx	r3
        va_end(ap);
    }
};
   1c7b8:	46c0      	nop			; (mov r8, r8)
   1c7ba:	46bd      	mov	sp, r7
   1c7bc:	b004      	add	sp, #16
   1c7be:	bc90      	pop	{r4, r7}
   1c7c0:	bc08      	pop	{r3}
   1c7c2:	b003      	add	sp, #12
   1c7c4:	4718      	bx	r3
   1c7c6:	46c0      	nop			; (mov r8, r8)
   1c7c8:	0001c76d 	.word	0x0001c76d
   1c7cc:	20005390 	.word	0x20005390
   1c7d0:	00033775 	.word	0x00033775
   1c7d4:	0001c695 	.word	0x0001c695

0001c7d8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1c7d8:	b40f      	push	{r0, r1, r2, r3}
   1c7da:	b580      	push	{r7, lr}
   1c7dc:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1c7de:	68bb      	ldr	r3, [r7, #8]
   1c7e0:	0019      	movs	r1, r3
   1c7e2:	2001      	movs	r0, #1
   1c7e4:	4b03      	ldr	r3, [pc, #12]	; (1c7f4 <LogMessageDebug+0x1c>)
   1c7e6:	4798      	blx	r3
};
   1c7e8:	46c0      	nop			; (mov r8, r8)
   1c7ea:	46bd      	mov	sp, r7
   1c7ec:	bc80      	pop	{r7}
   1c7ee:	bc08      	pop	{r3}
   1c7f0:	b004      	add	sp, #16
   1c7f2:	4718      	bx	r3
   1c7f4:	0001c781 	.word	0x0001c781

0001c7f8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1c7f8:	b580      	push	{r7, lr}
   1c7fa:	b090      	sub	sp, #64	; 0x40
   1c7fc:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1c7fe:	003b      	movs	r3, r7
   1c800:	0018      	movs	r0, r3
   1c802:	4b14      	ldr	r3, [pc, #80]	; (1c854 <configure_usart+0x5c>)
   1c804:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1c806:	003b      	movs	r3, r7
   1c808:	22e1      	movs	r2, #225	; 0xe1
   1c80a:	0252      	lsls	r2, r2, #9
   1c80c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1c80e:	003b      	movs	r3, r7
   1c810:	22c4      	movs	r2, #196	; 0xc4
   1c812:	0392      	lsls	r2, r2, #14
   1c814:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1c816:	003b      	movs	r3, r7
   1c818:	2201      	movs	r2, #1
   1c81a:	4252      	negs	r2, r2
   1c81c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1c81e:	003b      	movs	r3, r7
   1c820:	2201      	movs	r2, #1
   1c822:	4252      	negs	r2, r2
   1c824:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1c826:	003b      	movs	r3, r7
   1c828:	4a0b      	ldr	r2, [pc, #44]	; (1c858 <configure_usart+0x60>)
   1c82a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1c82c:	003b      	movs	r3, r7
   1c82e:	4a0b      	ldr	r2, [pc, #44]	; (1c85c <configure_usart+0x64>)
   1c830:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1c832:	46c0      	nop			; (mov r8, r8)
   1c834:	003a      	movs	r2, r7
   1c836:	490a      	ldr	r1, [pc, #40]	; (1c860 <configure_usart+0x68>)
   1c838:	4b0a      	ldr	r3, [pc, #40]	; (1c864 <configure_usart+0x6c>)
   1c83a:	0018      	movs	r0, r3
   1c83c:	4b0a      	ldr	r3, [pc, #40]	; (1c868 <configure_usart+0x70>)
   1c83e:	4798      	blx	r3
   1c840:	1e03      	subs	r3, r0, #0
   1c842:	d1f7      	bne.n	1c834 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1c844:	4b07      	ldr	r3, [pc, #28]	; (1c864 <configure_usart+0x6c>)
   1c846:	0018      	movs	r0, r3
   1c848:	4b08      	ldr	r3, [pc, #32]	; (1c86c <configure_usart+0x74>)
   1c84a:	4798      	blx	r3
}
   1c84c:	46c0      	nop			; (mov r8, r8)
   1c84e:	46bd      	mov	sp, r7
   1c850:	b010      	add	sp, #64	; 0x40
   1c852:	bd80      	pop	{r7, pc}
   1c854:	0001c4e5 	.word	0x0001c4e5
   1c858:	002a0003 	.word	0x002a0003
   1c85c:	002b0003 	.word	0x002b0003
   1c860:	42001800 	.word	0x42001800
   1c864:	20005410 	.word	0x20005410
   1c868:	00027471 	.word	0x00027471
   1c86c:	0001c5a5 	.word	0x0001c5a5

0001c870 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1c870:	b580      	push	{r7, lr}
   1c872:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1c874:	490c      	ldr	r1, [pc, #48]	; (1c8a8 <configure_usart_callbacks+0x38>)
   1c876:	4b0d      	ldr	r3, [pc, #52]	; (1c8ac <configure_usart_callbacks+0x3c>)
   1c878:	2200      	movs	r2, #0
   1c87a:	0018      	movs	r0, r3
   1c87c:	4b0c      	ldr	r3, [pc, #48]	; (1c8b0 <configure_usart_callbacks+0x40>)
   1c87e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1c880:	490c      	ldr	r1, [pc, #48]	; (1c8b4 <configure_usart_callbacks+0x44>)
   1c882:	4b0a      	ldr	r3, [pc, #40]	; (1c8ac <configure_usart_callbacks+0x3c>)
   1c884:	2201      	movs	r2, #1
   1c886:	0018      	movs	r0, r3
   1c888:	4b09      	ldr	r3, [pc, #36]	; (1c8b0 <configure_usart_callbacks+0x40>)
   1c88a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1c88c:	4b07      	ldr	r3, [pc, #28]	; (1c8ac <configure_usart_callbacks+0x3c>)
   1c88e:	2100      	movs	r1, #0
   1c890:	0018      	movs	r0, r3
   1c892:	4b09      	ldr	r3, [pc, #36]	; (1c8b8 <configure_usart_callbacks+0x48>)
   1c894:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1c896:	4b05      	ldr	r3, [pc, #20]	; (1c8ac <configure_usart_callbacks+0x3c>)
   1c898:	2101      	movs	r1, #1
   1c89a:	0018      	movs	r0, r3
   1c89c:	4b06      	ldr	r3, [pc, #24]	; (1c8b8 <configure_usart_callbacks+0x48>)
   1c89e:	4798      	blx	r3
}
   1c8a0:	46c0      	nop			; (mov r8, r8)
   1c8a2:	46bd      	mov	sp, r7
   1c8a4:	bd80      	pop	{r7, pc}
   1c8a6:	46c0      	nop			; (mov r8, r8)
   1c8a8:	0001c905 	.word	0x0001c905
   1c8ac:	20005410 	.word	0x20005410
   1c8b0:	00027825 	.word	0x00027825
   1c8b4:	0001c8bd 	.word	0x0001c8bd
   1c8b8:	0001c5ed 	.word	0x0001c5ed

0001c8bc <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1c8bc:	b580      	push	{r7, lr}
   1c8be:	b082      	sub	sp, #8
   1c8c0:	af00      	add	r7, sp, #0
   1c8c2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1c8c4:	4b09      	ldr	r3, [pc, #36]	; (1c8ec <usart_read_callback+0x30>)
   1c8c6:	681a      	ldr	r2, [r3, #0]
   1c8c8:	4b09      	ldr	r3, [pc, #36]	; (1c8f0 <usart_read_callback+0x34>)
   1c8ca:	781b      	ldrb	r3, [r3, #0]
   1c8cc:	0019      	movs	r1, r3
   1c8ce:	0010      	movs	r0, r2
   1c8d0:	4b08      	ldr	r3, [pc, #32]	; (1c8f4 <usart_read_callback+0x38>)
   1c8d2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1c8d4:	4906      	ldr	r1, [pc, #24]	; (1c8f0 <usart_read_callback+0x34>)
   1c8d6:	4b08      	ldr	r3, [pc, #32]	; (1c8f8 <usart_read_callback+0x3c>)
   1c8d8:	2201      	movs	r2, #1
   1c8da:	0018      	movs	r0, r3
   1c8dc:	4b07      	ldr	r3, [pc, #28]	; (1c8fc <usart_read_callback+0x40>)
   1c8de:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1c8e0:	4b07      	ldr	r3, [pc, #28]	; (1c900 <usart_read_callback+0x44>)
   1c8e2:	4798      	blx	r3
}
   1c8e4:	46c0      	nop			; (mov r8, r8)
   1c8e6:	46bd      	mov	sp, r7
   1c8e8:	b002      	add	sp, #8
   1c8ea:	bd80      	pop	{r7, pc}
   1c8ec:	20005444 	.word	0x20005444
   1c8f0:	20005448 	.word	0x20005448
   1c8f4:	0001c3b5 	.word	0x0001c3b5
   1c8f8:	20005410 	.word	0x20005410
   1c8fc:	000278b5 	.word	0x000278b5
   1c900:	00013419 	.word	0x00013419

0001c904 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1c904:	b580      	push	{r7, lr}
   1c906:	b082      	sub	sp, #8
   1c908:	af00      	add	r7, sp, #0
   1c90a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1c90c:	4b09      	ldr	r3, [pc, #36]	; (1c934 <usart_write_callback+0x30>)
   1c90e:	681b      	ldr	r3, [r3, #0]
   1c910:	4a09      	ldr	r2, [pc, #36]	; (1c938 <usart_write_callback+0x34>)
   1c912:	0011      	movs	r1, r2
   1c914:	0018      	movs	r0, r3
   1c916:	4b09      	ldr	r3, [pc, #36]	; (1c93c <usart_write_callback+0x38>)
   1c918:	4798      	blx	r3
   1c91a:	0003      	movs	r3, r0
   1c91c:	3301      	adds	r3, #1
   1c91e:	d005      	beq.n	1c92c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1c920:	4905      	ldr	r1, [pc, #20]	; (1c938 <usart_write_callback+0x34>)
   1c922:	4b07      	ldr	r3, [pc, #28]	; (1c940 <usart_write_callback+0x3c>)
   1c924:	2201      	movs	r2, #1
   1c926:	0018      	movs	r0, r3
   1c928:	4b06      	ldr	r3, [pc, #24]	; (1c944 <usart_write_callback+0x40>)
   1c92a:	4798      	blx	r3
    }
}
   1c92c:	46c0      	nop			; (mov r8, r8)
   1c92e:	46bd      	mov	sp, r7
   1c930:	b002      	add	sp, #8
   1c932:	bd80      	pop	{r7, pc}
   1c934:	20005850 	.word	0x20005850
   1c938:	2000584c 	.word	0x2000584c
   1c93c:	0001c3e9 	.word	0x0001c3e9
   1c940:	20005410 	.word	0x20005410
   1c944:	0002786d 	.word	0x0002786d

0001c948 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1c948:	b590      	push	{r4, r7, lr}
   1c94a:	b087      	sub	sp, #28
   1c94c:	af00      	add	r7, sp, #0
   1c94e:	60f8      	str	r0, [r7, #12]
   1c950:	000c      	movs	r4, r1
   1c952:	0010      	movs	r0, r2
   1c954:	0019      	movs	r1, r3
   1c956:	230a      	movs	r3, #10
   1c958:	18fb      	adds	r3, r7, r3
   1c95a:	1c22      	adds	r2, r4, #0
   1c95c:	801a      	strh	r2, [r3, #0]
   1c95e:	2308      	movs	r3, #8
   1c960:	18fb      	adds	r3, r7, r3
   1c962:	1c02      	adds	r2, r0, #0
   1c964:	801a      	strh	r2, [r3, #0]
   1c966:	1dfb      	adds	r3, r7, #7
   1c968:	1c0a      	adds	r2, r1, #0
   1c96a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1c96c:	230a      	movs	r3, #10
   1c96e:	18fb      	adds	r3, r7, r3
   1c970:	881a      	ldrh	r2, [r3, #0]
   1c972:	2308      	movs	r3, #8
   1c974:	18fb      	adds	r3, r7, r3
   1c976:	881b      	ldrh	r3, [r3, #0]
   1c978:	1ad3      	subs	r3, r2, r3
   1c97a:	3307      	adds	r3, #7
   1c97c:	2b00      	cmp	r3, #0
   1c97e:	da00      	bge.n	1c982 <SDMMC_UNSTUFF_BITS+0x3a>
   1c980:	3307      	adds	r3, #7
   1c982:	10db      	asrs	r3, r3, #3
   1c984:	3b01      	subs	r3, #1
   1c986:	68fa      	ldr	r2, [r7, #12]
   1c988:	18d3      	adds	r3, r2, r3
   1c98a:	781b      	ldrb	r3, [r3, #0]
   1c98c:	0019      	movs	r1, r3
   1c98e:	2308      	movs	r3, #8
   1c990:	18fb      	adds	r3, r7, r3
   1c992:	881b      	ldrh	r3, [r3, #0]
   1c994:	2207      	movs	r2, #7
   1c996:	4013      	ands	r3, r2
   1c998:	4119      	asrs	r1, r3
   1c99a:	000b      	movs	r3, r1
   1c99c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1c99e:	2308      	movs	r3, #8
   1c9a0:	18fb      	adds	r3, r7, r3
   1c9a2:	881b      	ldrh	r3, [r3, #0]
   1c9a4:	2207      	movs	r2, #7
   1c9a6:	401a      	ands	r2, r3
   1c9a8:	1dfb      	adds	r3, r7, #7
   1c9aa:	781b      	ldrb	r3, [r3, #0]
   1c9ac:	18d3      	adds	r3, r2, r3
   1c9ae:	2b08      	cmp	r3, #8
   1c9b0:	dd1c      	ble.n	1c9ec <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1c9b2:	230a      	movs	r3, #10
   1c9b4:	18fb      	adds	r3, r7, r3
   1c9b6:	881a      	ldrh	r2, [r3, #0]
   1c9b8:	2308      	movs	r3, #8
   1c9ba:	18fb      	adds	r3, r7, r3
   1c9bc:	881b      	ldrh	r3, [r3, #0]
   1c9be:	1ad3      	subs	r3, r2, r3
   1c9c0:	3307      	adds	r3, #7
   1c9c2:	2b00      	cmp	r3, #0
   1c9c4:	da00      	bge.n	1c9c8 <SDMMC_UNSTUFF_BITS+0x80>
   1c9c6:	3307      	adds	r3, #7
   1c9c8:	10db      	asrs	r3, r3, #3
   1c9ca:	3b02      	subs	r3, #2
   1c9cc:	68fa      	ldr	r2, [r7, #12]
   1c9ce:	18d3      	adds	r3, r2, r3
   1c9d0:	781b      	ldrb	r3, [r3, #0]
   1c9d2:	0019      	movs	r1, r3
   1c9d4:	2308      	movs	r3, #8
   1c9d6:	18fb      	adds	r3, r7, r3
   1c9d8:	881b      	ldrh	r3, [r3, #0]
   1c9da:	2207      	movs	r2, #7
   1c9dc:	4013      	ands	r3, r2
   1c9de:	2208      	movs	r2, #8
   1c9e0:	1ad3      	subs	r3, r2, r3
   1c9e2:	4099      	lsls	r1, r3
   1c9e4:	000b      	movs	r3, r1
   1c9e6:	697a      	ldr	r2, [r7, #20]
   1c9e8:	4313      	orrs	r3, r2
   1c9ea:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1c9ec:	2308      	movs	r3, #8
   1c9ee:	18fb      	adds	r3, r7, r3
   1c9f0:	881b      	ldrh	r3, [r3, #0]
   1c9f2:	2207      	movs	r2, #7
   1c9f4:	401a      	ands	r2, r3
   1c9f6:	1dfb      	adds	r3, r7, #7
   1c9f8:	781b      	ldrb	r3, [r3, #0]
   1c9fa:	18d3      	adds	r3, r2, r3
   1c9fc:	2b10      	cmp	r3, #16
   1c9fe:	dd1c      	ble.n	1ca3a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ca00:	230a      	movs	r3, #10
   1ca02:	18fb      	adds	r3, r7, r3
   1ca04:	881a      	ldrh	r2, [r3, #0]
   1ca06:	2308      	movs	r3, #8
   1ca08:	18fb      	adds	r3, r7, r3
   1ca0a:	881b      	ldrh	r3, [r3, #0]
   1ca0c:	1ad3      	subs	r3, r2, r3
   1ca0e:	3307      	adds	r3, #7
   1ca10:	2b00      	cmp	r3, #0
   1ca12:	da00      	bge.n	1ca16 <SDMMC_UNSTUFF_BITS+0xce>
   1ca14:	3307      	adds	r3, #7
   1ca16:	10db      	asrs	r3, r3, #3
   1ca18:	3b03      	subs	r3, #3
   1ca1a:	68fa      	ldr	r2, [r7, #12]
   1ca1c:	18d3      	adds	r3, r2, r3
   1ca1e:	781b      	ldrb	r3, [r3, #0]
   1ca20:	0019      	movs	r1, r3
   1ca22:	2308      	movs	r3, #8
   1ca24:	18fb      	adds	r3, r7, r3
   1ca26:	881b      	ldrh	r3, [r3, #0]
   1ca28:	2207      	movs	r2, #7
   1ca2a:	4013      	ands	r3, r2
   1ca2c:	2210      	movs	r2, #16
   1ca2e:	1ad3      	subs	r3, r2, r3
   1ca30:	4099      	lsls	r1, r3
   1ca32:	000b      	movs	r3, r1
   1ca34:	697a      	ldr	r2, [r7, #20]
   1ca36:	4313      	orrs	r3, r2
   1ca38:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ca3a:	2308      	movs	r3, #8
   1ca3c:	18fb      	adds	r3, r7, r3
   1ca3e:	881b      	ldrh	r3, [r3, #0]
   1ca40:	2207      	movs	r2, #7
   1ca42:	401a      	ands	r2, r3
   1ca44:	1dfb      	adds	r3, r7, #7
   1ca46:	781b      	ldrb	r3, [r3, #0]
   1ca48:	18d3      	adds	r3, r2, r3
   1ca4a:	2b10      	cmp	r3, #16
   1ca4c:	dd1c      	ble.n	1ca88 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ca4e:	230a      	movs	r3, #10
   1ca50:	18fb      	adds	r3, r7, r3
   1ca52:	881a      	ldrh	r2, [r3, #0]
   1ca54:	2308      	movs	r3, #8
   1ca56:	18fb      	adds	r3, r7, r3
   1ca58:	881b      	ldrh	r3, [r3, #0]
   1ca5a:	1ad3      	subs	r3, r2, r3
   1ca5c:	3307      	adds	r3, #7
   1ca5e:	2b00      	cmp	r3, #0
   1ca60:	da00      	bge.n	1ca64 <SDMMC_UNSTUFF_BITS+0x11c>
   1ca62:	3307      	adds	r3, #7
   1ca64:	10db      	asrs	r3, r3, #3
   1ca66:	3b03      	subs	r3, #3
   1ca68:	68fa      	ldr	r2, [r7, #12]
   1ca6a:	18d3      	adds	r3, r2, r3
   1ca6c:	781b      	ldrb	r3, [r3, #0]
   1ca6e:	0019      	movs	r1, r3
   1ca70:	2308      	movs	r3, #8
   1ca72:	18fb      	adds	r3, r7, r3
   1ca74:	881b      	ldrh	r3, [r3, #0]
   1ca76:	2207      	movs	r2, #7
   1ca78:	4013      	ands	r3, r2
   1ca7a:	2210      	movs	r2, #16
   1ca7c:	1ad3      	subs	r3, r2, r3
   1ca7e:	4099      	lsls	r1, r3
   1ca80:	000b      	movs	r3, r1
   1ca82:	697a      	ldr	r2, [r7, #20]
   1ca84:	4313      	orrs	r3, r2
   1ca86:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1ca88:	1dfb      	adds	r3, r7, #7
   1ca8a:	781b      	ldrb	r3, [r3, #0]
   1ca8c:	2201      	movs	r2, #1
   1ca8e:	409a      	lsls	r2, r3
   1ca90:	0013      	movs	r3, r2
   1ca92:	1e5a      	subs	r2, r3, #1
   1ca94:	697b      	ldr	r3, [r7, #20]
   1ca96:	4013      	ands	r3, r2
   1ca98:	617b      	str	r3, [r7, #20]
	return value;
   1ca9a:	697b      	ldr	r3, [r7, #20]
}
   1ca9c:	0018      	movs	r0, r3
   1ca9e:	46bd      	mov	sp, r7
   1caa0:	b007      	add	sp, #28
   1caa2:	bd90      	pop	{r4, r7, pc}

0001caa4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1caa4:	b580      	push	{r7, lr}
   1caa6:	b082      	sub	sp, #8
   1caa8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1caaa:	4b23      	ldr	r3, [pc, #140]	; (1cb38 <mmc_spi_op_cond+0x94>)
   1caac:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1caae:	4b23      	ldr	r3, [pc, #140]	; (1cb3c <mmc_spi_op_cond+0x98>)
   1cab0:	2100      	movs	r1, #0
   1cab2:	0018      	movs	r0, r3
   1cab4:	4b22      	ldr	r3, [pc, #136]	; (1cb40 <mmc_spi_op_cond+0x9c>)
   1cab6:	4798      	blx	r3
   1cab8:	0003      	movs	r3, r0
   1caba:	001a      	movs	r2, r3
   1cabc:	2301      	movs	r3, #1
   1cabe:	4053      	eors	r3, r2
   1cac0:	b2db      	uxtb	r3, r3
   1cac2:	2b00      	cmp	r3, #0
   1cac4:	d001      	beq.n	1caca <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1cac6:	2300      	movs	r3, #0
   1cac8:	e031      	b.n	1cb2e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1caca:	4b1e      	ldr	r3, [pc, #120]	; (1cb44 <mmc_spi_op_cond+0xa0>)
   1cacc:	4798      	blx	r3
   1cace:	0003      	movs	r3, r0
   1cad0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1cad2:	683b      	ldr	r3, [r7, #0]
   1cad4:	2201      	movs	r2, #1
   1cad6:	4013      	ands	r3, r2
   1cad8:	d006      	beq.n	1cae8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1cada:	687b      	ldr	r3, [r7, #4]
   1cadc:	1e5a      	subs	r2, r3, #1
   1cade:	607a      	str	r2, [r7, #4]
   1cae0:	2b00      	cmp	r3, #0
   1cae2:	d1e4      	bne.n	1caae <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1cae4:	2300      	movs	r3, #0
   1cae6:	e022      	b.n	1cb2e <mmc_spi_op_cond+0x8a>
			break;
   1cae8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1caea:	4b17      	ldr	r3, [pc, #92]	; (1cb48 <mmc_spi_op_cond+0xa4>)
   1caec:	2100      	movs	r1, #0
   1caee:	0018      	movs	r0, r3
   1caf0:	4b13      	ldr	r3, [pc, #76]	; (1cb40 <mmc_spi_op_cond+0x9c>)
   1caf2:	4798      	blx	r3
   1caf4:	0003      	movs	r3, r0
   1caf6:	001a      	movs	r2, r3
   1caf8:	2301      	movs	r3, #1
   1cafa:	4053      	eors	r3, r2
   1cafc:	b2db      	uxtb	r3, r3
   1cafe:	2b00      	cmp	r3, #0
   1cb00:	d001      	beq.n	1cb06 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1cb02:	2300      	movs	r3, #0
   1cb04:	e013      	b.n	1cb2e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1cb06:	4b0f      	ldr	r3, [pc, #60]	; (1cb44 <mmc_spi_op_cond+0xa0>)
   1cb08:	4798      	blx	r3
   1cb0a:	0002      	movs	r2, r0
   1cb0c:	23c0      	movs	r3, #192	; 0xc0
   1cb0e:	05db      	lsls	r3, r3, #23
   1cb10:	401a      	ands	r2, r3
   1cb12:	2380      	movs	r3, #128	; 0x80
   1cb14:	05db      	lsls	r3, r3, #23
   1cb16:	429a      	cmp	r2, r3
   1cb18:	d108      	bne.n	1cb2c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1cb1a:	4b0c      	ldr	r3, [pc, #48]	; (1cb4c <mmc_spi_op_cond+0xa8>)
   1cb1c:	681a      	ldr	r2, [r3, #0]
   1cb1e:	4b0b      	ldr	r3, [pc, #44]	; (1cb4c <mmc_spi_op_cond+0xa8>)
   1cb20:	681b      	ldr	r3, [r3, #0]
   1cb22:	7adb      	ldrb	r3, [r3, #11]
   1cb24:	2108      	movs	r1, #8
   1cb26:	430b      	orrs	r3, r1
   1cb28:	b2db      	uxtb	r3, r3
   1cb2a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1cb2c:	2301      	movs	r3, #1
}
   1cb2e:	0018      	movs	r0, r3
   1cb30:	46bd      	mov	sp, r7
   1cb32:	b002      	add	sp, #8
   1cb34:	bd80      	pop	{r7, pc}
   1cb36:	46c0      	nop			; (mov r8, r8)
   1cb38:	00001bee 	.word	0x00001bee
   1cb3c:	00001101 	.word	0x00001101
   1cb40:	0001e521 	.word	0x0001e521
   1cb44:	0001e761 	.word	0x0001e761
   1cb48:	0000053a 	.word	0x0000053a
   1cb4c:	200040bc 	.word	0x200040bc

0001cb50 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1cb50:	b580      	push	{r7, lr}
   1cb52:	b086      	sub	sp, #24
   1cb54:	af00      	add	r7, sp, #0
   1cb56:	0002      	movs	r2, r0
   1cb58:	1dfb      	adds	r3, r7, #7
   1cb5a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1cb5c:	4b2e      	ldr	r3, [pc, #184]	; (1cc18 <sd_spi_op_cond+0xc8>)
   1cb5e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1cb60:	4b2e      	ldr	r3, [pc, #184]	; (1cc1c <sd_spi_op_cond+0xcc>)
   1cb62:	2100      	movs	r1, #0
   1cb64:	0018      	movs	r0, r3
   1cb66:	4b2e      	ldr	r3, [pc, #184]	; (1cc20 <sd_spi_op_cond+0xd0>)
   1cb68:	4798      	blx	r3
   1cb6a:	0003      	movs	r3, r0
   1cb6c:	001a      	movs	r2, r3
   1cb6e:	2301      	movs	r3, #1
   1cb70:	4053      	eors	r3, r2
   1cb72:	b2db      	uxtb	r3, r3
   1cb74:	2b00      	cmp	r3, #0
   1cb76:	d001      	beq.n	1cb7c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1cb78:	2300      	movs	r3, #0
   1cb7a:	e048      	b.n	1cc0e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1cb7c:	2300      	movs	r3, #0
   1cb7e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1cb80:	1dfb      	adds	r3, r7, #7
   1cb82:	781b      	ldrb	r3, [r3, #0]
   1cb84:	2b00      	cmp	r3, #0
   1cb86:	d004      	beq.n	1cb92 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1cb88:	697b      	ldr	r3, [r7, #20]
   1cb8a:	2280      	movs	r2, #128	; 0x80
   1cb8c:	05d2      	lsls	r2, r2, #23
   1cb8e:	4313      	orrs	r3, r2
   1cb90:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1cb92:	697b      	ldr	r3, [r7, #20]
   1cb94:	4a23      	ldr	r2, [pc, #140]	; (1cc24 <sd_spi_op_cond+0xd4>)
   1cb96:	0019      	movs	r1, r3
   1cb98:	0010      	movs	r0, r2
   1cb9a:	4b21      	ldr	r3, [pc, #132]	; (1cc20 <sd_spi_op_cond+0xd0>)
   1cb9c:	4798      	blx	r3
   1cb9e:	0003      	movs	r3, r0
   1cba0:	001a      	movs	r2, r3
   1cba2:	2301      	movs	r3, #1
   1cba4:	4053      	eors	r3, r2
   1cba6:	b2db      	uxtb	r3, r3
   1cba8:	2b00      	cmp	r3, #0
   1cbaa:	d001      	beq.n	1cbb0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1cbac:	2300      	movs	r3, #0
   1cbae:	e02e      	b.n	1cc0e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1cbb0:	4b1d      	ldr	r3, [pc, #116]	; (1cc28 <sd_spi_op_cond+0xd8>)
   1cbb2:	4798      	blx	r3
   1cbb4:	0003      	movs	r3, r0
   1cbb6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1cbb8:	68fb      	ldr	r3, [r7, #12]
   1cbba:	2201      	movs	r2, #1
   1cbbc:	4013      	ands	r3, r2
   1cbbe:	d006      	beq.n	1cbce <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1cbc0:	693b      	ldr	r3, [r7, #16]
   1cbc2:	1e5a      	subs	r2, r3, #1
   1cbc4:	613a      	str	r2, [r7, #16]
   1cbc6:	2b00      	cmp	r3, #0
   1cbc8:	d1ca      	bne.n	1cb60 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1cbca:	2300      	movs	r3, #0
   1cbcc:	e01f      	b.n	1cc0e <sd_spi_op_cond+0xbe>
			break;
   1cbce:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1cbd0:	4b16      	ldr	r3, [pc, #88]	; (1cc2c <sd_spi_op_cond+0xdc>)
   1cbd2:	2100      	movs	r1, #0
   1cbd4:	0018      	movs	r0, r3
   1cbd6:	4b12      	ldr	r3, [pc, #72]	; (1cc20 <sd_spi_op_cond+0xd0>)
   1cbd8:	4798      	blx	r3
   1cbda:	0003      	movs	r3, r0
   1cbdc:	001a      	movs	r2, r3
   1cbde:	2301      	movs	r3, #1
   1cbe0:	4053      	eors	r3, r2
   1cbe2:	b2db      	uxtb	r3, r3
   1cbe4:	2b00      	cmp	r3, #0
   1cbe6:	d001      	beq.n	1cbec <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1cbe8:	2300      	movs	r3, #0
   1cbea:	e010      	b.n	1cc0e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1cbec:	4b0e      	ldr	r3, [pc, #56]	; (1cc28 <sd_spi_op_cond+0xd8>)
   1cbee:	4798      	blx	r3
   1cbf0:	0002      	movs	r2, r0
   1cbf2:	2380      	movs	r3, #128	; 0x80
   1cbf4:	05db      	lsls	r3, r3, #23
   1cbf6:	4013      	ands	r3, r2
   1cbf8:	d008      	beq.n	1cc0c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1cbfa:	4b0d      	ldr	r3, [pc, #52]	; (1cc30 <sd_spi_op_cond+0xe0>)
   1cbfc:	681a      	ldr	r2, [r3, #0]
   1cbfe:	4b0c      	ldr	r3, [pc, #48]	; (1cc30 <sd_spi_op_cond+0xe0>)
   1cc00:	681b      	ldr	r3, [r3, #0]
   1cc02:	7adb      	ldrb	r3, [r3, #11]
   1cc04:	2108      	movs	r1, #8
   1cc06:	430b      	orrs	r3, r1
   1cc08:	b2db      	uxtb	r3, r3
   1cc0a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1cc0c:	2301      	movs	r3, #1
}
   1cc0e:	0018      	movs	r0, r3
   1cc10:	46bd      	mov	sp, r7
   1cc12:	b006      	add	sp, #24
   1cc14:	bd80      	pop	{r7, pc}
   1cc16:	46c0      	nop			; (mov r8, r8)
   1cc18:	00001bee 	.word	0x00001bee
   1cc1c:	00001137 	.word	0x00001137
   1cc20:	0001e521 	.word	0x0001e521
   1cc24:	00001129 	.word	0x00001129
   1cc28:	0001e761 	.word	0x0001e761
   1cc2c:	0000053a 	.word	0x0000053a
   1cc30:	200040bc 	.word	0x200040bc

0001cc34 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1cc34:	b580      	push	{r7, lr}
   1cc36:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1cc38:	2301      	movs	r3, #1
}
   1cc3a:	0018      	movs	r0, r3
   1cc3c:	46bd      	mov	sp, r7
   1cc3e:	bd80      	pop	{r7, pc}

0001cc40 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1cc40:	b580      	push	{r7, lr}
   1cc42:	b084      	sub	sp, #16
   1cc44:	af00      	add	r7, sp, #0
   1cc46:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1cc48:	687b      	ldr	r3, [r7, #4]
   1cc4a:	2200      	movs	r2, #0
   1cc4c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1cc4e:	23d5      	movs	r3, #213	; 0xd5
   1cc50:	005b      	lsls	r3, r3, #1
   1cc52:	4a14      	ldr	r2, [pc, #80]	; (1cca4 <sd_cmd8+0x64>)
   1cc54:	0019      	movs	r1, r3
   1cc56:	0010      	movs	r0, r2
   1cc58:	4b13      	ldr	r3, [pc, #76]	; (1cca8 <sd_cmd8+0x68>)
   1cc5a:	4798      	blx	r3
   1cc5c:	0003      	movs	r3, r0
   1cc5e:	001a      	movs	r2, r3
   1cc60:	2301      	movs	r3, #1
   1cc62:	4053      	eors	r3, r2
   1cc64:	b2db      	uxtb	r3, r3
   1cc66:	2b00      	cmp	r3, #0
   1cc68:	d001      	beq.n	1cc6e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1cc6a:	2301      	movs	r3, #1
   1cc6c:	e015      	b.n	1cc9a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1cc6e:	4b0f      	ldr	r3, [pc, #60]	; (1ccac <sd_cmd8+0x6c>)
   1cc70:	4798      	blx	r3
   1cc72:	0003      	movs	r3, r0
   1cc74:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1cc76:	68fb      	ldr	r3, [r7, #12]
   1cc78:	3301      	adds	r3, #1
   1cc7a:	d101      	bne.n	1cc80 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1cc7c:	2301      	movs	r3, #1
   1cc7e:	e00c      	b.n	1cc9a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1cc80:	68fb      	ldr	r3, [r7, #12]
   1cc82:	051b      	lsls	r3, r3, #20
   1cc84:	0d1a      	lsrs	r2, r3, #20
   1cc86:	23d5      	movs	r3, #213	; 0xd5
   1cc88:	005b      	lsls	r3, r3, #1
   1cc8a:	429a      	cmp	r2, r3
   1cc8c:	d001      	beq.n	1cc92 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1cc8e:	2300      	movs	r3, #0
   1cc90:	e003      	b.n	1cc9a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1cc92:	687b      	ldr	r3, [r7, #4]
   1cc94:	2201      	movs	r2, #1
   1cc96:	701a      	strb	r2, [r3, #0]
	return true;
   1cc98:	2301      	movs	r3, #1
}
   1cc9a:	0018      	movs	r0, r3
   1cc9c:	46bd      	mov	sp, r7
   1cc9e:	b004      	add	sp, #16
   1cca0:	bd80      	pop	{r7, pc}
   1cca2:	46c0      	nop			; (mov r8, r8)
   1cca4:	00005508 	.word	0x00005508
   1cca8:	0001e521 	.word	0x0001e521
   1ccac:	0001e761 	.word	0x0001e761

0001ccb0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1ccb0:	b590      	push	{r4, r7, lr}
   1ccb2:	b089      	sub	sp, #36	; 0x24
   1ccb4:	af02      	add	r7, sp, #8
   1ccb6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1ccb8:	2380      	movs	r3, #128	; 0x80
   1ccba:	009a      	lsls	r2, r3, #2
   1ccbc:	4841      	ldr	r0, [pc, #260]	; (1cdc4 <mmc_cmd8+0x114>)
   1ccbe:	2300      	movs	r3, #0
   1ccc0:	9300      	str	r3, [sp, #0]
   1ccc2:	2301      	movs	r3, #1
   1ccc4:	2100      	movs	r1, #0
   1ccc6:	4c40      	ldr	r4, [pc, #256]	; (1cdc8 <mmc_cmd8+0x118>)
   1ccc8:	47a0      	blx	r4
   1ccca:	0003      	movs	r3, r0
   1cccc:	001a      	movs	r2, r3
   1ccce:	2301      	movs	r3, #1
   1ccd0:	4053      	eors	r3, r2
   1ccd2:	b2db      	uxtb	r3, r3
   1ccd4:	2b00      	cmp	r3, #0
   1ccd6:	d001      	beq.n	1ccdc <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1ccd8:	2300      	movs	r3, #0
   1ccda:	e06e      	b.n	1cdba <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1ccdc:	2316      	movs	r3, #22
   1ccde:	18fb      	adds	r3, r7, r3
   1cce0:	2200      	movs	r2, #0
   1cce2:	801a      	strh	r2, [r3, #0]
   1cce4:	e014      	b.n	1cd10 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1cce6:	2310      	movs	r3, #16
   1cce8:	18fb      	adds	r3, r7, r3
   1ccea:	0018      	movs	r0, r3
   1ccec:	4b37      	ldr	r3, [pc, #220]	; (1cdcc <mmc_cmd8+0x11c>)
   1ccee:	4798      	blx	r3
   1ccf0:	0003      	movs	r3, r0
   1ccf2:	001a      	movs	r2, r3
   1ccf4:	2301      	movs	r3, #1
   1ccf6:	4053      	eors	r3, r2
   1ccf8:	b2db      	uxtb	r3, r3
   1ccfa:	2b00      	cmp	r3, #0
   1ccfc:	d001      	beq.n	1cd02 <mmc_cmd8+0x52>
			return false;
   1ccfe:	2300      	movs	r3, #0
   1cd00:	e05b      	b.n	1cdba <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1cd02:	2316      	movs	r3, #22
   1cd04:	18fb      	adds	r3, r7, r3
   1cd06:	881a      	ldrh	r2, [r3, #0]
   1cd08:	2316      	movs	r3, #22
   1cd0a:	18fb      	adds	r3, r7, r3
   1cd0c:	3201      	adds	r2, #1
   1cd0e:	801a      	strh	r2, [r3, #0]
   1cd10:	2316      	movs	r3, #22
   1cd12:	18fb      	adds	r3, r7, r3
   1cd14:	881b      	ldrh	r3, [r3, #0]
   1cd16:	2b31      	cmp	r3, #49	; 0x31
   1cd18:	d9e5      	bls.n	1cce6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1cd1a:	693b      	ldr	r3, [r7, #16]
   1cd1c:	b2db      	uxtb	r3, r3
   1cd1e:	2202      	movs	r2, #2
   1cd20:	4013      	ands	r3, r2
   1cd22:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1cd24:	687b      	ldr	r3, [r7, #4]
   1cd26:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1cd28:	4b29      	ldr	r3, [pc, #164]	; (1cdd0 <mmc_cmd8+0x120>)
   1cd2a:	681b      	ldr	r3, [r3, #0]
   1cd2c:	330e      	adds	r3, #14
   1cd2e:	0018      	movs	r0, r3
   1cd30:	230c      	movs	r3, #12
   1cd32:	223e      	movs	r2, #62	; 0x3e
   1cd34:	2180      	movs	r1, #128	; 0x80
   1cd36:	4c27      	ldr	r4, [pc, #156]	; (1cdd4 <mmc_cmd8+0x124>)
   1cd38:	47a0      	blx	r4
   1cd3a:	0002      	movs	r2, r0
   1cd3c:	4b26      	ldr	r3, [pc, #152]	; (1cdd8 <mmc_cmd8+0x128>)
   1cd3e:	429a      	cmp	r2, r3
   1cd40:	d135      	bne.n	1cdae <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1cd42:	e014      	b.n	1cd6e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1cd44:	230c      	movs	r3, #12
   1cd46:	18fb      	adds	r3, r7, r3
   1cd48:	0018      	movs	r0, r3
   1cd4a:	4b20      	ldr	r3, [pc, #128]	; (1cdcc <mmc_cmd8+0x11c>)
   1cd4c:	4798      	blx	r3
   1cd4e:	0003      	movs	r3, r0
   1cd50:	001a      	movs	r2, r3
   1cd52:	2301      	movs	r3, #1
   1cd54:	4053      	eors	r3, r2
   1cd56:	b2db      	uxtb	r3, r3
   1cd58:	2b00      	cmp	r3, #0
   1cd5a:	d001      	beq.n	1cd60 <mmc_cmd8+0xb0>
				return false;
   1cd5c:	2300      	movs	r3, #0
   1cd5e:	e02c      	b.n	1cdba <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1cd60:	2316      	movs	r3, #22
   1cd62:	18fb      	adds	r3, r7, r3
   1cd64:	881a      	ldrh	r2, [r3, #0]
   1cd66:	2316      	movs	r3, #22
   1cd68:	18fb      	adds	r3, r7, r3
   1cd6a:	3201      	adds	r2, #1
   1cd6c:	801a      	strh	r2, [r3, #0]
   1cd6e:	2316      	movs	r3, #22
   1cd70:	18fb      	adds	r3, r7, r3
   1cd72:	881b      	ldrh	r3, [r3, #0]
   1cd74:	2b35      	cmp	r3, #53	; 0x35
   1cd76:	d9e5      	bls.n	1cd44 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1cd78:	4b15      	ldr	r3, [pc, #84]	; (1cdd0 <mmc_cmd8+0x120>)
   1cd7a:	681b      	ldr	r3, [r3, #0]
   1cd7c:	68fa      	ldr	r2, [r7, #12]
   1cd7e:	0852      	lsrs	r2, r2, #1
   1cd80:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1cd82:	e014      	b.n	1cdae <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1cd84:	230c      	movs	r3, #12
   1cd86:	18fb      	adds	r3, r7, r3
   1cd88:	0018      	movs	r0, r3
   1cd8a:	4b10      	ldr	r3, [pc, #64]	; (1cdcc <mmc_cmd8+0x11c>)
   1cd8c:	4798      	blx	r3
   1cd8e:	0003      	movs	r3, r0
   1cd90:	001a      	movs	r2, r3
   1cd92:	2301      	movs	r3, #1
   1cd94:	4053      	eors	r3, r2
   1cd96:	b2db      	uxtb	r3, r3
   1cd98:	2b00      	cmp	r3, #0
   1cd9a:	d001      	beq.n	1cda0 <mmc_cmd8+0xf0>
			return false;
   1cd9c:	2300      	movs	r3, #0
   1cd9e:	e00c      	b.n	1cdba <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1cda0:	2316      	movs	r3, #22
   1cda2:	18fb      	adds	r3, r7, r3
   1cda4:	881a      	ldrh	r2, [r3, #0]
   1cda6:	2316      	movs	r3, #22
   1cda8:	18fb      	adds	r3, r7, r3
   1cdaa:	3201      	adds	r2, #1
   1cdac:	801a      	strh	r2, [r3, #0]
   1cdae:	2316      	movs	r3, #22
   1cdb0:	18fb      	adds	r3, r7, r3
   1cdb2:	881b      	ldrh	r3, [r3, #0]
   1cdb4:	2b7f      	cmp	r3, #127	; 0x7f
   1cdb6:	d9e5      	bls.n	1cd84 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1cdb8:	2301      	movs	r3, #1
}
   1cdba:	0018      	movs	r0, r3
   1cdbc:	46bd      	mov	sp, r7
   1cdbe:	b007      	add	sp, #28
   1cdc0:	bd90      	pop	{r4, r7, pc}
   1cdc2:	46c0      	nop			; (mov r8, r8)
   1cdc4:	00081108 	.word	0x00081108
   1cdc8:	0001e549 	.word	0x0001e549
   1cdcc:	0001e775 	.word	0x0001e775
   1cdd0:	200040bc 	.word	0x200040bc
   1cdd4:	0001c949 	.word	0x0001c949
   1cdd8:	00000fff 	.word	0x00000fff

0001cddc <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1cddc:	b590      	push	{r4, r7, lr}
   1cdde:	b083      	sub	sp, #12
   1cde0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1cde2:	4b15      	ldr	r3, [pc, #84]	; (1ce38 <sd_mmc_cmd9_spi+0x5c>)
   1cde4:	681b      	ldr	r3, [r3, #0]
   1cde6:	891b      	ldrh	r3, [r3, #8]
   1cde8:	0419      	lsls	r1, r3, #16
   1cdea:	4814      	ldr	r0, [pc, #80]	; (1ce3c <sd_mmc_cmd9_spi+0x60>)
   1cdec:	2301      	movs	r3, #1
   1cdee:	9300      	str	r3, [sp, #0]
   1cdf0:	2301      	movs	r3, #1
   1cdf2:	2210      	movs	r2, #16
   1cdf4:	4c12      	ldr	r4, [pc, #72]	; (1ce40 <sd_mmc_cmd9_spi+0x64>)
   1cdf6:	47a0      	blx	r4
   1cdf8:	0003      	movs	r3, r0
   1cdfa:	001a      	movs	r2, r3
   1cdfc:	2301      	movs	r3, #1
   1cdfe:	4053      	eors	r3, r2
   1ce00:	b2db      	uxtb	r3, r3
   1ce02:	2b00      	cmp	r3, #0
   1ce04:	d001      	beq.n	1ce0a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1ce06:	2300      	movs	r3, #0
   1ce08:	e012      	b.n	1ce30 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1ce0a:	4b0b      	ldr	r3, [pc, #44]	; (1ce38 <sd_mmc_cmd9_spi+0x5c>)
   1ce0c:	681b      	ldr	r3, [r3, #0]
   1ce0e:	330e      	adds	r3, #14
   1ce10:	2101      	movs	r1, #1
   1ce12:	0018      	movs	r0, r3
   1ce14:	4b0b      	ldr	r3, [pc, #44]	; (1ce44 <sd_mmc_cmd9_spi+0x68>)
   1ce16:	4798      	blx	r3
   1ce18:	0003      	movs	r3, r0
   1ce1a:	001a      	movs	r2, r3
   1ce1c:	2301      	movs	r3, #1
   1ce1e:	4053      	eors	r3, r2
   1ce20:	b2db      	uxtb	r3, r3
   1ce22:	2b00      	cmp	r3, #0
   1ce24:	d001      	beq.n	1ce2a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1ce26:	2300      	movs	r3, #0
   1ce28:	e002      	b.n	1ce30 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1ce2a:	4b07      	ldr	r3, [pc, #28]	; (1ce48 <sd_mmc_cmd9_spi+0x6c>)
   1ce2c:	4798      	blx	r3
   1ce2e:	0003      	movs	r3, r0
}
   1ce30:	0018      	movs	r0, r3
   1ce32:	46bd      	mov	sp, r7
   1ce34:	b001      	add	sp, #4
   1ce36:	bd90      	pop	{r4, r7, pc}
   1ce38:	200040bc 	.word	0x200040bc
   1ce3c:	00081109 	.word	0x00081109
   1ce40:	0001e549 	.word	0x0001e549
   1ce44:	0001e819 	.word	0x0001e819
   1ce48:	0001e8bd 	.word	0x0001e8bd

0001ce4c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1ce4c:	b5b0      	push	{r4, r5, r7, lr}
   1ce4e:	b084      	sub	sp, #16
   1ce50:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1ce52:	4b45      	ldr	r3, [pc, #276]	; (1cf68 <mmc_decode_csd+0x11c>)
   1ce54:	681b      	ldr	r3, [r3, #0]
   1ce56:	330e      	adds	r3, #14
   1ce58:	0018      	movs	r0, r3
   1ce5a:	2304      	movs	r3, #4
   1ce5c:	227a      	movs	r2, #122	; 0x7a
   1ce5e:	2180      	movs	r1, #128	; 0x80
   1ce60:	4c42      	ldr	r4, [pc, #264]	; (1cf6c <mmc_decode_csd+0x120>)
   1ce62:	47a0      	blx	r4
   1ce64:	0003      	movs	r3, r0
   1ce66:	2b02      	cmp	r3, #2
   1ce68:	d011      	beq.n	1ce8e <mmc_decode_csd+0x42>
   1ce6a:	d802      	bhi.n	1ce72 <mmc_decode_csd+0x26>
   1ce6c:	2b01      	cmp	r3, #1
   1ce6e:	d009      	beq.n	1ce84 <mmc_decode_csd+0x38>
   1ce70:	e003      	b.n	1ce7a <mmc_decode_csd+0x2e>
   1ce72:	2b03      	cmp	r3, #3
   1ce74:	d010      	beq.n	1ce98 <mmc_decode_csd+0x4c>
   1ce76:	2b04      	cmp	r3, #4
   1ce78:	d013      	beq.n	1cea2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1ce7a:	4b3b      	ldr	r3, [pc, #236]	; (1cf68 <mmc_decode_csd+0x11c>)
   1ce7c:	681b      	ldr	r3, [r3, #0]
   1ce7e:	2212      	movs	r2, #18
   1ce80:	731a      	strb	r2, [r3, #12]
		break;
   1ce82:	e013      	b.n	1ceac <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1ce84:	4b38      	ldr	r3, [pc, #224]	; (1cf68 <mmc_decode_csd+0x11c>)
   1ce86:	681b      	ldr	r3, [r3, #0]
   1ce88:	2214      	movs	r2, #20
   1ce8a:	731a      	strb	r2, [r3, #12]
		break;
   1ce8c:	e00e      	b.n	1ceac <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1ce8e:	4b36      	ldr	r3, [pc, #216]	; (1cf68 <mmc_decode_csd+0x11c>)
   1ce90:	681b      	ldr	r3, [r3, #0]
   1ce92:	2222      	movs	r2, #34	; 0x22
   1ce94:	731a      	strb	r2, [r3, #12]
		break;
   1ce96:	e009      	b.n	1ceac <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1ce98:	4b33      	ldr	r3, [pc, #204]	; (1cf68 <mmc_decode_csd+0x11c>)
   1ce9a:	681b      	ldr	r3, [r3, #0]
   1ce9c:	2230      	movs	r2, #48	; 0x30
   1ce9e:	731a      	strb	r2, [r3, #12]
		break;
   1cea0:	e004      	b.n	1ceac <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1cea2:	4b31      	ldr	r3, [pc, #196]	; (1cf68 <mmc_decode_csd+0x11c>)
   1cea4:	681b      	ldr	r3, [r3, #0]
   1cea6:	2240      	movs	r2, #64	; 0x40
   1cea8:	731a      	strb	r2, [r3, #12]
		break;
   1ceaa:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1ceac:	4b2e      	ldr	r3, [pc, #184]	; (1cf68 <mmc_decode_csd+0x11c>)
   1ceae:	681b      	ldr	r3, [r3, #0]
   1ceb0:	330e      	adds	r3, #14
   1ceb2:	0018      	movs	r0, r3
   1ceb4:	2308      	movs	r3, #8
   1ceb6:	2260      	movs	r2, #96	; 0x60
   1ceb8:	2180      	movs	r1, #128	; 0x80
   1ceba:	4c2c      	ldr	r4, [pc, #176]	; (1cf6c <mmc_decode_csd+0x120>)
   1cebc:	47a0      	blx	r4
   1cebe:	0003      	movs	r3, r0
   1cec0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1cec2:	68fb      	ldr	r3, [r7, #12]
   1cec4:	2207      	movs	r2, #7
   1cec6:	401a      	ands	r2, r3
   1cec8:	4b29      	ldr	r3, [pc, #164]	; (1cf70 <mmc_decode_csd+0x124>)
   1ceca:	0092      	lsls	r2, r2, #2
   1cecc:	58d3      	ldr	r3, [r2, r3]
   1cece:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1ced0:	68fb      	ldr	r3, [r7, #12]
   1ced2:	08db      	lsrs	r3, r3, #3
   1ced4:	220f      	movs	r2, #15
   1ced6:	401a      	ands	r2, r3
   1ced8:	4b26      	ldr	r3, [pc, #152]	; (1cf74 <mmc_decode_csd+0x128>)
   1ceda:	0092      	lsls	r2, r2, #2
   1cedc:	58d3      	ldr	r3, [r2, r3]
   1cede:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1cee0:	4b21      	ldr	r3, [pc, #132]	; (1cf68 <mmc_decode_csd+0x11c>)
   1cee2:	681b      	ldr	r3, [r3, #0]
   1cee4:	68ba      	ldr	r2, [r7, #8]
   1cee6:	6879      	ldr	r1, [r7, #4]
   1cee8:	434a      	muls	r2, r1
   1ceea:	21fa      	movs	r1, #250	; 0xfa
   1ceec:	0089      	lsls	r1, r1, #2
   1ceee:	434a      	muls	r2, r1
   1cef0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1cef2:	4b1d      	ldr	r3, [pc, #116]	; (1cf68 <mmc_decode_csd+0x11c>)
   1cef4:	681b      	ldr	r3, [r3, #0]
   1cef6:	330e      	adds	r3, #14
   1cef8:	0018      	movs	r0, r3
   1cefa:	230c      	movs	r3, #12
   1cefc:	223e      	movs	r2, #62	; 0x3e
   1cefe:	2180      	movs	r1, #128	; 0x80
   1cf00:	4c1a      	ldr	r4, [pc, #104]	; (1cf6c <mmc_decode_csd+0x120>)
   1cf02:	47a0      	blx	r4
   1cf04:	0002      	movs	r2, r0
   1cf06:	4b1c      	ldr	r3, [pc, #112]	; (1cf78 <mmc_decode_csd+0x12c>)
   1cf08:	429a      	cmp	r2, r3
   1cf0a:	d028      	beq.n	1cf5e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1cf0c:	4b16      	ldr	r3, [pc, #88]	; (1cf68 <mmc_decode_csd+0x11c>)
   1cf0e:	681b      	ldr	r3, [r3, #0]
   1cf10:	330e      	adds	r3, #14
   1cf12:	0018      	movs	r0, r3
   1cf14:	230c      	movs	r3, #12
   1cf16:	223e      	movs	r2, #62	; 0x3e
   1cf18:	2180      	movs	r1, #128	; 0x80
   1cf1a:	4c14      	ldr	r4, [pc, #80]	; (1cf6c <mmc_decode_csd+0x120>)
   1cf1c:	47a0      	blx	r4
   1cf1e:	0003      	movs	r3, r0
   1cf20:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1cf22:	4b11      	ldr	r3, [pc, #68]	; (1cf68 <mmc_decode_csd+0x11c>)
   1cf24:	681b      	ldr	r3, [r3, #0]
   1cf26:	330e      	adds	r3, #14
   1cf28:	0018      	movs	r0, r3
   1cf2a:	2303      	movs	r3, #3
   1cf2c:	222f      	movs	r2, #47	; 0x2f
   1cf2e:	2180      	movs	r1, #128	; 0x80
   1cf30:	4d0e      	ldr	r5, [pc, #56]	; (1cf6c <mmc_decode_csd+0x120>)
   1cf32:	47a8      	blx	r5
   1cf34:	0003      	movs	r3, r0
   1cf36:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1cf38:	409c      	lsls	r4, r3
   1cf3a:	0023      	movs	r3, r4
   1cf3c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1cf3e:	4b0a      	ldr	r3, [pc, #40]	; (1cf68 <mmc_decode_csd+0x11c>)
   1cf40:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1cf42:	4b09      	ldr	r3, [pc, #36]	; (1cf68 <mmc_decode_csd+0x11c>)
   1cf44:	681b      	ldr	r3, [r3, #0]
   1cf46:	330e      	adds	r3, #14
   1cf48:	0018      	movs	r0, r3
   1cf4a:	2304      	movs	r3, #4
   1cf4c:	2250      	movs	r2, #80	; 0x50
   1cf4e:	2180      	movs	r1, #128	; 0x80
   1cf50:	4d06      	ldr	r5, [pc, #24]	; (1cf6c <mmc_decode_csd+0x120>)
   1cf52:	47a8      	blx	r5
   1cf54:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1cf56:	683b      	ldr	r3, [r7, #0]
   1cf58:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1cf5a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1cf5c:	6063      	str	r3, [r4, #4]
	}
}
   1cf5e:	46c0      	nop			; (mov r8, r8)
   1cf60:	46bd      	mov	sp, r7
   1cf62:	b004      	add	sp, #16
   1cf64:	bdb0      	pop	{r4, r5, r7, pc}
   1cf66:	46c0      	nop			; (mov r8, r8)
   1cf68:	200040bc 	.word	0x200040bc
   1cf6c:	0001c949 	.word	0x0001c949
   1cf70:	00036770 	.word	0x00036770
   1cf74:	000367cc 	.word	0x000367cc
   1cf78:	00000fff 	.word	0x00000fff

0001cf7c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1cf7c:	b5b0      	push	{r4, r5, r7, lr}
   1cf7e:	b084      	sub	sp, #16
   1cf80:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1cf82:	4b35      	ldr	r3, [pc, #212]	; (1d058 <sd_decode_csd+0xdc>)
   1cf84:	681b      	ldr	r3, [r3, #0]
   1cf86:	330e      	adds	r3, #14
   1cf88:	0018      	movs	r0, r3
   1cf8a:	2308      	movs	r3, #8
   1cf8c:	2260      	movs	r2, #96	; 0x60
   1cf8e:	2180      	movs	r1, #128	; 0x80
   1cf90:	4c32      	ldr	r4, [pc, #200]	; (1d05c <sd_decode_csd+0xe0>)
   1cf92:	47a0      	blx	r4
   1cf94:	0003      	movs	r3, r0
   1cf96:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1cf98:	68fb      	ldr	r3, [r7, #12]
   1cf9a:	2207      	movs	r2, #7
   1cf9c:	401a      	ands	r2, r3
   1cf9e:	4b30      	ldr	r3, [pc, #192]	; (1d060 <sd_decode_csd+0xe4>)
   1cfa0:	0092      	lsls	r2, r2, #2
   1cfa2:	58d3      	ldr	r3, [r2, r3]
   1cfa4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1cfa6:	68fb      	ldr	r3, [r7, #12]
   1cfa8:	08db      	lsrs	r3, r3, #3
   1cfaa:	220f      	movs	r2, #15
   1cfac:	401a      	ands	r2, r3
   1cfae:	4b2d      	ldr	r3, [pc, #180]	; (1d064 <sd_decode_csd+0xe8>)
   1cfb0:	0092      	lsls	r2, r2, #2
   1cfb2:	58d3      	ldr	r3, [r2, r3]
   1cfb4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1cfb6:	4b28      	ldr	r3, [pc, #160]	; (1d058 <sd_decode_csd+0xdc>)
   1cfb8:	681b      	ldr	r3, [r3, #0]
   1cfba:	68ba      	ldr	r2, [r7, #8]
   1cfbc:	6879      	ldr	r1, [r7, #4]
   1cfbe:	434a      	muls	r2, r1
   1cfc0:	21fa      	movs	r1, #250	; 0xfa
   1cfc2:	0089      	lsls	r1, r1, #2
   1cfc4:	434a      	muls	r2, r1
   1cfc6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1cfc8:	4b23      	ldr	r3, [pc, #140]	; (1d058 <sd_decode_csd+0xdc>)
   1cfca:	681b      	ldr	r3, [r3, #0]
   1cfcc:	330e      	adds	r3, #14
   1cfce:	0018      	movs	r0, r3
   1cfd0:	2302      	movs	r3, #2
   1cfd2:	227e      	movs	r2, #126	; 0x7e
   1cfd4:	2180      	movs	r1, #128	; 0x80
   1cfd6:	4c21      	ldr	r4, [pc, #132]	; (1d05c <sd_decode_csd+0xe0>)
   1cfd8:	47a0      	blx	r4
   1cfda:	1e03      	subs	r3, r0, #0
   1cfdc:	d00f      	beq.n	1cffe <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1cfde:	4b1e      	ldr	r3, [pc, #120]	; (1d058 <sd_decode_csd+0xdc>)
   1cfe0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1cfe2:	4b1d      	ldr	r3, [pc, #116]	; (1d058 <sd_decode_csd+0xdc>)
   1cfe4:	681b      	ldr	r3, [r3, #0]
   1cfe6:	330e      	adds	r3, #14
   1cfe8:	0018      	movs	r0, r3
   1cfea:	2316      	movs	r3, #22
   1cfec:	2230      	movs	r2, #48	; 0x30
   1cfee:	2180      	movs	r1, #128	; 0x80
   1cff0:	4d1a      	ldr	r5, [pc, #104]	; (1d05c <sd_decode_csd+0xe0>)
   1cff2:	47a8      	blx	r5
   1cff4:	0003      	movs	r3, r0
				* 512;
   1cff6:	3301      	adds	r3, #1
   1cff8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1cffa:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1cffc:	e028      	b.n	1d050 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1cffe:	4b16      	ldr	r3, [pc, #88]	; (1d058 <sd_decode_csd+0xdc>)
   1d000:	681b      	ldr	r3, [r3, #0]
   1d002:	330e      	adds	r3, #14
   1d004:	0018      	movs	r0, r3
   1d006:	230c      	movs	r3, #12
   1d008:	223e      	movs	r2, #62	; 0x3e
   1d00a:	2180      	movs	r1, #128	; 0x80
   1d00c:	4c13      	ldr	r4, [pc, #76]	; (1d05c <sd_decode_csd+0xe0>)
   1d00e:	47a0      	blx	r4
   1d010:	0003      	movs	r3, r0
   1d012:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1d014:	4b10      	ldr	r3, [pc, #64]	; (1d058 <sd_decode_csd+0xdc>)
   1d016:	681b      	ldr	r3, [r3, #0]
   1d018:	330e      	adds	r3, #14
   1d01a:	0018      	movs	r0, r3
   1d01c:	2303      	movs	r3, #3
   1d01e:	222f      	movs	r2, #47	; 0x2f
   1d020:	2180      	movs	r1, #128	; 0x80
   1d022:	4d0e      	ldr	r5, [pc, #56]	; (1d05c <sd_decode_csd+0xe0>)
   1d024:	47a8      	blx	r5
   1d026:	0003      	movs	r3, r0
   1d028:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1d02a:	409c      	lsls	r4, r3
   1d02c:	0023      	movs	r3, r4
   1d02e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1d030:	4b09      	ldr	r3, [pc, #36]	; (1d058 <sd_decode_csd+0xdc>)
   1d032:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1d034:	4b08      	ldr	r3, [pc, #32]	; (1d058 <sd_decode_csd+0xdc>)
   1d036:	681b      	ldr	r3, [r3, #0]
   1d038:	330e      	adds	r3, #14
   1d03a:	0018      	movs	r0, r3
   1d03c:	2304      	movs	r3, #4
   1d03e:	2250      	movs	r2, #80	; 0x50
   1d040:	2180      	movs	r1, #128	; 0x80
   1d042:	4d06      	ldr	r5, [pc, #24]	; (1d05c <sd_decode_csd+0xe0>)
   1d044:	47a8      	blx	r5
   1d046:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1d048:	683b      	ldr	r3, [r7, #0]
   1d04a:	4093      	lsls	r3, r2
				/ 1024;
   1d04c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1d04e:	6063      	str	r3, [r4, #4]
}
   1d050:	46c0      	nop			; (mov r8, r8)
   1d052:	46bd      	mov	sp, r7
   1d054:	b004      	add	sp, #16
   1d056:	bdb0      	pop	{r4, r5, r7, pc}
   1d058:	200040bc 	.word	0x200040bc
   1d05c:	0001c949 	.word	0x0001c949
   1d060:	00036770 	.word	0x00036770
   1d064:	0003678c 	.word	0x0003678c

0001d068 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1d068:	b580      	push	{r7, lr}
   1d06a:	b082      	sub	sp, #8
   1d06c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1d06e:	4b11      	ldr	r3, [pc, #68]	; (1d0b4 <sd_mmc_cmd13+0x4c>)
   1d070:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1d072:	4b11      	ldr	r3, [pc, #68]	; (1d0b8 <sd_mmc_cmd13+0x50>)
   1d074:	2100      	movs	r1, #0
   1d076:	0018      	movs	r0, r3
   1d078:	4b10      	ldr	r3, [pc, #64]	; (1d0bc <sd_mmc_cmd13+0x54>)
   1d07a:	4798      	blx	r3
   1d07c:	0003      	movs	r3, r0
   1d07e:	001a      	movs	r2, r3
   1d080:	2301      	movs	r3, #1
   1d082:	4053      	eors	r3, r2
   1d084:	b2db      	uxtb	r3, r3
   1d086:	2b00      	cmp	r3, #0
   1d088:	d001      	beq.n	1d08e <sd_mmc_cmd13+0x26>
				return false;
   1d08a:	2300      	movs	r3, #0
   1d08c:	e00e      	b.n	1d0ac <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1d08e:	4b0c      	ldr	r3, [pc, #48]	; (1d0c0 <sd_mmc_cmd13+0x58>)
   1d090:	4798      	blx	r3
   1d092:	0002      	movs	r2, r0
   1d094:	23ff      	movs	r3, #255	; 0xff
   1d096:	4013      	ands	r3, r2
   1d098:	d006      	beq.n	1d0a8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1d09a:	687b      	ldr	r3, [r7, #4]
   1d09c:	1e5a      	subs	r2, r3, #1
   1d09e:	607a      	str	r2, [r7, #4]
   1d0a0:	2b00      	cmp	r3, #0
   1d0a2:	d1e6      	bne.n	1d072 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1d0a4:	2300      	movs	r3, #0
   1d0a6:	e001      	b.n	1d0ac <sd_mmc_cmd13+0x44>
				break;
   1d0a8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1d0aa:	2301      	movs	r3, #1
}
   1d0ac:	0018      	movs	r0, r3
   1d0ae:	46bd      	mov	sp, r7
   1d0b0:	b002      	add	sp, #8
   1d0b2:	bd80      	pop	{r7, pc}
   1d0b4:	00030d40 	.word	0x00030d40
   1d0b8:	00001b0d 	.word	0x00001b0d
   1d0bc:	0001e521 	.word	0x0001e521
   1d0c0:	0001e761 	.word	0x0001e761

0001d0c4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1d0c4:	b590      	push	{r4, r7, lr}
   1d0c6:	b085      	sub	sp, #20
   1d0c8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1d0ca:	4b38      	ldr	r3, [pc, #224]	; (1d1ac <sd_acmd51+0xe8>)
   1d0cc:	681b      	ldr	r3, [r3, #0]
   1d0ce:	891b      	ldrh	r3, [r3, #8]
   1d0d0:	041b      	lsls	r3, r3, #16
   1d0d2:	4a37      	ldr	r2, [pc, #220]	; (1d1b0 <sd_acmd51+0xec>)
   1d0d4:	0019      	movs	r1, r3
   1d0d6:	0010      	movs	r0, r2
   1d0d8:	4b36      	ldr	r3, [pc, #216]	; (1d1b4 <sd_acmd51+0xf0>)
   1d0da:	4798      	blx	r3
   1d0dc:	0003      	movs	r3, r0
   1d0de:	001a      	movs	r2, r3
   1d0e0:	2301      	movs	r3, #1
   1d0e2:	4053      	eors	r3, r2
   1d0e4:	b2db      	uxtb	r3, r3
   1d0e6:	2b00      	cmp	r3, #0
   1d0e8:	d001      	beq.n	1d0ee <sd_acmd51+0x2a>
		return false;
   1d0ea:	2300      	movs	r3, #0
   1d0ec:	e059      	b.n	1d1a2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1d0ee:	4832      	ldr	r0, [pc, #200]	; (1d1b8 <sd_acmd51+0xf4>)
   1d0f0:	2301      	movs	r3, #1
   1d0f2:	9300      	str	r3, [sp, #0]
   1d0f4:	2301      	movs	r3, #1
   1d0f6:	2208      	movs	r2, #8
   1d0f8:	2100      	movs	r1, #0
   1d0fa:	4c30      	ldr	r4, [pc, #192]	; (1d1bc <sd_acmd51+0xf8>)
   1d0fc:	47a0      	blx	r4
   1d0fe:	0003      	movs	r3, r0
   1d100:	001a      	movs	r2, r3
   1d102:	2301      	movs	r3, #1
   1d104:	4053      	eors	r3, r2
   1d106:	b2db      	uxtb	r3, r3
   1d108:	2b00      	cmp	r3, #0
   1d10a:	d001      	beq.n	1d110 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1d10c:	2300      	movs	r3, #0
   1d10e:	e048      	b.n	1d1a2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1d110:	003b      	movs	r3, r7
   1d112:	2101      	movs	r1, #1
   1d114:	0018      	movs	r0, r3
   1d116:	4b2a      	ldr	r3, [pc, #168]	; (1d1c0 <sd_acmd51+0xfc>)
   1d118:	4798      	blx	r3
   1d11a:	0003      	movs	r3, r0
   1d11c:	001a      	movs	r2, r3
   1d11e:	2301      	movs	r3, #1
   1d120:	4053      	eors	r3, r2
   1d122:	b2db      	uxtb	r3, r3
   1d124:	2b00      	cmp	r3, #0
   1d126:	d001      	beq.n	1d12c <sd_acmd51+0x68>
		return false;
   1d128:	2300      	movs	r3, #0
   1d12a:	e03a      	b.n	1d1a2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1d12c:	4b25      	ldr	r3, [pc, #148]	; (1d1c4 <sd_acmd51+0x100>)
   1d12e:	4798      	blx	r3
   1d130:	0003      	movs	r3, r0
   1d132:	001a      	movs	r2, r3
   1d134:	2301      	movs	r3, #1
   1d136:	4053      	eors	r3, r2
   1d138:	b2db      	uxtb	r3, r3
   1d13a:	2b00      	cmp	r3, #0
   1d13c:	d001      	beq.n	1d142 <sd_acmd51+0x7e>
		return false;
   1d13e:	2300      	movs	r3, #0
   1d140:	e02f      	b.n	1d1a2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1d142:	0038      	movs	r0, r7
   1d144:	2304      	movs	r3, #4
   1d146:	2238      	movs	r2, #56	; 0x38
   1d148:	2140      	movs	r1, #64	; 0x40
   1d14a:	4c1f      	ldr	r4, [pc, #124]	; (1d1c8 <sd_acmd51+0x104>)
   1d14c:	47a0      	blx	r4
   1d14e:	0003      	movs	r3, r0
   1d150:	2b01      	cmp	r3, #1
   1d152:	d008      	beq.n	1d166 <sd_acmd51+0xa2>
   1d154:	d302      	bcc.n	1d15c <sd_acmd51+0x98>
   1d156:	2b02      	cmp	r3, #2
   1d158:	d00a      	beq.n	1d170 <sd_acmd51+0xac>
   1d15a:	e01c      	b.n	1d196 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d15c:	4b13      	ldr	r3, [pc, #76]	; (1d1ac <sd_acmd51+0xe8>)
   1d15e:	681b      	ldr	r3, [r3, #0]
   1d160:	2210      	movs	r2, #16
   1d162:	731a      	strb	r2, [r3, #12]
		break;
   1d164:	e01c      	b.n	1d1a0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1d166:	4b11      	ldr	r3, [pc, #68]	; (1d1ac <sd_acmd51+0xe8>)
   1d168:	681b      	ldr	r3, [r3, #0]
   1d16a:	221a      	movs	r2, #26
   1d16c:	731a      	strb	r2, [r3, #12]
		break;
   1d16e:	e017      	b.n	1d1a0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1d170:	0038      	movs	r0, r7
   1d172:	2301      	movs	r3, #1
   1d174:	222f      	movs	r2, #47	; 0x2f
   1d176:	2140      	movs	r1, #64	; 0x40
   1d178:	4c13      	ldr	r4, [pc, #76]	; (1d1c8 <sd_acmd51+0x104>)
   1d17a:	47a0      	blx	r4
   1d17c:	0003      	movs	r3, r0
   1d17e:	2b01      	cmp	r3, #1
   1d180:	d104      	bne.n	1d18c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1d182:	4b0a      	ldr	r3, [pc, #40]	; (1d1ac <sd_acmd51+0xe8>)
   1d184:	681b      	ldr	r3, [r3, #0]
   1d186:	2230      	movs	r2, #48	; 0x30
   1d188:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1d18a:	e009      	b.n	1d1a0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1d18c:	4b07      	ldr	r3, [pc, #28]	; (1d1ac <sd_acmd51+0xe8>)
   1d18e:	681b      	ldr	r3, [r3, #0]
   1d190:	2220      	movs	r2, #32
   1d192:	731a      	strb	r2, [r3, #12]
		break;
   1d194:	e004      	b.n	1d1a0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1d196:	4b05      	ldr	r3, [pc, #20]	; (1d1ac <sd_acmd51+0xe8>)
   1d198:	681b      	ldr	r3, [r3, #0]
   1d19a:	2210      	movs	r2, #16
   1d19c:	731a      	strb	r2, [r3, #12]
		break;
   1d19e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1d1a0:	2301      	movs	r3, #1
}
   1d1a2:	0018      	movs	r0, r3
   1d1a4:	46bd      	mov	sp, r7
   1d1a6:	b003      	add	sp, #12
   1d1a8:	bd90      	pop	{r4, r7, pc}
   1d1aa:	46c0      	nop			; (mov r8, r8)
   1d1ac:	200040bc 	.word	0x200040bc
   1d1b0:	00001137 	.word	0x00001137
   1d1b4:	0001e521 	.word	0x0001e521
   1d1b8:	00081133 	.word	0x00081133
   1d1bc:	0001e549 	.word	0x0001e549
   1d1c0:	0001e819 	.word	0x0001e819
   1d1c4:	0001e8bd 	.word	0x0001e8bd
   1d1c8:	0001c949 	.word	0x0001c949

0001d1cc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1d1cc:	b580      	push	{r7, lr}
   1d1ce:	b082      	sub	sp, #8
   1d1d0:	af00      	add	r7, sp, #0
   1d1d2:	0002      	movs	r2, r0
   1d1d4:	1dfb      	adds	r3, r7, #7
   1d1d6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1d1d8:	1dfb      	adds	r3, r7, #7
   1d1da:	781b      	ldrb	r3, [r3, #0]
   1d1dc:	2b00      	cmp	r3, #0
   1d1de:	d001      	beq.n	1d1e4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1d1e0:	2304      	movs	r3, #4
   1d1e2:	e047      	b.n	1d274 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1d1e4:	1dfb      	adds	r3, r7, #7
   1d1e6:	781b      	ldrb	r3, [r3, #0]
   1d1e8:	4a24      	ldr	r2, [pc, #144]	; (1d27c <sd_mmc_select_slot+0xb0>)
   1d1ea:	015b      	lsls	r3, r3, #5
   1d1ec:	18d3      	adds	r3, r2, r3
   1d1ee:	330a      	adds	r3, #10
   1d1f0:	781b      	ldrb	r3, [r3, #0]
   1d1f2:	2b04      	cmp	r3, #4
   1d1f4:	d008      	beq.n	1d208 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1d1f6:	1dfb      	adds	r3, r7, #7
   1d1f8:	781b      	ldrb	r3, [r3, #0]
   1d1fa:	4a20      	ldr	r2, [pc, #128]	; (1d27c <sd_mmc_select_slot+0xb0>)
   1d1fc:	015b      	lsls	r3, r3, #5
   1d1fe:	18d3      	adds	r3, r2, r3
   1d200:	330a      	adds	r3, #10
   1d202:	781b      	ldrb	r3, [r3, #0]
   1d204:	2b03      	cmp	r3, #3
   1d206:	d11d      	bne.n	1d244 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1d208:	1dfb      	adds	r3, r7, #7
   1d20a:	781b      	ldrb	r3, [r3, #0]
   1d20c:	4a1b      	ldr	r2, [pc, #108]	; (1d27c <sd_mmc_select_slot+0xb0>)
   1d20e:	015b      	lsls	r3, r3, #5
   1d210:	18d3      	adds	r3, r2, r3
   1d212:	330a      	adds	r3, #10
   1d214:	2202      	movs	r2, #2
   1d216:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1d218:	1dfb      	adds	r3, r7, #7
   1d21a:	781a      	ldrb	r2, [r3, #0]
   1d21c:	4b17      	ldr	r3, [pc, #92]	; (1d27c <sd_mmc_select_slot+0xb0>)
   1d21e:	0152      	lsls	r2, r2, #5
   1d220:	4917      	ldr	r1, [pc, #92]	; (1d280 <sd_mmc_select_slot+0xb4>)
   1d222:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1d224:	1dfb      	adds	r3, r7, #7
   1d226:	781b      	ldrb	r3, [r3, #0]
   1d228:	4a14      	ldr	r2, [pc, #80]	; (1d27c <sd_mmc_select_slot+0xb0>)
   1d22a:	015b      	lsls	r3, r3, #5
   1d22c:	18d3      	adds	r3, r2, r3
   1d22e:	330d      	adds	r3, #13
   1d230:	2201      	movs	r2, #1
   1d232:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1d234:	1dfb      	adds	r3, r7, #7
   1d236:	781b      	ldrb	r3, [r3, #0]
   1d238:	4a10      	ldr	r2, [pc, #64]	; (1d27c <sd_mmc_select_slot+0xb0>)
   1d23a:	015b      	lsls	r3, r3, #5
   1d23c:	18d3      	adds	r3, r2, r3
   1d23e:	331e      	adds	r3, #30
   1d240:	2200      	movs	r2, #0
   1d242:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1d244:	4b0f      	ldr	r3, [pc, #60]	; (1d284 <sd_mmc_select_slot+0xb8>)
   1d246:	1dfa      	adds	r2, r7, #7
   1d248:	7812      	ldrb	r2, [r2, #0]
   1d24a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1d24c:	1dfb      	adds	r3, r7, #7
   1d24e:	781b      	ldrb	r3, [r3, #0]
   1d250:	015a      	lsls	r2, r3, #5
   1d252:	4b0a      	ldr	r3, [pc, #40]	; (1d27c <sd_mmc_select_slot+0xb0>)
   1d254:	18d2      	adds	r2, r2, r3
   1d256:	4b0c      	ldr	r3, [pc, #48]	; (1d288 <sd_mmc_select_slot+0xbc>)
   1d258:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1d25a:	4b0c      	ldr	r3, [pc, #48]	; (1d28c <sd_mmc_select_slot+0xc0>)
   1d25c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1d25e:	1dfb      	adds	r3, r7, #7
   1d260:	781b      	ldrb	r3, [r3, #0]
   1d262:	4a06      	ldr	r2, [pc, #24]	; (1d27c <sd_mmc_select_slot+0xb0>)
   1d264:	015b      	lsls	r3, r3, #5
   1d266:	18d3      	adds	r3, r2, r3
   1d268:	330a      	adds	r3, #10
   1d26a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1d26c:	3b02      	subs	r3, #2
   1d26e:	425a      	negs	r2, r3
   1d270:	4153      	adcs	r3, r2
   1d272:	b2db      	uxtb	r3, r3
}
   1d274:	0018      	movs	r0, r3
   1d276:	46bd      	mov	sp, r7
   1d278:	b002      	add	sp, #8
   1d27a:	bd80      	pop	{r7, pc}
   1d27c:	20004098 	.word	0x20004098
   1d280:	00061a80 	.word	0x00061a80
   1d284:	200040b8 	.word	0x200040b8
   1d288:	200040bc 	.word	0x200040bc
   1d28c:	0001d291 	.word	0x0001d291

0001d290 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1d290:	b5b0      	push	{r4, r5, r7, lr}
   1d292:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d294:	4b09      	ldr	r3, [pc, #36]	; (1d2bc <sd_mmc_configure_slot+0x2c>)
   1d296:	7818      	ldrb	r0, [r3, #0]
   1d298:	4b09      	ldr	r3, [pc, #36]	; (1d2c0 <sd_mmc_configure_slot+0x30>)
   1d29a:	681b      	ldr	r3, [r3, #0]
   1d29c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1d29e:	4b08      	ldr	r3, [pc, #32]	; (1d2c0 <sd_mmc_configure_slot+0x30>)
   1d2a0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d2a2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1d2a4:	4b06      	ldr	r3, [pc, #24]	; (1d2c0 <sd_mmc_configure_slot+0x30>)
   1d2a6:	681b      	ldr	r3, [r3, #0]
   1d2a8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1d2aa:	1e5c      	subs	r4, r3, #1
   1d2ac:	41a3      	sbcs	r3, r4
   1d2ae:	b2db      	uxtb	r3, r3
   1d2b0:	4c04      	ldr	r4, [pc, #16]	; (1d2c4 <sd_mmc_configure_slot+0x34>)
   1d2b2:	47a0      	blx	r4
}
   1d2b4:	46c0      	nop			; (mov r8, r8)
   1d2b6:	46bd      	mov	sp, r7
   1d2b8:	bdb0      	pop	{r4, r5, r7, pc}
   1d2ba:	46c0      	nop			; (mov r8, r8)
   1d2bc:	200040b8 	.word	0x200040b8
   1d2c0:	200040bc 	.word	0x200040bc
   1d2c4:	0001e409 	.word	0x0001e409

0001d2c8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1d2c8:	b580      	push	{r7, lr}
   1d2ca:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1d2cc:	4b05      	ldr	r3, [pc, #20]	; (1d2e4 <sd_mmc_deselect_slot+0x1c>)
   1d2ce:	781b      	ldrb	r3, [r3, #0]
   1d2d0:	2b00      	cmp	r3, #0
   1d2d2:	d104      	bne.n	1d2de <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1d2d4:	4b03      	ldr	r3, [pc, #12]	; (1d2e4 <sd_mmc_deselect_slot+0x1c>)
   1d2d6:	781b      	ldrb	r3, [r3, #0]
   1d2d8:	0018      	movs	r0, r3
   1d2da:	4b03      	ldr	r3, [pc, #12]	; (1d2e8 <sd_mmc_deselect_slot+0x20>)
   1d2dc:	4798      	blx	r3
	}
}
   1d2de:	46c0      	nop			; (mov r8, r8)
   1d2e0:	46bd      	mov	sp, r7
   1d2e2:	bd80      	pop	{r7, pc}
   1d2e4:	200040b8 	.word	0x200040b8
   1d2e8:	0001e491 	.word	0x0001e491

0001d2ec <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1d2ec:	b580      	push	{r7, lr}
   1d2ee:	b082      	sub	sp, #8
   1d2f0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1d2f2:	1dfb      	adds	r3, r7, #7
   1d2f4:	2200      	movs	r2, #0
   1d2f6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1d2f8:	4b59      	ldr	r3, [pc, #356]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d2fa:	681b      	ldr	r3, [r3, #0]
   1d2fc:	2201      	movs	r2, #1
   1d2fe:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1d300:	4b57      	ldr	r3, [pc, #348]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d302:	681b      	ldr	r3, [r3, #0]
   1d304:	2200      	movs	r2, #0
   1d306:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1d308:	4b55      	ldr	r3, [pc, #340]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d30a:	681b      	ldr	r3, [r3, #0]
   1d30c:	2200      	movs	r2, #0
   1d30e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1d310:	4b54      	ldr	r3, [pc, #336]	; (1d464 <sd_mmc_spi_card_init+0x178>)
   1d312:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1d314:	2388      	movs	r3, #136	; 0x88
   1d316:	015b      	lsls	r3, r3, #5
   1d318:	2100      	movs	r1, #0
   1d31a:	0018      	movs	r0, r3
   1d31c:	4b52      	ldr	r3, [pc, #328]	; (1d468 <sd_mmc_spi_card_init+0x17c>)
   1d31e:	4798      	blx	r3
   1d320:	0003      	movs	r3, r0
   1d322:	001a      	movs	r2, r3
   1d324:	2301      	movs	r3, #1
   1d326:	4053      	eors	r3, r2
   1d328:	b2db      	uxtb	r3, r3
   1d32a:	2b00      	cmp	r3, #0
   1d32c:	d001      	beq.n	1d332 <sd_mmc_spi_card_init+0x46>
		return false;
   1d32e:	2300      	movs	r3, #0
   1d330:	e092      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1d332:	1dfb      	adds	r3, r7, #7
   1d334:	0018      	movs	r0, r3
   1d336:	4b4d      	ldr	r3, [pc, #308]	; (1d46c <sd_mmc_spi_card_init+0x180>)
   1d338:	4798      	blx	r3
   1d33a:	0003      	movs	r3, r0
   1d33c:	001a      	movs	r2, r3
   1d33e:	2301      	movs	r3, #1
   1d340:	4053      	eors	r3, r2
   1d342:	b2db      	uxtb	r3, r3
   1d344:	2b00      	cmp	r3, #0
   1d346:	d001      	beq.n	1d34c <sd_mmc_spi_card_init+0x60>
		return false;
   1d348:	2300      	movs	r3, #0
   1d34a:	e085      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1d34c:	4b48      	ldr	r3, [pc, #288]	; (1d470 <sd_mmc_spi_card_init+0x184>)
   1d34e:	4798      	blx	r3
   1d350:	0003      	movs	r3, r0
   1d352:	001a      	movs	r2, r3
   1d354:	2301      	movs	r3, #1
   1d356:	4053      	eors	r3, r2
   1d358:	b2db      	uxtb	r3, r3
   1d35a:	2b00      	cmp	r3, #0
   1d35c:	d001      	beq.n	1d362 <sd_mmc_spi_card_init+0x76>
		return false;
   1d35e:	2300      	movs	r3, #0
   1d360:	e07a      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1d362:	4b3f      	ldr	r3, [pc, #252]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d364:	681b      	ldr	r3, [r3, #0]
   1d366:	7adb      	ldrb	r3, [r3, #11]
   1d368:	001a      	movs	r2, r3
   1d36a:	2301      	movs	r3, #1
   1d36c:	4013      	ands	r3, r2
   1d36e:	d021      	beq.n	1d3b4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1d370:	1dfb      	adds	r3, r7, #7
   1d372:	781b      	ldrb	r3, [r3, #0]
   1d374:	0018      	movs	r0, r3
   1d376:	4b3f      	ldr	r3, [pc, #252]	; (1d474 <sd_mmc_spi_card_init+0x188>)
   1d378:	4798      	blx	r3
   1d37a:	0003      	movs	r3, r0
   1d37c:	001a      	movs	r2, r3
   1d37e:	2301      	movs	r3, #1
   1d380:	4053      	eors	r3, r2
   1d382:	b2db      	uxtb	r3, r3
   1d384:	2b00      	cmp	r3, #0
   1d386:	d007      	beq.n	1d398 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1d388:	4b35      	ldr	r3, [pc, #212]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d38a:	681b      	ldr	r3, [r3, #0]
   1d38c:	2202      	movs	r2, #2
   1d38e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1d390:	4b39      	ldr	r3, [pc, #228]	; (1d478 <sd_mmc_spi_card_init+0x18c>)
   1d392:	4798      	blx	r3
   1d394:	0003      	movs	r3, r0
   1d396:	e05f      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1d398:	4b38      	ldr	r3, [pc, #224]	; (1d47c <sd_mmc_spi_card_init+0x190>)
   1d39a:	2100      	movs	r1, #0
   1d39c:	0018      	movs	r0, r3
   1d39e:	4b32      	ldr	r3, [pc, #200]	; (1d468 <sd_mmc_spi_card_init+0x17c>)
   1d3a0:	4798      	blx	r3
   1d3a2:	0003      	movs	r3, r0
   1d3a4:	001a      	movs	r2, r3
   1d3a6:	2301      	movs	r3, #1
   1d3a8:	4053      	eors	r3, r2
   1d3aa:	b2db      	uxtb	r3, r3
   1d3ac:	2b00      	cmp	r3, #0
   1d3ae:	d001      	beq.n	1d3b4 <sd_mmc_spi_card_init+0xc8>
			return false;
   1d3b0:	2300      	movs	r3, #0
   1d3b2:	e051      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1d3b4:	4b2a      	ldr	r3, [pc, #168]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d3b6:	681b      	ldr	r3, [r3, #0]
   1d3b8:	7adb      	ldrb	r3, [r3, #11]
   1d3ba:	001a      	movs	r2, r3
   1d3bc:	2301      	movs	r3, #1
   1d3be:	4013      	ands	r3, r2
   1d3c0:	d017      	beq.n	1d3f2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1d3c2:	4b2f      	ldr	r3, [pc, #188]	; (1d480 <sd_mmc_spi_card_init+0x194>)
   1d3c4:	4798      	blx	r3
   1d3c6:	0003      	movs	r3, r0
   1d3c8:	001a      	movs	r2, r3
   1d3ca:	2301      	movs	r3, #1
   1d3cc:	4053      	eors	r3, r2
   1d3ce:	b2db      	uxtb	r3, r3
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	d001      	beq.n	1d3d8 <sd_mmc_spi_card_init+0xec>
			return false;
   1d3d4:	2300      	movs	r3, #0
   1d3d6:	e03f      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1d3d8:	4b2a      	ldr	r3, [pc, #168]	; (1d484 <sd_mmc_spi_card_init+0x198>)
   1d3da:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1d3dc:	4b2a      	ldr	r3, [pc, #168]	; (1d488 <sd_mmc_spi_card_init+0x19c>)
   1d3de:	4798      	blx	r3
   1d3e0:	0003      	movs	r3, r0
   1d3e2:	001a      	movs	r2, r3
   1d3e4:	2301      	movs	r3, #1
   1d3e6:	4053      	eors	r3, r2
   1d3e8:	b2db      	uxtb	r3, r3
   1d3ea:	2b00      	cmp	r3, #0
   1d3ec:	d001      	beq.n	1d3f2 <sd_mmc_spi_card_init+0x106>
			return false;
   1d3ee:	2300      	movs	r3, #0
   1d3f0:	e032      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1d3f2:	4b1b      	ldr	r3, [pc, #108]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d3f4:	681b      	ldr	r3, [r3, #0]
   1d3f6:	7adb      	ldrb	r3, [r3, #11]
   1d3f8:	001a      	movs	r2, r3
   1d3fa:	2301      	movs	r3, #1
   1d3fc:	4013      	ands	r3, r2
   1d3fe:	d016      	beq.n	1d42e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1d400:	4b17      	ldr	r3, [pc, #92]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d402:	681b      	ldr	r3, [r3, #0]
   1d404:	7adb      	ldrb	r3, [r3, #11]
   1d406:	001a      	movs	r2, r3
   1d408:	2308      	movs	r3, #8
   1d40a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1d40c:	d10f      	bne.n	1d42e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1d40e:	2380      	movs	r3, #128	; 0x80
   1d410:	009b      	lsls	r3, r3, #2
   1d412:	4a1e      	ldr	r2, [pc, #120]	; (1d48c <sd_mmc_spi_card_init+0x1a0>)
   1d414:	0019      	movs	r1, r3
   1d416:	0010      	movs	r0, r2
   1d418:	4b13      	ldr	r3, [pc, #76]	; (1d468 <sd_mmc_spi_card_init+0x17c>)
   1d41a:	4798      	blx	r3
   1d41c:	0003      	movs	r3, r0
   1d41e:	001a      	movs	r2, r3
   1d420:	2301      	movs	r3, #1
   1d422:	4053      	eors	r3, r2
   1d424:	b2db      	uxtb	r3, r3
   1d426:	2b00      	cmp	r3, #0
   1d428:	d001      	beq.n	1d42e <sd_mmc_spi_card_init+0x142>
			return false;
   1d42a:	2300      	movs	r3, #0
   1d42c:	e014      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1d42e:	4b0c      	ldr	r3, [pc, #48]	; (1d460 <sd_mmc_spi_card_init+0x174>)
   1d430:	681b      	ldr	r3, [r3, #0]
   1d432:	7adb      	ldrb	r3, [r3, #11]
   1d434:	001a      	movs	r2, r3
   1d436:	2301      	movs	r3, #1
   1d438:	4013      	ands	r3, r2
   1d43a:	d00a      	beq.n	1d452 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1d43c:	4b14      	ldr	r3, [pc, #80]	; (1d490 <sd_mmc_spi_card_init+0x1a4>)
   1d43e:	4798      	blx	r3
   1d440:	0003      	movs	r3, r0
   1d442:	001a      	movs	r2, r3
   1d444:	2301      	movs	r3, #1
   1d446:	4053      	eors	r3, r2
   1d448:	b2db      	uxtb	r3, r3
   1d44a:	2b00      	cmp	r3, #0
   1d44c:	d001      	beq.n	1d452 <sd_mmc_spi_card_init+0x166>
			return false;
   1d44e:	2300      	movs	r3, #0
   1d450:	e002      	b.n	1d458 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1d452:	4b10      	ldr	r3, [pc, #64]	; (1d494 <sd_mmc_spi_card_init+0x1a8>)
   1d454:	4798      	blx	r3
	return true;
   1d456:	2301      	movs	r3, #1
}
   1d458:	0018      	movs	r0, r3
   1d45a:	46bd      	mov	sp, r7
   1d45c:	b002      	add	sp, #8
   1d45e:	bd80      	pop	{r7, pc}
   1d460:	200040bc 	.word	0x200040bc
   1d464:	0001e4d5 	.word	0x0001e4d5
   1d468:	0001e521 	.word	0x0001e521
   1d46c:	0001cc41 	.word	0x0001cc41
   1d470:	0001cc35 	.word	0x0001cc35
   1d474:	0001cb51 	.word	0x0001cb51
   1d478:	0001d499 	.word	0x0001d499
   1d47c:	0000113b 	.word	0x0000113b
   1d480:	0001cddd 	.word	0x0001cddd
   1d484:	0001cf7d 	.word	0x0001cf7d
   1d488:	0001d0c5 	.word	0x0001d0c5
   1d48c:	00001110 	.word	0x00001110
   1d490:	0001d069 	.word	0x0001d069
   1d494:	0001d291 	.word	0x0001d291

0001d498 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1d498:	b580      	push	{r7, lr}
   1d49a:	b082      	sub	sp, #8
   1d49c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1d49e:	2388      	movs	r3, #136	; 0x88
   1d4a0:	015b      	lsls	r3, r3, #5
   1d4a2:	2100      	movs	r1, #0
   1d4a4:	0018      	movs	r0, r3
   1d4a6:	4b32      	ldr	r3, [pc, #200]	; (1d570 <sd_mmc_spi_install_mmc+0xd8>)
   1d4a8:	4798      	blx	r3
   1d4aa:	0003      	movs	r3, r0
   1d4ac:	001a      	movs	r2, r3
   1d4ae:	2301      	movs	r3, #1
   1d4b0:	4053      	eors	r3, r2
   1d4b2:	b2db      	uxtb	r3, r3
   1d4b4:	2b00      	cmp	r3, #0
   1d4b6:	d001      	beq.n	1d4bc <sd_mmc_spi_install_mmc+0x24>
		return false;
   1d4b8:	2300      	movs	r3, #0
   1d4ba:	e055      	b.n	1d568 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1d4bc:	4b2d      	ldr	r3, [pc, #180]	; (1d574 <sd_mmc_spi_install_mmc+0xdc>)
   1d4be:	4798      	blx	r3
   1d4c0:	0003      	movs	r3, r0
   1d4c2:	001a      	movs	r2, r3
   1d4c4:	2301      	movs	r3, #1
   1d4c6:	4053      	eors	r3, r2
   1d4c8:	b2db      	uxtb	r3, r3
   1d4ca:	2b00      	cmp	r3, #0
   1d4cc:	d001      	beq.n	1d4d2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1d4ce:	2300      	movs	r3, #0
   1d4d0:	e04a      	b.n	1d568 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1d4d2:	4b29      	ldr	r3, [pc, #164]	; (1d578 <sd_mmc_spi_install_mmc+0xe0>)
   1d4d4:	2100      	movs	r1, #0
   1d4d6:	0018      	movs	r0, r3
   1d4d8:	4b25      	ldr	r3, [pc, #148]	; (1d570 <sd_mmc_spi_install_mmc+0xd8>)
   1d4da:	4798      	blx	r3
   1d4dc:	0003      	movs	r3, r0
   1d4de:	001a      	movs	r2, r3
   1d4e0:	2301      	movs	r3, #1
   1d4e2:	4053      	eors	r3, r2
   1d4e4:	b2db      	uxtb	r3, r3
   1d4e6:	2b00      	cmp	r3, #0
   1d4e8:	d001      	beq.n	1d4ee <sd_mmc_spi_install_mmc+0x56>
		return false;
   1d4ea:	2300      	movs	r3, #0
   1d4ec:	e03c      	b.n	1d568 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1d4ee:	4b23      	ldr	r3, [pc, #140]	; (1d57c <sd_mmc_spi_install_mmc+0xe4>)
   1d4f0:	4798      	blx	r3
   1d4f2:	0003      	movs	r3, r0
   1d4f4:	001a      	movs	r2, r3
   1d4f6:	2301      	movs	r3, #1
   1d4f8:	4053      	eors	r3, r2
   1d4fa:	b2db      	uxtb	r3, r3
   1d4fc:	2b00      	cmp	r3, #0
   1d4fe:	d001      	beq.n	1d504 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1d500:	2300      	movs	r3, #0
   1d502:	e031      	b.n	1d568 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1d504:	4b1e      	ldr	r3, [pc, #120]	; (1d580 <sd_mmc_spi_install_mmc+0xe8>)
   1d506:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1d508:	4b1e      	ldr	r3, [pc, #120]	; (1d584 <sd_mmc_spi_install_mmc+0xec>)
   1d50a:	681b      	ldr	r3, [r3, #0]
   1d50c:	7b1b      	ldrb	r3, [r3, #12]
   1d50e:	2b3f      	cmp	r3, #63	; 0x3f
   1d510:	d90c      	bls.n	1d52c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1d512:	1dfb      	adds	r3, r7, #7
   1d514:	0018      	movs	r0, r3
   1d516:	4b1c      	ldr	r3, [pc, #112]	; (1d588 <sd_mmc_spi_install_mmc+0xf0>)
   1d518:	4798      	blx	r3
   1d51a:	0003      	movs	r3, r0
   1d51c:	001a      	movs	r2, r3
   1d51e:	2301      	movs	r3, #1
   1d520:	4053      	eors	r3, r2
   1d522:	b2db      	uxtb	r3, r3
   1d524:	2b00      	cmp	r3, #0
   1d526:	d001      	beq.n	1d52c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1d528:	2300      	movs	r3, #0
   1d52a:	e01d      	b.n	1d568 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1d52c:	2380      	movs	r3, #128	; 0x80
   1d52e:	009b      	lsls	r3, r3, #2
   1d530:	4a16      	ldr	r2, [pc, #88]	; (1d58c <sd_mmc_spi_install_mmc+0xf4>)
   1d532:	0019      	movs	r1, r3
   1d534:	0010      	movs	r0, r2
   1d536:	4b0e      	ldr	r3, [pc, #56]	; (1d570 <sd_mmc_spi_install_mmc+0xd8>)
   1d538:	4798      	blx	r3
   1d53a:	0003      	movs	r3, r0
   1d53c:	001a      	movs	r2, r3
   1d53e:	2301      	movs	r3, #1
   1d540:	4053      	eors	r3, r2
   1d542:	b2db      	uxtb	r3, r3
   1d544:	2b00      	cmp	r3, #0
   1d546:	d001      	beq.n	1d54c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1d548:	2300      	movs	r3, #0
   1d54a:	e00d      	b.n	1d568 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1d54c:	4b10      	ldr	r3, [pc, #64]	; (1d590 <sd_mmc_spi_install_mmc+0xf8>)
   1d54e:	4798      	blx	r3
   1d550:	0003      	movs	r3, r0
   1d552:	001a      	movs	r2, r3
   1d554:	2301      	movs	r3, #1
   1d556:	4053      	eors	r3, r2
   1d558:	b2db      	uxtb	r3, r3
   1d55a:	2b00      	cmp	r3, #0
   1d55c:	d001      	beq.n	1d562 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1d55e:	2300      	movs	r3, #0
   1d560:	e002      	b.n	1d568 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1d562:	4b0c      	ldr	r3, [pc, #48]	; (1d594 <sd_mmc_spi_install_mmc+0xfc>)
   1d564:	4798      	blx	r3
	return true;
   1d566:	2301      	movs	r3, #1
}
   1d568:	0018      	movs	r0, r3
   1d56a:	46bd      	mov	sp, r7
   1d56c:	b002      	add	sp, #8
   1d56e:	bd80      	pop	{r7, pc}
   1d570:	0001e521 	.word	0x0001e521
   1d574:	0001caa5 	.word	0x0001caa5
   1d578:	0000113b 	.word	0x0000113b
   1d57c:	0001cddd 	.word	0x0001cddd
   1d580:	0001ce4d 	.word	0x0001ce4d
   1d584:	200040bc 	.word	0x200040bc
   1d588:	0001ccb1 	.word	0x0001ccb1
   1d58c:	00001110 	.word	0x00001110
   1d590:	0001d069 	.word	0x0001d069
   1d594:	0001d291 	.word	0x0001d291

0001d598 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1d598:	b580      	push	{r7, lr}
   1d59a:	b082      	sub	sp, #8
   1d59c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1d59e:	1dfb      	adds	r3, r7, #7
   1d5a0:	2200      	movs	r2, #0
   1d5a2:	701a      	strb	r2, [r3, #0]
   1d5a4:	e00c      	b.n	1d5c0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1d5a6:	1dfb      	adds	r3, r7, #7
   1d5a8:	781b      	ldrb	r3, [r3, #0]
   1d5aa:	4a0c      	ldr	r2, [pc, #48]	; (1d5dc <sd_mmc_init+0x44>)
   1d5ac:	015b      	lsls	r3, r3, #5
   1d5ae:	18d3      	adds	r3, r2, r3
   1d5b0:	330a      	adds	r3, #10
   1d5b2:	2204      	movs	r2, #4
   1d5b4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1d5b6:	1dfb      	adds	r3, r7, #7
   1d5b8:	781a      	ldrb	r2, [r3, #0]
   1d5ba:	1dfb      	adds	r3, r7, #7
   1d5bc:	3201      	adds	r2, #1
   1d5be:	701a      	strb	r2, [r3, #0]
   1d5c0:	1dfb      	adds	r3, r7, #7
   1d5c2:	781b      	ldrb	r3, [r3, #0]
   1d5c4:	2b00      	cmp	r3, #0
   1d5c6:	d0ee      	beq.n	1d5a6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1d5c8:	4b05      	ldr	r3, [pc, #20]	; (1d5e0 <sd_mmc_init+0x48>)
   1d5ca:	22ff      	movs	r2, #255	; 0xff
   1d5cc:	701a      	strb	r2, [r3, #0]
	driver_init();
   1d5ce:	4b05      	ldr	r3, [pc, #20]	; (1d5e4 <sd_mmc_init+0x4c>)
   1d5d0:	4798      	blx	r3
}
   1d5d2:	46c0      	nop			; (mov r8, r8)
   1d5d4:	46bd      	mov	sp, r7
   1d5d6:	b002      	add	sp, #8
   1d5d8:	bd80      	pop	{r7, pc}
   1d5da:	46c0      	nop			; (mov r8, r8)
   1d5dc:	20004098 	.word	0x20004098
   1d5e0:	200040b8 	.word	0x200040b8
   1d5e4:	0001e341 	.word	0x0001e341

0001d5e8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1d5e8:	b590      	push	{r4, r7, lr}
   1d5ea:	b085      	sub	sp, #20
   1d5ec:	af00      	add	r7, sp, #0
   1d5ee:	0002      	movs	r2, r0
   1d5f0:	1dfb      	adds	r3, r7, #7
   1d5f2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1d5f4:	230f      	movs	r3, #15
   1d5f6:	18fc      	adds	r4, r7, r3
   1d5f8:	1dfb      	adds	r3, r7, #7
   1d5fa:	781b      	ldrb	r3, [r3, #0]
   1d5fc:	0018      	movs	r0, r3
   1d5fe:	4b13      	ldr	r3, [pc, #76]	; (1d64c <sd_mmc_check+0x64>)
   1d600:	4798      	blx	r3
   1d602:	0003      	movs	r3, r0
   1d604:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1d606:	230f      	movs	r3, #15
   1d608:	18fb      	adds	r3, r7, r3
   1d60a:	781b      	ldrb	r3, [r3, #0]
   1d60c:	2b01      	cmp	r3, #1
   1d60e:	d005      	beq.n	1d61c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1d610:	4b0f      	ldr	r3, [pc, #60]	; (1d650 <sd_mmc_check+0x68>)
   1d612:	4798      	blx	r3
		return sd_mmc_err;
   1d614:	230f      	movs	r3, #15
   1d616:	18fb      	adds	r3, r7, r3
   1d618:	781b      	ldrb	r3, [r3, #0]
   1d61a:	e012      	b.n	1d642 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1d61c:	4b0d      	ldr	r3, [pc, #52]	; (1d654 <sd_mmc_check+0x6c>)
   1d61e:	4798      	blx	r3
   1d620:	1e03      	subs	r3, r0, #0
   1d622:	d007      	beq.n	1d634 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1d624:	4b0c      	ldr	r3, [pc, #48]	; (1d658 <sd_mmc_check+0x70>)
   1d626:	681b      	ldr	r3, [r3, #0]
   1d628:	2200      	movs	r2, #0
   1d62a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1d62c:	4b08      	ldr	r3, [pc, #32]	; (1d650 <sd_mmc_check+0x68>)
   1d62e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1d630:	2301      	movs	r3, #1
   1d632:	e006      	b.n	1d642 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1d634:	4b08      	ldr	r3, [pc, #32]	; (1d658 <sd_mmc_check+0x70>)
   1d636:	681b      	ldr	r3, [r3, #0]
   1d638:	2203      	movs	r2, #3
   1d63a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1d63c:	4b04      	ldr	r3, [pc, #16]	; (1d650 <sd_mmc_check+0x68>)
   1d63e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1d640:	2303      	movs	r3, #3
}
   1d642:	0018      	movs	r0, r3
   1d644:	46bd      	mov	sp, r7
   1d646:	b005      	add	sp, #20
   1d648:	bd90      	pop	{r4, r7, pc}
   1d64a:	46c0      	nop			; (mov r8, r8)
   1d64c:	0001d1cd 	.word	0x0001d1cd
   1d650:	0001d2c9 	.word	0x0001d2c9
   1d654:	0001d2ed 	.word	0x0001d2ed
   1d658:	200040bc 	.word	0x200040bc

0001d65c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1d65c:	b580      	push	{r7, lr}
   1d65e:	b082      	sub	sp, #8
   1d660:	af00      	add	r7, sp, #0
   1d662:	0002      	movs	r2, r0
   1d664:	1dfb      	adds	r3, r7, #7
   1d666:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1d668:	1dfb      	adds	r3, r7, #7
   1d66a:	781b      	ldrb	r3, [r3, #0]
   1d66c:	0018      	movs	r0, r3
   1d66e:	4b07      	ldr	r3, [pc, #28]	; (1d68c <sd_mmc_get_type+0x30>)
   1d670:	4798      	blx	r3
   1d672:	1e03      	subs	r3, r0, #0
   1d674:	d001      	beq.n	1d67a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1d676:	2300      	movs	r3, #0
   1d678:	e004      	b.n	1d684 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1d67a:	4b05      	ldr	r3, [pc, #20]	; (1d690 <sd_mmc_get_type+0x34>)
   1d67c:	4798      	blx	r3
	return sd_mmc_card->type;
   1d67e:	4b05      	ldr	r3, [pc, #20]	; (1d694 <sd_mmc_get_type+0x38>)
   1d680:	681b      	ldr	r3, [r3, #0]
   1d682:	7adb      	ldrb	r3, [r3, #11]
}
   1d684:	0018      	movs	r0, r3
   1d686:	46bd      	mov	sp, r7
   1d688:	b002      	add	sp, #8
   1d68a:	bd80      	pop	{r7, pc}
   1d68c:	0001d1cd 	.word	0x0001d1cd
   1d690:	0001d2c9 	.word	0x0001d2c9
   1d694:	200040bc 	.word	0x200040bc

0001d698 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1d698:	b580      	push	{r7, lr}
   1d69a:	b082      	sub	sp, #8
   1d69c:	af00      	add	r7, sp, #0
   1d69e:	0002      	movs	r2, r0
   1d6a0:	1dfb      	adds	r3, r7, #7
   1d6a2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1d6a4:	1dfb      	adds	r3, r7, #7
   1d6a6:	781b      	ldrb	r3, [r3, #0]
   1d6a8:	0018      	movs	r0, r3
   1d6aa:	4b07      	ldr	r3, [pc, #28]	; (1d6c8 <sd_mmc_get_capacity+0x30>)
   1d6ac:	4798      	blx	r3
   1d6ae:	1e03      	subs	r3, r0, #0
   1d6b0:	d001      	beq.n	1d6b6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1d6b2:	2300      	movs	r3, #0
   1d6b4:	e004      	b.n	1d6c0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1d6b6:	4b05      	ldr	r3, [pc, #20]	; (1d6cc <sd_mmc_get_capacity+0x34>)
   1d6b8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1d6ba:	4b05      	ldr	r3, [pc, #20]	; (1d6d0 <sd_mmc_get_capacity+0x38>)
   1d6bc:	681b      	ldr	r3, [r3, #0]
   1d6be:	685b      	ldr	r3, [r3, #4]
}
   1d6c0:	0018      	movs	r0, r3
   1d6c2:	46bd      	mov	sp, r7
   1d6c4:	b002      	add	sp, #8
   1d6c6:	bd80      	pop	{r7, pc}
   1d6c8:	0001d1cd 	.word	0x0001d1cd
   1d6cc:	0001d2c9 	.word	0x0001d2c9
   1d6d0:	200040bc 	.word	0x200040bc

0001d6d4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1d6d4:	b580      	push	{r7, lr}
   1d6d6:	b082      	sub	sp, #8
   1d6d8:	af00      	add	r7, sp, #0
   1d6da:	0002      	movs	r2, r0
   1d6dc:	1dfb      	adds	r3, r7, #7
   1d6de:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1d6e0:	2300      	movs	r3, #0
}
   1d6e2:	0018      	movs	r0, r3
   1d6e4:	46bd      	mov	sp, r7
   1d6e6:	b002      	add	sp, #8
   1d6e8:	bd80      	pop	{r7, pc}
	...

0001d6ec <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1d6ec:	b590      	push	{r4, r7, lr}
   1d6ee:	b089      	sub	sp, #36	; 0x24
   1d6f0:	af02      	add	r7, sp, #8
   1d6f2:	6039      	str	r1, [r7, #0]
   1d6f4:	0011      	movs	r1, r2
   1d6f6:	1dfb      	adds	r3, r7, #7
   1d6f8:	1c02      	adds	r2, r0, #0
   1d6fa:	701a      	strb	r2, [r3, #0]
   1d6fc:	1d3b      	adds	r3, r7, #4
   1d6fe:	1c0a      	adds	r2, r1, #0
   1d700:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1d702:	230f      	movs	r3, #15
   1d704:	18fc      	adds	r4, r7, r3
   1d706:	1dfb      	adds	r3, r7, #7
   1d708:	781b      	ldrb	r3, [r3, #0]
   1d70a:	0018      	movs	r0, r3
   1d70c:	4b29      	ldr	r3, [pc, #164]	; (1d7b4 <sd_mmc_init_read_blocks+0xc8>)
   1d70e:	4798      	blx	r3
   1d710:	0003      	movs	r3, r0
   1d712:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1d714:	230f      	movs	r3, #15
   1d716:	18fb      	adds	r3, r7, r3
   1d718:	781b      	ldrb	r3, [r3, #0]
   1d71a:	2b00      	cmp	r3, #0
   1d71c:	d003      	beq.n	1d726 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1d71e:	230f      	movs	r3, #15
   1d720:	18fb      	adds	r3, r7, r3
   1d722:	781b      	ldrb	r3, [r3, #0]
   1d724:	e041      	b.n	1d7aa <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1d726:	4b24      	ldr	r3, [pc, #144]	; (1d7b8 <sd_mmc_init_read_blocks+0xcc>)
   1d728:	4798      	blx	r3
   1d72a:	0003      	movs	r3, r0
   1d72c:	001a      	movs	r2, r3
   1d72e:	2301      	movs	r3, #1
   1d730:	4053      	eors	r3, r2
   1d732:	b2db      	uxtb	r3, r3
   1d734:	2b00      	cmp	r3, #0
   1d736:	d003      	beq.n	1d740 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1d738:	4b20      	ldr	r3, [pc, #128]	; (1d7bc <sd_mmc_init_read_blocks+0xd0>)
   1d73a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1d73c:	2305      	movs	r3, #5
   1d73e:	e034      	b.n	1d7aa <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1d740:	1d3b      	adds	r3, r7, #4
   1d742:	881b      	ldrh	r3, [r3, #0]
   1d744:	2b01      	cmp	r3, #1
   1d746:	d902      	bls.n	1d74e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1d748:	4b1d      	ldr	r3, [pc, #116]	; (1d7c0 <sd_mmc_init_read_blocks+0xd4>)
   1d74a:	617b      	str	r3, [r7, #20]
   1d74c:	e001      	b.n	1d752 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1d74e:	4b1d      	ldr	r3, [pc, #116]	; (1d7c4 <sd_mmc_init_read_blocks+0xd8>)
   1d750:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1d752:	4b1d      	ldr	r3, [pc, #116]	; (1d7c8 <sd_mmc_init_read_blocks+0xdc>)
   1d754:	681b      	ldr	r3, [r3, #0]
   1d756:	7adb      	ldrb	r3, [r3, #11]
   1d758:	001a      	movs	r2, r3
   1d75a:	2308      	movs	r3, #8
   1d75c:	4013      	ands	r3, r2
   1d75e:	d002      	beq.n	1d766 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1d760:	683b      	ldr	r3, [r7, #0]
   1d762:	613b      	str	r3, [r7, #16]
   1d764:	e002      	b.n	1d76c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1d766:	683b      	ldr	r3, [r7, #0]
   1d768:	025b      	lsls	r3, r3, #9
   1d76a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1d76c:	1d3b      	adds	r3, r7, #4
   1d76e:	881c      	ldrh	r4, [r3, #0]
   1d770:	2380      	movs	r3, #128	; 0x80
   1d772:	009a      	lsls	r2, r3, #2
   1d774:	6939      	ldr	r1, [r7, #16]
   1d776:	6978      	ldr	r0, [r7, #20]
   1d778:	2301      	movs	r3, #1
   1d77a:	9300      	str	r3, [sp, #0]
   1d77c:	0023      	movs	r3, r4
   1d77e:	4c13      	ldr	r4, [pc, #76]	; (1d7cc <sd_mmc_init_read_blocks+0xe0>)
   1d780:	47a0      	blx	r4
   1d782:	0003      	movs	r3, r0
   1d784:	001a      	movs	r2, r3
   1d786:	2301      	movs	r3, #1
   1d788:	4053      	eors	r3, r2
   1d78a:	b2db      	uxtb	r3, r3
   1d78c:	2b00      	cmp	r3, #0
   1d78e:	d003      	beq.n	1d798 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1d790:	4b0a      	ldr	r3, [pc, #40]	; (1d7bc <sd_mmc_init_read_blocks+0xd0>)
   1d792:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1d794:	2305      	movs	r3, #5
   1d796:	e008      	b.n	1d7aa <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1d798:	4b0d      	ldr	r3, [pc, #52]	; (1d7d0 <sd_mmc_init_read_blocks+0xe4>)
   1d79a:	1d3a      	adds	r2, r7, #4
   1d79c:	8812      	ldrh	r2, [r2, #0]
   1d79e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1d7a0:	4b0c      	ldr	r3, [pc, #48]	; (1d7d4 <sd_mmc_init_read_blocks+0xe8>)
   1d7a2:	1d3a      	adds	r2, r7, #4
   1d7a4:	8812      	ldrh	r2, [r2, #0]
   1d7a6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1d7a8:	2300      	movs	r3, #0
}
   1d7aa:	0018      	movs	r0, r3
   1d7ac:	46bd      	mov	sp, r7
   1d7ae:	b007      	add	sp, #28
   1d7b0:	bd90      	pop	{r4, r7, pc}
   1d7b2:	46c0      	nop			; (mov r8, r8)
   1d7b4:	0001d1cd 	.word	0x0001d1cd
   1d7b8:	0001d069 	.word	0x0001d069
   1d7bc:	0001d2c9 	.word	0x0001d2c9
   1d7c0:	00101112 	.word	0x00101112
   1d7c4:	00081111 	.word	0x00081111
   1d7c8:	200040bc 	.word	0x200040bc
   1d7cc:	0001e549 	.word	0x0001e549
   1d7d0:	200040c2 	.word	0x200040c2
   1d7d4:	200040c0 	.word	0x200040c0

0001d7d8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1d7d8:	b580      	push	{r7, lr}
   1d7da:	b082      	sub	sp, #8
   1d7dc:	af00      	add	r7, sp, #0
   1d7de:	6078      	str	r0, [r7, #4]
   1d7e0:	000a      	movs	r2, r1
   1d7e2:	1cbb      	adds	r3, r7, #2
   1d7e4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1d7e6:	1cbb      	adds	r3, r7, #2
   1d7e8:	881a      	ldrh	r2, [r3, #0]
   1d7ea:	687b      	ldr	r3, [r7, #4]
   1d7ec:	0011      	movs	r1, r2
   1d7ee:	0018      	movs	r0, r3
   1d7f0:	4b0d      	ldr	r3, [pc, #52]	; (1d828 <sd_mmc_start_read_blocks+0x50>)
   1d7f2:	4798      	blx	r3
   1d7f4:	0003      	movs	r3, r0
   1d7f6:	001a      	movs	r2, r3
   1d7f8:	2301      	movs	r3, #1
   1d7fa:	4053      	eors	r3, r2
   1d7fc:	b2db      	uxtb	r3, r3
   1d7fe:	2b00      	cmp	r3, #0
   1d800:	d004      	beq.n	1d80c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1d802:	4b0a      	ldr	r3, [pc, #40]	; (1d82c <sd_mmc_start_read_blocks+0x54>)
   1d804:	2200      	movs	r2, #0
   1d806:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1d808:	2305      	movs	r3, #5
   1d80a:	e008      	b.n	1d81e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1d80c:	4b07      	ldr	r3, [pc, #28]	; (1d82c <sd_mmc_start_read_blocks+0x54>)
   1d80e:	881a      	ldrh	r2, [r3, #0]
   1d810:	1cbb      	adds	r3, r7, #2
   1d812:	881b      	ldrh	r3, [r3, #0]
   1d814:	1ad3      	subs	r3, r2, r3
   1d816:	b29a      	uxth	r2, r3
   1d818:	4b04      	ldr	r3, [pc, #16]	; (1d82c <sd_mmc_start_read_blocks+0x54>)
   1d81a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1d81c:	2300      	movs	r3, #0
}
   1d81e:	0018      	movs	r0, r3
   1d820:	46bd      	mov	sp, r7
   1d822:	b002      	add	sp, #8
   1d824:	bd80      	pop	{r7, pc}
   1d826:	46c0      	nop			; (mov r8, r8)
   1d828:	0001e819 	.word	0x0001e819
   1d82c:	200040c2 	.word	0x200040c2

0001d830 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1d830:	b580      	push	{r7, lr}
   1d832:	b082      	sub	sp, #8
   1d834:	af00      	add	r7, sp, #0
   1d836:	0002      	movs	r2, r0
   1d838:	1dfb      	adds	r3, r7, #7
   1d83a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1d83c:	4b1c      	ldr	r3, [pc, #112]	; (1d8b0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1d83e:	4798      	blx	r3
   1d840:	0003      	movs	r3, r0
   1d842:	001a      	movs	r2, r3
   1d844:	2301      	movs	r3, #1
   1d846:	4053      	eors	r3, r2
   1d848:	b2db      	uxtb	r3, r3
   1d84a:	2b00      	cmp	r3, #0
   1d84c:	d001      	beq.n	1d852 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1d84e:	2305      	movs	r3, #5
   1d850:	e029      	b.n	1d8a6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1d852:	1dfb      	adds	r3, r7, #7
   1d854:	781b      	ldrb	r3, [r3, #0]
   1d856:	2b00      	cmp	r3, #0
   1d858:	d003      	beq.n	1d862 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1d85a:	4b16      	ldr	r3, [pc, #88]	; (1d8b4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1d85c:	2200      	movs	r2, #0
   1d85e:	801a      	strh	r2, [r3, #0]
   1d860:	e005      	b.n	1d86e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1d862:	4b14      	ldr	r3, [pc, #80]	; (1d8b4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1d864:	881b      	ldrh	r3, [r3, #0]
   1d866:	2b00      	cmp	r3, #0
   1d868:	d001      	beq.n	1d86e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1d86a:	2300      	movs	r3, #0
   1d86c:	e01b      	b.n	1d8a6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1d86e:	4b12      	ldr	r3, [pc, #72]	; (1d8b8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1d870:	881b      	ldrh	r3, [r3, #0]
   1d872:	2b01      	cmp	r3, #1
   1d874:	d103      	bne.n	1d87e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1d876:	4b11      	ldr	r3, [pc, #68]	; (1d8bc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1d878:	4798      	blx	r3
		return SD_MMC_OK;
   1d87a:	2300      	movs	r3, #0
   1d87c:	e013      	b.n	1d8a6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1d87e:	4b10      	ldr	r3, [pc, #64]	; (1d8c0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1d880:	2100      	movs	r1, #0
   1d882:	0018      	movs	r0, r3
   1d884:	4b0f      	ldr	r3, [pc, #60]	; (1d8c4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1d886:	4798      	blx	r3
   1d888:	0003      	movs	r3, r0
   1d88a:	001a      	movs	r2, r3
   1d88c:	2301      	movs	r3, #1
   1d88e:	4053      	eors	r3, r2
   1d890:	b2db      	uxtb	r3, r3
   1d892:	2b00      	cmp	r3, #0
   1d894:	d004      	beq.n	1d8a0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1d896:	4b0a      	ldr	r3, [pc, #40]	; (1d8c0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1d898:	2100      	movs	r1, #0
   1d89a:	0018      	movs	r0, r3
   1d89c:	4b09      	ldr	r3, [pc, #36]	; (1d8c4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1d89e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1d8a0:	4b06      	ldr	r3, [pc, #24]	; (1d8bc <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1d8a2:	4798      	blx	r3
	return SD_MMC_OK;
   1d8a4:	2300      	movs	r3, #0
}
   1d8a6:	0018      	movs	r0, r3
   1d8a8:	46bd      	mov	sp, r7
   1d8aa:	b002      	add	sp, #8
   1d8ac:	bd80      	pop	{r7, pc}
   1d8ae:	46c0      	nop			; (mov r8, r8)
   1d8b0:	0001e8bd 	.word	0x0001e8bd
   1d8b4:	200040c2 	.word	0x200040c2
   1d8b8:	200040c0 	.word	0x200040c0
   1d8bc:	0001d2c9 	.word	0x0001d2c9
   1d8c0:	0000310c 	.word	0x0000310c
   1d8c4:	0001e521 	.word	0x0001e521

0001d8c8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1d8c8:	b590      	push	{r4, r7, lr}
   1d8ca:	b089      	sub	sp, #36	; 0x24
   1d8cc:	af02      	add	r7, sp, #8
   1d8ce:	6039      	str	r1, [r7, #0]
   1d8d0:	0011      	movs	r1, r2
   1d8d2:	1dfb      	adds	r3, r7, #7
   1d8d4:	1c02      	adds	r2, r0, #0
   1d8d6:	701a      	strb	r2, [r3, #0]
   1d8d8:	1d3b      	adds	r3, r7, #4
   1d8da:	1c0a      	adds	r2, r1, #0
   1d8dc:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1d8de:	230f      	movs	r3, #15
   1d8e0:	18fc      	adds	r4, r7, r3
   1d8e2:	1dfb      	adds	r3, r7, #7
   1d8e4:	781b      	ldrb	r3, [r3, #0]
   1d8e6:	0018      	movs	r0, r3
   1d8e8:	4b28      	ldr	r3, [pc, #160]	; (1d98c <sd_mmc_init_write_blocks+0xc4>)
   1d8ea:	4798      	blx	r3
   1d8ec:	0003      	movs	r3, r0
   1d8ee:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1d8f0:	230f      	movs	r3, #15
   1d8f2:	18fb      	adds	r3, r7, r3
   1d8f4:	781b      	ldrb	r3, [r3, #0]
   1d8f6:	2b00      	cmp	r3, #0
   1d8f8:	d003      	beq.n	1d902 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1d8fa:	230f      	movs	r3, #15
   1d8fc:	18fb      	adds	r3, r7, r3
   1d8fe:	781b      	ldrb	r3, [r3, #0]
   1d900:	e03f      	b.n	1d982 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1d902:	1dfb      	adds	r3, r7, #7
   1d904:	781b      	ldrb	r3, [r3, #0]
   1d906:	0018      	movs	r0, r3
   1d908:	4b21      	ldr	r3, [pc, #132]	; (1d990 <sd_mmc_init_write_blocks+0xc8>)
   1d90a:	4798      	blx	r3
   1d90c:	1e03      	subs	r3, r0, #0
   1d90e:	d003      	beq.n	1d918 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1d910:	4b20      	ldr	r3, [pc, #128]	; (1d994 <sd_mmc_init_write_blocks+0xcc>)
   1d912:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1d914:	2307      	movs	r3, #7
   1d916:	e034      	b.n	1d982 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1d918:	1d3b      	adds	r3, r7, #4
   1d91a:	881b      	ldrh	r3, [r3, #0]
   1d91c:	2b01      	cmp	r3, #1
   1d91e:	d902      	bls.n	1d926 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1d920:	4b1d      	ldr	r3, [pc, #116]	; (1d998 <sd_mmc_init_write_blocks+0xd0>)
   1d922:	617b      	str	r3, [r7, #20]
   1d924:	e001      	b.n	1d92a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1d926:	4b1d      	ldr	r3, [pc, #116]	; (1d99c <sd_mmc_init_write_blocks+0xd4>)
   1d928:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1d92a:	4b1d      	ldr	r3, [pc, #116]	; (1d9a0 <sd_mmc_init_write_blocks+0xd8>)
   1d92c:	681b      	ldr	r3, [r3, #0]
   1d92e:	7adb      	ldrb	r3, [r3, #11]
   1d930:	001a      	movs	r2, r3
   1d932:	2308      	movs	r3, #8
   1d934:	4013      	ands	r3, r2
   1d936:	d002      	beq.n	1d93e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1d938:	683b      	ldr	r3, [r7, #0]
   1d93a:	613b      	str	r3, [r7, #16]
   1d93c:	e002      	b.n	1d944 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1d93e:	683b      	ldr	r3, [r7, #0]
   1d940:	025b      	lsls	r3, r3, #9
   1d942:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1d944:	1d3b      	adds	r3, r7, #4
   1d946:	881c      	ldrh	r4, [r3, #0]
   1d948:	2380      	movs	r3, #128	; 0x80
   1d94a:	009a      	lsls	r2, r3, #2
   1d94c:	6939      	ldr	r1, [r7, #16]
   1d94e:	6978      	ldr	r0, [r7, #20]
   1d950:	2301      	movs	r3, #1
   1d952:	9300      	str	r3, [sp, #0]
   1d954:	0023      	movs	r3, r4
   1d956:	4c13      	ldr	r4, [pc, #76]	; (1d9a4 <sd_mmc_init_write_blocks+0xdc>)
   1d958:	47a0      	blx	r4
   1d95a:	0003      	movs	r3, r0
   1d95c:	001a      	movs	r2, r3
   1d95e:	2301      	movs	r3, #1
   1d960:	4053      	eors	r3, r2
   1d962:	b2db      	uxtb	r3, r3
   1d964:	2b00      	cmp	r3, #0
   1d966:	d003      	beq.n	1d970 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1d968:	4b0a      	ldr	r3, [pc, #40]	; (1d994 <sd_mmc_init_write_blocks+0xcc>)
   1d96a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1d96c:	2305      	movs	r3, #5
   1d96e:	e008      	b.n	1d982 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1d970:	4b0d      	ldr	r3, [pc, #52]	; (1d9a8 <sd_mmc_init_write_blocks+0xe0>)
   1d972:	1d3a      	adds	r2, r7, #4
   1d974:	8812      	ldrh	r2, [r2, #0]
   1d976:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1d978:	4b0c      	ldr	r3, [pc, #48]	; (1d9ac <sd_mmc_init_write_blocks+0xe4>)
   1d97a:	1d3a      	adds	r2, r7, #4
   1d97c:	8812      	ldrh	r2, [r2, #0]
   1d97e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1d980:	2300      	movs	r3, #0
}
   1d982:	0018      	movs	r0, r3
   1d984:	46bd      	mov	sp, r7
   1d986:	b007      	add	sp, #28
   1d988:	bd90      	pop	{r4, r7, pc}
   1d98a:	46c0      	nop			; (mov r8, r8)
   1d98c:	0001d1cd 	.word	0x0001d1cd
   1d990:	0001d6d5 	.word	0x0001d6d5
   1d994:	0001d2c9 	.word	0x0001d2c9
   1d998:	00109119 	.word	0x00109119
   1d99c:	00089118 	.word	0x00089118
   1d9a0:	200040bc 	.word	0x200040bc
   1d9a4:	0001e549 	.word	0x0001e549
   1d9a8:	200040c2 	.word	0x200040c2
   1d9ac:	200040c0 	.word	0x200040c0

0001d9b0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1d9b0:	b580      	push	{r7, lr}
   1d9b2:	b082      	sub	sp, #8
   1d9b4:	af00      	add	r7, sp, #0
   1d9b6:	6078      	str	r0, [r7, #4]
   1d9b8:	000a      	movs	r2, r1
   1d9ba:	1cbb      	adds	r3, r7, #2
   1d9bc:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1d9be:	1cbb      	adds	r3, r7, #2
   1d9c0:	881a      	ldrh	r2, [r3, #0]
   1d9c2:	687b      	ldr	r3, [r7, #4]
   1d9c4:	0011      	movs	r1, r2
   1d9c6:	0018      	movs	r0, r3
   1d9c8:	4b0d      	ldr	r3, [pc, #52]	; (1da00 <sd_mmc_start_write_blocks+0x50>)
   1d9ca:	4798      	blx	r3
   1d9cc:	0003      	movs	r3, r0
   1d9ce:	001a      	movs	r2, r3
   1d9d0:	2301      	movs	r3, #1
   1d9d2:	4053      	eors	r3, r2
   1d9d4:	b2db      	uxtb	r3, r3
   1d9d6:	2b00      	cmp	r3, #0
   1d9d8:	d004      	beq.n	1d9e4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1d9da:	4b0a      	ldr	r3, [pc, #40]	; (1da04 <sd_mmc_start_write_blocks+0x54>)
   1d9dc:	2200      	movs	r2, #0
   1d9de:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1d9e0:	2305      	movs	r3, #5
   1d9e2:	e008      	b.n	1d9f6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1d9e4:	4b07      	ldr	r3, [pc, #28]	; (1da04 <sd_mmc_start_write_blocks+0x54>)
   1d9e6:	881a      	ldrh	r2, [r3, #0]
   1d9e8:	1cbb      	adds	r3, r7, #2
   1d9ea:	881b      	ldrh	r3, [r3, #0]
   1d9ec:	1ad3      	subs	r3, r2, r3
   1d9ee:	b29a      	uxth	r2, r3
   1d9f0:	4b04      	ldr	r3, [pc, #16]	; (1da04 <sd_mmc_start_write_blocks+0x54>)
   1d9f2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1d9f4:	2300      	movs	r3, #0
}
   1d9f6:	0018      	movs	r0, r3
   1d9f8:	46bd      	mov	sp, r7
   1d9fa:	b002      	add	sp, #8
   1d9fc:	bd80      	pop	{r7, pc}
   1d9fe:	46c0      	nop			; (mov r8, r8)
   1da00:	0001e8c9 	.word	0x0001e8c9
   1da04:	200040c2 	.word	0x200040c2

0001da08 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1da08:	b580      	push	{r7, lr}
   1da0a:	b082      	sub	sp, #8
   1da0c:	af00      	add	r7, sp, #0
   1da0e:	0002      	movs	r2, r0
   1da10:	1dfb      	adds	r3, r7, #7
   1da12:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1da14:	4b13      	ldr	r3, [pc, #76]	; (1da64 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1da16:	4798      	blx	r3
   1da18:	0003      	movs	r3, r0
   1da1a:	001a      	movs	r2, r3
   1da1c:	2301      	movs	r3, #1
   1da1e:	4053      	eors	r3, r2
   1da20:	b2db      	uxtb	r3, r3
   1da22:	2b00      	cmp	r3, #0
   1da24:	d001      	beq.n	1da2a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1da26:	2305      	movs	r3, #5
   1da28:	e018      	b.n	1da5c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1da2a:	1dfb      	adds	r3, r7, #7
   1da2c:	781b      	ldrb	r3, [r3, #0]
   1da2e:	2b00      	cmp	r3, #0
   1da30:	d003      	beq.n	1da3a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1da32:	4b0d      	ldr	r3, [pc, #52]	; (1da68 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1da34:	2200      	movs	r2, #0
   1da36:	801a      	strh	r2, [r3, #0]
   1da38:	e005      	b.n	1da46 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1da3a:	4b0b      	ldr	r3, [pc, #44]	; (1da68 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1da3c:	881b      	ldrh	r3, [r3, #0]
   1da3e:	2b00      	cmp	r3, #0
   1da40:	d001      	beq.n	1da46 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1da42:	2300      	movs	r3, #0
   1da44:	e00a      	b.n	1da5c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1da46:	4b09      	ldr	r3, [pc, #36]	; (1da6c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1da48:	881b      	ldrh	r3, [r3, #0]
   1da4a:	2b01      	cmp	r3, #1
   1da4c:	d103      	bne.n	1da56 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1da4e:	4b08      	ldr	r3, [pc, #32]	; (1da70 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1da50:	4798      	blx	r3
		return SD_MMC_OK;
   1da52:	2300      	movs	r3, #0
   1da54:	e002      	b.n	1da5c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1da56:	4b06      	ldr	r3, [pc, #24]	; (1da70 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1da58:	4798      	blx	r3
	return SD_MMC_OK;
   1da5a:	2300      	movs	r3, #0
}
   1da5c:	0018      	movs	r0, r3
   1da5e:	46bd      	mov	sp, r7
   1da60:	b002      	add	sp, #8
   1da62:	bd80      	pop	{r7, pc}
   1da64:	0001e989 	.word	0x0001e989
   1da68:	200040c2 	.word	0x200040c2
   1da6c:	200040c0 	.word	0x200040c0
   1da70:	0001d2c9 	.word	0x0001d2c9

0001da74 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1da74:	b580      	push	{r7, lr}
   1da76:	b082      	sub	sp, #8
   1da78:	af00      	add	r7, sp, #0
   1da7a:	0002      	movs	r2, r0
   1da7c:	1dfb      	adds	r3, r7, #7
   1da7e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1da80:	1dfb      	adds	r3, r7, #7
   1da82:	781b      	ldrb	r3, [r3, #0]
   1da84:	0018      	movs	r0, r3
   1da86:	4b16      	ldr	r3, [pc, #88]	; (1dae0 <sd_mmc_test_unit_ready+0x6c>)
   1da88:	4798      	blx	r3
   1da8a:	0003      	movs	r3, r0
   1da8c:	2b01      	cmp	r3, #1
   1da8e:	d019      	beq.n	1dac4 <sd_mmc_test_unit_ready+0x50>
   1da90:	2b02      	cmp	r3, #2
   1da92:	d019      	beq.n	1dac8 <sd_mmc_test_unit_ready+0x54>
   1da94:	2b00      	cmp	r3, #0
   1da96:	d11e      	bne.n	1dad6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1da98:	1dfb      	adds	r3, r7, #7
   1da9a:	781b      	ldrb	r3, [r3, #0]
   1da9c:	4a11      	ldr	r2, [pc, #68]	; (1dae4 <sd_mmc_test_unit_ready+0x70>)
   1da9e:	5cd3      	ldrb	r3, [r2, r3]
   1daa0:	2b00      	cmp	r3, #0
   1daa2:	d001      	beq.n	1daa8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1daa4:	2302      	movs	r3, #2
   1daa6:	e017      	b.n	1dad8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1daa8:	1dfb      	adds	r3, r7, #7
   1daaa:	781b      	ldrb	r3, [r3, #0]
   1daac:	0018      	movs	r0, r3
   1daae:	4b0e      	ldr	r3, [pc, #56]	; (1dae8 <sd_mmc_test_unit_ready+0x74>)
   1dab0:	4798      	blx	r3
   1dab2:	0003      	movs	r3, r0
   1dab4:	001a      	movs	r2, r3
   1dab6:	2303      	movs	r3, #3
   1dab8:	4013      	ands	r3, r2
   1daba:	d001      	beq.n	1dac0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1dabc:	2300      	movs	r3, #0
   1dabe:	e00b      	b.n	1dad8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1dac0:	2302      	movs	r3, #2
   1dac2:	e009      	b.n	1dad8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1dac4:	2303      	movs	r3, #3
   1dac6:	e007      	b.n	1dad8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1dac8:	1dfb      	adds	r3, r7, #7
   1daca:	781b      	ldrb	r3, [r3, #0]
   1dacc:	4a05      	ldr	r2, [pc, #20]	; (1dae4 <sd_mmc_test_unit_ready+0x70>)
   1dace:	2100      	movs	r1, #0
   1dad0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1dad2:	2302      	movs	r3, #2
   1dad4:	e000      	b.n	1dad8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1dad6:	2301      	movs	r3, #1
	}
}
   1dad8:	0018      	movs	r0, r3
   1dada:	46bd      	mov	sp, r7
   1dadc:	b002      	add	sp, #8
   1dade:	bd80      	pop	{r7, pc}
   1dae0:	0001d5e9 	.word	0x0001d5e9
   1dae4:	200040c4 	.word	0x200040c4
   1dae8:	0001d65d 	.word	0x0001d65d

0001daec <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1daec:	b580      	push	{r7, lr}
   1daee:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1daf0:	2000      	movs	r0, #0
   1daf2:	4b03      	ldr	r3, [pc, #12]	; (1db00 <sd_mmc_test_unit_ready_0+0x14>)
   1daf4:	4798      	blx	r3
   1daf6:	0003      	movs	r3, r0
}
   1daf8:	0018      	movs	r0, r3
   1dafa:	46bd      	mov	sp, r7
   1dafc:	bd80      	pop	{r7, pc}
   1dafe:	46c0      	nop			; (mov r8, r8)
   1db00:	0001da75 	.word	0x0001da75

0001db04 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1db04:	b580      	push	{r7, lr}
   1db06:	b082      	sub	sp, #8
   1db08:	af00      	add	r7, sp, #0
   1db0a:	0002      	movs	r2, r0
   1db0c:	6039      	str	r1, [r7, #0]
   1db0e:	1dfb      	adds	r3, r7, #7
   1db10:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1db12:	1dfb      	adds	r3, r7, #7
   1db14:	781b      	ldrb	r3, [r3, #0]
   1db16:	0018      	movs	r0, r3
   1db18:	4b08      	ldr	r3, [pc, #32]	; (1db3c <sd_mmc_read_capacity+0x38>)
   1db1a:	4798      	blx	r3
   1db1c:	0003      	movs	r3, r0
   1db1e:	005b      	lsls	r3, r3, #1
   1db20:	1e5a      	subs	r2, r3, #1
   1db22:	683b      	ldr	r3, [r7, #0]
   1db24:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1db26:	1dfb      	adds	r3, r7, #7
   1db28:	781b      	ldrb	r3, [r3, #0]
   1db2a:	0018      	movs	r0, r3
   1db2c:	4b04      	ldr	r3, [pc, #16]	; (1db40 <sd_mmc_read_capacity+0x3c>)
   1db2e:	4798      	blx	r3
   1db30:	0003      	movs	r3, r0
}
   1db32:	0018      	movs	r0, r3
   1db34:	46bd      	mov	sp, r7
   1db36:	b002      	add	sp, #8
   1db38:	bd80      	pop	{r7, pc}
   1db3a:	46c0      	nop			; (mov r8, r8)
   1db3c:	0001d699 	.word	0x0001d699
   1db40:	0001da75 	.word	0x0001da75

0001db44 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1db44:	b580      	push	{r7, lr}
   1db46:	b082      	sub	sp, #8
   1db48:	af00      	add	r7, sp, #0
   1db4a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1db4c:	687b      	ldr	r3, [r7, #4]
   1db4e:	0019      	movs	r1, r3
   1db50:	2000      	movs	r0, #0
   1db52:	4b03      	ldr	r3, [pc, #12]	; (1db60 <sd_mmc_read_capacity_0+0x1c>)
   1db54:	4798      	blx	r3
   1db56:	0003      	movs	r3, r0
}
   1db58:	0018      	movs	r0, r3
   1db5a:	46bd      	mov	sp, r7
   1db5c:	b002      	add	sp, #8
   1db5e:	bd80      	pop	{r7, pc}
   1db60:	0001db05 	.word	0x0001db05

0001db64 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1db64:	b580      	push	{r7, lr}
   1db66:	b082      	sub	sp, #8
   1db68:	af00      	add	r7, sp, #0
   1db6a:	0002      	movs	r2, r0
   1db6c:	1dfb      	adds	r3, r7, #7
   1db6e:	701a      	strb	r2, [r3, #0]
   1db70:	1dbb      	adds	r3, r7, #6
   1db72:	1c0a      	adds	r2, r1, #0
   1db74:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1db76:	1dfb      	adds	r3, r7, #7
   1db78:	781b      	ldrb	r3, [r3, #0]
   1db7a:	4a04      	ldr	r2, [pc, #16]	; (1db8c <sd_mmc_unload+0x28>)
   1db7c:	1db9      	adds	r1, r7, #6
   1db7e:	7809      	ldrb	r1, [r1, #0]
   1db80:	54d1      	strb	r1, [r2, r3]
	return true;
   1db82:	2301      	movs	r3, #1
}
   1db84:	0018      	movs	r0, r3
   1db86:	46bd      	mov	sp, r7
   1db88:	b002      	add	sp, #8
   1db8a:	bd80      	pop	{r7, pc}
   1db8c:	200040c4 	.word	0x200040c4

0001db90 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1db90:	b580      	push	{r7, lr}
   1db92:	b082      	sub	sp, #8
   1db94:	af00      	add	r7, sp, #0
   1db96:	0002      	movs	r2, r0
   1db98:	1dfb      	adds	r3, r7, #7
   1db9a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1db9c:	1dfb      	adds	r3, r7, #7
   1db9e:	781b      	ldrb	r3, [r3, #0]
   1dba0:	0019      	movs	r1, r3
   1dba2:	2000      	movs	r0, #0
   1dba4:	4b03      	ldr	r3, [pc, #12]	; (1dbb4 <sd_mmc_unload_0+0x24>)
   1dba6:	4798      	blx	r3
   1dba8:	0003      	movs	r3, r0
}
   1dbaa:	0018      	movs	r0, r3
   1dbac:	46bd      	mov	sp, r7
   1dbae:	b002      	add	sp, #8
   1dbb0:	bd80      	pop	{r7, pc}
   1dbb2:	46c0      	nop			; (mov r8, r8)
   1dbb4:	0001db65 	.word	0x0001db65

0001dbb8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1dbb8:	b580      	push	{r7, lr}
   1dbba:	b082      	sub	sp, #8
   1dbbc:	af00      	add	r7, sp, #0
   1dbbe:	0002      	movs	r2, r0
   1dbc0:	1dfb      	adds	r3, r7, #7
   1dbc2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1dbc4:	1dfb      	adds	r3, r7, #7
   1dbc6:	781b      	ldrb	r3, [r3, #0]
   1dbc8:	0018      	movs	r0, r3
   1dbca:	4b03      	ldr	r3, [pc, #12]	; (1dbd8 <sd_mmc_wr_protect+0x20>)
   1dbcc:	4798      	blx	r3
   1dbce:	0003      	movs	r3, r0
}
   1dbd0:	0018      	movs	r0, r3
   1dbd2:	46bd      	mov	sp, r7
   1dbd4:	b002      	add	sp, #8
   1dbd6:	bd80      	pop	{r7, pc}
   1dbd8:	0001d6d5 	.word	0x0001d6d5

0001dbdc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1dbdc:	b580      	push	{r7, lr}
   1dbde:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1dbe0:	2000      	movs	r0, #0
   1dbe2:	4b03      	ldr	r3, [pc, #12]	; (1dbf0 <sd_mmc_wr_protect_0+0x14>)
   1dbe4:	4798      	blx	r3
   1dbe6:	0003      	movs	r3, r0
}
   1dbe8:	0018      	movs	r0, r3
   1dbea:	46bd      	mov	sp, r7
   1dbec:	bd80      	pop	{r7, pc}
   1dbee:	46c0      	nop			; (mov r8, r8)
   1dbf0:	0001dbb9 	.word	0x0001dbb9

0001dbf4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1dbf4:	b580      	push	{r7, lr}
   1dbf6:	b082      	sub	sp, #8
   1dbf8:	af00      	add	r7, sp, #0
   1dbfa:	0002      	movs	r2, r0
   1dbfc:	1dfb      	adds	r3, r7, #7
   1dbfe:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1dc00:	2301      	movs	r3, #1
}
   1dc02:	0018      	movs	r0, r3
   1dc04:	46bd      	mov	sp, r7
   1dc06:	b002      	add	sp, #8
   1dc08:	bd80      	pop	{r7, pc}
	...

0001dc0c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1dc0c:	b580      	push	{r7, lr}
   1dc0e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   1dc10:	2000      	movs	r0, #0
   1dc12:	4b03      	ldr	r3, [pc, #12]	; (1dc20 <sd_mmc_removal_0+0x14>)
   1dc14:	4798      	blx	r3
   1dc16:	0003      	movs	r3, r0
}
   1dc18:	0018      	movs	r0, r3
   1dc1a:	46bd      	mov	sp, r7
   1dc1c:	bd80      	pop	{r7, pc}
   1dc1e:	46c0      	nop			; (mov r8, r8)
   1dc20:	0001dbf5 	.word	0x0001dbf5

0001dc24 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   1dc24:	b580      	push	{r7, lr}
   1dc26:	b084      	sub	sp, #16
   1dc28:	af00      	add	r7, sp, #0
   1dc2a:	60b9      	str	r1, [r7, #8]
   1dc2c:	607a      	str	r2, [r7, #4]
   1dc2e:	230f      	movs	r3, #15
   1dc30:	18fb      	adds	r3, r7, r3
   1dc32:	1c02      	adds	r2, r0, #0
   1dc34:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   1dc36:	68b9      	ldr	r1, [r7, #8]
   1dc38:	230f      	movs	r3, #15
   1dc3a:	18fb      	adds	r3, r7, r3
   1dc3c:	781b      	ldrb	r3, [r3, #0]
   1dc3e:	2201      	movs	r2, #1
   1dc40:	0018      	movs	r0, r3
   1dc42:	4b10      	ldr	r3, [pc, #64]	; (1dc84 <sd_mmc_mem_2_ram+0x60>)
   1dc44:	4798      	blx	r3
   1dc46:	1e03      	subs	r3, r0, #0
   1dc48:	d005      	beq.n	1dc56 <sd_mmc_mem_2_ram+0x32>
   1dc4a:	2b02      	cmp	r3, #2
   1dc4c:	d101      	bne.n	1dc52 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1dc4e:	2302      	movs	r3, #2
   1dc50:	e013      	b.n	1dc7a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   1dc52:	2301      	movs	r3, #1
   1dc54:	e011      	b.n	1dc7a <sd_mmc_mem_2_ram+0x56>
		break;
   1dc56:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   1dc58:	687b      	ldr	r3, [r7, #4]
   1dc5a:	2101      	movs	r1, #1
   1dc5c:	0018      	movs	r0, r3
   1dc5e:	4b0a      	ldr	r3, [pc, #40]	; (1dc88 <sd_mmc_mem_2_ram+0x64>)
   1dc60:	4798      	blx	r3
   1dc62:	1e03      	subs	r3, r0, #0
   1dc64:	d001      	beq.n	1dc6a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   1dc66:	2301      	movs	r3, #1
   1dc68:	e007      	b.n	1dc7a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   1dc6a:	2000      	movs	r0, #0
   1dc6c:	4b07      	ldr	r3, [pc, #28]	; (1dc8c <sd_mmc_mem_2_ram+0x68>)
   1dc6e:	4798      	blx	r3
   1dc70:	1e03      	subs	r3, r0, #0
   1dc72:	d001      	beq.n	1dc78 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   1dc74:	2301      	movs	r3, #1
   1dc76:	e000      	b.n	1dc7a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   1dc78:	2300      	movs	r3, #0
}
   1dc7a:	0018      	movs	r0, r3
   1dc7c:	46bd      	mov	sp, r7
   1dc7e:	b004      	add	sp, #16
   1dc80:	bd80      	pop	{r7, pc}
   1dc82:	46c0      	nop			; (mov r8, r8)
   1dc84:	0001d6ed 	.word	0x0001d6ed
   1dc88:	0001d7d9 	.word	0x0001d7d9
   1dc8c:	0001d831 	.word	0x0001d831

0001dc90 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   1dc90:	b580      	push	{r7, lr}
   1dc92:	b082      	sub	sp, #8
   1dc94:	af00      	add	r7, sp, #0
   1dc96:	6078      	str	r0, [r7, #4]
   1dc98:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   1dc9a:	683a      	ldr	r2, [r7, #0]
   1dc9c:	687b      	ldr	r3, [r7, #4]
   1dc9e:	0019      	movs	r1, r3
   1dca0:	2000      	movs	r0, #0
   1dca2:	4b03      	ldr	r3, [pc, #12]	; (1dcb0 <sd_mmc_mem_2_ram_0+0x20>)
   1dca4:	4798      	blx	r3
   1dca6:	0003      	movs	r3, r0
}
   1dca8:	0018      	movs	r0, r3
   1dcaa:	46bd      	mov	sp, r7
   1dcac:	b002      	add	sp, #8
   1dcae:	bd80      	pop	{r7, pc}
   1dcb0:	0001dc25 	.word	0x0001dc25

0001dcb4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   1dcb4:	b580      	push	{r7, lr}
   1dcb6:	b084      	sub	sp, #16
   1dcb8:	af00      	add	r7, sp, #0
   1dcba:	60b9      	str	r1, [r7, #8]
   1dcbc:	607a      	str	r2, [r7, #4]
   1dcbe:	230f      	movs	r3, #15
   1dcc0:	18fb      	adds	r3, r7, r3
   1dcc2:	1c02      	adds	r2, r0, #0
   1dcc4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   1dcc6:	68b9      	ldr	r1, [r7, #8]
   1dcc8:	230f      	movs	r3, #15
   1dcca:	18fb      	adds	r3, r7, r3
   1dccc:	781b      	ldrb	r3, [r3, #0]
   1dcce:	2201      	movs	r2, #1
   1dcd0:	0018      	movs	r0, r3
   1dcd2:	4b10      	ldr	r3, [pc, #64]	; (1dd14 <sd_mmc_ram_2_mem+0x60>)
   1dcd4:	4798      	blx	r3
   1dcd6:	1e03      	subs	r3, r0, #0
   1dcd8:	d005      	beq.n	1dce6 <sd_mmc_ram_2_mem+0x32>
   1dcda:	2b02      	cmp	r3, #2
   1dcdc:	d101      	bne.n	1dce2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   1dcde:	2302      	movs	r3, #2
   1dce0:	e013      	b.n	1dd0a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   1dce2:	2301      	movs	r3, #1
   1dce4:	e011      	b.n	1dd0a <sd_mmc_ram_2_mem+0x56>
		break;
   1dce6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   1dce8:	687b      	ldr	r3, [r7, #4]
   1dcea:	2101      	movs	r1, #1
   1dcec:	0018      	movs	r0, r3
   1dcee:	4b0a      	ldr	r3, [pc, #40]	; (1dd18 <sd_mmc_ram_2_mem+0x64>)
   1dcf0:	4798      	blx	r3
   1dcf2:	1e03      	subs	r3, r0, #0
   1dcf4:	d001      	beq.n	1dcfa <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   1dcf6:	2301      	movs	r3, #1
   1dcf8:	e007      	b.n	1dd0a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   1dcfa:	2000      	movs	r0, #0
   1dcfc:	4b07      	ldr	r3, [pc, #28]	; (1dd1c <sd_mmc_ram_2_mem+0x68>)
   1dcfe:	4798      	blx	r3
   1dd00:	1e03      	subs	r3, r0, #0
   1dd02:	d001      	beq.n	1dd08 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   1dd04:	2301      	movs	r3, #1
   1dd06:	e000      	b.n	1dd0a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   1dd08:	2300      	movs	r3, #0
}
   1dd0a:	0018      	movs	r0, r3
   1dd0c:	46bd      	mov	sp, r7
   1dd0e:	b004      	add	sp, #16
   1dd10:	bd80      	pop	{r7, pc}
   1dd12:	46c0      	nop			; (mov r8, r8)
   1dd14:	0001d8c9 	.word	0x0001d8c9
   1dd18:	0001d9b1 	.word	0x0001d9b1
   1dd1c:	0001da09 	.word	0x0001da09

0001dd20 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   1dd20:	b580      	push	{r7, lr}
   1dd22:	b082      	sub	sp, #8
   1dd24:	af00      	add	r7, sp, #0
   1dd26:	6078      	str	r0, [r7, #4]
   1dd28:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   1dd2a:	683a      	ldr	r2, [r7, #0]
   1dd2c:	687b      	ldr	r3, [r7, #4]
   1dd2e:	0019      	movs	r1, r3
   1dd30:	2000      	movs	r0, #0
   1dd32:	4b03      	ldr	r3, [pc, #12]	; (1dd40 <sd_mmc_ram_2_mem_0+0x20>)
   1dd34:	4798      	blx	r3
   1dd36:	0003      	movs	r3, r0
}
   1dd38:	0018      	movs	r0, r3
   1dd3a:	46bd      	mov	sp, r7
   1dd3c:	b002      	add	sp, #8
   1dd3e:	bd80      	pop	{r7, pc}
   1dd40:	0001dcb5 	.word	0x0001dcb5

0001dd44 <system_pinmux_get_group_from_gpio_pin>:
{
   1dd44:	b580      	push	{r7, lr}
   1dd46:	b084      	sub	sp, #16
   1dd48:	af00      	add	r7, sp, #0
   1dd4a:	0002      	movs	r2, r0
   1dd4c:	1dfb      	adds	r3, r7, #7
   1dd4e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1dd50:	230f      	movs	r3, #15
   1dd52:	18fb      	adds	r3, r7, r3
   1dd54:	1dfa      	adds	r2, r7, #7
   1dd56:	7812      	ldrb	r2, [r2, #0]
   1dd58:	09d2      	lsrs	r2, r2, #7
   1dd5a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1dd5c:	230e      	movs	r3, #14
   1dd5e:	18fb      	adds	r3, r7, r3
   1dd60:	1dfa      	adds	r2, r7, #7
   1dd62:	7812      	ldrb	r2, [r2, #0]
   1dd64:	0952      	lsrs	r2, r2, #5
   1dd66:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1dd68:	4b0d      	ldr	r3, [pc, #52]	; (1dda0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1dd6a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1dd6c:	230f      	movs	r3, #15
   1dd6e:	18fb      	adds	r3, r7, r3
   1dd70:	781b      	ldrb	r3, [r3, #0]
   1dd72:	2b00      	cmp	r3, #0
   1dd74:	d10f      	bne.n	1dd96 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1dd76:	230f      	movs	r3, #15
   1dd78:	18fb      	adds	r3, r7, r3
   1dd7a:	781b      	ldrb	r3, [r3, #0]
   1dd7c:	009b      	lsls	r3, r3, #2
   1dd7e:	2210      	movs	r2, #16
   1dd80:	4694      	mov	ip, r2
   1dd82:	44bc      	add	ip, r7
   1dd84:	4463      	add	r3, ip
   1dd86:	3b08      	subs	r3, #8
   1dd88:	681a      	ldr	r2, [r3, #0]
   1dd8a:	230e      	movs	r3, #14
   1dd8c:	18fb      	adds	r3, r7, r3
   1dd8e:	781b      	ldrb	r3, [r3, #0]
   1dd90:	01db      	lsls	r3, r3, #7
   1dd92:	18d3      	adds	r3, r2, r3
   1dd94:	e000      	b.n	1dd98 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1dd96:	2300      	movs	r3, #0
}
   1dd98:	0018      	movs	r0, r3
   1dd9a:	46bd      	mov	sp, r7
   1dd9c:	b004      	add	sp, #16
   1dd9e:	bd80      	pop	{r7, pc}
   1dda0:	41004400 	.word	0x41004400

0001dda4 <system_interrupt_enable>:
{
   1dda4:	b580      	push	{r7, lr}
   1dda6:	b082      	sub	sp, #8
   1dda8:	af00      	add	r7, sp, #0
   1ddaa:	0002      	movs	r2, r0
   1ddac:	1dfb      	adds	r3, r7, #7
   1ddae:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1ddb0:	4b06      	ldr	r3, [pc, #24]	; (1ddcc <system_interrupt_enable+0x28>)
   1ddb2:	1dfa      	adds	r2, r7, #7
   1ddb4:	7812      	ldrb	r2, [r2, #0]
   1ddb6:	0011      	movs	r1, r2
   1ddb8:	221f      	movs	r2, #31
   1ddba:	400a      	ands	r2, r1
   1ddbc:	2101      	movs	r1, #1
   1ddbe:	4091      	lsls	r1, r2
   1ddc0:	000a      	movs	r2, r1
   1ddc2:	601a      	str	r2, [r3, #0]
}
   1ddc4:	46c0      	nop			; (mov r8, r8)
   1ddc6:	46bd      	mov	sp, r7
   1ddc8:	b002      	add	sp, #8
   1ddca:	bd80      	pop	{r7, pc}
   1ddcc:	e000e100 	.word	0xe000e100

0001ddd0 <port_get_group_from_gpio_pin>:
{
   1ddd0:	b580      	push	{r7, lr}
   1ddd2:	b082      	sub	sp, #8
   1ddd4:	af00      	add	r7, sp, #0
   1ddd6:	0002      	movs	r2, r0
   1ddd8:	1dfb      	adds	r3, r7, #7
   1ddda:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1dddc:	1dfb      	adds	r3, r7, #7
   1ddde:	781b      	ldrb	r3, [r3, #0]
   1dde0:	0018      	movs	r0, r3
   1dde2:	4b03      	ldr	r3, [pc, #12]	; (1ddf0 <port_get_group_from_gpio_pin+0x20>)
   1dde4:	4798      	blx	r3
   1dde6:	0003      	movs	r3, r0
}
   1dde8:	0018      	movs	r0, r3
   1ddea:	46bd      	mov	sp, r7
   1ddec:	b002      	add	sp, #8
   1ddee:	bd80      	pop	{r7, pc}
   1ddf0:	0001dd45 	.word	0x0001dd45

0001ddf4 <port_get_config_defaults>:
{
   1ddf4:	b580      	push	{r7, lr}
   1ddf6:	b082      	sub	sp, #8
   1ddf8:	af00      	add	r7, sp, #0
   1ddfa:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1ddfc:	687b      	ldr	r3, [r7, #4]
   1ddfe:	2200      	movs	r2, #0
   1de00:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1de02:	687b      	ldr	r3, [r7, #4]
   1de04:	2201      	movs	r2, #1
   1de06:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1de08:	687b      	ldr	r3, [r7, #4]
   1de0a:	2200      	movs	r2, #0
   1de0c:	709a      	strb	r2, [r3, #2]
}
   1de0e:	46c0      	nop			; (mov r8, r8)
   1de10:	46bd      	mov	sp, r7
   1de12:	b002      	add	sp, #8
   1de14:	bd80      	pop	{r7, pc}
	...

0001de18 <port_pin_set_output_level>:
{
   1de18:	b580      	push	{r7, lr}
   1de1a:	b084      	sub	sp, #16
   1de1c:	af00      	add	r7, sp, #0
   1de1e:	0002      	movs	r2, r0
   1de20:	1dfb      	adds	r3, r7, #7
   1de22:	701a      	strb	r2, [r3, #0]
   1de24:	1dbb      	adds	r3, r7, #6
   1de26:	1c0a      	adds	r2, r1, #0
   1de28:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1de2a:	1dfb      	adds	r3, r7, #7
   1de2c:	781b      	ldrb	r3, [r3, #0]
   1de2e:	0018      	movs	r0, r3
   1de30:	4b0d      	ldr	r3, [pc, #52]	; (1de68 <port_pin_set_output_level+0x50>)
   1de32:	4798      	blx	r3
   1de34:	0003      	movs	r3, r0
   1de36:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1de38:	1dfb      	adds	r3, r7, #7
   1de3a:	781b      	ldrb	r3, [r3, #0]
   1de3c:	221f      	movs	r2, #31
   1de3e:	4013      	ands	r3, r2
   1de40:	2201      	movs	r2, #1
   1de42:	409a      	lsls	r2, r3
   1de44:	0013      	movs	r3, r2
   1de46:	60bb      	str	r3, [r7, #8]
	if (level) {
   1de48:	1dbb      	adds	r3, r7, #6
   1de4a:	781b      	ldrb	r3, [r3, #0]
   1de4c:	2b00      	cmp	r3, #0
   1de4e:	d003      	beq.n	1de58 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1de50:	68fb      	ldr	r3, [r7, #12]
   1de52:	68ba      	ldr	r2, [r7, #8]
   1de54:	619a      	str	r2, [r3, #24]
}
   1de56:	e002      	b.n	1de5e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1de58:	68fb      	ldr	r3, [r7, #12]
   1de5a:	68ba      	ldr	r2, [r7, #8]
   1de5c:	615a      	str	r2, [r3, #20]
}
   1de5e:	46c0      	nop			; (mov r8, r8)
   1de60:	46bd      	mov	sp, r7
   1de62:	b004      	add	sp, #16
   1de64:	bd80      	pop	{r7, pc}
   1de66:	46c0      	nop			; (mov r8, r8)
   1de68:	0001ddd1 	.word	0x0001ddd1

0001de6c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   1de6c:	b580      	push	{r7, lr}
   1de6e:	b084      	sub	sp, #16
   1de70:	af00      	add	r7, sp, #0
   1de72:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1de74:	687b      	ldr	r3, [r7, #4]
   1de76:	681b      	ldr	r3, [r3, #0]
   1de78:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   1de7a:	68fb      	ldr	r3, [r7, #12]
   1de7c:	69db      	ldr	r3, [r3, #28]
   1de7e:	1e5a      	subs	r2, r3, #1
   1de80:	4193      	sbcs	r3, r2
   1de82:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   1de84:	0018      	movs	r0, r3
   1de86:	46bd      	mov	sp, r7
   1de88:	b004      	add	sp, #16
   1de8a:	bd80      	pop	{r7, pc}

0001de8c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   1de8c:	b580      	push	{r7, lr}
   1de8e:	b082      	sub	sp, #8
   1de90:	af00      	add	r7, sp, #0
   1de92:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   1de94:	687b      	ldr	r3, [r7, #4]
   1de96:	2201      	movs	r2, #1
   1de98:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1de9a:	687b      	ldr	r3, [r7, #4]
   1de9c:	2200      	movs	r2, #0
   1de9e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1dea0:	687b      	ldr	r3, [r7, #4]
   1dea2:	2200      	movs	r2, #0
   1dea4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1dea6:	687b      	ldr	r3, [r7, #4]
   1dea8:	22c0      	movs	r2, #192	; 0xc0
   1deaa:	0392      	lsls	r2, r2, #14
   1deac:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1deae:	687b      	ldr	r3, [r7, #4]
   1deb0:	2200      	movs	r2, #0
   1deb2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1deb4:	687b      	ldr	r3, [r7, #4]
   1deb6:	2200      	movs	r2, #0
   1deb8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1deba:	687b      	ldr	r3, [r7, #4]
   1debc:	2201      	movs	r2, #1
   1debe:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   1dec0:	687b      	ldr	r3, [r7, #4]
   1dec2:	2201      	movs	r2, #1
   1dec4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   1dec6:	687b      	ldr	r3, [r7, #4]
   1dec8:	2200      	movs	r2, #0
   1deca:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   1decc:	687b      	ldr	r3, [r7, #4]
   1dece:	2224      	movs	r2, #36	; 0x24
   1ded0:	2100      	movs	r1, #0
   1ded2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1ded4:	687b      	ldr	r3, [r7, #4]
   1ded6:	3318      	adds	r3, #24
   1ded8:	220c      	movs	r2, #12
   1deda:	2100      	movs	r1, #0
   1dedc:	0018      	movs	r0, r3
   1dede:	4b0a      	ldr	r3, [pc, #40]	; (1df08 <spi_get_config_defaults+0x7c>)
   1dee0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   1dee2:	687b      	ldr	r3, [r7, #4]
   1dee4:	4a09      	ldr	r2, [pc, #36]	; (1df0c <spi_get_config_defaults+0x80>)
   1dee6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1dee8:	687b      	ldr	r3, [r7, #4]
   1deea:	2200      	movs	r2, #0
   1deec:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1deee:	687b      	ldr	r3, [r7, #4]
   1def0:	2200      	movs	r2, #0
   1def2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1def4:	687b      	ldr	r3, [r7, #4]
   1def6:	2200      	movs	r2, #0
   1def8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1defa:	687b      	ldr	r3, [r7, #4]
   1defc:	2200      	movs	r2, #0
   1defe:	635a      	str	r2, [r3, #52]	; 0x34

};
   1df00:	46c0      	nop			; (mov r8, r8)
   1df02:	46bd      	mov	sp, r7
   1df04:	b002      	add	sp, #8
   1df06:	bd80      	pop	{r7, pc}
   1df08:	0003319f 	.word	0x0003319f
   1df0c:	000186a0 	.word	0x000186a0

0001df10 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   1df10:	b580      	push	{r7, lr}
   1df12:	b082      	sub	sp, #8
   1df14:	af00      	add	r7, sp, #0
   1df16:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   1df18:	687b      	ldr	r3, [r7, #4]
   1df1a:	220a      	movs	r2, #10
   1df1c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1df1e:	687b      	ldr	r3, [r7, #4]
   1df20:	2200      	movs	r2, #0
   1df22:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1df24:	687b      	ldr	r3, [r7, #4]
   1df26:	2200      	movs	r2, #0
   1df28:	709a      	strb	r2, [r3, #2]
}
   1df2a:	46c0      	nop			; (mov r8, r8)
   1df2c:	46bd      	mov	sp, r7
   1df2e:	b002      	add	sp, #8
   1df30:	bd80      	pop	{r7, pc}
	...

0001df34 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   1df34:	b580      	push	{r7, lr}
   1df36:	b084      	sub	sp, #16
   1df38:	af00      	add	r7, sp, #0
   1df3a:	6078      	str	r0, [r7, #4]
   1df3c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   1df3e:	683b      	ldr	r3, [r7, #0]
   1df40:	781a      	ldrb	r2, [r3, #0]
   1df42:	687b      	ldr	r3, [r7, #4]
   1df44:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1df46:	683b      	ldr	r3, [r7, #0]
   1df48:	785a      	ldrb	r2, [r3, #1]
   1df4a:	687b      	ldr	r3, [r7, #4]
   1df4c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1df4e:	683b      	ldr	r3, [r7, #0]
   1df50:	789a      	ldrb	r2, [r3, #2]
   1df52:	687b      	ldr	r3, [r7, #4]
   1df54:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1df56:	230c      	movs	r3, #12
   1df58:	18fb      	adds	r3, r7, r3
   1df5a:	0018      	movs	r0, r3
   1df5c:	4b0b      	ldr	r3, [pc, #44]	; (1df8c <spi_attach_slave+0x58>)
   1df5e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1df60:	230c      	movs	r3, #12
   1df62:	18fb      	adds	r3, r7, r3
   1df64:	2201      	movs	r2, #1
   1df66:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1df68:	687b      	ldr	r3, [r7, #4]
   1df6a:	781b      	ldrb	r3, [r3, #0]
   1df6c:	220c      	movs	r2, #12
   1df6e:	18ba      	adds	r2, r7, r2
   1df70:	0011      	movs	r1, r2
   1df72:	0018      	movs	r0, r3
   1df74:	4b06      	ldr	r3, [pc, #24]	; (1df90 <spi_attach_slave+0x5c>)
   1df76:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1df78:	687b      	ldr	r3, [r7, #4]
   1df7a:	781b      	ldrb	r3, [r3, #0]
   1df7c:	2101      	movs	r1, #1
   1df7e:	0018      	movs	r0, r3
   1df80:	4b04      	ldr	r3, [pc, #16]	; (1df94 <spi_attach_slave+0x60>)
   1df82:	4798      	blx	r3
}
   1df84:	46c0      	nop			; (mov r8, r8)
   1df86:	46bd      	mov	sp, r7
   1df88:	b004      	add	sp, #16
   1df8a:	bd80      	pop	{r7, pc}
   1df8c:	0001ddf5 	.word	0x0001ddf5
   1df90:	0002533d 	.word	0x0002533d
   1df94:	0001de19 	.word	0x0001de19

0001df98 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   1df98:	b580      	push	{r7, lr}
   1df9a:	b084      	sub	sp, #16
   1df9c:	af00      	add	r7, sp, #0
   1df9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1dfa0:	687b      	ldr	r3, [r7, #4]
   1dfa2:	681b      	ldr	r3, [r3, #0]
   1dfa4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1dfa6:	687b      	ldr	r3, [r7, #4]
   1dfa8:	681b      	ldr	r3, [r3, #0]
   1dfaa:	0018      	movs	r0, r3
   1dfac:	4b0b      	ldr	r3, [pc, #44]	; (1dfdc <spi_enable+0x44>)
   1dfae:	4798      	blx	r3
   1dfb0:	0003      	movs	r3, r0
   1dfb2:	0018      	movs	r0, r3
   1dfb4:	4b0a      	ldr	r3, [pc, #40]	; (1dfe0 <spi_enable+0x48>)
   1dfb6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1dfb8:	46c0      	nop			; (mov r8, r8)
   1dfba:	687b      	ldr	r3, [r7, #4]
   1dfbc:	0018      	movs	r0, r3
   1dfbe:	4b09      	ldr	r3, [pc, #36]	; (1dfe4 <spi_enable+0x4c>)
   1dfc0:	4798      	blx	r3
   1dfc2:	1e03      	subs	r3, r0, #0
   1dfc4:	d1f9      	bne.n	1dfba <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1dfc6:	68fb      	ldr	r3, [r7, #12]
   1dfc8:	681b      	ldr	r3, [r3, #0]
   1dfca:	2202      	movs	r2, #2
   1dfcc:	431a      	orrs	r2, r3
   1dfce:	68fb      	ldr	r3, [r7, #12]
   1dfd0:	601a      	str	r2, [r3, #0]
}
   1dfd2:	46c0      	nop			; (mov r8, r8)
   1dfd4:	46bd      	mov	sp, r7
   1dfd6:	b004      	add	sp, #16
   1dfd8:	bd80      	pop	{r7, pc}
   1dfda:	46c0      	nop			; (mov r8, r8)
   1dfdc:	0002600d 	.word	0x0002600d
   1dfe0:	0001dda5 	.word	0x0001dda5
   1dfe4:	0001de6d 	.word	0x0001de6d

0001dfe8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   1dfe8:	b580      	push	{r7, lr}
   1dfea:	b084      	sub	sp, #16
   1dfec:	af00      	add	r7, sp, #0
   1dfee:	6078      	str	r0, [r7, #4]
   1dff0:	000a      	movs	r2, r1
   1dff2:	1cfb      	adds	r3, r7, #3
   1dff4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   1dff6:	230f      	movs	r3, #15
   1dff8:	18fb      	adds	r3, r7, r3
   1dffa:	2200      	movs	r2, #0
   1dffc:	701a      	strb	r2, [r3, #0]
	while (size--) {
   1dffe:	e038      	b.n	1e072 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   1e000:	687b      	ldr	r3, [r7, #4]
   1e002:	1c5a      	adds	r2, r3, #1
   1e004:	607a      	str	r2, [r7, #4]
   1e006:	220e      	movs	r2, #14
   1e008:	18ba      	adds	r2, r7, r2
   1e00a:	781b      	ldrb	r3, [r3, #0]
   1e00c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1e00e:	230d      	movs	r3, #13
   1e010:	18fb      	adds	r3, r7, r3
   1e012:	2200      	movs	r2, #0
   1e014:	701a      	strb	r2, [r3, #0]
   1e016:	e027      	b.n	1e068 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   1e018:	230f      	movs	r3, #15
   1e01a:	18fa      	adds	r2, r7, r3
   1e01c:	230f      	movs	r3, #15
   1e01e:	18fb      	adds	r3, r7, r3
   1e020:	781b      	ldrb	r3, [r3, #0]
   1e022:	18db      	adds	r3, r3, r3
   1e024:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   1e026:	230e      	movs	r3, #14
   1e028:	18fa      	adds	r2, r7, r3
   1e02a:	230f      	movs	r3, #15
   1e02c:	18fb      	adds	r3, r7, r3
   1e02e:	7812      	ldrb	r2, [r2, #0]
   1e030:	781b      	ldrb	r3, [r3, #0]
   1e032:	4053      	eors	r3, r2
   1e034:	b2db      	uxtb	r3, r3
   1e036:	b25b      	sxtb	r3, r3
   1e038:	2b00      	cmp	r3, #0
   1e03a:	da07      	bge.n	1e04c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   1e03c:	230f      	movs	r3, #15
   1e03e:	18fb      	adds	r3, r7, r3
   1e040:	220f      	movs	r2, #15
   1e042:	18ba      	adds	r2, r7, r2
   1e044:	7812      	ldrb	r2, [r2, #0]
   1e046:	2109      	movs	r1, #9
   1e048:	404a      	eors	r2, r1
   1e04a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   1e04c:	230e      	movs	r3, #14
   1e04e:	18fa      	adds	r2, r7, r3
   1e050:	230e      	movs	r3, #14
   1e052:	18fb      	adds	r3, r7, r3
   1e054:	781b      	ldrb	r3, [r3, #0]
   1e056:	18db      	adds	r3, r3, r3
   1e058:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   1e05a:	230d      	movs	r3, #13
   1e05c:	18fb      	adds	r3, r7, r3
   1e05e:	781a      	ldrb	r2, [r3, #0]
   1e060:	230d      	movs	r3, #13
   1e062:	18fb      	adds	r3, r7, r3
   1e064:	3201      	adds	r2, #1
   1e066:	701a      	strb	r2, [r3, #0]
   1e068:	230d      	movs	r3, #13
   1e06a:	18fb      	adds	r3, r7, r3
   1e06c:	781b      	ldrb	r3, [r3, #0]
   1e06e:	2b07      	cmp	r3, #7
   1e070:	d9d2      	bls.n	1e018 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   1e072:	1cfb      	adds	r3, r7, #3
   1e074:	781b      	ldrb	r3, [r3, #0]
   1e076:	1cfa      	adds	r2, r7, #3
   1e078:	1e59      	subs	r1, r3, #1
   1e07a:	7011      	strb	r1, [r2, #0]
   1e07c:	2b00      	cmp	r3, #0
   1e07e:	d1bf      	bne.n	1e000 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   1e080:	230f      	movs	r3, #15
   1e082:	18fb      	adds	r3, r7, r3
   1e084:	781b      	ldrb	r3, [r3, #0]
   1e086:	005b      	lsls	r3, r3, #1
   1e088:	b25b      	sxtb	r3, r3
   1e08a:	2201      	movs	r2, #1
   1e08c:	4313      	orrs	r3, r2
   1e08e:	b25a      	sxtb	r2, r3
   1e090:	230f      	movs	r3, #15
   1e092:	18fb      	adds	r3, r7, r3
   1e094:	701a      	strb	r2, [r3, #0]
	return crc;
   1e096:	230f      	movs	r3, #15
   1e098:	18fb      	adds	r3, r7, r3
   1e09a:	781b      	ldrb	r3, [r3, #0]
}
   1e09c:	0018      	movs	r0, r3
   1e09e:	46bd      	mov	sp, r7
   1e0a0:	b004      	add	sp, #16
   1e0a2:	bd80      	pop	{r7, pc}

0001e0a4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   1e0a4:	b590      	push	{r4, r7, lr}
   1e0a6:	b083      	sub	sp, #12
   1e0a8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   1e0aa:	1c7b      	adds	r3, r7, #1
   1e0ac:	22ff      	movs	r2, #255	; 0xff
   1e0ae:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   1e0b0:	1cbb      	adds	r3, r7, #2
   1e0b2:	22ff      	movs	r2, #255	; 0xff
   1e0b4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e0b6:	1cbb      	adds	r3, r7, #2
   1e0b8:	881b      	ldrh	r3, [r3, #0]
   1e0ba:	1c79      	adds	r1, r7, #1
   1e0bc:	4811      	ldr	r0, [pc, #68]	; (1e104 <sd_mmc_spi_wait_busy+0x60>)
   1e0be:	2201      	movs	r2, #1
   1e0c0:	4c11      	ldr	r4, [pc, #68]	; (1e108 <sd_mmc_spi_wait_busy+0x64>)
   1e0c2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   1e0c4:	4b11      	ldr	r3, [pc, #68]	; (1e10c <sd_mmc_spi_wait_busy+0x68>)
   1e0c6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e0c8:	1cbb      	adds	r3, r7, #2
   1e0ca:	881b      	ldrh	r3, [r3, #0]
   1e0cc:	1c79      	adds	r1, r7, #1
   1e0ce:	480d      	ldr	r0, [pc, #52]	; (1e104 <sd_mmc_spi_wait_busy+0x60>)
   1e0d0:	2201      	movs	r2, #1
   1e0d2:	4c0d      	ldr	r4, [pc, #52]	; (1e108 <sd_mmc_spi_wait_busy+0x64>)
   1e0d4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   1e0d6:	1cbb      	adds	r3, r7, #2
   1e0d8:	881b      	ldrh	r3, [r3, #0]
   1e0da:	1c79      	adds	r1, r7, #1
   1e0dc:	4809      	ldr	r0, [pc, #36]	; (1e104 <sd_mmc_spi_wait_busy+0x60>)
   1e0de:	2201      	movs	r2, #1
   1e0e0:	4c09      	ldr	r4, [pc, #36]	; (1e108 <sd_mmc_spi_wait_busy+0x64>)
   1e0e2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   1e0e4:	687b      	ldr	r3, [r7, #4]
   1e0e6:	1e5a      	subs	r2, r3, #1
   1e0e8:	607a      	str	r2, [r7, #4]
   1e0ea:	2b00      	cmp	r3, #0
   1e0ec:	d101      	bne.n	1e0f2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   1e0ee:	2300      	movs	r3, #0
   1e0f0:	e004      	b.n	1e0fc <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   1e0f2:	1c7b      	adds	r3, r7, #1
   1e0f4:	781b      	ldrb	r3, [r3, #0]
   1e0f6:	2bff      	cmp	r3, #255	; 0xff
   1e0f8:	d1ed      	bne.n	1e0d6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   1e0fa:	2301      	movs	r3, #1
}
   1e0fc:	0018      	movs	r0, r3
   1e0fe:	46bd      	mov	sp, r7
   1e100:	b003      	add	sp, #12
   1e102:	bd90      	pop	{r4, r7, pc}
   1e104:	200040c8 	.word	0x200040c8
   1e108:	0002694d 	.word	0x0002694d
   1e10c:	00030d40 	.word	0x00030d40

0001e110 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   1e110:	b590      	push	{r4, r7, lr}
   1e112:	b083      	sub	sp, #12
   1e114:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   1e116:	1cbb      	adds	r3, r7, #2
   1e118:	22ff      	movs	r2, #255	; 0xff
   1e11a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   1e11c:	1c7b      	adds	r3, r7, #1
   1e11e:	2200      	movs	r2, #0
   1e120:	701a      	strb	r2, [r3, #0]
	i = 500000;
   1e122:	4b18      	ldr	r3, [pc, #96]	; (1e184 <sd_mmc_spi_start_read_block+0x74>)
   1e124:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   1e126:	687b      	ldr	r3, [r7, #4]
   1e128:	1e5a      	subs	r2, r3, #1
   1e12a:	607a      	str	r2, [r7, #4]
   1e12c:	2b00      	cmp	r3, #0
   1e12e:	d104      	bne.n	1e13a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   1e130:	4b15      	ldr	r3, [pc, #84]	; (1e188 <sd_mmc_spi_start_read_block+0x78>)
   1e132:	2204      	movs	r2, #4
   1e134:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   1e136:	2300      	movs	r3, #0
   1e138:	e020      	b.n	1e17c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   1e13a:	1cbb      	adds	r3, r7, #2
   1e13c:	881b      	ldrh	r3, [r3, #0]
   1e13e:	1c79      	adds	r1, r7, #1
   1e140:	4812      	ldr	r0, [pc, #72]	; (1e18c <sd_mmc_spi_start_read_block+0x7c>)
   1e142:	2201      	movs	r2, #1
   1e144:	4c12      	ldr	r4, [pc, #72]	; (1e190 <sd_mmc_spi_start_read_block+0x80>)
   1e146:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   1e148:	1c7b      	adds	r3, r7, #1
   1e14a:	781b      	ldrb	r3, [r3, #0]
   1e14c:	001a      	movs	r2, r3
   1e14e:	23f0      	movs	r3, #240	; 0xf0
   1e150:	4013      	ands	r3, r2
   1e152:	d10e      	bne.n	1e172 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   1e154:	1c7b      	adds	r3, r7, #1
   1e156:	781b      	ldrb	r3, [r3, #0]
   1e158:	001a      	movs	r2, r3
   1e15a:	2307      	movs	r3, #7
   1e15c:	4013      	ands	r3, r2
   1e15e:	d003      	beq.n	1e168 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   1e160:	4b09      	ldr	r3, [pc, #36]	; (1e188 <sd_mmc_spi_start_read_block+0x78>)
   1e162:	2207      	movs	r2, #7
   1e164:	701a      	strb	r2, [r3, #0]
   1e166:	e002      	b.n	1e16e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   1e168:	4b07      	ldr	r3, [pc, #28]	; (1e188 <sd_mmc_spi_start_read_block+0x78>)
   1e16a:	220b      	movs	r2, #11
   1e16c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   1e16e:	2300      	movs	r3, #0
   1e170:	e004      	b.n	1e17c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   1e172:	1c7b      	adds	r3, r7, #1
   1e174:	781b      	ldrb	r3, [r3, #0]
   1e176:	2bfe      	cmp	r3, #254	; 0xfe
   1e178:	d1d5      	bne.n	1e126 <sd_mmc_spi_start_read_block+0x16>

	return true;
   1e17a:	2301      	movs	r3, #1
}
   1e17c:	0018      	movs	r0, r3
   1e17e:	46bd      	mov	sp, r7
   1e180:	b003      	add	sp, #12
   1e182:	bd90      	pop	{r4, r7, pc}
   1e184:	0007a120 	.word	0x0007a120
   1e188:	2000410b 	.word	0x2000410b
   1e18c:	200040c8 	.word	0x200040c8
   1e190:	0002694d 	.word	0x0002694d

0001e194 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   1e194:	b590      	push	{r4, r7, lr}
   1e196:	b083      	sub	sp, #12
   1e198:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   1e19a:	1dbb      	adds	r3, r7, #6
   1e19c:	22ff      	movs	r2, #255	; 0xff
   1e19e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   1e1a0:	1dbb      	adds	r3, r7, #6
   1e1a2:	881b      	ldrh	r3, [r3, #0]
   1e1a4:	1d39      	adds	r1, r7, #4
   1e1a6:	4804      	ldr	r0, [pc, #16]	; (1e1b8 <sd_mmc_spi_stop_read_block+0x24>)
   1e1a8:	2202      	movs	r2, #2
   1e1aa:	4c04      	ldr	r4, [pc, #16]	; (1e1bc <sd_mmc_spi_stop_read_block+0x28>)
   1e1ac:	47a0      	blx	r4
			dummy);
}
   1e1ae:	46c0      	nop			; (mov r8, r8)
   1e1b0:	46bd      	mov	sp, r7
   1e1b2:	b003      	add	sp, #12
   1e1b4:	bd90      	pop	{r4, r7, pc}
   1e1b6:	46c0      	nop			; (mov r8, r8)
   1e1b8:	200040c8 	.word	0x200040c8
   1e1bc:	0002694d 	.word	0x0002694d

0001e1c0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   1e1c0:	b580      	push	{r7, lr}
   1e1c2:	b082      	sub	sp, #8
   1e1c4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   1e1c6:	1dfb      	adds	r3, r7, #7
   1e1c8:	22ff      	movs	r2, #255	; 0xff
   1e1ca:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   1e1cc:	1df9      	adds	r1, r7, #7
   1e1ce:	4b0d      	ldr	r3, [pc, #52]	; (1e204 <sd_mmc_spi_start_write_block+0x44>)
   1e1d0:	2201      	movs	r2, #1
   1e1d2:	0018      	movs	r0, r3
   1e1d4:	4b0c      	ldr	r3, [pc, #48]	; (1e208 <sd_mmc_spi_start_write_block+0x48>)
   1e1d6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   1e1d8:	4b0c      	ldr	r3, [pc, #48]	; (1e20c <sd_mmc_spi_start_write_block+0x4c>)
   1e1da:	881b      	ldrh	r3, [r3, #0]
   1e1dc:	2b01      	cmp	r3, #1
   1e1de:	d103      	bne.n	1e1e8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   1e1e0:	1dbb      	adds	r3, r7, #6
   1e1e2:	22fe      	movs	r2, #254	; 0xfe
   1e1e4:	701a      	strb	r2, [r3, #0]
   1e1e6:	e002      	b.n	1e1ee <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   1e1e8:	1dbb      	adds	r3, r7, #6
   1e1ea:	22fc      	movs	r2, #252	; 0xfc
   1e1ec:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   1e1ee:	1db9      	adds	r1, r7, #6
   1e1f0:	4b04      	ldr	r3, [pc, #16]	; (1e204 <sd_mmc_spi_start_write_block+0x44>)
   1e1f2:	2201      	movs	r2, #1
   1e1f4:	0018      	movs	r0, r3
   1e1f6:	4b04      	ldr	r3, [pc, #16]	; (1e208 <sd_mmc_spi_start_write_block+0x48>)
   1e1f8:	4798      	blx	r3
}
   1e1fa:	46c0      	nop			; (mov r8, r8)
   1e1fc:	46bd      	mov	sp, r7
   1e1fe:	b002      	add	sp, #8
   1e200:	bd80      	pop	{r7, pc}
   1e202:	46c0      	nop			; (mov r8, r8)
   1e204:	200040c8 	.word	0x200040c8
   1e208:	00026b71 	.word	0x00026b71
   1e20c:	20004116 	.word	0x20004116

0001e210 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   1e210:	b590      	push	{r4, r7, lr}
   1e212:	b083      	sub	sp, #12
   1e214:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   1e216:	1dbb      	adds	r3, r7, #6
   1e218:	22ff      	movs	r2, #255	; 0xff
   1e21a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   1e21c:	1cbb      	adds	r3, r7, #2
   1e21e:	2201      	movs	r2, #1
   1e220:	4252      	negs	r2, r2
   1e222:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   1e224:	1cb9      	adds	r1, r7, #2
   1e226:	4b1b      	ldr	r3, [pc, #108]	; (1e294 <sd_mmc_spi_stop_write_block+0x84>)
   1e228:	2202      	movs	r2, #2
   1e22a:	0018      	movs	r0, r3
   1e22c:	4b1a      	ldr	r3, [pc, #104]	; (1e298 <sd_mmc_spi_stop_write_block+0x88>)
   1e22e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   1e230:	1dbb      	adds	r3, r7, #6
   1e232:	881b      	ldrh	r3, [r3, #0]
   1e234:	1d79      	adds	r1, r7, #5
   1e236:	4817      	ldr	r0, [pc, #92]	; (1e294 <sd_mmc_spi_stop_write_block+0x84>)
   1e238:	2201      	movs	r2, #1
   1e23a:	4c18      	ldr	r4, [pc, #96]	; (1e29c <sd_mmc_spi_stop_write_block+0x8c>)
   1e23c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   1e23e:	1d7b      	adds	r3, r7, #5
   1e240:	781b      	ldrb	r3, [r3, #0]
   1e242:	001a      	movs	r2, r3
   1e244:	2310      	movs	r3, #16
   1e246:	4013      	ands	r3, r2
   1e248:	d105      	bne.n	1e256 <sd_mmc_spi_stop_write_block+0x46>
   1e24a:	1d7b      	adds	r3, r7, #5
   1e24c:	781b      	ldrb	r3, [r3, #0]
   1e24e:	001a      	movs	r2, r3
   1e250:	2301      	movs	r3, #1
   1e252:	4013      	ands	r3, r2
   1e254:	d104      	bne.n	1e260 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1e256:	4b12      	ldr	r3, [pc, #72]	; (1e2a0 <sd_mmc_spi_stop_write_block+0x90>)
   1e258:	2201      	movs	r2, #1
   1e25a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   1e25c:	2300      	movs	r3, #0
   1e25e:	e014      	b.n	1e28a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   1e260:	1d7b      	adds	r3, r7, #5
   1e262:	781b      	ldrb	r3, [r3, #0]
   1e264:	001a      	movs	r2, r3
   1e266:	231e      	movs	r3, #30
   1e268:	4013      	ands	r3, r2
   1e26a:	2b04      	cmp	r3, #4
   1e26c:	d00b      	beq.n	1e286 <sd_mmc_spi_stop_write_block+0x76>
   1e26e:	2b0a      	cmp	r3, #10
   1e270:	d104      	bne.n	1e27c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   1e272:	4b0b      	ldr	r3, [pc, #44]	; (1e2a0 <sd_mmc_spi_stop_write_block+0x90>)
   1e274:	2208      	movs	r2, #8
   1e276:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1e278:	2300      	movs	r3, #0
   1e27a:	e006      	b.n	1e28a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   1e27c:	4b08      	ldr	r3, [pc, #32]	; (1e2a0 <sd_mmc_spi_stop_write_block+0x90>)
   1e27e:	220a      	movs	r2, #10
   1e280:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   1e282:	2300      	movs	r3, #0
   1e284:	e001      	b.n	1e28a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   1e286:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1e288:	2301      	movs	r3, #1
}
   1e28a:	0018      	movs	r0, r3
   1e28c:	46bd      	mov	sp, r7
   1e28e:	b003      	add	sp, #12
   1e290:	bd90      	pop	{r4, r7, pc}
   1e292:	46c0      	nop			; (mov r8, r8)
   1e294:	200040c8 	.word	0x200040c8
   1e298:	00026b71 	.word	0x00026b71
   1e29c:	0002694d 	.word	0x0002694d
   1e2a0:	2000410b 	.word	0x2000410b

0001e2a4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   1e2a4:	b590      	push	{r4, r7, lr}
   1e2a6:	b083      	sub	sp, #12
   1e2a8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   1e2aa:	4b1d      	ldr	r3, [pc, #116]	; (1e320 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1e2ac:	881b      	ldrh	r3, [r3, #0]
   1e2ae:	2b01      	cmp	r3, #1
   1e2b0:	d101      	bne.n	1e2b6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   1e2b2:	2301      	movs	r3, #1
   1e2b4:	e030      	b.n	1e318 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   1e2b6:	4b1a      	ldr	r3, [pc, #104]	; (1e320 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   1e2b8:	881b      	ldrh	r3, [r3, #0]
   1e2ba:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   1e2bc:	4b19      	ldr	r3, [pc, #100]	; (1e324 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   1e2be:	681a      	ldr	r2, [r3, #0]
   1e2c0:	4b19      	ldr	r3, [pc, #100]	; (1e328 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   1e2c2:	881b      	ldrh	r3, [r3, #0]
   1e2c4:	0019      	movs	r1, r3
   1e2c6:	4b19      	ldr	r3, [pc, #100]	; (1e32c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   1e2c8:	0010      	movs	r0, r2
   1e2ca:	4798      	blx	r3
   1e2cc:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   1e2ce:	429c      	cmp	r4, r3
   1e2d0:	d901      	bls.n	1e2d6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   1e2d2:	2301      	movs	r3, #1
   1e2d4:	e020      	b.n	1e318 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   1e2d6:	1dfb      	adds	r3, r7, #7
   1e2d8:	22ff      	movs	r2, #255	; 0xff
   1e2da:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1e2dc:	1df9      	adds	r1, r7, #7
   1e2de:	4b14      	ldr	r3, [pc, #80]	; (1e330 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1e2e0:	2201      	movs	r2, #1
   1e2e2:	0018      	movs	r0, r3
   1e2e4:	4b13      	ldr	r3, [pc, #76]	; (1e334 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1e2e6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   1e2e8:	1dfb      	adds	r3, r7, #7
   1e2ea:	22fd      	movs	r2, #253	; 0xfd
   1e2ec:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   1e2ee:	1df9      	adds	r1, r7, #7
   1e2f0:	4b0f      	ldr	r3, [pc, #60]	; (1e330 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   1e2f2:	2201      	movs	r2, #1
   1e2f4:	0018      	movs	r0, r3
   1e2f6:	4b0f      	ldr	r3, [pc, #60]	; (1e334 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   1e2f8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   1e2fa:	4b0f      	ldr	r3, [pc, #60]	; (1e338 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   1e2fc:	4798      	blx	r3
   1e2fe:	0003      	movs	r3, r0
   1e300:	001a      	movs	r2, r3
   1e302:	2301      	movs	r3, #1
   1e304:	4053      	eors	r3, r2
   1e306:	b2db      	uxtb	r3, r3
   1e308:	2b00      	cmp	r3, #0
   1e30a:	d004      	beq.n	1e316 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1e30c:	4b0b      	ldr	r3, [pc, #44]	; (1e33c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   1e30e:	2205      	movs	r2, #5
   1e310:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   1e312:	2300      	movs	r3, #0
   1e314:	e000      	b.n	1e318 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   1e316:	2301      	movs	r3, #1
}
   1e318:	0018      	movs	r0, r3
   1e31a:	46bd      	mov	sp, r7
   1e31c:	b003      	add	sp, #12
   1e31e:	bd90      	pop	{r4, r7, pc}
   1e320:	20004116 	.word	0x20004116
   1e324:	20004110 	.word	0x20004110
   1e328:	20004114 	.word	0x20004114
   1e32c:	0003130d 	.word	0x0003130d
   1e330:	200040c8 	.word	0x200040c8
   1e334:	00026b71 	.word	0x00026b71
   1e338:	0001e0a5 	.word	0x0001e0a5
   1e33c:	2000410b 	.word	0x2000410b

0001e340 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   1e340:	b580      	push	{r7, lr}
   1e342:	b090      	sub	sp, #64	; 0x40
   1e344:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e346:	4b1f      	ldr	r3, [pc, #124]	; (1e3c4 <sd_mmc_spi_init+0x84>)
   1e348:	2200      	movs	r2, #0
   1e34a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   1e34c:	233c      	movs	r3, #60	; 0x3c
   1e34e:	18fb      	adds	r3, r7, r3
   1e350:	0018      	movs	r0, r3
   1e352:	4b1d      	ldr	r3, [pc, #116]	; (1e3c8 <sd_mmc_spi_init+0x88>)
   1e354:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   1e356:	1d3b      	adds	r3, r7, #4
   1e358:	0018      	movs	r0, r3
   1e35a:	4b1c      	ldr	r3, [pc, #112]	; (1e3cc <sd_mmc_spi_init+0x8c>)
   1e35c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   1e35e:	1d3b      	adds	r3, r7, #4
   1e360:	2280      	movs	r2, #128	; 0x80
   1e362:	0252      	lsls	r2, r2, #9
   1e364:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   1e366:	1d3b      	adds	r3, r7, #4
   1e368:	4a19      	ldr	r2, [pc, #100]	; (1e3d0 <sd_mmc_spi_init+0x90>)
   1e36a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   1e36c:	1d3b      	adds	r3, r7, #4
   1e36e:	4a19      	ldr	r2, [pc, #100]	; (1e3d4 <sd_mmc_spi_init+0x94>)
   1e370:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   1e372:	1d3b      	adds	r3, r7, #4
   1e374:	4a18      	ldr	r2, [pc, #96]	; (1e3d8 <sd_mmc_spi_init+0x98>)
   1e376:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   1e378:	1d3b      	adds	r3, r7, #4
   1e37a:	4a18      	ldr	r2, [pc, #96]	; (1e3dc <sd_mmc_spi_init+0x9c>)
   1e37c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   1e37e:	1d3b      	adds	r3, r7, #4
   1e380:	2224      	movs	r2, #36	; 0x24
   1e382:	2100      	movs	r1, #0
   1e384:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   1e386:	1d3b      	adds	r3, r7, #4
   1e388:	4a15      	ldr	r2, [pc, #84]	; (1e3e0 <sd_mmc_spi_init+0xa0>)
   1e38a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   1e38c:	1d3a      	adds	r2, r7, #4
   1e38e:	4915      	ldr	r1, [pc, #84]	; (1e3e4 <sd_mmc_spi_init+0xa4>)
   1e390:	4b15      	ldr	r3, [pc, #84]	; (1e3e8 <sd_mmc_spi_init+0xa8>)
   1e392:	0018      	movs	r0, r3
   1e394:	4b15      	ldr	r3, [pc, #84]	; (1e3ec <sd_mmc_spi_init+0xac>)
   1e396:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   1e398:	4b13      	ldr	r3, [pc, #76]	; (1e3e8 <sd_mmc_spi_init+0xa8>)
   1e39a:	0018      	movs	r0, r3
   1e39c:	4b14      	ldr	r3, [pc, #80]	; (1e3f0 <sd_mmc_spi_init+0xb0>)
   1e39e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   1e3a0:	4b14      	ldr	r3, [pc, #80]	; (1e3f4 <sd_mmc_spi_init+0xb4>)
   1e3a2:	0018      	movs	r0, r3
   1e3a4:	4b14      	ldr	r3, [pc, #80]	; (1e3f8 <sd_mmc_spi_init+0xb8>)
   1e3a6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   1e3a8:	4b14      	ldr	r3, [pc, #80]	; (1e3fc <sd_mmc_spi_init+0xbc>)
   1e3aa:	781a      	ldrb	r2, [r3, #0]
   1e3ac:	4b11      	ldr	r3, [pc, #68]	; (1e3f4 <sd_mmc_spi_init+0xb4>)
   1e3ae:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   1e3b0:	4a10      	ldr	r2, [pc, #64]	; (1e3f4 <sd_mmc_spi_init+0xb4>)
   1e3b2:	4b13      	ldr	r3, [pc, #76]	; (1e400 <sd_mmc_spi_init+0xc0>)
   1e3b4:	0011      	movs	r1, r2
   1e3b6:	0018      	movs	r0, r3
   1e3b8:	4b12      	ldr	r3, [pc, #72]	; (1e404 <sd_mmc_spi_init+0xc4>)
   1e3ba:	4798      	blx	r3
}
   1e3bc:	46c0      	nop			; (mov r8, r8)
   1e3be:	46bd      	mov	sp, r7
   1e3c0:	b010      	add	sp, #64	; 0x40
   1e3c2:	bd80      	pop	{r7, pc}
   1e3c4:	2000410b 	.word	0x2000410b
   1e3c8:	0001ddf5 	.word	0x0001ddf5
   1e3cc:	0001de8d 	.word	0x0001de8d
   1e3d0:	00100002 	.word	0x00100002
   1e3d4:	00110002 	.word	0x00110002
   1e3d8:	00120002 	.word	0x00120002
   1e3dc:	00130002 	.word	0x00130002
   1e3e0:	00061a80 	.word	0x00061a80
   1e3e4:	42000c00 	.word	0x42000c00
   1e3e8:	200040c8 	.word	0x200040c8
   1e3ec:	000267bd 	.word	0x000267bd
   1e3f0:	0001df99 	.word	0x0001df99
   1e3f4:	20004108 	.word	0x20004108
   1e3f8:	0001df11 	.word	0x0001df11
   1e3fc:	20000118 	.word	0x20000118
   1e400:	20004104 	.word	0x20004104
   1e404:	0001df35 	.word	0x0001df35

0001e408 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   1e408:	b590      	push	{r4, r7, lr}
   1e40a:	b083      	sub	sp, #12
   1e40c:	af00      	add	r7, sp, #0
   1e40e:	0004      	movs	r4, r0
   1e410:	6039      	str	r1, [r7, #0]
   1e412:	0010      	movs	r0, r2
   1e414:	0019      	movs	r1, r3
   1e416:	1dfb      	adds	r3, r7, #7
   1e418:	1c22      	adds	r2, r4, #0
   1e41a:	701a      	strb	r2, [r3, #0]
   1e41c:	1dbb      	adds	r3, r7, #6
   1e41e:	1c02      	adds	r2, r0, #0
   1e420:	701a      	strb	r2, [r3, #0]
   1e422:	1d7b      	adds	r3, r7, #5
   1e424:	1c0a      	adds	r2, r1, #0
   1e426:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e428:	4b13      	ldr	r3, [pc, #76]	; (1e478 <sd_mmc_spi_select_device+0x70>)
   1e42a:	2200      	movs	r2, #0
   1e42c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   1e42e:	683b      	ldr	r3, [r7, #0]
   1e430:	4a12      	ldr	r2, [pc, #72]	; (1e47c <sd_mmc_spi_select_device+0x74>)
   1e432:	4293      	cmp	r3, r2
   1e434:	d907      	bls.n	1e446 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   1e436:	4b11      	ldr	r3, [pc, #68]	; (1e47c <sd_mmc_spi_select_device+0x74>)
   1e438:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1e43a:	e004      	b.n	1e446 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   1e43c:	683b      	ldr	r3, [r7, #0]
   1e43e:	08db      	lsrs	r3, r3, #3
   1e440:	683a      	ldr	r2, [r7, #0]
   1e442:	1ad3      	subs	r3, r2, r3
   1e444:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   1e446:	683a      	ldr	r2, [r7, #0]
   1e448:	4b0d      	ldr	r3, [pc, #52]	; (1e480 <sd_mmc_spi_select_device+0x78>)
   1e44a:	0011      	movs	r1, r2
   1e44c:	0018      	movs	r0, r3
   1e44e:	4b0d      	ldr	r3, [pc, #52]	; (1e484 <sd_mmc_spi_select_device+0x7c>)
   1e450:	4798      	blx	r3
   1e452:	0003      	movs	r3, r0
   1e454:	2b17      	cmp	r3, #23
   1e456:	d0f1      	beq.n	1e43c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   1e458:	1dfb      	adds	r3, r7, #7
   1e45a:	781a      	ldrb	r2, [r3, #0]
   1e45c:	0013      	movs	r3, r2
   1e45e:	005b      	lsls	r3, r3, #1
   1e460:	189b      	adds	r3, r3, r2
   1e462:	4a09      	ldr	r2, [pc, #36]	; (1e488 <sd_mmc_spi_select_device+0x80>)
   1e464:	1899      	adds	r1, r3, r2
   1e466:	4b06      	ldr	r3, [pc, #24]	; (1e480 <sd_mmc_spi_select_device+0x78>)
   1e468:	2201      	movs	r2, #1
   1e46a:	0018      	movs	r0, r3
   1e46c:	4b07      	ldr	r3, [pc, #28]	; (1e48c <sd_mmc_spi_select_device+0x84>)
   1e46e:	4798      	blx	r3
}
   1e470:	46c0      	nop			; (mov r8, r8)
   1e472:	46bd      	mov	sp, r7
   1e474:	b003      	add	sp, #12
   1e476:	bd90      	pop	{r4, r7, pc}
   1e478:	2000410b 	.word	0x2000410b
   1e47c:	00989680 	.word	0x00989680
   1e480:	200040c8 	.word	0x200040c8
   1e484:	000264e5 	.word	0x000264e5
   1e488:	20004104 	.word	0x20004104
   1e48c:	00026a81 	.word	0x00026a81

0001e490 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   1e490:	b580      	push	{r7, lr}
   1e492:	b082      	sub	sp, #8
   1e494:	af00      	add	r7, sp, #0
   1e496:	0002      	movs	r2, r0
   1e498:	1dfb      	adds	r3, r7, #7
   1e49a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e49c:	4b09      	ldr	r3, [pc, #36]	; (1e4c4 <sd_mmc_spi_deselect_device+0x34>)
   1e49e:	2200      	movs	r2, #0
   1e4a0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   1e4a2:	1dfb      	adds	r3, r7, #7
   1e4a4:	781a      	ldrb	r2, [r3, #0]
   1e4a6:	0013      	movs	r3, r2
   1e4a8:	005b      	lsls	r3, r3, #1
   1e4aa:	189b      	adds	r3, r3, r2
   1e4ac:	4a06      	ldr	r2, [pc, #24]	; (1e4c8 <sd_mmc_spi_deselect_device+0x38>)
   1e4ae:	1899      	adds	r1, r3, r2
   1e4b0:	4b06      	ldr	r3, [pc, #24]	; (1e4cc <sd_mmc_spi_deselect_device+0x3c>)
   1e4b2:	2200      	movs	r2, #0
   1e4b4:	0018      	movs	r0, r3
   1e4b6:	4b06      	ldr	r3, [pc, #24]	; (1e4d0 <sd_mmc_spi_deselect_device+0x40>)
   1e4b8:	4798      	blx	r3
}
   1e4ba:	46c0      	nop			; (mov r8, r8)
   1e4bc:	46bd      	mov	sp, r7
   1e4be:	b002      	add	sp, #8
   1e4c0:	bd80      	pop	{r7, pc}
   1e4c2:	46c0      	nop			; (mov r8, r8)
   1e4c4:	2000410b 	.word	0x2000410b
   1e4c8:	20004104 	.word	0x20004104
   1e4cc:	200040c8 	.word	0x200040c8
   1e4d0:	00026a81 	.word	0x00026a81

0001e4d4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   1e4d4:	b580      	push	{r7, lr}
   1e4d6:	b082      	sub	sp, #8
   1e4d8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   1e4da:	1dbb      	adds	r3, r7, #6
   1e4dc:	22ff      	movs	r2, #255	; 0xff
   1e4de:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e4e0:	4b0c      	ldr	r3, [pc, #48]	; (1e514 <sd_mmc_spi_send_clock+0x40>)
   1e4e2:	2200      	movs	r2, #0
   1e4e4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   1e4e6:	1dfb      	adds	r3, r7, #7
   1e4e8:	2200      	movs	r2, #0
   1e4ea:	701a      	strb	r2, [r3, #0]
   1e4ec:	e00a      	b.n	1e504 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   1e4ee:	1db9      	adds	r1, r7, #6
   1e4f0:	4b09      	ldr	r3, [pc, #36]	; (1e518 <sd_mmc_spi_send_clock+0x44>)
   1e4f2:	2201      	movs	r2, #1
   1e4f4:	0018      	movs	r0, r3
   1e4f6:	4b09      	ldr	r3, [pc, #36]	; (1e51c <sd_mmc_spi_send_clock+0x48>)
   1e4f8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   1e4fa:	1dfb      	adds	r3, r7, #7
   1e4fc:	781a      	ldrb	r2, [r3, #0]
   1e4fe:	1dfb      	adds	r3, r7, #7
   1e500:	3201      	adds	r2, #1
   1e502:	701a      	strb	r2, [r3, #0]
   1e504:	1dfb      	adds	r3, r7, #7
   1e506:	781b      	ldrb	r3, [r3, #0]
   1e508:	2b09      	cmp	r3, #9
   1e50a:	d9f0      	bls.n	1e4ee <sd_mmc_spi_send_clock+0x1a>
	}
}
   1e50c:	46c0      	nop			; (mov r8, r8)
   1e50e:	46bd      	mov	sp, r7
   1e510:	b002      	add	sp, #8
   1e512:	bd80      	pop	{r7, pc}
   1e514:	2000410b 	.word	0x2000410b
   1e518:	200040c8 	.word	0x200040c8
   1e51c:	00026b71 	.word	0x00026b71

0001e520 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   1e520:	b590      	push	{r4, r7, lr}
   1e522:	b085      	sub	sp, #20
   1e524:	af02      	add	r7, sp, #8
   1e526:	6078      	str	r0, [r7, #4]
   1e528:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   1e52a:	6839      	ldr	r1, [r7, #0]
   1e52c:	6878      	ldr	r0, [r7, #4]
   1e52e:	2300      	movs	r3, #0
   1e530:	9300      	str	r3, [sp, #0]
   1e532:	2300      	movs	r3, #0
   1e534:	2200      	movs	r2, #0
   1e536:	4c03      	ldr	r4, [pc, #12]	; (1e544 <sd_mmc_spi_send_cmd+0x24>)
   1e538:	47a0      	blx	r4
   1e53a:	0003      	movs	r3, r0
}
   1e53c:	0018      	movs	r0, r3
   1e53e:	46bd      	mov	sp, r7
   1e540:	b003      	add	sp, #12
   1e542:	bd90      	pop	{r4, r7, pc}
   1e544:	0001e549 	.word	0x0001e549

0001e548 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   1e548:	b590      	push	{r4, r7, lr}
   1e54a:	b089      	sub	sp, #36	; 0x24
   1e54c:	af00      	add	r7, sp, #0
   1e54e:	60f8      	str	r0, [r7, #12]
   1e550:	60b9      	str	r1, [r7, #8]
   1e552:	0019      	movs	r1, r3
   1e554:	1dbb      	adds	r3, r7, #6
   1e556:	801a      	strh	r2, [r3, #0]
   1e558:	1d3b      	adds	r3, r7, #4
   1e55a:	1c0a      	adds	r2, r1, #0
   1e55c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   1e55e:	231b      	movs	r3, #27
   1e560:	18fb      	adds	r3, r7, r3
   1e562:	22ff      	movs	r2, #255	; 0xff
   1e564:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   1e566:	231c      	movs	r3, #28
   1e568:	18fb      	adds	r3, r7, r3
   1e56a:	22ff      	movs	r2, #255	; 0xff
   1e56c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e56e:	4b72      	ldr	r3, [pc, #456]	; (1e738 <sd_mmc_spi_adtc_start+0x1f0>)
   1e570:	2200      	movs	r2, #0
   1e572:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   1e574:	68fb      	ldr	r3, [r7, #12]
   1e576:	b2db      	uxtb	r3, r3
   1e578:	223f      	movs	r2, #63	; 0x3f
   1e57a:	4013      	ands	r3, r2
   1e57c:	b2db      	uxtb	r3, r3
   1e57e:	2240      	movs	r2, #64	; 0x40
   1e580:	4313      	orrs	r3, r2
   1e582:	b2da      	uxtb	r2, r3
   1e584:	2314      	movs	r3, #20
   1e586:	18fb      	adds	r3, r7, r3
   1e588:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   1e58a:	68bb      	ldr	r3, [r7, #8]
   1e58c:	0e1b      	lsrs	r3, r3, #24
   1e58e:	b2da      	uxtb	r2, r3
   1e590:	2314      	movs	r3, #20
   1e592:	18fb      	adds	r3, r7, r3
   1e594:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   1e596:	68bb      	ldr	r3, [r7, #8]
   1e598:	0c1b      	lsrs	r3, r3, #16
   1e59a:	b2da      	uxtb	r2, r3
   1e59c:	2314      	movs	r3, #20
   1e59e:	18fb      	adds	r3, r7, r3
   1e5a0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   1e5a2:	68bb      	ldr	r3, [r7, #8]
   1e5a4:	0a1b      	lsrs	r3, r3, #8
   1e5a6:	b2da      	uxtb	r2, r3
   1e5a8:	2314      	movs	r3, #20
   1e5aa:	18fb      	adds	r3, r7, r3
   1e5ac:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   1e5ae:	68bb      	ldr	r3, [r7, #8]
   1e5b0:	b2da      	uxtb	r2, r3
   1e5b2:	2314      	movs	r3, #20
   1e5b4:	18fb      	adds	r3, r7, r3
   1e5b6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   1e5b8:	2314      	movs	r3, #20
   1e5ba:	18fb      	adds	r3, r7, r3
   1e5bc:	2105      	movs	r1, #5
   1e5be:	0018      	movs	r0, r3
   1e5c0:	4b5e      	ldr	r3, [pc, #376]	; (1e73c <sd_mmc_spi_adtc_start+0x1f4>)
   1e5c2:	4798      	blx	r3
   1e5c4:	0003      	movs	r3, r0
   1e5c6:	001a      	movs	r2, r3
   1e5c8:	2314      	movs	r3, #20
   1e5ca:	18fb      	adds	r3, r7, r3
   1e5cc:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   1e5ce:	231b      	movs	r3, #27
   1e5d0:	18f9      	adds	r1, r7, r3
   1e5d2:	4b5b      	ldr	r3, [pc, #364]	; (1e740 <sd_mmc_spi_adtc_start+0x1f8>)
   1e5d4:	2201      	movs	r2, #1
   1e5d6:	0018      	movs	r0, r3
   1e5d8:	4b5a      	ldr	r3, [pc, #360]	; (1e744 <sd_mmc_spi_adtc_start+0x1fc>)
   1e5da:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   1e5dc:	2314      	movs	r3, #20
   1e5de:	18f9      	adds	r1, r7, r3
   1e5e0:	4b57      	ldr	r3, [pc, #348]	; (1e740 <sd_mmc_spi_adtc_start+0x1f8>)
   1e5e2:	2206      	movs	r2, #6
   1e5e4:	0018      	movs	r0, r3
   1e5e6:	4b57      	ldr	r3, [pc, #348]	; (1e744 <sd_mmc_spi_adtc_start+0x1fc>)
   1e5e8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   1e5ea:	2313      	movs	r3, #19
   1e5ec:	18fb      	adds	r3, r7, r3
   1e5ee:	22ff      	movs	r2, #255	; 0xff
   1e5f0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1e5f2:	231c      	movs	r3, #28
   1e5f4:	18fb      	adds	r3, r7, r3
   1e5f6:	881b      	ldrh	r3, [r3, #0]
   1e5f8:	2213      	movs	r2, #19
   1e5fa:	18b9      	adds	r1, r7, r2
   1e5fc:	4850      	ldr	r0, [pc, #320]	; (1e740 <sd_mmc_spi_adtc_start+0x1f8>)
   1e5fe:	2201      	movs	r2, #1
   1e600:	4c51      	ldr	r4, [pc, #324]	; (1e748 <sd_mmc_spi_adtc_start+0x200>)
   1e602:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   1e604:	231f      	movs	r3, #31
   1e606:	18fb      	adds	r3, r7, r3
   1e608:	2207      	movs	r2, #7
   1e60a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   1e60c:	231c      	movs	r3, #28
   1e60e:	18fb      	adds	r3, r7, r3
   1e610:	881b      	ldrh	r3, [r3, #0]
   1e612:	2213      	movs	r2, #19
   1e614:	18b9      	adds	r1, r7, r2
   1e616:	484a      	ldr	r0, [pc, #296]	; (1e740 <sd_mmc_spi_adtc_start+0x1f8>)
   1e618:	2201      	movs	r2, #1
   1e61a:	4c4b      	ldr	r4, [pc, #300]	; (1e748 <sd_mmc_spi_adtc_start+0x200>)
   1e61c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   1e61e:	2313      	movs	r3, #19
   1e620:	18fb      	adds	r3, r7, r3
   1e622:	781b      	ldrb	r3, [r3, #0]
   1e624:	b25b      	sxtb	r3, r3
   1e626:	2b00      	cmp	r3, #0
   1e628:	da10      	bge.n	1e64c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   1e62a:	231f      	movs	r3, #31
   1e62c:	18fb      	adds	r3, r7, r3
   1e62e:	221f      	movs	r2, #31
   1e630:	18ba      	adds	r2, r7, r2
   1e632:	7812      	ldrb	r2, [r2, #0]
   1e634:	3a01      	subs	r2, #1
   1e636:	701a      	strb	r2, [r3, #0]
   1e638:	231f      	movs	r3, #31
   1e63a:	18fb      	adds	r3, r7, r3
   1e63c:	781b      	ldrb	r3, [r3, #0]
   1e63e:	2b00      	cmp	r3, #0
   1e640:	d1e4      	bne.n	1e60c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   1e642:	4b3d      	ldr	r3, [pc, #244]	; (1e738 <sd_mmc_spi_adtc_start+0x1f0>)
   1e644:	2202      	movs	r2, #2
   1e646:	701a      	strb	r2, [r3, #0]
			return false;
   1e648:	2300      	movs	r3, #0
   1e64a:	e070      	b.n	1e72e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   1e64c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   1e64e:	2313      	movs	r3, #19
   1e650:	18fb      	adds	r3, r7, r3
   1e652:	781b      	ldrb	r3, [r3, #0]
   1e654:	001a      	movs	r2, r3
   1e656:	4b3d      	ldr	r3, [pc, #244]	; (1e74c <sd_mmc_spi_adtc_start+0x204>)
   1e658:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   1e65a:	2313      	movs	r3, #19
   1e65c:	18fb      	adds	r3, r7, r3
   1e65e:	781b      	ldrb	r3, [r3, #0]
   1e660:	001a      	movs	r2, r3
   1e662:	2308      	movs	r3, #8
   1e664:	4013      	ands	r3, r2
   1e666:	d004      	beq.n	1e672 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   1e668:	4b33      	ldr	r3, [pc, #204]	; (1e738 <sd_mmc_spi_adtc_start+0x1f0>)
   1e66a:	2206      	movs	r2, #6
   1e66c:	701a      	strb	r2, [r3, #0]
		return false;
   1e66e:	2300      	movs	r3, #0
   1e670:	e05d      	b.n	1e72e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   1e672:	2313      	movs	r3, #19
   1e674:	18fb      	adds	r3, r7, r3
   1e676:	781b      	ldrb	r3, [r3, #0]
   1e678:	001a      	movs	r2, r3
   1e67a:	2304      	movs	r3, #4
   1e67c:	4013      	ands	r3, r2
   1e67e:	d004      	beq.n	1e68a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   1e680:	4b2d      	ldr	r3, [pc, #180]	; (1e738 <sd_mmc_spi_adtc_start+0x1f0>)
   1e682:	2209      	movs	r2, #9
   1e684:	701a      	strb	r2, [r3, #0]
		return false;
   1e686:	2300      	movs	r3, #0
   1e688:	e051      	b.n	1e72e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   1e68a:	2313      	movs	r3, #19
   1e68c:	18fb      	adds	r3, r7, r3
   1e68e:	781b      	ldrb	r3, [r3, #0]
   1e690:	001a      	movs	r2, r3
   1e692:	2301      	movs	r3, #1
   1e694:	439a      	bics	r2, r3
   1e696:	1e13      	subs	r3, r2, #0
   1e698:	d004      	beq.n	1e6a4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   1e69a:	4b27      	ldr	r3, [pc, #156]	; (1e738 <sd_mmc_spi_adtc_start+0x1f0>)
   1e69c:	2201      	movs	r2, #1
   1e69e:	701a      	strb	r2, [r3, #0]
		return false;
   1e6a0:	2300      	movs	r3, #0
   1e6a2:	e044      	b.n	1e72e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   1e6a4:	68fa      	ldr	r2, [r7, #12]
   1e6a6:	2380      	movs	r3, #128	; 0x80
   1e6a8:	019b      	lsls	r3, r3, #6
   1e6aa:	4013      	ands	r3, r2
   1e6ac:	d00d      	beq.n	1e6ca <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   1e6ae:	4b28      	ldr	r3, [pc, #160]	; (1e750 <sd_mmc_spi_adtc_start+0x208>)
   1e6b0:	4798      	blx	r3
   1e6b2:	0003      	movs	r3, r0
   1e6b4:	001a      	movs	r2, r3
   1e6b6:	2301      	movs	r3, #1
   1e6b8:	4053      	eors	r3, r2
   1e6ba:	b2db      	uxtb	r3, r3
   1e6bc:	2b00      	cmp	r3, #0
   1e6be:	d004      	beq.n	1e6ca <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   1e6c0:	4b1d      	ldr	r3, [pc, #116]	; (1e738 <sd_mmc_spi_adtc_start+0x1f0>)
   1e6c2:	2203      	movs	r2, #3
   1e6c4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   1e6c6:	2300      	movs	r3, #0
   1e6c8:	e031      	b.n	1e72e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   1e6ca:	68fa      	ldr	r2, [r7, #12]
   1e6cc:	2380      	movs	r3, #128	; 0x80
   1e6ce:	009b      	lsls	r3, r3, #2
   1e6d0:	4013      	ands	r3, r2
   1e6d2:	d00e      	beq.n	1e6f2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   1e6d4:	4b1d      	ldr	r3, [pc, #116]	; (1e74c <sd_mmc_spi_adtc_start+0x204>)
   1e6d6:	2200      	movs	r2, #0
   1e6d8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   1e6da:	231c      	movs	r3, #28
   1e6dc:	18fb      	adds	r3, r7, r3
   1e6de:	881b      	ldrh	r3, [r3, #0]
   1e6e0:	491a      	ldr	r1, [pc, #104]	; (1e74c <sd_mmc_spi_adtc_start+0x204>)
   1e6e2:	4817      	ldr	r0, [pc, #92]	; (1e740 <sd_mmc_spi_adtc_start+0x1f8>)
   1e6e4:	2201      	movs	r2, #1
   1e6e6:	4c18      	ldr	r4, [pc, #96]	; (1e748 <sd_mmc_spi_adtc_start+0x200>)
   1e6e8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   1e6ea:	4b18      	ldr	r3, [pc, #96]	; (1e74c <sd_mmc_spi_adtc_start+0x204>)
   1e6ec:	681a      	ldr	r2, [r3, #0]
   1e6ee:	4b17      	ldr	r3, [pc, #92]	; (1e74c <sd_mmc_spi_adtc_start+0x204>)
   1e6f0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   1e6f2:	68fa      	ldr	r2, [r7, #12]
   1e6f4:	2380      	movs	r3, #128	; 0x80
   1e6f6:	00db      	lsls	r3, r3, #3
   1e6f8:	4013      	ands	r3, r2
   1e6fa:	d00c      	beq.n	1e716 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   1e6fc:	231c      	movs	r3, #28
   1e6fe:	18fb      	adds	r3, r7, r3
   1e700:	881b      	ldrh	r3, [r3, #0]
   1e702:	4912      	ldr	r1, [pc, #72]	; (1e74c <sd_mmc_spi_adtc_start+0x204>)
   1e704:	480e      	ldr	r0, [pc, #56]	; (1e740 <sd_mmc_spi_adtc_start+0x1f8>)
   1e706:	2204      	movs	r2, #4
   1e708:	4c0f      	ldr	r4, [pc, #60]	; (1e748 <sd_mmc_spi_adtc_start+0x200>)
   1e70a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   1e70c:	4b0f      	ldr	r3, [pc, #60]	; (1e74c <sd_mmc_spi_adtc_start+0x204>)
   1e70e:	681b      	ldr	r3, [r3, #0]
   1e710:	ba1a      	rev	r2, r3
   1e712:	4b0e      	ldr	r3, [pc, #56]	; (1e74c <sd_mmc_spi_adtc_start+0x204>)
   1e714:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   1e716:	4b0f      	ldr	r3, [pc, #60]	; (1e754 <sd_mmc_spi_adtc_start+0x20c>)
   1e718:	1dba      	adds	r2, r7, #6
   1e71a:	8812      	ldrh	r2, [r2, #0]
   1e71c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   1e71e:	4b0e      	ldr	r3, [pc, #56]	; (1e758 <sd_mmc_spi_adtc_start+0x210>)
   1e720:	1d3a      	adds	r2, r7, #4
   1e722:	8812      	ldrh	r2, [r2, #0]
   1e724:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   1e726:	4b0d      	ldr	r3, [pc, #52]	; (1e75c <sd_mmc_spi_adtc_start+0x214>)
   1e728:	2200      	movs	r2, #0
   1e72a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   1e72c:	2301      	movs	r3, #1
}
   1e72e:	0018      	movs	r0, r3
   1e730:	46bd      	mov	sp, r7
   1e732:	b009      	add	sp, #36	; 0x24
   1e734:	bd90      	pop	{r4, r7, pc}
   1e736:	46c0      	nop			; (mov r8, r8)
   1e738:	2000410b 	.word	0x2000410b
   1e73c:	0001dfe9 	.word	0x0001dfe9
   1e740:	200040c8 	.word	0x200040c8
   1e744:	00026b71 	.word	0x00026b71
   1e748:	0002694d 	.word	0x0002694d
   1e74c:	2000410c 	.word	0x2000410c
   1e750:	0001e0a5 	.word	0x0001e0a5
   1e754:	20004114 	.word	0x20004114
   1e758:	20004116 	.word	0x20004116
   1e75c:	20004110 	.word	0x20004110

0001e760 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   1e760:	b580      	push	{r7, lr}
   1e762:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   1e764:	4b02      	ldr	r3, [pc, #8]	; (1e770 <sd_mmc_spi_get_response+0x10>)
   1e766:	681b      	ldr	r3, [r3, #0]
}
   1e768:	0018      	movs	r0, r3
   1e76a:	46bd      	mov	sp, r7
   1e76c:	bd80      	pop	{r7, pc}
   1e76e:	46c0      	nop			; (mov r8, r8)
   1e770:	2000410c 	.word	0x2000410c

0001e774 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   1e774:	b590      	push	{r4, r7, lr}
   1e776:	b085      	sub	sp, #20
   1e778:	af00      	add	r7, sp, #0
   1e77a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   1e77c:	230e      	movs	r3, #14
   1e77e:	18fb      	adds	r3, r7, r3
   1e780:	22ff      	movs	r2, #255	; 0xff
   1e782:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e784:	4b1c      	ldr	r3, [pc, #112]	; (1e7f8 <sd_mmc_spi_read_word+0x84>)
   1e786:	2200      	movs	r2, #0
   1e788:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1e78a:	4b1c      	ldr	r3, [pc, #112]	; (1e7fc <sd_mmc_spi_read_word+0x88>)
   1e78c:	681a      	ldr	r2, [r3, #0]
   1e78e:	4b1c      	ldr	r3, [pc, #112]	; (1e800 <sd_mmc_spi_read_word+0x8c>)
   1e790:	881b      	ldrh	r3, [r3, #0]
   1e792:	0019      	movs	r1, r3
   1e794:	4b1b      	ldr	r3, [pc, #108]	; (1e804 <sd_mmc_spi_read_word+0x90>)
   1e796:	0010      	movs	r0, r2
   1e798:	4798      	blx	r3
   1e79a:	1e0b      	subs	r3, r1, #0
   1e79c:	d10a      	bne.n	1e7b4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   1e79e:	4b1a      	ldr	r3, [pc, #104]	; (1e808 <sd_mmc_spi_read_word+0x94>)
   1e7a0:	4798      	blx	r3
   1e7a2:	0003      	movs	r3, r0
   1e7a4:	001a      	movs	r2, r3
   1e7a6:	2301      	movs	r3, #1
   1e7a8:	4053      	eors	r3, r2
   1e7aa:	b2db      	uxtb	r3, r3
   1e7ac:	2b00      	cmp	r3, #0
   1e7ae:	d001      	beq.n	1e7b4 <sd_mmc_spi_read_word+0x40>
			return false;
   1e7b0:	2300      	movs	r3, #0
   1e7b2:	e01d      	b.n	1e7f0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   1e7b4:	230e      	movs	r3, #14
   1e7b6:	18fb      	adds	r3, r7, r3
   1e7b8:	881b      	ldrh	r3, [r3, #0]
   1e7ba:	1d39      	adds	r1, r7, #4
   1e7bc:	4813      	ldr	r0, [pc, #76]	; (1e80c <sd_mmc_spi_read_word+0x98>)
   1e7be:	2204      	movs	r2, #4
   1e7c0:	4c13      	ldr	r4, [pc, #76]	; (1e810 <sd_mmc_spi_read_word+0x9c>)
   1e7c2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   1e7c4:	687b      	ldr	r3, [r7, #4]
   1e7c6:	687a      	ldr	r2, [r7, #4]
   1e7c8:	6812      	ldr	r2, [r2, #0]
   1e7ca:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   1e7cc:	4b0b      	ldr	r3, [pc, #44]	; (1e7fc <sd_mmc_spi_read_word+0x88>)
   1e7ce:	681b      	ldr	r3, [r3, #0]
   1e7d0:	1d1a      	adds	r2, r3, #4
   1e7d2:	4b0a      	ldr	r3, [pc, #40]	; (1e7fc <sd_mmc_spi_read_word+0x88>)
   1e7d4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   1e7d6:	4b09      	ldr	r3, [pc, #36]	; (1e7fc <sd_mmc_spi_read_word+0x88>)
   1e7d8:	681a      	ldr	r2, [r3, #0]
   1e7da:	4b09      	ldr	r3, [pc, #36]	; (1e800 <sd_mmc_spi_read_word+0x8c>)
   1e7dc:	881b      	ldrh	r3, [r3, #0]
   1e7de:	0019      	movs	r1, r3
   1e7e0:	4b08      	ldr	r3, [pc, #32]	; (1e804 <sd_mmc_spi_read_word+0x90>)
   1e7e2:	0010      	movs	r0, r2
   1e7e4:	4798      	blx	r3
   1e7e6:	1e0b      	subs	r3, r1, #0
   1e7e8:	d101      	bne.n	1e7ee <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   1e7ea:	4b0a      	ldr	r3, [pc, #40]	; (1e814 <sd_mmc_spi_read_word+0xa0>)
   1e7ec:	4798      	blx	r3
	}
	return true;
   1e7ee:	2301      	movs	r3, #1
}
   1e7f0:	0018      	movs	r0, r3
   1e7f2:	46bd      	mov	sp, r7
   1e7f4:	b005      	add	sp, #20
   1e7f6:	bd90      	pop	{r4, r7, pc}
   1e7f8:	2000410b 	.word	0x2000410b
   1e7fc:	20004110 	.word	0x20004110
   1e800:	20004114 	.word	0x20004114
   1e804:	00031419 	.word	0x00031419
   1e808:	0001e111 	.word	0x0001e111
   1e80c:	200040c8 	.word	0x200040c8
   1e810:	0002694d 	.word	0x0002694d
   1e814:	0001e195 	.word	0x0001e195

0001e818 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   1e818:	b590      	push	{r4, r7, lr}
   1e81a:	b085      	sub	sp, #20
   1e81c:	af00      	add	r7, sp, #0
   1e81e:	6078      	str	r0, [r7, #4]
   1e820:	000a      	movs	r2, r1
   1e822:	1cbb      	adds	r3, r7, #2
   1e824:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   1e826:	230a      	movs	r3, #10
   1e828:	18fb      	adds	r3, r7, r3
   1e82a:	22ff      	movs	r2, #255	; 0xff
   1e82c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e82e:	4b1c      	ldr	r3, [pc, #112]	; (1e8a0 <sd_mmc_spi_start_read_blocks+0x88>)
   1e830:	2200      	movs	r2, #0
   1e832:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1e834:	2300      	movs	r3, #0
   1e836:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1e838:	e025      	b.n	1e886 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   1e83a:	4b1a      	ldr	r3, [pc, #104]	; (1e8a4 <sd_mmc_spi_start_read_blocks+0x8c>)
   1e83c:	4798      	blx	r3
   1e83e:	0003      	movs	r3, r0
   1e840:	001a      	movs	r2, r3
   1e842:	2301      	movs	r3, #1
   1e844:	4053      	eors	r3, r2
   1e846:	b2db      	uxtb	r3, r3
   1e848:	2b00      	cmp	r3, #0
   1e84a:	d001      	beq.n	1e850 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   1e84c:	2300      	movs	r3, #0
   1e84e:	e022      	b.n	1e896 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   1e850:	687a      	ldr	r2, [r7, #4]
   1e852:	68fb      	ldr	r3, [r7, #12]
   1e854:	18d1      	adds	r1, r2, r3
   1e856:	4b14      	ldr	r3, [pc, #80]	; (1e8a8 <sd_mmc_spi_start_read_blocks+0x90>)
   1e858:	881a      	ldrh	r2, [r3, #0]
   1e85a:	230a      	movs	r3, #10
   1e85c:	18fb      	adds	r3, r7, r3
   1e85e:	881b      	ldrh	r3, [r3, #0]
   1e860:	4812      	ldr	r0, [pc, #72]	; (1e8ac <sd_mmc_spi_start_read_blocks+0x94>)
   1e862:	4c13      	ldr	r4, [pc, #76]	; (1e8b0 <sd_mmc_spi_start_read_blocks+0x98>)
   1e864:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   1e866:	4b10      	ldr	r3, [pc, #64]	; (1e8a8 <sd_mmc_spi_start_read_blocks+0x90>)
   1e868:	881b      	ldrh	r3, [r3, #0]
   1e86a:	001a      	movs	r2, r3
   1e86c:	68fb      	ldr	r3, [r7, #12]
   1e86e:	189b      	adds	r3, r3, r2
   1e870:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1e872:	4b0d      	ldr	r3, [pc, #52]	; (1e8a8 <sd_mmc_spi_start_read_blocks+0x90>)
   1e874:	881b      	ldrh	r3, [r3, #0]
   1e876:	001a      	movs	r2, r3
   1e878:	4b0e      	ldr	r3, [pc, #56]	; (1e8b4 <sd_mmc_spi_start_read_blocks+0x9c>)
   1e87a:	681b      	ldr	r3, [r3, #0]
   1e87c:	18d2      	adds	r2, r2, r3
   1e87e:	4b0d      	ldr	r3, [pc, #52]	; (1e8b4 <sd_mmc_spi_start_read_blocks+0x9c>)
   1e880:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   1e882:	4b0d      	ldr	r3, [pc, #52]	; (1e8b8 <sd_mmc_spi_start_read_blocks+0xa0>)
   1e884:	4798      	blx	r3
	while (nb_block--) {
   1e886:	1cbb      	adds	r3, r7, #2
   1e888:	881b      	ldrh	r3, [r3, #0]
   1e88a:	1cba      	adds	r2, r7, #2
   1e88c:	1e59      	subs	r1, r3, #1
   1e88e:	8011      	strh	r1, [r2, #0]
   1e890:	2b00      	cmp	r3, #0
   1e892:	d1d2      	bne.n	1e83a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   1e894:	2301      	movs	r3, #1
}
   1e896:	0018      	movs	r0, r3
   1e898:	46bd      	mov	sp, r7
   1e89a:	b005      	add	sp, #20
   1e89c:	bd90      	pop	{r4, r7, pc}
   1e89e:	46c0      	nop			; (mov r8, r8)
   1e8a0:	2000410b 	.word	0x2000410b
   1e8a4:	0001e111 	.word	0x0001e111
   1e8a8:	20004114 	.word	0x20004114
   1e8ac:	200040c8 	.word	0x200040c8
   1e8b0:	0002694d 	.word	0x0002694d
   1e8b4:	20004110 	.word	0x20004110
   1e8b8:	0001e195 	.word	0x0001e195

0001e8bc <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   1e8bc:	b580      	push	{r7, lr}
   1e8be:	af00      	add	r7, sp, #0
	return true;
   1e8c0:	2301      	movs	r3, #1
}
   1e8c2:	0018      	movs	r0, r3
   1e8c4:	46bd      	mov	sp, r7
   1e8c6:	bd80      	pop	{r7, pc}

0001e8c8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   1e8c8:	b580      	push	{r7, lr}
   1e8ca:	b084      	sub	sp, #16
   1e8cc:	af00      	add	r7, sp, #0
   1e8ce:	6078      	str	r0, [r7, #4]
   1e8d0:	000a      	movs	r2, r1
   1e8d2:	1cbb      	adds	r3, r7, #2
   1e8d4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   1e8d6:	4b24      	ldr	r3, [pc, #144]	; (1e968 <sd_mmc_spi_start_write_blocks+0xa0>)
   1e8d8:	2200      	movs	r2, #0
   1e8da:	701a      	strb	r2, [r3, #0]
	pos = 0;
   1e8dc:	2300      	movs	r3, #0
   1e8de:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   1e8e0:	e035      	b.n	1e94e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   1e8e2:	4b22      	ldr	r3, [pc, #136]	; (1e96c <sd_mmc_spi_start_write_blocks+0xa4>)
   1e8e4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   1e8e6:	687a      	ldr	r2, [r7, #4]
   1e8e8:	68fb      	ldr	r3, [r7, #12]
   1e8ea:	18d1      	adds	r1, r2, r3
   1e8ec:	4b20      	ldr	r3, [pc, #128]	; (1e970 <sd_mmc_spi_start_write_blocks+0xa8>)
   1e8ee:	881a      	ldrh	r2, [r3, #0]
   1e8f0:	4b20      	ldr	r3, [pc, #128]	; (1e974 <sd_mmc_spi_start_write_blocks+0xac>)
   1e8f2:	0018      	movs	r0, r3
   1e8f4:	4b20      	ldr	r3, [pc, #128]	; (1e978 <sd_mmc_spi_start_write_blocks+0xb0>)
   1e8f6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   1e8f8:	4b1d      	ldr	r3, [pc, #116]	; (1e970 <sd_mmc_spi_start_write_blocks+0xa8>)
   1e8fa:	881b      	ldrh	r3, [r3, #0]
   1e8fc:	001a      	movs	r2, r3
   1e8fe:	68fb      	ldr	r3, [r7, #12]
   1e900:	189b      	adds	r3, r3, r2
   1e902:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   1e904:	4b1a      	ldr	r3, [pc, #104]	; (1e970 <sd_mmc_spi_start_write_blocks+0xa8>)
   1e906:	881b      	ldrh	r3, [r3, #0]
   1e908:	001a      	movs	r2, r3
   1e90a:	4b1c      	ldr	r3, [pc, #112]	; (1e97c <sd_mmc_spi_start_write_blocks+0xb4>)
   1e90c:	681b      	ldr	r3, [r3, #0]
   1e90e:	18d2      	adds	r2, r2, r3
   1e910:	4b1a      	ldr	r3, [pc, #104]	; (1e97c <sd_mmc_spi_start_write_blocks+0xb4>)
   1e912:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   1e914:	4b1a      	ldr	r3, [pc, #104]	; (1e980 <sd_mmc_spi_start_write_blocks+0xb8>)
   1e916:	4798      	blx	r3
   1e918:	0003      	movs	r3, r0
   1e91a:	001a      	movs	r2, r3
   1e91c:	2301      	movs	r3, #1
   1e91e:	4053      	eors	r3, r2
   1e920:	b2db      	uxtb	r3, r3
   1e922:	2b00      	cmp	r3, #0
   1e924:	d001      	beq.n	1e92a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   1e926:	2300      	movs	r3, #0
   1e928:	e019      	b.n	1e95e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   1e92a:	1cbb      	adds	r3, r7, #2
   1e92c:	881b      	ldrh	r3, [r3, #0]
   1e92e:	2b00      	cmp	r3, #0
   1e930:	d00d      	beq.n	1e94e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   1e932:	4b14      	ldr	r3, [pc, #80]	; (1e984 <sd_mmc_spi_start_write_blocks+0xbc>)
   1e934:	4798      	blx	r3
   1e936:	0003      	movs	r3, r0
   1e938:	001a      	movs	r2, r3
   1e93a:	2301      	movs	r3, #1
   1e93c:	4053      	eors	r3, r2
   1e93e:	b2db      	uxtb	r3, r3
   1e940:	2b00      	cmp	r3, #0
   1e942:	d004      	beq.n	1e94e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1e944:	4b08      	ldr	r3, [pc, #32]	; (1e968 <sd_mmc_spi_start_write_blocks+0xa0>)
   1e946:	2205      	movs	r2, #5
   1e948:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   1e94a:	2300      	movs	r3, #0
   1e94c:	e007      	b.n	1e95e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   1e94e:	1cbb      	adds	r3, r7, #2
   1e950:	881b      	ldrh	r3, [r3, #0]
   1e952:	1cba      	adds	r2, r7, #2
   1e954:	1e59      	subs	r1, r3, #1
   1e956:	8011      	strh	r1, [r2, #0]
   1e958:	2b00      	cmp	r3, #0
   1e95a:	d1c2      	bne.n	1e8e2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   1e95c:	2301      	movs	r3, #1
}
   1e95e:	0018      	movs	r0, r3
   1e960:	46bd      	mov	sp, r7
   1e962:	b004      	add	sp, #16
   1e964:	bd80      	pop	{r7, pc}
   1e966:	46c0      	nop			; (mov r8, r8)
   1e968:	2000410b 	.word	0x2000410b
   1e96c:	0001e1c1 	.word	0x0001e1c1
   1e970:	20004114 	.word	0x20004114
   1e974:	200040c8 	.word	0x200040c8
   1e978:	00026b71 	.word	0x00026b71
   1e97c:	20004110 	.word	0x20004110
   1e980:	0001e211 	.word	0x0001e211
   1e984:	0001e0a5 	.word	0x0001e0a5

0001e988 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   1e988:	b580      	push	{r7, lr}
   1e98a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   1e98c:	4b09      	ldr	r3, [pc, #36]	; (1e9b4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   1e98e:	4798      	blx	r3
   1e990:	0003      	movs	r3, r0
   1e992:	001a      	movs	r2, r3
   1e994:	2301      	movs	r3, #1
   1e996:	4053      	eors	r3, r2
   1e998:	b2db      	uxtb	r3, r3
   1e99a:	2b00      	cmp	r3, #0
   1e99c:	d004      	beq.n	1e9a8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   1e99e:	4b06      	ldr	r3, [pc, #24]	; (1e9b8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   1e9a0:	2205      	movs	r2, #5
   1e9a2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   1e9a4:	2300      	movs	r3, #0
   1e9a6:	e002      	b.n	1e9ae <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   1e9a8:	4b04      	ldr	r3, [pc, #16]	; (1e9bc <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   1e9aa:	4798      	blx	r3
   1e9ac:	0003      	movs	r3, r0
}
   1e9ae:	0018      	movs	r0, r3
   1e9b0:	46bd      	mov	sp, r7
   1e9b2:	bd80      	pop	{r7, pc}
   1e9b4:	0001e0a5 	.word	0x0001e0a5
   1e9b8:	2000410b 	.word	0x2000410b
   1e9bc:	0001e2a5 	.word	0x0001e2a5

0001e9c0 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
   1e9c0:	b580      	push	{r7, lr}
   1e9c2:	b082      	sub	sp, #8
   1e9c4:	af00      	add	r7, sp, #0
   1e9c6:	6078      	str	r0, [r7, #4]
	if (n > 0) {
   1e9c8:	687b      	ldr	r3, [r7, #4]
   1e9ca:	2b00      	cmp	r3, #0
   1e9cc:	d00c      	beq.n	1e9e8 <delay_cycles+0x28>
		SysTick->LOAD = n;
   1e9ce:	4b08      	ldr	r3, [pc, #32]	; (1e9f0 <delay_cycles+0x30>)
   1e9d0:	687a      	ldr	r2, [r7, #4]
   1e9d2:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
   1e9d4:	4b06      	ldr	r3, [pc, #24]	; (1e9f0 <delay_cycles+0x30>)
   1e9d6:	2200      	movs	r2, #0
   1e9d8:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
   1e9da:	46c0      	nop			; (mov r8, r8)
   1e9dc:	4b04      	ldr	r3, [pc, #16]	; (1e9f0 <delay_cycles+0x30>)
   1e9de:	681a      	ldr	r2, [r3, #0]
   1e9e0:	2380      	movs	r3, #128	; 0x80
   1e9e2:	025b      	lsls	r3, r3, #9
   1e9e4:	4013      	ands	r3, r2
   1e9e6:	d0f9      	beq.n	1e9dc <delay_cycles+0x1c>
		};
	}
}
   1e9e8:	46c0      	nop			; (mov r8, r8)
   1e9ea:	46bd      	mov	sp, r7
   1e9ec:	b002      	add	sp, #8
   1e9ee:	bd80      	pop	{r7, pc}
   1e9f0:	e000e010 	.word	0xe000e010

0001e9f4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   1e9f4:	b580      	push	{r7, lr}
   1e9f6:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   1e9f8:	2000      	movs	r0, #0
   1e9fa:	4b0f      	ldr	r3, [pc, #60]	; (1ea38 <delay_init+0x44>)
   1e9fc:	4798      	blx	r3
   1e9fe:	0002      	movs	r2, r0
   1ea00:	4b0e      	ldr	r3, [pc, #56]	; (1ea3c <delay_init+0x48>)
   1ea02:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   1ea04:	4b0d      	ldr	r3, [pc, #52]	; (1ea3c <delay_init+0x48>)
   1ea06:	6818      	ldr	r0, [r3, #0]
   1ea08:	4b0d      	ldr	r3, [pc, #52]	; (1ea40 <delay_init+0x4c>)
   1ea0a:	22fa      	movs	r2, #250	; 0xfa
   1ea0c:	0091      	lsls	r1, r2, #2
   1ea0e:	4798      	blx	r3
   1ea10:	0003      	movs	r3, r0
   1ea12:	001a      	movs	r2, r3
   1ea14:	4b09      	ldr	r3, [pc, #36]	; (1ea3c <delay_init+0x48>)
   1ea16:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   1ea18:	4b08      	ldr	r3, [pc, #32]	; (1ea3c <delay_init+0x48>)
   1ea1a:	6818      	ldr	r0, [r3, #0]
   1ea1c:	4b08      	ldr	r3, [pc, #32]	; (1ea40 <delay_init+0x4c>)
   1ea1e:	22fa      	movs	r2, #250	; 0xfa
   1ea20:	0091      	lsls	r1, r2, #2
   1ea22:	4798      	blx	r3
   1ea24:	0003      	movs	r3, r0
   1ea26:	001a      	movs	r2, r3
   1ea28:	4b06      	ldr	r3, [pc, #24]	; (1ea44 <delay_init+0x50>)
   1ea2a:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   1ea2c:	4b06      	ldr	r3, [pc, #24]	; (1ea48 <delay_init+0x54>)
   1ea2e:	2205      	movs	r2, #5
   1ea30:	601a      	str	r2, [r3, #0]
}
   1ea32:	46c0      	nop			; (mov r8, r8)
   1ea34:	46bd      	mov	sp, r7
   1ea36:	bd80      	pop	{r7, pc}
   1ea38:	000286f5 	.word	0x000286f5
   1ea3c:	2000011c 	.word	0x2000011c
   1ea40:	0003130d 	.word	0x0003130d
   1ea44:	20000120 	.word	0x20000120
   1ea48:	e000e010 	.word	0xe000e010

0001ea4c <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
   1ea4c:	b580      	push	{r7, lr}
   1ea4e:	b082      	sub	sp, #8
   1ea50:	af00      	add	r7, sp, #0
   1ea52:	6078      	str	r0, [r7, #4]
	while (n--) {
   1ea54:	e004      	b.n	1ea60 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
   1ea56:	4b07      	ldr	r3, [pc, #28]	; (1ea74 <delay_cycles_ms+0x28>)
   1ea58:	681b      	ldr	r3, [r3, #0]
   1ea5a:	0018      	movs	r0, r3
   1ea5c:	4b06      	ldr	r3, [pc, #24]	; (1ea78 <delay_cycles_ms+0x2c>)
   1ea5e:	4798      	blx	r3
	while (n--) {
   1ea60:	687b      	ldr	r3, [r7, #4]
   1ea62:	1e5a      	subs	r2, r3, #1
   1ea64:	607a      	str	r2, [r7, #4]
   1ea66:	2b00      	cmp	r3, #0
   1ea68:	d1f5      	bne.n	1ea56 <delay_cycles_ms+0xa>
	}
}
   1ea6a:	46c0      	nop			; (mov r8, r8)
   1ea6c:	46bd      	mov	sp, r7
   1ea6e:	b002      	add	sp, #8
   1ea70:	bd80      	pop	{r7, pc}
   1ea72:	46c0      	nop			; (mov r8, r8)
   1ea74:	2000011c 	.word	0x2000011c
   1ea78:	0001e9c1 	.word	0x0001e9c1

0001ea7c <system_pinmux_get_group_from_gpio_pin>:
{
   1ea7c:	b580      	push	{r7, lr}
   1ea7e:	b084      	sub	sp, #16
   1ea80:	af00      	add	r7, sp, #0
   1ea82:	0002      	movs	r2, r0
   1ea84:	1dfb      	adds	r3, r7, #7
   1ea86:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ea88:	230f      	movs	r3, #15
   1ea8a:	18fb      	adds	r3, r7, r3
   1ea8c:	1dfa      	adds	r2, r7, #7
   1ea8e:	7812      	ldrb	r2, [r2, #0]
   1ea90:	09d2      	lsrs	r2, r2, #7
   1ea92:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ea94:	230e      	movs	r3, #14
   1ea96:	18fb      	adds	r3, r7, r3
   1ea98:	1dfa      	adds	r2, r7, #7
   1ea9a:	7812      	ldrb	r2, [r2, #0]
   1ea9c:	0952      	lsrs	r2, r2, #5
   1ea9e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1eaa0:	4b0d      	ldr	r3, [pc, #52]	; (1ead8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1eaa2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1eaa4:	230f      	movs	r3, #15
   1eaa6:	18fb      	adds	r3, r7, r3
   1eaa8:	781b      	ldrb	r3, [r3, #0]
   1eaaa:	2b00      	cmp	r3, #0
   1eaac:	d10f      	bne.n	1eace <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1eaae:	230f      	movs	r3, #15
   1eab0:	18fb      	adds	r3, r7, r3
   1eab2:	781b      	ldrb	r3, [r3, #0]
   1eab4:	009b      	lsls	r3, r3, #2
   1eab6:	2210      	movs	r2, #16
   1eab8:	4694      	mov	ip, r2
   1eaba:	44bc      	add	ip, r7
   1eabc:	4463      	add	r3, ip
   1eabe:	3b08      	subs	r3, #8
   1eac0:	681a      	ldr	r2, [r3, #0]
   1eac2:	230e      	movs	r3, #14
   1eac4:	18fb      	adds	r3, r7, r3
   1eac6:	781b      	ldrb	r3, [r3, #0]
   1eac8:	01db      	lsls	r3, r3, #7
   1eaca:	18d3      	adds	r3, r2, r3
   1eacc:	e000      	b.n	1ead0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1eace:	2300      	movs	r3, #0
}
   1ead0:	0018      	movs	r0, r3
   1ead2:	46bd      	mov	sp, r7
   1ead4:	b004      	add	sp, #16
   1ead6:	bd80      	pop	{r7, pc}
   1ead8:	41004400 	.word	0x41004400

0001eadc <system_interrupt_enable_global>:
{
   1eadc:	b580      	push	{r7, lr}
   1eade:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   1eae0:	4b04      	ldr	r3, [pc, #16]	; (1eaf4 <system_interrupt_enable_global+0x18>)
   1eae2:	2201      	movs	r2, #1
   1eae4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   1eae6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   1eaea:	b662      	cpsie	i
}
   1eaec:	46c0      	nop			; (mov r8, r8)
   1eaee:	46bd      	mov	sp, r7
   1eaf0:	bd80      	pop	{r7, pc}
   1eaf2:	46c0      	nop			; (mov r8, r8)
   1eaf4:	20000126 	.word	0x20000126

0001eaf8 <port_get_group_from_gpio_pin>:
{
   1eaf8:	b580      	push	{r7, lr}
   1eafa:	b082      	sub	sp, #8
   1eafc:	af00      	add	r7, sp, #0
   1eafe:	0002      	movs	r2, r0
   1eb00:	1dfb      	adds	r3, r7, #7
   1eb02:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1eb04:	1dfb      	adds	r3, r7, #7
   1eb06:	781b      	ldrb	r3, [r3, #0]
   1eb08:	0018      	movs	r0, r3
   1eb0a:	4b03      	ldr	r3, [pc, #12]	; (1eb18 <port_get_group_from_gpio_pin+0x20>)
   1eb0c:	4798      	blx	r3
   1eb0e:	0003      	movs	r3, r0
}
   1eb10:	0018      	movs	r0, r3
   1eb12:	46bd      	mov	sp, r7
   1eb14:	b002      	add	sp, #8
   1eb16:	bd80      	pop	{r7, pc}
   1eb18:	0001ea7d 	.word	0x0001ea7d

0001eb1c <port_get_config_defaults>:
{
   1eb1c:	b580      	push	{r7, lr}
   1eb1e:	b082      	sub	sp, #8
   1eb20:	af00      	add	r7, sp, #0
   1eb22:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1eb24:	687b      	ldr	r3, [r7, #4]
   1eb26:	2200      	movs	r2, #0
   1eb28:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1eb2a:	687b      	ldr	r3, [r7, #4]
   1eb2c:	2201      	movs	r2, #1
   1eb2e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1eb30:	687b      	ldr	r3, [r7, #4]
   1eb32:	2200      	movs	r2, #0
   1eb34:	709a      	strb	r2, [r3, #2]
}
   1eb36:	46c0      	nop			; (mov r8, r8)
   1eb38:	46bd      	mov	sp, r7
   1eb3a:	b002      	add	sp, #8
   1eb3c:	bd80      	pop	{r7, pc}
	...

0001eb40 <port_pin_set_output_level>:
{
   1eb40:	b580      	push	{r7, lr}
   1eb42:	b084      	sub	sp, #16
   1eb44:	af00      	add	r7, sp, #0
   1eb46:	0002      	movs	r2, r0
   1eb48:	1dfb      	adds	r3, r7, #7
   1eb4a:	701a      	strb	r2, [r3, #0]
   1eb4c:	1dbb      	adds	r3, r7, #6
   1eb4e:	1c0a      	adds	r2, r1, #0
   1eb50:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1eb52:	1dfb      	adds	r3, r7, #7
   1eb54:	781b      	ldrb	r3, [r3, #0]
   1eb56:	0018      	movs	r0, r3
   1eb58:	4b0d      	ldr	r3, [pc, #52]	; (1eb90 <port_pin_set_output_level+0x50>)
   1eb5a:	4798      	blx	r3
   1eb5c:	0003      	movs	r3, r0
   1eb5e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1eb60:	1dfb      	adds	r3, r7, #7
   1eb62:	781b      	ldrb	r3, [r3, #0]
   1eb64:	221f      	movs	r2, #31
   1eb66:	4013      	ands	r3, r2
   1eb68:	2201      	movs	r2, #1
   1eb6a:	409a      	lsls	r2, r3
   1eb6c:	0013      	movs	r3, r2
   1eb6e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1eb70:	1dbb      	adds	r3, r7, #6
   1eb72:	781b      	ldrb	r3, [r3, #0]
   1eb74:	2b00      	cmp	r3, #0
   1eb76:	d003      	beq.n	1eb80 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1eb78:	68fb      	ldr	r3, [r7, #12]
   1eb7a:	68ba      	ldr	r2, [r7, #8]
   1eb7c:	619a      	str	r2, [r3, #24]
}
   1eb7e:	e002      	b.n	1eb86 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1eb80:	68fb      	ldr	r3, [r7, #12]
   1eb82:	68ba      	ldr	r2, [r7, #8]
   1eb84:	615a      	str	r2, [r3, #20]
}
   1eb86:	46c0      	nop			; (mov r8, r8)
   1eb88:	46bd      	mov	sp, r7
   1eb8a:	b004      	add	sp, #16
   1eb8c:	bd80      	pop	{r7, pc}
   1eb8e:	46c0      	nop			; (mov r8, r8)
   1eb90:	0001eaf9 	.word	0x0001eaf9

0001eb94 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   1eb94:	b580      	push	{r7, lr}
   1eb96:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   1eb98:	4b04      	ldr	r3, [pc, #16]	; (1ebac <chip_isr+0x18>)
   1eb9a:	681b      	ldr	r3, [r3, #0]
   1eb9c:	2b00      	cmp	r3, #0
   1eb9e:	d002      	beq.n	1eba6 <chip_isr+0x12>
		gpfIsr();
   1eba0:	4b02      	ldr	r3, [pc, #8]	; (1ebac <chip_isr+0x18>)
   1eba2:	681b      	ldr	r3, [r3, #0]
   1eba4:	4798      	blx	r3
	}
}
   1eba6:	46c0      	nop			; (mov r8, r8)
   1eba8:	46bd      	mov	sp, r7
   1ebaa:	bd80      	pop	{r7, pc}
   1ebac:	20004118 	.word	0x20004118

0001ebb0 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   1ebb0:	b580      	push	{r7, lr}
   1ebb2:	b082      	sub	sp, #8
   1ebb4:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   1ebb6:	1d3b      	adds	r3, r7, #4
   1ebb8:	0018      	movs	r0, r3
   1ebba:	4b10      	ldr	r3, [pc, #64]	; (1ebfc <init_chip_pins+0x4c>)
   1ebbc:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   1ebbe:	1d3b      	adds	r3, r7, #4
   1ebc0:	2201      	movs	r2, #1
   1ebc2:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   1ebc4:	1d3b      	adds	r3, r7, #4
   1ebc6:	0019      	movs	r1, r3
   1ebc8:	201b      	movs	r0, #27
   1ebca:	4b0d      	ldr	r3, [pc, #52]	; (1ec00 <init_chip_pins+0x50>)
   1ebcc:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   1ebce:	1d3b      	adds	r3, r7, #4
   1ebd0:	0019      	movs	r1, r3
   1ebd2:	201c      	movs	r0, #28
   1ebd4:	4b0a      	ldr	r3, [pc, #40]	; (1ec00 <init_chip_pins+0x50>)
   1ebd6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   1ebd8:	1d3b      	adds	r3, r7, #4
   1ebda:	0019      	movs	r1, r3
   1ebdc:	2028      	movs	r0, #40	; 0x28
   1ebde:	4b08      	ldr	r3, [pc, #32]	; (1ec00 <init_chip_pins+0x50>)
   1ebe0:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1ebe2:	2100      	movs	r1, #0
   1ebe4:	201c      	movs	r0, #28
   1ebe6:	4b07      	ldr	r3, [pc, #28]	; (1ec04 <init_chip_pins+0x54>)
   1ebe8:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1ebea:	2100      	movs	r1, #0
   1ebec:	201b      	movs	r0, #27
   1ebee:	4b05      	ldr	r3, [pc, #20]	; (1ec04 <init_chip_pins+0x54>)
   1ebf0:	4798      	blx	r3
}
   1ebf2:	46c0      	nop			; (mov r8, r8)
   1ebf4:	46bd      	mov	sp, r7
   1ebf6:	b002      	add	sp, #8
   1ebf8:	bd80      	pop	{r7, pc}
   1ebfa:	46c0      	nop			; (mov r8, r8)
   1ebfc:	0001eb1d 	.word	0x0001eb1d
   1ec00:	0002533d 	.word	0x0002533d
   1ec04:	0001eb41 	.word	0x0001eb41

0001ec08 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   1ec08:	b580      	push	{r7, lr}
   1ec0a:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   1ec0c:	4b0b      	ldr	r3, [pc, #44]	; (1ec3c <nm_bsp_init+0x34>)
   1ec0e:	2200      	movs	r2, #0
   1ec10:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   1ec12:	4b0b      	ldr	r3, [pc, #44]	; (1ec40 <nm_bsp_init+0x38>)
   1ec14:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   1ec16:	4b0b      	ldr	r3, [pc, #44]	; (1ec44 <nm_bsp_init+0x3c>)
   1ec18:	681b      	ldr	r3, [r3, #0]
   1ec1a:	2201      	movs	r2, #1
   1ec1c:	4013      	ands	r3, r2
   1ec1e:	d004      	beq.n	1ec2a <nm_bsp_init+0x22>
   1ec20:	4b08      	ldr	r3, [pc, #32]	; (1ec44 <nm_bsp_init+0x3c>)
   1ec22:	681b      	ldr	r3, [r3, #0]
   1ec24:	2202      	movs	r2, #2
   1ec26:	4013      	ands	r3, r2
   1ec28:	d101      	bne.n	1ec2e <nm_bsp_init+0x26>
	    delay_init();
   1ec2a:	4b07      	ldr	r3, [pc, #28]	; (1ec48 <nm_bsp_init+0x40>)
   1ec2c:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   1ec2e:	4b07      	ldr	r3, [pc, #28]	; (1ec4c <nm_bsp_init+0x44>)
   1ec30:	4798      	blx	r3

	return M2M_SUCCESS;
   1ec32:	2300      	movs	r3, #0
}
   1ec34:	0018      	movs	r0, r3
   1ec36:	46bd      	mov	sp, r7
   1ec38:	bd80      	pop	{r7, pc}
   1ec3a:	46c0      	nop			; (mov r8, r8)
   1ec3c:	20004118 	.word	0x20004118
   1ec40:	0001ebb1 	.word	0x0001ebb1
   1ec44:	e000e010 	.word	0xe000e010
   1ec48:	0001e9f5 	.word	0x0001e9f5
   1ec4c:	0001eadd 	.word	0x0001eadd

0001ec50 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   1ec50:	b580      	push	{r7, lr}
   1ec52:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   1ec54:	2100      	movs	r1, #0
   1ec56:	201c      	movs	r0, #28
   1ec58:	4b0b      	ldr	r3, [pc, #44]	; (1ec88 <nm_bsp_reset+0x38>)
   1ec5a:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   1ec5c:	2100      	movs	r1, #0
   1ec5e:	201b      	movs	r0, #27
   1ec60:	4b09      	ldr	r3, [pc, #36]	; (1ec88 <nm_bsp_reset+0x38>)
   1ec62:	4798      	blx	r3
	nm_bsp_sleep(1);
   1ec64:	2001      	movs	r0, #1
   1ec66:	4b09      	ldr	r3, [pc, #36]	; (1ec8c <nm_bsp_reset+0x3c>)
   1ec68:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   1ec6a:	2101      	movs	r1, #1
   1ec6c:	201c      	movs	r0, #28
   1ec6e:	4b06      	ldr	r3, [pc, #24]	; (1ec88 <nm_bsp_reset+0x38>)
   1ec70:	4798      	blx	r3
	nm_bsp_sleep(10);
   1ec72:	200a      	movs	r0, #10
   1ec74:	4b05      	ldr	r3, [pc, #20]	; (1ec8c <nm_bsp_reset+0x3c>)
   1ec76:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   1ec78:	2101      	movs	r1, #1
   1ec7a:	201b      	movs	r0, #27
   1ec7c:	4b02      	ldr	r3, [pc, #8]	; (1ec88 <nm_bsp_reset+0x38>)
   1ec7e:	4798      	blx	r3
}
   1ec80:	46c0      	nop			; (mov r8, r8)
   1ec82:	46bd      	mov	sp, r7
   1ec84:	bd80      	pop	{r7, pc}
   1ec86:	46c0      	nop			; (mov r8, r8)
   1ec88:	0001eb41 	.word	0x0001eb41
   1ec8c:	0001ec91 	.word	0x0001ec91

0001ec90 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   1ec90:	b580      	push	{r7, lr}
   1ec92:	b082      	sub	sp, #8
   1ec94:	af00      	add	r7, sp, #0
   1ec96:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   1ec98:	687b      	ldr	r3, [r7, #4]
   1ec9a:	0018      	movs	r0, r3
   1ec9c:	4b02      	ldr	r3, [pc, #8]	; (1eca8 <nm_bsp_sleep+0x18>)
   1ec9e:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   1eca0:	46c0      	nop			; (mov r8, r8)
   1eca2:	46bd      	mov	sp, r7
   1eca4:	b002      	add	sp, #8
   1eca6:	bd80      	pop	{r7, pc}
   1eca8:	0001aa41 	.word	0x0001aa41

0001ecac <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   1ecac:	b580      	push	{r7, lr}
   1ecae:	b086      	sub	sp, #24
   1ecb0:	af00      	add	r7, sp, #0
   1ecb2:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   1ecb4:	4b15      	ldr	r3, [pc, #84]	; (1ed0c <nm_bsp_register_isr+0x60>)
   1ecb6:	687a      	ldr	r2, [r7, #4]
   1ecb8:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   1ecba:	230c      	movs	r3, #12
   1ecbc:	18fb      	adds	r3, r7, r3
   1ecbe:	0018      	movs	r0, r3
   1ecc0:	4b13      	ldr	r3, [pc, #76]	; (1ed10 <nm_bsp_register_isr+0x64>)
   1ecc2:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   1ecc4:	230c      	movs	r3, #12
   1ecc6:	18fb      	adds	r3, r7, r3
   1ecc8:	2229      	movs	r2, #41	; 0x29
   1ecca:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   1eccc:	230c      	movs	r3, #12
   1ecce:	18fb      	adds	r3, r7, r3
   1ecd0:	2200      	movs	r2, #0
   1ecd2:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   1ecd4:	230c      	movs	r3, #12
   1ecd6:	18fb      	adds	r3, r7, r3
   1ecd8:	2201      	movs	r2, #1
   1ecda:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   1ecdc:	230c      	movs	r3, #12
   1ecde:	18fb      	adds	r3, r7, r3
   1ece0:	2202      	movs	r2, #2
   1ece2:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   1ece4:	230c      	movs	r3, #12
   1ece6:	18fb      	adds	r3, r7, r3
   1ece8:	0019      	movs	r1, r3
   1ecea:	2009      	movs	r0, #9
   1ecec:	4b09      	ldr	r3, [pc, #36]	; (1ed14 <nm_bsp_register_isr+0x68>)
   1ecee:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   1ecf0:	4b09      	ldr	r3, [pc, #36]	; (1ed18 <nm_bsp_register_isr+0x6c>)
   1ecf2:	2200      	movs	r2, #0
   1ecf4:	2109      	movs	r1, #9
   1ecf6:	0018      	movs	r0, r3
   1ecf8:	4b08      	ldr	r3, [pc, #32]	; (1ed1c <nm_bsp_register_isr+0x70>)
   1ecfa:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1ecfc:	2100      	movs	r1, #0
   1ecfe:	2009      	movs	r0, #9
   1ed00:	4b07      	ldr	r3, [pc, #28]	; (1ed20 <nm_bsp_register_isr+0x74>)
   1ed02:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   1ed04:	46c0      	nop			; (mov r8, r8)
   1ed06:	46bd      	mov	sp, r7
   1ed08:	b006      	add	sp, #24
   1ed0a:	bd80      	pop	{r7, pc}
   1ed0c:	20004118 	.word	0x20004118
   1ed10:	000251e5 	.word	0x000251e5
   1ed14:	00025219 	.word	0x00025219
   1ed18:	0001eb95 	.word	0x0001eb95
   1ed1c:	00024de5 	.word	0x00024de5
   1ed20:	00024e49 	.word	0x00024e49

0001ed24 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   1ed24:	b580      	push	{r7, lr}
   1ed26:	b082      	sub	sp, #8
   1ed28:	af00      	add	r7, sp, #0
   1ed2a:	0002      	movs	r2, r0
   1ed2c:	1dfb      	adds	r3, r7, #7
   1ed2e:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   1ed30:	1dfb      	adds	r3, r7, #7
   1ed32:	781b      	ldrb	r3, [r3, #0]
   1ed34:	2b00      	cmp	r3, #0
   1ed36:	d004      	beq.n	1ed42 <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   1ed38:	2100      	movs	r1, #0
   1ed3a:	2009      	movs	r0, #9
   1ed3c:	4b05      	ldr	r3, [pc, #20]	; (1ed54 <nm_bsp_interrupt_ctrl+0x30>)
   1ed3e:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   1ed40:	e003      	b.n	1ed4a <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   1ed42:	2100      	movs	r1, #0
   1ed44:	2009      	movs	r0, #9
   1ed46:	4b04      	ldr	r3, [pc, #16]	; (1ed58 <nm_bsp_interrupt_ctrl+0x34>)
   1ed48:	4798      	blx	r3
}
   1ed4a:	46c0      	nop			; (mov r8, r8)
   1ed4c:	46bd      	mov	sp, r7
   1ed4e:	b002      	add	sp, #8
   1ed50:	bd80      	pop	{r7, pc}
   1ed52:	46c0      	nop			; (mov r8, r8)
   1ed54:	00024e49 	.word	0x00024e49
   1ed58:	00024e91 	.word	0x00024e91

0001ed5c <system_pinmux_get_group_from_gpio_pin>:
{
   1ed5c:	b580      	push	{r7, lr}
   1ed5e:	b084      	sub	sp, #16
   1ed60:	af00      	add	r7, sp, #0
   1ed62:	0002      	movs	r2, r0
   1ed64:	1dfb      	adds	r3, r7, #7
   1ed66:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1ed68:	230f      	movs	r3, #15
   1ed6a:	18fb      	adds	r3, r7, r3
   1ed6c:	1dfa      	adds	r2, r7, #7
   1ed6e:	7812      	ldrb	r2, [r2, #0]
   1ed70:	09d2      	lsrs	r2, r2, #7
   1ed72:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   1ed74:	230e      	movs	r3, #14
   1ed76:	18fb      	adds	r3, r7, r3
   1ed78:	1dfa      	adds	r2, r7, #7
   1ed7a:	7812      	ldrb	r2, [r2, #0]
   1ed7c:	0952      	lsrs	r2, r2, #5
   1ed7e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   1ed80:	4b0d      	ldr	r3, [pc, #52]	; (1edb8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   1ed82:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   1ed84:	230f      	movs	r3, #15
   1ed86:	18fb      	adds	r3, r7, r3
   1ed88:	781b      	ldrb	r3, [r3, #0]
   1ed8a:	2b00      	cmp	r3, #0
   1ed8c:	d10f      	bne.n	1edae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   1ed8e:	230f      	movs	r3, #15
   1ed90:	18fb      	adds	r3, r7, r3
   1ed92:	781b      	ldrb	r3, [r3, #0]
   1ed94:	009b      	lsls	r3, r3, #2
   1ed96:	2210      	movs	r2, #16
   1ed98:	4694      	mov	ip, r2
   1ed9a:	44bc      	add	ip, r7
   1ed9c:	4463      	add	r3, ip
   1ed9e:	3b08      	subs	r3, #8
   1eda0:	681a      	ldr	r2, [r3, #0]
   1eda2:	230e      	movs	r3, #14
   1eda4:	18fb      	adds	r3, r7, r3
   1eda6:	781b      	ldrb	r3, [r3, #0]
   1eda8:	01db      	lsls	r3, r3, #7
   1edaa:	18d3      	adds	r3, r2, r3
   1edac:	e000      	b.n	1edb0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   1edae:	2300      	movs	r3, #0
}
   1edb0:	0018      	movs	r0, r3
   1edb2:	46bd      	mov	sp, r7
   1edb4:	b004      	add	sp, #16
   1edb6:	bd80      	pop	{r7, pc}
   1edb8:	41004400 	.word	0x41004400

0001edbc <system_interrupt_enable>:
{
   1edbc:	b580      	push	{r7, lr}
   1edbe:	b082      	sub	sp, #8
   1edc0:	af00      	add	r7, sp, #0
   1edc2:	0002      	movs	r2, r0
   1edc4:	1dfb      	adds	r3, r7, #7
   1edc6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1edc8:	4b06      	ldr	r3, [pc, #24]	; (1ede4 <system_interrupt_enable+0x28>)
   1edca:	1dfa      	adds	r2, r7, #7
   1edcc:	7812      	ldrb	r2, [r2, #0]
   1edce:	0011      	movs	r1, r2
   1edd0:	221f      	movs	r2, #31
   1edd2:	400a      	ands	r2, r1
   1edd4:	2101      	movs	r1, #1
   1edd6:	4091      	lsls	r1, r2
   1edd8:	000a      	movs	r2, r1
   1edda:	601a      	str	r2, [r3, #0]
}
   1eddc:	46c0      	nop			; (mov r8, r8)
   1edde:	46bd      	mov	sp, r7
   1ede0:	b002      	add	sp, #8
   1ede2:	bd80      	pop	{r7, pc}
   1ede4:	e000e100 	.word	0xe000e100

0001ede8 <system_interrupt_disable>:
{
   1ede8:	b580      	push	{r7, lr}
   1edea:	b082      	sub	sp, #8
   1edec:	af00      	add	r7, sp, #0
   1edee:	0002      	movs	r2, r0
   1edf0:	1dfb      	adds	r3, r7, #7
   1edf2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1edf4:	4a07      	ldr	r2, [pc, #28]	; (1ee14 <system_interrupt_disable+0x2c>)
   1edf6:	1dfb      	adds	r3, r7, #7
   1edf8:	781b      	ldrb	r3, [r3, #0]
   1edfa:	0019      	movs	r1, r3
   1edfc:	231f      	movs	r3, #31
   1edfe:	400b      	ands	r3, r1
   1ee00:	2101      	movs	r1, #1
   1ee02:	4099      	lsls	r1, r3
   1ee04:	000b      	movs	r3, r1
   1ee06:	0019      	movs	r1, r3
   1ee08:	2380      	movs	r3, #128	; 0x80
   1ee0a:	50d1      	str	r1, [r2, r3]
}
   1ee0c:	46c0      	nop			; (mov r8, r8)
   1ee0e:	46bd      	mov	sp, r7
   1ee10:	b002      	add	sp, #8
   1ee12:	bd80      	pop	{r7, pc}
   1ee14:	e000e100 	.word	0xe000e100

0001ee18 <port_get_group_from_gpio_pin>:
{
   1ee18:	b580      	push	{r7, lr}
   1ee1a:	b082      	sub	sp, #8
   1ee1c:	af00      	add	r7, sp, #0
   1ee1e:	0002      	movs	r2, r0
   1ee20:	1dfb      	adds	r3, r7, #7
   1ee22:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1ee24:	1dfb      	adds	r3, r7, #7
   1ee26:	781b      	ldrb	r3, [r3, #0]
   1ee28:	0018      	movs	r0, r3
   1ee2a:	4b03      	ldr	r3, [pc, #12]	; (1ee38 <port_get_group_from_gpio_pin+0x20>)
   1ee2c:	4798      	blx	r3
   1ee2e:	0003      	movs	r3, r0
}
   1ee30:	0018      	movs	r0, r3
   1ee32:	46bd      	mov	sp, r7
   1ee34:	b002      	add	sp, #8
   1ee36:	bd80      	pop	{r7, pc}
   1ee38:	0001ed5d 	.word	0x0001ed5d

0001ee3c <port_get_config_defaults>:
{
   1ee3c:	b580      	push	{r7, lr}
   1ee3e:	b082      	sub	sp, #8
   1ee40:	af00      	add	r7, sp, #0
   1ee42:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   1ee44:	687b      	ldr	r3, [r7, #4]
   1ee46:	2200      	movs	r2, #0
   1ee48:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   1ee4a:	687b      	ldr	r3, [r7, #4]
   1ee4c:	2201      	movs	r2, #1
   1ee4e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   1ee50:	687b      	ldr	r3, [r7, #4]
   1ee52:	2200      	movs	r2, #0
   1ee54:	709a      	strb	r2, [r3, #2]
}
   1ee56:	46c0      	nop			; (mov r8, r8)
   1ee58:	46bd      	mov	sp, r7
   1ee5a:	b002      	add	sp, #8
   1ee5c:	bd80      	pop	{r7, pc}
	...

0001ee60 <port_pin_set_output_level>:
{
   1ee60:	b580      	push	{r7, lr}
   1ee62:	b084      	sub	sp, #16
   1ee64:	af00      	add	r7, sp, #0
   1ee66:	0002      	movs	r2, r0
   1ee68:	1dfb      	adds	r3, r7, #7
   1ee6a:	701a      	strb	r2, [r3, #0]
   1ee6c:	1dbb      	adds	r3, r7, #6
   1ee6e:	1c0a      	adds	r2, r1, #0
   1ee70:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   1ee72:	1dfb      	adds	r3, r7, #7
   1ee74:	781b      	ldrb	r3, [r3, #0]
   1ee76:	0018      	movs	r0, r3
   1ee78:	4b0d      	ldr	r3, [pc, #52]	; (1eeb0 <port_pin_set_output_level+0x50>)
   1ee7a:	4798      	blx	r3
   1ee7c:	0003      	movs	r3, r0
   1ee7e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   1ee80:	1dfb      	adds	r3, r7, #7
   1ee82:	781b      	ldrb	r3, [r3, #0]
   1ee84:	221f      	movs	r2, #31
   1ee86:	4013      	ands	r3, r2
   1ee88:	2201      	movs	r2, #1
   1ee8a:	409a      	lsls	r2, r3
   1ee8c:	0013      	movs	r3, r2
   1ee8e:	60bb      	str	r3, [r7, #8]
	if (level) {
   1ee90:	1dbb      	adds	r3, r7, #6
   1ee92:	781b      	ldrb	r3, [r3, #0]
   1ee94:	2b00      	cmp	r3, #0
   1ee96:	d003      	beq.n	1eea0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   1ee98:	68fb      	ldr	r3, [r7, #12]
   1ee9a:	68ba      	ldr	r2, [r7, #8]
   1ee9c:	619a      	str	r2, [r3, #24]
}
   1ee9e:	e002      	b.n	1eea6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   1eea0:	68fb      	ldr	r3, [r7, #12]
   1eea2:	68ba      	ldr	r2, [r7, #8]
   1eea4:	615a      	str	r2, [r3, #20]
}
   1eea6:	46c0      	nop			; (mov r8, r8)
   1eea8:	46bd      	mov	sp, r7
   1eeaa:	b004      	add	sp, #16
   1eeac:	bd80      	pop	{r7, pc}
   1eeae:	46c0      	nop			; (mov r8, r8)
   1eeb0:	0001ee19 	.word	0x0001ee19

0001eeb4 <spi_is_syncing>:
{
   1eeb4:	b580      	push	{r7, lr}
   1eeb6:	b084      	sub	sp, #16
   1eeb8:	af00      	add	r7, sp, #0
   1eeba:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1eebc:	687b      	ldr	r3, [r7, #4]
   1eebe:	681b      	ldr	r3, [r3, #0]
   1eec0:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   1eec2:	68fb      	ldr	r3, [r7, #12]
   1eec4:	69db      	ldr	r3, [r3, #28]
   1eec6:	1e5a      	subs	r2, r3, #1
   1eec8:	4193      	sbcs	r3, r2
   1eeca:	b2db      	uxtb	r3, r3
}
   1eecc:	0018      	movs	r0, r3
   1eece:	46bd      	mov	sp, r7
   1eed0:	b004      	add	sp, #16
   1eed2:	bd80      	pop	{r7, pc}

0001eed4 <spi_get_config_defaults>:
{
   1eed4:	b580      	push	{r7, lr}
   1eed6:	b082      	sub	sp, #8
   1eed8:	af00      	add	r7, sp, #0
   1eeda:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   1eedc:	687b      	ldr	r3, [r7, #4]
   1eede:	2201      	movs	r2, #1
   1eee0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   1eee2:	687b      	ldr	r3, [r7, #4]
   1eee4:	2200      	movs	r2, #0
   1eee6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   1eee8:	687b      	ldr	r3, [r7, #4]
   1eeea:	2200      	movs	r2, #0
   1eeec:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   1eeee:	687b      	ldr	r3, [r7, #4]
   1eef0:	22c0      	movs	r2, #192	; 0xc0
   1eef2:	0392      	lsls	r2, r2, #14
   1eef4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   1eef6:	687b      	ldr	r3, [r7, #4]
   1eef8:	2200      	movs	r2, #0
   1eefa:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   1eefc:	687b      	ldr	r3, [r7, #4]
   1eefe:	2200      	movs	r2, #0
   1ef00:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   1ef02:	687b      	ldr	r3, [r7, #4]
   1ef04:	2201      	movs	r2, #1
   1ef06:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   1ef08:	687b      	ldr	r3, [r7, #4]
   1ef0a:	2201      	movs	r2, #1
   1ef0c:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   1ef0e:	687b      	ldr	r3, [r7, #4]
   1ef10:	2200      	movs	r2, #0
   1ef12:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   1ef14:	687b      	ldr	r3, [r7, #4]
   1ef16:	2224      	movs	r2, #36	; 0x24
   1ef18:	2100      	movs	r1, #0
   1ef1a:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   1ef1c:	687b      	ldr	r3, [r7, #4]
   1ef1e:	3318      	adds	r3, #24
   1ef20:	220c      	movs	r2, #12
   1ef22:	2100      	movs	r1, #0
   1ef24:	0018      	movs	r0, r3
   1ef26:	4b0a      	ldr	r3, [pc, #40]	; (1ef50 <spi_get_config_defaults+0x7c>)
   1ef28:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   1ef2a:	687b      	ldr	r3, [r7, #4]
   1ef2c:	4a09      	ldr	r2, [pc, #36]	; (1ef54 <spi_get_config_defaults+0x80>)
   1ef2e:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   1ef30:	687b      	ldr	r3, [r7, #4]
   1ef32:	2200      	movs	r2, #0
   1ef34:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   1ef36:	687b      	ldr	r3, [r7, #4]
   1ef38:	2200      	movs	r2, #0
   1ef3a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   1ef3c:	687b      	ldr	r3, [r7, #4]
   1ef3e:	2200      	movs	r2, #0
   1ef40:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   1ef42:	687b      	ldr	r3, [r7, #4]
   1ef44:	2200      	movs	r2, #0
   1ef46:	635a      	str	r2, [r3, #52]	; 0x34
};
   1ef48:	46c0      	nop			; (mov r8, r8)
   1ef4a:	46bd      	mov	sp, r7
   1ef4c:	b002      	add	sp, #8
   1ef4e:	bd80      	pop	{r7, pc}
   1ef50:	0003319f 	.word	0x0003319f
   1ef54:	000186a0 	.word	0x000186a0

0001ef58 <spi_slave_inst_get_config_defaults>:
{
   1ef58:	b580      	push	{r7, lr}
   1ef5a:	b082      	sub	sp, #8
   1ef5c:	af00      	add	r7, sp, #0
   1ef5e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   1ef60:	687b      	ldr	r3, [r7, #4]
   1ef62:	220a      	movs	r2, #10
   1ef64:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   1ef66:	687b      	ldr	r3, [r7, #4]
   1ef68:	2200      	movs	r2, #0
   1ef6a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   1ef6c:	687b      	ldr	r3, [r7, #4]
   1ef6e:	2200      	movs	r2, #0
   1ef70:	709a      	strb	r2, [r3, #2]
}
   1ef72:	46c0      	nop			; (mov r8, r8)
   1ef74:	46bd      	mov	sp, r7
   1ef76:	b002      	add	sp, #8
   1ef78:	bd80      	pop	{r7, pc}
	...

0001ef7c <spi_attach_slave>:
{
   1ef7c:	b580      	push	{r7, lr}
   1ef7e:	b084      	sub	sp, #16
   1ef80:	af00      	add	r7, sp, #0
   1ef82:	6078      	str	r0, [r7, #4]
   1ef84:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   1ef86:	683b      	ldr	r3, [r7, #0]
   1ef88:	781a      	ldrb	r2, [r3, #0]
   1ef8a:	687b      	ldr	r3, [r7, #4]
   1ef8c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   1ef8e:	683b      	ldr	r3, [r7, #0]
   1ef90:	785a      	ldrb	r2, [r3, #1]
   1ef92:	687b      	ldr	r3, [r7, #4]
   1ef94:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   1ef96:	683b      	ldr	r3, [r7, #0]
   1ef98:	789a      	ldrb	r2, [r3, #2]
   1ef9a:	687b      	ldr	r3, [r7, #4]
   1ef9c:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   1ef9e:	230c      	movs	r3, #12
   1efa0:	18fb      	adds	r3, r7, r3
   1efa2:	0018      	movs	r0, r3
   1efa4:	4b0b      	ldr	r3, [pc, #44]	; (1efd4 <spi_attach_slave+0x58>)
   1efa6:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   1efa8:	230c      	movs	r3, #12
   1efaa:	18fb      	adds	r3, r7, r3
   1efac:	2201      	movs	r2, #1
   1efae:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   1efb0:	687b      	ldr	r3, [r7, #4]
   1efb2:	781b      	ldrb	r3, [r3, #0]
   1efb4:	220c      	movs	r2, #12
   1efb6:	18ba      	adds	r2, r7, r2
   1efb8:	0011      	movs	r1, r2
   1efba:	0018      	movs	r0, r3
   1efbc:	4b06      	ldr	r3, [pc, #24]	; (1efd8 <spi_attach_slave+0x5c>)
   1efbe:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   1efc0:	687b      	ldr	r3, [r7, #4]
   1efc2:	781b      	ldrb	r3, [r3, #0]
   1efc4:	2101      	movs	r1, #1
   1efc6:	0018      	movs	r0, r3
   1efc8:	4b04      	ldr	r3, [pc, #16]	; (1efdc <spi_attach_slave+0x60>)
   1efca:	4798      	blx	r3
}
   1efcc:	46c0      	nop			; (mov r8, r8)
   1efce:	46bd      	mov	sp, r7
   1efd0:	b004      	add	sp, #16
   1efd2:	bd80      	pop	{r7, pc}
   1efd4:	0001ee3d 	.word	0x0001ee3d
   1efd8:	0002533d 	.word	0x0002533d
   1efdc:	0001ee61 	.word	0x0001ee61

0001efe0 <spi_enable>:
{
   1efe0:	b580      	push	{r7, lr}
   1efe2:	b084      	sub	sp, #16
   1efe4:	af00      	add	r7, sp, #0
   1efe6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   1efe8:	687b      	ldr	r3, [r7, #4]
   1efea:	681b      	ldr	r3, [r3, #0]
   1efec:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1efee:	687b      	ldr	r3, [r7, #4]
   1eff0:	681b      	ldr	r3, [r3, #0]
   1eff2:	0018      	movs	r0, r3
   1eff4:	4b0b      	ldr	r3, [pc, #44]	; (1f024 <spi_enable+0x44>)
   1eff6:	4798      	blx	r3
   1eff8:	0003      	movs	r3, r0
   1effa:	0018      	movs	r0, r3
   1effc:	4b0a      	ldr	r3, [pc, #40]	; (1f028 <spi_enable+0x48>)
   1effe:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   1f000:	46c0      	nop			; (mov r8, r8)
   1f002:	687b      	ldr	r3, [r7, #4]
   1f004:	0018      	movs	r0, r3
   1f006:	4b09      	ldr	r3, [pc, #36]	; (1f02c <spi_enable+0x4c>)
   1f008:	4798      	blx	r3
   1f00a:	1e03      	subs	r3, r0, #0
   1f00c:	d1f9      	bne.n	1f002 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   1f00e:	68fb      	ldr	r3, [r7, #12]
   1f010:	681b      	ldr	r3, [r3, #0]
   1f012:	2202      	movs	r2, #2
   1f014:	431a      	orrs	r2, r3
   1f016:	68fb      	ldr	r3, [r7, #12]
   1f018:	601a      	str	r2, [r3, #0]
}
   1f01a:	46c0      	nop			; (mov r8, r8)
   1f01c:	46bd      	mov	sp, r7
   1f01e:	b004      	add	sp, #16
   1f020:	bd80      	pop	{r7, pc}
   1f022:	46c0      	nop			; (mov r8, r8)
   1f024:	0002600d 	.word	0x0002600d
   1f028:	0001edbd 	.word	0x0001edbd
   1f02c:	0001eeb5 	.word	0x0001eeb5

0001f030 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   1f030:	b580      	push	{r7, lr}
   1f032:	b084      	sub	sp, #16
   1f034:	af00      	add	r7, sp, #0
   1f036:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f038:	687b      	ldr	r3, [r7, #4]
   1f03a:	681b      	ldr	r3, [r3, #0]
   1f03c:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   1f03e:	687b      	ldr	r3, [r7, #4]
   1f040:	681b      	ldr	r3, [r3, #0]
   1f042:	0018      	movs	r0, r3
   1f044:	4b0e      	ldr	r3, [pc, #56]	; (1f080 <spi_disable+0x50>)
   1f046:	4798      	blx	r3
   1f048:	0003      	movs	r3, r0
   1f04a:	0018      	movs	r0, r3
   1f04c:	4b0d      	ldr	r3, [pc, #52]	; (1f084 <spi_disable+0x54>)
   1f04e:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   1f050:	46c0      	nop			; (mov r8, r8)
   1f052:	687b      	ldr	r3, [r7, #4]
   1f054:	0018      	movs	r0, r3
   1f056:	4b0c      	ldr	r3, [pc, #48]	; (1f088 <spi_disable+0x58>)
   1f058:	4798      	blx	r3
   1f05a:	1e03      	subs	r3, r0, #0
   1f05c:	d1f9      	bne.n	1f052 <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   1f05e:	68fb      	ldr	r3, [r7, #12]
   1f060:	228f      	movs	r2, #143	; 0x8f
   1f062:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   1f064:	68fb      	ldr	r3, [r7, #12]
   1f066:	228f      	movs	r2, #143	; 0x8f
   1f068:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   1f06a:	68fb      	ldr	r3, [r7, #12]
   1f06c:	681b      	ldr	r3, [r3, #0]
   1f06e:	2202      	movs	r2, #2
   1f070:	4393      	bics	r3, r2
   1f072:	001a      	movs	r2, r3
   1f074:	68fb      	ldr	r3, [r7, #12]
   1f076:	601a      	str	r2, [r3, #0]
}
   1f078:	46c0      	nop			; (mov r8, r8)
   1f07a:	46bd      	mov	sp, r7
   1f07c:	b004      	add	sp, #16
   1f07e:	bd80      	pop	{r7, pc}
   1f080:	0002600d 	.word	0x0002600d
   1f084:	0001ede9 	.word	0x0001ede9
   1f088:	0001eeb5 	.word	0x0001eeb5

0001f08c <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   1f08c:	b580      	push	{r7, lr}
   1f08e:	b084      	sub	sp, #16
   1f090:	af00      	add	r7, sp, #0
   1f092:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f094:	687b      	ldr	r3, [r7, #4]
   1f096:	681b      	ldr	r3, [r3, #0]
   1f098:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   1f09a:	68fb      	ldr	r3, [r7, #12]
   1f09c:	7e1b      	ldrb	r3, [r3, #24]
   1f09e:	b2db      	uxtb	r3, r3
   1f0a0:	001a      	movs	r2, r3
   1f0a2:	2302      	movs	r3, #2
   1f0a4:	4013      	ands	r3, r2
   1f0a6:	1e5a      	subs	r2, r3, #1
   1f0a8:	4193      	sbcs	r3, r2
   1f0aa:	b2db      	uxtb	r3, r3
}
   1f0ac:	0018      	movs	r0, r3
   1f0ae:	46bd      	mov	sp, r7
   1f0b0:	b004      	add	sp, #16
   1f0b2:	bd80      	pop	{r7, pc}

0001f0b4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   1f0b4:	b580      	push	{r7, lr}
   1f0b6:	b084      	sub	sp, #16
   1f0b8:	af00      	add	r7, sp, #0
   1f0ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f0bc:	687b      	ldr	r3, [r7, #4]
   1f0be:	681b      	ldr	r3, [r3, #0]
   1f0c0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   1f0c2:	68fb      	ldr	r3, [r7, #12]
   1f0c4:	7e1b      	ldrb	r3, [r3, #24]
   1f0c6:	b2db      	uxtb	r3, r3
   1f0c8:	001a      	movs	r2, r3
   1f0ca:	2301      	movs	r3, #1
   1f0cc:	4013      	ands	r3, r2
   1f0ce:	1e5a      	subs	r2, r3, #1
   1f0d0:	4193      	sbcs	r3, r2
   1f0d2:	b2db      	uxtb	r3, r3
}
   1f0d4:	0018      	movs	r0, r3
   1f0d6:	46bd      	mov	sp, r7
   1f0d8:	b004      	add	sp, #16
   1f0da:	bd80      	pop	{r7, pc}

0001f0dc <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   1f0dc:	b580      	push	{r7, lr}
   1f0de:	b084      	sub	sp, #16
   1f0e0:	af00      	add	r7, sp, #0
   1f0e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f0e4:	687b      	ldr	r3, [r7, #4]
   1f0e6:	681b      	ldr	r3, [r3, #0]
   1f0e8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   1f0ea:	68fb      	ldr	r3, [r7, #12]
   1f0ec:	7e1b      	ldrb	r3, [r3, #24]
   1f0ee:	b2db      	uxtb	r3, r3
   1f0f0:	001a      	movs	r2, r3
   1f0f2:	2304      	movs	r3, #4
   1f0f4:	4013      	ands	r3, r2
   1f0f6:	1e5a      	subs	r2, r3, #1
   1f0f8:	4193      	sbcs	r3, r2
   1f0fa:	b2db      	uxtb	r3, r3
}
   1f0fc:	0018      	movs	r0, r3
   1f0fe:	46bd      	mov	sp, r7
   1f100:	b004      	add	sp, #16
   1f102:	bd80      	pop	{r7, pc}

0001f104 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   1f104:	b580      	push	{r7, lr}
   1f106:	b084      	sub	sp, #16
   1f108:	af00      	add	r7, sp, #0
   1f10a:	6078      	str	r0, [r7, #4]
   1f10c:	000a      	movs	r2, r1
   1f10e:	1cbb      	adds	r3, r7, #2
   1f110:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f112:	687b      	ldr	r3, [r7, #4]
   1f114:	681b      	ldr	r3, [r3, #0]
   1f116:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   1f118:	687b      	ldr	r3, [r7, #4]
   1f11a:	0018      	movs	r0, r3
   1f11c:	4b0a      	ldr	r3, [pc, #40]	; (1f148 <spi_write+0x44>)
   1f11e:	4798      	blx	r3
   1f120:	0003      	movs	r3, r0
   1f122:	001a      	movs	r2, r3
   1f124:	2301      	movs	r3, #1
   1f126:	4053      	eors	r3, r2
   1f128:	b2db      	uxtb	r3, r3
   1f12a:	2b00      	cmp	r3, #0
   1f12c:	d001      	beq.n	1f132 <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   1f12e:	2305      	movs	r3, #5
   1f130:	e006      	b.n	1f140 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   1f132:	1cbb      	adds	r3, r7, #2
   1f134:	881b      	ldrh	r3, [r3, #0]
   1f136:	05db      	lsls	r3, r3, #23
   1f138:	0dda      	lsrs	r2, r3, #23
   1f13a:	68fb      	ldr	r3, [r7, #12]
   1f13c:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   1f13e:	2300      	movs	r3, #0
}
   1f140:	0018      	movs	r0, r3
   1f142:	46bd      	mov	sp, r7
   1f144:	b004      	add	sp, #16
   1f146:	bd80      	pop	{r7, pc}
   1f148:	0001f0b5 	.word	0x0001f0b5

0001f14c <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   1f14c:	b580      	push	{r7, lr}
   1f14e:	b084      	sub	sp, #16
   1f150:	af00      	add	r7, sp, #0
   1f152:	6078      	str	r0, [r7, #4]
   1f154:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   1f156:	687b      	ldr	r3, [r7, #4]
   1f158:	681b      	ldr	r3, [r3, #0]
   1f15a:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   1f15c:	687b      	ldr	r3, [r7, #4]
   1f15e:	0018      	movs	r0, r3
   1f160:	4b1b      	ldr	r3, [pc, #108]	; (1f1d0 <spi_read+0x84>)
   1f162:	4798      	blx	r3
   1f164:	0003      	movs	r3, r0
   1f166:	001a      	movs	r2, r3
   1f168:	2301      	movs	r3, #1
   1f16a:	4053      	eors	r3, r2
   1f16c:	b2db      	uxtb	r3, r3
   1f16e:	2b00      	cmp	r3, #0
   1f170:	d001      	beq.n	1f176 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   1f172:	2310      	movs	r3, #16
   1f174:	e027      	b.n	1f1c6 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   1f176:	230f      	movs	r3, #15
   1f178:	18fb      	adds	r3, r7, r3
   1f17a:	2200      	movs	r2, #0
   1f17c:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   1f17e:	68bb      	ldr	r3, [r7, #8]
   1f180:	8b5b      	ldrh	r3, [r3, #26]
   1f182:	b29b      	uxth	r3, r3
   1f184:	001a      	movs	r2, r3
   1f186:	2304      	movs	r3, #4
   1f188:	4013      	ands	r3, r2
   1f18a:	d006      	beq.n	1f19a <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   1f18c:	230f      	movs	r3, #15
   1f18e:	18fb      	adds	r3, r7, r3
   1f190:	221e      	movs	r2, #30
   1f192:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   1f194:	68bb      	ldr	r3, [r7, #8]
   1f196:	2204      	movs	r2, #4
   1f198:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   1f19a:	687b      	ldr	r3, [r7, #4]
   1f19c:	799b      	ldrb	r3, [r3, #6]
   1f19e:	2b01      	cmp	r3, #1
   1f1a0:	d108      	bne.n	1f1b4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   1f1a2:	68bb      	ldr	r3, [r7, #8]
   1f1a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f1a6:	b29b      	uxth	r3, r3
   1f1a8:	05db      	lsls	r3, r3, #23
   1f1aa:	0ddb      	lsrs	r3, r3, #23
   1f1ac:	b29a      	uxth	r2, r3
   1f1ae:	683b      	ldr	r3, [r7, #0]
   1f1b0:	801a      	strh	r2, [r3, #0]
   1f1b2:	e005      	b.n	1f1c0 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   1f1b4:	68bb      	ldr	r3, [r7, #8]
   1f1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1f1b8:	b2db      	uxtb	r3, r3
   1f1ba:	b29a      	uxth	r2, r3
   1f1bc:	683b      	ldr	r3, [r7, #0]
   1f1be:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   1f1c0:	230f      	movs	r3, #15
   1f1c2:	18fb      	adds	r3, r7, r3
   1f1c4:	781b      	ldrb	r3, [r3, #0]
}
   1f1c6:	0018      	movs	r0, r3
   1f1c8:	46bd      	mov	sp, r7
   1f1ca:	b004      	add	sp, #16
   1f1cc:	bd80      	pop	{r7, pc}
   1f1ce:	46c0      	nop			; (mov r8, r8)
   1f1d0:	0001f0dd 	.word	0x0001f0dd

0001f1d4 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   1f1d4:	b580      	push	{r7, lr}
   1f1d6:	b086      	sub	sp, #24
   1f1d8:	af00      	add	r7, sp, #0
   1f1da:	60f8      	str	r0, [r7, #12]
   1f1dc:	60b9      	str	r1, [r7, #8]
   1f1de:	1dbb      	adds	r3, r7, #6
   1f1e0:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   1f1e2:	2313      	movs	r3, #19
   1f1e4:	18fb      	adds	r3, r7, r3
   1f1e6:	22ff      	movs	r2, #255	; 0xff
   1f1e8:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   1f1ea:	2317      	movs	r3, #23
   1f1ec:	18fb      	adds	r3, r7, r3
   1f1ee:	2200      	movs	r2, #0
   1f1f0:	701a      	strb	r2, [r3, #0]
   1f1f2:	2316      	movs	r3, #22
   1f1f4:	18fb      	adds	r3, r7, r3
   1f1f6:	2200      	movs	r2, #0
   1f1f8:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   1f1fa:	2314      	movs	r3, #20
   1f1fc:	18fb      	adds	r3, r7, r3
   1f1fe:	2200      	movs	r2, #0
   1f200:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   1f202:	2310      	movs	r3, #16
   1f204:	18fb      	adds	r3, r7, r3
   1f206:	2200      	movs	r2, #0
   1f208:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   1f20a:	68bb      	ldr	r3, [r7, #8]
   1f20c:	2b00      	cmp	r3, #0
   1f20e:	d102      	bne.n	1f216 <spi_rw+0x42>
   1f210:	68fb      	ldr	r3, [r7, #12]
   1f212:	2b00      	cmp	r3, #0
   1f214:	d003      	beq.n	1f21e <spi_rw+0x4a>
   1f216:	1dbb      	adds	r3, r7, #6
   1f218:	881b      	ldrh	r3, [r3, #0]
   1f21a:	2b00      	cmp	r3, #0
   1f21c:	d102      	bne.n	1f224 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   1f21e:	230f      	movs	r3, #15
   1f220:	425b      	negs	r3, r3
   1f222:	e07e      	b.n	1f322 <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   1f224:	68fb      	ldr	r3, [r7, #12]
   1f226:	2b00      	cmp	r3, #0
   1f228:	d106      	bne.n	1f238 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   1f22a:	2313      	movs	r3, #19
   1f22c:	18fb      	adds	r3, r7, r3
   1f22e:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   1f230:	2317      	movs	r3, #23
   1f232:	18fb      	adds	r3, r7, r3
   1f234:	2201      	movs	r2, #1
   1f236:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   1f238:	68bb      	ldr	r3, [r7, #8]
   1f23a:	2b00      	cmp	r3, #0
   1f23c:	d106      	bne.n	1f24c <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   1f23e:	2313      	movs	r3, #19
   1f240:	18fb      	adds	r3, r7, r3
   1f242:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   1f244:	2316      	movs	r3, #22
   1f246:	18fb      	adds	r3, r7, r3
   1f248:	2201      	movs	r2, #1
   1f24a:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   1f24c:	4937      	ldr	r1, [pc, #220]	; (1f32c <spi_rw+0x158>)
   1f24e:	4b38      	ldr	r3, [pc, #224]	; (1f330 <spi_rw+0x15c>)
   1f250:	2201      	movs	r2, #1
   1f252:	0018      	movs	r0, r3
   1f254:	4b37      	ldr	r3, [pc, #220]	; (1f334 <spi_rw+0x160>)
   1f256:	4798      	blx	r3

	while (u16Sz) {
   1f258:	e04c      	b.n	1f2f4 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   1f25a:	68fb      	ldr	r3, [r7, #12]
   1f25c:	781a      	ldrb	r2, [r3, #0]
   1f25e:	2314      	movs	r3, #20
   1f260:	18fb      	adds	r3, r7, r3
   1f262:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   1f264:	46c0      	nop			; (mov r8, r8)
   1f266:	4b32      	ldr	r3, [pc, #200]	; (1f330 <spi_rw+0x15c>)
   1f268:	0018      	movs	r0, r3
   1f26a:	4b33      	ldr	r3, [pc, #204]	; (1f338 <spi_rw+0x164>)
   1f26c:	4798      	blx	r3
   1f26e:	0003      	movs	r3, r0
   1f270:	001a      	movs	r2, r3
   1f272:	2301      	movs	r3, #1
   1f274:	4053      	eors	r3, r2
   1f276:	b2db      	uxtb	r3, r3
   1f278:	2b00      	cmp	r3, #0
   1f27a:	d1f4      	bne.n	1f266 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   1f27c:	46c0      	nop			; (mov r8, r8)
   1f27e:	2314      	movs	r3, #20
   1f280:	18fb      	adds	r3, r7, r3
   1f282:	881a      	ldrh	r2, [r3, #0]
   1f284:	4b2a      	ldr	r3, [pc, #168]	; (1f330 <spi_rw+0x15c>)
   1f286:	0011      	movs	r1, r2
   1f288:	0018      	movs	r0, r3
   1f28a:	4b2c      	ldr	r3, [pc, #176]	; (1f33c <spi_rw+0x168>)
   1f28c:	4798      	blx	r3
   1f28e:	1e03      	subs	r3, r0, #0
   1f290:	d1f5      	bne.n	1f27e <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   1f292:	46c0      	nop			; (mov r8, r8)
   1f294:	4b26      	ldr	r3, [pc, #152]	; (1f330 <spi_rw+0x15c>)
   1f296:	0018      	movs	r0, r3
   1f298:	4b29      	ldr	r3, [pc, #164]	; (1f340 <spi_rw+0x16c>)
   1f29a:	4798      	blx	r3
   1f29c:	0003      	movs	r3, r0
   1f29e:	001a      	movs	r2, r3
   1f2a0:	2301      	movs	r3, #1
   1f2a2:	4053      	eors	r3, r2
   1f2a4:	b2db      	uxtb	r3, r3
   1f2a6:	2b00      	cmp	r3, #0
   1f2a8:	d1f4      	bne.n	1f294 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   1f2aa:	46c0      	nop			; (mov r8, r8)
   1f2ac:	2310      	movs	r3, #16
   1f2ae:	18fa      	adds	r2, r7, r3
   1f2b0:	4b1f      	ldr	r3, [pc, #124]	; (1f330 <spi_rw+0x15c>)
   1f2b2:	0011      	movs	r1, r2
   1f2b4:	0018      	movs	r0, r3
   1f2b6:	4b23      	ldr	r3, [pc, #140]	; (1f344 <spi_rw+0x170>)
   1f2b8:	4798      	blx	r3
   1f2ba:	1e03      	subs	r3, r0, #0
   1f2bc:	d1f6      	bne.n	1f2ac <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   1f2be:	2310      	movs	r3, #16
   1f2c0:	18fb      	adds	r3, r7, r3
   1f2c2:	881b      	ldrh	r3, [r3, #0]
   1f2c4:	b2da      	uxtb	r2, r3
   1f2c6:	68bb      	ldr	r3, [r7, #8]
   1f2c8:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   1f2ca:	1dbb      	adds	r3, r7, #6
   1f2cc:	881a      	ldrh	r2, [r3, #0]
   1f2ce:	1dbb      	adds	r3, r7, #6
   1f2d0:	3a01      	subs	r2, #1
   1f2d2:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   1f2d4:	2316      	movs	r3, #22
   1f2d6:	18fb      	adds	r3, r7, r3
   1f2d8:	781b      	ldrb	r3, [r3, #0]
   1f2da:	2b00      	cmp	r3, #0
   1f2dc:	d102      	bne.n	1f2e4 <spi_rw+0x110>
			pu8Miso++;
   1f2de:	68bb      	ldr	r3, [r7, #8]
   1f2e0:	3301      	adds	r3, #1
   1f2e2:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   1f2e4:	2317      	movs	r3, #23
   1f2e6:	18fb      	adds	r3, r7, r3
   1f2e8:	781b      	ldrb	r3, [r3, #0]
   1f2ea:	2b00      	cmp	r3, #0
   1f2ec:	d102      	bne.n	1f2f4 <spi_rw+0x120>
			pu8Mosi++;
   1f2ee:	68fb      	ldr	r3, [r7, #12]
   1f2f0:	3301      	adds	r3, #1
   1f2f2:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   1f2f4:	1dbb      	adds	r3, r7, #6
   1f2f6:	881b      	ldrh	r3, [r3, #0]
   1f2f8:	2b00      	cmp	r3, #0
   1f2fa:	d1ae      	bne.n	1f25a <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   1f2fc:	46c0      	nop			; (mov r8, r8)
   1f2fe:	4b0c      	ldr	r3, [pc, #48]	; (1f330 <spi_rw+0x15c>)
   1f300:	0018      	movs	r0, r3
   1f302:	4b11      	ldr	r3, [pc, #68]	; (1f348 <spi_rw+0x174>)
   1f304:	4798      	blx	r3
   1f306:	0003      	movs	r3, r0
   1f308:	001a      	movs	r2, r3
   1f30a:	2301      	movs	r3, #1
   1f30c:	4053      	eors	r3, r2
   1f30e:	b2db      	uxtb	r3, r3
   1f310:	2b00      	cmp	r3, #0
   1f312:	d1f4      	bne.n	1f2fe <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   1f314:	4905      	ldr	r1, [pc, #20]	; (1f32c <spi_rw+0x158>)
   1f316:	4b06      	ldr	r3, [pc, #24]	; (1f330 <spi_rw+0x15c>)
   1f318:	2200      	movs	r2, #0
   1f31a:	0018      	movs	r0, r3
   1f31c:	4b05      	ldr	r3, [pc, #20]	; (1f334 <spi_rw+0x160>)
   1f31e:	4798      	blx	r3

	return M2M_SUCCESS;
   1f320:	2300      	movs	r3, #0
}
   1f322:	0018      	movs	r0, r3
   1f324:	46bd      	mov	sp, r7
   1f326:	b006      	add	sp, #24
   1f328:	bd80      	pop	{r7, pc}
   1f32a:	46c0      	nop			; (mov r8, r8)
   1f32c:	20005854 	.word	0x20005854
   1f330:	20005858 	.word	0x20005858
   1f334:	00026a81 	.word	0x00026a81
   1f338:	0001f0b5 	.word	0x0001f0b5
   1f33c:	0001f105 	.word	0x0001f105
   1f340:	0001f0dd 	.word	0x0001f0dd
   1f344:	0001f14d 	.word	0x0001f14d
   1f348:	0001f08d 	.word	0x0001f08d

0001f34c <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   1f34c:	b580      	push	{r7, lr}
   1f34e:	b092      	sub	sp, #72	; 0x48
   1f350:	af00      	add	r7, sp, #0
   1f352:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   1f354:	2347      	movs	r3, #71	; 0x47
   1f356:	18fb      	adds	r3, r7, r3
   1f358:	2200      	movs	r2, #0
   1f35a:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   1f35c:	2308      	movs	r3, #8
   1f35e:	18fb      	adds	r3, r7, r3
   1f360:	0018      	movs	r0, r3
   1f362:	4b26      	ldr	r3, [pc, #152]	; (1f3fc <nm_bus_init+0xb0>)
   1f364:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   1f366:	2308      	movs	r3, #8
   1f368:	18fb      	adds	r3, r7, r3
   1f36a:	220e      	movs	r2, #14
   1f36c:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   1f36e:	2308      	movs	r3, #8
   1f370:	18fa      	adds	r2, r7, r3
   1f372:	4b23      	ldr	r3, [pc, #140]	; (1f400 <nm_bus_init+0xb4>)
   1f374:	0011      	movs	r1, r2
   1f376:	0018      	movs	r0, r3
   1f378:	4b22      	ldr	r3, [pc, #136]	; (1f404 <nm_bus_init+0xb8>)
   1f37a:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   1f37c:	230c      	movs	r3, #12
   1f37e:	18fb      	adds	r3, r7, r3
   1f380:	0018      	movs	r0, r3
   1f382:	4b21      	ldr	r3, [pc, #132]	; (1f408 <nm_bus_init+0xbc>)
   1f384:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   1f386:	230c      	movs	r3, #12
   1f388:	18fb      	adds	r3, r7, r3
   1f38a:	22c0      	movs	r2, #192	; 0xc0
   1f38c:	0392      	lsls	r2, r2, #14
   1f38e:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   1f390:	230c      	movs	r3, #12
   1f392:	18fb      	adds	r3, r7, r3
   1f394:	4a1d      	ldr	r2, [pc, #116]	; (1f40c <nm_bus_init+0xc0>)
   1f396:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   1f398:	230c      	movs	r3, #12
   1f39a:	18fb      	adds	r3, r7, r3
   1f39c:	4a1c      	ldr	r2, [pc, #112]	; (1f410 <nm_bus_init+0xc4>)
   1f39e:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   1f3a0:	230c      	movs	r3, #12
   1f3a2:	18fb      	adds	r3, r7, r3
   1f3a4:	2201      	movs	r2, #1
   1f3a6:	4252      	negs	r2, r2
   1f3a8:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   1f3aa:	230c      	movs	r3, #12
   1f3ac:	18fb      	adds	r3, r7, r3
   1f3ae:	4a19      	ldr	r2, [pc, #100]	; (1f414 <nm_bus_init+0xc8>)
   1f3b0:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   1f3b2:	230c      	movs	r3, #12
   1f3b4:	18fb      	adds	r3, r7, r3
   1f3b6:	2200      	movs	r2, #0
   1f3b8:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   1f3ba:	230c      	movs	r3, #12
   1f3bc:	18fb      	adds	r3, r7, r3
   1f3be:	4a16      	ldr	r2, [pc, #88]	; (1f418 <nm_bus_init+0xcc>)
   1f3c0:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   1f3c2:	230c      	movs	r3, #12
   1f3c4:	18fa      	adds	r2, r7, r3
   1f3c6:	4915      	ldr	r1, [pc, #84]	; (1f41c <nm_bus_init+0xd0>)
   1f3c8:	4b15      	ldr	r3, [pc, #84]	; (1f420 <nm_bus_init+0xd4>)
   1f3ca:	0018      	movs	r0, r3
   1f3cc:	4b15      	ldr	r3, [pc, #84]	; (1f424 <nm_bus_init+0xd8>)
   1f3ce:	4798      	blx	r3
   1f3d0:	1e03      	subs	r3, r0, #0
   1f3d2:	d002      	beq.n	1f3da <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   1f3d4:	2306      	movs	r3, #6
   1f3d6:	425b      	negs	r3, r3
   1f3d8:	e00c      	b.n	1f3f4 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   1f3da:	4b11      	ldr	r3, [pc, #68]	; (1f420 <nm_bus_init+0xd4>)
   1f3dc:	0018      	movs	r0, r3
   1f3de:	4b12      	ldr	r3, [pc, #72]	; (1f428 <nm_bus_init+0xdc>)
   1f3e0:	4798      	blx	r3

	nm_bsp_reset();
   1f3e2:	4b12      	ldr	r3, [pc, #72]	; (1f42c <nm_bus_init+0xe0>)
   1f3e4:	4798      	blx	r3
	nm_bsp_sleep(1);
   1f3e6:	2001      	movs	r0, #1
   1f3e8:	4b11      	ldr	r3, [pc, #68]	; (1f430 <nm_bus_init+0xe4>)
   1f3ea:	4798      	blx	r3
#endif
	return result;
   1f3ec:	2347      	movs	r3, #71	; 0x47
   1f3ee:	18fb      	adds	r3, r7, r3
   1f3f0:	781b      	ldrb	r3, [r3, #0]
   1f3f2:	b25b      	sxtb	r3, r3
}
   1f3f4:	0018      	movs	r0, r3
   1f3f6:	46bd      	mov	sp, r7
   1f3f8:	b012      	add	sp, #72	; 0x48
   1f3fa:	bd80      	pop	{r7, pc}
   1f3fc:	0001ef59 	.word	0x0001ef59
   1f400:	20005854 	.word	0x20005854
   1f404:	0001ef7d 	.word	0x0001ef7d
   1f408:	0001eed5 	.word	0x0001eed5
   1f40c:	000c0002 	.word	0x000c0002
   1f410:	000d0002 	.word	0x000d0002
   1f414:	000f0002 	.word	0x000f0002
   1f418:	00124f80 	.word	0x00124f80
   1f41c:	42001000 	.word	0x42001000
   1f420:	20005858 	.word	0x20005858
   1f424:	000267bd 	.word	0x000267bd
   1f428:	0001efe1 	.word	0x0001efe1
   1f42c:	0001ec51 	.word	0x0001ec51
   1f430:	0001ec91 	.word	0x0001ec91

0001f434 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   1f434:	b590      	push	{r4, r7, lr}
   1f436:	b085      	sub	sp, #20
   1f438:	af00      	add	r7, sp, #0
   1f43a:	0002      	movs	r2, r0
   1f43c:	6039      	str	r1, [r7, #0]
   1f43e:	1dfb      	adds	r3, r7, #7
   1f440:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   1f442:	230f      	movs	r3, #15
   1f444:	18fb      	adds	r3, r7, r3
   1f446:	2200      	movs	r2, #0
   1f448:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   1f44a:	1dfb      	adds	r3, r7, #7
   1f44c:	781b      	ldrb	r3, [r3, #0]
   1f44e:	2b03      	cmp	r3, #3
   1f450:	d10f      	bne.n	1f472 <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   1f452:	683b      	ldr	r3, [r7, #0]
   1f454:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   1f456:	68bb      	ldr	r3, [r7, #8]
   1f458:	6818      	ldr	r0, [r3, #0]
   1f45a:	68bb      	ldr	r3, [r7, #8]
   1f45c:	6859      	ldr	r1, [r3, #4]
   1f45e:	68bb      	ldr	r3, [r7, #8]
   1f460:	891b      	ldrh	r3, [r3, #8]
   1f462:	220f      	movs	r2, #15
   1f464:	18bc      	adds	r4, r7, r2
   1f466:	001a      	movs	r2, r3
   1f468:	4b10      	ldr	r3, [pc, #64]	; (1f4ac <nm_bus_ioctl+0x78>)
   1f46a:	4798      	blx	r3
   1f46c:	0003      	movs	r3, r0
   1f46e:	7023      	strb	r3, [r4, #0]
		}
		break;
   1f470:	e013      	b.n	1f49a <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   1f472:	230f      	movs	r3, #15
   1f474:	18fb      	adds	r3, r7, r3
   1f476:	22ff      	movs	r2, #255	; 0xff
   1f478:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   1f47a:	2383      	movs	r3, #131	; 0x83
   1f47c:	005a      	lsls	r2, r3, #1
   1f47e:	490c      	ldr	r1, [pc, #48]	; (1f4b0 <nm_bus_ioctl+0x7c>)
   1f480:	4b0c      	ldr	r3, [pc, #48]	; (1f4b4 <nm_bus_ioctl+0x80>)
   1f482:	0018      	movs	r0, r3
   1f484:	4b0c      	ldr	r3, [pc, #48]	; (1f4b8 <nm_bus_ioctl+0x84>)
   1f486:	4798      	blx	r3
   1f488:	4b0c      	ldr	r3, [pc, #48]	; (1f4bc <nm_bus_ioctl+0x88>)
   1f48a:	0018      	movs	r0, r3
   1f48c:	4b0a      	ldr	r3, [pc, #40]	; (1f4b8 <nm_bus_ioctl+0x84>)
   1f48e:	4798      	blx	r3
   1f490:	4b0b      	ldr	r3, [pc, #44]	; (1f4c0 <nm_bus_ioctl+0x8c>)
   1f492:	0018      	movs	r0, r3
   1f494:	4b08      	ldr	r3, [pc, #32]	; (1f4b8 <nm_bus_ioctl+0x84>)
   1f496:	4798      	blx	r3
			break;
   1f498:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   1f49a:	230f      	movs	r3, #15
   1f49c:	18fb      	adds	r3, r7, r3
   1f49e:	781b      	ldrb	r3, [r3, #0]
   1f4a0:	b25b      	sxtb	r3, r3
}
   1f4a2:	0018      	movs	r0, r3
   1f4a4:	46bd      	mov	sp, r7
   1f4a6:	b005      	add	sp, #20
   1f4a8:	bd90      	pop	{r4, r7, pc}
   1f4aa:	46c0      	nop			; (mov r8, r8)
   1f4ac:	0001f1d5 	.word	0x0001f1d5
   1f4b0:	00036838 	.word	0x00036838
   1f4b4:	0003680c 	.word	0x0003680c
   1f4b8:	0001c7d9 	.word	0x0001c7d9
   1f4bc:	00036820 	.word	0x00036820
   1f4c0:	00036834 	.word	0x00036834

0001f4c4 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   1f4c4:	b580      	push	{r7, lr}
   1f4c6:	b082      	sub	sp, #8
   1f4c8:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   1f4ca:	1dfb      	adds	r3, r7, #7
   1f4cc:	2200      	movs	r2, #0
   1f4ce:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   1f4d0:	1d3b      	adds	r3, r7, #4
   1f4d2:	0018      	movs	r0, r3
   1f4d4:	4b13      	ldr	r3, [pc, #76]	; (1f524 <nm_bus_deinit+0x60>)
   1f4d6:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   1f4d8:	1d3b      	adds	r3, r7, #4
   1f4da:	2200      	movs	r2, #0
   1f4dc:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   1f4de:	1d3b      	adds	r3, r7, #4
   1f4e0:	2200      	movs	r2, #0
   1f4e2:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   1f4e4:	4b10      	ldr	r3, [pc, #64]	; (1f528 <nm_bus_deinit+0x64>)
   1f4e6:	0018      	movs	r0, r3
   1f4e8:	4b10      	ldr	r3, [pc, #64]	; (1f52c <nm_bus_deinit+0x68>)
   1f4ea:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   1f4ec:	1d3b      	adds	r3, r7, #4
   1f4ee:	0019      	movs	r1, r3
   1f4f0:	200c      	movs	r0, #12
   1f4f2:	4b0f      	ldr	r3, [pc, #60]	; (1f530 <nm_bus_deinit+0x6c>)
   1f4f4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   1f4f6:	1d3b      	adds	r3, r7, #4
   1f4f8:	0019      	movs	r1, r3
   1f4fa:	200f      	movs	r0, #15
   1f4fc:	4b0c      	ldr	r3, [pc, #48]	; (1f530 <nm_bus_deinit+0x6c>)
   1f4fe:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   1f500:	1d3b      	adds	r3, r7, #4
   1f502:	0019      	movs	r1, r3
   1f504:	200d      	movs	r0, #13
   1f506:	4b0a      	ldr	r3, [pc, #40]	; (1f530 <nm_bus_deinit+0x6c>)
   1f508:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   1f50a:	1d3b      	adds	r3, r7, #4
   1f50c:	0019      	movs	r1, r3
   1f50e:	200e      	movs	r0, #14
   1f510:	4b07      	ldr	r3, [pc, #28]	; (1f530 <nm_bus_deinit+0x6c>)
   1f512:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   1f514:	1dfb      	adds	r3, r7, #7
   1f516:	781b      	ldrb	r3, [r3, #0]
   1f518:	b25b      	sxtb	r3, r3
}
   1f51a:	0018      	movs	r0, r3
   1f51c:	46bd      	mov	sp, r7
   1f51e:	b002      	add	sp, #8
   1f520:	bd80      	pop	{r7, pc}
   1f522:	46c0      	nop			; (mov r8, r8)
   1f524:	0001ee3d 	.word	0x0001ee3d
   1f528:	20005858 	.word	0x20005858
   1f52c:	0001f031 	.word	0x0001f031
   1f530:	0002533d 	.word	0x0002533d

0001f534 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   1f534:	b580      	push	{r7, lr}
   1f536:	b084      	sub	sp, #16
   1f538:	af00      	add	r7, sp, #0
   1f53a:	60f8      	str	r0, [r7, #12]
   1f53c:	60b9      	str	r1, [r7, #8]
   1f53e:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   1f540:	687b      	ldr	r3, [r7, #4]
   1f542:	2b00      	cmp	r3, #0
   1f544:	d010      	beq.n	1f568 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   1f546:	68bb      	ldr	r3, [r7, #8]
   1f548:	781a      	ldrb	r2, [r3, #0]
   1f54a:	68fb      	ldr	r3, [r7, #12]
   1f54c:	701a      	strb	r2, [r3, #0]
		pDst++;
   1f54e:	68fb      	ldr	r3, [r7, #12]
   1f550:	3301      	adds	r3, #1
   1f552:	60fb      	str	r3, [r7, #12]
		pSrc++;
   1f554:	68bb      	ldr	r3, [r7, #8]
   1f556:	3301      	adds	r3, #1
   1f558:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   1f55a:	687b      	ldr	r3, [r7, #4]
   1f55c:	3b01      	subs	r3, #1
   1f55e:	607b      	str	r3, [r7, #4]
   1f560:	687b      	ldr	r3, [r7, #4]
   1f562:	2b00      	cmp	r3, #0
   1f564:	d1ef      	bne.n	1f546 <m2m_memcpy+0x12>
   1f566:	e000      	b.n	1f56a <m2m_memcpy+0x36>
	if(sz == 0) return;
   1f568:	46c0      	nop			; (mov r8, r8)
}
   1f56a:	46bd      	mov	sp, r7
   1f56c:	b004      	add	sp, #16
   1f56e:	bd80      	pop	{r7, pc}

0001f570 <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   1f570:	b580      	push	{r7, lr}
   1f572:	b084      	sub	sp, #16
   1f574:	af00      	add	r7, sp, #0
   1f576:	60f8      	str	r0, [r7, #12]
   1f578:	607a      	str	r2, [r7, #4]
   1f57a:	230b      	movs	r3, #11
   1f57c:	18fb      	adds	r3, r7, r3
   1f57e:	1c0a      	adds	r2, r1, #0
   1f580:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   1f582:	687b      	ldr	r3, [r7, #4]
   1f584:	2b00      	cmp	r3, #0
   1f586:	d00e      	beq.n	1f5a6 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   1f588:	68fb      	ldr	r3, [r7, #12]
   1f58a:	220b      	movs	r2, #11
   1f58c:	18ba      	adds	r2, r7, r2
   1f58e:	7812      	ldrb	r2, [r2, #0]
   1f590:	701a      	strb	r2, [r3, #0]
		pBuf++;
   1f592:	68fb      	ldr	r3, [r7, #12]
   1f594:	3301      	adds	r3, #1
   1f596:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   1f598:	687b      	ldr	r3, [r7, #4]
   1f59a:	3b01      	subs	r3, #1
   1f59c:	607b      	str	r3, [r7, #4]
   1f59e:	687b      	ldr	r3, [r7, #4]
   1f5a0:	2b00      	cmp	r3, #0
   1f5a2:	d1f1      	bne.n	1f588 <m2m_memset+0x18>
   1f5a4:	e000      	b.n	1f5a8 <m2m_memset+0x38>
	if(sz == 0) return;
   1f5a6:	46c0      	nop			; (mov r8, r8)
}
   1f5a8:	46bd      	mov	sp, r7
   1f5aa:	b004      	add	sp, #16
   1f5ac:	bd80      	pop	{r7, pc}

0001f5ae <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   1f5ae:	b580      	push	{r7, lr}
   1f5b0:	b084      	sub	sp, #16
   1f5b2:	af00      	add	r7, sp, #0
   1f5b4:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   1f5b6:	230e      	movs	r3, #14
   1f5b8:	18fb      	adds	r3, r7, r3
   1f5ba:	2200      	movs	r2, #0
   1f5bc:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   1f5be:	e009      	b.n	1f5d4 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   1f5c0:	230e      	movs	r3, #14
   1f5c2:	18fb      	adds	r3, r7, r3
   1f5c4:	881a      	ldrh	r2, [r3, #0]
   1f5c6:	230e      	movs	r3, #14
   1f5c8:	18fb      	adds	r3, r7, r3
   1f5ca:	3201      	adds	r2, #1
   1f5cc:	801a      	strh	r2, [r3, #0]
		pcStr++;
   1f5ce:	687b      	ldr	r3, [r7, #4]
   1f5d0:	3301      	adds	r3, #1
   1f5d2:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   1f5d4:	687b      	ldr	r3, [r7, #4]
   1f5d6:	781b      	ldrb	r3, [r3, #0]
   1f5d8:	2b00      	cmp	r3, #0
   1f5da:	d1f1      	bne.n	1f5c0 <m2m_strlen+0x12>
	}
	return u16StrLen;
   1f5dc:	230e      	movs	r3, #14
   1f5de:	18fb      	adds	r3, r7, r3
   1f5e0:	881b      	ldrh	r3, [r3, #0]
}
   1f5e2:	0018      	movs	r0, r3
   1f5e4:	46bd      	mov	sp, r7
   1f5e6:	b004      	add	sp, #16
   1f5e8:	bd80      	pop	{r7, pc}
	...

0001f5ec <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   1f5ec:	b580      	push	{r7, lr}
   1f5ee:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   1f5f0:	4b04      	ldr	r3, [pc, #16]	; (1f604 <isr+0x18>)
   1f5f2:	78db      	ldrb	r3, [r3, #3]
   1f5f4:	b2db      	uxtb	r3, r3
   1f5f6:	3301      	adds	r3, #1
   1f5f8:	b2da      	uxtb	r2, r3
   1f5fa:	4b02      	ldr	r3, [pc, #8]	; (1f604 <isr+0x18>)
   1f5fc:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   1f5fe:	46c0      	nop			; (mov r8, r8)
   1f600:	46bd      	mov	sp, r7
   1f602:	bd80      	pop	{r7, pc}
   1f604:	20005894 	.word	0x20005894

0001f608 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   1f608:	b590      	push	{r4, r7, lr}
   1f60a:	b083      	sub	sp, #12
   1f60c:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   1f60e:	1dfb      	adds	r3, r7, #7
   1f610:	2200      	movs	r2, #0
   1f612:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   1f614:	4b14      	ldr	r3, [pc, #80]	; (1f668 <hif_set_rx_done+0x60>)
   1f616:	2200      	movs	r2, #0
   1f618:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   1f61a:	2001      	movs	r0, #1
   1f61c:	4b13      	ldr	r3, [pc, #76]	; (1f66c <hif_set_rx_done+0x64>)
   1f61e:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   1f620:	1dfc      	adds	r4, r7, #7
   1f622:	003b      	movs	r3, r7
   1f624:	4a12      	ldr	r2, [pc, #72]	; (1f670 <hif_set_rx_done+0x68>)
   1f626:	0019      	movs	r1, r3
   1f628:	0010      	movs	r0, r2
   1f62a:	4b12      	ldr	r3, [pc, #72]	; (1f674 <hif_set_rx_done+0x6c>)
   1f62c:	4798      	blx	r3
   1f62e:	0003      	movs	r3, r0
   1f630:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   1f632:	1dfb      	adds	r3, r7, #7
   1f634:	781b      	ldrb	r3, [r3, #0]
   1f636:	b25b      	sxtb	r3, r3
   1f638:	2b00      	cmp	r3, #0
   1f63a:	d10d      	bne.n	1f658 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   1f63c:	683b      	ldr	r3, [r7, #0]
   1f63e:	2202      	movs	r2, #2
   1f640:	4313      	orrs	r3, r2
   1f642:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1f644:	683b      	ldr	r3, [r7, #0]
   1f646:	1dfc      	adds	r4, r7, #7
   1f648:	4a09      	ldr	r2, [pc, #36]	; (1f670 <hif_set_rx_done+0x68>)
   1f64a:	0019      	movs	r1, r3
   1f64c:	0010      	movs	r0, r2
   1f64e:	4b0a      	ldr	r3, [pc, #40]	; (1f678 <hif_set_rx_done+0x70>)
   1f650:	4798      	blx	r3
   1f652:	0003      	movs	r3, r0
   1f654:	7023      	strb	r3, [r4, #0]
   1f656:	e000      	b.n	1f65a <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   1f658:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   1f65a:	1dfb      	adds	r3, r7, #7
   1f65c:	781b      	ldrb	r3, [r3, #0]
   1f65e:	b25b      	sxtb	r3, r3

}
   1f660:	0018      	movs	r0, r3
   1f662:	46bd      	mov	sp, r7
   1f664:	b003      	add	sp, #12
   1f666:	bd90      	pop	{r4, r7, pc}
   1f668:	20005894 	.word	0x20005894
   1f66c:	0001ed25 	.word	0x0001ed25
   1f670:	00001070 	.word	0x00001070
   1f674:	00021601 	.word	0x00021601
   1f678:	00021625 	.word	0x00021625

0001f67c <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   1f67c:	b580      	push	{r7, lr}
   1f67e:	b082      	sub	sp, #8
   1f680:	af00      	add	r7, sp, #0
   1f682:	603a      	str	r2, [r7, #0]
   1f684:	1dfb      	adds	r3, r7, #7
   1f686:	1c02      	adds	r2, r0, #0
   1f688:	701a      	strb	r2, [r3, #0]
   1f68a:	1d3b      	adds	r3, r7, #4
   1f68c:	1c0a      	adds	r2, r1, #0
   1f68e:	801a      	strh	r2, [r3, #0]


}
   1f690:	46c0      	nop			; (mov r8, r8)
   1f692:	46bd      	mov	sp, r7
   1f694:	b002      	add	sp, #8
   1f696:	bd80      	pop	{r7, pc}

0001f698 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   1f698:	b590      	push	{r4, r7, lr}
   1f69a:	b083      	sub	sp, #12
   1f69c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1f69e:	1dfb      	adds	r3, r7, #7
   1f6a0:	2200      	movs	r2, #0
   1f6a2:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   1f6a4:	4b16      	ldr	r3, [pc, #88]	; (1f700 <hif_chip_wake+0x68>)
   1f6a6:	789b      	ldrb	r3, [r3, #2]
   1f6a8:	b2db      	uxtb	r3, r3
   1f6aa:	2b00      	cmp	r3, #0
   1f6ac:	d003      	beq.n	1f6b6 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   1f6ae:	1dfb      	adds	r3, r7, #7
   1f6b0:	781b      	ldrb	r3, [r3, #0]
   1f6b2:	b25b      	sxtb	r3, r3
   1f6b4:	e01f      	b.n	1f6f6 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   1f6b6:	4b12      	ldr	r3, [pc, #72]	; (1f700 <hif_chip_wake+0x68>)
   1f6b8:	785b      	ldrb	r3, [r3, #1]
   1f6ba:	b2db      	uxtb	r3, r3
   1f6bc:	2b00      	cmp	r3, #0
   1f6be:	d10e      	bne.n	1f6de <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1f6c0:	4b0f      	ldr	r3, [pc, #60]	; (1f700 <hif_chip_wake+0x68>)
   1f6c2:	781b      	ldrb	r3, [r3, #0]
   1f6c4:	b2db      	uxtb	r3, r3
   1f6c6:	2b00      	cmp	r3, #0
   1f6c8:	d009      	beq.n	1f6de <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   1f6ca:	1dfc      	adds	r4, r7, #7
   1f6cc:	4b0d      	ldr	r3, [pc, #52]	; (1f704 <hif_chip_wake+0x6c>)
   1f6ce:	4798      	blx	r3
   1f6d0:	0003      	movs	r3, r0
   1f6d2:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1f6d4:	1dfb      	adds	r3, r7, #7
   1f6d6:	781b      	ldrb	r3, [r3, #0]
   1f6d8:	b25b      	sxtb	r3, r3
   1f6da:	2b00      	cmp	r3, #0
   1f6dc:	d107      	bne.n	1f6ee <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   1f6de:	4b08      	ldr	r3, [pc, #32]	; (1f700 <hif_chip_wake+0x68>)
   1f6e0:	785b      	ldrb	r3, [r3, #1]
   1f6e2:	b2db      	uxtb	r3, r3
   1f6e4:	3301      	adds	r3, #1
   1f6e6:	b2da      	uxtb	r2, r3
   1f6e8:	4b05      	ldr	r3, [pc, #20]	; (1f700 <hif_chip_wake+0x68>)
   1f6ea:	705a      	strb	r2, [r3, #1]
   1f6ec:	e000      	b.n	1f6f0 <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   1f6ee:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   1f6f0:	1dfb      	adds	r3, r7, #7
   1f6f2:	781b      	ldrb	r3, [r3, #0]
   1f6f4:	b25b      	sxtb	r3, r3
}
   1f6f6:	0018      	movs	r0, r3
   1f6f8:	46bd      	mov	sp, r7
   1f6fa:	b003      	add	sp, #12
   1f6fc:	bd90      	pop	{r4, r7, pc}
   1f6fe:	46c0      	nop			; (mov r8, r8)
   1f700:	20005894 	.word	0x20005894
   1f704:	000210d1 	.word	0x000210d1

0001f708 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   1f708:	b580      	push	{r7, lr}
   1f70a:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   1f70c:	4b07      	ldr	r3, [pc, #28]	; (1f72c <hif_chip_sleep_sc+0x24>)
   1f70e:	785b      	ldrb	r3, [r3, #1]
   1f710:	b2db      	uxtb	r3, r3
   1f712:	2b00      	cmp	r3, #0
   1f714:	d006      	beq.n	1f724 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   1f716:	4b05      	ldr	r3, [pc, #20]	; (1f72c <hif_chip_sleep_sc+0x24>)
   1f718:	785b      	ldrb	r3, [r3, #1]
   1f71a:	b2db      	uxtb	r3, r3
   1f71c:	3b01      	subs	r3, #1
   1f71e:	b2da      	uxtb	r2, r3
   1f720:	4b02      	ldr	r3, [pc, #8]	; (1f72c <hif_chip_sleep_sc+0x24>)
   1f722:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   1f724:	2300      	movs	r3, #0
}
   1f726:	0018      	movs	r0, r3
   1f728:	46bd      	mov	sp, r7
   1f72a:	bd80      	pop	{r7, pc}
   1f72c:	20005894 	.word	0x20005894

0001f730 <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   1f730:	b590      	push	{r4, r7, lr}
   1f732:	b083      	sub	sp, #12
   1f734:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   1f736:	1dfb      	adds	r3, r7, #7
   1f738:	2200      	movs	r2, #0
   1f73a:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   1f73c:	4b10      	ldr	r3, [pc, #64]	; (1f780 <hif_chip_sleep+0x50>)
   1f73e:	785b      	ldrb	r3, [r3, #1]
   1f740:	b2db      	uxtb	r3, r3
   1f742:	2b00      	cmp	r3, #0
   1f744:	d006      	beq.n	1f754 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   1f746:	4b0e      	ldr	r3, [pc, #56]	; (1f780 <hif_chip_sleep+0x50>)
   1f748:	785b      	ldrb	r3, [r3, #1]
   1f74a:	b2db      	uxtb	r3, r3
   1f74c:	3b01      	subs	r3, #1
   1f74e:	b2da      	uxtb	r2, r3
   1f750:	4b0b      	ldr	r3, [pc, #44]	; (1f780 <hif_chip_sleep+0x50>)
   1f752:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   1f754:	4b0a      	ldr	r3, [pc, #40]	; (1f780 <hif_chip_sleep+0x50>)
   1f756:	785b      	ldrb	r3, [r3, #1]
   1f758:	b2db      	uxtb	r3, r3
   1f75a:	2b00      	cmp	r3, #0
   1f75c:	d109      	bne.n	1f772 <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   1f75e:	4b08      	ldr	r3, [pc, #32]	; (1f780 <hif_chip_sleep+0x50>)
   1f760:	781b      	ldrb	r3, [r3, #0]
   1f762:	b2db      	uxtb	r3, r3
   1f764:	2b00      	cmp	r3, #0
   1f766:	d004      	beq.n	1f772 <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   1f768:	1dfc      	adds	r4, r7, #7
   1f76a:	4b06      	ldr	r3, [pc, #24]	; (1f784 <hif_chip_sleep+0x54>)
   1f76c:	4798      	blx	r3
   1f76e:	0003      	movs	r3, r0
   1f770:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   1f772:	1dfb      	adds	r3, r7, #7
   1f774:	781b      	ldrb	r3, [r3, #0]
   1f776:	b25b      	sxtb	r3, r3
}
   1f778:	0018      	movs	r0, r3
   1f77a:	46bd      	mov	sp, r7
   1f77c:	b003      	add	sp, #12
   1f77e:	bd90      	pop	{r4, r7, pc}
   1f780:	20005894 	.word	0x20005894
   1f784:	00020ff9 	.word	0x00020ff9

0001f788 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   1f788:	b580      	push	{r7, lr}
   1f78a:	b082      	sub	sp, #8
   1f78c:	af00      	add	r7, sp, #0
   1f78e:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   1f790:	4b09      	ldr	r3, [pc, #36]	; (1f7b8 <hif_init+0x30>)
   1f792:	222c      	movs	r2, #44	; 0x2c
   1f794:	2100      	movs	r1, #0
   1f796:	0018      	movs	r0, r3
   1f798:	4b08      	ldr	r3, [pc, #32]	; (1f7bc <hif_init+0x34>)
   1f79a:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   1f79c:	4b08      	ldr	r3, [pc, #32]	; (1f7c0 <hif_init+0x38>)
   1f79e:	0018      	movs	r0, r3
   1f7a0:	4b08      	ldr	r3, [pc, #32]	; (1f7c4 <hif_init+0x3c>)
   1f7a2:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   1f7a4:	4b08      	ldr	r3, [pc, #32]	; (1f7c8 <hif_init+0x40>)
   1f7a6:	0019      	movs	r1, r3
   1f7a8:	2003      	movs	r0, #3
   1f7aa:	4b08      	ldr	r3, [pc, #32]	; (1f7cc <hif_init+0x44>)
   1f7ac:	4798      	blx	r3
	return M2M_SUCCESS;
   1f7ae:	2300      	movs	r3, #0
}
   1f7b0:	0018      	movs	r0, r3
   1f7b2:	46bd      	mov	sp, r7
   1f7b4:	b002      	add	sp, #8
   1f7b6:	bd80      	pop	{r7, pc}
   1f7b8:	20005894 	.word	0x20005894
   1f7bc:	0001f571 	.word	0x0001f571
   1f7c0:	0001f5ed 	.word	0x0001f5ed
   1f7c4:	0001ecad 	.word	0x0001ecad
   1f7c8:	0001f67d 	.word	0x0001f67d
   1f7cc:	0002026d 	.word	0x0002026d

0001f7d0 <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   1f7d0:	b590      	push	{r4, r7, lr}
   1f7d2:	b089      	sub	sp, #36	; 0x24
   1f7d4:	af00      	add	r7, sp, #0
   1f7d6:	0004      	movs	r4, r0
   1f7d8:	0008      	movs	r0, r1
   1f7da:	603a      	str	r2, [r7, #0]
   1f7dc:	0019      	movs	r1, r3
   1f7de:	1dfb      	adds	r3, r7, #7
   1f7e0:	1c22      	adds	r2, r4, #0
   1f7e2:	701a      	strb	r2, [r3, #0]
   1f7e4:	1dbb      	adds	r3, r7, #6
   1f7e6:	1c02      	adds	r2, r0, #0
   1f7e8:	701a      	strb	r2, [r3, #0]
   1f7ea:	1d3b      	adds	r3, r7, #4
   1f7ec:	1c0a      	adds	r2, r1, #0
   1f7ee:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   1f7f0:	231f      	movs	r3, #31
   1f7f2:	18fb      	adds	r3, r7, r3
   1f7f4:	22ff      	movs	r2, #255	; 0xff
   1f7f6:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   1f7f8:	1dbb      	adds	r3, r7, #6
   1f7fa:	781b      	ldrb	r3, [r3, #0]
   1f7fc:	227f      	movs	r2, #127	; 0x7f
   1f7fe:	4013      	ands	r3, r2
   1f800:	b2da      	uxtb	r2, r3
   1f802:	2318      	movs	r3, #24
   1f804:	18fb      	adds	r3, r7, r3
   1f806:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   1f808:	2318      	movs	r3, #24
   1f80a:	18fb      	adds	r3, r7, r3
   1f80c:	1dfa      	adds	r2, r7, #7
   1f80e:	7812      	ldrb	r2, [r2, #0]
   1f810:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   1f812:	2318      	movs	r3, #24
   1f814:	18fb      	adds	r3, r7, r3
   1f816:	2208      	movs	r2, #8
   1f818:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   1f81a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1f81c:	2b00      	cmp	r3, #0
   1f81e:	d011      	beq.n	1f844 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   1f820:	2318      	movs	r3, #24
   1f822:	18fb      	adds	r3, r7, r3
   1f824:	885b      	ldrh	r3, [r3, #2]
   1f826:	b29a      	uxth	r2, r3
   1f828:	2338      	movs	r3, #56	; 0x38
   1f82a:	18f9      	adds	r1, r7, r3
   1f82c:	2334      	movs	r3, #52	; 0x34
   1f82e:	18fb      	adds	r3, r7, r3
   1f830:	8809      	ldrh	r1, [r1, #0]
   1f832:	881b      	ldrh	r3, [r3, #0]
   1f834:	18cb      	adds	r3, r1, r3
   1f836:	b29b      	uxth	r3, r3
   1f838:	18d3      	adds	r3, r2, r3
   1f83a:	b29a      	uxth	r2, r3
   1f83c:	2318      	movs	r3, #24
   1f83e:	18fb      	adds	r3, r7, r3
   1f840:	805a      	strh	r2, [r3, #2]
   1f842:	e00a      	b.n	1f85a <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   1f844:	2318      	movs	r3, #24
   1f846:	18fb      	adds	r3, r7, r3
   1f848:	885b      	ldrh	r3, [r3, #2]
   1f84a:	b29a      	uxth	r2, r3
   1f84c:	1d3b      	adds	r3, r7, #4
   1f84e:	881b      	ldrh	r3, [r3, #0]
   1f850:	18d3      	adds	r3, r2, r3
   1f852:	b29a      	uxth	r2, r3
   1f854:	2318      	movs	r3, #24
   1f856:	18fb      	adds	r3, r7, r3
   1f858:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   1f85a:	231f      	movs	r3, #31
   1f85c:	18fc      	adds	r4, r7, r3
   1f85e:	4bb2      	ldr	r3, [pc, #712]	; (1fb28 <hif_send+0x358>)
   1f860:	4798      	blx	r3
   1f862:	0003      	movs	r3, r0
   1f864:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   1f866:	231f      	movs	r3, #31
   1f868:	18fb      	adds	r3, r7, r3
   1f86a:	781b      	ldrb	r3, [r3, #0]
   1f86c:	b25b      	sxtb	r3, r3
   1f86e:	2b00      	cmp	r3, #0
   1f870:	d000      	beq.n	1f874 <hif_send+0xa4>
   1f872:	e129      	b.n	1fac8 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   1f874:	2300      	movs	r3, #0
   1f876:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   1f878:	230e      	movs	r3, #14
   1f87a:	18fb      	adds	r3, r7, r3
   1f87c:	2200      	movs	r2, #0
   1f87e:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   1f880:	2300      	movs	r3, #0
   1f882:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   1f884:	1dfb      	adds	r3, r7, #7
   1f886:	781a      	ldrb	r2, [r3, #0]
   1f888:	697b      	ldr	r3, [r7, #20]
   1f88a:	4313      	orrs	r3, r2
   1f88c:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   1f88e:	1dbb      	adds	r3, r7, #6
   1f890:	781b      	ldrb	r3, [r3, #0]
   1f892:	021a      	lsls	r2, r3, #8
   1f894:	697b      	ldr	r3, [r7, #20]
   1f896:	4313      	orrs	r3, r2
   1f898:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   1f89a:	2318      	movs	r3, #24
   1f89c:	18fb      	adds	r3, r7, r3
   1f89e:	885b      	ldrh	r3, [r3, #2]
   1f8a0:	b29b      	uxth	r3, r3
   1f8a2:	041a      	lsls	r2, r3, #16
   1f8a4:	697b      	ldr	r3, [r7, #20]
   1f8a6:	4313      	orrs	r3, r2
   1f8a8:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   1f8aa:	697b      	ldr	r3, [r7, #20]
   1f8ac:	221f      	movs	r2, #31
   1f8ae:	18bc      	adds	r4, r7, r2
   1f8b0:	4a9e      	ldr	r2, [pc, #632]	; (1fb2c <hif_send+0x35c>)
   1f8b2:	0019      	movs	r1, r3
   1f8b4:	0010      	movs	r0, r2
   1f8b6:	4b9e      	ldr	r3, [pc, #632]	; (1fb30 <hif_send+0x360>)
   1f8b8:	4798      	blx	r3
   1f8ba:	0003      	movs	r3, r0
   1f8bc:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1f8be:	231f      	movs	r3, #31
   1f8c0:	18fb      	adds	r3, r7, r3
   1f8c2:	781b      	ldrb	r3, [r3, #0]
   1f8c4:	b25b      	sxtb	r3, r3
   1f8c6:	2b00      	cmp	r3, #0
   1f8c8:	d000      	beq.n	1f8cc <hif_send+0xfc>
   1f8ca:	e119      	b.n	1fb00 <hif_send+0x330>

		reg = 0UL;
   1f8cc:	2300      	movs	r3, #0
   1f8ce:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   1f8d0:	697b      	ldr	r3, [r7, #20]
   1f8d2:	2202      	movs	r2, #2
   1f8d4:	4313      	orrs	r3, r2
   1f8d6:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   1f8d8:	697b      	ldr	r3, [r7, #20]
   1f8da:	221f      	movs	r2, #31
   1f8dc:	18bc      	adds	r4, r7, r2
   1f8de:	4a95      	ldr	r2, [pc, #596]	; (1fb34 <hif_send+0x364>)
   1f8e0:	0019      	movs	r1, r3
   1f8e2:	0010      	movs	r0, r2
   1f8e4:	4b92      	ldr	r3, [pc, #584]	; (1fb30 <hif_send+0x360>)
   1f8e6:	4798      	blx	r3
   1f8e8:	0003      	movs	r3, r0
   1f8ea:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   1f8ec:	231f      	movs	r3, #31
   1f8ee:	18fb      	adds	r3, r7, r3
   1f8f0:	781b      	ldrb	r3, [r3, #0]
   1f8f2:	b25b      	sxtb	r3, r3
   1f8f4:	2b00      	cmp	r3, #0
   1f8f6:	d000      	beq.n	1f8fa <hif_send+0x12a>
   1f8f8:	e104      	b.n	1fb04 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   1f8fa:	2300      	movs	r3, #0
   1f8fc:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   1f8fe:	230e      	movs	r3, #14
   1f900:	18fb      	adds	r3, r7, r3
   1f902:	2200      	movs	r2, #0
   1f904:	801a      	strh	r2, [r3, #0]
   1f906:	e050      	b.n	1f9aa <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   1f908:	231f      	movs	r3, #31
   1f90a:	18fc      	adds	r4, r7, r3
   1f90c:	2314      	movs	r3, #20
   1f90e:	18fb      	adds	r3, r7, r3
   1f910:	4a88      	ldr	r2, [pc, #544]	; (1fb34 <hif_send+0x364>)
   1f912:	0019      	movs	r1, r3
   1f914:	0010      	movs	r0, r2
   1f916:	4b88      	ldr	r3, [pc, #544]	; (1fb38 <hif_send+0x368>)
   1f918:	4798      	blx	r3
   1f91a:	0003      	movs	r3, r0
   1f91c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   1f91e:	231f      	movs	r3, #31
   1f920:	18fb      	adds	r3, r7, r3
   1f922:	781b      	ldrb	r3, [r3, #0]
   1f924:	b25b      	sxtb	r3, r3
   1f926:	2b00      	cmp	r3, #0
   1f928:	d147      	bne.n	1f9ba <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   1f92a:	230e      	movs	r3, #14
   1f92c:	18fb      	adds	r3, r7, r3
   1f92e:	881b      	ldrh	r3, [r3, #0]
   1f930:	b29a      	uxth	r2, r3
   1f932:	23f4      	movs	r3, #244	; 0xf4
   1f934:	33ff      	adds	r3, #255	; 0xff
   1f936:	429a      	cmp	r2, r3
   1f938:	d916      	bls.n	1f968 <hif_send+0x198>
				if(cnt < 501) {
   1f93a:	230e      	movs	r3, #14
   1f93c:	18fb      	adds	r3, r7, r3
   1f93e:	881b      	ldrh	r3, [r3, #0]
   1f940:	b29a      	uxth	r2, r3
   1f942:	23fa      	movs	r3, #250	; 0xfa
   1f944:	005b      	lsls	r3, r3, #1
   1f946:	429a      	cmp	r2, r3
   1f948:	d80b      	bhi.n	1f962 <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   1f94a:	4b7c      	ldr	r3, [pc, #496]	; (1fb3c <hif_send+0x36c>)
   1f94c:	0018      	movs	r0, r3
   1f94e:	4b7c      	ldr	r3, [pc, #496]	; (1fb40 <hif_send+0x370>)
   1f950:	4798      	blx	r3
   1f952:	4b7c      	ldr	r3, [pc, #496]	; (1fb44 <hif_send+0x374>)
   1f954:	0018      	movs	r0, r3
   1f956:	4b7a      	ldr	r3, [pc, #488]	; (1fb40 <hif_send+0x370>)
   1f958:	4798      	blx	r3
   1f95a:	4b7b      	ldr	r3, [pc, #492]	; (1fb48 <hif_send+0x378>)
   1f95c:	0018      	movs	r0, r3
   1f95e:	4b78      	ldr	r3, [pc, #480]	; (1fb40 <hif_send+0x370>)
   1f960:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   1f962:	2001      	movs	r0, #1
   1f964:	4b79      	ldr	r3, [pc, #484]	; (1fb4c <hif_send+0x37c>)
   1f966:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   1f968:	697b      	ldr	r3, [r7, #20]
   1f96a:	2202      	movs	r2, #2
   1f96c:	4013      	ands	r3, r2
   1f96e:	d113      	bne.n	1f998 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   1f970:	231f      	movs	r3, #31
   1f972:	18fc      	adds	r4, r7, r3
   1f974:	2310      	movs	r3, #16
   1f976:	18fb      	adds	r3, r7, r3
   1f978:	4a75      	ldr	r2, [pc, #468]	; (1fb50 <hif_send+0x380>)
   1f97a:	0019      	movs	r1, r3
   1f97c:	0010      	movs	r0, r2
   1f97e:	4b6e      	ldr	r3, [pc, #440]	; (1fb38 <hif_send+0x368>)
   1f980:	4798      	blx	r3
   1f982:	0003      	movs	r3, r0
   1f984:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   1f986:	231f      	movs	r3, #31
   1f988:	18fb      	adds	r3, r7, r3
   1f98a:	781b      	ldrb	r3, [r3, #0]
   1f98c:	b25b      	sxtb	r3, r3
   1f98e:	2b00      	cmp	r3, #0
   1f990:	d015      	beq.n	1f9be <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   1f992:	2300      	movs	r3, #0
   1f994:	613b      	str	r3, [r7, #16]
					goto ERR1;
   1f996:	e0bc      	b.n	1fb12 <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   1f998:	230e      	movs	r3, #14
   1f99a:	18fb      	adds	r3, r7, r3
   1f99c:	881b      	ldrh	r3, [r3, #0]
   1f99e:	b29b      	uxth	r3, r3
   1f9a0:	3301      	adds	r3, #1
   1f9a2:	b29a      	uxth	r2, r3
   1f9a4:	230e      	movs	r3, #14
   1f9a6:	18fb      	adds	r3, r7, r3
   1f9a8:	801a      	strh	r2, [r3, #0]
   1f9aa:	230e      	movs	r3, #14
   1f9ac:	18fb      	adds	r3, r7, r3
   1f9ae:	881b      	ldrh	r3, [r3, #0]
   1f9b0:	b29b      	uxth	r3, r3
   1f9b2:	4a68      	ldr	r2, [pc, #416]	; (1fb54 <hif_send+0x384>)
   1f9b4:	4293      	cmp	r3, r2
   1f9b6:	d9a7      	bls.n	1f908 <hif_send+0x138>
   1f9b8:	e002      	b.n	1f9c0 <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   1f9ba:	46c0      	nop			; (mov r8, r8)
   1f9bc:	e000      	b.n	1f9c0 <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   1f9be:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   1f9c0:	693b      	ldr	r3, [r7, #16]
   1f9c2:	2b00      	cmp	r3, #0
   1f9c4:	d100      	bne.n	1f9c8 <hif_send+0x1f8>
   1f9c6:	e074      	b.n	1fab2 <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   1f9c8:	693b      	ldr	r3, [r7, #16]
   1f9ca:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   1f9cc:	2318      	movs	r3, #24
   1f9ce:	18fb      	adds	r3, r7, r3
   1f9d0:	885b      	ldrh	r3, [r3, #2]
   1f9d2:	b29a      	uxth	r2, r3
   1f9d4:	2318      	movs	r3, #24
   1f9d6:	18fb      	adds	r3, r7, r3
   1f9d8:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   1f9da:	68bb      	ldr	r3, [r7, #8]
   1f9dc:	221f      	movs	r2, #31
   1f9de:	18bc      	adds	r4, r7, r2
   1f9e0:	2218      	movs	r2, #24
   1f9e2:	18b9      	adds	r1, r7, r2
   1f9e4:	2208      	movs	r2, #8
   1f9e6:	0018      	movs	r0, r3
   1f9e8:	4b5b      	ldr	r3, [pc, #364]	; (1fb58 <hif_send+0x388>)
   1f9ea:	4798      	blx	r3
   1f9ec:	0003      	movs	r3, r0
   1f9ee:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1f9f0:	231f      	movs	r3, #31
   1f9f2:	18fb      	adds	r3, r7, r3
   1f9f4:	781b      	ldrb	r3, [r3, #0]
   1f9f6:	b25b      	sxtb	r3, r3
   1f9f8:	2b00      	cmp	r3, #0
   1f9fa:	d000      	beq.n	1f9fe <hif_send+0x22e>
   1f9fc:	e084      	b.n	1fb08 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   1f9fe:	68bb      	ldr	r3, [r7, #8]
   1fa00:	3308      	adds	r3, #8
   1fa02:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   1fa04:	683b      	ldr	r3, [r7, #0]
   1fa06:	2b00      	cmp	r3, #0
   1fa08:	d016      	beq.n	1fa38 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   1fa0a:	68b8      	ldr	r0, [r7, #8]
   1fa0c:	1d3b      	adds	r3, r7, #4
   1fa0e:	881a      	ldrh	r2, [r3, #0]
   1fa10:	231f      	movs	r3, #31
   1fa12:	18fc      	adds	r4, r7, r3
   1fa14:	683b      	ldr	r3, [r7, #0]
   1fa16:	0019      	movs	r1, r3
   1fa18:	4b4f      	ldr	r3, [pc, #316]	; (1fb58 <hif_send+0x388>)
   1fa1a:	4798      	blx	r3
   1fa1c:	0003      	movs	r3, r0
   1fa1e:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1fa20:	231f      	movs	r3, #31
   1fa22:	18fb      	adds	r3, r7, r3
   1fa24:	781b      	ldrb	r3, [r3, #0]
   1fa26:	b25b      	sxtb	r3, r3
   1fa28:	2b00      	cmp	r3, #0
   1fa2a:	d000      	beq.n	1fa2e <hif_send+0x25e>
   1fa2c:	e06e      	b.n	1fb0c <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   1fa2e:	1d3b      	adds	r3, r7, #4
   1fa30:	881a      	ldrh	r2, [r3, #0]
   1fa32:	68bb      	ldr	r3, [r7, #8]
   1fa34:	18d3      	adds	r3, r2, r3
   1fa36:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   1fa38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fa3a:	2b00      	cmp	r3, #0
   1fa3c:	d021      	beq.n	1fa82 <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   1fa3e:	2338      	movs	r3, #56	; 0x38
   1fa40:	18fb      	adds	r3, r7, r3
   1fa42:	881a      	ldrh	r2, [r3, #0]
   1fa44:	1d3b      	adds	r3, r7, #4
   1fa46:	881b      	ldrh	r3, [r3, #0]
   1fa48:	1ad3      	subs	r3, r2, r3
   1fa4a:	001a      	movs	r2, r3
   1fa4c:	68bb      	ldr	r3, [r7, #8]
   1fa4e:	18d3      	adds	r3, r2, r3
   1fa50:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   1fa52:	68b8      	ldr	r0, [r7, #8]
   1fa54:	2334      	movs	r3, #52	; 0x34
   1fa56:	18fb      	adds	r3, r7, r3
   1fa58:	881a      	ldrh	r2, [r3, #0]
   1fa5a:	231f      	movs	r3, #31
   1fa5c:	18fc      	adds	r4, r7, r3
   1fa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1fa60:	0019      	movs	r1, r3
   1fa62:	4b3d      	ldr	r3, [pc, #244]	; (1fb58 <hif_send+0x388>)
   1fa64:	4798      	blx	r3
   1fa66:	0003      	movs	r3, r0
   1fa68:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   1fa6a:	231f      	movs	r3, #31
   1fa6c:	18fb      	adds	r3, r7, r3
   1fa6e:	781b      	ldrb	r3, [r3, #0]
   1fa70:	b25b      	sxtb	r3, r3
   1fa72:	2b00      	cmp	r3, #0
   1fa74:	d14c      	bne.n	1fb10 <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   1fa76:	2334      	movs	r3, #52	; 0x34
   1fa78:	18fb      	adds	r3, r7, r3
   1fa7a:	881a      	ldrh	r2, [r3, #0]
   1fa7c:	68bb      	ldr	r3, [r7, #8]
   1fa7e:	18d3      	adds	r3, r2, r3
   1fa80:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   1fa82:	693b      	ldr	r3, [r7, #16]
   1fa84:	009b      	lsls	r3, r3, #2
   1fa86:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   1fa88:	697b      	ldr	r3, [r7, #20]
   1fa8a:	2202      	movs	r2, #2
   1fa8c:	4313      	orrs	r3, r2
   1fa8e:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   1fa90:	697b      	ldr	r3, [r7, #20]
   1fa92:	221f      	movs	r2, #31
   1fa94:	18bc      	adds	r4, r7, r2
   1fa96:	4a31      	ldr	r2, [pc, #196]	; (1fb5c <hif_send+0x38c>)
   1fa98:	0019      	movs	r1, r3
   1fa9a:	0010      	movs	r0, r2
   1fa9c:	4b24      	ldr	r3, [pc, #144]	; (1fb30 <hif_send+0x360>)
   1fa9e:	4798      	blx	r3
   1faa0:	0003      	movs	r3, r0
   1faa2:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   1faa4:	231f      	movs	r3, #31
   1faa6:	18fb      	adds	r3, r7, r3
   1faa8:	781b      	ldrb	r3, [r3, #0]
   1faaa:	b25b      	sxtb	r3, r3
   1faac:	2b00      	cmp	r3, #0
   1faae:	d01c      	beq.n	1faea <hif_send+0x31a>
   1fab0:	e02f      	b.n	1fb12 <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   1fab2:	231f      	movs	r3, #31
   1fab4:	18fc      	adds	r4, r7, r3
   1fab6:	4b2a      	ldr	r3, [pc, #168]	; (1fb60 <hif_send+0x390>)
   1fab8:	4798      	blx	r3
   1faba:	0003      	movs	r3, r0
   1fabc:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   1fabe:	231f      	movs	r3, #31
   1fac0:	18fb      	adds	r3, r7, r3
   1fac2:	22fd      	movs	r2, #253	; 0xfd
   1fac4:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   1fac6:	e026      	b.n	1fb16 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   1fac8:	2398      	movs	r3, #152	; 0x98
   1faca:	33ff      	adds	r3, #255	; 0xff
   1facc:	001a      	movs	r2, r3
   1face:	4925      	ldr	r1, [pc, #148]	; (1fb64 <hif_send+0x394>)
   1fad0:	4b25      	ldr	r3, [pc, #148]	; (1fb68 <hif_send+0x398>)
   1fad2:	0018      	movs	r0, r3
   1fad4:	4b1a      	ldr	r3, [pc, #104]	; (1fb40 <hif_send+0x370>)
   1fad6:	4798      	blx	r3
   1fad8:	4b24      	ldr	r3, [pc, #144]	; (1fb6c <hif_send+0x39c>)
   1fada:	0018      	movs	r0, r3
   1fadc:	4b18      	ldr	r3, [pc, #96]	; (1fb40 <hif_send+0x370>)
   1fade:	4798      	blx	r3
   1fae0:	4b19      	ldr	r3, [pc, #100]	; (1fb48 <hif_send+0x378>)
   1fae2:	0018      	movs	r0, r3
   1fae4:	4b16      	ldr	r3, [pc, #88]	; (1fb40 <hif_send+0x370>)
   1fae6:	4798      	blx	r3
		goto ERR2;
   1fae8:	e015      	b.n	1fb16 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   1faea:	231f      	movs	r3, #31
   1faec:	18fc      	adds	r4, r7, r3
   1faee:	4b1c      	ldr	r3, [pc, #112]	; (1fb60 <hif_send+0x390>)
   1faf0:	4798      	blx	r3
   1faf2:	0003      	movs	r3, r0
   1faf4:	7023      	strb	r3, [r4, #0]
	return ret;
   1faf6:	231f      	movs	r3, #31
   1faf8:	18fb      	adds	r3, r7, r3
   1fafa:	781b      	ldrb	r3, [r3, #0]
   1fafc:	b25b      	sxtb	r3, r3
   1fafe:	e00e      	b.n	1fb1e <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   1fb00:	46c0      	nop			; (mov r8, r8)
   1fb02:	e006      	b.n	1fb12 <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   1fb04:	46c0      	nop			; (mov r8, r8)
   1fb06:	e004      	b.n	1fb12 <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   1fb08:	46c0      	nop			; (mov r8, r8)
   1fb0a:	e002      	b.n	1fb12 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1fb0c:	46c0      	nop			; (mov r8, r8)
   1fb0e:	e000      	b.n	1fb12 <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   1fb10:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   1fb12:	4b17      	ldr	r3, [pc, #92]	; (1fb70 <hif_send+0x3a0>)
   1fb14:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   1fb16:	231f      	movs	r3, #31
   1fb18:	18fb      	adds	r3, r7, r3
   1fb1a:	781b      	ldrb	r3, [r3, #0]
   1fb1c:	b25b      	sxtb	r3, r3
}
   1fb1e:	0018      	movs	r0, r3
   1fb20:	46bd      	mov	sp, r7
   1fb22:	b009      	add	sp, #36	; 0x24
   1fb24:	bd90      	pop	{r4, r7, pc}
   1fb26:	46c0      	nop			; (mov r8, r8)
   1fb28:	0001f699 	.word	0x0001f699
   1fb2c:	0000108c 	.word	0x0000108c
   1fb30:	00021625 	.word	0x00021625
   1fb34:	00001078 	.word	0x00001078
   1fb38:	00021601 	.word	0x00021601
   1fb3c:	00036848 	.word	0x00036848
   1fb40:	0001c7d9 	.word	0x0001c7d9
   1fb44:	00036854 	.word	0x00036854
   1fb48:	00036868 	.word	0x00036868
   1fb4c:	0001ec91 	.word	0x0001ec91
   1fb50:	00150400 	.word	0x00150400
   1fb54:	000003e7 	.word	0x000003e7
   1fb58:	0002176d 	.word	0x0002176d
   1fb5c:	0000106c 	.word	0x0000106c
   1fb60:	0001f731 	.word	0x0001f731
   1fb64:	00036b70 	.word	0x00036b70
   1fb68:	0003686c 	.word	0x0003686c
   1fb6c:	00036880 	.word	0x00036880
   1fb70:	0001f709 	.word	0x0001f709

0001fb74 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   1fb74:	b590      	push	{r4, r7, lr}
   1fb76:	b087      	sub	sp, #28
   1fb78:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   1fb7a:	230f      	movs	r3, #15
   1fb7c:	18fb      	adds	r3, r7, r3
   1fb7e:	2200      	movs	r2, #0
   1fb80:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   1fb82:	230f      	movs	r3, #15
   1fb84:	18fc      	adds	r4, r7, r3
   1fb86:	2308      	movs	r3, #8
   1fb88:	18fb      	adds	r3, r7, r3
   1fb8a:	4adc      	ldr	r2, [pc, #880]	; (1fefc <hif_isr+0x388>)
   1fb8c:	0019      	movs	r1, r3
   1fb8e:	0010      	movs	r0, r2
   1fb90:	4bdb      	ldr	r3, [pc, #876]	; (1ff00 <hif_isr+0x38c>)
   1fb92:	4798      	blx	r3
   1fb94:	0003      	movs	r3, r0
   1fb96:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   1fb98:	230f      	movs	r3, #15
   1fb9a:	18fb      	adds	r3, r7, r3
   1fb9c:	781b      	ldrb	r3, [r3, #0]
   1fb9e:	b25b      	sxtb	r3, r3
   1fba0:	2b00      	cmp	r3, #0
   1fba2:	d000      	beq.n	1fba6 <hif_isr+0x32>
   1fba4:	e21e      	b.n	1ffe4 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   1fba6:	68bb      	ldr	r3, [r7, #8]
   1fba8:	2201      	movs	r2, #1
   1fbaa:	4013      	ands	r3, r2
   1fbac:	d100      	bne.n	1fbb0 <hif_isr+0x3c>
   1fbae:	e204      	b.n	1ffba <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   1fbb0:	2000      	movs	r0, #0
   1fbb2:	4bd4      	ldr	r3, [pc, #848]	; (1ff04 <hif_isr+0x390>)
   1fbb4:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   1fbb6:	68bb      	ldr	r3, [r7, #8]
   1fbb8:	2201      	movs	r2, #1
   1fbba:	4393      	bics	r3, r2
   1fbbc:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   1fbbe:	68bb      	ldr	r3, [r7, #8]
   1fbc0:	220f      	movs	r2, #15
   1fbc2:	18bc      	adds	r4, r7, r2
   1fbc4:	4acd      	ldr	r2, [pc, #820]	; (1fefc <hif_isr+0x388>)
   1fbc6:	0019      	movs	r1, r3
   1fbc8:	0010      	movs	r0, r2
   1fbca:	4bcf      	ldr	r3, [pc, #828]	; (1ff08 <hif_isr+0x394>)
   1fbcc:	4798      	blx	r3
   1fbce:	0003      	movs	r3, r0
   1fbd0:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   1fbd2:	230f      	movs	r3, #15
   1fbd4:	18fb      	adds	r3, r7, r3
   1fbd6:	781b      	ldrb	r3, [r3, #0]
   1fbd8:	b25b      	sxtb	r3, r3
   1fbda:	2b00      	cmp	r3, #0
   1fbdc:	d000      	beq.n	1fbe0 <hif_isr+0x6c>
   1fbde:	e210      	b.n	20002 <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   1fbe0:	4bca      	ldr	r3, [pc, #808]	; (1ff0c <hif_isr+0x398>)
   1fbe2:	2201      	movs	r2, #1
   1fbe4:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   1fbe6:	68bb      	ldr	r3, [r7, #8]
   1fbe8:	089b      	lsrs	r3, r3, #2
   1fbea:	b29a      	uxth	r2, r3
   1fbec:	230c      	movs	r3, #12
   1fbee:	18fb      	adds	r3, r7, r3
   1fbf0:	0512      	lsls	r2, r2, #20
   1fbf2:	0d12      	lsrs	r2, r2, #20
   1fbf4:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   1fbf6:	230c      	movs	r3, #12
   1fbf8:	18fb      	adds	r3, r7, r3
   1fbfa:	881b      	ldrh	r3, [r3, #0]
   1fbfc:	2b00      	cmp	r3, #0
   1fbfe:	d100      	bne.n	1fc02 <hif_isr+0x8e>
   1fc00:	e1c8      	b.n	1ff94 <hif_isr+0x420>
				uint32 address = 0;
   1fc02:	2300      	movs	r3, #0
   1fc04:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   1fc06:	230f      	movs	r3, #15
   1fc08:	18fc      	adds	r4, r7, r3
   1fc0a:	003b      	movs	r3, r7
   1fc0c:	4ac0      	ldr	r2, [pc, #768]	; (1ff10 <hif_isr+0x39c>)
   1fc0e:	0019      	movs	r1, r3
   1fc10:	0010      	movs	r0, r2
   1fc12:	4bbb      	ldr	r3, [pc, #748]	; (1ff00 <hif_isr+0x38c>)
   1fc14:	4798      	blx	r3
   1fc16:	0003      	movs	r3, r0
   1fc18:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   1fc1a:	230f      	movs	r3, #15
   1fc1c:	18fb      	adds	r3, r7, r3
   1fc1e:	781b      	ldrb	r3, [r3, #0]
   1fc20:	b25b      	sxtb	r3, r3
   1fc22:	2b00      	cmp	r3, #0
   1fc24:	d012      	beq.n	1fc4c <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   1fc26:	23e4      	movs	r3, #228	; 0xe4
   1fc28:	005a      	lsls	r2, r3, #1
   1fc2a:	49ba      	ldr	r1, [pc, #744]	; (1ff14 <hif_isr+0x3a0>)
   1fc2c:	4bba      	ldr	r3, [pc, #744]	; (1ff18 <hif_isr+0x3a4>)
   1fc2e:	0018      	movs	r0, r3
   1fc30:	4bba      	ldr	r3, [pc, #744]	; (1ff1c <hif_isr+0x3a8>)
   1fc32:	4798      	blx	r3
   1fc34:	4bba      	ldr	r3, [pc, #744]	; (1ff20 <hif_isr+0x3ac>)
   1fc36:	0018      	movs	r0, r3
   1fc38:	4bb8      	ldr	r3, [pc, #736]	; (1ff1c <hif_isr+0x3a8>)
   1fc3a:	4798      	blx	r3
   1fc3c:	4bb9      	ldr	r3, [pc, #740]	; (1ff24 <hif_isr+0x3b0>)
   1fc3e:	0018      	movs	r0, r3
   1fc40:	4bb6      	ldr	r3, [pc, #728]	; (1ff1c <hif_isr+0x3a8>)
   1fc42:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1fc44:	2001      	movs	r0, #1
   1fc46:	4baf      	ldr	r3, [pc, #700]	; (1ff04 <hif_isr+0x390>)
   1fc48:	4798      	blx	r3
					goto ERR1;
   1fc4a:	e1db      	b.n	20004 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   1fc4c:	683a      	ldr	r2, [r7, #0]
   1fc4e:	4baf      	ldr	r3, [pc, #700]	; (1ff0c <hif_isr+0x398>)
   1fc50:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   1fc52:	230c      	movs	r3, #12
   1fc54:	18fb      	adds	r3, r7, r3
   1fc56:	881a      	ldrh	r2, [r3, #0]
   1fc58:	4bac      	ldr	r3, [pc, #688]	; (1ff0c <hif_isr+0x398>)
   1fc5a:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   1fc5c:	683b      	ldr	r3, [r7, #0]
   1fc5e:	220f      	movs	r2, #15
   1fc60:	18bc      	adds	r4, r7, r2
   1fc62:	1d39      	adds	r1, r7, #4
   1fc64:	2204      	movs	r2, #4
   1fc66:	0018      	movs	r0, r3
   1fc68:	4baf      	ldr	r3, [pc, #700]	; (1ff28 <hif_isr+0x3b4>)
   1fc6a:	4798      	blx	r3
   1fc6c:	0003      	movs	r3, r0
   1fc6e:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   1fc70:	1d3b      	adds	r3, r7, #4
   1fc72:	885b      	ldrh	r3, [r3, #2]
   1fc74:	b29a      	uxth	r2, r3
   1fc76:	1d3b      	adds	r3, r7, #4
   1fc78:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   1fc7a:	230f      	movs	r3, #15
   1fc7c:	18fb      	adds	r3, r7, r3
   1fc7e:	781b      	ldrb	r3, [r3, #0]
   1fc80:	b25b      	sxtb	r3, r3
   1fc82:	2b00      	cmp	r3, #0
   1fc84:	d012      	beq.n	1fcac <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   1fc86:	23e9      	movs	r3, #233	; 0xe9
   1fc88:	005a      	lsls	r2, r3, #1
   1fc8a:	49a2      	ldr	r1, [pc, #648]	; (1ff14 <hif_isr+0x3a0>)
   1fc8c:	4ba2      	ldr	r3, [pc, #648]	; (1ff18 <hif_isr+0x3a4>)
   1fc8e:	0018      	movs	r0, r3
   1fc90:	4ba2      	ldr	r3, [pc, #648]	; (1ff1c <hif_isr+0x3a8>)
   1fc92:	4798      	blx	r3
   1fc94:	4ba5      	ldr	r3, [pc, #660]	; (1ff2c <hif_isr+0x3b8>)
   1fc96:	0018      	movs	r0, r3
   1fc98:	4ba0      	ldr	r3, [pc, #640]	; (1ff1c <hif_isr+0x3a8>)
   1fc9a:	4798      	blx	r3
   1fc9c:	4ba1      	ldr	r3, [pc, #644]	; (1ff24 <hif_isr+0x3b0>)
   1fc9e:	0018      	movs	r0, r3
   1fca0:	4b9e      	ldr	r3, [pc, #632]	; (1ff1c <hif_isr+0x3a8>)
   1fca2:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   1fca4:	2001      	movs	r0, #1
   1fca6:	4b97      	ldr	r3, [pc, #604]	; (1ff04 <hif_isr+0x390>)
   1fca8:	4798      	blx	r3
					goto ERR1;
   1fcaa:	e1ab      	b.n	20004 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   1fcac:	1d3b      	adds	r3, r7, #4
   1fcae:	885b      	ldrh	r3, [r3, #2]
   1fcb0:	b29b      	uxth	r3, r3
   1fcb2:	220c      	movs	r2, #12
   1fcb4:	18ba      	adds	r2, r7, r2
   1fcb6:	8812      	ldrh	r2, [r2, #0]
   1fcb8:	429a      	cmp	r2, r3
   1fcba:	d02f      	beq.n	1fd1c <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   1fcbc:	230c      	movs	r3, #12
   1fcbe:	18fb      	adds	r3, r7, r3
   1fcc0:	881b      	ldrh	r3, [r3, #0]
   1fcc2:	1d3a      	adds	r2, r7, #4
   1fcc4:	8852      	ldrh	r2, [r2, #2]
   1fcc6:	b292      	uxth	r2, r2
   1fcc8:	1a9b      	subs	r3, r3, r2
   1fcca:	2b04      	cmp	r3, #4
   1fccc:	dd26      	ble.n	1fd1c <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   1fcce:	23dc      	movs	r3, #220	; 0xdc
   1fcd0:	33ff      	adds	r3, #255	; 0xff
   1fcd2:	001a      	movs	r2, r3
   1fcd4:	498f      	ldr	r1, [pc, #572]	; (1ff14 <hif_isr+0x3a0>)
   1fcd6:	4b90      	ldr	r3, [pc, #576]	; (1ff18 <hif_isr+0x3a4>)
   1fcd8:	0018      	movs	r0, r3
   1fcda:	4b90      	ldr	r3, [pc, #576]	; (1ff1c <hif_isr+0x3a8>)
   1fcdc:	4798      	blx	r3
   1fcde:	230c      	movs	r3, #12
   1fce0:	18fb      	adds	r3, r7, r3
   1fce2:	8819      	ldrh	r1, [r3, #0]
   1fce4:	1d3b      	adds	r3, r7, #4
   1fce6:	885b      	ldrh	r3, [r3, #2]
   1fce8:	b29b      	uxth	r3, r3
   1fcea:	001a      	movs	r2, r3
   1fcec:	1d3b      	adds	r3, r7, #4
   1fcee:	781b      	ldrb	r3, [r3, #0]
   1fcf0:	b2db      	uxtb	r3, r3
   1fcf2:	001c      	movs	r4, r3
   1fcf4:	1d3b      	adds	r3, r7, #4
   1fcf6:	785b      	ldrb	r3, [r3, #1]
   1fcf8:	b2db      	uxtb	r3, r3
   1fcfa:	488d      	ldr	r0, [pc, #564]	; (1ff30 <hif_isr+0x3bc>)
   1fcfc:	9300      	str	r3, [sp, #0]
   1fcfe:	0023      	movs	r3, r4
   1fd00:	4c86      	ldr	r4, [pc, #536]	; (1ff1c <hif_isr+0x3a8>)
   1fd02:	47a0      	blx	r4
   1fd04:	4b87      	ldr	r3, [pc, #540]	; (1ff24 <hif_isr+0x3b0>)
   1fd06:	0018      	movs	r0, r3
   1fd08:	4b84      	ldr	r3, [pc, #528]	; (1ff1c <hif_isr+0x3a8>)
   1fd0a:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   1fd0c:	2001      	movs	r0, #1
   1fd0e:	4b7d      	ldr	r3, [pc, #500]	; (1ff04 <hif_isr+0x390>)
   1fd10:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   1fd12:	230f      	movs	r3, #15
   1fd14:	18fb      	adds	r3, r7, r3
   1fd16:	22fa      	movs	r2, #250	; 0xfa
   1fd18:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   1fd1a:	e173      	b.n	20004 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   1fd1c:	1d3b      	adds	r3, r7, #4
   1fd1e:	781b      	ldrb	r3, [r3, #0]
   1fd20:	b2db      	uxtb	r3, r3
   1fd22:	2b01      	cmp	r3, #1
   1fd24:	d122      	bne.n	1fd6c <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   1fd26:	4b79      	ldr	r3, [pc, #484]	; (1ff0c <hif_isr+0x398>)
   1fd28:	691b      	ldr	r3, [r3, #16]
   1fd2a:	2b00      	cmp	r3, #0
   1fd2c:	d00d      	beq.n	1fd4a <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fd2e:	4b77      	ldr	r3, [pc, #476]	; (1ff0c <hif_isr+0x398>)
   1fd30:	691b      	ldr	r3, [r3, #16]
   1fd32:	1d3a      	adds	r2, r7, #4
   1fd34:	7852      	ldrb	r2, [r2, #1]
   1fd36:	b2d0      	uxtb	r0, r2
   1fd38:	1d3a      	adds	r2, r7, #4
   1fd3a:	8852      	ldrh	r2, [r2, #2]
   1fd3c:	b292      	uxth	r2, r2
   1fd3e:	3a08      	subs	r2, #8
   1fd40:	b291      	uxth	r1, r2
   1fd42:	683a      	ldr	r2, [r7, #0]
   1fd44:	3208      	adds	r2, #8
   1fd46:	4798      	blx	r3
   1fd48:	e102      	b.n	1ff50 <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   1fd4a:	23e8      	movs	r3, #232	; 0xe8
   1fd4c:	33ff      	adds	r3, #255	; 0xff
   1fd4e:	001a      	movs	r2, r3
   1fd50:	4970      	ldr	r1, [pc, #448]	; (1ff14 <hif_isr+0x3a0>)
   1fd52:	4b71      	ldr	r3, [pc, #452]	; (1ff18 <hif_isr+0x3a4>)
   1fd54:	0018      	movs	r0, r3
   1fd56:	4b71      	ldr	r3, [pc, #452]	; (1ff1c <hif_isr+0x3a8>)
   1fd58:	4798      	blx	r3
   1fd5a:	4b76      	ldr	r3, [pc, #472]	; (1ff34 <hif_isr+0x3c0>)
   1fd5c:	0018      	movs	r0, r3
   1fd5e:	4b6f      	ldr	r3, [pc, #444]	; (1ff1c <hif_isr+0x3a8>)
   1fd60:	4798      	blx	r3
   1fd62:	4b70      	ldr	r3, [pc, #448]	; (1ff24 <hif_isr+0x3b0>)
   1fd64:	0018      	movs	r0, r3
   1fd66:	4b6d      	ldr	r3, [pc, #436]	; (1ff1c <hif_isr+0x3a8>)
   1fd68:	4798      	blx	r3
   1fd6a:	e0f1      	b.n	1ff50 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   1fd6c:	1d3b      	adds	r3, r7, #4
   1fd6e:	781b      	ldrb	r3, [r3, #0]
   1fd70:	b2db      	uxtb	r3, r3
   1fd72:	2b02      	cmp	r3, #2
   1fd74:	d122      	bne.n	1fdbc <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   1fd76:	4b65      	ldr	r3, [pc, #404]	; (1ff0c <hif_isr+0x398>)
   1fd78:	695b      	ldr	r3, [r3, #20]
   1fd7a:	2b00      	cmp	r3, #0
   1fd7c:	d00d      	beq.n	1fd9a <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fd7e:	4b63      	ldr	r3, [pc, #396]	; (1ff0c <hif_isr+0x398>)
   1fd80:	695b      	ldr	r3, [r3, #20]
   1fd82:	1d3a      	adds	r2, r7, #4
   1fd84:	7852      	ldrb	r2, [r2, #1]
   1fd86:	b2d0      	uxtb	r0, r2
   1fd88:	1d3a      	adds	r2, r7, #4
   1fd8a:	8852      	ldrh	r2, [r2, #2]
   1fd8c:	b292      	uxth	r2, r2
   1fd8e:	3a08      	subs	r2, #8
   1fd90:	b291      	uxth	r1, r2
   1fd92:	683a      	ldr	r2, [r7, #0]
   1fd94:	3208      	adds	r2, #8
   1fd96:	4798      	blx	r3
   1fd98:	e0da      	b.n	1ff50 <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   1fd9a:	23f0      	movs	r3, #240	; 0xf0
   1fd9c:	33ff      	adds	r3, #255	; 0xff
   1fd9e:	001a      	movs	r2, r3
   1fda0:	495c      	ldr	r1, [pc, #368]	; (1ff14 <hif_isr+0x3a0>)
   1fda2:	4b5d      	ldr	r3, [pc, #372]	; (1ff18 <hif_isr+0x3a4>)
   1fda4:	0018      	movs	r0, r3
   1fda6:	4b5d      	ldr	r3, [pc, #372]	; (1ff1c <hif_isr+0x3a8>)
   1fda8:	4798      	blx	r3
   1fdaa:	4b63      	ldr	r3, [pc, #396]	; (1ff38 <hif_isr+0x3c4>)
   1fdac:	0018      	movs	r0, r3
   1fdae:	4b5b      	ldr	r3, [pc, #364]	; (1ff1c <hif_isr+0x3a8>)
   1fdb0:	4798      	blx	r3
   1fdb2:	4b5c      	ldr	r3, [pc, #368]	; (1ff24 <hif_isr+0x3b0>)
   1fdb4:	0018      	movs	r0, r3
   1fdb6:	4b59      	ldr	r3, [pc, #356]	; (1ff1c <hif_isr+0x3a8>)
   1fdb8:	4798      	blx	r3
   1fdba:	e0c9      	b.n	1ff50 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   1fdbc:	1d3b      	adds	r3, r7, #4
   1fdbe:	781b      	ldrb	r3, [r3, #0]
   1fdc0:	b2db      	uxtb	r3, r3
   1fdc2:	2b04      	cmp	r3, #4
   1fdc4:	d122      	bne.n	1fe0c <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   1fdc6:	4b51      	ldr	r3, [pc, #324]	; (1ff0c <hif_isr+0x398>)
   1fdc8:	699b      	ldr	r3, [r3, #24]
   1fdca:	2b00      	cmp	r3, #0
   1fdcc:	d00d      	beq.n	1fdea <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fdce:	4b4f      	ldr	r3, [pc, #316]	; (1ff0c <hif_isr+0x398>)
   1fdd0:	699b      	ldr	r3, [r3, #24]
   1fdd2:	1d3a      	adds	r2, r7, #4
   1fdd4:	7852      	ldrb	r2, [r2, #1]
   1fdd6:	b2d0      	uxtb	r0, r2
   1fdd8:	1d3a      	adds	r2, r7, #4
   1fdda:	8852      	ldrh	r2, [r2, #2]
   1fddc:	b292      	uxth	r2, r2
   1fdde:	3a08      	subs	r2, #8
   1fde0:	b291      	uxth	r1, r2
   1fde2:	683a      	ldr	r2, [r7, #0]
   1fde4:	3208      	adds	r2, #8
   1fde6:	4798      	blx	r3
   1fde8:	e0b2      	b.n	1ff50 <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   1fdea:	23f8      	movs	r3, #248	; 0xf8
   1fdec:	33ff      	adds	r3, #255	; 0xff
   1fdee:	001a      	movs	r2, r3
   1fdf0:	4948      	ldr	r1, [pc, #288]	; (1ff14 <hif_isr+0x3a0>)
   1fdf2:	4b49      	ldr	r3, [pc, #292]	; (1ff18 <hif_isr+0x3a4>)
   1fdf4:	0018      	movs	r0, r3
   1fdf6:	4b49      	ldr	r3, [pc, #292]	; (1ff1c <hif_isr+0x3a8>)
   1fdf8:	4798      	blx	r3
   1fdfa:	4b50      	ldr	r3, [pc, #320]	; (1ff3c <hif_isr+0x3c8>)
   1fdfc:	0018      	movs	r0, r3
   1fdfe:	4b47      	ldr	r3, [pc, #284]	; (1ff1c <hif_isr+0x3a8>)
   1fe00:	4798      	blx	r3
   1fe02:	4b48      	ldr	r3, [pc, #288]	; (1ff24 <hif_isr+0x3b0>)
   1fe04:	0018      	movs	r0, r3
   1fe06:	4b45      	ldr	r3, [pc, #276]	; (1ff1c <hif_isr+0x3a8>)
   1fe08:	4798      	blx	r3
   1fe0a:	e0a1      	b.n	1ff50 <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   1fe0c:	1d3b      	adds	r3, r7, #4
   1fe0e:	781b      	ldrb	r3, [r3, #0]
   1fe10:	b2db      	uxtb	r3, r3
   1fe12:	2b06      	cmp	r3, #6
   1fe14:	d121      	bne.n	1fe5a <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   1fe16:	4b3d      	ldr	r3, [pc, #244]	; (1ff0c <hif_isr+0x398>)
   1fe18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fe1a:	2b00      	cmp	r3, #0
   1fe1c:	d00d      	beq.n	1fe3a <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fe1e:	4b3b      	ldr	r3, [pc, #236]	; (1ff0c <hif_isr+0x398>)
   1fe20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fe22:	1d3a      	adds	r2, r7, #4
   1fe24:	7852      	ldrb	r2, [r2, #1]
   1fe26:	b2d0      	uxtb	r0, r2
   1fe28:	1d3a      	adds	r2, r7, #4
   1fe2a:	8852      	ldrh	r2, [r2, #2]
   1fe2c:	b292      	uxth	r2, r2
   1fe2e:	3a08      	subs	r2, #8
   1fe30:	b291      	uxth	r1, r2
   1fe32:	683a      	ldr	r2, [r7, #0]
   1fe34:	3208      	adds	r2, #8
   1fe36:	4798      	blx	r3
   1fe38:	e08a      	b.n	1ff50 <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   1fe3a:	2380      	movs	r3, #128	; 0x80
   1fe3c:	009a      	lsls	r2, r3, #2
   1fe3e:	4935      	ldr	r1, [pc, #212]	; (1ff14 <hif_isr+0x3a0>)
   1fe40:	4b35      	ldr	r3, [pc, #212]	; (1ff18 <hif_isr+0x3a4>)
   1fe42:	0018      	movs	r0, r3
   1fe44:	4b35      	ldr	r3, [pc, #212]	; (1ff1c <hif_isr+0x3a8>)
   1fe46:	4798      	blx	r3
   1fe48:	4b3d      	ldr	r3, [pc, #244]	; (1ff40 <hif_isr+0x3cc>)
   1fe4a:	0018      	movs	r0, r3
   1fe4c:	4b33      	ldr	r3, [pc, #204]	; (1ff1c <hif_isr+0x3a8>)
   1fe4e:	4798      	blx	r3
   1fe50:	4b34      	ldr	r3, [pc, #208]	; (1ff24 <hif_isr+0x3b0>)
   1fe52:	0018      	movs	r0, r3
   1fe54:	4b31      	ldr	r3, [pc, #196]	; (1ff1c <hif_isr+0x3a8>)
   1fe56:	4798      	blx	r3
   1fe58:	e07a      	b.n	1ff50 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   1fe5a:	1d3b      	adds	r3, r7, #4
   1fe5c:	781b      	ldrb	r3, [r3, #0]
   1fe5e:	b2db      	uxtb	r3, r3
   1fe60:	2b07      	cmp	r3, #7
   1fe62:	d120      	bne.n	1fea6 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   1fe64:	4b29      	ldr	r3, [pc, #164]	; (1ff0c <hif_isr+0x398>)
   1fe66:	69db      	ldr	r3, [r3, #28]
   1fe68:	2b00      	cmp	r3, #0
   1fe6a:	d00d      	beq.n	1fe88 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1fe6c:	4b27      	ldr	r3, [pc, #156]	; (1ff0c <hif_isr+0x398>)
   1fe6e:	69db      	ldr	r3, [r3, #28]
   1fe70:	1d3a      	adds	r2, r7, #4
   1fe72:	7852      	ldrb	r2, [r2, #1]
   1fe74:	b2d0      	uxtb	r0, r2
   1fe76:	1d3a      	adds	r2, r7, #4
   1fe78:	8852      	ldrh	r2, [r2, #2]
   1fe7a:	b292      	uxth	r2, r2
   1fe7c:	3a08      	subs	r2, #8
   1fe7e:	b291      	uxth	r1, r2
   1fe80:	683a      	ldr	r2, [r7, #0]
   1fe82:	3208      	adds	r2, #8
   1fe84:	4798      	blx	r3
   1fe86:	e063      	b.n	1ff50 <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   1fe88:	4a2e      	ldr	r2, [pc, #184]	; (1ff44 <hif_isr+0x3d0>)
   1fe8a:	4922      	ldr	r1, [pc, #136]	; (1ff14 <hif_isr+0x3a0>)
   1fe8c:	4b22      	ldr	r3, [pc, #136]	; (1ff18 <hif_isr+0x3a4>)
   1fe8e:	0018      	movs	r0, r3
   1fe90:	4b22      	ldr	r3, [pc, #136]	; (1ff1c <hif_isr+0x3a8>)
   1fe92:	4798      	blx	r3
   1fe94:	4b2c      	ldr	r3, [pc, #176]	; (1ff48 <hif_isr+0x3d4>)
   1fe96:	0018      	movs	r0, r3
   1fe98:	4b20      	ldr	r3, [pc, #128]	; (1ff1c <hif_isr+0x3a8>)
   1fe9a:	4798      	blx	r3
   1fe9c:	4b21      	ldr	r3, [pc, #132]	; (1ff24 <hif_isr+0x3b0>)
   1fe9e:	0018      	movs	r0, r3
   1fea0:	4b1e      	ldr	r3, [pc, #120]	; (1ff1c <hif_isr+0x3a8>)
   1fea2:	4798      	blx	r3
   1fea4:	e054      	b.n	1ff50 <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   1fea6:	1d3b      	adds	r3, r7, #4
   1fea8:	781b      	ldrb	r3, [r3, #0]
   1feaa:	b2db      	uxtb	r3, r3
   1feac:	2b05      	cmp	r3, #5
   1feae:	d111      	bne.n	1fed4 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   1feb0:	4b16      	ldr	r3, [pc, #88]	; (1ff0c <hif_isr+0x398>)
   1feb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1feb4:	2b00      	cmp	r3, #0
   1feb6:	d04b      	beq.n	1ff50 <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   1feb8:	4b14      	ldr	r3, [pc, #80]	; (1ff0c <hif_isr+0x398>)
   1feba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1febc:	1d3a      	adds	r2, r7, #4
   1febe:	7852      	ldrb	r2, [r2, #1]
   1fec0:	b2d0      	uxtb	r0, r2
   1fec2:	1d3a      	adds	r2, r7, #4
   1fec4:	8852      	ldrh	r2, [r2, #2]
   1fec6:	b292      	uxth	r2, r2
   1fec8:	3a08      	subs	r2, #8
   1feca:	b291      	uxth	r1, r2
   1fecc:	683a      	ldr	r2, [r7, #0]
   1fece:	3208      	adds	r2, #8
   1fed0:	4798      	blx	r3
   1fed2:	e03d      	b.n	1ff50 <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   1fed4:	2384      	movs	r3, #132	; 0x84
   1fed6:	009a      	lsls	r2, r3, #2
   1fed8:	490e      	ldr	r1, [pc, #56]	; (1ff14 <hif_isr+0x3a0>)
   1feda:	4b0f      	ldr	r3, [pc, #60]	; (1ff18 <hif_isr+0x3a4>)
   1fedc:	0018      	movs	r0, r3
   1fede:	4b0f      	ldr	r3, [pc, #60]	; (1ff1c <hif_isr+0x3a8>)
   1fee0:	4798      	blx	r3
   1fee2:	4b1a      	ldr	r3, [pc, #104]	; (1ff4c <hif_isr+0x3d8>)
   1fee4:	0018      	movs	r0, r3
   1fee6:	4b0d      	ldr	r3, [pc, #52]	; (1ff1c <hif_isr+0x3a8>)
   1fee8:	4798      	blx	r3
   1feea:	4b0e      	ldr	r3, [pc, #56]	; (1ff24 <hif_isr+0x3b0>)
   1feec:	0018      	movs	r0, r3
   1feee:	4b0b      	ldr	r3, [pc, #44]	; (1ff1c <hif_isr+0x3a8>)
   1fef0:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   1fef2:	230f      	movs	r3, #15
   1fef4:	18fb      	adds	r3, r7, r3
   1fef6:	22fa      	movs	r2, #250	; 0xfa
   1fef8:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   1fefa:	e083      	b.n	20004 <hif_isr+0x490>
   1fefc:	00001070 	.word	0x00001070
   1ff00:	00021601 	.word	0x00021601
   1ff04:	0001ed25 	.word	0x0001ed25
   1ff08:	00021625 	.word	0x00021625
   1ff0c:	20005894 	.word	0x20005894
   1ff10:	00001084 	.word	0x00001084
   1ff14:	00036b7c 	.word	0x00036b7c
   1ff18:	0003686c 	.word	0x0003686c
   1ff1c:	0001c7d9 	.word	0x0001c7d9
   1ff20:	000368a0 	.word	0x000368a0
   1ff24:	00036868 	.word	0x00036868
   1ff28:	00021675 	.word	0x00021675
   1ff2c:	000368c8 	.word	0x000368c8
   1ff30:	000368e0 	.word	0x000368e0
   1ff34:	00036920 	.word	0x00036920
   1ff38:	00036944 	.word	0x00036944
   1ff3c:	00036968 	.word	0x00036968
   1ff40:	00036988 	.word	0x00036988
   1ff44:	00000207 	.word	0x00000207
   1ff48:	000369ac 	.word	0x000369ac
   1ff4c:	000369d0 	.word	0x000369d0
				}
				if(gstrHifCxt.u8HifRXDone)
   1ff50:	4b30      	ldr	r3, [pc, #192]	; (20014 <hif_isr+0x4a0>)
   1ff52:	789b      	ldrb	r3, [r3, #2]
   1ff54:	b2db      	uxtb	r3, r3
   1ff56:	2b00      	cmp	r3, #0
   1ff58:	d054      	beq.n	20004 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   1ff5a:	4a2f      	ldr	r2, [pc, #188]	; (20018 <hif_isr+0x4a4>)
   1ff5c:	492f      	ldr	r1, [pc, #188]	; (2001c <hif_isr+0x4a8>)
   1ff5e:	4b30      	ldr	r3, [pc, #192]	; (20020 <hif_isr+0x4ac>)
   1ff60:	0018      	movs	r0, r3
   1ff62:	4b30      	ldr	r3, [pc, #192]	; (20024 <hif_isr+0x4b0>)
   1ff64:	4798      	blx	r3
   1ff66:	1d3b      	adds	r3, r7, #4
   1ff68:	781b      	ldrb	r3, [r3, #0]
   1ff6a:	b2db      	uxtb	r3, r3
   1ff6c:	0019      	movs	r1, r3
   1ff6e:	1d3b      	adds	r3, r7, #4
   1ff70:	785b      	ldrb	r3, [r3, #1]
   1ff72:	b2db      	uxtb	r3, r3
   1ff74:	001a      	movs	r2, r3
   1ff76:	4b2c      	ldr	r3, [pc, #176]	; (20028 <hif_isr+0x4b4>)
   1ff78:	0018      	movs	r0, r3
   1ff7a:	4b2a      	ldr	r3, [pc, #168]	; (20024 <hif_isr+0x4b0>)
   1ff7c:	4798      	blx	r3
   1ff7e:	4b2b      	ldr	r3, [pc, #172]	; (2002c <hif_isr+0x4b8>)
   1ff80:	0018      	movs	r0, r3
   1ff82:	4b28      	ldr	r3, [pc, #160]	; (20024 <hif_isr+0x4b0>)
   1ff84:	4798      	blx	r3
					ret = hif_set_rx_done();
   1ff86:	230f      	movs	r3, #15
   1ff88:	18fc      	adds	r4, r7, r3
   1ff8a:	4b29      	ldr	r3, [pc, #164]	; (20030 <hif_isr+0x4bc>)
   1ff8c:	4798      	blx	r3
   1ff8e:	0003      	movs	r3, r0
   1ff90:	7023      	strb	r3, [r4, #0]
   1ff92:	e037      	b.n	20004 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   1ff94:	4a27      	ldr	r2, [pc, #156]	; (20034 <hif_isr+0x4c0>)
   1ff96:	4921      	ldr	r1, [pc, #132]	; (2001c <hif_isr+0x4a8>)
   1ff98:	4b21      	ldr	r3, [pc, #132]	; (20020 <hif_isr+0x4ac>)
   1ff9a:	0018      	movs	r0, r3
   1ff9c:	4b21      	ldr	r3, [pc, #132]	; (20024 <hif_isr+0x4b0>)
   1ff9e:	4798      	blx	r3
   1ffa0:	4b25      	ldr	r3, [pc, #148]	; (20038 <hif_isr+0x4c4>)
   1ffa2:	0018      	movs	r0, r3
   1ffa4:	4b1f      	ldr	r3, [pc, #124]	; (20024 <hif_isr+0x4b0>)
   1ffa6:	4798      	blx	r3
   1ffa8:	4b20      	ldr	r3, [pc, #128]	; (2002c <hif_isr+0x4b8>)
   1ffaa:	0018      	movs	r0, r3
   1ffac:	4b1d      	ldr	r3, [pc, #116]	; (20024 <hif_isr+0x4b0>)
   1ffae:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   1ffb0:	230f      	movs	r3, #15
   1ffb2:	18fb      	adds	r3, r7, r3
   1ffb4:	22fe      	movs	r2, #254	; 0xfe
   1ffb6:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   1ffb8:	e024      	b.n	20004 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   1ffba:	4a20      	ldr	r2, [pc, #128]	; (2003c <hif_isr+0x4c8>)
   1ffbc:	4917      	ldr	r1, [pc, #92]	; (2001c <hif_isr+0x4a8>)
   1ffbe:	4b18      	ldr	r3, [pc, #96]	; (20020 <hif_isr+0x4ac>)
   1ffc0:	0018      	movs	r0, r3
   1ffc2:	4b18      	ldr	r3, [pc, #96]	; (20024 <hif_isr+0x4b0>)
   1ffc4:	4798      	blx	r3
   1ffc6:	68ba      	ldr	r2, [r7, #8]
   1ffc8:	4b1d      	ldr	r3, [pc, #116]	; (20040 <hif_isr+0x4cc>)
   1ffca:	0011      	movs	r1, r2
   1ffcc:	0018      	movs	r0, r3
   1ffce:	4b15      	ldr	r3, [pc, #84]	; (20024 <hif_isr+0x4b0>)
   1ffd0:	4798      	blx	r3
   1ffd2:	4b16      	ldr	r3, [pc, #88]	; (2002c <hif_isr+0x4b8>)
   1ffd4:	0018      	movs	r0, r3
   1ffd6:	4b13      	ldr	r3, [pc, #76]	; (20024 <hif_isr+0x4b0>)
   1ffd8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   1ffda:	230f      	movs	r3, #15
   1ffdc:	18fb      	adds	r3, r7, r3
   1ffde:	22f4      	movs	r2, #244	; 0xf4
   1ffe0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   1ffe2:	e00f      	b.n	20004 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   1ffe4:	4a17      	ldr	r2, [pc, #92]	; (20044 <hif_isr+0x4d0>)
   1ffe6:	490d      	ldr	r1, [pc, #52]	; (2001c <hif_isr+0x4a8>)
   1ffe8:	4b0d      	ldr	r3, [pc, #52]	; (20020 <hif_isr+0x4ac>)
   1ffea:	0018      	movs	r0, r3
   1ffec:	4b0d      	ldr	r3, [pc, #52]	; (20024 <hif_isr+0x4b0>)
   1ffee:	4798      	blx	r3
   1fff0:	4b15      	ldr	r3, [pc, #84]	; (20048 <hif_isr+0x4d4>)
   1fff2:	0018      	movs	r0, r3
   1fff4:	4b0b      	ldr	r3, [pc, #44]	; (20024 <hif_isr+0x4b0>)
   1fff6:	4798      	blx	r3
   1fff8:	4b0c      	ldr	r3, [pc, #48]	; (2002c <hif_isr+0x4b8>)
   1fffa:	0018      	movs	r0, r3
   1fffc:	4b09      	ldr	r3, [pc, #36]	; (20024 <hif_isr+0x4b0>)
   1fffe:	4798      	blx	r3
		goto ERR1;
   20000:	e000      	b.n	20004 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   20002:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   20004:	230f      	movs	r3, #15
   20006:	18fb      	adds	r3, r7, r3
   20008:	781b      	ldrb	r3, [r3, #0]
   2000a:	b25b      	sxtb	r3, r3
}
   2000c:	0018      	movs	r0, r3
   2000e:	46bd      	mov	sp, r7
   20010:	b005      	add	sp, #20
   20012:	bd90      	pop	{r4, r7, pc}
   20014:	20005894 	.word	0x20005894
   20018:	00000216 	.word	0x00000216
   2001c:	00036b7c 	.word	0x00036b7c
   20020:	0003686c 	.word	0x0003686c
   20024:	0001c7d9 	.word	0x0001c7d9
   20028:	000369e8 	.word	0x000369e8
   2002c:	00036868 	.word	0x00036868
   20030:	0001f609 	.word	0x0001f609
   20034:	0000021d 	.word	0x0000021d
   20038:	00036a14 	.word	0x00036a14
   2003c:	00000225 	.word	0x00000225
   20040:	00036a28 	.word	0x00036a28
   20044:	0000022e 	.word	0x0000022e
   20048:	00036a44 	.word	0x00036a44

0002004c <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   2004c:	b590      	push	{r4, r7, lr}
   2004e:	b083      	sub	sp, #12
   20050:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   20052:	1dfb      	adds	r3, r7, #7
   20054:	2200      	movs	r2, #0
   20056:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   20058:	4b1c      	ldr	r3, [pc, #112]	; (200cc <hif_handle_isr+0x80>)
   2005a:	2200      	movs	r2, #0
   2005c:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2005e:	e024      	b.n	200aa <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   20060:	4b1a      	ldr	r3, [pc, #104]	; (200cc <hif_handle_isr+0x80>)
   20062:	78db      	ldrb	r3, [r3, #3]
   20064:	b2db      	uxtb	r3, r3
   20066:	3b01      	subs	r3, #1
   20068:	b2da      	uxtb	r2, r3
   2006a:	4b18      	ldr	r3, [pc, #96]	; (200cc <hif_handle_isr+0x80>)
   2006c:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2006e:	1dfc      	adds	r4, r7, #7
   20070:	4b17      	ldr	r3, [pc, #92]	; (200d0 <hif_handle_isr+0x84>)
   20072:	4798      	blx	r3
   20074:	0003      	movs	r3, r0
   20076:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   20078:	1dfb      	adds	r3, r7, #7
   2007a:	781b      	ldrb	r3, [r3, #0]
   2007c:	b25b      	sxtb	r3, r3
   2007e:	2b00      	cmp	r3, #0
   20080:	d100      	bne.n	20084 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   20082:	e012      	b.n	200aa <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   20084:	4a13      	ldr	r2, [pc, #76]	; (200d4 <hif_handle_isr+0x88>)
   20086:	4914      	ldr	r1, [pc, #80]	; (200d8 <hif_handle_isr+0x8c>)
   20088:	4b14      	ldr	r3, [pc, #80]	; (200dc <hif_handle_isr+0x90>)
   2008a:	0018      	movs	r0, r3
   2008c:	4b14      	ldr	r3, [pc, #80]	; (200e0 <hif_handle_isr+0x94>)
   2008e:	4798      	blx	r3
   20090:	1dfb      	adds	r3, r7, #7
   20092:	2200      	movs	r2, #0
   20094:	569a      	ldrsb	r2, [r3, r2]
   20096:	4b13      	ldr	r3, [pc, #76]	; (200e4 <hif_handle_isr+0x98>)
   20098:	0011      	movs	r1, r2
   2009a:	0018      	movs	r0, r3
   2009c:	4b10      	ldr	r3, [pc, #64]	; (200e0 <hif_handle_isr+0x94>)
   2009e:	4798      	blx	r3
   200a0:	4b11      	ldr	r3, [pc, #68]	; (200e8 <hif_handle_isr+0x9c>)
   200a2:	0018      	movs	r0, r3
   200a4:	4b0e      	ldr	r3, [pc, #56]	; (200e0 <hif_handle_isr+0x94>)
   200a6:	4798      	blx	r3
			ret = hif_isr();
   200a8:	e7e1      	b.n	2006e <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   200aa:	4b08      	ldr	r3, [pc, #32]	; (200cc <hif_handle_isr+0x80>)
   200ac:	78db      	ldrb	r3, [r3, #3]
   200ae:	b2db      	uxtb	r3, r3
   200b0:	2b00      	cmp	r3, #0
   200b2:	d004      	beq.n	200be <hif_handle_isr+0x72>
   200b4:	4b05      	ldr	r3, [pc, #20]	; (200cc <hif_handle_isr+0x80>)
   200b6:	791b      	ldrb	r3, [r3, #4]
   200b8:	b2db      	uxtb	r3, r3
   200ba:	2b00      	cmp	r3, #0
   200bc:	d0d0      	beq.n	20060 <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   200be:	1dfb      	adds	r3, r7, #7
   200c0:	781b      	ldrb	r3, [r3, #0]
   200c2:	b25b      	sxtb	r3, r3
}
   200c4:	0018      	movs	r0, r3
   200c6:	46bd      	mov	sp, r7
   200c8:	b003      	add	sp, #12
   200ca:	bd90      	pop	{r4, r7, pc}
   200cc:	20005894 	.word	0x20005894
   200d0:	0001fb75 	.word	0x0001fb75
   200d4:	00000257 	.word	0x00000257
   200d8:	00036b84 	.word	0x00036b84
   200dc:	0003686c 	.word	0x0003686c
   200e0:	0001c7d9 	.word	0x0001c7d9
   200e4:	00036a68 	.word	0x00036a68
   200e8:	00036868 	.word	0x00036868

000200ec <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   200ec:	b590      	push	{r4, r7, lr}
   200ee:	b087      	sub	sp, #28
   200f0:	af00      	add	r7, sp, #0
   200f2:	60f8      	str	r0, [r7, #12]
   200f4:	60b9      	str	r1, [r7, #8]
   200f6:	0019      	movs	r1, r3
   200f8:	1dbb      	adds	r3, r7, #6
   200fa:	801a      	strh	r2, [r3, #0]
   200fc:	1d7b      	adds	r3, r7, #5
   200fe:	1c0a      	adds	r2, r1, #0
   20100:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   20102:	2317      	movs	r3, #23
   20104:	18fb      	adds	r3, r7, r3
   20106:	2200      	movs	r2, #0
   20108:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   2010a:	68fb      	ldr	r3, [r7, #12]
   2010c:	2b00      	cmp	r3, #0
   2010e:	d006      	beq.n	2011e <hif_receive+0x32>
   20110:	68bb      	ldr	r3, [r7, #8]
   20112:	2b00      	cmp	r3, #0
   20114:	d003      	beq.n	2011e <hif_receive+0x32>
   20116:	1dbb      	adds	r3, r7, #6
   20118:	881b      	ldrh	r3, [r3, #0]
   2011a:	2b00      	cmp	r3, #0
   2011c:	d11e      	bne.n	2015c <hif_receive+0x70>
	{
		if(isDone)
   2011e:	1d7b      	adds	r3, r7, #5
   20120:	781b      	ldrb	r3, [r3, #0]
   20122:	2b00      	cmp	r3, #0
   20124:	d006      	beq.n	20134 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   20126:	2317      	movs	r3, #23
   20128:	18fc      	adds	r4, r7, r3
   2012a:	4b45      	ldr	r3, [pc, #276]	; (20240 <hif_receive+0x154>)
   2012c:	4798      	blx	r3
   2012e:	0003      	movs	r3, r0
   20130:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   20132:	e07c      	b.n	2022e <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   20134:	2317      	movs	r3, #23
   20136:	18fb      	adds	r3, r7, r3
   20138:	22f4      	movs	r2, #244	; 0xf4
   2013a:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   2013c:	239e      	movs	r3, #158	; 0x9e
   2013e:	009a      	lsls	r2, r3, #2
   20140:	4940      	ldr	r1, [pc, #256]	; (20244 <hif_receive+0x158>)
   20142:	4b41      	ldr	r3, [pc, #260]	; (20248 <hif_receive+0x15c>)
   20144:	0018      	movs	r0, r3
   20146:	4b41      	ldr	r3, [pc, #260]	; (2024c <hif_receive+0x160>)
   20148:	4798      	blx	r3
   2014a:	4b41      	ldr	r3, [pc, #260]	; (20250 <hif_receive+0x164>)
   2014c:	0018      	movs	r0, r3
   2014e:	4b3f      	ldr	r3, [pc, #252]	; (2024c <hif_receive+0x160>)
   20150:	4798      	blx	r3
   20152:	4b40      	ldr	r3, [pc, #256]	; (20254 <hif_receive+0x168>)
   20154:	0018      	movs	r0, r3
   20156:	4b3d      	ldr	r3, [pc, #244]	; (2024c <hif_receive+0x160>)
   20158:	4798      	blx	r3
		goto ERR1;
   2015a:	e068      	b.n	2022e <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   2015c:	1dbb      	adds	r3, r7, #6
   2015e:	881a      	ldrh	r2, [r3, #0]
   20160:	4b3d      	ldr	r3, [pc, #244]	; (20258 <hif_receive+0x16c>)
   20162:	68db      	ldr	r3, [r3, #12]
   20164:	429a      	cmp	r2, r3
   20166:	d917      	bls.n	20198 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   20168:	2317      	movs	r3, #23
   2016a:	18fb      	adds	r3, r7, r3
   2016c:	22f4      	movs	r2, #244	; 0xf4
   2016e:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   20170:	23a0      	movs	r3, #160	; 0xa0
   20172:	009a      	lsls	r2, r3, #2
   20174:	4933      	ldr	r1, [pc, #204]	; (20244 <hif_receive+0x158>)
   20176:	4b34      	ldr	r3, [pc, #208]	; (20248 <hif_receive+0x15c>)
   20178:	0018      	movs	r0, r3
   2017a:	4b34      	ldr	r3, [pc, #208]	; (2024c <hif_receive+0x160>)
   2017c:	4798      	blx	r3
   2017e:	1dbb      	adds	r3, r7, #6
   20180:	8819      	ldrh	r1, [r3, #0]
   20182:	4b35      	ldr	r3, [pc, #212]	; (20258 <hif_receive+0x16c>)
   20184:	68da      	ldr	r2, [r3, #12]
   20186:	4b35      	ldr	r3, [pc, #212]	; (2025c <hif_receive+0x170>)
   20188:	0018      	movs	r0, r3
   2018a:	4b30      	ldr	r3, [pc, #192]	; (2024c <hif_receive+0x160>)
   2018c:	4798      	blx	r3
   2018e:	4b31      	ldr	r3, [pc, #196]	; (20254 <hif_receive+0x168>)
   20190:	0018      	movs	r0, r3
   20192:	4b2e      	ldr	r3, [pc, #184]	; (2024c <hif_receive+0x160>)
   20194:	4798      	blx	r3
		goto ERR1;
   20196:	e04a      	b.n	2022e <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   20198:	4b2f      	ldr	r3, [pc, #188]	; (20258 <hif_receive+0x16c>)
   2019a:	689a      	ldr	r2, [r3, #8]
   2019c:	68fb      	ldr	r3, [r7, #12]
   2019e:	429a      	cmp	r2, r3
   201a0:	d80a      	bhi.n	201b8 <hif_receive+0xcc>
   201a2:	1dbb      	adds	r3, r7, #6
   201a4:	881a      	ldrh	r2, [r3, #0]
   201a6:	68fb      	ldr	r3, [r7, #12]
   201a8:	18d2      	adds	r2, r2, r3
   201aa:	4b2b      	ldr	r3, [pc, #172]	; (20258 <hif_receive+0x16c>)
   201ac:	6899      	ldr	r1, [r3, #8]
   201ae:	4b2a      	ldr	r3, [pc, #168]	; (20258 <hif_receive+0x16c>)
   201b0:	68db      	ldr	r3, [r3, #12]
   201b2:	18cb      	adds	r3, r1, r3
   201b4:	429a      	cmp	r2, r3
   201b6:	d912      	bls.n	201de <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   201b8:	2317      	movs	r3, #23
   201ba:	18fb      	adds	r3, r7, r3
   201bc:	22f4      	movs	r2, #244	; 0xf4
   201be:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   201c0:	4a27      	ldr	r2, [pc, #156]	; (20260 <hif_receive+0x174>)
   201c2:	4920      	ldr	r1, [pc, #128]	; (20244 <hif_receive+0x158>)
   201c4:	4b20      	ldr	r3, [pc, #128]	; (20248 <hif_receive+0x15c>)
   201c6:	0018      	movs	r0, r3
   201c8:	4b20      	ldr	r3, [pc, #128]	; (2024c <hif_receive+0x160>)
   201ca:	4798      	blx	r3
   201cc:	4b25      	ldr	r3, [pc, #148]	; (20264 <hif_receive+0x178>)
   201ce:	0018      	movs	r0, r3
   201d0:	4b1e      	ldr	r3, [pc, #120]	; (2024c <hif_receive+0x160>)
   201d2:	4798      	blx	r3
   201d4:	4b1f      	ldr	r3, [pc, #124]	; (20254 <hif_receive+0x168>)
   201d6:	0018      	movs	r0, r3
   201d8:	4b1c      	ldr	r3, [pc, #112]	; (2024c <hif_receive+0x160>)
   201da:	4798      	blx	r3
		goto ERR1;
   201dc:	e027      	b.n	2022e <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   201de:	1dbb      	adds	r3, r7, #6
   201e0:	881a      	ldrh	r2, [r3, #0]
   201e2:	2317      	movs	r3, #23
   201e4:	18fc      	adds	r4, r7, r3
   201e6:	68b9      	ldr	r1, [r7, #8]
   201e8:	68fb      	ldr	r3, [r7, #12]
   201ea:	0018      	movs	r0, r3
   201ec:	4b1e      	ldr	r3, [pc, #120]	; (20268 <hif_receive+0x17c>)
   201ee:	4798      	blx	r3
   201f0:	0003      	movs	r3, r0
   201f2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   201f4:	2317      	movs	r3, #23
   201f6:	18fb      	adds	r3, r7, r3
   201f8:	781b      	ldrb	r3, [r3, #0]
   201fa:	b25b      	sxtb	r3, r3
   201fc:	2b00      	cmp	r3, #0
   201fe:	d115      	bne.n	2022c <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   20200:	4b15      	ldr	r3, [pc, #84]	; (20258 <hif_receive+0x16c>)
   20202:	689a      	ldr	r2, [r3, #8]
   20204:	4b14      	ldr	r3, [pc, #80]	; (20258 <hif_receive+0x16c>)
   20206:	68db      	ldr	r3, [r3, #12]
   20208:	18d2      	adds	r2, r2, r3
   2020a:	1dbb      	adds	r3, r7, #6
   2020c:	8819      	ldrh	r1, [r3, #0]
   2020e:	68fb      	ldr	r3, [r7, #12]
   20210:	18cb      	adds	r3, r1, r3
   20212:	429a      	cmp	r2, r3
   20214:	d003      	beq.n	2021e <hif_receive+0x132>
   20216:	1d7b      	adds	r3, r7, #5
   20218:	781b      	ldrb	r3, [r3, #0]
   2021a:	2b00      	cmp	r3, #0
   2021c:	d007      	beq.n	2022e <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2021e:	2317      	movs	r3, #23
   20220:	18fc      	adds	r4, r7, r3
   20222:	4b07      	ldr	r3, [pc, #28]	; (20240 <hif_receive+0x154>)
   20224:	4798      	blx	r3
   20226:	0003      	movs	r3, r0
   20228:	7023      	strb	r3, [r4, #0]
   2022a:	e000      	b.n	2022e <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   2022c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2022e:	2317      	movs	r3, #23
   20230:	18fb      	adds	r3, r7, r3
   20232:	781b      	ldrb	r3, [r3, #0]
   20234:	b25b      	sxtb	r3, r3
}
   20236:	0018      	movs	r0, r3
   20238:	46bd      	mov	sp, r7
   2023a:	b007      	add	sp, #28
   2023c:	bd90      	pop	{r4, r7, pc}
   2023e:	46c0      	nop			; (mov r8, r8)
   20240:	0001f609 	.word	0x0001f609
   20244:	00036b94 	.word	0x00036b94
   20248:	0003686c 	.word	0x0003686c
   2024c:	0001c7d9 	.word	0x0001c7d9
   20250:	00036a98 	.word	0x00036a98
   20254:	00036868 	.word	0x00036868
   20258:	20005894 	.word	0x20005894
   2025c:	00036ab8 	.word	0x00036ab8
   20260:	00000286 	.word	0x00000286
   20264:	00036b00 	.word	0x00036b00
   20268:	00021675 	.word	0x00021675

0002026c <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   2026c:	b580      	push	{r7, lr}
   2026e:	b084      	sub	sp, #16
   20270:	af00      	add	r7, sp, #0
   20272:	0002      	movs	r2, r0
   20274:	6039      	str	r1, [r7, #0]
   20276:	1dfb      	adds	r3, r7, #7
   20278:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2027a:	230f      	movs	r3, #15
   2027c:	18fb      	adds	r3, r7, r3
   2027e:	2200      	movs	r2, #0
   20280:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   20282:	1dfb      	adds	r3, r7, #7
   20284:	781b      	ldrb	r3, [r3, #0]
   20286:	2b07      	cmp	r3, #7
   20288:	d820      	bhi.n	202cc <hif_register_cb+0x60>
   2028a:	009a      	lsls	r2, r3, #2
   2028c:	4b1e      	ldr	r3, [pc, #120]	; (20308 <hif_register_cb+0x9c>)
   2028e:	18d3      	adds	r3, r2, r3
   20290:	681b      	ldr	r3, [r3, #0]
   20292:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   20294:	4b1d      	ldr	r3, [pc, #116]	; (2030c <hif_register_cb+0xa0>)
   20296:	683a      	ldr	r2, [r7, #0]
   20298:	615a      	str	r2, [r3, #20]
			break;
   2029a:	e02d      	b.n	202f8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   2029c:	4b1b      	ldr	r3, [pc, #108]	; (2030c <hif_register_cb+0xa0>)
   2029e:	683a      	ldr	r2, [r7, #0]
   202a0:	611a      	str	r2, [r3, #16]
			break;
   202a2:	e029      	b.n	202f8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   202a4:	4b19      	ldr	r3, [pc, #100]	; (2030c <hif_register_cb+0xa0>)
   202a6:	683a      	ldr	r2, [r7, #0]
   202a8:	619a      	str	r2, [r3, #24]
			break;
   202aa:	e025      	b.n	202f8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   202ac:	4b17      	ldr	r3, [pc, #92]	; (2030c <hif_register_cb+0xa0>)
   202ae:	683a      	ldr	r2, [r7, #0]
   202b0:	621a      	str	r2, [r3, #32]
			break;
   202b2:	e021      	b.n	202f8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   202b4:	4b15      	ldr	r3, [pc, #84]	; (2030c <hif_register_cb+0xa0>)
   202b6:	683a      	ldr	r2, [r7, #0]
   202b8:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   202ba:	e01d      	b.n	202f8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   202bc:	4b13      	ldr	r3, [pc, #76]	; (2030c <hif_register_cb+0xa0>)
   202be:	683a      	ldr	r2, [r7, #0]
   202c0:	61da      	str	r2, [r3, #28]
			break;
   202c2:	e019      	b.n	202f8 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   202c4:	4b11      	ldr	r3, [pc, #68]	; (2030c <hif_register_cb+0xa0>)
   202c6:	683a      	ldr	r2, [r7, #0]
   202c8:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   202ca:	e015      	b.n	202f8 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   202cc:	4a10      	ldr	r2, [pc, #64]	; (20310 <hif_register_cb+0xa4>)
   202ce:	4911      	ldr	r1, [pc, #68]	; (20314 <hif_register_cb+0xa8>)
   202d0:	4b11      	ldr	r3, [pc, #68]	; (20318 <hif_register_cb+0xac>)
   202d2:	0018      	movs	r0, r3
   202d4:	4b11      	ldr	r3, [pc, #68]	; (2031c <hif_register_cb+0xb0>)
   202d6:	4798      	blx	r3
   202d8:	1dfb      	adds	r3, r7, #7
   202da:	781a      	ldrb	r2, [r3, #0]
   202dc:	4b10      	ldr	r3, [pc, #64]	; (20320 <hif_register_cb+0xb4>)
   202de:	0011      	movs	r1, r2
   202e0:	0018      	movs	r0, r3
   202e2:	4b0e      	ldr	r3, [pc, #56]	; (2031c <hif_register_cb+0xb0>)
   202e4:	4798      	blx	r3
   202e6:	4b0f      	ldr	r3, [pc, #60]	; (20324 <hif_register_cb+0xb8>)
   202e8:	0018      	movs	r0, r3
   202ea:	4b0c      	ldr	r3, [pc, #48]	; (2031c <hif_register_cb+0xb0>)
   202ec:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   202ee:	230f      	movs	r3, #15
   202f0:	18fb      	adds	r3, r7, r3
   202f2:	22f4      	movs	r2, #244	; 0xf4
   202f4:	701a      	strb	r2, [r3, #0]
			break;
   202f6:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   202f8:	230f      	movs	r3, #15
   202fa:	18fb      	adds	r3, r7, r3
   202fc:	781b      	ldrb	r3, [r3, #0]
   202fe:	b25b      	sxtb	r3, r3
}
   20300:	0018      	movs	r0, r3
   20302:	46bd      	mov	sp, r7
   20304:	b004      	add	sp, #16
   20306:	bd80      	pop	{r7, pc}
   20308:	00036b50 	.word	0x00036b50
   2030c:	20005894 	.word	0x20005894
   20310:	000002be 	.word	0x000002be
   20314:	00036ba0 	.word	0x00036ba0
   20318:	0003686c 	.word	0x0003686c
   2031c:	0001c7d9 	.word	0x0001c7d9
   20320:	00036b44 	.word	0x00036b44
   20324:	00036868 	.word	0x00036868

00020328 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   20328:	b590      	push	{r4, r7, lr}
   2032a:	b0af      	sub	sp, #188	; 0xbc
   2032c:	af02      	add	r7, sp, #8
   2032e:	603a      	str	r2, [r7, #0]
   20330:	1dfb      	adds	r3, r7, #7
   20332:	1c02      	adds	r2, r0, #0
   20334:	701a      	strb	r2, [r3, #0]
   20336:	1d3b      	adds	r3, r7, #4
   20338:	1c0a      	adds	r2, r1, #0
   2033a:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   2033c:	1dfb      	adds	r3, r7, #7
   2033e:	781b      	ldrb	r3, [r3, #0]
   20340:	2b2c      	cmp	r3, #44	; 0x2c
   20342:	d116      	bne.n	20372 <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   20344:	23a4      	movs	r3, #164	; 0xa4
   20346:	18f9      	adds	r1, r7, r3
   20348:	6838      	ldr	r0, [r7, #0]
   2034a:	2300      	movs	r3, #0
   2034c:	2204      	movs	r2, #4
   2034e:	4cca      	ldr	r4, [pc, #808]	; (20678 <m2m_wifi_cb+0x350>)
   20350:	47a0      	blx	r4
   20352:	1e03      	subs	r3, r0, #0
   20354:	d000      	beq.n	20358 <m2m_wifi_cb+0x30>
   20356:	e1b4      	b.n	206c2 <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   20358:	4bc8      	ldr	r3, [pc, #800]	; (2067c <m2m_wifi_cb+0x354>)
   2035a:	681b      	ldr	r3, [r3, #0]
   2035c:	2b00      	cmp	r3, #0
   2035e:	d100      	bne.n	20362 <m2m_wifi_cb+0x3a>
   20360:	e1af      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   20362:	4bc6      	ldr	r3, [pc, #792]	; (2067c <m2m_wifi_cb+0x354>)
   20364:	681b      	ldr	r3, [r3, #0]
   20366:	22a4      	movs	r2, #164	; 0xa4
   20368:	18ba      	adds	r2, r7, r2
   2036a:	0011      	movs	r1, r2
   2036c:	202c      	movs	r0, #44	; 0x2c
   2036e:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   20370:	e1a7      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   20372:	1dfb      	adds	r3, r7, #7
   20374:	781b      	ldrb	r3, [r3, #0]
   20376:	2b1b      	cmp	r3, #27
   20378:	d116      	bne.n	203a8 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   2037a:	239c      	movs	r3, #156	; 0x9c
   2037c:	18f9      	adds	r1, r7, r3
   2037e:	6838      	ldr	r0, [r7, #0]
   20380:	2300      	movs	r3, #0
   20382:	2208      	movs	r2, #8
   20384:	4cbc      	ldr	r4, [pc, #752]	; (20678 <m2m_wifi_cb+0x350>)
   20386:	47a0      	blx	r4
   20388:	1e03      	subs	r3, r0, #0
   2038a:	d000      	beq.n	2038e <m2m_wifi_cb+0x66>
   2038c:	e199      	b.n	206c2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2038e:	4bbb      	ldr	r3, [pc, #748]	; (2067c <m2m_wifi_cb+0x354>)
   20390:	681b      	ldr	r3, [r3, #0]
   20392:	2b00      	cmp	r3, #0
   20394:	d100      	bne.n	20398 <m2m_wifi_cb+0x70>
   20396:	e194      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   20398:	4bb8      	ldr	r3, [pc, #736]	; (2067c <m2m_wifi_cb+0x354>)
   2039a:	681b      	ldr	r3, [r3, #0]
   2039c:	229c      	movs	r2, #156	; 0x9c
   2039e:	18ba      	adds	r2, r7, r2
   203a0:	0011      	movs	r1, r2
   203a2:	201b      	movs	r0, #27
   203a4:	4798      	blx	r3
}
   203a6:	e18c      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   203a8:	1dfb      	adds	r3, r7, #7
   203aa:	781b      	ldrb	r3, [r3, #0]
   203ac:	2b06      	cmp	r3, #6
   203ae:	d116      	bne.n	203de <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   203b0:	230c      	movs	r3, #12
   203b2:	18f9      	adds	r1, r7, r3
   203b4:	6838      	ldr	r0, [r7, #0]
   203b6:	2301      	movs	r3, #1
   203b8:	2230      	movs	r2, #48	; 0x30
   203ba:	4caf      	ldr	r4, [pc, #700]	; (20678 <m2m_wifi_cb+0x350>)
   203bc:	47a0      	blx	r4
   203be:	1e03      	subs	r3, r0, #0
   203c0:	d000      	beq.n	203c4 <m2m_wifi_cb+0x9c>
   203c2:	e17e      	b.n	206c2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   203c4:	4bad      	ldr	r3, [pc, #692]	; (2067c <m2m_wifi_cb+0x354>)
   203c6:	681b      	ldr	r3, [r3, #0]
   203c8:	2b00      	cmp	r3, #0
   203ca:	d100      	bne.n	203ce <m2m_wifi_cb+0xa6>
   203cc:	e179      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   203ce:	4bab      	ldr	r3, [pc, #684]	; (2067c <m2m_wifi_cb+0x354>)
   203d0:	681b      	ldr	r3, [r3, #0]
   203d2:	220c      	movs	r2, #12
   203d4:	18ba      	adds	r2, r7, r2
   203d6:	0011      	movs	r1, r2
   203d8:	2006      	movs	r0, #6
   203da:	4798      	blx	r3
}
   203dc:	e171      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   203de:	1dfb      	adds	r3, r7, #7
   203e0:	781b      	ldrb	r3, [r3, #0]
   203e2:	2b0e      	cmp	r3, #14
   203e4:	d100      	bne.n	203e8 <m2m_wifi_cb+0xc0>
   203e6:	e16c      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   203e8:	1dfb      	adds	r3, r7, #7
   203ea:	781b      	ldrb	r3, [r3, #0]
   203ec:	2b32      	cmp	r3, #50	; 0x32
   203ee:	d116      	bne.n	2041e <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   203f0:	2384      	movs	r3, #132	; 0x84
   203f2:	18f9      	adds	r1, r7, r3
   203f4:	6838      	ldr	r0, [r7, #0]
   203f6:	2300      	movs	r3, #0
   203f8:	2218      	movs	r2, #24
   203fa:	4c9f      	ldr	r4, [pc, #636]	; (20678 <m2m_wifi_cb+0x350>)
   203fc:	47a0      	blx	r4
   203fe:	1e03      	subs	r3, r0, #0
   20400:	d000      	beq.n	20404 <m2m_wifi_cb+0xdc>
   20402:	e15e      	b.n	206c2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20404:	4b9d      	ldr	r3, [pc, #628]	; (2067c <m2m_wifi_cb+0x354>)
   20406:	681b      	ldr	r3, [r3, #0]
   20408:	2b00      	cmp	r3, #0
   2040a:	d100      	bne.n	2040e <m2m_wifi_cb+0xe6>
   2040c:	e159      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2040e:	4b9b      	ldr	r3, [pc, #620]	; (2067c <m2m_wifi_cb+0x354>)
   20410:	681b      	ldr	r3, [r3, #0]
   20412:	2284      	movs	r2, #132	; 0x84
   20414:	18ba      	adds	r2, r7, r2
   20416:	0011      	movs	r1, r2
   20418:	2032      	movs	r0, #50	; 0x32
   2041a:	4798      	blx	r3
}
   2041c:	e151      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2041e:	1dfb      	adds	r3, r7, #7
   20420:	781b      	ldrb	r3, [r3, #0]
   20422:	2b2f      	cmp	r3, #47	; 0x2f
   20424:	d11d      	bne.n	20462 <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   20426:	230c      	movs	r3, #12
   20428:	18fb      	adds	r3, r7, r3
   2042a:	2264      	movs	r2, #100	; 0x64
   2042c:	2100      	movs	r1, #0
   2042e:	0018      	movs	r0, r3
   20430:	4b93      	ldr	r3, [pc, #588]	; (20680 <m2m_wifi_cb+0x358>)
   20432:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   20434:	230c      	movs	r3, #12
   20436:	18f9      	adds	r1, r7, r3
   20438:	6838      	ldr	r0, [r7, #0]
   2043a:	2300      	movs	r3, #0
   2043c:	2264      	movs	r2, #100	; 0x64
   2043e:	4c8e      	ldr	r4, [pc, #568]	; (20678 <m2m_wifi_cb+0x350>)
   20440:	47a0      	blx	r4
   20442:	1e03      	subs	r3, r0, #0
   20444:	d000      	beq.n	20448 <m2m_wifi_cb+0x120>
   20446:	e13c      	b.n	206c2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20448:	4b8c      	ldr	r3, [pc, #560]	; (2067c <m2m_wifi_cb+0x354>)
   2044a:	681b      	ldr	r3, [r3, #0]
   2044c:	2b00      	cmp	r3, #0
   2044e:	d100      	bne.n	20452 <m2m_wifi_cb+0x12a>
   20450:	e137      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   20452:	4b8a      	ldr	r3, [pc, #552]	; (2067c <m2m_wifi_cb+0x354>)
   20454:	681b      	ldr	r3, [r3, #0]
   20456:	220c      	movs	r2, #12
   20458:	18ba      	adds	r2, r7, r2
   2045a:	0011      	movs	r1, r2
   2045c:	202f      	movs	r0, #47	; 0x2f
   2045e:	4798      	blx	r3
}
   20460:	e12f      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   20462:	1dfb      	adds	r3, r7, #7
   20464:	781b      	ldrb	r3, [r3, #0]
   20466:	2b34      	cmp	r3, #52	; 0x34
   20468:	d137      	bne.n	204da <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   2046a:	2380      	movs	r3, #128	; 0x80
   2046c:	18f9      	adds	r1, r7, r3
   2046e:	6838      	ldr	r0, [r7, #0]
   20470:	2300      	movs	r3, #0
   20472:	2204      	movs	r2, #4
   20474:	4c80      	ldr	r4, [pc, #512]	; (20678 <m2m_wifi_cb+0x350>)
   20476:	47a0      	blx	r4
   20478:	1e03      	subs	r3, r0, #0
   2047a:	d000      	beq.n	2047e <m2m_wifi_cb+0x156>
   2047c:	e121      	b.n	206c2 <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2047e:	4b81      	ldr	r3, [pc, #516]	; (20684 <m2m_wifi_cb+0x35c>)
   20480:	0018      	movs	r0, r3
   20482:	4b81      	ldr	r3, [pc, #516]	; (20688 <m2m_wifi_cb+0x360>)
   20484:	4798      	blx	r3
   20486:	2380      	movs	r3, #128	; 0x80
   20488:	18fb      	adds	r3, r7, r3
   2048a:	681b      	ldr	r3, [r3, #0]
   2048c:	0e1b      	lsrs	r3, r3, #24
   2048e:	b2db      	uxtb	r3, r3
   20490:	0019      	movs	r1, r3
   20492:	2380      	movs	r3, #128	; 0x80
   20494:	18fb      	adds	r3, r7, r3
   20496:	681b      	ldr	r3, [r3, #0]
   20498:	0c1b      	lsrs	r3, r3, #16
   2049a:	b2db      	uxtb	r3, r3
   2049c:	001a      	movs	r2, r3
   2049e:	2380      	movs	r3, #128	; 0x80
   204a0:	18fb      	adds	r3, r7, r3
   204a2:	681b      	ldr	r3, [r3, #0]
   204a4:	0a1b      	lsrs	r3, r3, #8
   204a6:	b2db      	uxtb	r3, r3
   204a8:	001c      	movs	r4, r3
   204aa:	2380      	movs	r3, #128	; 0x80
   204ac:	18fb      	adds	r3, r7, r3
   204ae:	681b      	ldr	r3, [r3, #0]
   204b0:	b2db      	uxtb	r3, r3
   204b2:	4876      	ldr	r0, [pc, #472]	; (2068c <m2m_wifi_cb+0x364>)
   204b4:	9300      	str	r3, [sp, #0]
   204b6:	0023      	movs	r3, r4
   204b8:	4c73      	ldr	r4, [pc, #460]	; (20688 <m2m_wifi_cb+0x360>)
   204ba:	47a0      	blx	r4
   204bc:	4b74      	ldr	r3, [pc, #464]	; (20690 <m2m_wifi_cb+0x368>)
   204be:	0018      	movs	r0, r3
   204c0:	4b71      	ldr	r3, [pc, #452]	; (20688 <m2m_wifi_cb+0x360>)
   204c2:	4798      	blx	r3
			if (gpfAppWifiCb)
   204c4:	4b6d      	ldr	r3, [pc, #436]	; (2067c <m2m_wifi_cb+0x354>)
   204c6:	681b      	ldr	r3, [r3, #0]
   204c8:	2b00      	cmp	r3, #0
   204ca:	d100      	bne.n	204ce <m2m_wifi_cb+0x1a6>
   204cc:	e0f9      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   204ce:	4b6b      	ldr	r3, [pc, #428]	; (2067c <m2m_wifi_cb+0x354>)
   204d0:	681b      	ldr	r3, [r3, #0]
   204d2:	2100      	movs	r1, #0
   204d4:	2034      	movs	r0, #52	; 0x34
   204d6:	4798      	blx	r3
}
   204d8:	e0f3      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   204da:	1dfb      	adds	r3, r7, #7
   204dc:	781b      	ldrb	r3, [r3, #0]
   204de:	2b11      	cmp	r3, #17
   204e0:	d11e      	bne.n	20520 <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   204e2:	4b6c      	ldr	r3, [pc, #432]	; (20694 <m2m_wifi_cb+0x36c>)
   204e4:	2200      	movs	r2, #0
   204e6:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   204e8:	237c      	movs	r3, #124	; 0x7c
   204ea:	18f9      	adds	r1, r7, r3
   204ec:	6838      	ldr	r0, [r7, #0]
   204ee:	2300      	movs	r3, #0
   204f0:	2204      	movs	r2, #4
   204f2:	4c61      	ldr	r4, [pc, #388]	; (20678 <m2m_wifi_cb+0x350>)
   204f4:	47a0      	blx	r4
   204f6:	1e03      	subs	r3, r0, #0
   204f8:	d000      	beq.n	204fc <m2m_wifi_cb+0x1d4>
   204fa:	e0e2      	b.n	206c2 <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   204fc:	237c      	movs	r3, #124	; 0x7c
   204fe:	18fb      	adds	r3, r7, r3
   20500:	781a      	ldrb	r2, [r3, #0]
   20502:	4b65      	ldr	r3, [pc, #404]	; (20698 <m2m_wifi_cb+0x370>)
   20504:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   20506:	4b5d      	ldr	r3, [pc, #372]	; (2067c <m2m_wifi_cb+0x354>)
   20508:	681b      	ldr	r3, [r3, #0]
   2050a:	2b00      	cmp	r3, #0
   2050c:	d100      	bne.n	20510 <m2m_wifi_cb+0x1e8>
   2050e:	e0d8      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   20510:	4b5a      	ldr	r3, [pc, #360]	; (2067c <m2m_wifi_cb+0x354>)
   20512:	681b      	ldr	r3, [r3, #0]
   20514:	227c      	movs	r2, #124	; 0x7c
   20516:	18ba      	adds	r2, r7, r2
   20518:	0011      	movs	r1, r2
   2051a:	2011      	movs	r0, #17
   2051c:	4798      	blx	r3
}
   2051e:	e0d0      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   20520:	1dfb      	adds	r3, r7, #7
   20522:	781b      	ldrb	r3, [r3, #0]
   20524:	2b13      	cmp	r3, #19
   20526:	d116      	bne.n	20556 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   20528:	230c      	movs	r3, #12
   2052a:	18f9      	adds	r1, r7, r3
   2052c:	6838      	ldr	r0, [r7, #0]
   2052e:	2300      	movs	r3, #0
   20530:	222c      	movs	r2, #44	; 0x2c
   20532:	4c51      	ldr	r4, [pc, #324]	; (20678 <m2m_wifi_cb+0x350>)
   20534:	47a0      	blx	r4
   20536:	1e03      	subs	r3, r0, #0
   20538:	d000      	beq.n	2053c <m2m_wifi_cb+0x214>
   2053a:	e0c2      	b.n	206c2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2053c:	4b4f      	ldr	r3, [pc, #316]	; (2067c <m2m_wifi_cb+0x354>)
   2053e:	681b      	ldr	r3, [r3, #0]
   20540:	2b00      	cmp	r3, #0
   20542:	d100      	bne.n	20546 <m2m_wifi_cb+0x21e>
   20544:	e0bd      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   20546:	4b4d      	ldr	r3, [pc, #308]	; (2067c <m2m_wifi_cb+0x354>)
   20548:	681b      	ldr	r3, [r3, #0]
   2054a:	220c      	movs	r2, #12
   2054c:	18ba      	adds	r2, r7, r2
   2054e:	0011      	movs	r1, r2
   20550:	2013      	movs	r0, #19
   20552:	4798      	blx	r3
}
   20554:	e0b5      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   20556:	1dfb      	adds	r3, r7, #7
   20558:	781b      	ldrb	r3, [r3, #0]
   2055a:	2b04      	cmp	r3, #4
   2055c:	d116      	bne.n	2058c <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   2055e:	23a8      	movs	r3, #168	; 0xa8
   20560:	18f9      	adds	r1, r7, r3
   20562:	6838      	ldr	r0, [r7, #0]
   20564:	2300      	movs	r3, #0
   20566:	2204      	movs	r2, #4
   20568:	4c43      	ldr	r4, [pc, #268]	; (20678 <m2m_wifi_cb+0x350>)
   2056a:	47a0      	blx	r4
   2056c:	1e03      	subs	r3, r0, #0
   2056e:	d000      	beq.n	20572 <m2m_wifi_cb+0x24a>
   20570:	e0a7      	b.n	206c2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   20572:	4b42      	ldr	r3, [pc, #264]	; (2067c <m2m_wifi_cb+0x354>)
   20574:	681b      	ldr	r3, [r3, #0]
   20576:	2b00      	cmp	r3, #0
   20578:	d100      	bne.n	2057c <m2m_wifi_cb+0x254>
   2057a:	e0a2      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   2057c:	4b3f      	ldr	r3, [pc, #252]	; (2067c <m2m_wifi_cb+0x354>)
   2057e:	681b      	ldr	r3, [r3, #0]
   20580:	22a8      	movs	r2, #168	; 0xa8
   20582:	18ba      	adds	r2, r7, r2
   20584:	0011      	movs	r1, r2
   20586:	2004      	movs	r0, #4
   20588:	4798      	blx	r3
}
   2058a:	e09a      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   2058c:	1dfb      	adds	r3, r7, #7
   2058e:	781b      	ldrb	r3, [r3, #0]
   20590:	2b65      	cmp	r3, #101	; 0x65
   20592:	d116      	bne.n	205c2 <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   20594:	23a8      	movs	r3, #168	; 0xa8
   20596:	18f9      	adds	r1, r7, r3
   20598:	6838      	ldr	r0, [r7, #0]
   2059a:	2300      	movs	r3, #0
   2059c:	2204      	movs	r2, #4
   2059e:	4c36      	ldr	r4, [pc, #216]	; (20678 <m2m_wifi_cb+0x350>)
   205a0:	47a0      	blx	r4
   205a2:	1e03      	subs	r3, r0, #0
   205a4:	d000      	beq.n	205a8 <m2m_wifi_cb+0x280>
   205a6:	e08c      	b.n	206c2 <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   205a8:	4b34      	ldr	r3, [pc, #208]	; (2067c <m2m_wifi_cb+0x354>)
   205aa:	681b      	ldr	r3, [r3, #0]
   205ac:	2b00      	cmp	r3, #0
   205ae:	d100      	bne.n	205b2 <m2m_wifi_cb+0x28a>
   205b0:	e087      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   205b2:	4b32      	ldr	r3, [pc, #200]	; (2067c <m2m_wifi_cb+0x354>)
   205b4:	681b      	ldr	r3, [r3, #0]
   205b6:	22a8      	movs	r2, #168	; 0xa8
   205b8:	18ba      	adds	r2, r7, r2
   205ba:	0011      	movs	r1, r2
   205bc:	2065      	movs	r0, #101	; 0x65
   205be:	4798      	blx	r3
}
   205c0:	e07f      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   205c2:	1dfb      	adds	r3, r7, #7
   205c4:	781b      	ldrb	r3, [r3, #0]
   205c6:	2b09      	cmp	r3, #9
   205c8:	d116      	bne.n	205f8 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   205ca:	230c      	movs	r3, #12
   205cc:	18f9      	adds	r1, r7, r3
   205ce:	6838      	ldr	r0, [r7, #0]
   205d0:	2301      	movs	r3, #1
   205d2:	2264      	movs	r2, #100	; 0x64
   205d4:	4c28      	ldr	r4, [pc, #160]	; (20678 <m2m_wifi_cb+0x350>)
   205d6:	47a0      	blx	r4
   205d8:	1e03      	subs	r3, r0, #0
   205da:	d000      	beq.n	205de <m2m_wifi_cb+0x2b6>
   205dc:	e071      	b.n	206c2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   205de:	4b27      	ldr	r3, [pc, #156]	; (2067c <m2m_wifi_cb+0x354>)
   205e0:	681b      	ldr	r3, [r3, #0]
   205e2:	2b00      	cmp	r3, #0
   205e4:	d100      	bne.n	205e8 <m2m_wifi_cb+0x2c0>
   205e6:	e06c      	b.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   205e8:	4b24      	ldr	r3, [pc, #144]	; (2067c <m2m_wifi_cb+0x354>)
   205ea:	681b      	ldr	r3, [r3, #0]
   205ec:	220c      	movs	r2, #12
   205ee:	18ba      	adds	r2, r7, r2
   205f0:	0011      	movs	r1, r2
   205f2:	2009      	movs	r0, #9
   205f4:	4798      	blx	r3
}
   205f6:	e064      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   205f8:	1dfb      	adds	r3, r7, #7
   205fa:	781b      	ldrb	r3, [r3, #0]
   205fc:	2b2a      	cmp	r3, #42	; 0x2a
   205fe:	d114      	bne.n	2062a <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   20600:	2378      	movs	r3, #120	; 0x78
   20602:	18f9      	adds	r1, r7, r3
   20604:	6838      	ldr	r0, [r7, #0]
   20606:	2301      	movs	r3, #1
   20608:	2204      	movs	r2, #4
   2060a:	4c1b      	ldr	r4, [pc, #108]	; (20678 <m2m_wifi_cb+0x350>)
   2060c:	47a0      	blx	r4
   2060e:	1e03      	subs	r3, r0, #0
   20610:	d157      	bne.n	206c2 <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   20612:	4b1a      	ldr	r3, [pc, #104]	; (2067c <m2m_wifi_cb+0x354>)
   20614:	681b      	ldr	r3, [r3, #0]
   20616:	2b00      	cmp	r3, #0
   20618:	d053      	beq.n	206c2 <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   2061a:	4b18      	ldr	r3, [pc, #96]	; (2067c <m2m_wifi_cb+0x354>)
   2061c:	681b      	ldr	r3, [r3, #0]
   2061e:	2278      	movs	r2, #120	; 0x78
   20620:	18ba      	adds	r2, r7, r2
   20622:	0011      	movs	r1, r2
   20624:	202a      	movs	r0, #42	; 0x2a
   20626:	4798      	blx	r3
}
   20628:	e04b      	b.n	206c2 <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   2062a:	1dfb      	adds	r3, r7, #7
   2062c:	781b      	ldrb	r3, [r3, #0]
   2062e:	2b20      	cmp	r3, #32
   20630:	d134      	bne.n	2069c <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   20632:	2370      	movs	r3, #112	; 0x70
   20634:	18f9      	adds	r1, r7, r3
   20636:	6838      	ldr	r0, [r7, #0]
   20638:	2300      	movs	r3, #0
   2063a:	2208      	movs	r2, #8
   2063c:	4c0e      	ldr	r4, [pc, #56]	; (20678 <m2m_wifi_cb+0x350>)
   2063e:	47a0      	blx	r4
   20640:	1e03      	subs	r3, r0, #0
   20642:	d13e      	bne.n	206c2 <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   20644:	683b      	ldr	r3, [r7, #0]
   20646:	3308      	adds	r3, #8
   20648:	0018      	movs	r0, r3
   2064a:	2370      	movs	r3, #112	; 0x70
   2064c:	18fb      	adds	r3, r7, r3
   2064e:	6819      	ldr	r1, [r3, #0]
   20650:	2370      	movs	r3, #112	; 0x70
   20652:	18fb      	adds	r3, r7, r3
   20654:	889a      	ldrh	r2, [r3, #4]
   20656:	2301      	movs	r3, #1
   20658:	4c07      	ldr	r4, [pc, #28]	; (20678 <m2m_wifi_cb+0x350>)
   2065a:	47a0      	blx	r4
   2065c:	1e03      	subs	r3, r0, #0
   2065e:	d130      	bne.n	206c2 <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   20660:	4b06      	ldr	r3, [pc, #24]	; (2067c <m2m_wifi_cb+0x354>)
   20662:	681b      	ldr	r3, [r3, #0]
   20664:	2b00      	cmp	r3, #0
   20666:	d02c      	beq.n	206c2 <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   20668:	4b04      	ldr	r3, [pc, #16]	; (2067c <m2m_wifi_cb+0x354>)
   2066a:	681b      	ldr	r3, [r3, #0]
   2066c:	2270      	movs	r2, #112	; 0x70
   2066e:	18ba      	adds	r2, r7, r2
   20670:	0011      	movs	r1, r2
   20672:	2020      	movs	r0, #32
   20674:	4798      	blx	r3
}
   20676:	e024      	b.n	206c2 <m2m_wifi_cb+0x39a>
   20678:	000200ed 	.word	0x000200ed
   2067c:	20004120 	.word	0x20004120
   20680:	0001f571 	.word	0x0001f571
   20684:	00036bb0 	.word	0x00036bb0
   20688:	0001c7d9 	.word	0x0001c7d9
   2068c:	00036bbc 	.word	0x00036bbc
   20690:	00036bdc 	.word	0x00036bdc
   20694:	2000411d 	.word	0x2000411d
   20698:	2000411c 	.word	0x2000411c
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   2069c:	2324      	movs	r3, #36	; 0x24
   2069e:	33ff      	adds	r3, #255	; 0xff
   206a0:	001a      	movs	r2, r3
   206a2:	490a      	ldr	r1, [pc, #40]	; (206cc <m2m_wifi_cb+0x3a4>)
   206a4:	4b0a      	ldr	r3, [pc, #40]	; (206d0 <m2m_wifi_cb+0x3a8>)
   206a6:	0018      	movs	r0, r3
   206a8:	4b0a      	ldr	r3, [pc, #40]	; (206d4 <m2m_wifi_cb+0x3ac>)
   206aa:	4798      	blx	r3
   206ac:	1dfb      	adds	r3, r7, #7
   206ae:	781a      	ldrb	r2, [r3, #0]
   206b0:	4b09      	ldr	r3, [pc, #36]	; (206d8 <m2m_wifi_cb+0x3b0>)
   206b2:	0011      	movs	r1, r2
   206b4:	0018      	movs	r0, r3
   206b6:	4b07      	ldr	r3, [pc, #28]	; (206d4 <m2m_wifi_cb+0x3ac>)
   206b8:	4798      	blx	r3
   206ba:	4b08      	ldr	r3, [pc, #32]	; (206dc <m2m_wifi_cb+0x3b4>)
   206bc:	0018      	movs	r0, r3
   206be:	4b05      	ldr	r3, [pc, #20]	; (206d4 <m2m_wifi_cb+0x3ac>)
   206c0:	4798      	blx	r3
}
   206c2:	46c0      	nop			; (mov r8, r8)
   206c4:	46bd      	mov	sp, r7
   206c6:	b02d      	add	sp, #180	; 0xb4
   206c8:	bd90      	pop	{r4, r7, pc}
   206ca:	46c0      	nop			; (mov r8, r8)
   206cc:	00036f7c 	.word	0x00036f7c
   206d0:	00036be0 	.word	0x00036be0
   206d4:	0001c7d9 	.word	0x0001c7d9
   206d8:	00036bf4 	.word	0x00036bf4
   206dc:	00036bdc 	.word	0x00036bdc

000206e0 <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   206e0:	b590      	push	{r4, r7, lr}
   206e2:	b091      	sub	sp, #68	; 0x44
   206e4:	af02      	add	r7, sp, #8
   206e6:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   206e8:	2337      	movs	r3, #55	; 0x37
   206ea:	18fb      	adds	r3, r7, r3
   206ec:	2200      	movs	r2, #0
   206ee:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   206f0:	230b      	movs	r3, #11
   206f2:	18fb      	adds	r3, r7, r3
   206f4:	2201      	movs	r2, #1
   206f6:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   206f8:	687b      	ldr	r3, [r7, #4]
   206fa:	2b00      	cmp	r3, #0
   206fc:	d104      	bne.n	20708 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   206fe:	2337      	movs	r3, #55	; 0x37
   20700:	18fb      	adds	r3, r7, r3
   20702:	22f4      	movs	r2, #244	; 0xf4
   20704:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   20706:	e0b3      	b.n	20870 <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   20708:	687b      	ldr	r3, [r7, #4]
   2070a:	681a      	ldr	r2, [r3, #0]
   2070c:	4b5c      	ldr	r3, [pc, #368]	; (20880 <m2m_wifi_init+0x1a0>)
   2070e:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   20710:	4b5c      	ldr	r3, [pc, #368]	; (20884 <m2m_wifi_init+0x1a4>)
   20712:	2200      	movs	r2, #0
   20714:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   20716:	2337      	movs	r3, #55	; 0x37
   20718:	18fc      	adds	r4, r7, r3
   2071a:	230b      	movs	r3, #11
   2071c:	18fb      	adds	r3, r7, r3
   2071e:	0018      	movs	r0, r3
   20720:	4b59      	ldr	r3, [pc, #356]	; (20888 <m2m_wifi_init+0x1a8>)
   20722:	4798      	blx	r3
   20724:	0003      	movs	r3, r0
   20726:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   20728:	2337      	movs	r3, #55	; 0x37
   2072a:	18fb      	adds	r3, r7, r3
   2072c:	781b      	ldrb	r3, [r3, #0]
   2072e:	b25b      	sxtb	r3, r3
   20730:	2b00      	cmp	r3, #0
   20732:	d000      	beq.n	20736 <m2m_wifi_init+0x56>
   20734:	e099      	b.n	2086a <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   20736:	2337      	movs	r3, #55	; 0x37
   20738:	18fc      	adds	r4, r7, r3
   2073a:	2000      	movs	r0, #0
   2073c:	4b53      	ldr	r3, [pc, #332]	; (2088c <m2m_wifi_init+0x1ac>)
   2073e:	4798      	blx	r3
   20740:	0003      	movs	r3, r0
   20742:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   20744:	2337      	movs	r3, #55	; 0x37
   20746:	18fb      	adds	r3, r7, r3
   20748:	781b      	ldrb	r3, [r3, #0]
   2074a:	b25b      	sxtb	r3, r3
   2074c:	2b00      	cmp	r3, #0
   2074e:	d000      	beq.n	20752 <m2m_wifi_init+0x72>
   20750:	e086      	b.n	20860 <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   20752:	4b4f      	ldr	r3, [pc, #316]	; (20890 <m2m_wifi_init+0x1b0>)
   20754:	0019      	movs	r1, r3
   20756:	2001      	movs	r0, #1
   20758:	4b4e      	ldr	r3, [pc, #312]	; (20894 <m2m_wifi_init+0x1b4>)
   2075a:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   2075c:	2337      	movs	r3, #55	; 0x37
   2075e:	18fc      	adds	r4, r7, r3
   20760:	230c      	movs	r3, #12
   20762:	18fb      	adds	r3, r7, r3
   20764:	0018      	movs	r0, r3
   20766:	4b4c      	ldr	r3, [pc, #304]	; (20898 <m2m_wifi_init+0x1b8>)
   20768:	4798      	blx	r3
   2076a:	0003      	movs	r3, r0
   2076c:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   2076e:	4b4b      	ldr	r3, [pc, #300]	; (2089c <m2m_wifi_init+0x1bc>)
   20770:	0018      	movs	r0, r3
   20772:	4b4b      	ldr	r3, [pc, #300]	; (208a0 <m2m_wifi_init+0x1c0>)
   20774:	4798      	blx	r3
   20776:	230c      	movs	r3, #12
   20778:	18fb      	adds	r3, r7, r3
   2077a:	791b      	ldrb	r3, [r3, #4]
   2077c:	0019      	movs	r1, r3
   2077e:	230c      	movs	r3, #12
   20780:	18fb      	adds	r3, r7, r3
   20782:	795b      	ldrb	r3, [r3, #5]
   20784:	001a      	movs	r2, r3
   20786:	230c      	movs	r3, #12
   20788:	18fb      	adds	r3, r7, r3
   2078a:	799b      	ldrb	r3, [r3, #6]
   2078c:	001c      	movs	r4, r3
   2078e:	230c      	movs	r3, #12
   20790:	18fb      	adds	r3, r7, r3
   20792:	8c1b      	ldrh	r3, [r3, #32]
   20794:	4843      	ldr	r0, [pc, #268]	; (208a4 <m2m_wifi_init+0x1c4>)
   20796:	9300      	str	r3, [sp, #0]
   20798:	0023      	movs	r3, r4
   2079a:	4c41      	ldr	r4, [pc, #260]	; (208a0 <m2m_wifi_init+0x1c0>)
   2079c:	47a0      	blx	r4
   2079e:	4b42      	ldr	r3, [pc, #264]	; (208a8 <m2m_wifi_init+0x1c8>)
   207a0:	0018      	movs	r0, r3
   207a2:	4b3f      	ldr	r3, [pc, #252]	; (208a0 <m2m_wifi_init+0x1c0>)
   207a4:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   207a6:	4b3d      	ldr	r3, [pc, #244]	; (2089c <m2m_wifi_init+0x1bc>)
   207a8:	0018      	movs	r0, r3
   207aa:	4b3d      	ldr	r3, [pc, #244]	; (208a0 <m2m_wifi_init+0x1c0>)
   207ac:	4798      	blx	r3
   207ae:	230c      	movs	r3, #12
   207b0:	18fb      	adds	r3, r7, r3
   207b2:	3316      	adds	r3, #22
   207b4:	001a      	movs	r2, r3
   207b6:	230c      	movs	r3, #12
   207b8:	18fb      	adds	r3, r7, r3
   207ba:	330a      	adds	r3, #10
   207bc:	0019      	movs	r1, r3
   207be:	4b3b      	ldr	r3, [pc, #236]	; (208ac <m2m_wifi_init+0x1cc>)
   207c0:	0018      	movs	r0, r3
   207c2:	4b37      	ldr	r3, [pc, #220]	; (208a0 <m2m_wifi_init+0x1c0>)
   207c4:	4798      	blx	r3
   207c6:	4b38      	ldr	r3, [pc, #224]	; (208a8 <m2m_wifi_init+0x1c8>)
   207c8:	0018      	movs	r0, r3
   207ca:	4b35      	ldr	r3, [pc, #212]	; (208a0 <m2m_wifi_init+0x1c0>)
   207cc:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   207ce:	4b33      	ldr	r3, [pc, #204]	; (2089c <m2m_wifi_init+0x1bc>)
   207d0:	0018      	movs	r0, r3
   207d2:	4b33      	ldr	r3, [pc, #204]	; (208a0 <m2m_wifi_init+0x1c0>)
   207d4:	4798      	blx	r3
   207d6:	230c      	movs	r3, #12
   207d8:	18fb      	adds	r3, r7, r3
   207da:	79db      	ldrb	r3, [r3, #7]
   207dc:	0019      	movs	r1, r3
   207de:	230c      	movs	r3, #12
   207e0:	18fb      	adds	r3, r7, r3
   207e2:	7a1b      	ldrb	r3, [r3, #8]
   207e4:	001a      	movs	r2, r3
   207e6:	230c      	movs	r3, #12
   207e8:	18fb      	adds	r3, r7, r3
   207ea:	7a5b      	ldrb	r3, [r3, #9]
   207ec:	4830      	ldr	r0, [pc, #192]	; (208b0 <m2m_wifi_init+0x1d0>)
   207ee:	4c2c      	ldr	r4, [pc, #176]	; (208a0 <m2m_wifi_init+0x1c0>)
   207f0:	47a0      	blx	r4
   207f2:	4b2d      	ldr	r3, [pc, #180]	; (208a8 <m2m_wifi_init+0x1c8>)
   207f4:	0018      	movs	r0, r3
   207f6:	4b2a      	ldr	r3, [pc, #168]	; (208a0 <m2m_wifi_init+0x1c0>)
   207f8:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   207fa:	4b28      	ldr	r3, [pc, #160]	; (2089c <m2m_wifi_init+0x1bc>)
   207fc:	0018      	movs	r0, r3
   207fe:	4b28      	ldr	r3, [pc, #160]	; (208a0 <m2m_wifi_init+0x1c0>)
   20800:	4798      	blx	r3
   20802:	482c      	ldr	r0, [pc, #176]	; (208b4 <m2m_wifi_init+0x1d4>)
   20804:	2304      	movs	r3, #4
   20806:	2205      	movs	r2, #5
   20808:	2113      	movs	r1, #19
   2080a:	4c25      	ldr	r4, [pc, #148]	; (208a0 <m2m_wifi_init+0x1c0>)
   2080c:	47a0      	blx	r4
   2080e:	4b26      	ldr	r3, [pc, #152]	; (208a8 <m2m_wifi_init+0x1c8>)
   20810:	0018      	movs	r0, r3
   20812:	4b23      	ldr	r3, [pc, #140]	; (208a0 <m2m_wifi_init+0x1c0>)
   20814:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   20816:	4b21      	ldr	r3, [pc, #132]	; (2089c <m2m_wifi_init+0x1bc>)
   20818:	0018      	movs	r0, r3
   2081a:	4b21      	ldr	r3, [pc, #132]	; (208a0 <m2m_wifi_init+0x1c0>)
   2081c:	4798      	blx	r3
   2081e:	4a26      	ldr	r2, [pc, #152]	; (208b8 <m2m_wifi_init+0x1d8>)
   20820:	4926      	ldr	r1, [pc, #152]	; (208bc <m2m_wifi_init+0x1dc>)
   20822:	4b27      	ldr	r3, [pc, #156]	; (208c0 <m2m_wifi_init+0x1e0>)
   20824:	0018      	movs	r0, r3
   20826:	4b1e      	ldr	r3, [pc, #120]	; (208a0 <m2m_wifi_init+0x1c0>)
   20828:	4798      	blx	r3
   2082a:	4b1f      	ldr	r3, [pc, #124]	; (208a8 <m2m_wifi_init+0x1c8>)
   2082c:	0018      	movs	r0, r3
   2082e:	4b1c      	ldr	r3, [pc, #112]	; (208a0 <m2m_wifi_init+0x1c0>)
   20830:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   20832:	2337      	movs	r3, #55	; 0x37
   20834:	18fb      	adds	r3, r7, r3
   20836:	781b      	ldrb	r3, [r3, #0]
   20838:	b25b      	sxtb	r3, r3
   2083a:	330d      	adds	r3, #13
   2083c:	d117      	bne.n	2086e <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   2083e:	23e8      	movs	r3, #232	; 0xe8
   20840:	33ff      	adds	r3, #255	; 0xff
   20842:	001a      	movs	r2, r3
   20844:	491f      	ldr	r1, [pc, #124]	; (208c4 <m2m_wifi_init+0x1e4>)
   20846:	4b20      	ldr	r3, [pc, #128]	; (208c8 <m2m_wifi_init+0x1e8>)
   20848:	0018      	movs	r0, r3
   2084a:	4b15      	ldr	r3, [pc, #84]	; (208a0 <m2m_wifi_init+0x1c0>)
   2084c:	4798      	blx	r3
   2084e:	4b1f      	ldr	r3, [pc, #124]	; (208cc <m2m_wifi_init+0x1ec>)
   20850:	0018      	movs	r0, r3
   20852:	4b13      	ldr	r3, [pc, #76]	; (208a0 <m2m_wifi_init+0x1c0>)
   20854:	4798      	blx	r3
   20856:	4b14      	ldr	r3, [pc, #80]	; (208a8 <m2m_wifi_init+0x1c8>)
   20858:	0018      	movs	r0, r3
   2085a:	4b11      	ldr	r3, [pc, #68]	; (208a0 <m2m_wifi_init+0x1c0>)
   2085c:	4798      	blx	r3
	}

	goto _EXIT0;
   2085e:	e006      	b.n	2086e <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   20860:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   20862:	2000      	movs	r0, #0
   20864:	4b1a      	ldr	r3, [pc, #104]	; (208d0 <m2m_wifi_init+0x1f0>)
   20866:	4798      	blx	r3
   20868:	e002      	b.n	20870 <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   2086a:	46c0      	nop			; (mov r8, r8)
   2086c:	e000      	b.n	20870 <m2m_wifi_init+0x190>
	goto _EXIT0;
   2086e:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   20870:	2337      	movs	r3, #55	; 0x37
   20872:	18fb      	adds	r3, r7, r3
   20874:	781b      	ldrb	r3, [r3, #0]
   20876:	b25b      	sxtb	r3, r3
}
   20878:	0018      	movs	r0, r3
   2087a:	46bd      	mov	sp, r7
   2087c:	b00f      	add	sp, #60	; 0x3c
   2087e:	bd90      	pop	{r4, r7, pc}
   20880:	20004120 	.word	0x20004120
   20884:	2000411d 	.word	0x2000411d
   20888:	00021a05 	.word	0x00021a05
   2088c:	0001f789 	.word	0x0001f789
   20890:	00020329 	.word	0x00020329
   20894:	0002026d 	.word	0x0002026d
   20898:	00021839 	.word	0x00021839
   2089c:	00036bb0 	.word	0x00036bb0
   208a0:	0001c7d9 	.word	0x0001c7d9
   208a4:	00036d54 	.word	0x00036d54
   208a8:	00036bdc 	.word	0x00036bdc
   208ac:	00036d7c 	.word	0x00036d7c
   208b0:	00036d98 	.word	0x00036d98
   208b4:	00036dbc 	.word	0x00036dbc
   208b8:	00036dd4 	.word	0x00036dd4
   208bc:	00036de0 	.word	0x00036de0
   208c0:	00036dec 	.word	0x00036dec
   208c4:	00036f88 	.word	0x00036f88
   208c8:	00036be0 	.word	0x00036be0
   208cc:	00036e04 	.word	0x00036e04
   208d0:	00021b95 	.word	0x00021b95

000208d4 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   208d4:	b580      	push	{r7, lr}
   208d6:	b082      	sub	sp, #8
   208d8:	af00      	add	r7, sp, #0
   208da:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   208dc:	4b03      	ldr	r3, [pc, #12]	; (208ec <m2m_wifi_handle_events+0x18>)
   208de:	4798      	blx	r3
   208e0:	0003      	movs	r3, r0
}
   208e2:	0018      	movs	r0, r3
   208e4:	46bd      	mov	sp, r7
   208e6:	b002      	add	sp, #8
   208e8:	bd80      	pop	{r7, pc}
   208ea:	46c0      	nop			; (mov r8, r8)
   208ec:	0002004d 	.word	0x0002004d

000208f0 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   208f0:	b590      	push	{r4, r7, lr}
   208f2:	b087      	sub	sp, #28
   208f4:	af02      	add	r7, sp, #8
   208f6:	60f8      	str	r0, [r7, #12]
   208f8:	0008      	movs	r0, r1
   208fa:	0011      	movs	r1, r2
   208fc:	607b      	str	r3, [r7, #4]
   208fe:	230b      	movs	r3, #11
   20900:	18fb      	adds	r3, r7, r3
   20902:	1c02      	adds	r2, r0, #0
   20904:	701a      	strb	r2, [r3, #0]
   20906:	230a      	movs	r3, #10
   20908:	18fb      	adds	r3, r7, r3
   2090a:	1c0a      	adds	r2, r1, #0
   2090c:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   2090e:	687c      	ldr	r4, [r7, #4]
   20910:	230a      	movs	r3, #10
   20912:	18fb      	adds	r3, r7, r3
   20914:	781a      	ldrb	r2, [r3, #0]
   20916:	230b      	movs	r3, #11
   20918:	18fb      	adds	r3, r7, r3
   2091a:	7819      	ldrb	r1, [r3, #0]
   2091c:	68f8      	ldr	r0, [r7, #12]
   2091e:	2300      	movs	r3, #0
   20920:	9301      	str	r3, [sp, #4]
   20922:	2320      	movs	r3, #32
   20924:	18fb      	adds	r3, r7, r3
   20926:	881b      	ldrh	r3, [r3, #0]
   20928:	9300      	str	r3, [sp, #0]
   2092a:	0023      	movs	r3, r4
   2092c:	4c03      	ldr	r4, [pc, #12]	; (2093c <m2m_wifi_connect+0x4c>)
   2092e:	47a0      	blx	r4
   20930:	0003      	movs	r3, r0
}
   20932:	0018      	movs	r0, r3
   20934:	46bd      	mov	sp, r7
   20936:	b005      	add	sp, #20
   20938:	bd90      	pop	{r4, r7, pc}
   2093a:	46c0      	nop			; (mov r8, r8)
   2093c:	00020941 	.word	0x00020941

00020940 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   20940:	b5b0      	push	{r4, r5, r7, lr}
   20942:	b0aa      	sub	sp, #168	; 0xa8
   20944:	af04      	add	r7, sp, #16
   20946:	60f8      	str	r0, [r7, #12]
   20948:	0008      	movs	r0, r1
   2094a:	0011      	movs	r1, r2
   2094c:	607b      	str	r3, [r7, #4]
   2094e:	230b      	movs	r3, #11
   20950:	18fb      	adds	r3, r7, r3
   20952:	1c02      	adds	r2, r0, #0
   20954:	701a      	strb	r2, [r3, #0]
   20956:	230a      	movs	r3, #10
   20958:	18fb      	adds	r3, r7, r3
   2095a:	1c0a      	adds	r2, r1, #0
   2095c:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   2095e:	2397      	movs	r3, #151	; 0x97
   20960:	18fb      	adds	r3, r7, r3
   20962:	2200      	movs	r2, #0
   20964:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   20966:	230a      	movs	r3, #10
   20968:	18fb      	adds	r3, r7, r3
   2096a:	781b      	ldrb	r3, [r3, #0]
   2096c:	2b01      	cmp	r3, #1
   2096e:	d100      	bne.n	20972 <m2m_wifi_connect_sc+0x32>
   20970:	e085      	b.n	20a7e <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   20972:	687b      	ldr	r3, [r7, #4]
   20974:	2b00      	cmp	r3, #0
   20976:	d112      	bne.n	2099e <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   20978:	4ad8      	ldr	r2, [pc, #864]	; (20cdc <m2m_wifi_connect_sc+0x39c>)
   2097a:	49d9      	ldr	r1, [pc, #868]	; (20ce0 <m2m_wifi_connect_sc+0x3a0>)
   2097c:	4bd9      	ldr	r3, [pc, #868]	; (20ce4 <m2m_wifi_connect_sc+0x3a4>)
   2097e:	0018      	movs	r0, r3
   20980:	4bd9      	ldr	r3, [pc, #868]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20982:	4798      	blx	r3
   20984:	4bd9      	ldr	r3, [pc, #868]	; (20cec <m2m_wifi_connect_sc+0x3ac>)
   20986:	0018      	movs	r0, r3
   20988:	4bd7      	ldr	r3, [pc, #860]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   2098a:	4798      	blx	r3
   2098c:	4bd8      	ldr	r3, [pc, #864]	; (20cf0 <m2m_wifi_connect_sc+0x3b0>)
   2098e:	0018      	movs	r0, r3
   20990:	4bd5      	ldr	r3, [pc, #852]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20992:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20994:	2397      	movs	r3, #151	; 0x97
   20996:	18fb      	adds	r3, r7, r3
   20998:	22f4      	movs	r2, #244	; 0xf4
   2099a:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2099c:	e1f9      	b.n	20d92 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   2099e:	230a      	movs	r3, #10
   209a0:	18fb      	adds	r3, r7, r3
   209a2:	781b      	ldrb	r3, [r3, #0]
   209a4:	2b02      	cmp	r3, #2
   209a6:	d16a      	bne.n	20a7e <m2m_wifi_connect_sc+0x13e>
   209a8:	687b      	ldr	r3, [r7, #4]
   209aa:	0018      	movs	r0, r3
   209ac:	4bd1      	ldr	r3, [pc, #836]	; (20cf4 <m2m_wifi_connect_sc+0x3b4>)
   209ae:	4798      	blx	r3
   209b0:	0003      	movs	r3, r0
   209b2:	2b40      	cmp	r3, #64	; 0x40
   209b4:	d163      	bne.n	20a7e <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   209b6:	2396      	movs	r3, #150	; 0x96
   209b8:	18fb      	adds	r3, r7, r3
   209ba:	2200      	movs	r2, #0
   209bc:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   209be:	687b      	ldr	r3, [r7, #4]
   209c0:	2290      	movs	r2, #144	; 0x90
   209c2:	18ba      	adds	r2, r7, r2
   209c4:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   209c6:	e055      	b.n	20a74 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   209c8:	2396      	movs	r3, #150	; 0x96
   209ca:	18fb      	adds	r3, r7, r3
   209cc:	781b      	ldrb	r3, [r3, #0]
   209ce:	2290      	movs	r2, #144	; 0x90
   209d0:	18ba      	adds	r2, r7, r2
   209d2:	6812      	ldr	r2, [r2, #0]
   209d4:	18d3      	adds	r3, r2, r3
   209d6:	781b      	ldrb	r3, [r3, #0]
   209d8:	2b2f      	cmp	r3, #47	; 0x2f
   209da:	d931      	bls.n	20a40 <m2m_wifi_connect_sc+0x100>
   209dc:	2396      	movs	r3, #150	; 0x96
   209de:	18fb      	adds	r3, r7, r3
   209e0:	781b      	ldrb	r3, [r3, #0]
   209e2:	2290      	movs	r2, #144	; 0x90
   209e4:	18ba      	adds	r2, r7, r2
   209e6:	6812      	ldr	r2, [r2, #0]
   209e8:	18d3      	adds	r3, r2, r3
   209ea:	781b      	ldrb	r3, [r3, #0]
   209ec:	2b39      	cmp	r3, #57	; 0x39
   209ee:	d909      	bls.n	20a04 <m2m_wifi_connect_sc+0xc4>
   209f0:	2396      	movs	r3, #150	; 0x96
   209f2:	18fb      	adds	r3, r7, r3
   209f4:	781b      	ldrb	r3, [r3, #0]
   209f6:	2290      	movs	r2, #144	; 0x90
   209f8:	18ba      	adds	r2, r7, r2
   209fa:	6812      	ldr	r2, [r2, #0]
   209fc:	18d3      	adds	r3, r2, r3
   209fe:	781b      	ldrb	r3, [r3, #0]
   20a00:	2b40      	cmp	r3, #64	; 0x40
   20a02:	d91d      	bls.n	20a40 <m2m_wifi_connect_sc+0x100>
   20a04:	2396      	movs	r3, #150	; 0x96
   20a06:	18fb      	adds	r3, r7, r3
   20a08:	781b      	ldrb	r3, [r3, #0]
   20a0a:	2290      	movs	r2, #144	; 0x90
   20a0c:	18ba      	adds	r2, r7, r2
   20a0e:	6812      	ldr	r2, [r2, #0]
   20a10:	18d3      	adds	r3, r2, r3
   20a12:	781b      	ldrb	r3, [r3, #0]
   20a14:	2b46      	cmp	r3, #70	; 0x46
   20a16:	d909      	bls.n	20a2c <m2m_wifi_connect_sc+0xec>
   20a18:	2396      	movs	r3, #150	; 0x96
   20a1a:	18fb      	adds	r3, r7, r3
   20a1c:	781b      	ldrb	r3, [r3, #0]
   20a1e:	2290      	movs	r2, #144	; 0x90
   20a20:	18ba      	adds	r2, r7, r2
   20a22:	6812      	ldr	r2, [r2, #0]
   20a24:	18d3      	adds	r3, r2, r3
   20a26:	781b      	ldrb	r3, [r3, #0]
   20a28:	2b60      	cmp	r3, #96	; 0x60
   20a2a:	d909      	bls.n	20a40 <m2m_wifi_connect_sc+0x100>
   20a2c:	2396      	movs	r3, #150	; 0x96
   20a2e:	18fb      	adds	r3, r7, r3
   20a30:	781b      	ldrb	r3, [r3, #0]
   20a32:	2290      	movs	r2, #144	; 0x90
   20a34:	18ba      	adds	r2, r7, r2
   20a36:	6812      	ldr	r2, [r2, #0]
   20a38:	18d3      	adds	r3, r2, r3
   20a3a:	781b      	ldrb	r3, [r3, #0]
   20a3c:	2b66      	cmp	r3, #102	; 0x66
   20a3e:	d912      	bls.n	20a66 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   20a40:	4aad      	ldr	r2, [pc, #692]	; (20cf8 <m2m_wifi_connect_sc+0x3b8>)
   20a42:	49a7      	ldr	r1, [pc, #668]	; (20ce0 <m2m_wifi_connect_sc+0x3a0>)
   20a44:	4ba7      	ldr	r3, [pc, #668]	; (20ce4 <m2m_wifi_connect_sc+0x3a4>)
   20a46:	0018      	movs	r0, r3
   20a48:	4ba7      	ldr	r3, [pc, #668]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20a4a:	4798      	blx	r3
   20a4c:	4bab      	ldr	r3, [pc, #684]	; (20cfc <m2m_wifi_connect_sc+0x3bc>)
   20a4e:	0018      	movs	r0, r3
   20a50:	4ba5      	ldr	r3, [pc, #660]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20a52:	4798      	blx	r3
   20a54:	4ba6      	ldr	r3, [pc, #664]	; (20cf0 <m2m_wifi_connect_sc+0x3b0>)
   20a56:	0018      	movs	r0, r3
   20a58:	4ba3      	ldr	r3, [pc, #652]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20a5a:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   20a5c:	2397      	movs	r3, #151	; 0x97
   20a5e:	18fb      	adds	r3, r7, r3
   20a60:	22f4      	movs	r2, #244	; 0xf4
   20a62:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   20a64:	e195      	b.n	20d92 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   20a66:	2396      	movs	r3, #150	; 0x96
   20a68:	18fb      	adds	r3, r7, r3
   20a6a:	781a      	ldrb	r2, [r3, #0]
   20a6c:	2396      	movs	r3, #150	; 0x96
   20a6e:	18fb      	adds	r3, r7, r3
   20a70:	3201      	adds	r2, #1
   20a72:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   20a74:	2396      	movs	r3, #150	; 0x96
   20a76:	18fb      	adds	r3, r7, r3
   20a78:	781b      	ldrb	r3, [r3, #0]
   20a7a:	2b3f      	cmp	r3, #63	; 0x3f
   20a7c:	d9a4      	bls.n	209c8 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   20a7e:	230b      	movs	r3, #11
   20a80:	18fb      	adds	r3, r7, r3
   20a82:	781b      	ldrb	r3, [r3, #0]
   20a84:	2b00      	cmp	r3, #0
   20a86:	d004      	beq.n	20a92 <m2m_wifi_connect_sc+0x152>
   20a88:	230b      	movs	r3, #11
   20a8a:	18fb      	adds	r3, r7, r3
   20a8c:	781b      	ldrb	r3, [r3, #0]
   20a8e:	2b20      	cmp	r3, #32
   20a90:	d913      	bls.n	20aba <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   20a92:	238c      	movs	r3, #140	; 0x8c
   20a94:	009a      	lsls	r2, r3, #2
   20a96:	4992      	ldr	r1, [pc, #584]	; (20ce0 <m2m_wifi_connect_sc+0x3a0>)
   20a98:	4b92      	ldr	r3, [pc, #584]	; (20ce4 <m2m_wifi_connect_sc+0x3a4>)
   20a9a:	0018      	movs	r0, r3
   20a9c:	4b92      	ldr	r3, [pc, #584]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20a9e:	4798      	blx	r3
   20aa0:	4b97      	ldr	r3, [pc, #604]	; (20d00 <m2m_wifi_connect_sc+0x3c0>)
   20aa2:	0018      	movs	r0, r3
   20aa4:	4b90      	ldr	r3, [pc, #576]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20aa6:	4798      	blx	r3
   20aa8:	4b91      	ldr	r3, [pc, #580]	; (20cf0 <m2m_wifi_connect_sc+0x3b0>)
   20aaa:	0018      	movs	r0, r3
   20aac:	4b8e      	ldr	r3, [pc, #568]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20aae:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   20ab0:	2397      	movs	r3, #151	; 0x97
   20ab2:	18fb      	adds	r3, r7, r3
   20ab4:	22f4      	movs	r2, #244	; 0xf4
   20ab6:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   20ab8:	e16b      	b.n	20d92 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   20aba:	23a8      	movs	r3, #168	; 0xa8
   20abc:	18fb      	adds	r3, r7, r3
   20abe:	881b      	ldrh	r3, [r3, #0]
   20ac0:	2b00      	cmp	r3, #0
   20ac2:	d004      	beq.n	20ace <m2m_wifi_connect_sc+0x18e>
   20ac4:	23a8      	movs	r3, #168	; 0xa8
   20ac6:	18fb      	adds	r3, r7, r3
   20ac8:	881b      	ldrh	r3, [r3, #0]
   20aca:	2b0e      	cmp	r3, #14
   20acc:	d917      	bls.n	20afe <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   20ace:	23a8      	movs	r3, #168	; 0xa8
   20ad0:	18fb      	adds	r3, r7, r3
   20ad2:	881b      	ldrh	r3, [r3, #0]
   20ad4:	2bff      	cmp	r3, #255	; 0xff
   20ad6:	d012      	beq.n	20afe <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   20ad8:	4a8a      	ldr	r2, [pc, #552]	; (20d04 <m2m_wifi_connect_sc+0x3c4>)
   20ada:	4981      	ldr	r1, [pc, #516]	; (20ce0 <m2m_wifi_connect_sc+0x3a0>)
   20adc:	4b81      	ldr	r3, [pc, #516]	; (20ce4 <m2m_wifi_connect_sc+0x3a4>)
   20ade:	0018      	movs	r0, r3
   20ae0:	4b81      	ldr	r3, [pc, #516]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20ae2:	4798      	blx	r3
   20ae4:	4b88      	ldr	r3, [pc, #544]	; (20d08 <m2m_wifi_connect_sc+0x3c8>)
   20ae6:	0018      	movs	r0, r3
   20ae8:	4b7f      	ldr	r3, [pc, #508]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20aea:	4798      	blx	r3
   20aec:	4b80      	ldr	r3, [pc, #512]	; (20cf0 <m2m_wifi_connect_sc+0x3b0>)
   20aee:	0018      	movs	r0, r3
   20af0:	4b7d      	ldr	r3, [pc, #500]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20af2:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20af4:	2397      	movs	r3, #151	; 0x97
   20af6:	18fb      	adds	r3, r7, r3
   20af8:	22f4      	movs	r2, #244	; 0xf4
   20afa:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20afc:	e149      	b.n	20d92 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   20afe:	230b      	movs	r3, #11
   20b00:	18fb      	adds	r3, r7, r3
   20b02:	781a      	ldrb	r2, [r3, #0]
   20b04:	68f9      	ldr	r1, [r7, #12]
   20b06:	2314      	movs	r3, #20
   20b08:	18fb      	adds	r3, r7, r3
   20b0a:	3346      	adds	r3, #70	; 0x46
   20b0c:	0018      	movs	r0, r3
   20b0e:	4b7f      	ldr	r3, [pc, #508]	; (20d0c <m2m_wifi_connect_sc+0x3cc>)
   20b10:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   20b12:	230b      	movs	r3, #11
   20b14:	18fb      	adds	r3, r7, r3
   20b16:	781b      	ldrb	r3, [r3, #0]
   20b18:	2214      	movs	r2, #20
   20b1a:	18ba      	adds	r2, r7, r2
   20b1c:	2146      	movs	r1, #70	; 0x46
   20b1e:	18d3      	adds	r3, r2, r3
   20b20:	185b      	adds	r3, r3, r1
   20b22:	2200      	movs	r2, #0
   20b24:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   20b26:	2314      	movs	r3, #20
   20b28:	18fb      	adds	r3, r7, r3
   20b2a:	22a8      	movs	r2, #168	; 0xa8
   20b2c:	18ba      	adds	r2, r7, r2
   20b2e:	2144      	movs	r1, #68	; 0x44
   20b30:	8812      	ldrh	r2, [r2, #0]
   20b32:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   20b34:	23ac      	movs	r3, #172	; 0xac
   20b36:	18fb      	adds	r3, r7, r3
   20b38:	781b      	ldrb	r3, [r3, #0]
   20b3a:	1e5a      	subs	r2, r3, #1
   20b3c:	4193      	sbcs	r3, r2
   20b3e:	b2db      	uxtb	r3, r3
   20b40:	0019      	movs	r1, r3
   20b42:	2314      	movs	r3, #20
   20b44:	18fb      	adds	r3, r7, r3
   20b46:	2267      	movs	r2, #103	; 0x67
   20b48:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   20b4a:	2314      	movs	r3, #20
   20b4c:	18fb      	adds	r3, r7, r3
   20b4e:	228c      	movs	r2, #140	; 0x8c
   20b50:	18ba      	adds	r2, r7, r2
   20b52:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   20b54:	238c      	movs	r3, #140	; 0x8c
   20b56:	18fb      	adds	r3, r7, r3
   20b58:	681b      	ldr	r3, [r3, #0]
   20b5a:	220a      	movs	r2, #10
   20b5c:	18ba      	adds	r2, r7, r2
   20b5e:	2141      	movs	r1, #65	; 0x41
   20b60:	7812      	ldrb	r2, [r2, #0]
   20b62:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   20b64:	230a      	movs	r3, #10
   20b66:	18fb      	adds	r3, r7, r3
   20b68:	781b      	ldrb	r3, [r3, #0]
   20b6a:	2b03      	cmp	r3, #3
   20b6c:	d000      	beq.n	20b70 <m2m_wifi_connect_sc+0x230>
   20b6e:	e07d      	b.n	20c6c <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   20b70:	687b      	ldr	r3, [r7, #4]
   20b72:	2288      	movs	r2, #136	; 0x88
   20b74:	18ba      	adds	r2, r7, r2
   20b76:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   20b78:	238c      	movs	r3, #140	; 0x8c
   20b7a:	18fb      	adds	r3, r7, r3
   20b7c:	681b      	ldr	r3, [r3, #0]
   20b7e:	2284      	movs	r2, #132	; 0x84
   20b80:	18ba      	adds	r2, r7, r2
   20b82:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   20b84:	2388      	movs	r3, #136	; 0x88
   20b86:	18fb      	adds	r3, r7, r3
   20b88:	681b      	ldr	r3, [r3, #0]
   20b8a:	781b      	ldrb	r3, [r3, #0]
   20b8c:	3b01      	subs	r3, #1
   20b8e:	b2da      	uxtb	r2, r3
   20b90:	2384      	movs	r3, #132	; 0x84
   20b92:	18fb      	adds	r3, r7, r3
   20b94:	681b      	ldr	r3, [r3, #0]
   20b96:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   20b98:	2384      	movs	r3, #132	; 0x84
   20b9a:	18fb      	adds	r3, r7, r3
   20b9c:	681b      	ldr	r3, [r3, #0]
   20b9e:	781b      	ldrb	r3, [r3, #0]
   20ba0:	2b03      	cmp	r3, #3
   20ba2:	d919      	bls.n	20bd8 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   20ba4:	2394      	movs	r3, #148	; 0x94
   20ba6:	009a      	lsls	r2, r3, #2
   20ba8:	494d      	ldr	r1, [pc, #308]	; (20ce0 <m2m_wifi_connect_sc+0x3a0>)
   20baa:	4b4e      	ldr	r3, [pc, #312]	; (20ce4 <m2m_wifi_connect_sc+0x3a4>)
   20bac:	0018      	movs	r0, r3
   20bae:	4b4e      	ldr	r3, [pc, #312]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20bb0:	4798      	blx	r3
   20bb2:	2384      	movs	r3, #132	; 0x84
   20bb4:	18fb      	adds	r3, r7, r3
   20bb6:	681b      	ldr	r3, [r3, #0]
   20bb8:	781b      	ldrb	r3, [r3, #0]
   20bba:	001a      	movs	r2, r3
   20bbc:	4b54      	ldr	r3, [pc, #336]	; (20d10 <m2m_wifi_connect_sc+0x3d0>)
   20bbe:	0011      	movs	r1, r2
   20bc0:	0018      	movs	r0, r3
   20bc2:	4b49      	ldr	r3, [pc, #292]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20bc4:	4798      	blx	r3
   20bc6:	4b4a      	ldr	r3, [pc, #296]	; (20cf0 <m2m_wifi_connect_sc+0x3b0>)
   20bc8:	0018      	movs	r0, r3
   20bca:	4b47      	ldr	r3, [pc, #284]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20bcc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20bce:	2397      	movs	r3, #151	; 0x97
   20bd0:	18fb      	adds	r3, r7, r3
   20bd2:	22f4      	movs	r2, #244	; 0xf4
   20bd4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20bd6:	e0dc      	b.n	20d92 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   20bd8:	2388      	movs	r3, #136	; 0x88
   20bda:	18fb      	adds	r3, r7, r3
   20bdc:	681b      	ldr	r3, [r3, #0]
   20bde:	785b      	ldrb	r3, [r3, #1]
   20be0:	3b01      	subs	r3, #1
   20be2:	b2da      	uxtb	r2, r3
   20be4:	2384      	movs	r3, #132	; 0x84
   20be6:	18fb      	adds	r3, r7, r3
   20be8:	681b      	ldr	r3, [r3, #0]
   20bea:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   20bec:	2384      	movs	r3, #132	; 0x84
   20bee:	18fb      	adds	r3, r7, r3
   20bf0:	681b      	ldr	r3, [r3, #0]
   20bf2:	785b      	ldrb	r3, [r3, #1]
   20bf4:	2b0a      	cmp	r3, #10
   20bf6:	d01e      	beq.n	20c36 <m2m_wifi_connect_sc+0x2f6>
   20bf8:	2384      	movs	r3, #132	; 0x84
   20bfa:	18fb      	adds	r3, r7, r3
   20bfc:	681b      	ldr	r3, [r3, #0]
   20bfe:	785b      	ldrb	r3, [r3, #1]
   20c00:	2b1a      	cmp	r3, #26
   20c02:	d018      	beq.n	20c36 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   20c04:	4a43      	ldr	r2, [pc, #268]	; (20d14 <m2m_wifi_connect_sc+0x3d4>)
   20c06:	4936      	ldr	r1, [pc, #216]	; (20ce0 <m2m_wifi_connect_sc+0x3a0>)
   20c08:	4b36      	ldr	r3, [pc, #216]	; (20ce4 <m2m_wifi_connect_sc+0x3a4>)
   20c0a:	0018      	movs	r0, r3
   20c0c:	4b36      	ldr	r3, [pc, #216]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20c0e:	4798      	blx	r3
   20c10:	2384      	movs	r3, #132	; 0x84
   20c12:	18fb      	adds	r3, r7, r3
   20c14:	681b      	ldr	r3, [r3, #0]
   20c16:	785b      	ldrb	r3, [r3, #1]
   20c18:	001a      	movs	r2, r3
   20c1a:	4b3f      	ldr	r3, [pc, #252]	; (20d18 <m2m_wifi_connect_sc+0x3d8>)
   20c1c:	0011      	movs	r1, r2
   20c1e:	0018      	movs	r0, r3
   20c20:	4b31      	ldr	r3, [pc, #196]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20c22:	4798      	blx	r3
   20c24:	4b32      	ldr	r3, [pc, #200]	; (20cf0 <m2m_wifi_connect_sc+0x3b0>)
   20c26:	0018      	movs	r0, r3
   20c28:	4b2f      	ldr	r3, [pc, #188]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20c2a:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20c2c:	2397      	movs	r3, #151	; 0x97
   20c2e:	18fb      	adds	r3, r7, r3
   20c30:	22f4      	movs	r2, #244	; 0xf4
   20c32:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20c34:	e0ad      	b.n	20d92 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   20c36:	2384      	movs	r3, #132	; 0x84
   20c38:	18fb      	adds	r3, r7, r3
   20c3a:	681b      	ldr	r3, [r3, #0]
   20c3c:	1c98      	adds	r0, r3, #2
   20c3e:	2388      	movs	r3, #136	; 0x88
   20c40:	18fb      	adds	r3, r7, r3
   20c42:	681b      	ldr	r3, [r3, #0]
   20c44:	1c99      	adds	r1, r3, #2
   20c46:	2388      	movs	r3, #136	; 0x88
   20c48:	18fb      	adds	r3, r7, r3
   20c4a:	681b      	ldr	r3, [r3, #0]
   20c4c:	785b      	ldrb	r3, [r3, #1]
   20c4e:	001a      	movs	r2, r3
   20c50:	4b2e      	ldr	r3, [pc, #184]	; (20d0c <m2m_wifi_connect_sc+0x3cc>)
   20c52:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   20c54:	2388      	movs	r3, #136	; 0x88
   20c56:	18fb      	adds	r3, r7, r3
   20c58:	681b      	ldr	r3, [r3, #0]
   20c5a:	785b      	ldrb	r3, [r3, #1]
   20c5c:	001a      	movs	r2, r3
   20c5e:	2384      	movs	r3, #132	; 0x84
   20c60:	18fb      	adds	r3, r7, r3
   20c62:	681b      	ldr	r3, [r3, #0]
   20c64:	189b      	adds	r3, r3, r2
   20c66:	2200      	movs	r2, #0
   20c68:	709a      	strb	r2, [r3, #2]
   20c6a:	e081      	b.n	20d70 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   20c6c:	230a      	movs	r3, #10
   20c6e:	18fb      	adds	r3, r7, r3
   20c70:	781b      	ldrb	r3, [r3, #0]
   20c72:	2b02      	cmp	r3, #2
   20c74:	d156      	bne.n	20d24 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   20c76:	2382      	movs	r3, #130	; 0x82
   20c78:	18fc      	adds	r4, r7, r3
   20c7a:	687b      	ldr	r3, [r7, #4]
   20c7c:	0018      	movs	r0, r3
   20c7e:	4b1d      	ldr	r3, [pc, #116]	; (20cf4 <m2m_wifi_connect_sc+0x3b4>)
   20c80:	4798      	blx	r3
   20c82:	0003      	movs	r3, r0
   20c84:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   20c86:	2382      	movs	r3, #130	; 0x82
   20c88:	18fb      	adds	r3, r7, r3
   20c8a:	881b      	ldrh	r3, [r3, #0]
   20c8c:	2b00      	cmp	r3, #0
   20c8e:	d004      	beq.n	20c9a <m2m_wifi_connect_sc+0x35a>
   20c90:	2382      	movs	r3, #130	; 0x82
   20c92:	18fb      	adds	r3, r7, r3
   20c94:	881b      	ldrh	r3, [r3, #0]
   20c96:	2b40      	cmp	r3, #64	; 0x40
   20c98:	d912      	bls.n	20cc0 <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   20c9a:	4a20      	ldr	r2, [pc, #128]	; (20d1c <m2m_wifi_connect_sc+0x3dc>)
   20c9c:	4910      	ldr	r1, [pc, #64]	; (20ce0 <m2m_wifi_connect_sc+0x3a0>)
   20c9e:	4b11      	ldr	r3, [pc, #68]	; (20ce4 <m2m_wifi_connect_sc+0x3a4>)
   20ca0:	0018      	movs	r0, r3
   20ca2:	4b11      	ldr	r3, [pc, #68]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20ca4:	4798      	blx	r3
   20ca6:	4b1e      	ldr	r3, [pc, #120]	; (20d20 <m2m_wifi_connect_sc+0x3e0>)
   20ca8:	0018      	movs	r0, r3
   20caa:	4b0f      	ldr	r3, [pc, #60]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20cac:	4798      	blx	r3
   20cae:	4b10      	ldr	r3, [pc, #64]	; (20cf0 <m2m_wifi_connect_sc+0x3b0>)
   20cb0:	0018      	movs	r0, r3
   20cb2:	4b0d      	ldr	r3, [pc, #52]	; (20ce8 <m2m_wifi_connect_sc+0x3a8>)
   20cb4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   20cb6:	2397      	movs	r3, #151	; 0x97
   20cb8:	18fb      	adds	r3, r7, r3
   20cba:	22f4      	movs	r2, #244	; 0xf4
   20cbc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   20cbe:	e068      	b.n	20d92 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   20cc0:	238c      	movs	r3, #140	; 0x8c
   20cc2:	18fb      	adds	r3, r7, r3
   20cc4:	6818      	ldr	r0, [r3, #0]
   20cc6:	2382      	movs	r3, #130	; 0x82
   20cc8:	18fb      	adds	r3, r7, r3
   20cca:	881b      	ldrh	r3, [r3, #0]
   20ccc:	3301      	adds	r3, #1
   20cce:	001a      	movs	r2, r3
   20cd0:	687b      	ldr	r3, [r7, #4]
   20cd2:	0019      	movs	r1, r3
   20cd4:	4b0d      	ldr	r3, [pc, #52]	; (20d0c <m2m_wifi_connect_sc+0x3cc>)
   20cd6:	4798      	blx	r3
   20cd8:	e04a      	b.n	20d70 <m2m_wifi_connect_sc+0x430>
   20cda:	46c0      	nop			; (mov r8, r8)
   20cdc:	0000021a 	.word	0x0000021a
   20ce0:	00036f98 	.word	0x00036f98
   20ce4:	00036be0 	.word	0x00036be0
   20ce8:	0001c7d9 	.word	0x0001c7d9
   20cec:	00036e20 	.word	0x00036e20
   20cf0:	00036bdc 	.word	0x00036bdc
   20cf4:	0001f5af 	.word	0x0001f5af
   20cf8:	00000226 	.word	0x00000226
   20cfc:	00036e34 	.word	0x00036e34
   20d00:	00036e44 	.word	0x00036e44
   20d04:	00000239 	.word	0x00000239
   20d08:	00036e58 	.word	0x00036e58
   20d0c:	0001f535 	.word	0x0001f535
   20d10:	00036e64 	.word	0x00036e64
   20d14:	00000257 	.word	0x00000257
   20d18:	00036e80 	.word	0x00036e80
   20d1c:	00000266 	.word	0x00000266
   20d20:	00036e9c 	.word	0x00036e9c
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   20d24:	230a      	movs	r3, #10
   20d26:	18fb      	adds	r3, r7, r3
   20d28:	781b      	ldrb	r3, [r3, #0]
   20d2a:	2b04      	cmp	r3, #4
   20d2c:	d108      	bne.n	20d40 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   20d2e:	238c      	movs	r3, #140	; 0x8c
   20d30:	18fb      	adds	r3, r7, r3
   20d32:	681b      	ldr	r3, [r3, #0]
   20d34:	6879      	ldr	r1, [r7, #4]
   20d36:	223e      	movs	r2, #62	; 0x3e
   20d38:	0018      	movs	r0, r3
   20d3a:	4b1a      	ldr	r3, [pc, #104]	; (20da4 <m2m_wifi_connect_sc+0x464>)
   20d3c:	4798      	blx	r3
   20d3e:	e017      	b.n	20d70 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   20d40:	230a      	movs	r3, #10
   20d42:	18fb      	adds	r3, r7, r3
   20d44:	781b      	ldrb	r3, [r3, #0]
   20d46:	2b01      	cmp	r3, #1
   20d48:	d012      	beq.n	20d70 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   20d4a:	4a17      	ldr	r2, [pc, #92]	; (20da8 <m2m_wifi_connect_sc+0x468>)
   20d4c:	4917      	ldr	r1, [pc, #92]	; (20dac <m2m_wifi_connect_sc+0x46c>)
   20d4e:	4b18      	ldr	r3, [pc, #96]	; (20db0 <m2m_wifi_connect_sc+0x470>)
   20d50:	0018      	movs	r0, r3
   20d52:	4b18      	ldr	r3, [pc, #96]	; (20db4 <m2m_wifi_connect_sc+0x474>)
   20d54:	4798      	blx	r3
   20d56:	4b18      	ldr	r3, [pc, #96]	; (20db8 <m2m_wifi_connect_sc+0x478>)
   20d58:	0018      	movs	r0, r3
   20d5a:	4b16      	ldr	r3, [pc, #88]	; (20db4 <m2m_wifi_connect_sc+0x474>)
   20d5c:	4798      	blx	r3
   20d5e:	4b17      	ldr	r3, [pc, #92]	; (20dbc <m2m_wifi_connect_sc+0x47c>)
   20d60:	0018      	movs	r0, r3
   20d62:	4b14      	ldr	r3, [pc, #80]	; (20db4 <m2m_wifi_connect_sc+0x474>)
   20d64:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   20d66:	2397      	movs	r3, #151	; 0x97
   20d68:	18fb      	adds	r3, r7, r3
   20d6a:	22f4      	movs	r2, #244	; 0xf4
   20d6c:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   20d6e:	e010      	b.n	20d92 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   20d70:	2397      	movs	r3, #151	; 0x97
   20d72:	18fc      	adds	r4, r7, r3
   20d74:	2314      	movs	r3, #20
   20d76:	18fa      	adds	r2, r7, r3
   20d78:	2300      	movs	r3, #0
   20d7a:	9302      	str	r3, [sp, #8]
   20d7c:	2300      	movs	r3, #0
   20d7e:	9301      	str	r3, [sp, #4]
   20d80:	2300      	movs	r3, #0
   20d82:	9300      	str	r3, [sp, #0]
   20d84:	236c      	movs	r3, #108	; 0x6c
   20d86:	2128      	movs	r1, #40	; 0x28
   20d88:	2001      	movs	r0, #1
   20d8a:	4d0d      	ldr	r5, [pc, #52]	; (20dc0 <m2m_wifi_connect_sc+0x480>)
   20d8c:	47a8      	blx	r5
   20d8e:	0003      	movs	r3, r0
   20d90:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   20d92:	2397      	movs	r3, #151	; 0x97
   20d94:	18fb      	adds	r3, r7, r3
   20d96:	781b      	ldrb	r3, [r3, #0]
   20d98:	b25b      	sxtb	r3, r3
}
   20d9a:	0018      	movs	r0, r3
   20d9c:	46bd      	mov	sp, r7
   20d9e:	b026      	add	sp, #152	; 0x98
   20da0:	bdb0      	pop	{r4, r5, r7, pc}
   20da2:	46c0      	nop			; (mov r8, r8)
   20da4:	0001f535 	.word	0x0001f535
   20da8:	00000276 	.word	0x00000276
   20dac:	00036f98 	.word	0x00036f98
   20db0:	00036be0 	.word	0x00036be0
   20db4:	0001c7d9 	.word	0x0001c7d9
   20db8:	00036eb8 	.word	0x00036eb8
   20dbc:	00036bdc 	.word	0x00036bdc
   20dc0:	0001f7d1 	.word	0x0001f7d1

00020dc4 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   20dc4:	b580      	push	{r7, lr}
   20dc6:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   20dc8:	2300      	movs	r3, #0
}
   20dca:	0018      	movs	r0, r3
   20dcc:	46bd      	mov	sp, r7
   20dce:	bd80      	pop	{r7, pc}

00020dd0 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   20dd0:	b590      	push	{r4, r7, lr}
   20dd2:	b087      	sub	sp, #28
   20dd4:	af00      	add	r7, sp, #0
   20dd6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   20dd8:	2317      	movs	r3, #23
   20dda:	18fb      	adds	r3, r7, r3
   20ddc:	2200      	movs	r2, #0
   20dde:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   20de0:	687b      	ldr	r3, [r7, #4]
   20de2:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   20de4:	693b      	ldr	r3, [r7, #16]
   20de6:	2280      	movs	r2, #128	; 0x80
   20de8:	0052      	lsls	r2, r2, #1
   20dea:	4313      	orrs	r3, r2
   20dec:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   20dee:	693a      	ldr	r2, [r7, #16]
   20df0:	23a5      	movs	r3, #165	; 0xa5
   20df2:	015b      	lsls	r3, r3, #5
   20df4:	0011      	movs	r1, r2
   20df6:	0018      	movs	r0, r3
   20df8:	4b12      	ldr	r3, [pc, #72]	; (20e44 <chip_apply_conf+0x74>)
   20dfa:	4798      	blx	r3
		if(val32 != 0) {		
   20dfc:	693b      	ldr	r3, [r7, #16]
   20dfe:	2b00      	cmp	r3, #0
   20e00:	d018      	beq.n	20e34 <chip_apply_conf+0x64>
			uint32 reg = 0;
   20e02:	2300      	movs	r3, #0
   20e04:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   20e06:	2317      	movs	r3, #23
   20e08:	18fc      	adds	r4, r7, r3
   20e0a:	230c      	movs	r3, #12
   20e0c:	18fa      	adds	r2, r7, r3
   20e0e:	23a5      	movs	r3, #165	; 0xa5
   20e10:	015b      	lsls	r3, r3, #5
   20e12:	0011      	movs	r1, r2
   20e14:	0018      	movs	r0, r3
   20e16:	4b0c      	ldr	r3, [pc, #48]	; (20e48 <chip_apply_conf+0x78>)
   20e18:	4798      	blx	r3
   20e1a:	0003      	movs	r3, r0
   20e1c:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   20e1e:	2317      	movs	r3, #23
   20e20:	18fb      	adds	r3, r7, r3
   20e22:	781b      	ldrb	r3, [r3, #0]
   20e24:	b25b      	sxtb	r3, r3
   20e26:	2b00      	cmp	r3, #0
   20e28:	d1e1      	bne.n	20dee <chip_apply_conf+0x1e>
				if(reg == val32)
   20e2a:	68fa      	ldr	r2, [r7, #12]
   20e2c:	693b      	ldr	r3, [r7, #16]
   20e2e:	429a      	cmp	r2, r3
   20e30:	d002      	beq.n	20e38 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   20e32:	e7dc      	b.n	20dee <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   20e34:	46c0      	nop			; (mov r8, r8)
   20e36:	e000      	b.n	20e3a <chip_apply_conf+0x6a>
					break;
   20e38:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   20e3a:	2300      	movs	r3, #0
}
   20e3c:	0018      	movs	r0, r3
   20e3e:	46bd      	mov	sp, r7
   20e40:	b007      	add	sp, #28
   20e42:	bd90      	pop	{r4, r7, pc}
   20e44:	00021625 	.word	0x00021625
   20e48:	00021601 	.word	0x00021601

00020e4c <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   20e4c:	b590      	push	{r4, r7, lr}
   20e4e:	b083      	sub	sp, #12
   20e50:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   20e52:	2300      	movs	r3, #0
   20e54:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   20e56:	1dfb      	adds	r3, r7, #7
   20e58:	2200      	movs	r2, #0
   20e5a:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   20e5c:	1dfc      	adds	r4, r7, #7
   20e5e:	003b      	movs	r3, r7
   20e60:	4a24      	ldr	r2, [pc, #144]	; (20ef4 <enable_interrupts+0xa8>)
   20e62:	0019      	movs	r1, r3
   20e64:	0010      	movs	r0, r2
   20e66:	4b24      	ldr	r3, [pc, #144]	; (20ef8 <enable_interrupts+0xac>)
   20e68:	4798      	blx	r3
   20e6a:	0003      	movs	r3, r0
   20e6c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20e6e:	1dfb      	adds	r3, r7, #7
   20e70:	781b      	ldrb	r3, [r3, #0]
   20e72:	b25b      	sxtb	r3, r3
   20e74:	2b00      	cmp	r3, #0
   20e76:	d131      	bne.n	20edc <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   20e78:	683b      	ldr	r3, [r7, #0]
   20e7a:	2280      	movs	r2, #128	; 0x80
   20e7c:	0052      	lsls	r2, r2, #1
   20e7e:	4313      	orrs	r3, r2
   20e80:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   20e82:	683b      	ldr	r3, [r7, #0]
   20e84:	1dfc      	adds	r4, r7, #7
   20e86:	4a1b      	ldr	r2, [pc, #108]	; (20ef4 <enable_interrupts+0xa8>)
   20e88:	0019      	movs	r1, r3
   20e8a:	0010      	movs	r0, r2
   20e8c:	4b1b      	ldr	r3, [pc, #108]	; (20efc <enable_interrupts+0xb0>)
   20e8e:	4798      	blx	r3
   20e90:	0003      	movs	r3, r0
   20e92:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20e94:	1dfb      	adds	r3, r7, #7
   20e96:	781b      	ldrb	r3, [r3, #0]
   20e98:	b25b      	sxtb	r3, r3
   20e9a:	2b00      	cmp	r3, #0
   20e9c:	d120      	bne.n	20ee0 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   20e9e:	1dfc      	adds	r4, r7, #7
   20ea0:	003a      	movs	r2, r7
   20ea2:	23d0      	movs	r3, #208	; 0xd0
   20ea4:	015b      	lsls	r3, r3, #5
   20ea6:	0011      	movs	r1, r2
   20ea8:	0018      	movs	r0, r3
   20eaa:	4b13      	ldr	r3, [pc, #76]	; (20ef8 <enable_interrupts+0xac>)
   20eac:	4798      	blx	r3
   20eae:	0003      	movs	r3, r0
   20eb0:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   20eb2:	1dfb      	adds	r3, r7, #7
   20eb4:	781b      	ldrb	r3, [r3, #0]
   20eb6:	b25b      	sxtb	r3, r3
   20eb8:	2b00      	cmp	r3, #0
   20eba:	d113      	bne.n	20ee4 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   20ebc:	683b      	ldr	r3, [r7, #0]
   20ebe:	2280      	movs	r2, #128	; 0x80
   20ec0:	0252      	lsls	r2, r2, #9
   20ec2:	4313      	orrs	r3, r2
   20ec4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   20ec6:	683a      	ldr	r2, [r7, #0]
   20ec8:	1dfc      	adds	r4, r7, #7
   20eca:	23d0      	movs	r3, #208	; 0xd0
   20ecc:	015b      	lsls	r3, r3, #5
   20ece:	0011      	movs	r1, r2
   20ed0:	0018      	movs	r0, r3
   20ed2:	4b0a      	ldr	r3, [pc, #40]	; (20efc <enable_interrupts+0xb0>)
   20ed4:	4798      	blx	r3
   20ed6:	0003      	movs	r3, r0
   20ed8:	7023      	strb	r3, [r4, #0]
   20eda:	e004      	b.n	20ee6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   20edc:	46c0      	nop			; (mov r8, r8)
   20ede:	e002      	b.n	20ee6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   20ee0:	46c0      	nop			; (mov r8, r8)
   20ee2:	e000      	b.n	20ee6 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   20ee4:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   20ee6:	1dfb      	adds	r3, r7, #7
   20ee8:	781b      	ldrb	r3, [r3, #0]
   20eea:	b25b      	sxtb	r3, r3
}
   20eec:	0018      	movs	r0, r3
   20eee:	46bd      	mov	sp, r7
   20ef0:	b003      	add	sp, #12
   20ef2:	bd90      	pop	{r4, r7, pc}
   20ef4:	00001408 	.word	0x00001408
   20ef8:	00021601 	.word	0x00021601
   20efc:	00021625 	.word	0x00021625

00020f00 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   20f00:	b580      	push	{r7, lr}
   20f02:	b082      	sub	sp, #8
   20f04:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   20f06:	4b32      	ldr	r3, [pc, #200]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f08:	681b      	ldr	r3, [r3, #0]
   20f0a:	2b00      	cmp	r3, #0
   20f0c:	d159      	bne.n	20fc2 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   20f0e:	4a30      	ldr	r2, [pc, #192]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f10:	2380      	movs	r3, #128	; 0x80
   20f12:	015b      	lsls	r3, r3, #5
   20f14:	0011      	movs	r1, r2
   20f16:	0018      	movs	r0, r3
   20f18:	4b2e      	ldr	r3, [pc, #184]	; (20fd4 <nmi_get_chipid+0xd4>)
   20f1a:	4798      	blx	r3
   20f1c:	1e03      	subs	r3, r0, #0
   20f1e:	d004      	beq.n	20f2a <nmi_get_chipid+0x2a>
			chipid = 0;
   20f20:	4b2b      	ldr	r3, [pc, #172]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f22:	2200      	movs	r2, #0
   20f24:	601a      	str	r2, [r3, #0]
			return 0;
   20f26:	2300      	movs	r3, #0
   20f28:	e04d      	b.n	20fc6 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   20f2a:	1d3b      	adds	r3, r7, #4
   20f2c:	4a2a      	ldr	r2, [pc, #168]	; (20fd8 <nmi_get_chipid+0xd8>)
   20f2e:	0019      	movs	r1, r3
   20f30:	0010      	movs	r0, r2
   20f32:	4b28      	ldr	r3, [pc, #160]	; (20fd4 <nmi_get_chipid+0xd4>)
   20f34:	4798      	blx	r3
   20f36:	1e03      	subs	r3, r0, #0
   20f38:	d004      	beq.n	20f44 <nmi_get_chipid+0x44>
			chipid = 0;
   20f3a:	4b25      	ldr	r3, [pc, #148]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f3c:	2200      	movs	r2, #0
   20f3e:	601a      	str	r2, [r3, #0]
			return 0;
   20f40:	2300      	movs	r3, #0
   20f42:	e040      	b.n	20fc6 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   20f44:	4b22      	ldr	r3, [pc, #136]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f46:	681b      	ldr	r3, [r3, #0]
   20f48:	4a24      	ldr	r2, [pc, #144]	; (20fdc <nmi_get_chipid+0xdc>)
   20f4a:	4293      	cmp	r3, r2
   20f4c:	d106      	bne.n	20f5c <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   20f4e:	687b      	ldr	r3, [r7, #4]
   20f50:	2b01      	cmp	r3, #1
   20f52:	d029      	beq.n	20fa8 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   20f54:	4b1e      	ldr	r3, [pc, #120]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f56:	4a22      	ldr	r2, [pc, #136]	; (20fe0 <nmi_get_chipid+0xe0>)
   20f58:	601a      	str	r2, [r3, #0]
   20f5a:	e025      	b.n	20fa8 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   20f5c:	4b1c      	ldr	r3, [pc, #112]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f5e:	681b      	ldr	r3, [r3, #0]
   20f60:	4a20      	ldr	r2, [pc, #128]	; (20fe4 <nmi_get_chipid+0xe4>)
   20f62:	4293      	cmp	r3, r2
   20f64:	d10d      	bne.n	20f82 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   20f66:	687b      	ldr	r3, [r7, #4]
   20f68:	2b03      	cmp	r3, #3
   20f6a:	d01d      	beq.n	20fa8 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   20f6c:	687b      	ldr	r3, [r7, #4]
   20f6e:	2b04      	cmp	r3, #4
   20f70:	d103      	bne.n	20f7a <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   20f72:	4b17      	ldr	r3, [pc, #92]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f74:	4a1c      	ldr	r2, [pc, #112]	; (20fe8 <nmi_get_chipid+0xe8>)
   20f76:	601a      	str	r2, [r3, #0]
   20f78:	e016      	b.n	20fa8 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   20f7a:	4b15      	ldr	r3, [pc, #84]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f7c:	4a1b      	ldr	r2, [pc, #108]	; (20fec <nmi_get_chipid+0xec>)
   20f7e:	601a      	str	r2, [r3, #0]
   20f80:	e012      	b.n	20fa8 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   20f82:	4b13      	ldr	r3, [pc, #76]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f84:	681b      	ldr	r3, [r3, #0]
   20f86:	4a1a      	ldr	r2, [pc, #104]	; (20ff0 <nmi_get_chipid+0xf0>)
   20f88:	4293      	cmp	r3, r2
   20f8a:	d10d      	bne.n	20fa8 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   20f8c:	4a10      	ldr	r2, [pc, #64]	; (20fd0 <nmi_get_chipid+0xd0>)
   20f8e:	23ec      	movs	r3, #236	; 0xec
   20f90:	039b      	lsls	r3, r3, #14
   20f92:	0011      	movs	r1, r2
   20f94:	0018      	movs	r0, r3
   20f96:	4b0f      	ldr	r3, [pc, #60]	; (20fd4 <nmi_get_chipid+0xd4>)
   20f98:	4798      	blx	r3
   20f9a:	1e03      	subs	r3, r0, #0
   20f9c:	d004      	beq.n	20fa8 <nmi_get_chipid+0xa8>
			chipid = 0;
   20f9e:	4b0c      	ldr	r3, [pc, #48]	; (20fd0 <nmi_get_chipid+0xd0>)
   20fa0:	2200      	movs	r2, #0
   20fa2:	601a      	str	r2, [r3, #0]
			return 0;
   20fa4:	2300      	movs	r3, #0
   20fa6:	e00e      	b.n	20fc6 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   20fa8:	4b09      	ldr	r3, [pc, #36]	; (20fd0 <nmi_get_chipid+0xd0>)
   20faa:	681b      	ldr	r3, [r3, #0]
   20fac:	4a11      	ldr	r2, [pc, #68]	; (20ff4 <nmi_get_chipid+0xf4>)
   20fae:	401a      	ands	r2, r3
   20fb0:	4b07      	ldr	r3, [pc, #28]	; (20fd0 <nmi_get_chipid+0xd0>)
   20fb2:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   20fb4:	4b06      	ldr	r3, [pc, #24]	; (20fd0 <nmi_get_chipid+0xd0>)
   20fb6:	681b      	ldr	r3, [r3, #0]
   20fb8:	22a0      	movs	r2, #160	; 0xa0
   20fba:	02d2      	lsls	r2, r2, #11
   20fbc:	431a      	orrs	r2, r3
   20fbe:	4b04      	ldr	r3, [pc, #16]	; (20fd0 <nmi_get_chipid+0xd0>)
   20fc0:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   20fc2:	4b03      	ldr	r3, [pc, #12]	; (20fd0 <nmi_get_chipid+0xd0>)
   20fc4:	681b      	ldr	r3, [r3, #0]
}
   20fc6:	0018      	movs	r0, r3
   20fc8:	46bd      	mov	sp, r7
   20fca:	b002      	add	sp, #8
   20fcc:	bd80      	pop	{r7, pc}
   20fce:	46c0      	nop			; (mov r8, r8)
   20fd0:	20004124 	.word	0x20004124
   20fd4:	00021601 	.word	0x00021601
   20fd8:	000013f4 	.word	0x000013f4
   20fdc:	001002a0 	.word	0x001002a0
   20fe0:	001002a1 	.word	0x001002a1
   20fe4:	001002b0 	.word	0x001002b0
   20fe8:	001002b1 	.word	0x001002b1
   20fec:	001002b2 	.word	0x001002b2
   20ff0:	001000f0 	.word	0x001000f0
   20ff4:	fff0ffff 	.word	0xfff0ffff

00020ff8 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   20ff8:	b590      	push	{r4, r7, lr}
   20ffa:	b083      	sub	sp, #12
   20ffc:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   20ffe:	1dfb      	adds	r3, r7, #7
   21000:	2200      	movs	r2, #0
   21002:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21004:	1dfc      	adds	r4, r7, #7
   21006:	003b      	movs	r3, r7
   21008:	0019      	movs	r1, r3
   2100a:	2010      	movs	r0, #16
   2100c:	4b2e      	ldr	r3, [pc, #184]	; (210c8 <chip_sleep+0xd0>)
   2100e:	4798      	blx	r3
   21010:	0003      	movs	r3, r0
   21012:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   21014:	1dfb      	adds	r3, r7, #7
   21016:	781b      	ldrb	r3, [r3, #0]
   21018:	b25b      	sxtb	r3, r3
   2101a:	2b00      	cmp	r3, #0
   2101c:	d145      	bne.n	210aa <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2101e:	683b      	ldr	r3, [r7, #0]
   21020:	2201      	movs	r2, #1
   21022:	4013      	ands	r3, r2
   21024:	d000      	beq.n	21028 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   21026:	e7ed      	b.n	21004 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   21028:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   2102a:	1dfc      	adds	r4, r7, #7
   2102c:	003b      	movs	r3, r7
   2102e:	0019      	movs	r1, r3
   21030:	2001      	movs	r0, #1
   21032:	4b25      	ldr	r3, [pc, #148]	; (210c8 <chip_sleep+0xd0>)
   21034:	4798      	blx	r3
   21036:	0003      	movs	r3, r0
   21038:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2103a:	1dfb      	adds	r3, r7, #7
   2103c:	781b      	ldrb	r3, [r3, #0]
   2103e:	b25b      	sxtb	r3, r3
   21040:	2b00      	cmp	r3, #0
   21042:	d134      	bne.n	210ae <chip_sleep+0xb6>
	if(reg & NBIT1)
   21044:	683b      	ldr	r3, [r7, #0]
   21046:	2202      	movs	r2, #2
   21048:	4013      	ands	r3, r2
   2104a:	d010      	beq.n	2106e <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   2104c:	683b      	ldr	r3, [r7, #0]
   2104e:	2202      	movs	r2, #2
   21050:	4393      	bics	r3, r2
   21052:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   21054:	683b      	ldr	r3, [r7, #0]
   21056:	1dfc      	adds	r4, r7, #7
   21058:	0019      	movs	r1, r3
   2105a:	2001      	movs	r0, #1
   2105c:	4b1b      	ldr	r3, [pc, #108]	; (210cc <chip_sleep+0xd4>)
   2105e:	4798      	blx	r3
   21060:	0003      	movs	r3, r0
   21062:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   21064:	1dfb      	adds	r3, r7, #7
   21066:	781b      	ldrb	r3, [r3, #0]
   21068:	b25b      	sxtb	r3, r3
   2106a:	2b00      	cmp	r3, #0
   2106c:	d121      	bne.n	210b2 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2106e:	1dfc      	adds	r4, r7, #7
   21070:	003b      	movs	r3, r7
   21072:	0019      	movs	r1, r3
   21074:	200b      	movs	r0, #11
   21076:	4b14      	ldr	r3, [pc, #80]	; (210c8 <chip_sleep+0xd0>)
   21078:	4798      	blx	r3
   2107a:	0003      	movs	r3, r0
   2107c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2107e:	1dfb      	adds	r3, r7, #7
   21080:	781b      	ldrb	r3, [r3, #0]
   21082:	b25b      	sxtb	r3, r3
   21084:	2b00      	cmp	r3, #0
   21086:	d116      	bne.n	210b6 <chip_sleep+0xbe>
	if(reg & NBIT0)
   21088:	683b      	ldr	r3, [r7, #0]
   2108a:	2201      	movs	r2, #1
   2108c:	4013      	ands	r3, r2
   2108e:	d013      	beq.n	210b8 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   21090:	683b      	ldr	r3, [r7, #0]
   21092:	2201      	movs	r2, #1
   21094:	4393      	bics	r3, r2
   21096:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   21098:	683b      	ldr	r3, [r7, #0]
   2109a:	1dfc      	adds	r4, r7, #7
   2109c:	0019      	movs	r1, r3
   2109e:	200b      	movs	r0, #11
   210a0:	4b0a      	ldr	r3, [pc, #40]	; (210cc <chip_sleep+0xd4>)
   210a2:	4798      	blx	r3
   210a4:	0003      	movs	r3, r0
   210a6:	7023      	strb	r3, [r4, #0]
   210a8:	e006      	b.n	210b8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   210aa:	46c0      	nop			; (mov r8, r8)
   210ac:	e004      	b.n	210b8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   210ae:	46c0      	nop			; (mov r8, r8)
   210b0:	e002      	b.n	210b8 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   210b2:	46c0      	nop			; (mov r8, r8)
   210b4:	e000      	b.n	210b8 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   210b6:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   210b8:	1dfb      	adds	r3, r7, #7
   210ba:	781b      	ldrb	r3, [r3, #0]
   210bc:	b25b      	sxtb	r3, r3
}
   210be:	0018      	movs	r0, r3
   210c0:	46bd      	mov	sp, r7
   210c2:	b003      	add	sp, #12
   210c4:	bd90      	pop	{r4, r7, pc}
   210c6:	46c0      	nop			; (mov r8, r8)
   210c8:	00021601 	.word	0x00021601
   210cc:	00021625 	.word	0x00021625

000210d0 <chip_wake>:
sint8 chip_wake(void)
{
   210d0:	b590      	push	{r4, r7, lr}
   210d2:	b085      	sub	sp, #20
   210d4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   210d6:	230f      	movs	r3, #15
   210d8:	18fb      	adds	r3, r7, r3
   210da:	2200      	movs	r2, #0
   210dc:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   210de:	2300      	movs	r3, #0
   210e0:	607b      	str	r3, [r7, #4]
   210e2:	2300      	movs	r3, #0
   210e4:	603b      	str	r3, [r7, #0]
   210e6:	2300      	movs	r3, #0
   210e8:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   210ea:	230f      	movs	r3, #15
   210ec:	18fc      	adds	r4, r7, r3
   210ee:	1d3b      	adds	r3, r7, #4
   210f0:	0019      	movs	r1, r3
   210f2:	200b      	movs	r0, #11
   210f4:	4b4e      	ldr	r3, [pc, #312]	; (21230 <chip_wake+0x160>)
   210f6:	4798      	blx	r3
   210f8:	0003      	movs	r3, r0
   210fa:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   210fc:	230f      	movs	r3, #15
   210fe:	18fb      	adds	r3, r7, r3
   21100:	781b      	ldrb	r3, [r3, #0]
   21102:	b25b      	sxtb	r3, r3
   21104:	2b00      	cmp	r3, #0
   21106:	d000      	beq.n	2110a <chip_wake+0x3a>
   21108:	e082      	b.n	21210 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   2110a:	687b      	ldr	r3, [r7, #4]
   2110c:	2201      	movs	r2, #1
   2110e:	4013      	ands	r3, r2
   21110:	d111      	bne.n	21136 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   21112:	687b      	ldr	r3, [r7, #4]
   21114:	2201      	movs	r2, #1
   21116:	4313      	orrs	r3, r2
   21118:	220f      	movs	r2, #15
   2111a:	18bc      	adds	r4, r7, r2
   2111c:	0019      	movs	r1, r3
   2111e:	200b      	movs	r0, #11
   21120:	4b44      	ldr	r3, [pc, #272]	; (21234 <chip_wake+0x164>)
   21122:	4798      	blx	r3
   21124:	0003      	movs	r3, r0
   21126:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21128:	230f      	movs	r3, #15
   2112a:	18fb      	adds	r3, r7, r3
   2112c:	781b      	ldrb	r3, [r3, #0]
   2112e:	b25b      	sxtb	r3, r3
   21130:	2b00      	cmp	r3, #0
   21132:	d000      	beq.n	21136 <chip_wake+0x66>
   21134:	e06e      	b.n	21214 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   21136:	230f      	movs	r3, #15
   21138:	18fc      	adds	r4, r7, r3
   2113a:	1d3b      	adds	r3, r7, #4
   2113c:	0019      	movs	r1, r3
   2113e:	2001      	movs	r0, #1
   21140:	4b3b      	ldr	r3, [pc, #236]	; (21230 <chip_wake+0x160>)
   21142:	4798      	blx	r3
   21144:	0003      	movs	r3, r0
   21146:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21148:	230f      	movs	r3, #15
   2114a:	18fb      	adds	r3, r7, r3
   2114c:	781b      	ldrb	r3, [r3, #0]
   2114e:	b25b      	sxtb	r3, r3
   21150:	2b00      	cmp	r3, #0
   21152:	d161      	bne.n	21218 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   21154:	687b      	ldr	r3, [r7, #4]
   21156:	2202      	movs	r2, #2
   21158:	4013      	ands	r3, r2
   2115a:	d110      	bne.n	2117e <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   2115c:	687b      	ldr	r3, [r7, #4]
   2115e:	2202      	movs	r2, #2
   21160:	4313      	orrs	r3, r2
   21162:	220f      	movs	r2, #15
   21164:	18bc      	adds	r4, r7, r2
   21166:	0019      	movs	r1, r3
   21168:	2001      	movs	r0, #1
   2116a:	4b32      	ldr	r3, [pc, #200]	; (21234 <chip_wake+0x164>)
   2116c:	4798      	blx	r3
   2116e:	0003      	movs	r3, r0
   21170:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   21172:	230f      	movs	r3, #15
   21174:	18fb      	adds	r3, r7, r3
   21176:	781b      	ldrb	r3, [r3, #0]
   21178:	b25b      	sxtb	r3, r3
   2117a:	2b00      	cmp	r3, #0
   2117c:	d14e      	bne.n	2121c <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2117e:	230f      	movs	r3, #15
   21180:	18fc      	adds	r4, r7, r3
   21182:	003b      	movs	r3, r7
   21184:	0019      	movs	r1, r3
   21186:	200f      	movs	r0, #15
   21188:	4b29      	ldr	r3, [pc, #164]	; (21230 <chip_wake+0x160>)
   2118a:	4798      	blx	r3
   2118c:	0003      	movs	r3, r0
   2118e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   21190:	230f      	movs	r3, #15
   21192:	18fb      	adds	r3, r7, r3
   21194:	781b      	ldrb	r3, [r3, #0]
   21196:	b25b      	sxtb	r3, r3
   21198:	2b00      	cmp	r3, #0
   2119a:	d014      	beq.n	211c6 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   2119c:	23a8      	movs	r3, #168	; 0xa8
   2119e:	005a      	lsls	r2, r3, #1
   211a0:	4925      	ldr	r1, [pc, #148]	; (21238 <chip_wake+0x168>)
   211a2:	4b26      	ldr	r3, [pc, #152]	; (2123c <chip_wake+0x16c>)
   211a4:	0018      	movs	r0, r3
   211a6:	4b26      	ldr	r3, [pc, #152]	; (21240 <chip_wake+0x170>)
   211a8:	4798      	blx	r3
   211aa:	230f      	movs	r3, #15
   211ac:	18fb      	adds	r3, r7, r3
   211ae:	2100      	movs	r1, #0
   211b0:	5659      	ldrsb	r1, [r3, r1]
   211b2:	683a      	ldr	r2, [r7, #0]
   211b4:	4b23      	ldr	r3, [pc, #140]	; (21244 <chip_wake+0x174>)
   211b6:	0018      	movs	r0, r3
   211b8:	4b21      	ldr	r3, [pc, #132]	; (21240 <chip_wake+0x170>)
   211ba:	4798      	blx	r3
   211bc:	4b22      	ldr	r3, [pc, #136]	; (21248 <chip_wake+0x178>)
   211be:	0018      	movs	r0, r3
   211c0:	4b1f      	ldr	r3, [pc, #124]	; (21240 <chip_wake+0x170>)
   211c2:	4798      	blx	r3
			goto _WAKE_EXIT;
   211c4:	e02b      	b.n	2121e <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   211c6:	683b      	ldr	r3, [r7, #0]
   211c8:	2204      	movs	r2, #4
   211ca:	4013      	ands	r3, r2
   211cc:	d11c      	bne.n	21208 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   211ce:	2002      	movs	r0, #2
   211d0:	4b1e      	ldr	r3, [pc, #120]	; (2124c <chip_wake+0x17c>)
   211d2:	4798      	blx	r3
		trials++;
   211d4:	68bb      	ldr	r3, [r7, #8]
   211d6:	3301      	adds	r3, #1
   211d8:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   211da:	68bb      	ldr	r3, [r7, #8]
   211dc:	2b04      	cmp	r3, #4
   211de:	d9ce      	bls.n	2117e <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   211e0:	23ad      	movs	r3, #173	; 0xad
   211e2:	005a      	lsls	r2, r3, #1
   211e4:	4914      	ldr	r1, [pc, #80]	; (21238 <chip_wake+0x168>)
   211e6:	4b15      	ldr	r3, [pc, #84]	; (2123c <chip_wake+0x16c>)
   211e8:	0018      	movs	r0, r3
   211ea:	4b15      	ldr	r3, [pc, #84]	; (21240 <chip_wake+0x170>)
   211ec:	4798      	blx	r3
   211ee:	4b18      	ldr	r3, [pc, #96]	; (21250 <chip_wake+0x180>)
   211f0:	0018      	movs	r0, r3
   211f2:	4b13      	ldr	r3, [pc, #76]	; (21240 <chip_wake+0x170>)
   211f4:	4798      	blx	r3
   211f6:	4b14      	ldr	r3, [pc, #80]	; (21248 <chip_wake+0x178>)
   211f8:	0018      	movs	r0, r3
   211fa:	4b11      	ldr	r3, [pc, #68]	; (21240 <chip_wake+0x170>)
   211fc:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   211fe:	230f      	movs	r3, #15
   21200:	18fb      	adds	r3, r7, r3
   21202:	22fc      	movs	r2, #252	; 0xfc
   21204:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   21206:	e00a      	b.n	2121e <chip_wake+0x14e>
			break;
   21208:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   2120a:	4b12      	ldr	r3, [pc, #72]	; (21254 <chip_wake+0x184>)
   2120c:	4798      	blx	r3
   2120e:	e006      	b.n	2121e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21210:	46c0      	nop			; (mov r8, r8)
   21212:	e004      	b.n	2121e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21214:	46c0      	nop			; (mov r8, r8)
   21216:	e002      	b.n	2121e <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   21218:	46c0      	nop			; (mov r8, r8)
   2121a:	e000      	b.n	2121e <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2121c:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2121e:	230f      	movs	r3, #15
   21220:	18fb      	adds	r3, r7, r3
   21222:	781b      	ldrb	r3, [r3, #0]
   21224:	b25b      	sxtb	r3, r3
}
   21226:	0018      	movs	r0, r3
   21228:	46bd      	mov	sp, r7
   2122a:	b005      	add	sp, #20
   2122c:	bd90      	pop	{r4, r7, pc}
   2122e:	46c0      	nop			; (mov r8, r8)
   21230:	00021601 	.word	0x00021601
   21234:	00021625 	.word	0x00021625
   21238:	00037038 	.word	0x00037038
   2123c:	00036fac 	.word	0x00036fac
   21240:	0001c7d9 	.word	0x0001c7d9
   21244:	00036fc0 	.word	0x00036fc0
   21248:	00036fd8 	.word	0x00036fd8
   2124c:	0001ec91 	.word	0x0001ec91
   21250:	00036fdc 	.word	0x00036fdc
   21254:	000215c1 	.word	0x000215c1

00021258 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   21258:	b580      	push	{r7, lr}
   2125a:	b088      	sub	sp, #32
   2125c:	af00      	add	r7, sp, #0
   2125e:	0002      	movs	r2, r0
   21260:	1dfb      	adds	r3, r7, #7
   21262:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   21264:	2313      	movs	r3, #19
   21266:	18fb      	adds	r3, r7, r3
   21268:	2200      	movs	r2, #0
   2126a:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   2126c:	2300      	movs	r3, #0
   2126e:	61fb      	str	r3, [r7, #28]
   21270:	2300      	movs	r3, #0
   21272:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   21274:	2300      	movs	r3, #0
   21276:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   21278:	4b4a      	ldr	r3, [pc, #296]	; (213a4 <wait_for_bootrom+0x14c>)
   2127a:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   2127c:	2300      	movs	r3, #0
   2127e:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21280:	4b49      	ldr	r3, [pc, #292]	; (213a8 <wait_for_bootrom+0x150>)
   21282:	0018      	movs	r0, r3
   21284:	4b49      	ldr	r3, [pc, #292]	; (213ac <wait_for_bootrom+0x154>)
   21286:	4798      	blx	r3
   21288:	0003      	movs	r3, r0
   2128a:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   2128c:	69fb      	ldr	r3, [r7, #28]
   2128e:	2b00      	cmp	r3, #0
   21290:	db03      	blt.n	2129a <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   21292:	2001      	movs	r0, #1
   21294:	4b46      	ldr	r3, [pc, #280]	; (213b0 <wait_for_bootrom+0x158>)
   21296:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   21298:	e7f2      	b.n	21280 <wait_for_bootrom+0x28>
			break;
   2129a:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   2129c:	4b45      	ldr	r3, [pc, #276]	; (213b4 <wait_for_bootrom+0x15c>)
   2129e:	0018      	movs	r0, r3
   212a0:	4b42      	ldr	r3, [pc, #264]	; (213ac <wait_for_bootrom+0x154>)
   212a2:	4798      	blx	r3
   212a4:	0003      	movs	r3, r0
   212a6:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   212a8:	69fb      	ldr	r3, [r7, #28]
   212aa:	2201      	movs	r2, #1
   212ac:	4013      	ands	r3, r2
   212ae:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   212b0:	69fb      	ldr	r3, [r7, #28]
   212b2:	2b00      	cmp	r3, #0
   212b4:	d112      	bne.n	212dc <wait_for_bootrom+0x84>
	{
		reg = 0;
   212b6:	2300      	movs	r3, #0
   212b8:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   212ba:	e00b      	b.n	212d4 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   212bc:	2001      	movs	r0, #1
   212be:	4b3c      	ldr	r3, [pc, #240]	; (213b0 <wait_for_bootrom+0x158>)
   212c0:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   212c2:	4b3d      	ldr	r3, [pc, #244]	; (213b8 <wait_for_bootrom+0x160>)
   212c4:	0018      	movs	r0, r3
   212c6:	4b39      	ldr	r3, [pc, #228]	; (213ac <wait_for_bootrom+0x154>)
   212c8:	4798      	blx	r3
   212ca:	0003      	movs	r3, r0
   212cc:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   212ce:	69bb      	ldr	r3, [r7, #24]
   212d0:	3301      	adds	r3, #1
   212d2:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   212d4:	69fb      	ldr	r3, [r7, #28]
   212d6:	4a39      	ldr	r2, [pc, #228]	; (213bc <wait_for_bootrom+0x164>)
   212d8:	4293      	cmp	r3, r2
   212da:	d1ef      	bne.n	212bc <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   212dc:	1dfb      	adds	r3, r7, #7
   212de:	781b      	ldrb	r3, [r3, #0]
   212e0:	2b02      	cmp	r3, #2
   212e2:	d10d      	bne.n	21300 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   212e4:	4a36      	ldr	r2, [pc, #216]	; (213c0 <wait_for_bootrom+0x168>)
   212e6:	4b37      	ldr	r3, [pc, #220]	; (213c4 <wait_for_bootrom+0x16c>)
   212e8:	0011      	movs	r1, r2
   212ea:	0018      	movs	r0, r3
   212ec:	4b36      	ldr	r3, [pc, #216]	; (213c8 <wait_for_bootrom+0x170>)
   212ee:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   212f0:	2380      	movs	r3, #128	; 0x80
   212f2:	035b      	lsls	r3, r3, #13
   212f4:	4a35      	ldr	r2, [pc, #212]	; (213cc <wait_for_bootrom+0x174>)
   212f6:	0019      	movs	r1, r3
   212f8:	0010      	movs	r0, r2
   212fa:	4b33      	ldr	r3, [pc, #204]	; (213c8 <wait_for_bootrom+0x170>)
   212fc:	4798      	blx	r3
   212fe:	e022      	b.n	21346 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   21300:	1dfb      	adds	r3, r7, #7
   21302:	781b      	ldrb	r3, [r3, #0]
   21304:	2b03      	cmp	r3, #3
   21306:	d10b      	bne.n	21320 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   21308:	4a2d      	ldr	r2, [pc, #180]	; (213c0 <wait_for_bootrom+0x168>)
   2130a:	4b2e      	ldr	r3, [pc, #184]	; (213c4 <wait_for_bootrom+0x16c>)
   2130c:	0011      	movs	r1, r2
   2130e:	0018      	movs	r0, r3
   21310:	4b2d      	ldr	r3, [pc, #180]	; (213c8 <wait_for_bootrom+0x170>)
   21312:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   21314:	4b2d      	ldr	r3, [pc, #180]	; (213cc <wait_for_bootrom+0x174>)
   21316:	2100      	movs	r1, #0
   21318:	0018      	movs	r0, r3
   2131a:	4b2b      	ldr	r3, [pc, #172]	; (213c8 <wait_for_bootrom+0x170>)
   2131c:	4798      	blx	r3
   2131e:	e012      	b.n	21346 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   21320:	1dfb      	adds	r3, r7, #7
   21322:	781b      	ldrb	r3, [r3, #0]
   21324:	2b04      	cmp	r3, #4
   21326:	d108      	bne.n	2133a <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   21328:	2380      	movs	r3, #128	; 0x80
   2132a:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2132c:	68fb      	ldr	r3, [r7, #12]
   2132e:	4a27      	ldr	r2, [pc, #156]	; (213cc <wait_for_bootrom+0x174>)
   21330:	0019      	movs	r1, r3
   21332:	0010      	movs	r0, r2
   21334:	4b24      	ldr	r3, [pc, #144]	; (213c8 <wait_for_bootrom+0x170>)
   21336:	4798      	blx	r3
   21338:	e005      	b.n	21346 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   2133a:	68fb      	ldr	r3, [r7, #12]
   2133c:	4a23      	ldr	r2, [pc, #140]	; (213cc <wait_for_bootrom+0x174>)
   2133e:	0019      	movs	r1, r3
   21340:	0010      	movs	r0, r2
   21342:	4b21      	ldr	r3, [pc, #132]	; (213c8 <wait_for_bootrom+0x170>)
   21344:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   21346:	4b22      	ldr	r3, [pc, #136]	; (213d0 <wait_for_bootrom+0x178>)
   21348:	4798      	blx	r3
   2134a:	0003      	movs	r3, r0
   2134c:	051b      	lsls	r3, r3, #20
   2134e:	0d1b      	lsrs	r3, r3, #20
   21350:	4a20      	ldr	r2, [pc, #128]	; (213d4 <wait_for_bootrom+0x17c>)
   21352:	4293      	cmp	r3, r2
   21354:	d906      	bls.n	21364 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   21356:	697b      	ldr	r3, [r7, #20]
   21358:	2202      	movs	r2, #2
   2135a:	4313      	orrs	r3, r2
   2135c:	0018      	movs	r0, r3
   2135e:	4b1e      	ldr	r3, [pc, #120]	; (213d8 <wait_for_bootrom+0x180>)
   21360:	4798      	blx	r3
   21362:	e003      	b.n	2136c <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   21364:	697b      	ldr	r3, [r7, #20]
   21366:	0018      	movs	r0, r3
   21368:	4b1b      	ldr	r3, [pc, #108]	; (213d8 <wait_for_bootrom+0x180>)
   2136a:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   2136c:	4b1b      	ldr	r3, [pc, #108]	; (213dc <wait_for_bootrom+0x184>)
   2136e:	0018      	movs	r0, r3
   21370:	4b1b      	ldr	r3, [pc, #108]	; (213e0 <wait_for_bootrom+0x188>)
   21372:	4798      	blx	r3
   21374:	68fa      	ldr	r2, [r7, #12]
   21376:	4b1b      	ldr	r3, [pc, #108]	; (213e4 <wait_for_bootrom+0x18c>)
   21378:	0011      	movs	r1, r2
   2137a:	0018      	movs	r0, r3
   2137c:	4b18      	ldr	r3, [pc, #96]	; (213e0 <wait_for_bootrom+0x188>)
   2137e:	4798      	blx	r3
   21380:	4b19      	ldr	r3, [pc, #100]	; (213e8 <wait_for_bootrom+0x190>)
   21382:	0018      	movs	r0, r3
   21384:	4b16      	ldr	r3, [pc, #88]	; (213e0 <wait_for_bootrom+0x188>)
   21386:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   21388:	4a18      	ldr	r2, [pc, #96]	; (213ec <wait_for_bootrom+0x194>)
   2138a:	4b0b      	ldr	r3, [pc, #44]	; (213b8 <wait_for_bootrom+0x160>)
   2138c:	0011      	movs	r1, r2
   2138e:	0018      	movs	r0, r3
   21390:	4b0d      	ldr	r3, [pc, #52]	; (213c8 <wait_for_bootrom+0x170>)
   21392:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   21394:	2313      	movs	r3, #19
   21396:	18fb      	adds	r3, r7, r3
   21398:	781b      	ldrb	r3, [r3, #0]
   2139a:	b25b      	sxtb	r3, r3
}
   2139c:	0018      	movs	r0, r3
   2139e:	46bd      	mov	sp, r7
   213a0:	b008      	add	sp, #32
   213a2:	bd80      	pop	{r7, pc}
   213a4:	13301354 	.word	0x13301354
   213a8:	00001014 	.word	0x00001014
   213ac:	000215e1 	.word	0x000215e1
   213b0:	0001ec91 	.word	0x0001ec91
   213b4:	000207bc 	.word	0x000207bc
   213b8:	000c000c 	.word	0x000c000c
   213bc:	10add09e 	.word	0x10add09e
   213c0:	3c1cd57d 	.word	0x3c1cd57d
   213c4:	000207ac 	.word	0x000207ac
   213c8:	00021625 	.word	0x00021625
   213cc:	0000108c 	.word	0x0000108c
   213d0:	00020f01 	.word	0x00020f01
   213d4:	0000039f 	.word	0x0000039f
   213d8:	00020dd1 	.word	0x00020dd1
   213dc:	00036ff8 	.word	0x00036ff8
   213e0:	0001c7d9 	.word	0x0001c7d9
   213e4:	00037004 	.word	0x00037004
   213e8:	00036fd8 	.word	0x00036fd8
   213ec:	ef522f61 	.word	0xef522f61

000213f0 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   213f0:	b580      	push	{r7, lr}
   213f2:	b088      	sub	sp, #32
   213f4:	af00      	add	r7, sp, #0
   213f6:	0002      	movs	r2, r0
   213f8:	1dfb      	adds	r3, r7, #7
   213fa:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   213fc:	231f      	movs	r3, #31
   213fe:	18fb      	adds	r3, r7, r3
   21400:	2200      	movs	r2, #0
   21402:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   21404:	2300      	movs	r3, #0
   21406:	61bb      	str	r3, [r7, #24]
   21408:	2300      	movs	r3, #0
   2140a:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   2140c:	2301      	movs	r3, #1
   2140e:	425b      	negs	r3, r3
   21410:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   21412:	4b1d      	ldr	r3, [pc, #116]	; (21488 <wait_for_firmware_start+0x98>)
   21414:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   21416:	4b1d      	ldr	r3, [pc, #116]	; (2148c <wait_for_firmware_start+0x9c>)
   21418:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   2141a:	1dfb      	adds	r3, r7, #7
   2141c:	781b      	ldrb	r3, [r3, #0]
   2141e:	2b02      	cmp	r3, #2
   21420:	d003      	beq.n	2142a <wait_for_firmware_start+0x3a>
   21422:	1dfb      	adds	r3, r7, #7
   21424:	781b      	ldrb	r3, [r3, #0]
   21426:	2b03      	cmp	r3, #3
   21428:	d119      	bne.n	2145e <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   2142a:	4b19      	ldr	r3, [pc, #100]	; (21490 <wait_for_firmware_start+0xa0>)
   2142c:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2142e:	4b19      	ldr	r3, [pc, #100]	; (21494 <wait_for_firmware_start+0xa4>)
   21430:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   21432:	e014      	b.n	2145e <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   21434:	2002      	movs	r0, #2
   21436:	4b18      	ldr	r3, [pc, #96]	; (21498 <wait_for_firmware_start+0xa8>)
   21438:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   2143a:	68fb      	ldr	r3, [r7, #12]
   2143c:	0018      	movs	r0, r3
   2143e:	4b17      	ldr	r3, [pc, #92]	; (2149c <wait_for_firmware_start+0xac>)
   21440:	4798      	blx	r3
   21442:	0003      	movs	r3, r0
   21444:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   21446:	697b      	ldr	r3, [r7, #20]
   21448:	3301      	adds	r3, #1
   2144a:	617b      	str	r3, [r7, #20]
   2144c:	697a      	ldr	r2, [r7, #20]
   2144e:	693b      	ldr	r3, [r7, #16]
   21450:	429a      	cmp	r2, r3
   21452:	d304      	bcc.n	2145e <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   21454:	231f      	movs	r3, #31
   21456:	18fb      	adds	r3, r7, r3
   21458:	22fb      	movs	r2, #251	; 0xfb
   2145a:	701a      	strb	r2, [r3, #0]
			goto ERR;
   2145c:	e00c      	b.n	21478 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2145e:	68ba      	ldr	r2, [r7, #8]
   21460:	69bb      	ldr	r3, [r7, #24]
   21462:	429a      	cmp	r2, r3
   21464:	d1e6      	bne.n	21434 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   21466:	68bb      	ldr	r3, [r7, #8]
   21468:	4a08      	ldr	r2, [pc, #32]	; (2148c <wait_for_firmware_start+0x9c>)
   2146a:	4293      	cmp	r3, r2
   2146c:	d104      	bne.n	21478 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2146e:	4b06      	ldr	r3, [pc, #24]	; (21488 <wait_for_firmware_start+0x98>)
   21470:	2100      	movs	r1, #0
   21472:	0018      	movs	r0, r3
   21474:	4b0a      	ldr	r3, [pc, #40]	; (214a0 <wait_for_firmware_start+0xb0>)
   21476:	4798      	blx	r3
	}
ERR:
	return ret;
   21478:	231f      	movs	r3, #31
   2147a:	18fb      	adds	r3, r7, r3
   2147c:	781b      	ldrb	r3, [r3, #0]
   2147e:	b25b      	sxtb	r3, r3
}
   21480:	0018      	movs	r0, r3
   21482:	46bd      	mov	sp, r7
   21484:	b008      	add	sp, #32
   21486:	bd80      	pop	{r7, pc}
   21488:	0000108c 	.word	0x0000108c
   2148c:	02532636 	.word	0x02532636
   21490:	000207ac 	.word	0x000207ac
   21494:	d75dc1c3 	.word	0xd75dc1c3
   21498:	0001ec91 	.word	0x0001ec91
   2149c:	000215e1 	.word	0x000215e1
   214a0:	00021625 	.word	0x00021625

000214a4 <chip_deinit>:

sint8 chip_deinit(void)
{
   214a4:	b590      	push	{r4, r7, lr}
   214a6:	b083      	sub	sp, #12
   214a8:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   214aa:	2300      	movs	r3, #0
   214ac:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   214ae:	1dfc      	adds	r4, r7, #7
   214b0:	003a      	movs	r2, r7
   214b2:	23a0      	movs	r3, #160	; 0xa0
   214b4:	015b      	lsls	r3, r3, #5
   214b6:	0011      	movs	r1, r2
   214b8:	0018      	movs	r0, r3
   214ba:	4b20      	ldr	r3, [pc, #128]	; (2153c <chip_deinit+0x98>)
   214bc:	4798      	blx	r3
   214be:	0003      	movs	r3, r0
   214c0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   214c2:	1dfb      	adds	r3, r7, #7
   214c4:	781b      	ldrb	r3, [r3, #0]
   214c6:	b25b      	sxtb	r3, r3
   214c8:	2b00      	cmp	r3, #0
   214ca:	d00e      	beq.n	214ea <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   214cc:	4a1c      	ldr	r2, [pc, #112]	; (21540 <chip_deinit+0x9c>)
   214ce:	491d      	ldr	r1, [pc, #116]	; (21544 <chip_deinit+0xa0>)
   214d0:	4b1d      	ldr	r3, [pc, #116]	; (21548 <chip_deinit+0xa4>)
   214d2:	0018      	movs	r0, r3
   214d4:	4b1d      	ldr	r3, [pc, #116]	; (2154c <chip_deinit+0xa8>)
   214d6:	4798      	blx	r3
   214d8:	4b1d      	ldr	r3, [pc, #116]	; (21550 <chip_deinit+0xac>)
   214da:	0018      	movs	r0, r3
   214dc:	4b1b      	ldr	r3, [pc, #108]	; (2154c <chip_deinit+0xa8>)
   214de:	4798      	blx	r3
   214e0:	4b1c      	ldr	r3, [pc, #112]	; (21554 <chip_deinit+0xb0>)
   214e2:	0018      	movs	r0, r3
   214e4:	4b19      	ldr	r3, [pc, #100]	; (2154c <chip_deinit+0xa8>)
   214e6:	4798      	blx	r3
		goto ERR1;
   214e8:	e021      	b.n	2152e <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   214ea:	683b      	ldr	r3, [r7, #0]
   214ec:	4a1a      	ldr	r2, [pc, #104]	; (21558 <chip_deinit+0xb4>)
   214ee:	4013      	ands	r3, r2
   214f0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   214f2:	683a      	ldr	r2, [r7, #0]
   214f4:	1dfc      	adds	r4, r7, #7
   214f6:	23a0      	movs	r3, #160	; 0xa0
   214f8:	015b      	lsls	r3, r3, #5
   214fa:	0011      	movs	r1, r2
   214fc:	0018      	movs	r0, r3
   214fe:	4b17      	ldr	r3, [pc, #92]	; (2155c <chip_deinit+0xb8>)
   21500:	4798      	blx	r3
   21502:	0003      	movs	r3, r0
   21504:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   21506:	1dfb      	adds	r3, r7, #7
   21508:	781b      	ldrb	r3, [r3, #0]
   2150a:	b25b      	sxtb	r3, r3
   2150c:	2b00      	cmp	r3, #0
   2150e:	d00e      	beq.n	2152e <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   21510:	4a13      	ldr	r2, [pc, #76]	; (21560 <chip_deinit+0xbc>)
   21512:	490c      	ldr	r1, [pc, #48]	; (21544 <chip_deinit+0xa0>)
   21514:	4b0c      	ldr	r3, [pc, #48]	; (21548 <chip_deinit+0xa4>)
   21516:	0018      	movs	r0, r3
   21518:	4b0c      	ldr	r3, [pc, #48]	; (2154c <chip_deinit+0xa8>)
   2151a:	4798      	blx	r3
   2151c:	4b0c      	ldr	r3, [pc, #48]	; (21550 <chip_deinit+0xac>)
   2151e:	0018      	movs	r0, r3
   21520:	4b0a      	ldr	r3, [pc, #40]	; (2154c <chip_deinit+0xa8>)
   21522:	4798      	blx	r3
   21524:	4b0b      	ldr	r3, [pc, #44]	; (21554 <chip_deinit+0xb0>)
   21526:	0018      	movs	r0, r3
   21528:	4b08      	ldr	r3, [pc, #32]	; (2154c <chip_deinit+0xa8>)
   2152a:	4798      	blx	r3
		goto ERR1;
   2152c:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2152e:	1dfb      	adds	r3, r7, #7
   21530:	781b      	ldrb	r3, [r3, #0]
   21532:	b25b      	sxtb	r3, r3
}
   21534:	0018      	movs	r0, r3
   21536:	46bd      	mov	sp, r7
   21538:	b003      	add	sp, #12
   2153a:	bd90      	pop	{r4, r7, pc}
   2153c:	00021601 	.word	0x00021601
   21540:	00000201 	.word	0x00000201
   21544:	00037044 	.word	0x00037044
   21548:	00036fac 	.word	0x00036fac
   2154c:	0001c7d9 	.word	0x0001c7d9
   21550:	0003701c 	.word	0x0003701c
   21554:	00036fd8 	.word	0x00036fd8
   21558:	fffffbff 	.word	0xfffffbff
   2155c:	00021625 	.word	0x00021625
   21560:	00000207 	.word	0x00000207

00021564 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   21564:	b590      	push	{r4, r7, lr}
   21566:	b085      	sub	sp, #20
   21568:	af00      	add	r7, sp, #0
   2156a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2156c:	230f      	movs	r3, #15
   2156e:	18fb      	adds	r3, r7, r3
   21570:	2200      	movs	r2, #0
   21572:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   21574:	230f      	movs	r3, #15
   21576:	18fc      	adds	r4, r7, r3
   21578:	687b      	ldr	r3, [r7, #4]
   2157a:	0018      	movs	r0, r3
   2157c:	4b05      	ldr	r3, [pc, #20]	; (21594 <nm_bus_iface_init+0x30>)
   2157e:	4798      	blx	r3
   21580:	0003      	movs	r3, r0
   21582:	7023      	strb	r3, [r4, #0]
	return ret;
   21584:	230f      	movs	r3, #15
   21586:	18fb      	adds	r3, r7, r3
   21588:	781b      	ldrb	r3, [r3, #0]
   2158a:	b25b      	sxtb	r3, r3
}
   2158c:	0018      	movs	r0, r3
   2158e:	46bd      	mov	sp, r7
   21590:	b005      	add	sp, #20
   21592:	bd90      	pop	{r4, r7, pc}
   21594:	0001f34d 	.word	0x0001f34d

00021598 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   21598:	b590      	push	{r4, r7, lr}
   2159a:	b083      	sub	sp, #12
   2159c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2159e:	1dfb      	adds	r3, r7, #7
   215a0:	2200      	movs	r2, #0
   215a2:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   215a4:	1dfc      	adds	r4, r7, #7
   215a6:	4b05      	ldr	r3, [pc, #20]	; (215bc <nm_bus_iface_deinit+0x24>)
   215a8:	4798      	blx	r3
   215aa:	0003      	movs	r3, r0
   215ac:	7023      	strb	r3, [r4, #0]

	return ret;
   215ae:	1dfb      	adds	r3, r7, #7
   215b0:	781b      	ldrb	r3, [r3, #0]
   215b2:	b25b      	sxtb	r3, r3
}
   215b4:	0018      	movs	r0, r3
   215b6:	46bd      	mov	sp, r7
   215b8:	b003      	add	sp, #12
   215ba:	bd90      	pop	{r4, r7, pc}
   215bc:	0001f4c5 	.word	0x0001f4c5

000215c0 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   215c0:	b580      	push	{r7, lr}
   215c2:	b082      	sub	sp, #8
   215c4:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   215c6:	1dfb      	adds	r3, r7, #7
   215c8:	2200      	movs	r2, #0
   215ca:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   215cc:	4b03      	ldr	r3, [pc, #12]	; (215dc <nm_bus_reset+0x1c>)
   215ce:	4798      	blx	r3
   215d0:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   215d2:	0018      	movs	r0, r3
   215d4:	46bd      	mov	sp, r7
   215d6:	b002      	add	sp, #8
   215d8:	bd80      	pop	{r7, pc}
   215da:	46c0      	nop			; (mov r8, r8)
   215dc:	000233ed 	.word	0x000233ed

000215e0 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   215e0:	b580      	push	{r7, lr}
   215e2:	b082      	sub	sp, #8
   215e4:	af00      	add	r7, sp, #0
   215e6:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   215e8:	687b      	ldr	r3, [r7, #4]
   215ea:	0018      	movs	r0, r3
   215ec:	4b03      	ldr	r3, [pc, #12]	; (215fc <nm_read_reg+0x1c>)
   215ee:	4798      	blx	r3
   215f0:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   215f2:	0018      	movs	r0, r3
   215f4:	46bd      	mov	sp, r7
   215f6:	b002      	add	sp, #8
   215f8:	bd80      	pop	{r7, pc}
   215fa:	46c0      	nop			; (mov r8, r8)
   215fc:	00023581 	.word	0x00023581

00021600 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   21600:	b580      	push	{r7, lr}
   21602:	b082      	sub	sp, #8
   21604:	af00      	add	r7, sp, #0
   21606:	6078      	str	r0, [r7, #4]
   21608:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   2160a:	683a      	ldr	r2, [r7, #0]
   2160c:	687b      	ldr	r3, [r7, #4]
   2160e:	0011      	movs	r1, r2
   21610:	0018      	movs	r0, r3
   21612:	4b03      	ldr	r3, [pc, #12]	; (21620 <nm_read_reg_with_ret+0x20>)
   21614:	4798      	blx	r3
   21616:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   21618:	0018      	movs	r0, r3
   2161a:	46bd      	mov	sp, r7
   2161c:	b002      	add	sp, #8
   2161e:	bd80      	pop	{r7, pc}
   21620:	000235a5 	.word	0x000235a5

00021624 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   21624:	b580      	push	{r7, lr}
   21626:	b082      	sub	sp, #8
   21628:	af00      	add	r7, sp, #0
   2162a:	6078      	str	r0, [r7, #4]
   2162c:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   2162e:	683a      	ldr	r2, [r7, #0]
   21630:	687b      	ldr	r3, [r7, #4]
   21632:	0011      	movs	r1, r2
   21634:	0018      	movs	r0, r3
   21636:	4b03      	ldr	r3, [pc, #12]	; (21644 <nm_write_reg+0x20>)
   21638:	4798      	blx	r3
   2163a:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   2163c:	0018      	movs	r0, r3
   2163e:	46bd      	mov	sp, r7
   21640:	b002      	add	sp, #8
   21642:	bd80      	pop	{r7, pc}
   21644:	000235f5 	.word	0x000235f5

00021648 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21648:	b580      	push	{r7, lr}
   2164a:	b084      	sub	sp, #16
   2164c:	af00      	add	r7, sp, #0
   2164e:	60f8      	str	r0, [r7, #12]
   21650:	60b9      	str	r1, [r7, #8]
   21652:	1dbb      	adds	r3, r7, #6
   21654:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   21656:	1dbb      	adds	r3, r7, #6
   21658:	881a      	ldrh	r2, [r3, #0]
   2165a:	68b9      	ldr	r1, [r7, #8]
   2165c:	68fb      	ldr	r3, [r7, #12]
   2165e:	0018      	movs	r0, r3
   21660:	4b03      	ldr	r3, [pc, #12]	; (21670 <p_nm_read_block+0x28>)
   21662:	4798      	blx	r3
   21664:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   21666:	0018      	movs	r0, r3
   21668:	46bd      	mov	sp, r7
   2166a:	b004      	add	sp, #16
   2166c:	bd80      	pop	{r7, pc}
   2166e:	46c0      	nop			; (mov r8, r8)
   21670:	00023645 	.word	0x00023645

00021674 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   21674:	b580      	push	{r7, lr}
   21676:	b086      	sub	sp, #24
   21678:	af00      	add	r7, sp, #0
   2167a:	60f8      	str	r0, [r7, #12]
   2167c:	60b9      	str	r1, [r7, #8]
   2167e:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21680:	4b2d      	ldr	r3, [pc, #180]	; (21738 <nm_read_block+0xc4>)
   21682:	881a      	ldrh	r2, [r3, #0]
   21684:	2310      	movs	r3, #16
   21686:	18fb      	adds	r3, r7, r3
   21688:	3a08      	subs	r2, #8
   2168a:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   2168c:	2300      	movs	r3, #0
   2168e:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21690:	2313      	movs	r3, #19
   21692:	18fb      	adds	r3, r7, r3
   21694:	2200      	movs	r2, #0
   21696:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21698:	2310      	movs	r3, #16
   2169a:	18fb      	adds	r3, r7, r3
   2169c:	881a      	ldrh	r2, [r3, #0]
   2169e:	687b      	ldr	r3, [r7, #4]
   216a0:	429a      	cmp	r2, r3
   216a2:	d313      	bcc.n	216cc <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   216a4:	68ba      	ldr	r2, [r7, #8]
   216a6:	697b      	ldr	r3, [r7, #20]
   216a8:	18d1      	adds	r1, r2, r3
   216aa:	687b      	ldr	r3, [r7, #4]
   216ac:	b29a      	uxth	r2, r3
   216ae:	68fb      	ldr	r3, [r7, #12]
   216b0:	0018      	movs	r0, r3
   216b2:	4b22      	ldr	r3, [pc, #136]	; (2173c <nm_read_block+0xc8>)
   216b4:	4798      	blx	r3
   216b6:	0003      	movs	r3, r0
   216b8:	b2da      	uxtb	r2, r3
   216ba:	2313      	movs	r3, #19
   216bc:	18fb      	adds	r3, r7, r3
   216be:	781b      	ldrb	r3, [r3, #0]
   216c0:	18d3      	adds	r3, r2, r3
   216c2:	b2da      	uxtb	r2, r3
   216c4:	2313      	movs	r3, #19
   216c6:	18fb      	adds	r3, r7, r3
   216c8:	701a      	strb	r2, [r3, #0]
			break;
   216ca:	e02d      	b.n	21728 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   216cc:	68ba      	ldr	r2, [r7, #8]
   216ce:	697b      	ldr	r3, [r7, #20]
   216d0:	18d1      	adds	r1, r2, r3
   216d2:	2310      	movs	r3, #16
   216d4:	18fb      	adds	r3, r7, r3
   216d6:	881a      	ldrh	r2, [r3, #0]
   216d8:	68fb      	ldr	r3, [r7, #12]
   216da:	0018      	movs	r0, r3
   216dc:	4b17      	ldr	r3, [pc, #92]	; (2173c <nm_read_block+0xc8>)
   216de:	4798      	blx	r3
   216e0:	0003      	movs	r3, r0
   216e2:	b2da      	uxtb	r2, r3
   216e4:	2313      	movs	r3, #19
   216e6:	18fb      	adds	r3, r7, r3
   216e8:	781b      	ldrb	r3, [r3, #0]
   216ea:	18d3      	adds	r3, r2, r3
   216ec:	b2da      	uxtb	r2, r3
   216ee:	2313      	movs	r3, #19
   216f0:	18fb      	adds	r3, r7, r3
   216f2:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   216f4:	2313      	movs	r3, #19
   216f6:	18fb      	adds	r3, r7, r3
   216f8:	781b      	ldrb	r3, [r3, #0]
   216fa:	b25b      	sxtb	r3, r3
   216fc:	2b00      	cmp	r3, #0
   216fe:	d112      	bne.n	21726 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   21700:	2310      	movs	r3, #16
   21702:	18fb      	adds	r3, r7, r3
   21704:	881b      	ldrh	r3, [r3, #0]
   21706:	687a      	ldr	r2, [r7, #4]
   21708:	1ad3      	subs	r3, r2, r3
   2170a:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   2170c:	2310      	movs	r3, #16
   2170e:	18fb      	adds	r3, r7, r3
   21710:	881b      	ldrh	r3, [r3, #0]
   21712:	697a      	ldr	r2, [r7, #20]
   21714:	18d3      	adds	r3, r2, r3
   21716:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   21718:	2310      	movs	r3, #16
   2171a:	18fb      	adds	r3, r7, r3
   2171c:	881b      	ldrh	r3, [r3, #0]
   2171e:	68fa      	ldr	r2, [r7, #12]
   21720:	18d3      	adds	r3, r2, r3
   21722:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   21724:	e7b8      	b.n	21698 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   21726:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   21728:	2313      	movs	r3, #19
   2172a:	18fb      	adds	r3, r7, r3
   2172c:	781b      	ldrb	r3, [r3, #0]
   2172e:	b25b      	sxtb	r3, r3
}
   21730:	0018      	movs	r0, r3
   21732:	46bd      	mov	sp, r7
   21734:	b006      	add	sp, #24
   21736:	bd80      	pop	{r7, pc}
   21738:	20000124 	.word	0x20000124
   2173c:	00021649 	.word	0x00021649

00021740 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   21740:	b580      	push	{r7, lr}
   21742:	b084      	sub	sp, #16
   21744:	af00      	add	r7, sp, #0
   21746:	60f8      	str	r0, [r7, #12]
   21748:	60b9      	str	r1, [r7, #8]
   2174a:	1dbb      	adds	r3, r7, #6
   2174c:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   2174e:	1dbb      	adds	r3, r7, #6
   21750:	881a      	ldrh	r2, [r3, #0]
   21752:	68b9      	ldr	r1, [r7, #8]
   21754:	68fb      	ldr	r3, [r7, #12]
   21756:	0018      	movs	r0, r3
   21758:	4b03      	ldr	r3, [pc, #12]	; (21768 <p_nm_write_block+0x28>)
   2175a:	4798      	blx	r3
   2175c:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2175e:	0018      	movs	r0, r3
   21760:	46bd      	mov	sp, r7
   21762:	b004      	add	sp, #16
   21764:	bd80      	pop	{r7, pc}
   21766:	46c0      	nop			; (mov r8, r8)
   21768:	0002369d 	.word	0x0002369d

0002176c <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   2176c:	b580      	push	{r7, lr}
   2176e:	b086      	sub	sp, #24
   21770:	af00      	add	r7, sp, #0
   21772:	60f8      	str	r0, [r7, #12]
   21774:	60b9      	str	r1, [r7, #8]
   21776:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   21778:	4b2d      	ldr	r3, [pc, #180]	; (21830 <nm_write_block+0xc4>)
   2177a:	881a      	ldrh	r2, [r3, #0]
   2177c:	2310      	movs	r3, #16
   2177e:	18fb      	adds	r3, r7, r3
   21780:	3a08      	subs	r2, #8
   21782:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   21784:	2300      	movs	r3, #0
   21786:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   21788:	2313      	movs	r3, #19
   2178a:	18fb      	adds	r3, r7, r3
   2178c:	2200      	movs	r2, #0
   2178e:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   21790:	2310      	movs	r3, #16
   21792:	18fb      	adds	r3, r7, r3
   21794:	881a      	ldrh	r2, [r3, #0]
   21796:	687b      	ldr	r3, [r7, #4]
   21798:	429a      	cmp	r2, r3
   2179a:	d313      	bcc.n	217c4 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   2179c:	68ba      	ldr	r2, [r7, #8]
   2179e:	697b      	ldr	r3, [r7, #20]
   217a0:	18d1      	adds	r1, r2, r3
   217a2:	687b      	ldr	r3, [r7, #4]
   217a4:	b29a      	uxth	r2, r3
   217a6:	68fb      	ldr	r3, [r7, #12]
   217a8:	0018      	movs	r0, r3
   217aa:	4b22      	ldr	r3, [pc, #136]	; (21834 <nm_write_block+0xc8>)
   217ac:	4798      	blx	r3
   217ae:	0003      	movs	r3, r0
   217b0:	b2da      	uxtb	r2, r3
   217b2:	2313      	movs	r3, #19
   217b4:	18fb      	adds	r3, r7, r3
   217b6:	781b      	ldrb	r3, [r3, #0]
   217b8:	18d3      	adds	r3, r2, r3
   217ba:	b2da      	uxtb	r2, r3
   217bc:	2313      	movs	r3, #19
   217be:	18fb      	adds	r3, r7, r3
   217c0:	701a      	strb	r2, [r3, #0]
			break;
   217c2:	e02d      	b.n	21820 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   217c4:	68ba      	ldr	r2, [r7, #8]
   217c6:	697b      	ldr	r3, [r7, #20]
   217c8:	18d1      	adds	r1, r2, r3
   217ca:	2310      	movs	r3, #16
   217cc:	18fb      	adds	r3, r7, r3
   217ce:	881a      	ldrh	r2, [r3, #0]
   217d0:	68fb      	ldr	r3, [r7, #12]
   217d2:	0018      	movs	r0, r3
   217d4:	4b17      	ldr	r3, [pc, #92]	; (21834 <nm_write_block+0xc8>)
   217d6:	4798      	blx	r3
   217d8:	0003      	movs	r3, r0
   217da:	b2da      	uxtb	r2, r3
   217dc:	2313      	movs	r3, #19
   217de:	18fb      	adds	r3, r7, r3
   217e0:	781b      	ldrb	r3, [r3, #0]
   217e2:	18d3      	adds	r3, r2, r3
   217e4:	b2da      	uxtb	r2, r3
   217e6:	2313      	movs	r3, #19
   217e8:	18fb      	adds	r3, r7, r3
   217ea:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   217ec:	2313      	movs	r3, #19
   217ee:	18fb      	adds	r3, r7, r3
   217f0:	781b      	ldrb	r3, [r3, #0]
   217f2:	b25b      	sxtb	r3, r3
   217f4:	2b00      	cmp	r3, #0
   217f6:	d112      	bne.n	2181e <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   217f8:	2310      	movs	r3, #16
   217fa:	18fb      	adds	r3, r7, r3
   217fc:	881b      	ldrh	r3, [r3, #0]
   217fe:	687a      	ldr	r2, [r7, #4]
   21800:	1ad3      	subs	r3, r2, r3
   21802:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   21804:	2310      	movs	r3, #16
   21806:	18fb      	adds	r3, r7, r3
   21808:	881b      	ldrh	r3, [r3, #0]
   2180a:	697a      	ldr	r2, [r7, #20]
   2180c:	18d3      	adds	r3, r2, r3
   2180e:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   21810:	2310      	movs	r3, #16
   21812:	18fb      	adds	r3, r7, r3
   21814:	881b      	ldrh	r3, [r3, #0]
   21816:	68fa      	ldr	r2, [r7, #12]
   21818:	18d3      	adds	r3, r2, r3
   2181a:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   2181c:	e7b8      	b.n	21790 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   2181e:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   21820:	2313      	movs	r3, #19
   21822:	18fb      	adds	r3, r7, r3
   21824:	781b      	ldrb	r3, [r3, #0]
   21826:	b25b      	sxtb	r3, r3
}
   21828:	0018      	movs	r0, r3
   2182a:	46bd      	mov	sp, r7
   2182c:	b006      	add	sp, #24
   2182e:	bd80      	pop	{r7, pc}
   21830:	20000124 	.word	0x20000124
   21834:	00021741 	.word	0x00021741

00021838 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   21838:	b590      	push	{r4, r7, lr}
   2183a:	b089      	sub	sp, #36	; 0x24
   2183c:	af00      	add	r7, sp, #0
   2183e:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   21840:	2300      	movs	r3, #0
   21842:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   21844:	231f      	movs	r3, #31
   21846:	18fb      	adds	r3, r7, r3
   21848:	2200      	movs	r2, #0
   2184a:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   2184c:	230c      	movs	r3, #12
   2184e:	18fb      	adds	r3, r7, r3
   21850:	0018      	movs	r0, r3
   21852:	2308      	movs	r3, #8
   21854:	001a      	movs	r2, r3
   21856:	2100      	movs	r1, #0
   21858:	4b64      	ldr	r3, [pc, #400]	; (219ec <nm_get_firmware_full_info+0x1b4>)
   2185a:	4798      	blx	r3
	if (pstrRev != NULL)
   2185c:	687b      	ldr	r3, [r7, #4]
   2185e:	2b00      	cmp	r3, #0
   21860:	d100      	bne.n	21864 <nm_get_firmware_full_info+0x2c>
   21862:	e0ba      	b.n	219da <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   21864:	687b      	ldr	r3, [r7, #4]
   21866:	2228      	movs	r2, #40	; 0x28
   21868:	2100      	movs	r1, #0
   2186a:	0018      	movs	r0, r3
   2186c:	4b60      	ldr	r3, [pc, #384]	; (219f0 <nm_get_firmware_full_info+0x1b8>)
   2186e:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   21870:	231f      	movs	r3, #31
   21872:	18fc      	adds	r4, r7, r3
   21874:	2314      	movs	r3, #20
   21876:	18fb      	adds	r3, r7, r3
   21878:	4a5e      	ldr	r2, [pc, #376]	; (219f4 <nm_get_firmware_full_info+0x1bc>)
   2187a:	0019      	movs	r1, r3
   2187c:	0010      	movs	r0, r2
   2187e:	4b5e      	ldr	r3, [pc, #376]	; (219f8 <nm_get_firmware_full_info+0x1c0>)
   21880:	4798      	blx	r3
   21882:	0003      	movs	r3, r0
   21884:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   21886:	231f      	movs	r3, #31
   21888:	18fb      	adds	r3, r7, r3
   2188a:	781b      	ldrb	r3, [r3, #0]
   2188c:	b25b      	sxtb	r3, r3
   2188e:	2b00      	cmp	r3, #0
   21890:	d000      	beq.n	21894 <nm_get_firmware_full_info+0x5c>
   21892:	e0a2      	b.n	219da <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   21894:	697b      	ldr	r3, [r7, #20]
   21896:	2b00      	cmp	r3, #0
   21898:	d100      	bne.n	2189c <nm_get_firmware_full_info+0x64>
   2189a:	e09a      	b.n	219d2 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   2189c:	697b      	ldr	r3, [r7, #20]
   2189e:	22c0      	movs	r2, #192	; 0xc0
   218a0:	0292      	lsls	r2, r2, #10
   218a2:	4313      	orrs	r3, r2
   218a4:	221f      	movs	r2, #31
   218a6:	18bc      	adds	r4, r7, r2
   218a8:	220c      	movs	r2, #12
   218aa:	18b9      	adds	r1, r7, r2
   218ac:	2208      	movs	r2, #8
   218ae:	0018      	movs	r0, r3
   218b0:	4b52      	ldr	r3, [pc, #328]	; (219fc <nm_get_firmware_full_info+0x1c4>)
   218b2:	4798      	blx	r3
   218b4:	0003      	movs	r3, r0
   218b6:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   218b8:	231f      	movs	r3, #31
   218ba:	18fb      	adds	r3, r7, r3
   218bc:	781b      	ldrb	r3, [r3, #0]
   218be:	b25b      	sxtb	r3, r3
   218c0:	2b00      	cmp	r3, #0
   218c2:	d000      	beq.n	218c6 <nm_get_firmware_full_info+0x8e>
   218c4:	e089      	b.n	219da <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   218c6:	230c      	movs	r3, #12
   218c8:	18fb      	adds	r3, r7, r3
   218ca:	685b      	ldr	r3, [r3, #4]
   218cc:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   218ce:	697b      	ldr	r3, [r7, #20]
   218d0:	041b      	lsls	r3, r3, #16
   218d2:	0c1b      	lsrs	r3, r3, #16
   218d4:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   218d6:	697b      	ldr	r3, [r7, #20]
   218d8:	2b00      	cmp	r3, #0
   218da:	d100      	bne.n	218de <nm_get_firmware_full_info+0xa6>
   218dc:	e074      	b.n	219c8 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   218de:	697b      	ldr	r3, [r7, #20]
   218e0:	22c0      	movs	r2, #192	; 0xc0
   218e2:	0292      	lsls	r2, r2, #10
   218e4:	4313      	orrs	r3, r2
   218e6:	221f      	movs	r2, #31
   218e8:	18bc      	adds	r4, r7, r2
   218ea:	6879      	ldr	r1, [r7, #4]
   218ec:	2228      	movs	r2, #40	; 0x28
   218ee:	0018      	movs	r0, r3
   218f0:	4b42      	ldr	r3, [pc, #264]	; (219fc <nm_get_firmware_full_info+0x1c4>)
   218f2:	4798      	blx	r3
   218f4:	0003      	movs	r3, r0
   218f6:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   218f8:	231f      	movs	r3, #31
   218fa:	18fb      	adds	r3, r7, r3
   218fc:	781b      	ldrb	r3, [r3, #0]
   218fe:	b25b      	sxtb	r3, r3
   21900:	2b00      	cmp	r3, #0
   21902:	d16a      	bne.n	219da <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   21904:	687b      	ldr	r3, [r7, #4]
   21906:	791b      	ldrb	r3, [r3, #4]
   21908:	021b      	lsls	r3, r3, #8
   2190a:	b21a      	sxth	r2, r3
   2190c:	687b      	ldr	r3, [r7, #4]
   2190e:	795b      	ldrb	r3, [r3, #5]
   21910:	011b      	lsls	r3, r3, #4
   21912:	b21b      	sxth	r3, r3
   21914:	21ff      	movs	r1, #255	; 0xff
   21916:	400b      	ands	r3, r1
   21918:	b21b      	sxth	r3, r3
   2191a:	4313      	orrs	r3, r2
   2191c:	b21a      	sxth	r2, r3
   2191e:	687b      	ldr	r3, [r7, #4]
   21920:	799b      	ldrb	r3, [r3, #6]
   21922:	b21b      	sxth	r3, r3
   21924:	210f      	movs	r1, #15
   21926:	400b      	ands	r3, r1
   21928:	b21b      	sxth	r3, r3
   2192a:	4313      	orrs	r3, r2
   2192c:	b21a      	sxth	r2, r3
   2192e:	231c      	movs	r3, #28
   21930:	18fb      	adds	r3, r7, r3
   21932:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   21934:	231a      	movs	r3, #26
   21936:	18fb      	adds	r3, r7, r3
   21938:	4a31      	ldr	r2, [pc, #196]	; (21a00 <nm_get_firmware_full_info+0x1c8>)
   2193a:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   2193c:	687b      	ldr	r3, [r7, #4]
   2193e:	79db      	ldrb	r3, [r3, #7]
   21940:	021b      	lsls	r3, r3, #8
   21942:	b21a      	sxth	r2, r3
   21944:	687b      	ldr	r3, [r7, #4]
   21946:	7a1b      	ldrb	r3, [r3, #8]
   21948:	011b      	lsls	r3, r3, #4
   2194a:	b21b      	sxth	r3, r3
   2194c:	21ff      	movs	r1, #255	; 0xff
   2194e:	400b      	ands	r3, r1
   21950:	b21b      	sxth	r3, r3
   21952:	4313      	orrs	r3, r2
   21954:	b21a      	sxth	r2, r3
   21956:	687b      	ldr	r3, [r7, #4]
   21958:	7a5b      	ldrb	r3, [r3, #9]
   2195a:	b21b      	sxth	r3, r3
   2195c:	210f      	movs	r1, #15
   2195e:	400b      	ands	r3, r1
   21960:	b21b      	sxth	r3, r3
   21962:	4313      	orrs	r3, r2
   21964:	b21a      	sxth	r2, r3
   21966:	2318      	movs	r3, #24
   21968:	18fb      	adds	r3, r7, r3
   2196a:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   2196c:	231c      	movs	r3, #28
   2196e:	18fb      	adds	r3, r7, r3
   21970:	881b      	ldrh	r3, [r3, #0]
   21972:	2b00      	cmp	r3, #0
   21974:	d009      	beq.n	2198a <nm_get_firmware_full_info+0x152>
   21976:	2318      	movs	r3, #24
   21978:	18fb      	adds	r3, r7, r3
   2197a:	881b      	ldrh	r3, [r3, #0]
   2197c:	2b00      	cmp	r3, #0
   2197e:	d004      	beq.n	2198a <nm_get_firmware_full_info+0x152>
   21980:	2318      	movs	r3, #24
   21982:	18fb      	adds	r3, r7, r3
   21984:	881b      	ldrh	r3, [r3, #0]
   21986:	2b00      	cmp	r3, #0
   21988:	d104      	bne.n	21994 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   2198a:	231f      	movs	r3, #31
   2198c:	18fb      	adds	r3, r7, r3
   2198e:	22f4      	movs	r2, #244	; 0xf4
   21990:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   21992:	e022      	b.n	219da <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   21994:	231a      	movs	r3, #26
   21996:	18fa      	adds	r2, r7, r3
   21998:	2318      	movs	r3, #24
   2199a:	18fb      	adds	r3, r7, r3
   2199c:	8812      	ldrh	r2, [r2, #0]
   2199e:	881b      	ldrh	r3, [r3, #0]
   219a0:	429a      	cmp	r2, r3
   219a2:	d204      	bcs.n	219ae <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   219a4:	231f      	movs	r3, #31
   219a6:	18fb      	adds	r3, r7, r3
   219a8:	22f3      	movs	r2, #243	; 0xf3
   219aa:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   219ac:	e015      	b.n	219da <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   219ae:	231a      	movs	r3, #26
   219b0:	18fa      	adds	r2, r7, r3
   219b2:	231c      	movs	r3, #28
   219b4:	18fb      	adds	r3, r7, r3
   219b6:	8812      	ldrh	r2, [r2, #0]
   219b8:	881b      	ldrh	r3, [r3, #0]
   219ba:	429a      	cmp	r2, r3
   219bc:	d90d      	bls.n	219da <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   219be:	231f      	movs	r3, #31
   219c0:	18fb      	adds	r3, r7, r3
   219c2:	22f3      	movs	r2, #243	; 0xf3
   219c4:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   219c6:	e008      	b.n	219da <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   219c8:	231f      	movs	r3, #31
   219ca:	18fb      	adds	r3, r7, r3
   219cc:	22f4      	movs	r2, #244	; 0xf4
   219ce:	701a      	strb	r2, [r3, #0]
   219d0:	e003      	b.n	219da <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   219d2:	231f      	movs	r3, #31
   219d4:	18fb      	adds	r3, r7, r3
   219d6:	22f4      	movs	r2, #244	; 0xf4
   219d8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   219da:	231f      	movs	r3, #31
   219dc:	18fb      	adds	r3, r7, r3
   219de:	781b      	ldrb	r3, [r3, #0]
   219e0:	b25b      	sxtb	r3, r3
}
   219e2:	0018      	movs	r0, r3
   219e4:	46bd      	mov	sp, r7
   219e6:	b009      	add	sp, #36	; 0x24
   219e8:	bd90      	pop	{r4, r7, pc}
   219ea:	46c0      	nop			; (mov r8, r8)
   219ec:	0003319f 	.word	0x0003319f
   219f0:	0001f571 	.word	0x0001f571
   219f4:	000c0008 	.word	0x000c0008
   219f8:	00021601 	.word	0x00021601
   219fc:	00021675 	.word	0x00021675
   21a00:	00001354 	.word	0x00001354

00021a04 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   21a04:	b590      	push	{r4, r7, lr}
   21a06:	b085      	sub	sp, #20
   21a08:	af00      	add	r7, sp, #0
   21a0a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   21a0c:	230f      	movs	r3, #15
   21a0e:	18fb      	adds	r3, r7, r3
   21a10:	2200      	movs	r2, #0
   21a12:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   21a14:	687b      	ldr	r3, [r7, #4]
   21a16:	2b00      	cmp	r3, #0
   21a18:	d013      	beq.n	21a42 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   21a1a:	230e      	movs	r3, #14
   21a1c:	18fb      	adds	r3, r7, r3
   21a1e:	687a      	ldr	r2, [r7, #4]
   21a20:	7812      	ldrb	r2, [r2, #0]
   21a22:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   21a24:	230e      	movs	r3, #14
   21a26:	18fb      	adds	r3, r7, r3
   21a28:	781b      	ldrb	r3, [r3, #0]
   21a2a:	2b00      	cmp	r3, #0
   21a2c:	d004      	beq.n	21a38 <nm_drv_init+0x34>
   21a2e:	230e      	movs	r3, #14
   21a30:	18fb      	adds	r3, r7, r3
   21a32:	781b      	ldrb	r3, [r3, #0]
   21a34:	2b04      	cmp	r3, #4
   21a36:	d908      	bls.n	21a4a <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   21a38:	230e      	movs	r3, #14
   21a3a:	18fb      	adds	r3, r7, r3
   21a3c:	2201      	movs	r2, #1
   21a3e:	701a      	strb	r2, [r3, #0]
   21a40:	e003      	b.n	21a4a <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   21a42:	230e      	movs	r3, #14
   21a44:	18fb      	adds	r3, r7, r3
   21a46:	2201      	movs	r2, #1
   21a48:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   21a4a:	230f      	movs	r3, #15
   21a4c:	18fc      	adds	r4, r7, r3
   21a4e:	2000      	movs	r0, #0
   21a50:	4b41      	ldr	r3, [pc, #260]	; (21b58 <nm_drv_init+0x154>)
   21a52:	4798      	blx	r3
   21a54:	0003      	movs	r3, r0
   21a56:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21a58:	230f      	movs	r3, #15
   21a5a:	18fb      	adds	r3, r7, r3
   21a5c:	781b      	ldrb	r3, [r3, #0]
   21a5e:	b25b      	sxtb	r3, r3
   21a60:	2b00      	cmp	r3, #0
   21a62:	d00f      	beq.n	21a84 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   21a64:	2390      	movs	r3, #144	; 0x90
   21a66:	005a      	lsls	r2, r3, #1
   21a68:	493c      	ldr	r1, [pc, #240]	; (21b5c <nm_drv_init+0x158>)
   21a6a:	4b3d      	ldr	r3, [pc, #244]	; (21b60 <nm_drv_init+0x15c>)
   21a6c:	0018      	movs	r0, r3
   21a6e:	4b3d      	ldr	r3, [pc, #244]	; (21b64 <nm_drv_init+0x160>)
   21a70:	4798      	blx	r3
   21a72:	4b3d      	ldr	r3, [pc, #244]	; (21b68 <nm_drv_init+0x164>)
   21a74:	0018      	movs	r0, r3
   21a76:	4b3b      	ldr	r3, [pc, #236]	; (21b64 <nm_drv_init+0x160>)
   21a78:	4798      	blx	r3
   21a7a:	4b3c      	ldr	r3, [pc, #240]	; (21b6c <nm_drv_init+0x168>)
   21a7c:	0018      	movs	r0, r3
   21a7e:	4b39      	ldr	r3, [pc, #228]	; (21b64 <nm_drv_init+0x160>)
   21a80:	4798      	blx	r3
		goto ERR1;
   21a82:	e061      	b.n	21b48 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   21a84:	4b3a      	ldr	r3, [pc, #232]	; (21b70 <nm_drv_init+0x16c>)
   21a86:	0018      	movs	r0, r3
   21a88:	4b36      	ldr	r3, [pc, #216]	; (21b64 <nm_drv_init+0x160>)
   21a8a:	4798      	blx	r3
   21a8c:	4b39      	ldr	r3, [pc, #228]	; (21b74 <nm_drv_init+0x170>)
   21a8e:	4798      	blx	r3
   21a90:	0002      	movs	r2, r0
   21a92:	4b39      	ldr	r3, [pc, #228]	; (21b78 <nm_drv_init+0x174>)
   21a94:	0011      	movs	r1, r2
   21a96:	0018      	movs	r0, r3
   21a98:	4b32      	ldr	r3, [pc, #200]	; (21b64 <nm_drv_init+0x160>)
   21a9a:	4798      	blx	r3
   21a9c:	4b33      	ldr	r3, [pc, #204]	; (21b6c <nm_drv_init+0x168>)
   21a9e:	0018      	movs	r0, r3
   21aa0:	4b30      	ldr	r3, [pc, #192]	; (21b64 <nm_drv_init+0x160>)
   21aa2:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   21aa4:	4b35      	ldr	r3, [pc, #212]	; (21b7c <nm_drv_init+0x178>)
   21aa6:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   21aa8:	230f      	movs	r3, #15
   21aaa:	18fc      	adds	r4, r7, r3
   21aac:	230e      	movs	r3, #14
   21aae:	18fb      	adds	r3, r7, r3
   21ab0:	781b      	ldrb	r3, [r3, #0]
   21ab2:	0018      	movs	r0, r3
   21ab4:	4b32      	ldr	r3, [pc, #200]	; (21b80 <nm_drv_init+0x17c>)
   21ab6:	4798      	blx	r3
   21ab8:	0003      	movs	r3, r0
   21aba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21abc:	230f      	movs	r3, #15
   21abe:	18fb      	adds	r3, r7, r3
   21ac0:	781b      	ldrb	r3, [r3, #0]
   21ac2:	b25b      	sxtb	r3, r3
   21ac4:	2b00      	cmp	r3, #0
   21ac6:	d13a      	bne.n	21b3e <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   21ac8:	230f      	movs	r3, #15
   21aca:	18fc      	adds	r4, r7, r3
   21acc:	230e      	movs	r3, #14
   21ace:	18fb      	adds	r3, r7, r3
   21ad0:	781b      	ldrb	r3, [r3, #0]
   21ad2:	0018      	movs	r0, r3
   21ad4:	4b2b      	ldr	r3, [pc, #172]	; (21b84 <nm_drv_init+0x180>)
   21ad6:	4798      	blx	r3
   21ad8:	0003      	movs	r3, r0
   21ada:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21adc:	230f      	movs	r3, #15
   21ade:	18fb      	adds	r3, r7, r3
   21ae0:	781b      	ldrb	r3, [r3, #0]
   21ae2:	b25b      	sxtb	r3, r3
   21ae4:	2b00      	cmp	r3, #0
   21ae6:	d12c      	bne.n	21b42 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   21ae8:	230e      	movs	r3, #14
   21aea:	18fb      	adds	r3, r7, r3
   21aec:	781b      	ldrb	r3, [r3, #0]
   21aee:	2b02      	cmp	r3, #2
   21af0:	d02a      	beq.n	21b48 <nm_drv_init+0x144>
   21af2:	230e      	movs	r3, #14
   21af4:	18fb      	adds	r3, r7, r3
   21af6:	781b      	ldrb	r3, [r3, #0]
   21af8:	2b03      	cmp	r3, #3
   21afa:	d025      	beq.n	21b48 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   21afc:	230f      	movs	r3, #15
   21afe:	18fc      	adds	r4, r7, r3
   21b00:	4b21      	ldr	r3, [pc, #132]	; (21b88 <nm_drv_init+0x184>)
   21b02:	4798      	blx	r3
   21b04:	0003      	movs	r3, r0
   21b06:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21b08:	230f      	movs	r3, #15
   21b0a:	18fb      	adds	r3, r7, r3
   21b0c:	781b      	ldrb	r3, [r3, #0]
   21b0e:	b25b      	sxtb	r3, r3
   21b10:	2b00      	cmp	r3, #0
   21b12:	d00f      	beq.n	21b34 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   21b14:	23a7      	movs	r3, #167	; 0xa7
   21b16:	005a      	lsls	r2, r3, #1
   21b18:	4910      	ldr	r1, [pc, #64]	; (21b5c <nm_drv_init+0x158>)
   21b1a:	4b11      	ldr	r3, [pc, #68]	; (21b60 <nm_drv_init+0x15c>)
   21b1c:	0018      	movs	r0, r3
   21b1e:	4b11      	ldr	r3, [pc, #68]	; (21b64 <nm_drv_init+0x160>)
   21b20:	4798      	blx	r3
   21b22:	4b1a      	ldr	r3, [pc, #104]	; (21b8c <nm_drv_init+0x188>)
   21b24:	0018      	movs	r0, r3
   21b26:	4b0f      	ldr	r3, [pc, #60]	; (21b64 <nm_drv_init+0x160>)
   21b28:	4798      	blx	r3
   21b2a:	4b10      	ldr	r3, [pc, #64]	; (21b6c <nm_drv_init+0x168>)
   21b2c:	0018      	movs	r0, r3
   21b2e:	4b0d      	ldr	r3, [pc, #52]	; (21b64 <nm_drv_init+0x160>)
   21b30:	4798      	blx	r3
		goto ERR2;
   21b32:	e007      	b.n	21b44 <nm_drv_init+0x140>
	}
	return ret;
   21b34:	230f      	movs	r3, #15
   21b36:	18fb      	adds	r3, r7, r3
   21b38:	781b      	ldrb	r3, [r3, #0]
   21b3a:	b25b      	sxtb	r3, r3
   21b3c:	e008      	b.n	21b50 <nm_drv_init+0x14c>
		goto ERR2;
   21b3e:	46c0      	nop			; (mov r8, r8)
   21b40:	e000      	b.n	21b44 <nm_drv_init+0x140>
		goto ERR2;
   21b42:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   21b44:	4b12      	ldr	r3, [pc, #72]	; (21b90 <nm_drv_init+0x18c>)
   21b46:	4798      	blx	r3
ERR1:
	return ret;
   21b48:	230f      	movs	r3, #15
   21b4a:	18fb      	adds	r3, r7, r3
   21b4c:	781b      	ldrb	r3, [r3, #0]
   21b4e:	b25b      	sxtb	r3, r3
}
   21b50:	0018      	movs	r0, r3
   21b52:	46bd      	mov	sp, r7
   21b54:	b005      	add	sp, #20
   21b56:	bd90      	pop	{r4, r7, pc}
   21b58:	00021565 	.word	0x00021565
   21b5c:	00037120 	.word	0x00037120
   21b60:	00037050 	.word	0x00037050
   21b64:	0001c7d9 	.word	0x0001c7d9
   21b68:	00037064 	.word	0x00037064
   21b6c:	00037080 	.word	0x00037080
   21b70:	00037084 	.word	0x00037084
   21b74:	00020f01 	.word	0x00020f01
   21b78:	00037090 	.word	0x00037090
   21b7c:	0002341d 	.word	0x0002341d
   21b80:	00021259 	.word	0x00021259
   21b84:	000213f1 	.word	0x000213f1
   21b88:	00020e4d 	.word	0x00020e4d
   21b8c:	000370a0 	.word	0x000370a0
   21b90:	00021599 	.word	0x00021599

00021b94 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   21b94:	b590      	push	{r4, r7, lr}
   21b96:	b085      	sub	sp, #20
   21b98:	af00      	add	r7, sp, #0
   21b9a:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   21b9c:	230f      	movs	r3, #15
   21b9e:	18fc      	adds	r4, r7, r3
   21ba0:	4b2e      	ldr	r3, [pc, #184]	; (21c5c <nm_drv_deinit+0xc8>)
   21ba2:	4798      	blx	r3
   21ba4:	0003      	movs	r3, r0
   21ba6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21ba8:	230f      	movs	r3, #15
   21baa:	18fb      	adds	r3, r7, r3
   21bac:	781b      	ldrb	r3, [r3, #0]
   21bae:	b25b      	sxtb	r3, r3
   21bb0:	2b00      	cmp	r3, #0
   21bb2:	d010      	beq.n	21bd6 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   21bb4:	2366      	movs	r3, #102	; 0x66
   21bb6:	33ff      	adds	r3, #255	; 0xff
   21bb8:	001a      	movs	r2, r3
   21bba:	4929      	ldr	r1, [pc, #164]	; (21c60 <nm_drv_deinit+0xcc>)
   21bbc:	4b29      	ldr	r3, [pc, #164]	; (21c64 <nm_drv_deinit+0xd0>)
   21bbe:	0018      	movs	r0, r3
   21bc0:	4b29      	ldr	r3, [pc, #164]	; (21c68 <nm_drv_deinit+0xd4>)
   21bc2:	4798      	blx	r3
   21bc4:	4b29      	ldr	r3, [pc, #164]	; (21c6c <nm_drv_deinit+0xd8>)
   21bc6:	0018      	movs	r0, r3
   21bc8:	4b27      	ldr	r3, [pc, #156]	; (21c68 <nm_drv_deinit+0xd4>)
   21bca:	4798      	blx	r3
   21bcc:	4b28      	ldr	r3, [pc, #160]	; (21c70 <nm_drv_deinit+0xdc>)
   21bce:	0018      	movs	r0, r3
   21bd0:	4b25      	ldr	r3, [pc, #148]	; (21c68 <nm_drv_deinit+0xd4>)
   21bd2:	4798      	blx	r3
		goto ERR1;
   21bd4:	e03a      	b.n	21c4c <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   21bd6:	230f      	movs	r3, #15
   21bd8:	18fc      	adds	r4, r7, r3
   21bda:	2000      	movs	r0, #0
   21bdc:	4b25      	ldr	r3, [pc, #148]	; (21c74 <nm_drv_deinit+0xe0>)
   21bde:	4798      	blx	r3
   21be0:	0003      	movs	r3, r0
   21be2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21be4:	230f      	movs	r3, #15
   21be6:	18fb      	adds	r3, r7, r3
   21be8:	781b      	ldrb	r3, [r3, #0]
   21bea:	b25b      	sxtb	r3, r3
   21bec:	2b00      	cmp	r3, #0
   21bee:	d00f      	beq.n	21c10 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   21bf0:	23b6      	movs	r3, #182	; 0xb6
   21bf2:	005a      	lsls	r2, r3, #1
   21bf4:	491a      	ldr	r1, [pc, #104]	; (21c60 <nm_drv_deinit+0xcc>)
   21bf6:	4b1b      	ldr	r3, [pc, #108]	; (21c64 <nm_drv_deinit+0xd0>)
   21bf8:	0018      	movs	r0, r3
   21bfa:	4b1b      	ldr	r3, [pc, #108]	; (21c68 <nm_drv_deinit+0xd4>)
   21bfc:	4798      	blx	r3
   21bfe:	4b1e      	ldr	r3, [pc, #120]	; (21c78 <nm_drv_deinit+0xe4>)
   21c00:	0018      	movs	r0, r3
   21c02:	4b19      	ldr	r3, [pc, #100]	; (21c68 <nm_drv_deinit+0xd4>)
   21c04:	4798      	blx	r3
   21c06:	4b1a      	ldr	r3, [pc, #104]	; (21c70 <nm_drv_deinit+0xdc>)
   21c08:	0018      	movs	r0, r3
   21c0a:	4b17      	ldr	r3, [pc, #92]	; (21c68 <nm_drv_deinit+0xd4>)
   21c0c:	4798      	blx	r3
		goto ERR1;
   21c0e:	e01d      	b.n	21c4c <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   21c10:	230f      	movs	r3, #15
   21c12:	18fc      	adds	r4, r7, r3
   21c14:	4b19      	ldr	r3, [pc, #100]	; (21c7c <nm_drv_deinit+0xe8>)
   21c16:	4798      	blx	r3
   21c18:	0003      	movs	r3, r0
   21c1a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   21c1c:	230f      	movs	r3, #15
   21c1e:	18fb      	adds	r3, r7, r3
   21c20:	781b      	ldrb	r3, [r3, #0]
   21c22:	b25b      	sxtb	r3, r3
   21c24:	2b00      	cmp	r3, #0
   21c26:	d00f      	beq.n	21c48 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   21c28:	23b9      	movs	r3, #185	; 0xb9
   21c2a:	005a      	lsls	r2, r3, #1
   21c2c:	490c      	ldr	r1, [pc, #48]	; (21c60 <nm_drv_deinit+0xcc>)
   21c2e:	4b0d      	ldr	r3, [pc, #52]	; (21c64 <nm_drv_deinit+0xd0>)
   21c30:	0018      	movs	r0, r3
   21c32:	4b0d      	ldr	r3, [pc, #52]	; (21c68 <nm_drv_deinit+0xd4>)
   21c34:	4798      	blx	r3
   21c36:	4b12      	ldr	r3, [pc, #72]	; (21c80 <nm_drv_deinit+0xec>)
   21c38:	0018      	movs	r0, r3
   21c3a:	4b0b      	ldr	r3, [pc, #44]	; (21c68 <nm_drv_deinit+0xd4>)
   21c3c:	4798      	blx	r3
   21c3e:	4b0c      	ldr	r3, [pc, #48]	; (21c70 <nm_drv_deinit+0xdc>)
   21c40:	0018      	movs	r0, r3
   21c42:	4b09      	ldr	r3, [pc, #36]	; (21c68 <nm_drv_deinit+0xd4>)
   21c44:	4798      	blx	r3
		goto ERR1;
   21c46:	e001      	b.n	21c4c <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   21c48:	4b0e      	ldr	r3, [pc, #56]	; (21c84 <nm_drv_deinit+0xf0>)
   21c4a:	4798      	blx	r3
#endif

ERR1:
	return ret;
   21c4c:	230f      	movs	r3, #15
   21c4e:	18fb      	adds	r3, r7, r3
   21c50:	781b      	ldrb	r3, [r3, #0]
   21c52:	b25b      	sxtb	r3, r3
}
   21c54:	0018      	movs	r0, r3
   21c56:	46bd      	mov	sp, r7
   21c58:	b005      	add	sp, #20
   21c5a:	bd90      	pop	{r4, r7, pc}
   21c5c:	000214a5 	.word	0x000214a5
   21c60:	0003712c 	.word	0x0003712c
   21c64:	00037050 	.word	0x00037050
   21c68:	0001c7d9 	.word	0x0001c7d9
   21c6c:	000370c0 	.word	0x000370c0
   21c70:	00037080 	.word	0x00037080
   21c74:	000248c5 	.word	0x000248c5
   21c78:	000370e0 	.word	0x000370e0
   21c7c:	00021599 	.word	0x00021599
   21c80:	00037104 	.word	0x00037104
   21c84:	00023569 	.word	0x00023569

00021c88 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   21c88:	b580      	push	{r7, lr}
   21c8a:	b086      	sub	sp, #24
   21c8c:	af00      	add	r7, sp, #0
   21c8e:	6078      	str	r0, [r7, #4]
   21c90:	000a      	movs	r2, r1
   21c92:	1cbb      	adds	r3, r7, #2
   21c94:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   21c96:	230c      	movs	r3, #12
   21c98:	18fb      	adds	r3, r7, r3
   21c9a:	2200      	movs	r2, #0
   21c9c:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   21c9e:	230c      	movs	r3, #12
   21ca0:	18fb      	adds	r3, r7, r3
   21ca2:	687a      	ldr	r2, [r7, #4]
   21ca4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   21ca6:	230c      	movs	r3, #12
   21ca8:	18fb      	adds	r3, r7, r3
   21caa:	1cba      	adds	r2, r7, #2
   21cac:	8812      	ldrh	r2, [r2, #0]
   21cae:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   21cb0:	230c      	movs	r3, #12
   21cb2:	18fb      	adds	r3, r7, r3
   21cb4:	0019      	movs	r1, r3
   21cb6:	2003      	movs	r0, #3
   21cb8:	4b03      	ldr	r3, [pc, #12]	; (21cc8 <nmi_spi_read+0x40>)
   21cba:	4798      	blx	r3
   21cbc:	0003      	movs	r3, r0
}
   21cbe:	0018      	movs	r0, r3
   21cc0:	46bd      	mov	sp, r7
   21cc2:	b006      	add	sp, #24
   21cc4:	bd80      	pop	{r7, pc}
   21cc6:	46c0      	nop			; (mov r8, r8)
   21cc8:	0001f435 	.word	0x0001f435

00021ccc <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   21ccc:	b580      	push	{r7, lr}
   21cce:	b086      	sub	sp, #24
   21cd0:	af00      	add	r7, sp, #0
   21cd2:	6078      	str	r0, [r7, #4]
   21cd4:	000a      	movs	r2, r1
   21cd6:	1cbb      	adds	r3, r7, #2
   21cd8:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   21cda:	230c      	movs	r3, #12
   21cdc:	18fb      	adds	r3, r7, r3
   21cde:	687a      	ldr	r2, [r7, #4]
   21ce0:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   21ce2:	230c      	movs	r3, #12
   21ce4:	18fb      	adds	r3, r7, r3
   21ce6:	2200      	movs	r2, #0
   21ce8:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   21cea:	230c      	movs	r3, #12
   21cec:	18fb      	adds	r3, r7, r3
   21cee:	1cba      	adds	r2, r7, #2
   21cf0:	8812      	ldrh	r2, [r2, #0]
   21cf2:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   21cf4:	230c      	movs	r3, #12
   21cf6:	18fb      	adds	r3, r7, r3
   21cf8:	0019      	movs	r1, r3
   21cfa:	2003      	movs	r0, #3
   21cfc:	4b03      	ldr	r3, [pc, #12]	; (21d0c <nmi_spi_write+0x40>)
   21cfe:	4798      	blx	r3
   21d00:	0003      	movs	r3, r0
}
   21d02:	0018      	movs	r0, r3
   21d04:	46bd      	mov	sp, r7
   21d06:	b006      	add	sp, #24
   21d08:	bd80      	pop	{r7, pc}
   21d0a:	46c0      	nop			; (mov r8, r8)
   21d0c:	0001f435 	.word	0x0001f435

00021d10 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   21d10:	b580      	push	{r7, lr}
   21d12:	b088      	sub	sp, #32
   21d14:	af00      	add	r7, sp, #0
   21d16:	60f8      	str	r0, [r7, #12]
   21d18:	60b9      	str	r1, [r7, #8]
   21d1a:	1dbb      	adds	r3, r7, #6
   21d1c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   21d1e:	2314      	movs	r3, #20
   21d20:	18fb      	adds	r3, r7, r3
   21d22:	68fa      	ldr	r2, [r7, #12]
   21d24:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   21d26:	2314      	movs	r3, #20
   21d28:	18fb      	adds	r3, r7, r3
   21d2a:	68ba      	ldr	r2, [r7, #8]
   21d2c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   21d2e:	2314      	movs	r3, #20
   21d30:	18fb      	adds	r3, r7, r3
   21d32:	1dba      	adds	r2, r7, #6
   21d34:	8812      	ldrh	r2, [r2, #0]
   21d36:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   21d38:	2314      	movs	r3, #20
   21d3a:	18fb      	adds	r3, r7, r3
   21d3c:	0019      	movs	r1, r3
   21d3e:	2003      	movs	r0, #3
   21d40:	4b03      	ldr	r3, [pc, #12]	; (21d50 <nmi_spi_rw+0x40>)
   21d42:	4798      	blx	r3
   21d44:	0003      	movs	r3, r0
}
   21d46:	0018      	movs	r0, r3
   21d48:	46bd      	mov	sp, r7
   21d4a:	b008      	add	sp, #32
   21d4c:	bd80      	pop	{r7, pc}
   21d4e:	46c0      	nop			; (mov r8, r8)
   21d50:	0001f435 	.word	0x0001f435

00021d54 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   21d54:	b580      	push	{r7, lr}
   21d56:	b082      	sub	sp, #8
   21d58:	af00      	add	r7, sp, #0
   21d5a:	0002      	movs	r2, r0
   21d5c:	1dfb      	adds	r3, r7, #7
   21d5e:	701a      	strb	r2, [r3, #0]
   21d60:	1dbb      	adds	r3, r7, #6
   21d62:	1c0a      	adds	r2, r1, #0
   21d64:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   21d66:	1dfb      	adds	r3, r7, #7
   21d68:	781b      	ldrb	r3, [r3, #0]
   21d6a:	005a      	lsls	r2, r3, #1
   21d6c:	1dbb      	adds	r3, r7, #6
   21d6e:	781b      	ldrb	r3, [r3, #0]
   21d70:	4053      	eors	r3, r2
   21d72:	4a03      	ldr	r2, [pc, #12]	; (21d80 <crc7_byte+0x2c>)
   21d74:	5cd3      	ldrb	r3, [r2, r3]
}
   21d76:	0018      	movs	r0, r3
   21d78:	46bd      	mov	sp, r7
   21d7a:	b002      	add	sp, #8
   21d7c:	bd80      	pop	{r7, pc}
   21d7e:	46c0      	nop			; (mov r8, r8)
   21d80:	0003713c 	.word	0x0003713c

00021d84 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   21d84:	b590      	push	{r4, r7, lr}
   21d86:	b085      	sub	sp, #20
   21d88:	af00      	add	r7, sp, #0
   21d8a:	60b9      	str	r1, [r7, #8]
   21d8c:	607a      	str	r2, [r7, #4]
   21d8e:	230f      	movs	r3, #15
   21d90:	18fb      	adds	r3, r7, r3
   21d92:	1c02      	adds	r2, r0, #0
   21d94:	701a      	strb	r2, [r3, #0]
	while (len--)
   21d96:	e00e      	b.n	21db6 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   21d98:	68bb      	ldr	r3, [r7, #8]
   21d9a:	1c5a      	adds	r2, r3, #1
   21d9c:	60ba      	str	r2, [r7, #8]
   21d9e:	781a      	ldrb	r2, [r3, #0]
   21da0:	230f      	movs	r3, #15
   21da2:	18fc      	adds	r4, r7, r3
   21da4:	230f      	movs	r3, #15
   21da6:	18fb      	adds	r3, r7, r3
   21da8:	781b      	ldrb	r3, [r3, #0]
   21daa:	0011      	movs	r1, r2
   21dac:	0018      	movs	r0, r3
   21dae:	4b08      	ldr	r3, [pc, #32]	; (21dd0 <crc7+0x4c>)
   21db0:	4798      	blx	r3
   21db2:	0003      	movs	r3, r0
   21db4:	7023      	strb	r3, [r4, #0]
	while (len--)
   21db6:	687b      	ldr	r3, [r7, #4]
   21db8:	1e5a      	subs	r2, r3, #1
   21dba:	607a      	str	r2, [r7, #4]
   21dbc:	2b00      	cmp	r3, #0
   21dbe:	d1eb      	bne.n	21d98 <crc7+0x14>
	return crc;
   21dc0:	230f      	movs	r3, #15
   21dc2:	18fb      	adds	r3, r7, r3
   21dc4:	781b      	ldrb	r3, [r3, #0]
}
   21dc6:	0018      	movs	r0, r3
   21dc8:	46bd      	mov	sp, r7
   21dca:	b005      	add	sp, #20
   21dcc:	bd90      	pop	{r4, r7, pc}
   21dce:	46c0      	nop			; (mov r8, r8)
   21dd0:	00021d55 	.word	0x00021d55

00021dd4 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   21dd4:	b590      	push	{r4, r7, lr}
   21dd6:	b089      	sub	sp, #36	; 0x24
   21dd8:	af00      	add	r7, sp, #0
   21dda:	60b9      	str	r1, [r7, #8]
   21ddc:	607a      	str	r2, [r7, #4]
   21dde:	603b      	str	r3, [r7, #0]
   21de0:	230f      	movs	r3, #15
   21de2:	18fb      	adds	r3, r7, r3
   21de4:	1c02      	adds	r2, r0, #0
   21de6:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   21de8:	231f      	movs	r3, #31
   21dea:	18fb      	adds	r3, r7, r3
   21dec:	2205      	movs	r2, #5
   21dee:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   21df0:	231e      	movs	r3, #30
   21df2:	18fb      	adds	r3, r7, r3
   21df4:	2201      	movs	r2, #1
   21df6:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   21df8:	2314      	movs	r3, #20
   21dfa:	18fb      	adds	r3, r7, r3
   21dfc:	220f      	movs	r2, #15
   21dfe:	18ba      	adds	r2, r7, r2
   21e00:	7812      	ldrb	r2, [r2, #0]
   21e02:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   21e04:	230f      	movs	r3, #15
   21e06:	18fb      	adds	r3, r7, r3
   21e08:	781b      	ldrb	r3, [r3, #0]
   21e0a:	3bc1      	subs	r3, #193	; 0xc1
   21e0c:	2b0e      	cmp	r3, #14
   21e0e:	d900      	bls.n	21e12 <spi_cmd+0x3e>
   21e10:	e11b      	b.n	2204a <spi_cmd+0x276>
   21e12:	009a      	lsls	r2, r3, #2
   21e14:	4bb6      	ldr	r3, [pc, #728]	; (220f0 <spi_cmd+0x31c>)
   21e16:	18d3      	adds	r3, r2, r3
   21e18:	681b      	ldr	r3, [r3, #0]
   21e1a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   21e1c:	68bb      	ldr	r3, [r7, #8]
   21e1e:	0c1b      	lsrs	r3, r3, #16
   21e20:	b2da      	uxtb	r2, r3
   21e22:	2314      	movs	r3, #20
   21e24:	18fb      	adds	r3, r7, r3
   21e26:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21e28:	68bb      	ldr	r3, [r7, #8]
   21e2a:	0a1b      	lsrs	r3, r3, #8
   21e2c:	b2da      	uxtb	r2, r3
   21e2e:	2314      	movs	r3, #20
   21e30:	18fb      	adds	r3, r7, r3
   21e32:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   21e34:	68bb      	ldr	r3, [r7, #8]
   21e36:	b2da      	uxtb	r2, r3
   21e38:	2314      	movs	r3, #20
   21e3a:	18fb      	adds	r3, r7, r3
   21e3c:	70da      	strb	r2, [r3, #3]
		len = 5;
   21e3e:	231f      	movs	r3, #31
   21e40:	18fb      	adds	r3, r7, r3
   21e42:	2205      	movs	r2, #5
   21e44:	701a      	strb	r2, [r3, #0]
		break;
   21e46:	e105      	b.n	22054 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   21e48:	68bb      	ldr	r3, [r7, #8]
   21e4a:	0a1b      	lsrs	r3, r3, #8
   21e4c:	b2da      	uxtb	r2, r3
   21e4e:	2314      	movs	r3, #20
   21e50:	18fb      	adds	r3, r7, r3
   21e52:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   21e54:	2330      	movs	r3, #48	; 0x30
   21e56:	18fb      	adds	r3, r7, r3
   21e58:	781b      	ldrb	r3, [r3, #0]
   21e5a:	2b00      	cmp	r3, #0
   21e5c:	d009      	beq.n	21e72 <spi_cmd+0x9e>
   21e5e:	2314      	movs	r3, #20
   21e60:	18fb      	adds	r3, r7, r3
   21e62:	785b      	ldrb	r3, [r3, #1]
   21e64:	2280      	movs	r2, #128	; 0x80
   21e66:	4252      	negs	r2, r2
   21e68:	4313      	orrs	r3, r2
   21e6a:	b2da      	uxtb	r2, r3
   21e6c:	2314      	movs	r3, #20
   21e6e:	18fb      	adds	r3, r7, r3
   21e70:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   21e72:	68bb      	ldr	r3, [r7, #8]
   21e74:	b2da      	uxtb	r2, r3
   21e76:	2314      	movs	r3, #20
   21e78:	18fb      	adds	r3, r7, r3
   21e7a:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   21e7c:	2314      	movs	r3, #20
   21e7e:	18fb      	adds	r3, r7, r3
   21e80:	2200      	movs	r2, #0
   21e82:	70da      	strb	r2, [r3, #3]
		len = 5;
   21e84:	231f      	movs	r3, #31
   21e86:	18fb      	adds	r3, r7, r3
   21e88:	2205      	movs	r2, #5
   21e8a:	701a      	strb	r2, [r3, #0]
		break;
   21e8c:	e0e2      	b.n	22054 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   21e8e:	2314      	movs	r3, #20
   21e90:	18fb      	adds	r3, r7, r3
   21e92:	2200      	movs	r2, #0
   21e94:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   21e96:	2314      	movs	r3, #20
   21e98:	18fb      	adds	r3, r7, r3
   21e9a:	2200      	movs	r2, #0
   21e9c:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   21e9e:	2314      	movs	r3, #20
   21ea0:	18fb      	adds	r3, r7, r3
   21ea2:	2200      	movs	r2, #0
   21ea4:	70da      	strb	r2, [r3, #3]
		len = 5;
   21ea6:	231f      	movs	r3, #31
   21ea8:	18fb      	adds	r3, r7, r3
   21eaa:	2205      	movs	r2, #5
   21eac:	701a      	strb	r2, [r3, #0]
		break;
   21eae:	e0d1      	b.n	22054 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   21eb0:	2314      	movs	r3, #20
   21eb2:	18fb      	adds	r3, r7, r3
   21eb4:	2200      	movs	r2, #0
   21eb6:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   21eb8:	2314      	movs	r3, #20
   21eba:	18fb      	adds	r3, r7, r3
   21ebc:	2200      	movs	r2, #0
   21ebe:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   21ec0:	2314      	movs	r3, #20
   21ec2:	18fb      	adds	r3, r7, r3
   21ec4:	2200      	movs	r2, #0
   21ec6:	70da      	strb	r2, [r3, #3]
		len = 5;
   21ec8:	231f      	movs	r3, #31
   21eca:	18fb      	adds	r3, r7, r3
   21ecc:	2205      	movs	r2, #5
   21ece:	701a      	strb	r2, [r3, #0]
		break;
   21ed0:	e0c0      	b.n	22054 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   21ed2:	2314      	movs	r3, #20
   21ed4:	18fb      	adds	r3, r7, r3
   21ed6:	22ff      	movs	r2, #255	; 0xff
   21ed8:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   21eda:	2314      	movs	r3, #20
   21edc:	18fb      	adds	r3, r7, r3
   21ede:	22ff      	movs	r2, #255	; 0xff
   21ee0:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   21ee2:	2314      	movs	r3, #20
   21ee4:	18fb      	adds	r3, r7, r3
   21ee6:	22ff      	movs	r2, #255	; 0xff
   21ee8:	70da      	strb	r2, [r3, #3]
		len = 5;
   21eea:	231f      	movs	r3, #31
   21eec:	18fb      	adds	r3, r7, r3
   21eee:	2205      	movs	r2, #5
   21ef0:	701a      	strb	r2, [r3, #0]
		break;
   21ef2:	e0af      	b.n	22054 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   21ef4:	68bb      	ldr	r3, [r7, #8]
   21ef6:	0c1b      	lsrs	r3, r3, #16
   21ef8:	b2da      	uxtb	r2, r3
   21efa:	2314      	movs	r3, #20
   21efc:	18fb      	adds	r3, r7, r3
   21efe:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21f00:	68bb      	ldr	r3, [r7, #8]
   21f02:	0a1b      	lsrs	r3, r3, #8
   21f04:	b2da      	uxtb	r2, r3
   21f06:	2314      	movs	r3, #20
   21f08:	18fb      	adds	r3, r7, r3
   21f0a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   21f0c:	68bb      	ldr	r3, [r7, #8]
   21f0e:	b2da      	uxtb	r2, r3
   21f10:	2314      	movs	r3, #20
   21f12:	18fb      	adds	r3, r7, r3
   21f14:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   21f16:	683b      	ldr	r3, [r7, #0]
   21f18:	0a1b      	lsrs	r3, r3, #8
   21f1a:	b2da      	uxtb	r2, r3
   21f1c:	2314      	movs	r3, #20
   21f1e:	18fb      	adds	r3, r7, r3
   21f20:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   21f22:	683b      	ldr	r3, [r7, #0]
   21f24:	b2da      	uxtb	r2, r3
   21f26:	2314      	movs	r3, #20
   21f28:	18fb      	adds	r3, r7, r3
   21f2a:	715a      	strb	r2, [r3, #5]
		len = 7;
   21f2c:	231f      	movs	r3, #31
   21f2e:	18fb      	adds	r3, r7, r3
   21f30:	2207      	movs	r2, #7
   21f32:	701a      	strb	r2, [r3, #0]
		break;
   21f34:	e08e      	b.n	22054 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   21f36:	68bb      	ldr	r3, [r7, #8]
   21f38:	0c1b      	lsrs	r3, r3, #16
   21f3a:	b2da      	uxtb	r2, r3
   21f3c:	2314      	movs	r3, #20
   21f3e:	18fb      	adds	r3, r7, r3
   21f40:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21f42:	68bb      	ldr	r3, [r7, #8]
   21f44:	0a1b      	lsrs	r3, r3, #8
   21f46:	b2da      	uxtb	r2, r3
   21f48:	2314      	movs	r3, #20
   21f4a:	18fb      	adds	r3, r7, r3
   21f4c:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   21f4e:	68bb      	ldr	r3, [r7, #8]
   21f50:	b2da      	uxtb	r2, r3
   21f52:	2314      	movs	r3, #20
   21f54:	18fb      	adds	r3, r7, r3
   21f56:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   21f58:	683b      	ldr	r3, [r7, #0]
   21f5a:	0c1b      	lsrs	r3, r3, #16
   21f5c:	b2da      	uxtb	r2, r3
   21f5e:	2314      	movs	r3, #20
   21f60:	18fb      	adds	r3, r7, r3
   21f62:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   21f64:	683b      	ldr	r3, [r7, #0]
   21f66:	0a1b      	lsrs	r3, r3, #8
   21f68:	b2da      	uxtb	r2, r3
   21f6a:	2314      	movs	r3, #20
   21f6c:	18fb      	adds	r3, r7, r3
   21f6e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   21f70:	683b      	ldr	r3, [r7, #0]
   21f72:	b2da      	uxtb	r2, r3
   21f74:	2314      	movs	r3, #20
   21f76:	18fb      	adds	r3, r7, r3
   21f78:	719a      	strb	r2, [r3, #6]
		len = 8;
   21f7a:	231f      	movs	r3, #31
   21f7c:	18fb      	adds	r3, r7, r3
   21f7e:	2208      	movs	r2, #8
   21f80:	701a      	strb	r2, [r3, #0]
		break;
   21f82:	e067      	b.n	22054 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   21f84:	68bb      	ldr	r3, [r7, #8]
   21f86:	0a1b      	lsrs	r3, r3, #8
   21f88:	b2da      	uxtb	r2, r3
   21f8a:	2314      	movs	r3, #20
   21f8c:	18fb      	adds	r3, r7, r3
   21f8e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   21f90:	2330      	movs	r3, #48	; 0x30
   21f92:	18fb      	adds	r3, r7, r3
   21f94:	781b      	ldrb	r3, [r3, #0]
   21f96:	2b00      	cmp	r3, #0
   21f98:	d009      	beq.n	21fae <spi_cmd+0x1da>
   21f9a:	2314      	movs	r3, #20
   21f9c:	18fb      	adds	r3, r7, r3
   21f9e:	785b      	ldrb	r3, [r3, #1]
   21fa0:	2280      	movs	r2, #128	; 0x80
   21fa2:	4252      	negs	r2, r2
   21fa4:	4313      	orrs	r3, r2
   21fa6:	b2da      	uxtb	r2, r3
   21fa8:	2314      	movs	r3, #20
   21faa:	18fb      	adds	r3, r7, r3
   21fac:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   21fae:	68bb      	ldr	r3, [r7, #8]
   21fb0:	b2da      	uxtb	r2, r3
   21fb2:	2314      	movs	r3, #20
   21fb4:	18fb      	adds	r3, r7, r3
   21fb6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   21fb8:	687b      	ldr	r3, [r7, #4]
   21fba:	0e1b      	lsrs	r3, r3, #24
   21fbc:	b2da      	uxtb	r2, r3
   21fbe:	2314      	movs	r3, #20
   21fc0:	18fb      	adds	r3, r7, r3
   21fc2:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   21fc4:	687b      	ldr	r3, [r7, #4]
   21fc6:	0c1b      	lsrs	r3, r3, #16
   21fc8:	b2da      	uxtb	r2, r3
   21fca:	2314      	movs	r3, #20
   21fcc:	18fb      	adds	r3, r7, r3
   21fce:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   21fd0:	687b      	ldr	r3, [r7, #4]
   21fd2:	0a1b      	lsrs	r3, r3, #8
   21fd4:	b2da      	uxtb	r2, r3
   21fd6:	2314      	movs	r3, #20
   21fd8:	18fb      	adds	r3, r7, r3
   21fda:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   21fdc:	687b      	ldr	r3, [r7, #4]
   21fde:	b2da      	uxtb	r2, r3
   21fe0:	2314      	movs	r3, #20
   21fe2:	18fb      	adds	r3, r7, r3
   21fe4:	719a      	strb	r2, [r3, #6]
		len = 8;
   21fe6:	231f      	movs	r3, #31
   21fe8:	18fb      	adds	r3, r7, r3
   21fea:	2208      	movs	r2, #8
   21fec:	701a      	strb	r2, [r3, #0]
		break;
   21fee:	e031      	b.n	22054 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   21ff0:	68bb      	ldr	r3, [r7, #8]
   21ff2:	0c1b      	lsrs	r3, r3, #16
   21ff4:	b2da      	uxtb	r2, r3
   21ff6:	2314      	movs	r3, #20
   21ff8:	18fb      	adds	r3, r7, r3
   21ffa:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   21ffc:	68bb      	ldr	r3, [r7, #8]
   21ffe:	0a1b      	lsrs	r3, r3, #8
   22000:	b2da      	uxtb	r2, r3
   22002:	2314      	movs	r3, #20
   22004:	18fb      	adds	r3, r7, r3
   22006:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   22008:	68bb      	ldr	r3, [r7, #8]
   2200a:	b2da      	uxtb	r2, r3
   2200c:	2314      	movs	r3, #20
   2200e:	18fb      	adds	r3, r7, r3
   22010:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   22012:	687b      	ldr	r3, [r7, #4]
   22014:	0e1b      	lsrs	r3, r3, #24
   22016:	b2da      	uxtb	r2, r3
   22018:	2314      	movs	r3, #20
   2201a:	18fb      	adds	r3, r7, r3
   2201c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2201e:	687b      	ldr	r3, [r7, #4]
   22020:	0c1b      	lsrs	r3, r3, #16
   22022:	b2da      	uxtb	r2, r3
   22024:	2314      	movs	r3, #20
   22026:	18fb      	adds	r3, r7, r3
   22028:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   2202a:	687b      	ldr	r3, [r7, #4]
   2202c:	0a1b      	lsrs	r3, r3, #8
   2202e:	b2da      	uxtb	r2, r3
   22030:	2314      	movs	r3, #20
   22032:	18fb      	adds	r3, r7, r3
   22034:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   22036:	687b      	ldr	r3, [r7, #4]
   22038:	b2da      	uxtb	r2, r3
   2203a:	2314      	movs	r3, #20
   2203c:	18fb      	adds	r3, r7, r3
   2203e:	71da      	strb	r2, [r3, #7]
		len = 9;
   22040:	231f      	movs	r3, #31
   22042:	18fb      	adds	r3, r7, r3
   22044:	2209      	movs	r2, #9
   22046:	701a      	strb	r2, [r3, #0]
		break;
   22048:	e004      	b.n	22054 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   2204a:	231e      	movs	r3, #30
   2204c:	18fb      	adds	r3, r7, r3
   2204e:	2200      	movs	r2, #0
   22050:	701a      	strb	r2, [r3, #0]
		break;
   22052:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   22054:	231e      	movs	r3, #30
   22056:	18fb      	adds	r3, r7, r3
   22058:	781b      	ldrb	r3, [r3, #0]
   2205a:	b25b      	sxtb	r3, r3
   2205c:	2b00      	cmp	r3, #0
   2205e:	d03f      	beq.n	220e0 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   22060:	4b24      	ldr	r3, [pc, #144]	; (220f4 <spi_cmd+0x320>)
   22062:	781b      	ldrb	r3, [r3, #0]
   22064:	2b00      	cmp	r3, #0
   22066:	d115      	bne.n	22094 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   22068:	231f      	movs	r3, #31
   2206a:	18fb      	adds	r3, r7, r3
   2206c:	781b      	ldrb	r3, [r3, #0]
   2206e:	1e5c      	subs	r4, r3, #1
   22070:	231f      	movs	r3, #31
   22072:	18fb      	adds	r3, r7, r3
   22074:	781b      	ldrb	r3, [r3, #0]
   22076:	3b01      	subs	r3, #1
   22078:	001a      	movs	r2, r3
   2207a:	2314      	movs	r3, #20
   2207c:	18fb      	adds	r3, r7, r3
   2207e:	0019      	movs	r1, r3
   22080:	207f      	movs	r0, #127	; 0x7f
   22082:	4b1d      	ldr	r3, [pc, #116]	; (220f8 <spi_cmd+0x324>)
   22084:	4798      	blx	r3
   22086:	0003      	movs	r3, r0
   22088:	18db      	adds	r3, r3, r3
   2208a:	b2da      	uxtb	r2, r3
   2208c:	2314      	movs	r3, #20
   2208e:	18fb      	adds	r3, r7, r3
   22090:	551a      	strb	r2, [r3, r4]
   22092:	e006      	b.n	220a2 <spi_cmd+0x2ce>
		else
			len-=1;
   22094:	231f      	movs	r3, #31
   22096:	18fb      	adds	r3, r7, r3
   22098:	221f      	movs	r2, #31
   2209a:	18ba      	adds	r2, r7, r2
   2209c:	7812      	ldrb	r2, [r2, #0]
   2209e:	3a01      	subs	r2, #1
   220a0:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   220a2:	231f      	movs	r3, #31
   220a4:	18fb      	adds	r3, r7, r3
   220a6:	781b      	ldrb	r3, [r3, #0]
   220a8:	b29a      	uxth	r2, r3
   220aa:	2314      	movs	r3, #20
   220ac:	18fb      	adds	r3, r7, r3
   220ae:	0011      	movs	r1, r2
   220b0:	0018      	movs	r0, r3
   220b2:	4b12      	ldr	r3, [pc, #72]	; (220fc <spi_cmd+0x328>)
   220b4:	4798      	blx	r3
   220b6:	1e03      	subs	r3, r0, #0
   220b8:	d012      	beq.n	220e0 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   220ba:	2390      	movs	r3, #144	; 0x90
   220bc:	005a      	lsls	r2, r3, #1
   220be:	4910      	ldr	r1, [pc, #64]	; (22100 <spi_cmd+0x32c>)
   220c0:	4b10      	ldr	r3, [pc, #64]	; (22104 <spi_cmd+0x330>)
   220c2:	0018      	movs	r0, r3
   220c4:	4b10      	ldr	r3, [pc, #64]	; (22108 <spi_cmd+0x334>)
   220c6:	4798      	blx	r3
   220c8:	4b10      	ldr	r3, [pc, #64]	; (2210c <spi_cmd+0x338>)
   220ca:	0018      	movs	r0, r3
   220cc:	4b0e      	ldr	r3, [pc, #56]	; (22108 <spi_cmd+0x334>)
   220ce:	4798      	blx	r3
   220d0:	4b0f      	ldr	r3, [pc, #60]	; (22110 <spi_cmd+0x33c>)
   220d2:	0018      	movs	r0, r3
   220d4:	4b0c      	ldr	r3, [pc, #48]	; (22108 <spi_cmd+0x334>)
   220d6:	4798      	blx	r3
			result = N_FAIL;
   220d8:	231e      	movs	r3, #30
   220da:	18fb      	adds	r3, r7, r3
   220dc:	2200      	movs	r2, #0
   220de:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   220e0:	231e      	movs	r3, #30
   220e2:	18fb      	adds	r3, r7, r3
   220e4:	781b      	ldrb	r3, [r3, #0]
   220e6:	b25b      	sxtb	r3, r3
}
   220e8:	0018      	movs	r0, r3
   220ea:	46bd      	mov	sp, r7
   220ec:	b009      	add	sp, #36	; 0x24
   220ee:	bd90      	pop	{r4, r7, pc}
   220f0:	000377b4 	.word	0x000377b4
   220f4:	20004128 	.word	0x20004128
   220f8:	00021d85 	.word	0x00021d85
   220fc:	00021ccd 	.word	0x00021ccd
   22100:	0003782c 	.word	0x0003782c
   22104:	0003723c 	.word	0x0003723c
   22108:	0001c7d9 	.word	0x0001c7d9
   2210c:	00037250 	.word	0x00037250
   22110:	0003727c 	.word	0x0003727c

00022114 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   22114:	b590      	push	{r4, r7, lr}
   22116:	b085      	sub	sp, #20
   22118:	af00      	add	r7, sp, #0
   2211a:	0002      	movs	r2, r0
   2211c:	1dfb      	adds	r3, r7, #7
   2211e:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   22120:	230e      	movs	r3, #14
   22122:	18fb      	adds	r3, r7, r3
   22124:	2201      	movs	r2, #1
   22126:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   22128:	4b32      	ldr	r3, [pc, #200]	; (221f4 <spi_data_rsp+0xe0>)
   2212a:	781b      	ldrb	r3, [r3, #0]
   2212c:	2b00      	cmp	r3, #0
   2212e:	d104      	bne.n	2213a <spi_data_rsp+0x26>
		len = 2;
   22130:	230f      	movs	r3, #15
   22132:	18fb      	adds	r3, r7, r3
   22134:	2202      	movs	r2, #2
   22136:	701a      	strb	r2, [r3, #0]
   22138:	e003      	b.n	22142 <spi_data_rsp+0x2e>
	else
		len = 3;
   2213a:	230f      	movs	r3, #15
   2213c:	18fb      	adds	r3, r7, r3
   2213e:	2203      	movs	r2, #3
   22140:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   22142:	230f      	movs	r3, #15
   22144:	18fb      	adds	r3, r7, r3
   22146:	781b      	ldrb	r3, [r3, #0]
   22148:	b29a      	uxth	r2, r3
   2214a:	2308      	movs	r3, #8
   2214c:	18fb      	adds	r3, r7, r3
   2214e:	0011      	movs	r1, r2
   22150:	0018      	movs	r0, r3
   22152:	4b29      	ldr	r3, [pc, #164]	; (221f8 <spi_data_rsp+0xe4>)
   22154:	4798      	blx	r3
   22156:	1e03      	subs	r3, r0, #0
   22158:	d013      	beq.n	22182 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2215a:	239a      	movs	r3, #154	; 0x9a
   2215c:	005a      	lsls	r2, r3, #1
   2215e:	4927      	ldr	r1, [pc, #156]	; (221fc <spi_data_rsp+0xe8>)
   22160:	4b27      	ldr	r3, [pc, #156]	; (22200 <spi_data_rsp+0xec>)
   22162:	0018      	movs	r0, r3
   22164:	4b27      	ldr	r3, [pc, #156]	; (22204 <spi_data_rsp+0xf0>)
   22166:	4798      	blx	r3
   22168:	4b27      	ldr	r3, [pc, #156]	; (22208 <spi_data_rsp+0xf4>)
   2216a:	0018      	movs	r0, r3
   2216c:	4b25      	ldr	r3, [pc, #148]	; (22204 <spi_data_rsp+0xf0>)
   2216e:	4798      	blx	r3
   22170:	4b26      	ldr	r3, [pc, #152]	; (2220c <spi_data_rsp+0xf8>)
   22172:	0018      	movs	r0, r3
   22174:	4b23      	ldr	r3, [pc, #140]	; (22204 <spi_data_rsp+0xf0>)
   22176:	4798      	blx	r3
		result = N_FAIL;
   22178:	230e      	movs	r3, #14
   2217a:	18fb      	adds	r3, r7, r3
   2217c:	2200      	movs	r2, #0
   2217e:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   22180:	e030      	b.n	221e4 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   22182:	230f      	movs	r3, #15
   22184:	18fb      	adds	r3, r7, r3
   22186:	781b      	ldrb	r3, [r3, #0]
   22188:	3b01      	subs	r3, #1
   2218a:	2208      	movs	r2, #8
   2218c:	18ba      	adds	r2, r7, r2
   2218e:	5cd3      	ldrb	r3, [r2, r3]
   22190:	2b00      	cmp	r3, #0
   22192:	d108      	bne.n	221a6 <spi_data_rsp+0x92>
   22194:	230f      	movs	r3, #15
   22196:	18fb      	adds	r3, r7, r3
   22198:	781b      	ldrb	r3, [r3, #0]
   2219a:	3b02      	subs	r3, #2
   2219c:	2208      	movs	r2, #8
   2219e:	18ba      	adds	r2, r7, r2
   221a0:	5cd3      	ldrb	r3, [r2, r3]
   221a2:	2bc3      	cmp	r3, #195	; 0xc3
   221a4:	d01e      	beq.n	221e4 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   221a6:	233c      	movs	r3, #60	; 0x3c
   221a8:	33ff      	adds	r3, #255	; 0xff
   221aa:	001a      	movs	r2, r3
   221ac:	4913      	ldr	r1, [pc, #76]	; (221fc <spi_data_rsp+0xe8>)
   221ae:	4b14      	ldr	r3, [pc, #80]	; (22200 <spi_data_rsp+0xec>)
   221b0:	0018      	movs	r0, r3
   221b2:	4b14      	ldr	r3, [pc, #80]	; (22204 <spi_data_rsp+0xf0>)
   221b4:	4798      	blx	r3
   221b6:	2308      	movs	r3, #8
   221b8:	18fb      	adds	r3, r7, r3
   221ba:	781b      	ldrb	r3, [r3, #0]
   221bc:	0019      	movs	r1, r3
   221be:	2308      	movs	r3, #8
   221c0:	18fb      	adds	r3, r7, r3
   221c2:	785b      	ldrb	r3, [r3, #1]
   221c4:	001a      	movs	r2, r3
   221c6:	2308      	movs	r3, #8
   221c8:	18fb      	adds	r3, r7, r3
   221ca:	789b      	ldrb	r3, [r3, #2]
   221cc:	4810      	ldr	r0, [pc, #64]	; (22210 <spi_data_rsp+0xfc>)
   221ce:	4c0d      	ldr	r4, [pc, #52]	; (22204 <spi_data_rsp+0xf0>)
   221d0:	47a0      	blx	r4
   221d2:	4b0e      	ldr	r3, [pc, #56]	; (2220c <spi_data_rsp+0xf8>)
   221d4:	0018      	movs	r0, r3
   221d6:	4b0b      	ldr	r3, [pc, #44]	; (22204 <spi_data_rsp+0xf0>)
   221d8:	4798      	blx	r3
		result = N_FAIL;
   221da:	230e      	movs	r3, #14
   221dc:	18fb      	adds	r3, r7, r3
   221de:	2200      	movs	r2, #0
   221e0:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   221e2:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   221e4:	230e      	movs	r3, #14
   221e6:	18fb      	adds	r3, r7, r3
   221e8:	781b      	ldrb	r3, [r3, #0]
   221ea:	b25b      	sxtb	r3, r3
}
   221ec:	0018      	movs	r0, r3
   221ee:	46bd      	mov	sp, r7
   221f0:	b005      	add	sp, #20
   221f2:	bd90      	pop	{r4, r7, pc}
   221f4:	20004128 	.word	0x20004128
   221f8:	00021c89 	.word	0x00021c89
   221fc:	00037834 	.word	0x00037834
   22200:	0003723c 	.word	0x0003723c
   22204:	0001c7d9 	.word	0x0001c7d9
   22208:	00037280 	.word	0x00037280
   2220c:	0003727c 	.word	0x0003727c
   22210:	000372a0 	.word	0x000372a0

00022214 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   22214:	b580      	push	{r7, lr}
   22216:	b084      	sub	sp, #16
   22218:	af00      	add	r7, sp, #0
   2221a:	0002      	movs	r2, r0
   2221c:	1dfb      	adds	r3, r7, #7
   2221e:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   22220:	230f      	movs	r3, #15
   22222:	18fb      	adds	r3, r7, r3
   22224:	2201      	movs	r2, #1
   22226:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   22228:	1dfb      	adds	r3, r7, #7
   2222a:	781b      	ldrb	r3, [r3, #0]
   2222c:	2bcf      	cmp	r3, #207	; 0xcf
   2222e:	d007      	beq.n	22240 <spi_cmd_rsp+0x2c>
   22230:	1dfb      	adds	r3, r7, #7
   22232:	781b      	ldrb	r3, [r3, #0]
   22234:	2bc5      	cmp	r3, #197	; 0xc5
   22236:	d003      	beq.n	22240 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   22238:	1dfb      	adds	r3, r7, #7
   2223a:	781b      	ldrb	r3, [r3, #0]
   2223c:	2bc6      	cmp	r3, #198	; 0xc6
   2223e:	d10c      	bne.n	2225a <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22240:	230d      	movs	r3, #13
   22242:	18fb      	adds	r3, r7, r3
   22244:	2101      	movs	r1, #1
   22246:	0018      	movs	r0, r3
   22248:	4b3b      	ldr	r3, [pc, #236]	; (22338 <spi_cmd_rsp+0x124>)
   2224a:	4798      	blx	r3
   2224c:	1e03      	subs	r3, r0, #0
   2224e:	d004      	beq.n	2225a <spi_cmd_rsp+0x46>
			result = N_FAIL;
   22250:	230f      	movs	r3, #15
   22252:	18fb      	adds	r3, r7, r3
   22254:	2200      	movs	r2, #0
   22256:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22258:	e065      	b.n	22326 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2225a:	230e      	movs	r3, #14
   2225c:	18fb      	adds	r3, r7, r3
   2225e:	220a      	movs	r2, #10
   22260:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   22262:	230d      	movs	r3, #13
   22264:	18fb      	adds	r3, r7, r3
   22266:	2101      	movs	r1, #1
   22268:	0018      	movs	r0, r3
   2226a:	4b33      	ldr	r3, [pc, #204]	; (22338 <spi_cmd_rsp+0x124>)
   2226c:	4798      	blx	r3
   2226e:	1e03      	subs	r3, r0, #0
   22270:	d014      	beq.n	2229c <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   22272:	235c      	movs	r3, #92	; 0x5c
   22274:	33ff      	adds	r3, #255	; 0xff
   22276:	001a      	movs	r2, r3
   22278:	4930      	ldr	r1, [pc, #192]	; (2233c <spi_cmd_rsp+0x128>)
   2227a:	4b31      	ldr	r3, [pc, #196]	; (22340 <spi_cmd_rsp+0x12c>)
   2227c:	0018      	movs	r0, r3
   2227e:	4b31      	ldr	r3, [pc, #196]	; (22344 <spi_cmd_rsp+0x130>)
   22280:	4798      	blx	r3
   22282:	4b31      	ldr	r3, [pc, #196]	; (22348 <spi_cmd_rsp+0x134>)
   22284:	0018      	movs	r0, r3
   22286:	4b2f      	ldr	r3, [pc, #188]	; (22344 <spi_cmd_rsp+0x130>)
   22288:	4798      	blx	r3
   2228a:	4b30      	ldr	r3, [pc, #192]	; (2234c <spi_cmd_rsp+0x138>)
   2228c:	0018      	movs	r0, r3
   2228e:	4b2d      	ldr	r3, [pc, #180]	; (22344 <spi_cmd_rsp+0x130>)
   22290:	4798      	blx	r3
			result = N_FAIL;
   22292:	230f      	movs	r3, #15
   22294:	18fb      	adds	r3, r7, r3
   22296:	2200      	movs	r2, #0
   22298:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2229a:	e044      	b.n	22326 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   2229c:	230d      	movs	r3, #13
   2229e:	18fb      	adds	r3, r7, r3
   222a0:	781b      	ldrb	r3, [r3, #0]
   222a2:	1dfa      	adds	r2, r7, #7
   222a4:	7812      	ldrb	r2, [r2, #0]
   222a6:	429a      	cmp	r2, r3
   222a8:	d00b      	beq.n	222c2 <spi_cmd_rsp+0xae>
   222aa:	230e      	movs	r3, #14
   222ac:	18fb      	adds	r3, r7, r3
   222ae:	781b      	ldrb	r3, [r3, #0]
   222b0:	b25b      	sxtb	r3, r3
   222b2:	b2da      	uxtb	r2, r3
   222b4:	3a01      	subs	r2, #1
   222b6:	b2d1      	uxtb	r1, r2
   222b8:	220e      	movs	r2, #14
   222ba:	18ba      	adds	r2, r7, r2
   222bc:	7011      	strb	r1, [r2, #0]
   222be:	2b00      	cmp	r3, #0
   222c0:	dccf      	bgt.n	22262 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   222c2:	230e      	movs	r3, #14
   222c4:	18fb      	adds	r3, r7, r3
   222c6:	220a      	movs	r2, #10
   222c8:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   222ca:	230d      	movs	r3, #13
   222cc:	18fb      	adds	r3, r7, r3
   222ce:	2101      	movs	r1, #1
   222d0:	0018      	movs	r0, r3
   222d2:	4b19      	ldr	r3, [pc, #100]	; (22338 <spi_cmd_rsp+0x124>)
   222d4:	4798      	blx	r3
   222d6:	1e03      	subs	r3, r0, #0
   222d8:	d014      	beq.n	22304 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   222da:	236a      	movs	r3, #106	; 0x6a
   222dc:	33ff      	adds	r3, #255	; 0xff
   222de:	001a      	movs	r2, r3
   222e0:	4916      	ldr	r1, [pc, #88]	; (2233c <spi_cmd_rsp+0x128>)
   222e2:	4b17      	ldr	r3, [pc, #92]	; (22340 <spi_cmd_rsp+0x12c>)
   222e4:	0018      	movs	r0, r3
   222e6:	4b17      	ldr	r3, [pc, #92]	; (22344 <spi_cmd_rsp+0x130>)
   222e8:	4798      	blx	r3
   222ea:	4b17      	ldr	r3, [pc, #92]	; (22348 <spi_cmd_rsp+0x134>)
   222ec:	0018      	movs	r0, r3
   222ee:	4b15      	ldr	r3, [pc, #84]	; (22344 <spi_cmd_rsp+0x130>)
   222f0:	4798      	blx	r3
   222f2:	4b16      	ldr	r3, [pc, #88]	; (2234c <spi_cmd_rsp+0x138>)
   222f4:	0018      	movs	r0, r3
   222f6:	4b13      	ldr	r3, [pc, #76]	; (22344 <spi_cmd_rsp+0x130>)
   222f8:	4798      	blx	r3
			result = N_FAIL;
   222fa:	230f      	movs	r3, #15
   222fc:	18fb      	adds	r3, r7, r3
   222fe:	2200      	movs	r2, #0
   22300:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   22302:	e010      	b.n	22326 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   22304:	230d      	movs	r3, #13
   22306:	18fb      	adds	r3, r7, r3
   22308:	781b      	ldrb	r3, [r3, #0]
   2230a:	2b00      	cmp	r3, #0
   2230c:	d00b      	beq.n	22326 <spi_cmd_rsp+0x112>
   2230e:	230e      	movs	r3, #14
   22310:	18fb      	adds	r3, r7, r3
   22312:	781b      	ldrb	r3, [r3, #0]
   22314:	b25b      	sxtb	r3, r3
   22316:	b2da      	uxtb	r2, r3
   22318:	3a01      	subs	r2, #1
   2231a:	b2d1      	uxtb	r1, r2
   2231c:	220e      	movs	r2, #14
   2231e:	18ba      	adds	r2, r7, r2
   22320:	7011      	strb	r1, [r2, #0]
   22322:	2b00      	cmp	r3, #0
   22324:	dcd1      	bgt.n	222ca <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   22326:	230f      	movs	r3, #15
   22328:	18fb      	adds	r3, r7, r3
   2232a:	781b      	ldrb	r3, [r3, #0]
   2232c:	b25b      	sxtb	r3, r3
}
   2232e:	0018      	movs	r0, r3
   22330:	46bd      	mov	sp, r7
   22332:	b004      	add	sp, #16
   22334:	bd80      	pop	{r7, pc}
   22336:	46c0      	nop			; (mov r8, r8)
   22338:	00021c89 	.word	0x00021c89
   2233c:	00037844 	.word	0x00037844
   22340:	0003723c 	.word	0x0003723c
   22344:	0001c7d9 	.word	0x0001c7d9
   22348:	000372d0 	.word	0x000372d0
   2234c:	0003727c 	.word	0x0003727c

00022350 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   22350:	b590      	push	{r4, r7, lr}
   22352:	b09f      	sub	sp, #124	; 0x7c
   22354:	af00      	add	r7, sp, #0
   22356:	60b9      	str	r1, [r7, #8]
   22358:	607a      	str	r2, [r7, #4]
   2235a:	603b      	str	r3, [r7, #0]
   2235c:	230f      	movs	r3, #15
   2235e:	18fb      	adds	r3, r7, r3
   22360:	1c02      	adds	r2, r0, #0
   22362:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   22364:	2300      	movs	r3, #0
   22366:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   22368:	2301      	movs	r3, #1
   2236a:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   2236c:	2338      	movs	r3, #56	; 0x38
   2236e:	18fb      	adds	r3, r7, r3
   22370:	220f      	movs	r2, #15
   22372:	18ba      	adds	r2, r7, r2
   22374:	7812      	ldrb	r2, [r2, #0]
   22376:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   22378:	230f      	movs	r3, #15
   2237a:	18fb      	adds	r3, r7, r3
   2237c:	781b      	ldrb	r3, [r3, #0]
   2237e:	3bc1      	subs	r3, #193	; 0xc1
   22380:	2b0e      	cmp	r3, #14
   22382:	d900      	bls.n	22386 <spi_cmd_complete+0x36>
   22384:	e103      	b.n	2258e <spi_cmd_complete+0x23e>
   22386:	009a      	lsls	r2, r3, #2
   22388:	4bd1      	ldr	r3, [pc, #836]	; (226d0 <spi_cmd_complete+0x380>)
   2238a:	18d3      	adds	r3, r2, r3
   2238c:	681b      	ldr	r3, [r3, #0]
   2238e:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   22390:	68bb      	ldr	r3, [r7, #8]
   22392:	0c1b      	lsrs	r3, r3, #16
   22394:	b2da      	uxtb	r2, r3
   22396:	2338      	movs	r3, #56	; 0x38
   22398:	18fb      	adds	r3, r7, r3
   2239a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2239c:	68bb      	ldr	r3, [r7, #8]
   2239e:	0a1b      	lsrs	r3, r3, #8
   223a0:	b2da      	uxtb	r2, r3
   223a2:	2338      	movs	r3, #56	; 0x38
   223a4:	18fb      	adds	r3, r7, r3
   223a6:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   223a8:	68bb      	ldr	r3, [r7, #8]
   223aa:	b2da      	uxtb	r2, r3
   223ac:	2338      	movs	r3, #56	; 0x38
   223ae:	18fb      	adds	r3, r7, r3
   223b0:	70da      	strb	r2, [r3, #3]
		len = 5;
   223b2:	2305      	movs	r3, #5
   223b4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   223b6:	e0ed      	b.n	22594 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   223b8:	68bb      	ldr	r3, [r7, #8]
   223ba:	0a1b      	lsrs	r3, r3, #8
   223bc:	b2da      	uxtb	r2, r3
   223be:	2338      	movs	r3, #56	; 0x38
   223c0:	18fb      	adds	r3, r7, r3
   223c2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   223c4:	2388      	movs	r3, #136	; 0x88
   223c6:	18fb      	adds	r3, r7, r3
   223c8:	781b      	ldrb	r3, [r3, #0]
   223ca:	2b01      	cmp	r3, #1
   223cc:	d109      	bne.n	223e2 <spi_cmd_complete+0x92>
   223ce:	2338      	movs	r3, #56	; 0x38
   223d0:	18fb      	adds	r3, r7, r3
   223d2:	785b      	ldrb	r3, [r3, #1]
   223d4:	2280      	movs	r2, #128	; 0x80
   223d6:	4252      	negs	r2, r2
   223d8:	4313      	orrs	r3, r2
   223da:	b2da      	uxtb	r2, r3
   223dc:	2338      	movs	r3, #56	; 0x38
   223de:	18fb      	adds	r3, r7, r3
   223e0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   223e2:	68bb      	ldr	r3, [r7, #8]
   223e4:	b2da      	uxtb	r2, r3
   223e6:	2338      	movs	r3, #56	; 0x38
   223e8:	18fb      	adds	r3, r7, r3
   223ea:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   223ec:	2338      	movs	r3, #56	; 0x38
   223ee:	18fb      	adds	r3, r7, r3
   223f0:	2200      	movs	r2, #0
   223f2:	70da      	strb	r2, [r3, #3]
		len = 5;
   223f4:	2305      	movs	r3, #5
   223f6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   223f8:	e0cc      	b.n	22594 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   223fa:	2338      	movs	r3, #56	; 0x38
   223fc:	18fb      	adds	r3, r7, r3
   223fe:	2200      	movs	r2, #0
   22400:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22402:	2338      	movs	r3, #56	; 0x38
   22404:	18fb      	adds	r3, r7, r3
   22406:	2200      	movs	r2, #0
   22408:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   2240a:	2338      	movs	r3, #56	; 0x38
   2240c:	18fb      	adds	r3, r7, r3
   2240e:	2200      	movs	r2, #0
   22410:	70da      	strb	r2, [r3, #3]
		len = 5;
   22412:	2305      	movs	r3, #5
   22414:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22416:	e0bd      	b.n	22594 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   22418:	2338      	movs	r3, #56	; 0x38
   2241a:	18fb      	adds	r3, r7, r3
   2241c:	2200      	movs	r2, #0
   2241e:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   22420:	2338      	movs	r3, #56	; 0x38
   22422:	18fb      	adds	r3, r7, r3
   22424:	2200      	movs	r2, #0
   22426:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   22428:	2338      	movs	r3, #56	; 0x38
   2242a:	18fb      	adds	r3, r7, r3
   2242c:	2200      	movs	r2, #0
   2242e:	70da      	strb	r2, [r3, #3]
		len = 5;
   22430:	2305      	movs	r3, #5
   22432:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22434:	e0ae      	b.n	22594 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   22436:	2338      	movs	r3, #56	; 0x38
   22438:	18fb      	adds	r3, r7, r3
   2243a:	22ff      	movs	r2, #255	; 0xff
   2243c:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   2243e:	2338      	movs	r3, #56	; 0x38
   22440:	18fb      	adds	r3, r7, r3
   22442:	22ff      	movs	r2, #255	; 0xff
   22444:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   22446:	2338      	movs	r3, #56	; 0x38
   22448:	18fb      	adds	r3, r7, r3
   2244a:	22ff      	movs	r2, #255	; 0xff
   2244c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2244e:	2305      	movs	r3, #5
   22450:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22452:	e09f      	b.n	22594 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   22454:	68bb      	ldr	r3, [r7, #8]
   22456:	0c1b      	lsrs	r3, r3, #16
   22458:	b2da      	uxtb	r2, r3
   2245a:	2338      	movs	r3, #56	; 0x38
   2245c:	18fb      	adds	r3, r7, r3
   2245e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   22460:	68bb      	ldr	r3, [r7, #8]
   22462:	0a1b      	lsrs	r3, r3, #8
   22464:	b2da      	uxtb	r2, r3
   22466:	2338      	movs	r3, #56	; 0x38
   22468:	18fb      	adds	r3, r7, r3
   2246a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2246c:	68bb      	ldr	r3, [r7, #8]
   2246e:	b2da      	uxtb	r2, r3
   22470:	2338      	movs	r3, #56	; 0x38
   22472:	18fb      	adds	r3, r7, r3
   22474:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   22476:	683b      	ldr	r3, [r7, #0]
   22478:	0a1b      	lsrs	r3, r3, #8
   2247a:	b2da      	uxtb	r2, r3
   2247c:	2338      	movs	r3, #56	; 0x38
   2247e:	18fb      	adds	r3, r7, r3
   22480:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   22482:	683b      	ldr	r3, [r7, #0]
   22484:	b2da      	uxtb	r2, r3
   22486:	2338      	movs	r3, #56	; 0x38
   22488:	18fb      	adds	r3, r7, r3
   2248a:	715a      	strb	r2, [r3, #5]
		len = 7;
   2248c:	2307      	movs	r3, #7
   2248e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   22490:	e080      	b.n	22594 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   22492:	68bb      	ldr	r3, [r7, #8]
   22494:	0c1b      	lsrs	r3, r3, #16
   22496:	b2da      	uxtb	r2, r3
   22498:	2338      	movs	r3, #56	; 0x38
   2249a:	18fb      	adds	r3, r7, r3
   2249c:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2249e:	68bb      	ldr	r3, [r7, #8]
   224a0:	0a1b      	lsrs	r3, r3, #8
   224a2:	b2da      	uxtb	r2, r3
   224a4:	2338      	movs	r3, #56	; 0x38
   224a6:	18fb      	adds	r3, r7, r3
   224a8:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   224aa:	68bb      	ldr	r3, [r7, #8]
   224ac:	b2da      	uxtb	r2, r3
   224ae:	2338      	movs	r3, #56	; 0x38
   224b0:	18fb      	adds	r3, r7, r3
   224b2:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   224b4:	683b      	ldr	r3, [r7, #0]
   224b6:	0c1b      	lsrs	r3, r3, #16
   224b8:	b2da      	uxtb	r2, r3
   224ba:	2338      	movs	r3, #56	; 0x38
   224bc:	18fb      	adds	r3, r7, r3
   224be:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   224c0:	683b      	ldr	r3, [r7, #0]
   224c2:	0a1b      	lsrs	r3, r3, #8
   224c4:	b2da      	uxtb	r2, r3
   224c6:	2338      	movs	r3, #56	; 0x38
   224c8:	18fb      	adds	r3, r7, r3
   224ca:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   224cc:	683b      	ldr	r3, [r7, #0]
   224ce:	b2da      	uxtb	r2, r3
   224d0:	2338      	movs	r3, #56	; 0x38
   224d2:	18fb      	adds	r3, r7, r3
   224d4:	719a      	strb	r2, [r3, #6]
		len = 8;
   224d6:	2308      	movs	r3, #8
   224d8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   224da:	e05b      	b.n	22594 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   224dc:	68bb      	ldr	r3, [r7, #8]
   224de:	0a1b      	lsrs	r3, r3, #8
   224e0:	b2da      	uxtb	r2, r3
   224e2:	2338      	movs	r3, #56	; 0x38
   224e4:	18fb      	adds	r3, r7, r3
   224e6:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   224e8:	2388      	movs	r3, #136	; 0x88
   224ea:	18fb      	adds	r3, r7, r3
   224ec:	781b      	ldrb	r3, [r3, #0]
   224ee:	2b01      	cmp	r3, #1
   224f0:	d109      	bne.n	22506 <spi_cmd_complete+0x1b6>
   224f2:	2338      	movs	r3, #56	; 0x38
   224f4:	18fb      	adds	r3, r7, r3
   224f6:	785b      	ldrb	r3, [r3, #1]
   224f8:	2280      	movs	r2, #128	; 0x80
   224fa:	4252      	negs	r2, r2
   224fc:	4313      	orrs	r3, r2
   224fe:	b2da      	uxtb	r2, r3
   22500:	2338      	movs	r3, #56	; 0x38
   22502:	18fb      	adds	r3, r7, r3
   22504:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   22506:	68bb      	ldr	r3, [r7, #8]
   22508:	b2da      	uxtb	r2, r3
   2250a:	2338      	movs	r3, #56	; 0x38
   2250c:	18fb      	adds	r3, r7, r3
   2250e:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   22510:	687b      	ldr	r3, [r7, #4]
   22512:	78da      	ldrb	r2, [r3, #3]
   22514:	2338      	movs	r3, #56	; 0x38
   22516:	18fb      	adds	r3, r7, r3
   22518:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   2251a:	687b      	ldr	r3, [r7, #4]
   2251c:	789a      	ldrb	r2, [r3, #2]
   2251e:	2338      	movs	r3, #56	; 0x38
   22520:	18fb      	adds	r3, r7, r3
   22522:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   22524:	687b      	ldr	r3, [r7, #4]
   22526:	785a      	ldrb	r2, [r3, #1]
   22528:	2338      	movs	r3, #56	; 0x38
   2252a:	18fb      	adds	r3, r7, r3
   2252c:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   2252e:	687b      	ldr	r3, [r7, #4]
   22530:	781a      	ldrb	r2, [r3, #0]
   22532:	2338      	movs	r3, #56	; 0x38
   22534:	18fb      	adds	r3, r7, r3
   22536:	719a      	strb	r2, [r3, #6]
		len = 8;
   22538:	2308      	movs	r3, #8
   2253a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2253c:	e02a      	b.n	22594 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   2253e:	68bb      	ldr	r3, [r7, #8]
   22540:	0c1b      	lsrs	r3, r3, #16
   22542:	b2da      	uxtb	r2, r3
   22544:	2338      	movs	r3, #56	; 0x38
   22546:	18fb      	adds	r3, r7, r3
   22548:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2254a:	68bb      	ldr	r3, [r7, #8]
   2254c:	0a1b      	lsrs	r3, r3, #8
   2254e:	b2da      	uxtb	r2, r3
   22550:	2338      	movs	r3, #56	; 0x38
   22552:	18fb      	adds	r3, r7, r3
   22554:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   22556:	68bb      	ldr	r3, [r7, #8]
   22558:	b2da      	uxtb	r2, r3
   2255a:	2338      	movs	r3, #56	; 0x38
   2255c:	18fb      	adds	r3, r7, r3
   2255e:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   22560:	687b      	ldr	r3, [r7, #4]
   22562:	78da      	ldrb	r2, [r3, #3]
   22564:	2338      	movs	r3, #56	; 0x38
   22566:	18fb      	adds	r3, r7, r3
   22568:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2256a:	687b      	ldr	r3, [r7, #4]
   2256c:	789a      	ldrb	r2, [r3, #2]
   2256e:	2338      	movs	r3, #56	; 0x38
   22570:	18fb      	adds	r3, r7, r3
   22572:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   22574:	687b      	ldr	r3, [r7, #4]
   22576:	785a      	ldrb	r2, [r3, #1]
   22578:	2338      	movs	r3, #56	; 0x38
   2257a:	18fb      	adds	r3, r7, r3
   2257c:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   2257e:	687b      	ldr	r3, [r7, #4]
   22580:	781a      	ldrb	r2, [r3, #0]
   22582:	2338      	movs	r3, #56	; 0x38
   22584:	18fb      	adds	r3, r7, r3
   22586:	71da      	strb	r2, [r3, #7]
		len = 9;
   22588:	2309      	movs	r3, #9
   2258a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2258c:	e002      	b.n	22594 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   2258e:	2300      	movs	r3, #0
   22590:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   22592:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   22594:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22596:	2b01      	cmp	r3, #1
   22598:	d001      	beq.n	2259e <spi_cmd_complete+0x24e>
		return result;
   2259a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2259c:	e33a      	b.n	22c14 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   2259e:	4b4d      	ldr	r3, [pc, #308]	; (226d4 <spi_cmd_complete+0x384>)
   225a0:	781b      	ldrb	r3, [r3, #0]
   225a2:	2b00      	cmp	r3, #0
   225a4:	d111      	bne.n	225ca <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   225a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   225a8:	1e5c      	subs	r4, r3, #1
   225aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   225ac:	3b01      	subs	r3, #1
   225ae:	001a      	movs	r2, r3
   225b0:	2338      	movs	r3, #56	; 0x38
   225b2:	18fb      	adds	r3, r7, r3
   225b4:	0019      	movs	r1, r3
   225b6:	207f      	movs	r0, #127	; 0x7f
   225b8:	4b47      	ldr	r3, [pc, #284]	; (226d8 <spi_cmd_complete+0x388>)
   225ba:	4798      	blx	r3
   225bc:	0003      	movs	r3, r0
   225be:	18db      	adds	r3, r3, r3
   225c0:	b2da      	uxtb	r2, r3
   225c2:	2338      	movs	r3, #56	; 0x38
   225c4:	18fb      	adds	r3, r7, r3
   225c6:	551a      	strb	r2, [r3, r4]
   225c8:	e002      	b.n	225d0 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   225ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   225cc:	3b01      	subs	r3, #1
   225ce:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   225d0:	230f      	movs	r3, #15
   225d2:	18fb      	adds	r3, r7, r3
   225d4:	781b      	ldrb	r3, [r3, #0]
   225d6:	2bcf      	cmp	r3, #207	; 0xcf
   225d8:	d009      	beq.n	225ee <spi_cmd_complete+0x29e>
   225da:	230f      	movs	r3, #15
   225dc:	18fb      	adds	r3, r7, r3
   225de:	781b      	ldrb	r3, [r3, #0]
   225e0:	2bc5      	cmp	r3, #197	; 0xc5
   225e2:	d004      	beq.n	225ee <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   225e4:	230f      	movs	r3, #15
   225e6:	18fb      	adds	r3, r7, r3
   225e8:	781b      	ldrb	r3, [r3, #0]
   225ea:	2bc6      	cmp	r3, #198	; 0xc6
   225ec:	d103      	bne.n	225f6 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   225ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   225f0:	3306      	adds	r3, #6
   225f2:	673b      	str	r3, [r7, #112]	; 0x70
   225f4:	e018      	b.n	22628 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   225f6:	230f      	movs	r3, #15
   225f8:	18fb      	adds	r3, r7, r3
   225fa:	781b      	ldrb	r3, [r3, #0]
   225fc:	2bc4      	cmp	r3, #196	; 0xc4
   225fe:	d004      	beq.n	2260a <spi_cmd_complete+0x2ba>
   22600:	230f      	movs	r3, #15
   22602:	18fb      	adds	r3, r7, r3
   22604:	781b      	ldrb	r3, [r3, #0]
   22606:	2bca      	cmp	r3, #202	; 0xca
   22608:	d10b      	bne.n	22622 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   2260a:	4b32      	ldr	r3, [pc, #200]	; (226d4 <spi_cmd_complete+0x384>)
   2260c:	781b      	ldrb	r3, [r3, #0]
   2260e:	2b00      	cmp	r3, #0
   22610:	d103      	bne.n	2261a <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   22612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22614:	330c      	adds	r3, #12
   22616:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   22618:	e006      	b.n	22628 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   2261a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2261c:	330a      	adds	r3, #10
   2261e:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   22620:	e002      	b.n	22628 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   22622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   22624:	3305      	adds	r3, #5
   22626:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   22628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2262a:	2b20      	cmp	r3, #32
   2262c:	d914      	bls.n	22658 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   2262e:	23f7      	movs	r3, #247	; 0xf7
   22630:	005a      	lsls	r2, r3, #1
   22632:	492a      	ldr	r1, [pc, #168]	; (226dc <spi_cmd_complete+0x38c>)
   22634:	4b2a      	ldr	r3, [pc, #168]	; (226e0 <spi_cmd_complete+0x390>)
   22636:	0018      	movs	r0, r3
   22638:	4b2a      	ldr	r3, [pc, #168]	; (226e4 <spi_cmd_complete+0x394>)
   2263a:	4798      	blx	r3
   2263c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2263e:	4b2a      	ldr	r3, [pc, #168]	; (226e8 <spi_cmd_complete+0x398>)
   22640:	2220      	movs	r2, #32
   22642:	0018      	movs	r0, r3
   22644:	4b27      	ldr	r3, [pc, #156]	; (226e4 <spi_cmd_complete+0x394>)
   22646:	4798      	blx	r3
   22648:	4b28      	ldr	r3, [pc, #160]	; (226ec <spi_cmd_complete+0x39c>)
   2264a:	0018      	movs	r0, r3
   2264c:	4b25      	ldr	r3, [pc, #148]	; (226e4 <spi_cmd_complete+0x394>)
   2264e:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   22650:	2300      	movs	r3, #0
   22652:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   22654:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22656:	e2dd      	b.n	22c14 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   22658:	2377      	movs	r3, #119	; 0x77
   2265a:	18fb      	adds	r3, r7, r3
   2265c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   2265e:	701a      	strb	r2, [r3, #0]
   22660:	e00d      	b.n	2267e <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   22662:	2377      	movs	r3, #119	; 0x77
   22664:	18fb      	adds	r3, r7, r3
   22666:	781b      	ldrb	r3, [r3, #0]
   22668:	2238      	movs	r2, #56	; 0x38
   2266a:	18ba      	adds	r2, r7, r2
   2266c:	2100      	movs	r1, #0
   2266e:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   22670:	2377      	movs	r3, #119	; 0x77
   22672:	18fb      	adds	r3, r7, r3
   22674:	781a      	ldrb	r2, [r3, #0]
   22676:	2377      	movs	r3, #119	; 0x77
   22678:	18fb      	adds	r3, r7, r3
   2267a:	3201      	adds	r2, #1
   2267c:	701a      	strb	r2, [r3, #0]
   2267e:	2377      	movs	r3, #119	; 0x77
   22680:	18fb      	adds	r3, r7, r3
   22682:	781a      	ldrb	r2, [r3, #0]
   22684:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22686:	429a      	cmp	r2, r3
   22688:	d3eb      	bcc.n	22662 <spi_cmd_complete+0x312>
	}
	rix = len;
   2268a:	2376      	movs	r3, #118	; 0x76
   2268c:	18fb      	adds	r3, r7, r3
   2268e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   22690:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   22692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22694:	b29a      	uxth	r2, r3
   22696:	2318      	movs	r3, #24
   22698:	18f9      	adds	r1, r7, r3
   2269a:	2338      	movs	r3, #56	; 0x38
   2269c:	18fb      	adds	r3, r7, r3
   2269e:	0018      	movs	r0, r3
   226a0:	4b13      	ldr	r3, [pc, #76]	; (226f0 <spi_cmd_complete+0x3a0>)
   226a2:	4798      	blx	r3
   226a4:	1e03      	subs	r3, r0, #0
   226a6:	d027      	beq.n	226f8 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   226a8:	23fa      	movs	r3, #250	; 0xfa
   226aa:	33ff      	adds	r3, #255	; 0xff
   226ac:	001a      	movs	r2, r3
   226ae:	490b      	ldr	r1, [pc, #44]	; (226dc <spi_cmd_complete+0x38c>)
   226b0:	4b0b      	ldr	r3, [pc, #44]	; (226e0 <spi_cmd_complete+0x390>)
   226b2:	0018      	movs	r0, r3
   226b4:	4b0b      	ldr	r3, [pc, #44]	; (226e4 <spi_cmd_complete+0x394>)
   226b6:	4798      	blx	r3
   226b8:	4b0e      	ldr	r3, [pc, #56]	; (226f4 <spi_cmd_complete+0x3a4>)
   226ba:	0018      	movs	r0, r3
   226bc:	4b09      	ldr	r3, [pc, #36]	; (226e4 <spi_cmd_complete+0x394>)
   226be:	4798      	blx	r3
   226c0:	4b0a      	ldr	r3, [pc, #40]	; (226ec <spi_cmd_complete+0x39c>)
   226c2:	0018      	movs	r0, r3
   226c4:	4b07      	ldr	r3, [pc, #28]	; (226e4 <spi_cmd_complete+0x394>)
   226c6:	4798      	blx	r3
		result = N_FAIL;
   226c8:	2300      	movs	r3, #0
   226ca:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   226cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   226ce:	e2a1      	b.n	22c14 <spi_cmd_complete+0x8c4>
   226d0:	000377f0 	.word	0x000377f0
   226d4:	20004128 	.word	0x20004128
   226d8:	00021d85 	.word	0x00021d85
   226dc:	00037850 	.word	0x00037850
   226e0:	0003723c 	.word	0x0003723c
   226e4:	0001c7d9 	.word	0x0001c7d9
   226e8:	00037304 	.word	0x00037304
   226ec:	0003727c 	.word	0x0003727c
   226f0:	00021d11 	.word	0x00021d11
   226f4:	00037250 	.word	0x00037250
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   226f8:	230f      	movs	r3, #15
   226fa:	18fb      	adds	r3, r7, r3
   226fc:	781b      	ldrb	r3, [r3, #0]
   226fe:	2bcf      	cmp	r3, #207	; 0xcf
   22700:	d009      	beq.n	22716 <spi_cmd_complete+0x3c6>
   22702:	230f      	movs	r3, #15
   22704:	18fb      	adds	r3, r7, r3
   22706:	781b      	ldrb	r3, [r3, #0]
   22708:	2bc5      	cmp	r3, #197	; 0xc5
   2270a:	d004      	beq.n	22716 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   2270c:	230f      	movs	r3, #15
   2270e:	18fb      	adds	r3, r7, r3
   22710:	781b      	ldrb	r3, [r3, #0]
   22712:	2bc6      	cmp	r3, #198	; 0xc6
   22714:	d106      	bne.n	22724 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   22716:	2376      	movs	r3, #118	; 0x76
   22718:	18fb      	adds	r3, r7, r3
   2271a:	781a      	ldrb	r2, [r3, #0]
   2271c:	2376      	movs	r3, #118	; 0x76
   2271e:	18fb      	adds	r3, r7, r3
   22720:	3201      	adds	r2, #1
   22722:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   22724:	2376      	movs	r3, #118	; 0x76
   22726:	18fb      	adds	r3, r7, r3
   22728:	781b      	ldrb	r3, [r3, #0]
   2272a:	2276      	movs	r2, #118	; 0x76
   2272c:	18ba      	adds	r2, r7, r2
   2272e:	1c59      	adds	r1, r3, #1
   22730:	7011      	strb	r1, [r2, #0]
   22732:	001a      	movs	r2, r3
   22734:	2318      	movs	r3, #24
   22736:	18fb      	adds	r3, r7, r3
   22738:	5c9a      	ldrb	r2, [r3, r2]
   2273a:	2317      	movs	r3, #23
   2273c:	18fb      	adds	r3, r7, r3
   2273e:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   22740:	2317      	movs	r3, #23
   22742:	18fb      	adds	r3, r7, r3
   22744:	781b      	ldrb	r3, [r3, #0]
   22746:	220f      	movs	r2, #15
   22748:	18ba      	adds	r2, r7, r2
   2274a:	7812      	ldrb	r2, [r2, #0]
   2274c:	429a      	cmp	r2, r3
   2274e:	d018      	beq.n	22782 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   22750:	4add      	ldr	r2, [pc, #884]	; (22ac8 <spi_cmd_complete+0x778>)
   22752:	49de      	ldr	r1, [pc, #888]	; (22acc <spi_cmd_complete+0x77c>)
   22754:	4bde      	ldr	r3, [pc, #888]	; (22ad0 <spi_cmd_complete+0x780>)
   22756:	0018      	movs	r0, r3
   22758:	4bde      	ldr	r3, [pc, #888]	; (22ad4 <spi_cmd_complete+0x784>)
   2275a:	4798      	blx	r3
   2275c:	230f      	movs	r3, #15
   2275e:	18fb      	adds	r3, r7, r3
   22760:	7819      	ldrb	r1, [r3, #0]
   22762:	2317      	movs	r3, #23
   22764:	18fb      	adds	r3, r7, r3
   22766:	781b      	ldrb	r3, [r3, #0]
   22768:	001a      	movs	r2, r3
   2276a:	4bdb      	ldr	r3, [pc, #876]	; (22ad8 <spi_cmd_complete+0x788>)
   2276c:	0018      	movs	r0, r3
   2276e:	4bd9      	ldr	r3, [pc, #868]	; (22ad4 <spi_cmd_complete+0x784>)
   22770:	4798      	blx	r3
   22772:	4bda      	ldr	r3, [pc, #872]	; (22adc <spi_cmd_complete+0x78c>)
   22774:	0018      	movs	r0, r3
   22776:	4bd7      	ldr	r3, [pc, #860]	; (22ad4 <spi_cmd_complete+0x784>)
   22778:	4798      	blx	r3
		result = N_FAIL;
   2277a:	2300      	movs	r3, #0
   2277c:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   2277e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22780:	e248      	b.n	22c14 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   22782:	2376      	movs	r3, #118	; 0x76
   22784:	18fb      	adds	r3, r7, r3
   22786:	781b      	ldrb	r3, [r3, #0]
   22788:	2276      	movs	r2, #118	; 0x76
   2278a:	18ba      	adds	r2, r7, r2
   2278c:	1c59      	adds	r1, r3, #1
   2278e:	7011      	strb	r1, [r2, #0]
   22790:	001a      	movs	r2, r3
   22792:	2318      	movs	r3, #24
   22794:	18fb      	adds	r3, r7, r3
   22796:	5c9a      	ldrb	r2, [r3, r2]
   22798:	2317      	movs	r3, #23
   2279a:	18fb      	adds	r3, r7, r3
   2279c:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   2279e:	2317      	movs	r3, #23
   227a0:	18fb      	adds	r3, r7, r3
   227a2:	781b      	ldrb	r3, [r3, #0]
   227a4:	2b00      	cmp	r3, #0
   227a6:	d016      	beq.n	227d6 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   227a8:	4acd      	ldr	r2, [pc, #820]	; (22ae0 <spi_cmd_complete+0x790>)
   227aa:	49c8      	ldr	r1, [pc, #800]	; (22acc <spi_cmd_complete+0x77c>)
   227ac:	4bc8      	ldr	r3, [pc, #800]	; (22ad0 <spi_cmd_complete+0x780>)
   227ae:	0018      	movs	r0, r3
   227b0:	4bc8      	ldr	r3, [pc, #800]	; (22ad4 <spi_cmd_complete+0x784>)
   227b2:	4798      	blx	r3
   227b4:	2317      	movs	r3, #23
   227b6:	18fb      	adds	r3, r7, r3
   227b8:	781b      	ldrb	r3, [r3, #0]
   227ba:	001a      	movs	r2, r3
   227bc:	4bc9      	ldr	r3, [pc, #804]	; (22ae4 <spi_cmd_complete+0x794>)
   227be:	0011      	movs	r1, r2
   227c0:	0018      	movs	r0, r3
   227c2:	4bc4      	ldr	r3, [pc, #784]	; (22ad4 <spi_cmd_complete+0x784>)
   227c4:	4798      	blx	r3
   227c6:	4bc5      	ldr	r3, [pc, #788]	; (22adc <spi_cmd_complete+0x78c>)
   227c8:	0018      	movs	r0, r3
   227ca:	4bc2      	ldr	r3, [pc, #776]	; (22ad4 <spi_cmd_complete+0x784>)
   227cc:	4798      	blx	r3
		result = N_FAIL;
   227ce:	2300      	movs	r3, #0
   227d0:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   227d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   227d4:	e21e      	b.n	22c14 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   227d6:	230f      	movs	r3, #15
   227d8:	18fb      	adds	r3, r7, r3
   227da:	781b      	ldrb	r3, [r3, #0]
   227dc:	2bc4      	cmp	r3, #196	; 0xc4
   227de:	d00f      	beq.n	22800 <spi_cmd_complete+0x4b0>
   227e0:	230f      	movs	r3, #15
   227e2:	18fb      	adds	r3, r7, r3
   227e4:	781b      	ldrb	r3, [r3, #0]
   227e6:	2bca      	cmp	r3, #202	; 0xca
   227e8:	d00a      	beq.n	22800 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   227ea:	230f      	movs	r3, #15
   227ec:	18fb      	adds	r3, r7, r3
   227ee:	781b      	ldrb	r3, [r3, #0]
   227f0:	2bc2      	cmp	r3, #194	; 0xc2
   227f2:	d005      	beq.n	22800 <spi_cmd_complete+0x4b0>
   227f4:	230f      	movs	r3, #15
   227f6:	18fb      	adds	r3, r7, r3
   227f8:	781b      	ldrb	r3, [r3, #0]
   227fa:	2bc8      	cmp	r3, #200	; 0xc8
   227fc:	d000      	beq.n	22800 <spi_cmd_complete+0x4b0>
   227fe:	e208      	b.n	22c12 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   22800:	230a      	movs	r3, #10
   22802:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   22804:	2376      	movs	r3, #118	; 0x76
   22806:	18fb      	adds	r3, r7, r3
   22808:	781a      	ldrb	r2, [r3, #0]
   2280a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2280c:	429a      	cmp	r2, r3
   2280e:	d218      	bcs.n	22842 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   22810:	2376      	movs	r3, #118	; 0x76
   22812:	18fb      	adds	r3, r7, r3
   22814:	781b      	ldrb	r3, [r3, #0]
   22816:	2276      	movs	r2, #118	; 0x76
   22818:	18ba      	adds	r2, r7, r2
   2281a:	1c59      	adds	r1, r3, #1
   2281c:	7011      	strb	r1, [r2, #0]
   2281e:	001a      	movs	r2, r3
   22820:	2318      	movs	r3, #24
   22822:	18fb      	adds	r3, r7, r3
   22824:	5c9a      	ldrb	r2, [r3, r2]
   22826:	2317      	movs	r3, #23
   22828:	18fb      	adds	r3, r7, r3
   2282a:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   2282c:	2317      	movs	r3, #23
   2282e:	18fb      	adds	r3, r7, r3
   22830:	781b      	ldrb	r3, [r3, #0]
   22832:	091b      	lsrs	r3, r3, #4
   22834:	b2db      	uxtb	r3, r3
   22836:	001a      	movs	r2, r3
   22838:	230f      	movs	r3, #15
   2283a:	4013      	ands	r3, r2
   2283c:	2b0f      	cmp	r3, #15
   2283e:	d103      	bne.n	22848 <spi_cmd_complete+0x4f8>
					break;
   22840:	e007      	b.n	22852 <spi_cmd_complete+0x502>
					retry = 0;
   22842:	2300      	movs	r3, #0
   22844:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   22846:	e004      	b.n	22852 <spi_cmd_complete+0x502>
			} while (retry--);
   22848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2284a:	1e5a      	subs	r2, r3, #1
   2284c:	667a      	str	r2, [r7, #100]	; 0x64
   2284e:	2b00      	cmp	r3, #0
   22850:	d1d8      	bne.n	22804 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   22852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22854:	2b00      	cmp	r3, #0
   22856:	dc18      	bgt.n	2288a <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   22858:	2395      	movs	r3, #149	; 0x95
   2285a:	009a      	lsls	r2, r3, #2
   2285c:	499b      	ldr	r1, [pc, #620]	; (22acc <spi_cmd_complete+0x77c>)
   2285e:	4b9c      	ldr	r3, [pc, #624]	; (22ad0 <spi_cmd_complete+0x780>)
   22860:	0018      	movs	r0, r3
   22862:	4b9c      	ldr	r3, [pc, #624]	; (22ad4 <spi_cmd_complete+0x784>)
   22864:	4798      	blx	r3
   22866:	2317      	movs	r3, #23
   22868:	18fb      	adds	r3, r7, r3
   2286a:	781b      	ldrb	r3, [r3, #0]
   2286c:	001a      	movs	r2, r3
   2286e:	4b9e      	ldr	r3, [pc, #632]	; (22ae8 <spi_cmd_complete+0x798>)
   22870:	0011      	movs	r1, r2
   22872:	0018      	movs	r0, r3
   22874:	4b97      	ldr	r3, [pc, #604]	; (22ad4 <spi_cmd_complete+0x784>)
   22876:	4798      	blx	r3
   22878:	4b98      	ldr	r3, [pc, #608]	; (22adc <spi_cmd_complete+0x78c>)
   2287a:	0018      	movs	r0, r3
   2287c:	4b95      	ldr	r3, [pc, #596]	; (22ad4 <spi_cmd_complete+0x784>)
   2287e:	4798      	blx	r3
				result = N_RESET;
   22880:	2301      	movs	r3, #1
   22882:	425b      	negs	r3, r3
   22884:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   22886:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22888:	e1c4      	b.n	22c14 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   2288a:	230f      	movs	r3, #15
   2288c:	18fb      	adds	r3, r7, r3
   2288e:	781b      	ldrb	r3, [r3, #0]
   22890:	2bc4      	cmp	r3, #196	; 0xc4
   22892:	d005      	beq.n	228a0 <spi_cmd_complete+0x550>
   22894:	230f      	movs	r3, #15
   22896:	18fb      	adds	r3, r7, r3
   22898:	781b      	ldrb	r3, [r3, #0]
   2289a:	2bca      	cmp	r3, #202	; 0xca
   2289c:	d000      	beq.n	228a0 <spi_cmd_complete+0x550>
   2289e:	e08e      	b.n	229be <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   228a0:	2376      	movs	r3, #118	; 0x76
   228a2:	18fb      	adds	r3, r7, r3
   228a4:	781b      	ldrb	r3, [r3, #0]
   228a6:	3303      	adds	r3, #3
   228a8:	001a      	movs	r2, r3
   228aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   228ac:	429a      	cmp	r2, r3
   228ae:	d23c      	bcs.n	2292a <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   228b0:	2376      	movs	r3, #118	; 0x76
   228b2:	18fb      	adds	r3, r7, r3
   228b4:	781b      	ldrb	r3, [r3, #0]
   228b6:	2276      	movs	r2, #118	; 0x76
   228b8:	18ba      	adds	r2, r7, r2
   228ba:	1c59      	adds	r1, r3, #1
   228bc:	7011      	strb	r1, [r2, #0]
   228be:	001a      	movs	r2, r3
   228c0:	2318      	movs	r3, #24
   228c2:	18fb      	adds	r3, r7, r3
   228c4:	5c9a      	ldrb	r2, [r3, r2]
   228c6:	687b      	ldr	r3, [r7, #4]
   228c8:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   228ca:	687b      	ldr	r3, [r7, #4]
   228cc:	1c5a      	adds	r2, r3, #1
   228ce:	2376      	movs	r3, #118	; 0x76
   228d0:	18fb      	adds	r3, r7, r3
   228d2:	781b      	ldrb	r3, [r3, #0]
   228d4:	2176      	movs	r1, #118	; 0x76
   228d6:	1879      	adds	r1, r7, r1
   228d8:	1c58      	adds	r0, r3, #1
   228da:	7008      	strb	r0, [r1, #0]
   228dc:	0019      	movs	r1, r3
   228de:	2318      	movs	r3, #24
   228e0:	18fb      	adds	r3, r7, r3
   228e2:	5c5b      	ldrb	r3, [r3, r1]
   228e4:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   228e6:	687b      	ldr	r3, [r7, #4]
   228e8:	1c9a      	adds	r2, r3, #2
   228ea:	2376      	movs	r3, #118	; 0x76
   228ec:	18fb      	adds	r3, r7, r3
   228ee:	781b      	ldrb	r3, [r3, #0]
   228f0:	2176      	movs	r1, #118	; 0x76
   228f2:	1879      	adds	r1, r7, r1
   228f4:	1c58      	adds	r0, r3, #1
   228f6:	7008      	strb	r0, [r1, #0]
   228f8:	0019      	movs	r1, r3
   228fa:	2318      	movs	r3, #24
   228fc:	18fb      	adds	r3, r7, r3
   228fe:	5c5b      	ldrb	r3, [r3, r1]
   22900:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   22902:	687b      	ldr	r3, [r7, #4]
   22904:	1cda      	adds	r2, r3, #3
   22906:	2376      	movs	r3, #118	; 0x76
   22908:	18fb      	adds	r3, r7, r3
   2290a:	781b      	ldrb	r3, [r3, #0]
   2290c:	2176      	movs	r1, #118	; 0x76
   2290e:	1879      	adds	r1, r7, r1
   22910:	1c58      	adds	r0, r3, #1
   22912:	7008      	strb	r0, [r1, #0]
   22914:	0019      	movs	r1, r3
   22916:	2318      	movs	r3, #24
   22918:	18fb      	adds	r3, r7, r3
   2291a:	5c5b      	ldrb	r3, [r3, r1]
   2291c:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   2291e:	4b73      	ldr	r3, [pc, #460]	; (22aec <spi_cmd_complete+0x79c>)
   22920:	781b      	ldrb	r3, [r3, #0]
   22922:	2b00      	cmp	r3, #0
   22924:	d000      	beq.n	22928 <spi_cmd_complete+0x5d8>
   22926:	e174      	b.n	22c12 <spi_cmd_complete+0x8c2>
   22928:	e011      	b.n	2294e <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   2292a:	4a71      	ldr	r2, [pc, #452]	; (22af0 <spi_cmd_complete+0x7a0>)
   2292c:	4967      	ldr	r1, [pc, #412]	; (22acc <spi_cmd_complete+0x77c>)
   2292e:	4b68      	ldr	r3, [pc, #416]	; (22ad0 <spi_cmd_complete+0x780>)
   22930:	0018      	movs	r0, r3
   22932:	4b68      	ldr	r3, [pc, #416]	; (22ad4 <spi_cmd_complete+0x784>)
   22934:	4798      	blx	r3
   22936:	4b6f      	ldr	r3, [pc, #444]	; (22af4 <spi_cmd_complete+0x7a4>)
   22938:	0018      	movs	r0, r3
   2293a:	4b66      	ldr	r3, [pc, #408]	; (22ad4 <spi_cmd_complete+0x784>)
   2293c:	4798      	blx	r3
   2293e:	4b67      	ldr	r3, [pc, #412]	; (22adc <spi_cmd_complete+0x78c>)
   22940:	0018      	movs	r0, r3
   22942:	4b64      	ldr	r3, [pc, #400]	; (22ad4 <spi_cmd_complete+0x784>)
   22944:	4798      	blx	r3
					result = N_FAIL;
   22946:	2300      	movs	r3, #0
   22948:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   2294a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2294c:	e162      	b.n	22c14 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   2294e:	2376      	movs	r3, #118	; 0x76
   22950:	18fb      	adds	r3, r7, r3
   22952:	781b      	ldrb	r3, [r3, #0]
   22954:	3301      	adds	r3, #1
   22956:	001a      	movs	r2, r3
   22958:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2295a:	429a      	cmp	r2, r3
   2295c:	d21c      	bcs.n	22998 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   2295e:	2376      	movs	r3, #118	; 0x76
   22960:	18fb      	adds	r3, r7, r3
   22962:	781b      	ldrb	r3, [r3, #0]
   22964:	2276      	movs	r2, #118	; 0x76
   22966:	18ba      	adds	r2, r7, r2
   22968:	1c59      	adds	r1, r3, #1
   2296a:	7011      	strb	r1, [r2, #0]
   2296c:	001a      	movs	r2, r3
   2296e:	2318      	movs	r3, #24
   22970:	18fb      	adds	r3, r7, r3
   22972:	5c9a      	ldrb	r2, [r3, r2]
   22974:	2314      	movs	r3, #20
   22976:	18fb      	adds	r3, r7, r3
   22978:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   2297a:	2376      	movs	r3, #118	; 0x76
   2297c:	18fb      	adds	r3, r7, r3
   2297e:	781b      	ldrb	r3, [r3, #0]
   22980:	2276      	movs	r2, #118	; 0x76
   22982:	18ba      	adds	r2, r7, r2
   22984:	1c59      	adds	r1, r3, #1
   22986:	7011      	strb	r1, [r2, #0]
   22988:	001a      	movs	r2, r3
   2298a:	2318      	movs	r3, #24
   2298c:	18fb      	adds	r3, r7, r3
   2298e:	5c9a      	ldrb	r2, [r3, r2]
   22990:	2314      	movs	r3, #20
   22992:	18fb      	adds	r3, r7, r3
   22994:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   22996:	e13c      	b.n	22c12 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   22998:	239c      	movs	r3, #156	; 0x9c
   2299a:	009a      	lsls	r2, r3, #2
   2299c:	494b      	ldr	r1, [pc, #300]	; (22acc <spi_cmd_complete+0x77c>)
   2299e:	4b4c      	ldr	r3, [pc, #304]	; (22ad0 <spi_cmd_complete+0x780>)
   229a0:	0018      	movs	r0, r3
   229a2:	4b4c      	ldr	r3, [pc, #304]	; (22ad4 <spi_cmd_complete+0x784>)
   229a4:	4798      	blx	r3
   229a6:	4b54      	ldr	r3, [pc, #336]	; (22af8 <spi_cmd_complete+0x7a8>)
   229a8:	0018      	movs	r0, r3
   229aa:	4b4a      	ldr	r3, [pc, #296]	; (22ad4 <spi_cmd_complete+0x784>)
   229ac:	4798      	blx	r3
   229ae:	4b4b      	ldr	r3, [pc, #300]	; (22adc <spi_cmd_complete+0x78c>)
   229b0:	0018      	movs	r0, r3
   229b2:	4b48      	ldr	r3, [pc, #288]	; (22ad4 <spi_cmd_complete+0x784>)
   229b4:	4798      	blx	r3
						result = N_FAIL;
   229b6:	2300      	movs	r3, #0
   229b8:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   229ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   229bc:	e12a      	b.n	22c14 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   229be:	230f      	movs	r3, #15
   229c0:	18fb      	adds	r3, r7, r3
   229c2:	781b      	ldrb	r3, [r3, #0]
   229c4:	2bc2      	cmp	r3, #194	; 0xc2
   229c6:	d005      	beq.n	229d4 <spi_cmd_complete+0x684>
   229c8:	230f      	movs	r3, #15
   229ca:	18fb      	adds	r3, r7, r3
   229cc:	781b      	ldrb	r3, [r3, #0]
   229ce:	2bc8      	cmp	r3, #200	; 0xc8
   229d0:	d000      	beq.n	229d4 <spi_cmd_complete+0x684>
   229d2:	e11e      	b.n	22c12 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   229d4:	2300      	movs	r3, #0
   229d6:	663b      	str	r3, [r7, #96]	; 0x60
   229d8:	e011      	b.n	229fe <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   229da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   229dc:	1c5a      	adds	r2, r3, #1
   229de:	663a      	str	r2, [r7, #96]	; 0x60
   229e0:	001a      	movs	r2, r3
   229e2:	687b      	ldr	r3, [r7, #4]
   229e4:	189a      	adds	r2, r3, r2
   229e6:	2376      	movs	r3, #118	; 0x76
   229e8:	18fb      	adds	r3, r7, r3
   229ea:	781b      	ldrb	r3, [r3, #0]
   229ec:	2176      	movs	r1, #118	; 0x76
   229ee:	1879      	adds	r1, r7, r1
   229f0:	1c58      	adds	r0, r3, #1
   229f2:	7008      	strb	r0, [r1, #0]
   229f4:	0019      	movs	r1, r3
   229f6:	2318      	movs	r3, #24
   229f8:	18fb      	adds	r3, r7, r3
   229fa:	5c5b      	ldrb	r3, [r3, r1]
   229fc:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   229fe:	2376      	movs	r3, #118	; 0x76
   22a00:	18fb      	adds	r3, r7, r3
   22a02:	781a      	ldrb	r2, [r3, #0]
   22a04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   22a06:	429a      	cmp	r2, r3
   22a08:	d203      	bcs.n	22a12 <spi_cmd_complete+0x6c2>
   22a0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   22a0c:	683b      	ldr	r3, [r7, #0]
   22a0e:	429a      	cmp	r2, r3
   22a10:	d3e3      	bcc.n	229da <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   22a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22a14:	683a      	ldr	r2, [r7, #0]
   22a16:	1ad3      	subs	r3, r2, r3
   22a18:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   22a1a:	683b      	ldr	r3, [r7, #0]
   22a1c:	2b00      	cmp	r3, #0
   22a1e:	d100      	bne.n	22a22 <spi_cmd_complete+0x6d2>
   22a20:	e0f1      	b.n	22c06 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   22a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22a24:	2280      	movs	r2, #128	; 0x80
   22a26:	0192      	lsls	r2, r2, #6
   22a28:	1ad3      	subs	r3, r2, r3
   22a2a:	001a      	movs	r2, r3
   22a2c:	683b      	ldr	r3, [r7, #0]
   22a2e:	429a      	cmp	r2, r3
   22a30:	d302      	bcc.n	22a38 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   22a32:	683b      	ldr	r3, [r7, #0]
   22a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   22a36:	e004      	b.n	22a42 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   22a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22a3a:	2280      	movs	r2, #128	; 0x80
   22a3c:	0192      	lsls	r2, r2, #6
   22a3e:	1ad3      	subs	r3, r2, r3
   22a40:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   22a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22a44:	687a      	ldr	r2, [r7, #4]
   22a46:	18d3      	adds	r3, r2, r3
   22a48:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   22a4a:	b292      	uxth	r2, r2
   22a4c:	0011      	movs	r1, r2
   22a4e:	0018      	movs	r0, r3
   22a50:	4b2a      	ldr	r3, [pc, #168]	; (22afc <spi_cmd_complete+0x7ac>)
   22a52:	4798      	blx	r3
   22a54:	1e03      	subs	r3, r0, #0
   22a56:	d010      	beq.n	22a7a <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   22a58:	4a29      	ldr	r2, [pc, #164]	; (22b00 <spi_cmd_complete+0x7b0>)
   22a5a:	491c      	ldr	r1, [pc, #112]	; (22acc <spi_cmd_complete+0x77c>)
   22a5c:	4b1c      	ldr	r3, [pc, #112]	; (22ad0 <spi_cmd_complete+0x780>)
   22a5e:	0018      	movs	r0, r3
   22a60:	4b1c      	ldr	r3, [pc, #112]	; (22ad4 <spi_cmd_complete+0x784>)
   22a62:	4798      	blx	r3
   22a64:	4b27      	ldr	r3, [pc, #156]	; (22b04 <spi_cmd_complete+0x7b4>)
   22a66:	0018      	movs	r0, r3
   22a68:	4b1a      	ldr	r3, [pc, #104]	; (22ad4 <spi_cmd_complete+0x784>)
   22a6a:	4798      	blx	r3
   22a6c:	4b1b      	ldr	r3, [pc, #108]	; (22adc <spi_cmd_complete+0x78c>)
   22a6e:	0018      	movs	r0, r3
   22a70:	4b18      	ldr	r3, [pc, #96]	; (22ad4 <spi_cmd_complete+0x784>)
   22a72:	4798      	blx	r3
						result = N_FAIL;
   22a74:	2300      	movs	r3, #0
   22a76:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   22a78:	e0cb      	b.n	22c12 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   22a7a:	4b1c      	ldr	r3, [pc, #112]	; (22aec <spi_cmd_complete+0x79c>)
   22a7c:	781b      	ldrb	r3, [r3, #0]
   22a7e:	2b00      	cmp	r3, #0
   22a80:	d119      	bne.n	22ab6 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   22a82:	2314      	movs	r3, #20
   22a84:	18fb      	adds	r3, r7, r3
   22a86:	2102      	movs	r1, #2
   22a88:	0018      	movs	r0, r3
   22a8a:	4b1c      	ldr	r3, [pc, #112]	; (22afc <spi_cmd_complete+0x7ac>)
   22a8c:	4798      	blx	r3
   22a8e:	1e03      	subs	r3, r0, #0
   22a90:	d011      	beq.n	22ab6 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   22a92:	23a6      	movs	r3, #166	; 0xa6
   22a94:	009a      	lsls	r2, r3, #2
   22a96:	490d      	ldr	r1, [pc, #52]	; (22acc <spi_cmd_complete+0x77c>)
   22a98:	4b0d      	ldr	r3, [pc, #52]	; (22ad0 <spi_cmd_complete+0x780>)
   22a9a:	0018      	movs	r0, r3
   22a9c:	4b0d      	ldr	r3, [pc, #52]	; (22ad4 <spi_cmd_complete+0x784>)
   22a9e:	4798      	blx	r3
   22aa0:	4b19      	ldr	r3, [pc, #100]	; (22b08 <spi_cmd_complete+0x7b8>)
   22aa2:	0018      	movs	r0, r3
   22aa4:	4b0b      	ldr	r3, [pc, #44]	; (22ad4 <spi_cmd_complete+0x784>)
   22aa6:	4798      	blx	r3
   22aa8:	4b0c      	ldr	r3, [pc, #48]	; (22adc <spi_cmd_complete+0x78c>)
   22aaa:	0018      	movs	r0, r3
   22aac:	4b09      	ldr	r3, [pc, #36]	; (22ad4 <spi_cmd_complete+0x784>)
   22aae:	4798      	blx	r3
							result = N_FAIL;
   22ab0:	2300      	movs	r3, #0
   22ab2:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   22ab4:	e0ad      	b.n	22c12 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   22ab6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   22ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22aba:	18d3      	adds	r3, r2, r3
   22abc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   22abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   22ac0:	683a      	ldr	r2, [r7, #0]
   22ac2:	1ad3      	subs	r3, r2, r3
   22ac4:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   22ac6:	e09e      	b.n	22c06 <spi_cmd_complete+0x8b6>
   22ac8:	0000022f 	.word	0x0000022f
   22acc:	00037850 	.word	0x00037850
   22ad0:	0003723c 	.word	0x0003723c
   22ad4:	0001c7d9 	.word	0x0001c7d9
   22ad8:	00037334 	.word	0x00037334
   22adc:	0003727c 	.word	0x0003727c
   22ae0:	00000239 	.word	0x00000239
   22ae4:	00037370 	.word	0x00037370
   22ae8:	000373a4 	.word	0x000373a4
   22aec:	20004128 	.word	0x20004128
   22af0:	00000263 	.word	0x00000263
   22af4:	000373d4 	.word	0x000373d4
   22af8:	00037404 	.word	0x00037404
   22afc:	00021c89 	.word	0x00021c89
   22b00:	0000028e 	.word	0x0000028e
   22b04:	00037434 	.word	0x00037434
   22b08:	00037468 	.word	0x00037468
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   22b0c:	683a      	ldr	r2, [r7, #0]
   22b0e:	2380      	movs	r3, #128	; 0x80
   22b10:	019b      	lsls	r3, r3, #6
   22b12:	429a      	cmp	r2, r3
   22b14:	d802      	bhi.n	22b1c <spi_cmd_complete+0x7cc>
						nbytes = sz;
   22b16:	683b      	ldr	r3, [r7, #0]
   22b18:	65bb      	str	r3, [r7, #88]	; 0x58
   22b1a:	e002      	b.n	22b22 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   22b1c:	2380      	movs	r3, #128	; 0x80
   22b1e:	019b      	lsls	r3, r3, #6
   22b20:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   22b22:	230a      	movs	r3, #10
   22b24:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   22b26:	2317      	movs	r3, #23
   22b28:	18fb      	adds	r3, r7, r3
   22b2a:	2101      	movs	r1, #1
   22b2c:	0018      	movs	r0, r3
   22b2e:	4b3b      	ldr	r3, [pc, #236]	; (22c1c <spi_cmd_complete+0x8cc>)
   22b30:	4798      	blx	r3
   22b32:	1e03      	subs	r3, r0, #0
   22b34:	d011      	beq.n	22b5a <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   22b36:	23ae      	movs	r3, #174	; 0xae
   22b38:	009a      	lsls	r2, r3, #2
   22b3a:	4939      	ldr	r1, [pc, #228]	; (22c20 <spi_cmd_complete+0x8d0>)
   22b3c:	4b39      	ldr	r3, [pc, #228]	; (22c24 <spi_cmd_complete+0x8d4>)
   22b3e:	0018      	movs	r0, r3
   22b40:	4b39      	ldr	r3, [pc, #228]	; (22c28 <spi_cmd_complete+0x8d8>)
   22b42:	4798      	blx	r3
   22b44:	4b39      	ldr	r3, [pc, #228]	; (22c2c <spi_cmd_complete+0x8dc>)
   22b46:	0018      	movs	r0, r3
   22b48:	4b37      	ldr	r3, [pc, #220]	; (22c28 <spi_cmd_complete+0x8d8>)
   22b4a:	4798      	blx	r3
   22b4c:	4b38      	ldr	r3, [pc, #224]	; (22c30 <spi_cmd_complete+0x8e0>)
   22b4e:	0018      	movs	r0, r3
   22b50:	4b35      	ldr	r3, [pc, #212]	; (22c28 <spi_cmd_complete+0x8d8>)
   22b52:	4798      	blx	r3
							result = N_FAIL;
   22b54:	2300      	movs	r3, #0
   22b56:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   22b58:	e010      	b.n	22b7c <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   22b5a:	2317      	movs	r3, #23
   22b5c:	18fb      	adds	r3, r7, r3
   22b5e:	781b      	ldrb	r3, [r3, #0]
   22b60:	091b      	lsrs	r3, r3, #4
   22b62:	b2db      	uxtb	r3, r3
   22b64:	001a      	movs	r2, r3
   22b66:	230f      	movs	r3, #15
   22b68:	4013      	ands	r3, r2
   22b6a:	2b0f      	cmp	r3, #15
   22b6c:	d005      	beq.n	22b7a <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   22b6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   22b70:	1e5a      	subs	r2, r3, #1
   22b72:	667a      	str	r2, [r7, #100]	; 0x64
   22b74:	2b00      	cmp	r3, #0
   22b76:	d1d6      	bne.n	22b26 <spi_cmd_complete+0x7d6>
   22b78:	e000      	b.n	22b7c <spi_cmd_complete+0x82c>
							break;
   22b7a:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   22b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   22b7e:	2b00      	cmp	r3, #0
   22b80:	d046      	beq.n	22c10 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   22b82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   22b84:	687a      	ldr	r2, [r7, #4]
   22b86:	18d3      	adds	r3, r2, r3
   22b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
   22b8a:	b292      	uxth	r2, r2
   22b8c:	0011      	movs	r1, r2
   22b8e:	0018      	movs	r0, r3
   22b90:	4b22      	ldr	r3, [pc, #136]	; (22c1c <spi_cmd_complete+0x8cc>)
   22b92:	4798      	blx	r3
   22b94:	1e03      	subs	r3, r0, #0
   22b96:	d011      	beq.n	22bbc <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   22b98:	23b2      	movs	r3, #178	; 0xb2
   22b9a:	009a      	lsls	r2, r3, #2
   22b9c:	4920      	ldr	r1, [pc, #128]	; (22c20 <spi_cmd_complete+0x8d0>)
   22b9e:	4b21      	ldr	r3, [pc, #132]	; (22c24 <spi_cmd_complete+0x8d4>)
   22ba0:	0018      	movs	r0, r3
   22ba2:	4b21      	ldr	r3, [pc, #132]	; (22c28 <spi_cmd_complete+0x8d8>)
   22ba4:	4798      	blx	r3
   22ba6:	4b23      	ldr	r3, [pc, #140]	; (22c34 <spi_cmd_complete+0x8e4>)
   22ba8:	0018      	movs	r0, r3
   22baa:	4b1f      	ldr	r3, [pc, #124]	; (22c28 <spi_cmd_complete+0x8d8>)
   22bac:	4798      	blx	r3
   22bae:	4b20      	ldr	r3, [pc, #128]	; (22c30 <spi_cmd_complete+0x8e0>)
   22bb0:	0018      	movs	r0, r3
   22bb2:	4b1d      	ldr	r3, [pc, #116]	; (22c28 <spi_cmd_complete+0x8d8>)
   22bb4:	4798      	blx	r3
						result = N_FAIL;
   22bb6:	2300      	movs	r3, #0
   22bb8:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   22bba:	e02a      	b.n	22c12 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   22bbc:	4b1e      	ldr	r3, [pc, #120]	; (22c38 <spi_cmd_complete+0x8e8>)
   22bbe:	781b      	ldrb	r3, [r3, #0]
   22bc0:	2b00      	cmp	r3, #0
   22bc2:	d118      	bne.n	22bf6 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   22bc4:	2314      	movs	r3, #20
   22bc6:	18fb      	adds	r3, r7, r3
   22bc8:	2102      	movs	r1, #2
   22bca:	0018      	movs	r0, r3
   22bcc:	4b13      	ldr	r3, [pc, #76]	; (22c1c <spi_cmd_complete+0x8cc>)
   22bce:	4798      	blx	r3
   22bd0:	1e03      	subs	r3, r0, #0
   22bd2:	d010      	beq.n	22bf6 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   22bd4:	4a19      	ldr	r2, [pc, #100]	; (22c3c <spi_cmd_complete+0x8ec>)
   22bd6:	4912      	ldr	r1, [pc, #72]	; (22c20 <spi_cmd_complete+0x8d0>)
   22bd8:	4b12      	ldr	r3, [pc, #72]	; (22c24 <spi_cmd_complete+0x8d4>)
   22bda:	0018      	movs	r0, r3
   22bdc:	4b12      	ldr	r3, [pc, #72]	; (22c28 <spi_cmd_complete+0x8d8>)
   22bde:	4798      	blx	r3
   22be0:	4b17      	ldr	r3, [pc, #92]	; (22c40 <spi_cmd_complete+0x8f0>)
   22be2:	0018      	movs	r0, r3
   22be4:	4b10      	ldr	r3, [pc, #64]	; (22c28 <spi_cmd_complete+0x8d8>)
   22be6:	4798      	blx	r3
   22be8:	4b11      	ldr	r3, [pc, #68]	; (22c30 <spi_cmd_complete+0x8e0>)
   22bea:	0018      	movs	r0, r3
   22bec:	4b0e      	ldr	r3, [pc, #56]	; (22c28 <spi_cmd_complete+0x8d8>)
   22bee:	4798      	blx	r3
							result = N_FAIL;
   22bf0:	2300      	movs	r3, #0
   22bf2:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   22bf4:	e00d      	b.n	22c12 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   22bf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   22bf8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   22bfa:	18d3      	adds	r3, r2, r3
   22bfc:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   22bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   22c00:	683a      	ldr	r2, [r7, #0]
   22c02:	1ad3      	subs	r3, r2, r3
   22c04:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   22c06:	683b      	ldr	r3, [r7, #0]
   22c08:	2b00      	cmp	r3, #0
   22c0a:	d000      	beq.n	22c0e <spi_cmd_complete+0x8be>
   22c0c:	e77e      	b.n	22b0c <spi_cmd_complete+0x7bc>
   22c0e:	e000      	b.n	22c12 <spi_cmd_complete+0x8c2>
						break;
   22c10:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   22c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   22c14:	0018      	movs	r0, r3
   22c16:	46bd      	mov	sp, r7
   22c18:	b01f      	add	sp, #124	; 0x7c
   22c1a:	bd90      	pop	{r4, r7, pc}
   22c1c:	00021c89 	.word	0x00021c89
   22c20:	00037850 	.word	0x00037850
   22c24:	0003723c 	.word	0x0003723c
   22c28:	0001c7d9 	.word	0x0001c7d9
   22c2c:	000374a0 	.word	0x000374a0
   22c30:	0003727c 	.word	0x0003727c
   22c34:	00037434 	.word	0x00037434
   22c38:	20004128 	.word	0x20004128
   22c3c:	000002d2 	.word	0x000002d2
   22c40:	00037468 	.word	0x00037468

00022c44 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   22c44:	b580      	push	{r7, lr}
   22c46:	b086      	sub	sp, #24
   22c48:	af00      	add	r7, sp, #0
   22c4a:	6078      	str	r0, [r7, #4]
   22c4c:	000a      	movs	r2, r1
   22c4e:	1cbb      	adds	r3, r7, #2
   22c50:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   22c52:	2313      	movs	r3, #19
   22c54:	18fb      	adds	r3, r7, r3
   22c56:	2201      	movs	r2, #1
   22c58:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   22c5a:	230c      	movs	r3, #12
   22c5c:	18fb      	adds	r3, r7, r3
   22c5e:	2200      	movs	r2, #0
   22c60:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   22c62:	2316      	movs	r3, #22
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	2200      	movs	r2, #0
   22c68:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   22c6a:	1cbb      	adds	r3, r7, #2
   22c6c:	881a      	ldrh	r2, [r3, #0]
   22c6e:	2380      	movs	r3, #128	; 0x80
   22c70:	019b      	lsls	r3, r3, #6
   22c72:	429a      	cmp	r2, r3
   22c74:	d805      	bhi.n	22c82 <spi_data_write+0x3e>
			nbytes = sz;
   22c76:	2314      	movs	r3, #20
   22c78:	18fb      	adds	r3, r7, r3
   22c7a:	1cba      	adds	r2, r7, #2
   22c7c:	8812      	ldrh	r2, [r2, #0]
   22c7e:	801a      	strh	r2, [r3, #0]
   22c80:	e004      	b.n	22c8c <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   22c82:	2314      	movs	r3, #20
   22c84:	18fb      	adds	r3, r7, r3
   22c86:	2280      	movs	r2, #128	; 0x80
   22c88:	0192      	lsls	r2, r2, #6
   22c8a:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   22c8c:	2311      	movs	r3, #17
   22c8e:	18fb      	adds	r3, r7, r3
   22c90:	22f0      	movs	r2, #240	; 0xf0
   22c92:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   22c94:	2316      	movs	r3, #22
   22c96:	18fb      	adds	r3, r7, r3
   22c98:	2200      	movs	r2, #0
   22c9a:	5e9b      	ldrsh	r3, [r3, r2]
   22c9c:	2b00      	cmp	r3, #0
   22c9e:	d10f      	bne.n	22cc0 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   22ca0:	1cbb      	adds	r3, r7, #2
   22ca2:	881a      	ldrh	r2, [r3, #0]
   22ca4:	2380      	movs	r3, #128	; 0x80
   22ca6:	019b      	lsls	r3, r3, #6
   22ca8:	429a      	cmp	r2, r3
   22caa:	d804      	bhi.n	22cb6 <spi_data_write+0x72>
				order = 0x3;
   22cac:	2312      	movs	r3, #18
   22cae:	18fb      	adds	r3, r7, r3
   22cb0:	2203      	movs	r2, #3
   22cb2:	701a      	strb	r2, [r3, #0]
   22cb4:	e013      	b.n	22cde <spi_data_write+0x9a>
			else
				order = 0x1;
   22cb6:	2312      	movs	r3, #18
   22cb8:	18fb      	adds	r3, r7, r3
   22cba:	2201      	movs	r2, #1
   22cbc:	701a      	strb	r2, [r3, #0]
   22cbe:	e00e      	b.n	22cde <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   22cc0:	1cbb      	adds	r3, r7, #2
   22cc2:	881a      	ldrh	r2, [r3, #0]
   22cc4:	2380      	movs	r3, #128	; 0x80
   22cc6:	019b      	lsls	r3, r3, #6
   22cc8:	429a      	cmp	r2, r3
   22cca:	d804      	bhi.n	22cd6 <spi_data_write+0x92>
				order = 0x3;
   22ccc:	2312      	movs	r3, #18
   22cce:	18fb      	adds	r3, r7, r3
   22cd0:	2203      	movs	r2, #3
   22cd2:	701a      	strb	r2, [r3, #0]
   22cd4:	e003      	b.n	22cde <spi_data_write+0x9a>
			else
				order = 0x2;
   22cd6:	2312      	movs	r3, #18
   22cd8:	18fb      	adds	r3, r7, r3
   22cda:	2202      	movs	r2, #2
   22cdc:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   22cde:	2311      	movs	r3, #17
   22ce0:	18fb      	adds	r3, r7, r3
   22ce2:	781a      	ldrb	r2, [r3, #0]
   22ce4:	2312      	movs	r3, #18
   22ce6:	18fb      	adds	r3, r7, r3
   22ce8:	781b      	ldrb	r3, [r3, #0]
   22cea:	4313      	orrs	r3, r2
   22cec:	b2da      	uxtb	r2, r3
   22cee:	2311      	movs	r3, #17
   22cf0:	18fb      	adds	r3, r7, r3
   22cf2:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   22cf4:	2311      	movs	r3, #17
   22cf6:	18fb      	adds	r3, r7, r3
   22cf8:	2101      	movs	r1, #1
   22cfa:	0018      	movs	r0, r3
   22cfc:	4b3c      	ldr	r3, [pc, #240]	; (22df0 <spi_data_write+0x1ac>)
   22cfe:	4798      	blx	r3
   22d00:	1e03      	subs	r3, r0, #0
   22d02:	d012      	beq.n	22d2a <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   22d04:	4a3b      	ldr	r2, [pc, #236]	; (22df4 <spi_data_write+0x1b0>)
   22d06:	493c      	ldr	r1, [pc, #240]	; (22df8 <spi_data_write+0x1b4>)
   22d08:	4b3c      	ldr	r3, [pc, #240]	; (22dfc <spi_data_write+0x1b8>)
   22d0a:	0018      	movs	r0, r3
   22d0c:	4b3c      	ldr	r3, [pc, #240]	; (22e00 <spi_data_write+0x1bc>)
   22d0e:	4798      	blx	r3
   22d10:	4b3c      	ldr	r3, [pc, #240]	; (22e04 <spi_data_write+0x1c0>)
   22d12:	0018      	movs	r0, r3
   22d14:	4b3a      	ldr	r3, [pc, #232]	; (22e00 <spi_data_write+0x1bc>)
   22d16:	4798      	blx	r3
   22d18:	4b3b      	ldr	r3, [pc, #236]	; (22e08 <spi_data_write+0x1c4>)
   22d1a:	0018      	movs	r0, r3
   22d1c:	4b38      	ldr	r3, [pc, #224]	; (22e00 <spi_data_write+0x1bc>)
   22d1e:	4798      	blx	r3
			result = N_FAIL;
   22d20:	2313      	movs	r3, #19
   22d22:	18fb      	adds	r3, r7, r3
   22d24:	2200      	movs	r2, #0
   22d26:	701a      	strb	r2, [r3, #0]
			break;
   22d28:	e059      	b.n	22dde <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   22d2a:	2316      	movs	r3, #22
   22d2c:	18fb      	adds	r3, r7, r3
   22d2e:	2200      	movs	r2, #0
   22d30:	5e9b      	ldrsh	r3, [r3, r2]
   22d32:	687a      	ldr	r2, [r7, #4]
   22d34:	18d2      	adds	r2, r2, r3
   22d36:	2314      	movs	r3, #20
   22d38:	18fb      	adds	r3, r7, r3
   22d3a:	881b      	ldrh	r3, [r3, #0]
   22d3c:	0019      	movs	r1, r3
   22d3e:	0010      	movs	r0, r2
   22d40:	4b2b      	ldr	r3, [pc, #172]	; (22df0 <spi_data_write+0x1ac>)
   22d42:	4798      	blx	r3
   22d44:	1e03      	subs	r3, r0, #0
   22d46:	d012      	beq.n	22d6e <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   22d48:	4a30      	ldr	r2, [pc, #192]	; (22e0c <spi_data_write+0x1c8>)
   22d4a:	492b      	ldr	r1, [pc, #172]	; (22df8 <spi_data_write+0x1b4>)
   22d4c:	4b2b      	ldr	r3, [pc, #172]	; (22dfc <spi_data_write+0x1b8>)
   22d4e:	0018      	movs	r0, r3
   22d50:	4b2b      	ldr	r3, [pc, #172]	; (22e00 <spi_data_write+0x1bc>)
   22d52:	4798      	blx	r3
   22d54:	4b2e      	ldr	r3, [pc, #184]	; (22e10 <spi_data_write+0x1cc>)
   22d56:	0018      	movs	r0, r3
   22d58:	4b29      	ldr	r3, [pc, #164]	; (22e00 <spi_data_write+0x1bc>)
   22d5a:	4798      	blx	r3
   22d5c:	4b2a      	ldr	r3, [pc, #168]	; (22e08 <spi_data_write+0x1c4>)
   22d5e:	0018      	movs	r0, r3
   22d60:	4b27      	ldr	r3, [pc, #156]	; (22e00 <spi_data_write+0x1bc>)
   22d62:	4798      	blx	r3
			result = N_FAIL;
   22d64:	2313      	movs	r3, #19
   22d66:	18fb      	adds	r3, r7, r3
   22d68:	2200      	movs	r2, #0
   22d6a:	701a      	strb	r2, [r3, #0]
			break;
   22d6c:	e037      	b.n	22dde <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   22d6e:	4b29      	ldr	r3, [pc, #164]	; (22e14 <spi_data_write+0x1d0>)
   22d70:	781b      	ldrb	r3, [r3, #0]
   22d72:	2b00      	cmp	r3, #0
   22d74:	d11b      	bne.n	22dae <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   22d76:	230c      	movs	r3, #12
   22d78:	18fb      	adds	r3, r7, r3
   22d7a:	2102      	movs	r1, #2
   22d7c:	0018      	movs	r0, r3
   22d7e:	4b1c      	ldr	r3, [pc, #112]	; (22df0 <spi_data_write+0x1ac>)
   22d80:	4798      	blx	r3
   22d82:	1e03      	subs	r3, r0, #0
   22d84:	d013      	beq.n	22dae <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   22d86:	23d7      	movs	r3, #215	; 0xd7
   22d88:	009a      	lsls	r2, r3, #2
   22d8a:	491b      	ldr	r1, [pc, #108]	; (22df8 <spi_data_write+0x1b4>)
   22d8c:	4b1b      	ldr	r3, [pc, #108]	; (22dfc <spi_data_write+0x1b8>)
   22d8e:	0018      	movs	r0, r3
   22d90:	4b1b      	ldr	r3, [pc, #108]	; (22e00 <spi_data_write+0x1bc>)
   22d92:	4798      	blx	r3
   22d94:	4b20      	ldr	r3, [pc, #128]	; (22e18 <spi_data_write+0x1d4>)
   22d96:	0018      	movs	r0, r3
   22d98:	4b19      	ldr	r3, [pc, #100]	; (22e00 <spi_data_write+0x1bc>)
   22d9a:	4798      	blx	r3
   22d9c:	4b1a      	ldr	r3, [pc, #104]	; (22e08 <spi_data_write+0x1c4>)
   22d9e:	0018      	movs	r0, r3
   22da0:	4b17      	ldr	r3, [pc, #92]	; (22e00 <spi_data_write+0x1bc>)
   22da2:	4798      	blx	r3
				result = N_FAIL;
   22da4:	2313      	movs	r3, #19
   22da6:	18fb      	adds	r3, r7, r3
   22da8:	2200      	movs	r2, #0
   22daa:	701a      	strb	r2, [r3, #0]
				break;
   22dac:	e017      	b.n	22dde <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   22dae:	2316      	movs	r3, #22
   22db0:	18fb      	adds	r3, r7, r3
   22db2:	881a      	ldrh	r2, [r3, #0]
   22db4:	2314      	movs	r3, #20
   22db6:	18fb      	adds	r3, r7, r3
   22db8:	881b      	ldrh	r3, [r3, #0]
   22dba:	18d3      	adds	r3, r2, r3
   22dbc:	b29a      	uxth	r2, r3
   22dbe:	2316      	movs	r3, #22
   22dc0:	18fb      	adds	r3, r7, r3
   22dc2:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   22dc4:	1cbb      	adds	r3, r7, #2
   22dc6:	1cb9      	adds	r1, r7, #2
   22dc8:	2214      	movs	r2, #20
   22dca:	18ba      	adds	r2, r7, r2
   22dcc:	8809      	ldrh	r1, [r1, #0]
   22dce:	8812      	ldrh	r2, [r2, #0]
   22dd0:	1a8a      	subs	r2, r1, r2
   22dd2:	801a      	strh	r2, [r3, #0]
	} while (sz);
   22dd4:	1cbb      	adds	r3, r7, #2
   22dd6:	881b      	ldrh	r3, [r3, #0]
   22dd8:	2b00      	cmp	r3, #0
   22dda:	d000      	beq.n	22dde <spi_data_write+0x19a>
   22ddc:	e745      	b.n	22c6a <spi_data_write+0x26>


	return result;
   22dde:	2313      	movs	r3, #19
   22de0:	18fb      	adds	r3, r7, r3
   22de2:	781b      	ldrb	r3, [r3, #0]
   22de4:	b25b      	sxtb	r3, r3
}
   22de6:	0018      	movs	r0, r3
   22de8:	46bd      	mov	sp, r7
   22dea:	b006      	add	sp, #24
   22dec:	bd80      	pop	{r7, pc}
   22dee:	46c0      	nop			; (mov r8, r8)
   22df0:	00021ccd 	.word	0x00021ccd
   22df4:	00000349 	.word	0x00000349
   22df8:	00037864 	.word	0x00037864
   22dfc:	0003723c 	.word	0x0003723c
   22e00:	0001c7d9 	.word	0x0001c7d9
   22e04:	00037504 	.word	0x00037504
   22e08:	0003727c 	.word	0x0003727c
   22e0c:	00000352 	.word	0x00000352
   22e10:	0003753c 	.word	0x0003753c
   22e14:	20004128 	.word	0x20004128
   22e18:	00037570 	.word	0x00037570

00022e1c <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   22e1c:	b590      	push	{r4, r7, lr}
   22e1e:	b087      	sub	sp, #28
   22e20:	af02      	add	r7, sp, #8
   22e22:	6078      	str	r0, [r7, #4]
   22e24:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   22e26:	230f      	movs	r3, #15
   22e28:	18fb      	adds	r3, r7, r3
   22e2a:	220a      	movs	r2, #10
   22e2c:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   22e2e:	230c      	movs	r3, #12
   22e30:	18fb      	adds	r3, r7, r3
   22e32:	2201      	movs	r2, #1
   22e34:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   22e36:	230e      	movs	r3, #14
   22e38:	18fb      	adds	r3, r7, r3
   22e3a:	22c9      	movs	r2, #201	; 0xc9
   22e3c:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   22e3e:	230d      	movs	r3, #13
   22e40:	18fb      	adds	r3, r7, r3
   22e42:	2200      	movs	r2, #0
   22e44:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   22e46:	687b      	ldr	r3, [r7, #4]
   22e48:	2b30      	cmp	r3, #48	; 0x30
   22e4a:	d808      	bhi.n	22e5e <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   22e4c:	230e      	movs	r3, #14
   22e4e:	18fb      	adds	r3, r7, r3
   22e50:	22c3      	movs	r2, #195	; 0xc3
   22e52:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   22e54:	230d      	movs	r3, #13
   22e56:	18fb      	adds	r3, r7, r3
   22e58:	2201      	movs	r2, #1
   22e5a:	701a      	strb	r2, [r3, #0]
   22e5c:	e007      	b.n	22e6e <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   22e5e:	230e      	movs	r3, #14
   22e60:	18fb      	adds	r3, r7, r3
   22e62:	22c9      	movs	r2, #201	; 0xc9
   22e64:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   22e66:	230d      	movs	r3, #13
   22e68:	18fb      	adds	r3, r7, r3
   22e6a:	2200      	movs	r2, #0
   22e6c:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   22e6e:	003a      	movs	r2, r7
   22e70:	6879      	ldr	r1, [r7, #4]
   22e72:	230e      	movs	r3, #14
   22e74:	18fb      	adds	r3, r7, r3
   22e76:	7818      	ldrb	r0, [r3, #0]
   22e78:	230d      	movs	r3, #13
   22e7a:	18fb      	adds	r3, r7, r3
   22e7c:	781b      	ldrb	r3, [r3, #0]
   22e7e:	9300      	str	r3, [sp, #0]
   22e80:	2304      	movs	r3, #4
   22e82:	4c2e      	ldr	r4, [pc, #184]	; (22f3c <spi_write_reg+0x120>)
   22e84:	47a0      	blx	r4
   22e86:	0002      	movs	r2, r0
   22e88:	230c      	movs	r3, #12
   22e8a:	18fb      	adds	r3, r7, r3
   22e8c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   22e8e:	230c      	movs	r3, #12
   22e90:	18fb      	adds	r3, r7, r3
   22e92:	781b      	ldrb	r3, [r3, #0]
   22e94:	b25b      	sxtb	r3, r3
   22e96:	2b01      	cmp	r3, #1
   22e98:	d010      	beq.n	22ebc <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   22e9a:	4a29      	ldr	r2, [pc, #164]	; (22f40 <spi_write_reg+0x124>)
   22e9c:	4929      	ldr	r1, [pc, #164]	; (22f44 <spi_write_reg+0x128>)
   22e9e:	4b2a      	ldr	r3, [pc, #168]	; (22f48 <spi_write_reg+0x12c>)
   22ea0:	0018      	movs	r0, r3
   22ea2:	4b2a      	ldr	r3, [pc, #168]	; (22f4c <spi_write_reg+0x130>)
   22ea4:	4798      	blx	r3
   22ea6:	687a      	ldr	r2, [r7, #4]
   22ea8:	4b29      	ldr	r3, [pc, #164]	; (22f50 <spi_write_reg+0x134>)
   22eaa:	0011      	movs	r1, r2
   22eac:	0018      	movs	r0, r3
   22eae:	4b27      	ldr	r3, [pc, #156]	; (22f4c <spi_write_reg+0x130>)
   22eb0:	4798      	blx	r3
   22eb2:	4b28      	ldr	r3, [pc, #160]	; (22f54 <spi_write_reg+0x138>)
   22eb4:	0018      	movs	r0, r3
   22eb6:	4b25      	ldr	r3, [pc, #148]	; (22f4c <spi_write_reg+0x130>)
   22eb8:	4798      	blx	r3
		goto _FAIL_;
   22eba:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   22ebc:	230c      	movs	r3, #12
   22ebe:	18fb      	adds	r3, r7, r3
   22ec0:	781b      	ldrb	r3, [r3, #0]
   22ec2:	b25b      	sxtb	r3, r3
   22ec4:	2b01      	cmp	r3, #1
   22ec6:	d030      	beq.n	22f2a <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   22ec8:	2001      	movs	r0, #1
   22eca:	4b23      	ldr	r3, [pc, #140]	; (22f58 <spi_write_reg+0x13c>)
   22ecc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   22ece:	2300      	movs	r3, #0
   22ed0:	9300      	str	r3, [sp, #0]
   22ed2:	2300      	movs	r3, #0
   22ed4:	2200      	movs	r2, #0
   22ed6:	2100      	movs	r1, #0
   22ed8:	20cf      	movs	r0, #207	; 0xcf
   22eda:	4c20      	ldr	r4, [pc, #128]	; (22f5c <spi_write_reg+0x140>)
   22edc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   22ede:	20cf      	movs	r0, #207	; 0xcf
   22ee0:	4b1f      	ldr	r3, [pc, #124]	; (22f60 <spi_write_reg+0x144>)
   22ee2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   22ee4:	23ea      	movs	r3, #234	; 0xea
   22ee6:	009a      	lsls	r2, r3, #2
   22ee8:	4916      	ldr	r1, [pc, #88]	; (22f44 <spi_write_reg+0x128>)
   22eea:	4b17      	ldr	r3, [pc, #92]	; (22f48 <spi_write_reg+0x12c>)
   22eec:	0018      	movs	r0, r3
   22eee:	4b17      	ldr	r3, [pc, #92]	; (22f4c <spi_write_reg+0x130>)
   22ef0:	4798      	blx	r3
   22ef2:	230f      	movs	r3, #15
   22ef4:	18fb      	adds	r3, r7, r3
   22ef6:	7819      	ldrb	r1, [r3, #0]
   22ef8:	683b      	ldr	r3, [r7, #0]
   22efa:	687a      	ldr	r2, [r7, #4]
   22efc:	4819      	ldr	r0, [pc, #100]	; (22f64 <spi_write_reg+0x148>)
   22efe:	4c13      	ldr	r4, [pc, #76]	; (22f4c <spi_write_reg+0x130>)
   22f00:	47a0      	blx	r4
   22f02:	4b14      	ldr	r3, [pc, #80]	; (22f54 <spi_write_reg+0x138>)
   22f04:	0018      	movs	r0, r3
   22f06:	4b11      	ldr	r3, [pc, #68]	; (22f4c <spi_write_reg+0x130>)
   22f08:	4798      	blx	r3
		nm_bsp_sleep(1);
   22f0a:	2001      	movs	r0, #1
   22f0c:	4b12      	ldr	r3, [pc, #72]	; (22f58 <spi_write_reg+0x13c>)
   22f0e:	4798      	blx	r3
		retry--;
   22f10:	230f      	movs	r3, #15
   22f12:	18fb      	adds	r3, r7, r3
   22f14:	781a      	ldrb	r2, [r3, #0]
   22f16:	230f      	movs	r3, #15
   22f18:	18fb      	adds	r3, r7, r3
   22f1a:	3a01      	subs	r2, #1
   22f1c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   22f1e:	230f      	movs	r3, #15
   22f20:	18fb      	adds	r3, r7, r3
   22f22:	781b      	ldrb	r3, [r3, #0]
   22f24:	2b00      	cmp	r3, #0
   22f26:	d000      	beq.n	22f2a <spi_write_reg+0x10e>
   22f28:	e78d      	b.n	22e46 <spi_write_reg+0x2a>
	}

	return result;
   22f2a:	230c      	movs	r3, #12
   22f2c:	18fb      	adds	r3, r7, r3
   22f2e:	781b      	ldrb	r3, [r3, #0]
   22f30:	b25b      	sxtb	r3, r3
}
   22f32:	0018      	movs	r0, r3
   22f34:	46bd      	mov	sp, r7
   22f36:	b005      	add	sp, #20
   22f38:	bd90      	pop	{r4, r7, pc}
   22f3a:	46c0      	nop			; (mov r8, r8)
   22f3c:	00022351 	.word	0x00022351
   22f40:	0000039d 	.word	0x0000039d
   22f44:	00037874 	.word	0x00037874
   22f48:	0003723c 	.word	0x0003723c
   22f4c:	0001c7d9 	.word	0x0001c7d9
   22f50:	000375a8 	.word	0x000375a8
   22f54:	0003727c 	.word	0x0003727c
   22f58:	0001ec91 	.word	0x0001ec91
   22f5c:	00021dd5 	.word	0x00021dd5
   22f60:	00022215 	.word	0x00022215
   22f64:	000375d4 	.word	0x000375d4

00022f68 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   22f68:	b590      	push	{r4, r7, lr}
   22f6a:	b089      	sub	sp, #36	; 0x24
   22f6c:	af02      	add	r7, sp, #8
   22f6e:	60f8      	str	r0, [r7, #12]
   22f70:	60b9      	str	r1, [r7, #8]
   22f72:	1dbb      	adds	r3, r7, #6
   22f74:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   22f76:	2316      	movs	r3, #22
   22f78:	18fb      	adds	r3, r7, r3
   22f7a:	220a      	movs	r2, #10
   22f7c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   22f7e:	2315      	movs	r3, #21
   22f80:	18fb      	adds	r3, r7, r3
   22f82:	22c7      	movs	r2, #199	; 0xc7
   22f84:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   22f86:	1dbb      	adds	r3, r7, #6
   22f88:	881a      	ldrh	r2, [r3, #0]
   22f8a:	68f9      	ldr	r1, [r7, #12]
   22f8c:	2315      	movs	r3, #21
   22f8e:	18fb      	adds	r3, r7, r3
   22f90:	7818      	ldrb	r0, [r3, #0]
   22f92:	2300      	movs	r3, #0
   22f94:	9300      	str	r3, [sp, #0]
   22f96:	0013      	movs	r3, r2
   22f98:	2200      	movs	r2, #0
   22f9a:	4c4d      	ldr	r4, [pc, #308]	; (230d0 <nm_spi_write+0x168>)
   22f9c:	47a0      	blx	r4
   22f9e:	0002      	movs	r2, r0
   22fa0:	2317      	movs	r3, #23
   22fa2:	18fb      	adds	r3, r7, r3
   22fa4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   22fa6:	2317      	movs	r3, #23
   22fa8:	18fb      	adds	r3, r7, r3
   22faa:	781b      	ldrb	r3, [r3, #0]
   22fac:	b25b      	sxtb	r3, r3
   22fae:	2b01      	cmp	r3, #1
   22fb0:	d010      	beq.n	22fd4 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   22fb2:	4a48      	ldr	r2, [pc, #288]	; (230d4 <nm_spi_write+0x16c>)
   22fb4:	4948      	ldr	r1, [pc, #288]	; (230d8 <nm_spi_write+0x170>)
   22fb6:	4b49      	ldr	r3, [pc, #292]	; (230dc <nm_spi_write+0x174>)
   22fb8:	0018      	movs	r0, r3
   22fba:	4b49      	ldr	r3, [pc, #292]	; (230e0 <nm_spi_write+0x178>)
   22fbc:	4798      	blx	r3
   22fbe:	68fa      	ldr	r2, [r7, #12]
   22fc0:	4b48      	ldr	r3, [pc, #288]	; (230e4 <nm_spi_write+0x17c>)
   22fc2:	0011      	movs	r1, r2
   22fc4:	0018      	movs	r0, r3
   22fc6:	4b46      	ldr	r3, [pc, #280]	; (230e0 <nm_spi_write+0x178>)
   22fc8:	4798      	blx	r3
   22fca:	4b47      	ldr	r3, [pc, #284]	; (230e8 <nm_spi_write+0x180>)
   22fcc:	0018      	movs	r0, r3
   22fce:	4b44      	ldr	r3, [pc, #272]	; (230e0 <nm_spi_write+0x178>)
   22fd0:	4798      	blx	r3
		goto _FAIL_;
   22fd2:	e03e      	b.n	23052 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   22fd4:	2317      	movs	r3, #23
   22fd6:	18fc      	adds	r4, r7, r3
   22fd8:	1dbb      	adds	r3, r7, #6
   22fda:	881a      	ldrh	r2, [r3, #0]
   22fdc:	68bb      	ldr	r3, [r7, #8]
   22fde:	0011      	movs	r1, r2
   22fe0:	0018      	movs	r0, r3
   22fe2:	4b42      	ldr	r3, [pc, #264]	; (230ec <nm_spi_write+0x184>)
   22fe4:	4798      	blx	r3
   22fe6:	0003      	movs	r3, r0
   22fe8:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   22fea:	2317      	movs	r3, #23
   22fec:	18fb      	adds	r3, r7, r3
   22fee:	781b      	ldrb	r3, [r3, #0]
   22ff0:	b25b      	sxtb	r3, r3
   22ff2:	2b01      	cmp	r3, #1
   22ff4:	d00e      	beq.n	23014 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   22ff6:	4a3e      	ldr	r2, [pc, #248]	; (230f0 <nm_spi_write+0x188>)
   22ff8:	4937      	ldr	r1, [pc, #220]	; (230d8 <nm_spi_write+0x170>)
   22ffa:	4b38      	ldr	r3, [pc, #224]	; (230dc <nm_spi_write+0x174>)
   22ffc:	0018      	movs	r0, r3
   22ffe:	4b38      	ldr	r3, [pc, #224]	; (230e0 <nm_spi_write+0x178>)
   23000:	4798      	blx	r3
   23002:	4b3c      	ldr	r3, [pc, #240]	; (230f4 <nm_spi_write+0x18c>)
   23004:	0018      	movs	r0, r3
   23006:	4b36      	ldr	r3, [pc, #216]	; (230e0 <nm_spi_write+0x178>)
   23008:	4798      	blx	r3
   2300a:	4b37      	ldr	r3, [pc, #220]	; (230e8 <nm_spi_write+0x180>)
   2300c:	0018      	movs	r0, r3
   2300e:	4b34      	ldr	r3, [pc, #208]	; (230e0 <nm_spi_write+0x178>)
   23010:	4798      	blx	r3
		goto _FAIL_;
   23012:	e01e      	b.n	23052 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   23014:	2317      	movs	r3, #23
   23016:	18fc      	adds	r4, r7, r3
   23018:	2315      	movs	r3, #21
   2301a:	18fb      	adds	r3, r7, r3
   2301c:	781b      	ldrb	r3, [r3, #0]
   2301e:	0018      	movs	r0, r3
   23020:	4b35      	ldr	r3, [pc, #212]	; (230f8 <nm_spi_write+0x190>)
   23022:	4798      	blx	r3
   23024:	0003      	movs	r3, r0
   23026:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   23028:	2317      	movs	r3, #23
   2302a:	18fb      	adds	r3, r7, r3
   2302c:	781b      	ldrb	r3, [r3, #0]
   2302e:	b25b      	sxtb	r3, r3
   23030:	2b01      	cmp	r3, #1
   23032:	d00e      	beq.n	23052 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   23034:	4a31      	ldr	r2, [pc, #196]	; (230fc <nm_spi_write+0x194>)
   23036:	4928      	ldr	r1, [pc, #160]	; (230d8 <nm_spi_write+0x170>)
   23038:	4b28      	ldr	r3, [pc, #160]	; (230dc <nm_spi_write+0x174>)
   2303a:	0018      	movs	r0, r3
   2303c:	4b28      	ldr	r3, [pc, #160]	; (230e0 <nm_spi_write+0x178>)
   2303e:	4798      	blx	r3
   23040:	4b2c      	ldr	r3, [pc, #176]	; (230f4 <nm_spi_write+0x18c>)
   23042:	0018      	movs	r0, r3
   23044:	4b26      	ldr	r3, [pc, #152]	; (230e0 <nm_spi_write+0x178>)
   23046:	4798      	blx	r3
   23048:	4b27      	ldr	r3, [pc, #156]	; (230e8 <nm_spi_write+0x180>)
   2304a:	0018      	movs	r0, r3
   2304c:	4b24      	ldr	r3, [pc, #144]	; (230e0 <nm_spi_write+0x178>)
   2304e:	4798      	blx	r3
		goto _FAIL_;
   23050:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   23052:	2317      	movs	r3, #23
   23054:	18fb      	adds	r3, r7, r3
   23056:	781b      	ldrb	r3, [r3, #0]
   23058:	b25b      	sxtb	r3, r3
   2305a:	2b01      	cmp	r3, #1
   2305c:	d030      	beq.n	230c0 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2305e:	2001      	movs	r0, #1
   23060:	4b27      	ldr	r3, [pc, #156]	; (23100 <nm_spi_write+0x198>)
   23062:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   23064:	2300      	movs	r3, #0
   23066:	9300      	str	r3, [sp, #0]
   23068:	2300      	movs	r3, #0
   2306a:	2200      	movs	r2, #0
   2306c:	2100      	movs	r1, #0
   2306e:	20cf      	movs	r0, #207	; 0xcf
   23070:	4c24      	ldr	r4, [pc, #144]	; (23104 <nm_spi_write+0x19c>)
   23072:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23074:	20cf      	movs	r0, #207	; 0xcf
   23076:	4b24      	ldr	r3, [pc, #144]	; (23108 <nm_spi_write+0x1a0>)
   23078:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2307a:	4a24      	ldr	r2, [pc, #144]	; (2310c <nm_spi_write+0x1a4>)
   2307c:	4916      	ldr	r1, [pc, #88]	; (230d8 <nm_spi_write+0x170>)
   2307e:	4b17      	ldr	r3, [pc, #92]	; (230dc <nm_spi_write+0x174>)
   23080:	0018      	movs	r0, r3
   23082:	4b17      	ldr	r3, [pc, #92]	; (230e0 <nm_spi_write+0x178>)
   23084:	4798      	blx	r3
   23086:	2316      	movs	r3, #22
   23088:	18fb      	adds	r3, r7, r3
   2308a:	7819      	ldrb	r1, [r3, #0]
   2308c:	1dbb      	adds	r3, r7, #6
   2308e:	881b      	ldrh	r3, [r3, #0]
   23090:	68fa      	ldr	r2, [r7, #12]
   23092:	481f      	ldr	r0, [pc, #124]	; (23110 <nm_spi_write+0x1a8>)
   23094:	4c12      	ldr	r4, [pc, #72]	; (230e0 <nm_spi_write+0x178>)
   23096:	47a0      	blx	r4
   23098:	4b13      	ldr	r3, [pc, #76]	; (230e8 <nm_spi_write+0x180>)
   2309a:	0018      	movs	r0, r3
   2309c:	4b10      	ldr	r3, [pc, #64]	; (230e0 <nm_spi_write+0x178>)
   2309e:	4798      	blx	r3
		nm_bsp_sleep(1);
   230a0:	2001      	movs	r0, #1
   230a2:	4b17      	ldr	r3, [pc, #92]	; (23100 <nm_spi_write+0x198>)
   230a4:	4798      	blx	r3
		retry--;
   230a6:	2316      	movs	r3, #22
   230a8:	18fb      	adds	r3, r7, r3
   230aa:	781a      	ldrb	r2, [r3, #0]
   230ac:	2316      	movs	r3, #22
   230ae:	18fb      	adds	r3, r7, r3
   230b0:	3a01      	subs	r2, #1
   230b2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   230b4:	2316      	movs	r3, #22
   230b6:	18fb      	adds	r3, r7, r3
   230b8:	781b      	ldrb	r3, [r3, #0]
   230ba:	2b00      	cmp	r3, #0
   230bc:	d000      	beq.n	230c0 <nm_spi_write+0x158>
   230be:	e762      	b.n	22f86 <nm_spi_write+0x1e>
	}


	return result;
   230c0:	2317      	movs	r3, #23
   230c2:	18fb      	adds	r3, r7, r3
   230c4:	781b      	ldrb	r3, [r3, #0]
   230c6:	b25b      	sxtb	r3, r3
}
   230c8:	0018      	movs	r0, r3
   230ca:	46bd      	mov	sp, r7
   230cc:	b007      	add	sp, #28
   230ce:	bd90      	pop	{r4, r7, pc}
   230d0:	00022351 	.word	0x00022351
   230d4:	000003cf 	.word	0x000003cf
   230d8:	00037884 	.word	0x00037884
   230dc:	0003723c 	.word	0x0003723c
   230e0:	0001c7d9 	.word	0x0001c7d9
   230e4:	000375f0 	.word	0x000375f0
   230e8:	0003727c 	.word	0x0003727c
   230ec:	00022c45 	.word	0x00022c45
   230f0:	000003d9 	.word	0x000003d9
   230f4:	00037620 	.word	0x00037620
   230f8:	00022115 	.word	0x00022115
   230fc:	000003e1 	.word	0x000003e1
   23100:	0001ec91 	.word	0x0001ec91
   23104:	00021dd5 	.word	0x00021dd5
   23108:	00022215 	.word	0x00022215
   2310c:	000003eb 	.word	0x000003eb
   23110:	00037648 	.word	0x00037648

00023114 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   23114:	b590      	push	{r4, r7, lr}
   23116:	b087      	sub	sp, #28
   23118:	af02      	add	r7, sp, #8
   2311a:	6078      	str	r0, [r7, #4]
   2311c:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2311e:	230f      	movs	r3, #15
   23120:	18fb      	adds	r3, r7, r3
   23122:	220a      	movs	r2, #10
   23124:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   23126:	230c      	movs	r3, #12
   23128:	18fb      	adds	r3, r7, r3
   2312a:	2201      	movs	r2, #1
   2312c:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2312e:	230e      	movs	r3, #14
   23130:	18fb      	adds	r3, r7, r3
   23132:	22ca      	movs	r2, #202	; 0xca
   23134:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   23136:	230d      	movs	r3, #13
   23138:	18fb      	adds	r3, r7, r3
   2313a:	2200      	movs	r2, #0
   2313c:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2313e:	687b      	ldr	r3, [r7, #4]
   23140:	2bff      	cmp	r3, #255	; 0xff
   23142:	d808      	bhi.n	23156 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   23144:	230e      	movs	r3, #14
   23146:	18fb      	adds	r3, r7, r3
   23148:	22c4      	movs	r2, #196	; 0xc4
   2314a:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   2314c:	230d      	movs	r3, #13
   2314e:	18fb      	adds	r3, r7, r3
   23150:	2201      	movs	r2, #1
   23152:	701a      	strb	r2, [r3, #0]
   23154:	e007      	b.n	23166 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   23156:	230e      	movs	r3, #14
   23158:	18fb      	adds	r3, r7, r3
   2315a:	22ca      	movs	r2, #202	; 0xca
   2315c:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2315e:	230d      	movs	r3, #13
   23160:	18fb      	adds	r3, r7, r3
   23162:	2200      	movs	r2, #0
   23164:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   23166:	2308      	movs	r3, #8
   23168:	18fa      	adds	r2, r7, r3
   2316a:	6879      	ldr	r1, [r7, #4]
   2316c:	230e      	movs	r3, #14
   2316e:	18fb      	adds	r3, r7, r3
   23170:	7818      	ldrb	r0, [r3, #0]
   23172:	230d      	movs	r3, #13
   23174:	18fb      	adds	r3, r7, r3
   23176:	781b      	ldrb	r3, [r3, #0]
   23178:	9300      	str	r3, [sp, #0]
   2317a:	2304      	movs	r3, #4
   2317c:	4c37      	ldr	r4, [pc, #220]	; (2325c <spi_read_reg+0x148>)
   2317e:	47a0      	blx	r4
   23180:	0002      	movs	r2, r0
   23182:	230c      	movs	r3, #12
   23184:	18fb      	adds	r3, r7, r3
   23186:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   23188:	230c      	movs	r3, #12
   2318a:	18fb      	adds	r3, r7, r3
   2318c:	781b      	ldrb	r3, [r3, #0]
   2318e:	b25b      	sxtb	r3, r3
   23190:	2b01      	cmp	r3, #1
   23192:	d010      	beq.n	231b6 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   23194:	4a32      	ldr	r2, [pc, #200]	; (23260 <spi_read_reg+0x14c>)
   23196:	4933      	ldr	r1, [pc, #204]	; (23264 <spi_read_reg+0x150>)
   23198:	4b33      	ldr	r3, [pc, #204]	; (23268 <spi_read_reg+0x154>)
   2319a:	0018      	movs	r0, r3
   2319c:	4b33      	ldr	r3, [pc, #204]	; (2326c <spi_read_reg+0x158>)
   2319e:	4798      	blx	r3
   231a0:	687a      	ldr	r2, [r7, #4]
   231a2:	4b33      	ldr	r3, [pc, #204]	; (23270 <spi_read_reg+0x15c>)
   231a4:	0011      	movs	r1, r2
   231a6:	0018      	movs	r0, r3
   231a8:	4b30      	ldr	r3, [pc, #192]	; (2326c <spi_read_reg+0x158>)
   231aa:	4798      	blx	r3
   231ac:	4b31      	ldr	r3, [pc, #196]	; (23274 <spi_read_reg+0x160>)
   231ae:	0018      	movs	r0, r3
   231b0:	4b2e      	ldr	r3, [pc, #184]	; (2326c <spi_read_reg+0x158>)
   231b2:	4798      	blx	r3
		goto _FAIL_;
   231b4:	e014      	b.n	231e0 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   231b6:	2308      	movs	r3, #8
   231b8:	18fb      	adds	r3, r7, r3
   231ba:	781b      	ldrb	r3, [r3, #0]
   231bc:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   231be:	2308      	movs	r3, #8
   231c0:	18fb      	adds	r3, r7, r3
   231c2:	785b      	ldrb	r3, [r3, #1]
   231c4:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   231c6:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   231c8:	2308      	movs	r3, #8
   231ca:	18fb      	adds	r3, r7, r3
   231cc:	789b      	ldrb	r3, [r3, #2]
   231ce:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   231d0:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   231d2:	2308      	movs	r3, #8
   231d4:	18fb      	adds	r3, r7, r3
   231d6:	78db      	ldrb	r3, [r3, #3]
   231d8:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   231da:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   231dc:	683b      	ldr	r3, [r7, #0]
   231de:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   231e0:	230c      	movs	r3, #12
   231e2:	18fb      	adds	r3, r7, r3
   231e4:	781b      	ldrb	r3, [r3, #0]
   231e6:	b25b      	sxtb	r3, r3
   231e8:	2b01      	cmp	r3, #1
   231ea:	d02f      	beq.n	2324c <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   231ec:	2001      	movs	r0, #1
   231ee:	4b22      	ldr	r3, [pc, #136]	; (23278 <spi_read_reg+0x164>)
   231f0:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   231f2:	2300      	movs	r3, #0
   231f4:	9300      	str	r3, [sp, #0]
   231f6:	2300      	movs	r3, #0
   231f8:	2200      	movs	r2, #0
   231fa:	2100      	movs	r1, #0
   231fc:	20cf      	movs	r0, #207	; 0xcf
   231fe:	4c1f      	ldr	r4, [pc, #124]	; (2327c <spi_read_reg+0x168>)
   23200:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   23202:	20cf      	movs	r0, #207	; 0xcf
   23204:	4b1e      	ldr	r3, [pc, #120]	; (23280 <spi_read_reg+0x16c>)
   23206:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   23208:	4a1e      	ldr	r2, [pc, #120]	; (23284 <spi_read_reg+0x170>)
   2320a:	4916      	ldr	r1, [pc, #88]	; (23264 <spi_read_reg+0x150>)
   2320c:	4b16      	ldr	r3, [pc, #88]	; (23268 <spi_read_reg+0x154>)
   2320e:	0018      	movs	r0, r3
   23210:	4b16      	ldr	r3, [pc, #88]	; (2326c <spi_read_reg+0x158>)
   23212:	4798      	blx	r3
   23214:	230f      	movs	r3, #15
   23216:	18fb      	adds	r3, r7, r3
   23218:	7819      	ldrb	r1, [r3, #0]
   2321a:	687a      	ldr	r2, [r7, #4]
   2321c:	4b1a      	ldr	r3, [pc, #104]	; (23288 <spi_read_reg+0x174>)
   2321e:	0018      	movs	r0, r3
   23220:	4b12      	ldr	r3, [pc, #72]	; (2326c <spi_read_reg+0x158>)
   23222:	4798      	blx	r3
   23224:	4b13      	ldr	r3, [pc, #76]	; (23274 <spi_read_reg+0x160>)
   23226:	0018      	movs	r0, r3
   23228:	4b10      	ldr	r3, [pc, #64]	; (2326c <spi_read_reg+0x158>)
   2322a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2322c:	2001      	movs	r0, #1
   2322e:	4b12      	ldr	r3, [pc, #72]	; (23278 <spi_read_reg+0x164>)
   23230:	4798      	blx	r3
		retry--;
   23232:	230f      	movs	r3, #15
   23234:	18fb      	adds	r3, r7, r3
   23236:	781a      	ldrb	r2, [r3, #0]
   23238:	230f      	movs	r3, #15
   2323a:	18fb      	adds	r3, r7, r3
   2323c:	3a01      	subs	r2, #1
   2323e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   23240:	230f      	movs	r3, #15
   23242:	18fb      	adds	r3, r7, r3
   23244:	781b      	ldrb	r3, [r3, #0]
   23246:	2b00      	cmp	r3, #0
   23248:	d000      	beq.n	2324c <spi_read_reg+0x138>
   2324a:	e778      	b.n	2313e <spi_read_reg+0x2a>
	}
		
	return result;
   2324c:	230c      	movs	r3, #12
   2324e:	18fb      	adds	r3, r7, r3
   23250:	781b      	ldrb	r3, [r3, #0]
   23252:	b25b      	sxtb	r3, r3
}
   23254:	0018      	movs	r0, r3
   23256:	46bd      	mov	sp, r7
   23258:	b005      	add	sp, #20
   2325a:	bd90      	pop	{r4, r7, pc}
   2325c:	00022351 	.word	0x00022351
   23260:	00000423 	.word	0x00000423
   23264:	00037894 	.word	0x00037894
   23268:	0003723c 	.word	0x0003723c
   2326c:	0001c7d9 	.word	0x0001c7d9
   23270:	00037664 	.word	0x00037664
   23274:	0003727c 	.word	0x0003727c
   23278:	0001ec91 	.word	0x0001ec91
   2327c:	00021dd5 	.word	0x00021dd5
   23280:	00022215 	.word	0x00022215
   23284:	00000435 	.word	0x00000435
   23288:	00037690 	.word	0x00037690

0002328c <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   2328c:	b590      	push	{r4, r7, lr}
   2328e:	b089      	sub	sp, #36	; 0x24
   23290:	af02      	add	r7, sp, #8
   23292:	60f8      	str	r0, [r7, #12]
   23294:	60b9      	str	r1, [r7, #8]
   23296:	1dbb      	adds	r3, r7, #6
   23298:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2329a:	2316      	movs	r3, #22
   2329c:	18fb      	adds	r3, r7, r3
   2329e:	22c8      	movs	r2, #200	; 0xc8
   232a0:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   232a2:	2317      	movs	r3, #23
   232a4:	18fb      	adds	r3, r7, r3
   232a6:	220a      	movs	r2, #10
   232a8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   232aa:	1dbb      	adds	r3, r7, #6
   232ac:	881c      	ldrh	r4, [r3, #0]
   232ae:	68ba      	ldr	r2, [r7, #8]
   232b0:	68f9      	ldr	r1, [r7, #12]
   232b2:	2316      	movs	r3, #22
   232b4:	18fb      	adds	r3, r7, r3
   232b6:	7818      	ldrb	r0, [r3, #0]
   232b8:	2300      	movs	r3, #0
   232ba:	9300      	str	r3, [sp, #0]
   232bc:	0023      	movs	r3, r4
   232be:	4c2e      	ldr	r4, [pc, #184]	; (23378 <nm_spi_read+0xec>)
   232c0:	47a0      	blx	r4
   232c2:	0002      	movs	r2, r0
   232c4:	2315      	movs	r3, #21
   232c6:	18fb      	adds	r3, r7, r3
   232c8:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   232ca:	2315      	movs	r3, #21
   232cc:	18fb      	adds	r3, r7, r3
   232ce:	781b      	ldrb	r3, [r3, #0]
   232d0:	b25b      	sxtb	r3, r3
   232d2:	2b01      	cmp	r3, #1
   232d4:	d010      	beq.n	232f8 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   232d6:	4a29      	ldr	r2, [pc, #164]	; (2337c <nm_spi_read+0xf0>)
   232d8:	4929      	ldr	r1, [pc, #164]	; (23380 <nm_spi_read+0xf4>)
   232da:	4b2a      	ldr	r3, [pc, #168]	; (23384 <nm_spi_read+0xf8>)
   232dc:	0018      	movs	r0, r3
   232de:	4b2a      	ldr	r3, [pc, #168]	; (23388 <nm_spi_read+0xfc>)
   232e0:	4798      	blx	r3
   232e2:	68fa      	ldr	r2, [r7, #12]
   232e4:	4b29      	ldr	r3, [pc, #164]	; (2338c <nm_spi_read+0x100>)
   232e6:	0011      	movs	r1, r2
   232e8:	0018      	movs	r0, r3
   232ea:	4b27      	ldr	r3, [pc, #156]	; (23388 <nm_spi_read+0xfc>)
   232ec:	4798      	blx	r3
   232ee:	4b28      	ldr	r3, [pc, #160]	; (23390 <nm_spi_read+0x104>)
   232f0:	0018      	movs	r0, r3
   232f2:	4b25      	ldr	r3, [pc, #148]	; (23388 <nm_spi_read+0xfc>)
   232f4:	4798      	blx	r3
		goto _FAIL_;
   232f6:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   232f8:	2315      	movs	r3, #21
   232fa:	18fb      	adds	r3, r7, r3
   232fc:	781b      	ldrb	r3, [r3, #0]
   232fe:	b25b      	sxtb	r3, r3
   23300:	2b01      	cmp	r3, #1
   23302:	d030      	beq.n	23366 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   23304:	2001      	movs	r0, #1
   23306:	4b23      	ldr	r3, [pc, #140]	; (23394 <nm_spi_read+0x108>)
   23308:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   2330a:	2300      	movs	r3, #0
   2330c:	9300      	str	r3, [sp, #0]
   2330e:	2300      	movs	r3, #0
   23310:	2200      	movs	r2, #0
   23312:	2100      	movs	r1, #0
   23314:	20cf      	movs	r0, #207	; 0xcf
   23316:	4c20      	ldr	r4, [pc, #128]	; (23398 <nm_spi_read+0x10c>)
   23318:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   2331a:	20cf      	movs	r0, #207	; 0xcf
   2331c:	4b1f      	ldr	r3, [pc, #124]	; (2339c <nm_spi_read+0x110>)
   2331e:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   23320:	4a1f      	ldr	r2, [pc, #124]	; (233a0 <nm_spi_read+0x114>)
   23322:	4917      	ldr	r1, [pc, #92]	; (23380 <nm_spi_read+0xf4>)
   23324:	4b17      	ldr	r3, [pc, #92]	; (23384 <nm_spi_read+0xf8>)
   23326:	0018      	movs	r0, r3
   23328:	4b17      	ldr	r3, [pc, #92]	; (23388 <nm_spi_read+0xfc>)
   2332a:	4798      	blx	r3
   2332c:	2317      	movs	r3, #23
   2332e:	18fb      	adds	r3, r7, r3
   23330:	7819      	ldrb	r1, [r3, #0]
   23332:	1dbb      	adds	r3, r7, #6
   23334:	881b      	ldrh	r3, [r3, #0]
   23336:	68fa      	ldr	r2, [r7, #12]
   23338:	481a      	ldr	r0, [pc, #104]	; (233a4 <nm_spi_read+0x118>)
   2333a:	4c13      	ldr	r4, [pc, #76]	; (23388 <nm_spi_read+0xfc>)
   2333c:	47a0      	blx	r4
   2333e:	4b14      	ldr	r3, [pc, #80]	; (23390 <nm_spi_read+0x104>)
   23340:	0018      	movs	r0, r3
   23342:	4b11      	ldr	r3, [pc, #68]	; (23388 <nm_spi_read+0xfc>)
   23344:	4798      	blx	r3
		nm_bsp_sleep(1);
   23346:	2001      	movs	r0, #1
   23348:	4b12      	ldr	r3, [pc, #72]	; (23394 <nm_spi_read+0x108>)
   2334a:	4798      	blx	r3
		retry--;
   2334c:	2317      	movs	r3, #23
   2334e:	18fb      	adds	r3, r7, r3
   23350:	781a      	ldrb	r2, [r3, #0]
   23352:	2317      	movs	r3, #23
   23354:	18fb      	adds	r3, r7, r3
   23356:	3a01      	subs	r2, #1
   23358:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2335a:	2317      	movs	r3, #23
   2335c:	18fb      	adds	r3, r7, r3
   2335e:	781b      	ldrb	r3, [r3, #0]
   23360:	2b00      	cmp	r3, #0
   23362:	d000      	beq.n	23366 <nm_spi_read+0xda>
   23364:	e7a1      	b.n	232aa <nm_spi_read+0x1e>
	}

	return result;
   23366:	2315      	movs	r3, #21
   23368:	18fb      	adds	r3, r7, r3
   2336a:	781b      	ldrb	r3, [r3, #0]
   2336c:	b25b      	sxtb	r3, r3
}
   2336e:	0018      	movs	r0, r3
   23370:	46bd      	mov	sp, r7
   23372:	b007      	add	sp, #28
   23374:	bd90      	pop	{r4, r7, pc}
   23376:	46c0      	nop			; (mov r8, r8)
   23378:	00022351 	.word	0x00022351
   2337c:	00000472 	.word	0x00000472
   23380:	000378a4 	.word	0x000378a4
   23384:	0003723c 	.word	0x0003723c
   23388:	0001c7d9 	.word	0x0001c7d9
   2338c:	000376a8 	.word	0x000376a8
   23390:	0003727c 	.word	0x0003727c
   23394:	0001ec91 	.word	0x0001ec91
   23398:	00021dd5 	.word	0x00021dd5
   2339c:	00022215 	.word	0x00022215
   233a0:	0000047d 	.word	0x0000047d
   233a4:	00037648 	.word	0x00037648

000233a8 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   233a8:	b580      	push	{r7, lr}
   233aa:	b082      	sub	sp, #8
   233ac:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   233ae:	4b0c      	ldr	r3, [pc, #48]	; (233e0 <spi_init_pkt_sz+0x38>)
   233b0:	0018      	movs	r0, r3
   233b2:	4b0c      	ldr	r3, [pc, #48]	; (233e4 <spi_init_pkt_sz+0x3c>)
   233b4:	4798      	blx	r3
   233b6:	0003      	movs	r3, r0
   233b8:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   233ba:	687b      	ldr	r3, [r7, #4]
   233bc:	2270      	movs	r2, #112	; 0x70
   233be:	4393      	bics	r3, r2
   233c0:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   233c2:	687b      	ldr	r3, [r7, #4]
   233c4:	2250      	movs	r2, #80	; 0x50
   233c6:	4313      	orrs	r3, r2
   233c8:	607b      	str	r3, [r7, #4]
   233ca:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   233cc:	687b      	ldr	r3, [r7, #4]
   233ce:	4a04      	ldr	r2, [pc, #16]	; (233e0 <spi_init_pkt_sz+0x38>)
   233d0:	0019      	movs	r1, r3
   233d2:	0010      	movs	r0, r2
   233d4:	4b04      	ldr	r3, [pc, #16]	; (233e8 <spi_init_pkt_sz+0x40>)
   233d6:	4798      	blx	r3
}
   233d8:	46c0      	nop			; (mov r8, r8)
   233da:	46bd      	mov	sp, r7
   233dc:	b002      	add	sp, #8
   233de:	bd80      	pop	{r7, pc}
   233e0:	0000e824 	.word	0x0000e824
   233e4:	00023581 	.word	0x00023581
   233e8:	000235f5 	.word	0x000235f5

000233ec <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   233ec:	b590      	push	{r4, r7, lr}
   233ee:	b083      	sub	sp, #12
   233f0:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   233f2:	2300      	movs	r3, #0
   233f4:	9300      	str	r3, [sp, #0]
   233f6:	2300      	movs	r3, #0
   233f8:	2200      	movs	r2, #0
   233fa:	2100      	movs	r1, #0
   233fc:	20cf      	movs	r0, #207	; 0xcf
   233fe:	4c05      	ldr	r4, [pc, #20]	; (23414 <nm_spi_reset+0x28>)
   23400:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   23402:	20cf      	movs	r0, #207	; 0xcf
   23404:	4b04      	ldr	r3, [pc, #16]	; (23418 <nm_spi_reset+0x2c>)
   23406:	4798      	blx	r3
	return M2M_SUCCESS;
   23408:	2300      	movs	r3, #0
}
   2340a:	0018      	movs	r0, r3
   2340c:	46bd      	mov	sp, r7
   2340e:	b001      	add	sp, #4
   23410:	bd90      	pop	{r4, r7, pc}
   23412:	46c0      	nop			; (mov r8, r8)
   23414:	00021dd5 	.word	0x00021dd5
   23418:	00022215 	.word	0x00022215

0002341c <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   2341c:	b580      	push	{r7, lr}
   2341e:	b082      	sub	sp, #8
   23420:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   23422:	2300      	movs	r3, #0
   23424:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   23426:	4b40      	ldr	r3, [pc, #256]	; (23528 <nm_spi_init+0x10c>)
   23428:	2200      	movs	r2, #0
   2342a:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   2342c:	003b      	movs	r3, r7
   2342e:	4a3f      	ldr	r2, [pc, #252]	; (2352c <nm_spi_init+0x110>)
   23430:	0019      	movs	r1, r3
   23432:	0010      	movs	r0, r2
   23434:	4b3e      	ldr	r3, [pc, #248]	; (23530 <nm_spi_init+0x114>)
   23436:	4798      	blx	r3
   23438:	1e03      	subs	r3, r0, #0
   2343a:	d129      	bne.n	23490 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   2343c:	4b3a      	ldr	r3, [pc, #232]	; (23528 <nm_spi_init+0x10c>)
   2343e:	2201      	movs	r2, #1
   23440:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   23442:	2398      	movs	r3, #152	; 0x98
   23444:	00da      	lsls	r2, r3, #3
   23446:	493b      	ldr	r1, [pc, #236]	; (23534 <nm_spi_init+0x118>)
   23448:	4b3b      	ldr	r3, [pc, #236]	; (23538 <nm_spi_init+0x11c>)
   2344a:	0018      	movs	r0, r3
   2344c:	4b3b      	ldr	r3, [pc, #236]	; (2353c <nm_spi_init+0x120>)
   2344e:	4798      	blx	r3
   23450:	4b3b      	ldr	r3, [pc, #236]	; (23540 <nm_spi_init+0x124>)
   23452:	0018      	movs	r0, r3
   23454:	4b39      	ldr	r3, [pc, #228]	; (2353c <nm_spi_init+0x120>)
   23456:	4798      	blx	r3
   23458:	4b3a      	ldr	r3, [pc, #232]	; (23544 <nm_spi_init+0x128>)
   2345a:	0018      	movs	r0, r3
   2345c:	4b37      	ldr	r3, [pc, #220]	; (2353c <nm_spi_init+0x120>)
   2345e:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   23460:	003b      	movs	r3, r7
   23462:	4a32      	ldr	r2, [pc, #200]	; (2352c <nm_spi_init+0x110>)
   23464:	0019      	movs	r1, r3
   23466:	0010      	movs	r0, r2
   23468:	4b31      	ldr	r3, [pc, #196]	; (23530 <nm_spi_init+0x114>)
   2346a:	4798      	blx	r3
   2346c:	1e03      	subs	r3, r0, #0
   2346e:	d10f      	bne.n	23490 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   23470:	4a35      	ldr	r2, [pc, #212]	; (23548 <nm_spi_init+0x12c>)
   23472:	4930      	ldr	r1, [pc, #192]	; (23534 <nm_spi_init+0x118>)
   23474:	4b30      	ldr	r3, [pc, #192]	; (23538 <nm_spi_init+0x11c>)
   23476:	0018      	movs	r0, r3
   23478:	4b30      	ldr	r3, [pc, #192]	; (2353c <nm_spi_init+0x120>)
   2347a:	4798      	blx	r3
   2347c:	4b33      	ldr	r3, [pc, #204]	; (2354c <nm_spi_init+0x130>)
   2347e:	0018      	movs	r0, r3
   23480:	4b2e      	ldr	r3, [pc, #184]	; (2353c <nm_spi_init+0x120>)
   23482:	4798      	blx	r3
   23484:	4b2f      	ldr	r3, [pc, #188]	; (23544 <nm_spi_init+0x128>)
   23486:	0018      	movs	r0, r3
   23488:	4b2c      	ldr	r3, [pc, #176]	; (2353c <nm_spi_init+0x120>)
   2348a:	4798      	blx	r3
			return 0;
   2348c:	2300      	movs	r3, #0
   2348e:	e047      	b.n	23520 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   23490:	4b25      	ldr	r3, [pc, #148]	; (23528 <nm_spi_init+0x10c>)
   23492:	781b      	ldrb	r3, [r3, #0]
   23494:	2b00      	cmp	r3, #0
   23496:	d126      	bne.n	234e6 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   23498:	683b      	ldr	r3, [r7, #0]
   2349a:	220c      	movs	r2, #12
   2349c:	4393      	bics	r3, r2
   2349e:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   234a0:	683b      	ldr	r3, [r7, #0]
   234a2:	2270      	movs	r2, #112	; 0x70
   234a4:	4393      	bics	r3, r2
   234a6:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   234a8:	683b      	ldr	r3, [r7, #0]
   234aa:	2250      	movs	r2, #80	; 0x50
   234ac:	4313      	orrs	r3, r2
   234ae:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   234b0:	683b      	ldr	r3, [r7, #0]
   234b2:	4a1e      	ldr	r2, [pc, #120]	; (2352c <nm_spi_init+0x110>)
   234b4:	0019      	movs	r1, r3
   234b6:	0010      	movs	r0, r2
   234b8:	4b25      	ldr	r3, [pc, #148]	; (23550 <nm_spi_init+0x134>)
   234ba:	4798      	blx	r3
   234bc:	1e03      	subs	r3, r0, #0
   234be:	d10f      	bne.n	234e0 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   234c0:	4a24      	ldr	r2, [pc, #144]	; (23554 <nm_spi_init+0x138>)
   234c2:	491c      	ldr	r1, [pc, #112]	; (23534 <nm_spi_init+0x118>)
   234c4:	4b1c      	ldr	r3, [pc, #112]	; (23538 <nm_spi_init+0x11c>)
   234c6:	0018      	movs	r0, r3
   234c8:	4b1c      	ldr	r3, [pc, #112]	; (2353c <nm_spi_init+0x120>)
   234ca:	4798      	blx	r3
   234cc:	4b22      	ldr	r3, [pc, #136]	; (23558 <nm_spi_init+0x13c>)
   234ce:	0018      	movs	r0, r3
   234d0:	4b1a      	ldr	r3, [pc, #104]	; (2353c <nm_spi_init+0x120>)
   234d2:	4798      	blx	r3
   234d4:	4b1b      	ldr	r3, [pc, #108]	; (23544 <nm_spi_init+0x128>)
   234d6:	0018      	movs	r0, r3
   234d8:	4b18      	ldr	r3, [pc, #96]	; (2353c <nm_spi_init+0x120>)
   234da:	4798      	blx	r3
			return 0;
   234dc:	2300      	movs	r3, #0
   234de:	e01f      	b.n	23520 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   234e0:	4b11      	ldr	r3, [pc, #68]	; (23528 <nm_spi_init+0x10c>)
   234e2:	2201      	movs	r2, #1
   234e4:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   234e6:	1d3a      	adds	r2, r7, #4
   234e8:	2380      	movs	r3, #128	; 0x80
   234ea:	015b      	lsls	r3, r3, #5
   234ec:	0011      	movs	r1, r2
   234ee:	0018      	movs	r0, r3
   234f0:	4b0f      	ldr	r3, [pc, #60]	; (23530 <nm_spi_init+0x114>)
   234f2:	4798      	blx	r3
   234f4:	1e03      	subs	r3, r0, #0
   234f6:	d110      	bne.n	2351a <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   234f8:	4a18      	ldr	r2, [pc, #96]	; (2355c <nm_spi_init+0x140>)
   234fa:	490e      	ldr	r1, [pc, #56]	; (23534 <nm_spi_init+0x118>)
   234fc:	4b0e      	ldr	r3, [pc, #56]	; (23538 <nm_spi_init+0x11c>)
   234fe:	0018      	movs	r0, r3
   23500:	4b0e      	ldr	r3, [pc, #56]	; (2353c <nm_spi_init+0x120>)
   23502:	4798      	blx	r3
   23504:	4b16      	ldr	r3, [pc, #88]	; (23560 <nm_spi_init+0x144>)
   23506:	0018      	movs	r0, r3
   23508:	4b0c      	ldr	r3, [pc, #48]	; (2353c <nm_spi_init+0x120>)
   2350a:	4798      	blx	r3
   2350c:	4b0d      	ldr	r3, [pc, #52]	; (23544 <nm_spi_init+0x128>)
   2350e:	0018      	movs	r0, r3
   23510:	4b0a      	ldr	r3, [pc, #40]	; (2353c <nm_spi_init+0x120>)
   23512:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   23514:	2306      	movs	r3, #6
   23516:	425b      	negs	r3, r3
   23518:	e002      	b.n	23520 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   2351a:	4b12      	ldr	r3, [pc, #72]	; (23564 <nm_spi_init+0x148>)
   2351c:	4798      	blx	r3


	return M2M_SUCCESS;
   2351e:	2300      	movs	r3, #0
}
   23520:	0018      	movs	r0, r3
   23522:	46bd      	mov	sp, r7
   23524:	b002      	add	sp, #8
   23526:	bd80      	pop	{r7, pc}
   23528:	20004128 	.word	0x20004128
   2352c:	0000e824 	.word	0x0000e824
   23530:	00023115 	.word	0x00023115
   23534:	000378b0 	.word	0x000378b0
   23538:	0003723c 	.word	0x0003723c
   2353c:	0001c7d9 	.word	0x0001c7d9
   23540:	000376d8 	.word	0x000376d8
   23544:	0003727c 	.word	0x0003727c
   23548:	000004c3 	.word	0x000004c3
   2354c:	00037728 	.word	0x00037728
   23550:	00022e1d 	.word	0x00022e1d
   23554:	000004cd 	.word	0x000004cd
   23558:	00037758 	.word	0x00037758
   2355c:	000004d7 	.word	0x000004d7
   23560:	0003778c 	.word	0x0003778c
   23564:	000233a9 	.word	0x000233a9

00023568 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   23568:	b580      	push	{r7, lr}
   2356a:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   2356c:	4b03      	ldr	r3, [pc, #12]	; (2357c <nm_spi_deinit+0x14>)
   2356e:	2200      	movs	r2, #0
   23570:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   23572:	2300      	movs	r3, #0
}
   23574:	0018      	movs	r0, r3
   23576:	46bd      	mov	sp, r7
   23578:	bd80      	pop	{r7, pc}
   2357a:	46c0      	nop			; (mov r8, r8)
   2357c:	20004128 	.word	0x20004128

00023580 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   23580:	b580      	push	{r7, lr}
   23582:	b084      	sub	sp, #16
   23584:	af00      	add	r7, sp, #0
   23586:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   23588:	230c      	movs	r3, #12
   2358a:	18fa      	adds	r2, r7, r3
   2358c:	687b      	ldr	r3, [r7, #4]
   2358e:	0011      	movs	r1, r2
   23590:	0018      	movs	r0, r3
   23592:	4b03      	ldr	r3, [pc, #12]	; (235a0 <nm_spi_read_reg+0x20>)
   23594:	4798      	blx	r3

	return u32Val;
   23596:	68fb      	ldr	r3, [r7, #12]
}
   23598:	0018      	movs	r0, r3
   2359a:	46bd      	mov	sp, r7
   2359c:	b004      	add	sp, #16
   2359e:	bd80      	pop	{r7, pc}
   235a0:	00023115 	.word	0x00023115

000235a4 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   235a4:	b590      	push	{r4, r7, lr}
   235a6:	b085      	sub	sp, #20
   235a8:	af00      	add	r7, sp, #0
   235aa:	6078      	str	r0, [r7, #4]
   235ac:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   235ae:	230f      	movs	r3, #15
   235b0:	18fc      	adds	r4, r7, r3
   235b2:	683a      	ldr	r2, [r7, #0]
   235b4:	687b      	ldr	r3, [r7, #4]
   235b6:	0011      	movs	r1, r2
   235b8:	0018      	movs	r0, r3
   235ba:	4b0d      	ldr	r3, [pc, #52]	; (235f0 <nm_spi_read_reg_with_ret+0x4c>)
   235bc:	4798      	blx	r3
   235be:	0003      	movs	r3, r0
   235c0:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   235c2:	230f      	movs	r3, #15
   235c4:	18fb      	adds	r3, r7, r3
   235c6:	781b      	ldrb	r3, [r3, #0]
   235c8:	b25b      	sxtb	r3, r3
   235ca:	2b01      	cmp	r3, #1
   235cc:	d104      	bne.n	235d8 <nm_spi_read_reg_with_ret+0x34>
   235ce:	230f      	movs	r3, #15
   235d0:	18fb      	adds	r3, r7, r3
   235d2:	2200      	movs	r2, #0
   235d4:	701a      	strb	r2, [r3, #0]
   235d6:	e003      	b.n	235e0 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   235d8:	230f      	movs	r3, #15
   235da:	18fb      	adds	r3, r7, r3
   235dc:	22fa      	movs	r2, #250	; 0xfa
   235de:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   235e0:	230f      	movs	r3, #15
   235e2:	18fb      	adds	r3, r7, r3
   235e4:	781b      	ldrb	r3, [r3, #0]
   235e6:	b25b      	sxtb	r3, r3
}
   235e8:	0018      	movs	r0, r3
   235ea:	46bd      	mov	sp, r7
   235ec:	b005      	add	sp, #20
   235ee:	bd90      	pop	{r4, r7, pc}
   235f0:	00023115 	.word	0x00023115

000235f4 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   235f4:	b590      	push	{r4, r7, lr}
   235f6:	b085      	sub	sp, #20
   235f8:	af00      	add	r7, sp, #0
   235fa:	6078      	str	r0, [r7, #4]
   235fc:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   235fe:	230f      	movs	r3, #15
   23600:	18fc      	adds	r4, r7, r3
   23602:	683a      	ldr	r2, [r7, #0]
   23604:	687b      	ldr	r3, [r7, #4]
   23606:	0011      	movs	r1, r2
   23608:	0018      	movs	r0, r3
   2360a:	4b0d      	ldr	r3, [pc, #52]	; (23640 <nm_spi_write_reg+0x4c>)
   2360c:	4798      	blx	r3
   2360e:	0003      	movs	r3, r0
   23610:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23612:	230f      	movs	r3, #15
   23614:	18fb      	adds	r3, r7, r3
   23616:	781b      	ldrb	r3, [r3, #0]
   23618:	b25b      	sxtb	r3, r3
   2361a:	2b01      	cmp	r3, #1
   2361c:	d104      	bne.n	23628 <nm_spi_write_reg+0x34>
   2361e:	230f      	movs	r3, #15
   23620:	18fb      	adds	r3, r7, r3
   23622:	2200      	movs	r2, #0
   23624:	701a      	strb	r2, [r3, #0]
   23626:	e003      	b.n	23630 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   23628:	230f      	movs	r3, #15
   2362a:	18fb      	adds	r3, r7, r3
   2362c:	22fa      	movs	r2, #250	; 0xfa
   2362e:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23630:	230f      	movs	r3, #15
   23632:	18fb      	adds	r3, r7, r3
   23634:	781b      	ldrb	r3, [r3, #0]
   23636:	b25b      	sxtb	r3, r3
}
   23638:	0018      	movs	r0, r3
   2363a:	46bd      	mov	sp, r7
   2363c:	b005      	add	sp, #20
   2363e:	bd90      	pop	{r4, r7, pc}
   23640:	00022e1d 	.word	0x00022e1d

00023644 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23644:	b590      	push	{r4, r7, lr}
   23646:	b087      	sub	sp, #28
   23648:	af00      	add	r7, sp, #0
   2364a:	60f8      	str	r0, [r7, #12]
   2364c:	60b9      	str	r1, [r7, #8]
   2364e:	1dbb      	adds	r3, r7, #6
   23650:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   23652:	2317      	movs	r3, #23
   23654:	18fc      	adds	r4, r7, r3
   23656:	1dbb      	adds	r3, r7, #6
   23658:	881a      	ldrh	r2, [r3, #0]
   2365a:	68b9      	ldr	r1, [r7, #8]
   2365c:	68fb      	ldr	r3, [r7, #12]
   2365e:	0018      	movs	r0, r3
   23660:	4b0d      	ldr	r3, [pc, #52]	; (23698 <nm_spi_read_block+0x54>)
   23662:	4798      	blx	r3
   23664:	0003      	movs	r3, r0
   23666:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   23668:	2317      	movs	r3, #23
   2366a:	18fb      	adds	r3, r7, r3
   2366c:	781b      	ldrb	r3, [r3, #0]
   2366e:	b25b      	sxtb	r3, r3
   23670:	2b01      	cmp	r3, #1
   23672:	d104      	bne.n	2367e <nm_spi_read_block+0x3a>
   23674:	2317      	movs	r3, #23
   23676:	18fb      	adds	r3, r7, r3
   23678:	2200      	movs	r2, #0
   2367a:	701a      	strb	r2, [r3, #0]
   2367c:	e003      	b.n	23686 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2367e:	2317      	movs	r3, #23
   23680:	18fb      	adds	r3, r7, r3
   23682:	22fa      	movs	r2, #250	; 0xfa
   23684:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   23686:	2317      	movs	r3, #23
   23688:	18fb      	adds	r3, r7, r3
   2368a:	781b      	ldrb	r3, [r3, #0]
   2368c:	b25b      	sxtb	r3, r3
}
   2368e:	0018      	movs	r0, r3
   23690:	46bd      	mov	sp, r7
   23692:	b007      	add	sp, #28
   23694:	bd90      	pop	{r4, r7, pc}
   23696:	46c0      	nop			; (mov r8, r8)
   23698:	0002328d 	.word	0x0002328d

0002369c <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   2369c:	b590      	push	{r4, r7, lr}
   2369e:	b087      	sub	sp, #28
   236a0:	af00      	add	r7, sp, #0
   236a2:	60f8      	str	r0, [r7, #12]
   236a4:	60b9      	str	r1, [r7, #8]
   236a6:	1dbb      	adds	r3, r7, #6
   236a8:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   236aa:	2317      	movs	r3, #23
   236ac:	18fc      	adds	r4, r7, r3
   236ae:	1dbb      	adds	r3, r7, #6
   236b0:	881a      	ldrh	r2, [r3, #0]
   236b2:	68b9      	ldr	r1, [r7, #8]
   236b4:	68fb      	ldr	r3, [r7, #12]
   236b6:	0018      	movs	r0, r3
   236b8:	4b0d      	ldr	r3, [pc, #52]	; (236f0 <nm_spi_write_block+0x54>)
   236ba:	4798      	blx	r3
   236bc:	0003      	movs	r3, r0
   236be:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   236c0:	2317      	movs	r3, #23
   236c2:	18fb      	adds	r3, r7, r3
   236c4:	781b      	ldrb	r3, [r3, #0]
   236c6:	b25b      	sxtb	r3, r3
   236c8:	2b01      	cmp	r3, #1
   236ca:	d104      	bne.n	236d6 <nm_spi_write_block+0x3a>
   236cc:	2317      	movs	r3, #23
   236ce:	18fb      	adds	r3, r7, r3
   236d0:	2200      	movs	r2, #0
   236d2:	701a      	strb	r2, [r3, #0]
   236d4:	e003      	b.n	236de <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   236d6:	2317      	movs	r3, #23
   236d8:	18fb      	adds	r3, r7, r3
   236da:	22fa      	movs	r2, #250	; 0xfa
   236dc:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   236de:	2317      	movs	r3, #23
   236e0:	18fb      	adds	r3, r7, r3
   236e2:	781b      	ldrb	r3, [r3, #0]
   236e4:	b25b      	sxtb	r3, r3
}
   236e6:	0018      	movs	r0, r3
   236e8:	46bd      	mov	sp, r7
   236ea:	b007      	add	sp, #28
   236ec:	bd90      	pop	{r4, r7, pc}
   236ee:	46c0      	nop			; (mov r8, r8)
   236f0:	00022f69 	.word	0x00022f69

000236f4 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   236f4:	b590      	push	{r4, r7, lr}
   236f6:	b089      	sub	sp, #36	; 0x24
   236f8:	af00      	add	r7, sp, #0
   236fa:	60b9      	str	r1, [r7, #8]
   236fc:	0011      	movs	r1, r2
   236fe:	607b      	str	r3, [r7, #4]
   23700:	230f      	movs	r3, #15
   23702:	18fb      	adds	r3, r7, r3
   23704:	1c02      	adds	r2, r0, #0
   23706:	701a      	strb	r2, [r3, #0]
   23708:	230e      	movs	r3, #14
   2370a:	18fb      	adds	r3, r7, r3
   2370c:	1c0a      	adds	r2, r1, #0
   2370e:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   23710:	2330      	movs	r3, #48	; 0x30
   23712:	18fb      	adds	r3, r7, r3
   23714:	881b      	ldrh	r3, [r3, #0]
   23716:	2b00      	cmp	r3, #0
   23718:	d100      	bne.n	2371c <Socket_ReadSocketData+0x28>
   2371a:	e0d7      	b.n	238cc <Socket_ReadSocketData+0x1d8>
   2371c:	230f      	movs	r3, #15
   2371e:	18fb      	adds	r3, r7, r3
   23720:	2200      	movs	r2, #0
   23722:	569a      	ldrsb	r2, [r3, r2]
   23724:	4b6b      	ldr	r3, [pc, #428]	; (238d4 <Socket_ReadSocketData+0x1e0>)
   23726:	0112      	lsls	r2, r2, #4
   23728:	58d3      	ldr	r3, [r2, r3]
   2372a:	2b00      	cmp	r3, #0
   2372c:	d100      	bne.n	23730 <Socket_ReadSocketData+0x3c>
   2372e:	e0cd      	b.n	238cc <Socket_ReadSocketData+0x1d8>
   23730:	230f      	movs	r3, #15
   23732:	18fb      	adds	r3, r7, r3
   23734:	781b      	ldrb	r3, [r3, #0]
   23736:	b25b      	sxtb	r3, r3
   23738:	4a66      	ldr	r2, [pc, #408]	; (238d4 <Socket_ReadSocketData+0x1e0>)
   2373a:	011b      	lsls	r3, r3, #4
   2373c:	18d3      	adds	r3, r2, r3
   2373e:	3304      	adds	r3, #4
   23740:	881b      	ldrh	r3, [r3, #0]
   23742:	b29b      	uxth	r3, r3
   23744:	2b00      	cmp	r3, #0
   23746:	d100      	bne.n	2374a <Socket_ReadSocketData+0x56>
   23748:	e0c0      	b.n	238cc <Socket_ReadSocketData+0x1d8>
   2374a:	230f      	movs	r3, #15
   2374c:	18fb      	adds	r3, r7, r3
   2374e:	781b      	ldrb	r3, [r3, #0]
   23750:	b25b      	sxtb	r3, r3
   23752:	4a60      	ldr	r2, [pc, #384]	; (238d4 <Socket_ReadSocketData+0x1e0>)
   23754:	011b      	lsls	r3, r3, #4
   23756:	18d3      	adds	r3, r2, r3
   23758:	330a      	adds	r3, #10
   2375a:	781b      	ldrb	r3, [r3, #0]
   2375c:	b2db      	uxtb	r3, r3
   2375e:	2b01      	cmp	r3, #1
   23760:	d000      	beq.n	23764 <Socket_ReadSocketData+0x70>
   23762:	e0b3      	b.n	238cc <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   23764:	687b      	ldr	r3, [r7, #4]
   23766:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   23768:	68bb      	ldr	r3, [r7, #8]
   2376a:	2230      	movs	r2, #48	; 0x30
   2376c:	18ba      	adds	r2, r7, r2
   2376e:	8812      	ldrh	r2, [r2, #0]
   23770:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   23772:	2319      	movs	r3, #25
   23774:	18fb      	adds	r3, r7, r3
   23776:	2201      	movs	r2, #1
   23778:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   2377a:	231a      	movs	r3, #26
   2377c:	18fb      	adds	r3, r7, r3
   2377e:	2230      	movs	r2, #48	; 0x30
   23780:	18ba      	adds	r2, r7, r2
   23782:	8812      	ldrh	r2, [r2, #0]
   23784:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   23786:	230f      	movs	r3, #15
   23788:	18fb      	adds	r3, r7, r3
   2378a:	781b      	ldrb	r3, [r3, #0]
   2378c:	b25b      	sxtb	r3, r3
   2378e:	4a51      	ldr	r2, [pc, #324]	; (238d4 <Socket_ReadSocketData+0x1e0>)
   23790:	011b      	lsls	r3, r3, #4
   23792:	18d3      	adds	r3, r2, r3
   23794:	3304      	adds	r3, #4
   23796:	881b      	ldrh	r3, [r3, #0]
   23798:	b29b      	uxth	r3, r3
   2379a:	221a      	movs	r2, #26
   2379c:	18ba      	adds	r2, r7, r2
   2379e:	8812      	ldrh	r2, [r2, #0]
   237a0:	1ad3      	subs	r3, r2, r3
   237a2:	b29a      	uxth	r2, r3
   237a4:	2316      	movs	r3, #22
   237a6:	18fb      	adds	r3, r7, r3
   237a8:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   237aa:	2316      	movs	r3, #22
   237ac:	18fb      	adds	r3, r7, r3
   237ae:	2200      	movs	r2, #0
   237b0:	5e9b      	ldrsh	r3, [r3, r2]
   237b2:	2b00      	cmp	r3, #0
   237b4:	dd0f      	ble.n	237d6 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   237b6:	2319      	movs	r3, #25
   237b8:	18fb      	adds	r3, r7, r3
   237ba:	2200      	movs	r2, #0
   237bc:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   237be:	230f      	movs	r3, #15
   237c0:	18fb      	adds	r3, r7, r3
   237c2:	2200      	movs	r2, #0
   237c4:	569a      	ldrsb	r2, [r3, r2]
   237c6:	231a      	movs	r3, #26
   237c8:	18fb      	adds	r3, r7, r3
   237ca:	4942      	ldr	r1, [pc, #264]	; (238d4 <Socket_ReadSocketData+0x1e0>)
   237cc:	0112      	lsls	r2, r2, #4
   237ce:	188a      	adds	r2, r1, r2
   237d0:	3204      	adds	r2, #4
   237d2:	8812      	ldrh	r2, [r2, #0]
   237d4:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   237d6:	230f      	movs	r3, #15
   237d8:	18fb      	adds	r3, r7, r3
   237da:	2200      	movs	r2, #0
   237dc:	569a      	ldrsb	r2, [r3, r2]
   237de:	4b3d      	ldr	r3, [pc, #244]	; (238d4 <Socket_ReadSocketData+0x1e0>)
   237e0:	0112      	lsls	r2, r2, #4
   237e2:	58d1      	ldr	r1, [r2, r3]
   237e4:	2319      	movs	r3, #25
   237e6:	18fb      	adds	r3, r7, r3
   237e8:	781c      	ldrb	r4, [r3, #0]
   237ea:	231a      	movs	r3, #26
   237ec:	18fb      	adds	r3, r7, r3
   237ee:	881a      	ldrh	r2, [r3, #0]
   237f0:	69f8      	ldr	r0, [r7, #28]
   237f2:	0023      	movs	r3, r4
   237f4:	4c38      	ldr	r4, [pc, #224]	; (238d8 <Socket_ReadSocketData+0x1e4>)
   237f6:	47a0      	blx	r4
   237f8:	1e03      	subs	r3, r0, #0
   237fa:	d14f      	bne.n	2389c <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   237fc:	230f      	movs	r3, #15
   237fe:	18fb      	adds	r3, r7, r3
   23800:	2200      	movs	r2, #0
   23802:	569a      	ldrsb	r2, [r3, r2]
   23804:	4b33      	ldr	r3, [pc, #204]	; (238d4 <Socket_ReadSocketData+0x1e0>)
   23806:	0112      	lsls	r2, r2, #4
   23808:	58d2      	ldr	r2, [r2, r3]
   2380a:	68bb      	ldr	r3, [r7, #8]
   2380c:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   2380e:	231a      	movs	r3, #26
   23810:	18fb      	adds	r3, r7, r3
   23812:	2200      	movs	r2, #0
   23814:	5e9a      	ldrsh	r2, [r3, r2]
   23816:	68bb      	ldr	r3, [r7, #8]
   23818:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   2381a:	68bb      	ldr	r3, [r7, #8]
   2381c:	88da      	ldrh	r2, [r3, #6]
   2381e:	231a      	movs	r3, #26
   23820:	18fb      	adds	r3, r7, r3
   23822:	881b      	ldrh	r3, [r3, #0]
   23824:	1ad3      	subs	r3, r2, r3
   23826:	b29a      	uxth	r2, r3
   23828:	68bb      	ldr	r3, [r7, #8]
   2382a:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   2382c:	4b2b      	ldr	r3, [pc, #172]	; (238dc <Socket_ReadSocketData+0x1e8>)
   2382e:	681b      	ldr	r3, [r3, #0]
   23830:	2b00      	cmp	r3, #0
   23832:	d00b      	beq.n	2384c <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   23834:	4b29      	ldr	r3, [pc, #164]	; (238dc <Socket_ReadSocketData+0x1e8>)
   23836:	681b      	ldr	r3, [r3, #0]
   23838:	68bc      	ldr	r4, [r7, #8]
   2383a:	220e      	movs	r2, #14
   2383c:	18ba      	adds	r2, r7, r2
   2383e:	7811      	ldrb	r1, [r2, #0]
   23840:	220f      	movs	r2, #15
   23842:	18ba      	adds	r2, r7, r2
   23844:	2000      	movs	r0, #0
   23846:	5610      	ldrsb	r0, [r2, r0]
   23848:	0022      	movs	r2, r4
   2384a:	4798      	blx	r3

				u16ReadCount -= u16Read;
   2384c:	2330      	movs	r3, #48	; 0x30
   2384e:	18f9      	adds	r1, r7, r3
   23850:	2330      	movs	r3, #48	; 0x30
   23852:	18fa      	adds	r2, r7, r3
   23854:	231a      	movs	r3, #26
   23856:	18fb      	adds	r3, r7, r3
   23858:	8812      	ldrh	r2, [r2, #0]
   2385a:	881b      	ldrh	r3, [r3, #0]
   2385c:	1ad3      	subs	r3, r2, r3
   2385e:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   23860:	231a      	movs	r3, #26
   23862:	18fb      	adds	r3, r7, r3
   23864:	881b      	ldrh	r3, [r3, #0]
   23866:	69fa      	ldr	r2, [r7, #28]
   23868:	18d3      	adds	r3, r2, r3
   2386a:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   2386c:	230f      	movs	r3, #15
   2386e:	18fb      	adds	r3, r7, r3
   23870:	781b      	ldrb	r3, [r3, #0]
   23872:	b25b      	sxtb	r3, r3
   23874:	4a17      	ldr	r2, [pc, #92]	; (238d4 <Socket_ReadSocketData+0x1e0>)
   23876:	011b      	lsls	r3, r3, #4
   23878:	18d3      	adds	r3, r2, r3
   2387a:	330a      	adds	r3, #10
   2387c:	781b      	ldrb	r3, [r3, #0]
   2387e:	b2db      	uxtb	r3, r3
   23880:	2b00      	cmp	r3, #0
   23882:	d11c      	bne.n	238be <Socket_ReadSocketData+0x1ca>
   23884:	2330      	movs	r3, #48	; 0x30
   23886:	18fb      	adds	r3, r7, r3
   23888:	881b      	ldrh	r3, [r3, #0]
   2388a:	2b00      	cmp	r3, #0
   2388c:	d017      	beq.n	238be <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   2388e:	2301      	movs	r3, #1
   23890:	2200      	movs	r2, #0
   23892:	2100      	movs	r1, #0
   23894:	2000      	movs	r0, #0
   23896:	4c10      	ldr	r4, [pc, #64]	; (238d8 <Socket_ReadSocketData+0x1e4>)
   23898:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   2389a:	e017      	b.n	238cc <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   2389c:	4b10      	ldr	r3, [pc, #64]	; (238e0 <Socket_ReadSocketData+0x1ec>)
   2389e:	0018      	movs	r0, r3
   238a0:	4b10      	ldr	r3, [pc, #64]	; (238e4 <Socket_ReadSocketData+0x1f0>)
   238a2:	4798      	blx	r3
   238a4:	2330      	movs	r3, #48	; 0x30
   238a6:	18fb      	adds	r3, r7, r3
   238a8:	881a      	ldrh	r2, [r3, #0]
   238aa:	4b0f      	ldr	r3, [pc, #60]	; (238e8 <Socket_ReadSocketData+0x1f4>)
   238ac:	0011      	movs	r1, r2
   238ae:	0018      	movs	r0, r3
   238b0:	4b0c      	ldr	r3, [pc, #48]	; (238e4 <Socket_ReadSocketData+0x1f0>)
   238b2:	4798      	blx	r3
   238b4:	4b0d      	ldr	r3, [pc, #52]	; (238ec <Socket_ReadSocketData+0x1f8>)
   238b6:	0018      	movs	r0, r3
   238b8:	4b0a      	ldr	r3, [pc, #40]	; (238e4 <Socket_ReadSocketData+0x1f0>)
   238ba:	4798      	blx	r3
				break;
   238bc:	e006      	b.n	238cc <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   238be:	2330      	movs	r3, #48	; 0x30
   238c0:	18fb      	adds	r3, r7, r3
   238c2:	881b      	ldrh	r3, [r3, #0]
   238c4:	2b00      	cmp	r3, #0
   238c6:	d000      	beq.n	238ca <Socket_ReadSocketData+0x1d6>
   238c8:	e753      	b.n	23772 <Socket_ReadSocketData+0x7e>
	}
}
   238ca:	e7ff      	b.n	238cc <Socket_ReadSocketData+0x1d8>
   238cc:	46c0      	nop			; (mov r8, r8)
   238ce:	46bd      	mov	sp, r7
   238d0:	b009      	add	sp, #36	; 0x24
   238d2:	bd90      	pop	{r4, r7, pc}
   238d4:	200058c4 	.word	0x200058c4
   238d8:	000200ed 	.word	0x000200ed
   238dc:	20005974 	.word	0x20005974
   238e0:	000378bc 	.word	0x000378bc
   238e4:	0001c7d9 	.word	0x0001c7d9
   238e8:	000378c8 	.word	0x000378c8
   238ec:	000378dc 	.word	0x000378dc

000238f0 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   238f0:	b590      	push	{r4, r7, lr}
   238f2:	b0bb      	sub	sp, #236	; 0xec
   238f4:	af02      	add	r7, sp, #8
   238f6:	603a      	str	r2, [r7, #0]
   238f8:	1dfb      	adds	r3, r7, #7
   238fa:	1c02      	adds	r2, r0, #0
   238fc:	701a      	strb	r2, [r3, #0]
   238fe:	1d3b      	adds	r3, r7, #4
   23900:	1c0a      	adds	r2, r1, #0
   23902:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   23904:	1dfb      	adds	r3, r7, #7
   23906:	781b      	ldrb	r3, [r3, #0]
   23908:	2b41      	cmp	r3, #65	; 0x41
   2390a:	d003      	beq.n	23914 <m2m_ip_cb+0x24>
   2390c:	1dfb      	adds	r3, r7, #7
   2390e:	781b      	ldrb	r3, [r3, #0]
   23910:	2b54      	cmp	r3, #84	; 0x54
   23912:	d120      	bne.n	23956 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   23914:	23cc      	movs	r3, #204	; 0xcc
   23916:	18f9      	adds	r1, r7, r3
   23918:	6838      	ldr	r0, [r7, #0]
   2391a:	2300      	movs	r3, #0
   2391c:	2204      	movs	r2, #4
   2391e:	4c98      	ldr	r4, [pc, #608]	; (23b80 <m2m_ip_cb+0x290>)
   23920:	47a0      	blx	r4
   23922:	1e03      	subs	r3, r0, #0
   23924:	d000      	beq.n	23928 <m2m_ip_cb+0x38>
   23926:	e275      	b.n	23e14 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   23928:	23cc      	movs	r3, #204	; 0xcc
   2392a:	18fb      	adds	r3, r7, r3
   2392c:	2201      	movs	r2, #1
   2392e:	569a      	ldrsb	r2, [r3, r2]
   23930:	23c8      	movs	r3, #200	; 0xc8
   23932:	18fb      	adds	r3, r7, r3
   23934:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   23936:	4b93      	ldr	r3, [pc, #588]	; (23b84 <m2m_ip_cb+0x294>)
   23938:	681b      	ldr	r3, [r3, #0]
   2393a:	2b00      	cmp	r3, #0
   2393c:	d100      	bne.n	23940 <m2m_ip_cb+0x50>
   2393e:	e269      	b.n	23e14 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   23940:	4b90      	ldr	r3, [pc, #576]	; (23b84 <m2m_ip_cb+0x294>)
   23942:	681b      	ldr	r3, [r3, #0]
   23944:	22cc      	movs	r2, #204	; 0xcc
   23946:	18ba      	adds	r2, r7, r2
   23948:	2000      	movs	r0, #0
   2394a:	5610      	ldrsb	r0, [r2, r0]
   2394c:	22c8      	movs	r2, #200	; 0xc8
   2394e:	18ba      	adds	r2, r7, r2
   23950:	2101      	movs	r1, #1
   23952:	4798      	blx	r3
	{
   23954:	e25e      	b.n	23e14 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   23956:	1dfb      	adds	r3, r7, #7
   23958:	781b      	ldrb	r3, [r3, #0]
   2395a:	2b42      	cmp	r3, #66	; 0x42
   2395c:	d120      	bne.n	239a0 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   2395e:	23c4      	movs	r3, #196	; 0xc4
   23960:	18f9      	adds	r1, r7, r3
   23962:	6838      	ldr	r0, [r7, #0]
   23964:	2300      	movs	r3, #0
   23966:	2204      	movs	r2, #4
   23968:	4c85      	ldr	r4, [pc, #532]	; (23b80 <m2m_ip_cb+0x290>)
   2396a:	47a0      	blx	r4
   2396c:	1e03      	subs	r3, r0, #0
   2396e:	d000      	beq.n	23972 <m2m_ip_cb+0x82>
   23970:	e257      	b.n	23e22 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   23972:	23c4      	movs	r3, #196	; 0xc4
   23974:	18fb      	adds	r3, r7, r3
   23976:	2201      	movs	r2, #1
   23978:	569a      	ldrsb	r2, [r3, r2]
   2397a:	23c0      	movs	r3, #192	; 0xc0
   2397c:	18fb      	adds	r3, r7, r3
   2397e:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   23980:	4b80      	ldr	r3, [pc, #512]	; (23b84 <m2m_ip_cb+0x294>)
   23982:	681b      	ldr	r3, [r3, #0]
   23984:	2b00      	cmp	r3, #0
   23986:	d100      	bne.n	2398a <m2m_ip_cb+0x9a>
   23988:	e24b      	b.n	23e22 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   2398a:	4b7e      	ldr	r3, [pc, #504]	; (23b84 <m2m_ip_cb+0x294>)
   2398c:	681b      	ldr	r3, [r3, #0]
   2398e:	22c4      	movs	r2, #196	; 0xc4
   23990:	18ba      	adds	r2, r7, r2
   23992:	2000      	movs	r0, #0
   23994:	5610      	ldrsb	r0, [r2, r0]
   23996:	22c0      	movs	r2, #192	; 0xc0
   23998:	18ba      	adds	r2, r7, r2
   2399a:	2102      	movs	r1, #2
   2399c:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   2399e:	e240      	b.n	23e22 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   239a0:	1dfb      	adds	r3, r7, #7
   239a2:	781b      	ldrb	r3, [r3, #0]
   239a4:	2b43      	cmp	r3, #67	; 0x43
   239a6:	d000      	beq.n	239aa <m2m_ip_cb+0xba>
   239a8:	e086      	b.n	23ab8 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   239aa:	23b4      	movs	r3, #180	; 0xb4
   239ac:	18f9      	adds	r1, r7, r3
   239ae:	6838      	ldr	r0, [r7, #0]
   239b0:	2300      	movs	r3, #0
   239b2:	220c      	movs	r2, #12
   239b4:	4c72      	ldr	r4, [pc, #456]	; (23b80 <m2m_ip_cb+0x290>)
   239b6:	47a0      	blx	r4
   239b8:	1e03      	subs	r3, r0, #0
   239ba:	d000      	beq.n	239be <m2m_ip_cb+0xce>
   239bc:	e231      	b.n	23e22 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   239be:	23b4      	movs	r3, #180	; 0xb4
   239c0:	18fb      	adds	r3, r7, r3
   239c2:	7a5b      	ldrb	r3, [r3, #9]
   239c4:	b25b      	sxtb	r3, r3
   239c6:	2b00      	cmp	r3, #0
   239c8:	db4f      	blt.n	23a6a <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   239ca:	23b4      	movs	r3, #180	; 0xb4
   239cc:	18fb      	adds	r3, r7, r3
   239ce:	7a5b      	ldrb	r3, [r3, #9]
   239d0:	b25b      	sxtb	r3, r3
   239d2:	0018      	movs	r0, r3
   239d4:	23b4      	movs	r3, #180	; 0xb4
   239d6:	18fb      	adds	r3, r7, r3
   239d8:	7a1b      	ldrb	r3, [r3, #8]
   239da:	b25b      	sxtb	r3, r3
   239dc:	4a6a      	ldr	r2, [pc, #424]	; (23b88 <m2m_ip_cb+0x298>)
   239de:	011b      	lsls	r3, r3, #4
   239e0:	18d3      	adds	r3, r2, r3
   239e2:	330b      	adds	r3, #11
   239e4:	781b      	ldrb	r3, [r3, #0]
   239e6:	b2d9      	uxtb	r1, r3
   239e8:	4a67      	ldr	r2, [pc, #412]	; (23b88 <m2m_ip_cb+0x298>)
   239ea:	0103      	lsls	r3, r0, #4
   239ec:	18d3      	adds	r3, r2, r3
   239ee:	330b      	adds	r3, #11
   239f0:	1c0a      	adds	r2, r1, #0
   239f2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   239f4:	23b4      	movs	r3, #180	; 0xb4
   239f6:	18fb      	adds	r3, r7, r3
   239f8:	7a5b      	ldrb	r3, [r3, #9]
   239fa:	b25b      	sxtb	r3, r3
   239fc:	4a62      	ldr	r2, [pc, #392]	; (23b88 <m2m_ip_cb+0x298>)
   239fe:	011b      	lsls	r3, r3, #4
   23a00:	18d3      	adds	r3, r2, r3
   23a02:	330a      	adds	r3, #10
   23a04:	2201      	movs	r2, #1
   23a06:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   23a08:	23b4      	movs	r3, #180	; 0xb4
   23a0a:	18fb      	adds	r3, r7, r3
   23a0c:	7a5b      	ldrb	r3, [r3, #9]
   23a0e:	b25b      	sxtb	r3, r3
   23a10:	0018      	movs	r0, r3
   23a12:	23b4      	movs	r3, #180	; 0xb4
   23a14:	18fb      	adds	r3, r7, r3
   23a16:	895b      	ldrh	r3, [r3, #10]
   23a18:	3b08      	subs	r3, #8
   23a1a:	b299      	uxth	r1, r3
   23a1c:	4a5a      	ldr	r2, [pc, #360]	; (23b88 <m2m_ip_cb+0x298>)
   23a1e:	0103      	lsls	r3, r0, #4
   23a20:	18d3      	adds	r3, r2, r3
   23a22:	3308      	adds	r3, #8
   23a24:	1c0a      	adds	r2, r1, #0
   23a26:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   23a28:	4b58      	ldr	r3, [pc, #352]	; (23b8c <m2m_ip_cb+0x29c>)
   23a2a:	881b      	ldrh	r3, [r3, #0]
   23a2c:	b29b      	uxth	r3, r3
   23a2e:	3301      	adds	r3, #1
   23a30:	b29a      	uxth	r2, r3
   23a32:	4b56      	ldr	r3, [pc, #344]	; (23b8c <m2m_ip_cb+0x29c>)
   23a34:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   23a36:	4b55      	ldr	r3, [pc, #340]	; (23b8c <m2m_ip_cb+0x29c>)
   23a38:	881b      	ldrh	r3, [r3, #0]
   23a3a:	b29b      	uxth	r3, r3
   23a3c:	2b00      	cmp	r3, #0
   23a3e:	d106      	bne.n	23a4e <m2m_ip_cb+0x15e>
					++gu16SessionID;
   23a40:	4b52      	ldr	r3, [pc, #328]	; (23b8c <m2m_ip_cb+0x29c>)
   23a42:	881b      	ldrh	r3, [r3, #0]
   23a44:	b29b      	uxth	r3, r3
   23a46:	3301      	adds	r3, #1
   23a48:	b29a      	uxth	r2, r3
   23a4a:	4b50      	ldr	r3, [pc, #320]	; (23b8c <m2m_ip_cb+0x29c>)
   23a4c:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   23a4e:	23b4      	movs	r3, #180	; 0xb4
   23a50:	18fb      	adds	r3, r7, r3
   23a52:	7a5b      	ldrb	r3, [r3, #9]
   23a54:	b25b      	sxtb	r3, r3
   23a56:	0018      	movs	r0, r3
   23a58:	4b4c      	ldr	r3, [pc, #304]	; (23b8c <m2m_ip_cb+0x29c>)
   23a5a:	881b      	ldrh	r3, [r3, #0]
   23a5c:	b299      	uxth	r1, r3
   23a5e:	4a4a      	ldr	r2, [pc, #296]	; (23b88 <m2m_ip_cb+0x298>)
   23a60:	0103      	lsls	r3, r0, #4
   23a62:	18d3      	adds	r3, r2, r3
   23a64:	3306      	adds	r3, #6
   23a66:	1c0a      	adds	r2, r1, #0
   23a68:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   23a6a:	23b4      	movs	r3, #180	; 0xb4
   23a6c:	18fb      	adds	r3, r7, r3
   23a6e:	2209      	movs	r2, #9
   23a70:	569a      	ldrsb	r2, [r3, r2]
   23a72:	23a0      	movs	r3, #160	; 0xa0
   23a74:	18fb      	adds	r3, r7, r3
   23a76:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   23a78:	23a0      	movs	r3, #160	; 0xa0
   23a7a:	18fb      	adds	r3, r7, r3
   23a7c:	2202      	movs	r2, #2
   23a7e:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   23a80:	23b4      	movs	r3, #180	; 0xb4
   23a82:	18fb      	adds	r3, r7, r3
   23a84:	885a      	ldrh	r2, [r3, #2]
   23a86:	23a0      	movs	r3, #160	; 0xa0
   23a88:	18fb      	adds	r3, r7, r3
   23a8a:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   23a8c:	23b4      	movs	r3, #180	; 0xb4
   23a8e:	18fb      	adds	r3, r7, r3
   23a90:	685a      	ldr	r2, [r3, #4]
   23a92:	23a0      	movs	r3, #160	; 0xa0
   23a94:	18fb      	adds	r3, r7, r3
   23a96:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   23a98:	4b3a      	ldr	r3, [pc, #232]	; (23b84 <m2m_ip_cb+0x294>)
   23a9a:	681b      	ldr	r3, [r3, #0]
   23a9c:	2b00      	cmp	r3, #0
   23a9e:	d100      	bne.n	23aa2 <m2m_ip_cb+0x1b2>
   23aa0:	e1bf      	b.n	23e22 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   23aa2:	4b38      	ldr	r3, [pc, #224]	; (23b84 <m2m_ip_cb+0x294>)
   23aa4:	681b      	ldr	r3, [r3, #0]
   23aa6:	22b4      	movs	r2, #180	; 0xb4
   23aa8:	18ba      	adds	r2, r7, r2
   23aaa:	2008      	movs	r0, #8
   23aac:	5610      	ldrsb	r0, [r2, r0]
   23aae:	22a0      	movs	r2, #160	; 0xa0
   23ab0:	18ba      	adds	r2, r7, r2
   23ab2:	2104      	movs	r1, #4
   23ab4:	4798      	blx	r3
}
   23ab6:	e1b4      	b.n	23e22 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   23ab8:	1dfb      	adds	r3, r7, #7
   23aba:	781b      	ldrb	r3, [r3, #0]
   23abc:	2b44      	cmp	r3, #68	; 0x44
   23abe:	d003      	beq.n	23ac8 <m2m_ip_cb+0x1d8>
   23ac0:	1dfb      	adds	r3, r7, #7
   23ac2:	781b      	ldrb	r3, [r3, #0]
   23ac4:	2b4b      	cmp	r3, #75	; 0x4b
   23ac6:	d13d      	bne.n	23b44 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   23ac8:	239c      	movs	r3, #156	; 0x9c
   23aca:	18f9      	adds	r1, r7, r3
   23acc:	6838      	ldr	r0, [r7, #0]
   23ace:	2300      	movs	r3, #0
   23ad0:	2204      	movs	r2, #4
   23ad2:	4c2b      	ldr	r4, [pc, #172]	; (23b80 <m2m_ip_cb+0x290>)
   23ad4:	47a0      	blx	r4
   23ad6:	1e03      	subs	r3, r0, #0
   23ad8:	d000      	beq.n	23adc <m2m_ip_cb+0x1ec>
   23ada:	e19d      	b.n	23e18 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   23adc:	239c      	movs	r3, #156	; 0x9c
   23ade:	18fb      	adds	r3, r7, r3
   23ae0:	2200      	movs	r2, #0
   23ae2:	569a      	ldrsb	r2, [r3, r2]
   23ae4:	2398      	movs	r3, #152	; 0x98
   23ae6:	18fb      	adds	r3, r7, r3
   23ae8:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   23aea:	239c      	movs	r3, #156	; 0x9c
   23aec:	18fb      	adds	r3, r7, r3
   23aee:	2201      	movs	r2, #1
   23af0:	569a      	ldrsb	r2, [r3, r2]
   23af2:	2398      	movs	r3, #152	; 0x98
   23af4:	18fb      	adds	r3, r7, r3
   23af6:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   23af8:	239c      	movs	r3, #156	; 0x9c
   23afa:	18fb      	adds	r3, r7, r3
   23afc:	785b      	ldrb	r3, [r3, #1]
   23afe:	b25b      	sxtb	r3, r3
   23b00:	2b00      	cmp	r3, #0
   23b02:	d10f      	bne.n	23b24 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   23b04:	239c      	movs	r3, #156	; 0x9c
   23b06:	18fb      	adds	r3, r7, r3
   23b08:	781b      	ldrb	r3, [r3, #0]
   23b0a:	b25b      	sxtb	r3, r3
   23b0c:	0018      	movs	r0, r3
   23b0e:	239c      	movs	r3, #156	; 0x9c
   23b10:	18fb      	adds	r3, r7, r3
   23b12:	885b      	ldrh	r3, [r3, #2]
   23b14:	3b08      	subs	r3, #8
   23b16:	b299      	uxth	r1, r3
   23b18:	4a1b      	ldr	r2, [pc, #108]	; (23b88 <m2m_ip_cb+0x298>)
   23b1a:	0103      	lsls	r3, r0, #4
   23b1c:	18d3      	adds	r3, r2, r3
   23b1e:	3308      	adds	r3, #8
   23b20:	1c0a      	adds	r2, r1, #0
   23b22:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   23b24:	4b17      	ldr	r3, [pc, #92]	; (23b84 <m2m_ip_cb+0x294>)
   23b26:	681b      	ldr	r3, [r3, #0]
   23b28:	2b00      	cmp	r3, #0
   23b2a:	d100      	bne.n	23b2e <m2m_ip_cb+0x23e>
   23b2c:	e174      	b.n	23e18 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   23b2e:	4b15      	ldr	r3, [pc, #84]	; (23b84 <m2m_ip_cb+0x294>)
   23b30:	681b      	ldr	r3, [r3, #0]
   23b32:	229c      	movs	r2, #156	; 0x9c
   23b34:	18ba      	adds	r2, r7, r2
   23b36:	2000      	movs	r0, #0
   23b38:	5610      	ldrsb	r0, [r2, r0]
   23b3a:	2298      	movs	r2, #152	; 0x98
   23b3c:	18ba      	adds	r2, r7, r2
   23b3e:	2105      	movs	r1, #5
   23b40:	4798      	blx	r3
	{
   23b42:	e169      	b.n	23e18 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   23b44:	1dfb      	adds	r3, r7, #7
   23b46:	781b      	ldrb	r3, [r3, #0]
   23b48:	2b4a      	cmp	r3, #74	; 0x4a
   23b4a:	d123      	bne.n	23b94 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   23b4c:	230c      	movs	r3, #12
   23b4e:	18f9      	adds	r1, r7, r3
   23b50:	6838      	ldr	r0, [r7, #0]
   23b52:	2300      	movs	r3, #0
   23b54:	2244      	movs	r2, #68	; 0x44
   23b56:	4c0a      	ldr	r4, [pc, #40]	; (23b80 <m2m_ip_cb+0x290>)
   23b58:	47a0      	blx	r4
   23b5a:	1e03      	subs	r3, r0, #0
   23b5c:	d000      	beq.n	23b60 <m2m_ip_cb+0x270>
   23b5e:	e160      	b.n	23e22 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   23b60:	4b0b      	ldr	r3, [pc, #44]	; (23b90 <m2m_ip_cb+0x2a0>)
   23b62:	681b      	ldr	r3, [r3, #0]
   23b64:	2b00      	cmp	r3, #0
   23b66:	d100      	bne.n	23b6a <m2m_ip_cb+0x27a>
   23b68:	e15b      	b.n	23e22 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   23b6a:	4b09      	ldr	r3, [pc, #36]	; (23b90 <m2m_ip_cb+0x2a0>)
   23b6c:	681a      	ldr	r2, [r3, #0]
   23b6e:	230c      	movs	r3, #12
   23b70:	18fb      	adds	r3, r7, r3
   23b72:	6c19      	ldr	r1, [r3, #64]	; 0x40
   23b74:	230c      	movs	r3, #12
   23b76:	18fb      	adds	r3, r7, r3
   23b78:	0018      	movs	r0, r3
   23b7a:	4790      	blx	r2
}
   23b7c:	e151      	b.n	23e22 <m2m_ip_cb+0x532>
   23b7e:	46c0      	nop			; (mov r8, r8)
   23b80:	000200ed 	.word	0x000200ed
   23b84:	20005974 	.word	0x20005974
   23b88:	200058c4 	.word	0x200058c4
   23b8c:	2000412a 	.word	0x2000412a
   23b90:	2000597c 	.word	0x2000597c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   23b94:	1dfb      	adds	r3, r7, #7
   23b96:	781b      	ldrb	r3, [r3, #0]
   23b98:	2b46      	cmp	r3, #70	; 0x46
   23b9a:	d008      	beq.n	23bae <m2m_ip_cb+0x2be>
   23b9c:	1dfb      	adds	r3, r7, #7
   23b9e:	781b      	ldrb	r3, [r3, #0]
   23ba0:	2b48      	cmp	r3, #72	; 0x48
   23ba2:	d004      	beq.n	23bae <m2m_ip_cb+0x2be>
   23ba4:	1dfb      	adds	r3, r7, #7
   23ba6:	781b      	ldrb	r3, [r3, #0]
   23ba8:	2b4d      	cmp	r3, #77	; 0x4d
   23baa:	d000      	beq.n	23bae <m2m_ip_cb+0x2be>
   23bac:	e0b4      	b.n	23d18 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   23bae:	23df      	movs	r3, #223	; 0xdf
   23bb0:	18fb      	adds	r3, r7, r3
   23bb2:	2206      	movs	r2, #6
   23bb4:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   23bb6:	1dfb      	adds	r3, r7, #7
   23bb8:	781b      	ldrb	r3, [r3, #0]
   23bba:	2b48      	cmp	r3, #72	; 0x48
   23bbc:	d103      	bne.n	23bc6 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   23bbe:	23df      	movs	r3, #223	; 0xdf
   23bc0:	18fb      	adds	r3, r7, r3
   23bc2:	2209      	movs	r2, #9
   23bc4:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   23bc6:	23d8      	movs	r3, #216	; 0xd8
   23bc8:	18fb      	adds	r3, r7, r3
   23bca:	2210      	movs	r2, #16
   23bcc:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   23bce:	23d8      	movs	r3, #216	; 0xd8
   23bd0:	18fb      	adds	r3, r7, r3
   23bd2:	881a      	ldrh	r2, [r3, #0]
   23bd4:	2388      	movs	r3, #136	; 0x88
   23bd6:	18f9      	adds	r1, r7, r3
   23bd8:	6838      	ldr	r0, [r7, #0]
   23bda:	2300      	movs	r3, #0
   23bdc:	4c93      	ldr	r4, [pc, #588]	; (23e2c <m2m_ip_cb+0x53c>)
   23bde:	47a0      	blx	r4
   23be0:	1e03      	subs	r3, r0, #0
   23be2:	d000      	beq.n	23be6 <m2m_ip_cb+0x2f6>
   23be4:	e11a      	b.n	23e1c <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   23be6:	23d6      	movs	r3, #214	; 0xd6
   23be8:	18fb      	adds	r3, r7, r3
   23bea:	2200      	movs	r2, #0
   23bec:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   23bee:	23d5      	movs	r3, #213	; 0xd5
   23bf0:	18fb      	adds	r3, r7, r3
   23bf2:	2288      	movs	r2, #136	; 0x88
   23bf4:	18ba      	adds	r2, r7, r2
   23bf6:	7b12      	ldrb	r2, [r2, #12]
   23bf8:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   23bfa:	23d6      	movs	r3, #214	; 0xd6
   23bfc:	18fb      	adds	r3, r7, r3
   23bfe:	2288      	movs	r2, #136	; 0x88
   23c00:	18ba      	adds	r2, r7, r2
   23c02:	89d2      	ldrh	r2, [r2, #14]
   23c04:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   23c06:	23d5      	movs	r3, #213	; 0xd5
   23c08:	18fb      	adds	r3, r7, r3
   23c0a:	781b      	ldrb	r3, [r3, #0]
   23c0c:	b25b      	sxtb	r3, r3
   23c0e:	4a88      	ldr	r2, [pc, #544]	; (23e30 <m2m_ip_cb+0x540>)
   23c10:	011b      	lsls	r3, r3, #4
   23c12:	18d3      	adds	r3, r2, r3
   23c14:	330c      	adds	r3, #12
   23c16:	2200      	movs	r2, #0
   23c18:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   23c1a:	23d2      	movs	r3, #210	; 0xd2
   23c1c:	18fb      	adds	r3, r7, r3
   23c1e:	2288      	movs	r2, #136	; 0x88
   23c20:	18ba      	adds	r2, r7, r2
   23c22:	8912      	ldrh	r2, [r2, #8]
   23c24:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   23c26:	23d0      	movs	r3, #208	; 0xd0
   23c28:	18fb      	adds	r3, r7, r3
   23c2a:	2288      	movs	r2, #136	; 0x88
   23c2c:	18ba      	adds	r2, r7, r2
   23c2e:	8952      	ldrh	r2, [r2, #10]
   23c30:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   23c32:	2388      	movs	r3, #136	; 0x88
   23c34:	18fb      	adds	r3, r7, r3
   23c36:	885a      	ldrh	r2, [r3, #2]
   23c38:	2370      	movs	r3, #112	; 0x70
   23c3a:	18fb      	adds	r3, r7, r3
   23c3c:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   23c3e:	2388      	movs	r3, #136	; 0x88
   23c40:	18fb      	adds	r3, r7, r3
   23c42:	685a      	ldr	r2, [r3, #4]
   23c44:	2370      	movs	r3, #112	; 0x70
   23c46:	18fb      	adds	r3, r7, r3
   23c48:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   23c4a:	23d5      	movs	r3, #213	; 0xd5
   23c4c:	18fb      	adds	r3, r7, r3
   23c4e:	781b      	ldrb	r3, [r3, #0]
   23c50:	b25b      	sxtb	r3, r3
   23c52:	4a77      	ldr	r2, [pc, #476]	; (23e30 <m2m_ip_cb+0x540>)
   23c54:	011b      	lsls	r3, r3, #4
   23c56:	18d3      	adds	r3, r2, r3
   23c58:	3306      	adds	r3, #6
   23c5a:	881b      	ldrh	r3, [r3, #0]
   23c5c:	b29b      	uxth	r3, r3
   23c5e:	22d6      	movs	r2, #214	; 0xd6
   23c60:	18ba      	adds	r2, r7, r2
   23c62:	8812      	ldrh	r2, [r2, #0]
   23c64:	429a      	cmp	r2, r3
   23c66:	d148      	bne.n	23cfa <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   23c68:	23d2      	movs	r3, #210	; 0xd2
   23c6a:	18fb      	adds	r3, r7, r3
   23c6c:	2200      	movs	r2, #0
   23c6e:	5e9b      	ldrsh	r3, [r3, r2]
   23c70:	2b00      	cmp	r3, #0
   23c72:	dd25      	ble.n	23cc0 <m2m_ip_cb+0x3d0>
   23c74:	23d2      	movs	r3, #210	; 0xd2
   23c76:	18fb      	adds	r3, r7, r3
   23c78:	2200      	movs	r2, #0
   23c7a:	5e9a      	ldrsh	r2, [r3, r2]
   23c7c:	1d3b      	adds	r3, r7, #4
   23c7e:	881b      	ldrh	r3, [r3, #0]
   23c80:	429a      	cmp	r2, r3
   23c82:	da1d      	bge.n	23cc0 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   23c84:	23d0      	movs	r3, #208	; 0xd0
   23c86:	18fb      	adds	r3, r7, r3
   23c88:	881b      	ldrh	r3, [r3, #0]
   23c8a:	683a      	ldr	r2, [r7, #0]
   23c8c:	18d3      	adds	r3, r2, r3
   23c8e:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   23c90:	23d8      	movs	r3, #216	; 0xd8
   23c92:	18fb      	adds	r3, r7, r3
   23c94:	22d2      	movs	r2, #210	; 0xd2
   23c96:	18ba      	adds	r2, r7, r2
   23c98:	8812      	ldrh	r2, [r2, #0]
   23c9a:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   23c9c:	683c      	ldr	r4, [r7, #0]
   23c9e:	23df      	movs	r3, #223	; 0xdf
   23ca0:	18fb      	adds	r3, r7, r3
   23ca2:	781a      	ldrb	r2, [r3, #0]
   23ca4:	2370      	movs	r3, #112	; 0x70
   23ca6:	18f9      	adds	r1, r7, r3
   23ca8:	23d5      	movs	r3, #213	; 0xd5
   23caa:	18fb      	adds	r3, r7, r3
   23cac:	2000      	movs	r0, #0
   23cae:	5618      	ldrsb	r0, [r3, r0]
   23cb0:	23d8      	movs	r3, #216	; 0xd8
   23cb2:	18fb      	adds	r3, r7, r3
   23cb4:	881b      	ldrh	r3, [r3, #0]
   23cb6:	9300      	str	r3, [sp, #0]
   23cb8:	0023      	movs	r3, r4
   23cba:	4c5e      	ldr	r4, [pc, #376]	; (23e34 <m2m_ip_cb+0x544>)
   23cbc:	47a0      	blx	r4
	{
   23cbe:	e0ad      	b.n	23e1c <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   23cc0:	2370      	movs	r3, #112	; 0x70
   23cc2:	18fb      	adds	r3, r7, r3
   23cc4:	22d2      	movs	r2, #210	; 0xd2
   23cc6:	18ba      	adds	r2, r7, r2
   23cc8:	8812      	ldrh	r2, [r2, #0]
   23cca:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   23ccc:	2370      	movs	r3, #112	; 0x70
   23cce:	18fb      	adds	r3, r7, r3
   23cd0:	2200      	movs	r2, #0
   23cd2:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   23cd4:	4b58      	ldr	r3, [pc, #352]	; (23e38 <m2m_ip_cb+0x548>)
   23cd6:	681b      	ldr	r3, [r3, #0]
   23cd8:	2b00      	cmp	r3, #0
   23cda:	d100      	bne.n	23cde <m2m_ip_cb+0x3ee>
   23cdc:	e09e      	b.n	23e1c <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   23cde:	4b56      	ldr	r3, [pc, #344]	; (23e38 <m2m_ip_cb+0x548>)
   23ce0:	681b      	ldr	r3, [r3, #0]
   23ce2:	2270      	movs	r2, #112	; 0x70
   23ce4:	18bc      	adds	r4, r7, r2
   23ce6:	22df      	movs	r2, #223	; 0xdf
   23ce8:	18ba      	adds	r2, r7, r2
   23cea:	7811      	ldrb	r1, [r2, #0]
   23cec:	22d5      	movs	r2, #213	; 0xd5
   23cee:	18ba      	adds	r2, r7, r2
   23cf0:	2000      	movs	r0, #0
   23cf2:	5610      	ldrsb	r0, [r2, r0]
   23cf4:	0022      	movs	r2, r4
   23cf6:	4798      	blx	r3
	{
   23cf8:	e090      	b.n	23e1c <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   23cfa:	23d8      	movs	r3, #216	; 0xd8
   23cfc:	18fa      	adds	r2, r7, r3
   23cfe:	1d3b      	adds	r3, r7, #4
   23d00:	8812      	ldrh	r2, [r2, #0]
   23d02:	881b      	ldrh	r3, [r3, #0]
   23d04:	429a      	cmp	r2, r3
   23d06:	d300      	bcc.n	23d0a <m2m_ip_cb+0x41a>
   23d08:	e088      	b.n	23e1c <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   23d0a:	2301      	movs	r3, #1
   23d0c:	2200      	movs	r2, #0
   23d0e:	2100      	movs	r1, #0
   23d10:	2000      	movs	r0, #0
   23d12:	4c46      	ldr	r4, [pc, #280]	; (23e2c <m2m_ip_cb+0x53c>)
   23d14:	47a0      	blx	r4
	{
   23d16:	e081      	b.n	23e1c <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   23d18:	1dfb      	adds	r3, r7, #7
   23d1a:	781b      	ldrb	r3, [r3, #0]
   23d1c:	2b45      	cmp	r3, #69	; 0x45
   23d1e:	d007      	beq.n	23d30 <m2m_ip_cb+0x440>
   23d20:	1dfb      	adds	r3, r7, #7
   23d22:	781b      	ldrb	r3, [r3, #0]
   23d24:	2b47      	cmp	r3, #71	; 0x47
   23d26:	d003      	beq.n	23d30 <m2m_ip_cb+0x440>
   23d28:	1dfb      	adds	r3, r7, #7
   23d2a:	781b      	ldrb	r3, [r3, #0]
   23d2c:	2b4c      	cmp	r3, #76	; 0x4c
   23d2e:	d14c      	bne.n	23dca <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   23d30:	23de      	movs	r3, #222	; 0xde
   23d32:	18fb      	adds	r3, r7, r3
   23d34:	2207      	movs	r2, #7
   23d36:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   23d38:	1dfb      	adds	r3, r7, #7
   23d3a:	781b      	ldrb	r3, [r3, #0]
   23d3c:	2b47      	cmp	r3, #71	; 0x47
   23d3e:	d103      	bne.n	23d48 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   23d40:	23de      	movs	r3, #222	; 0xde
   23d42:	18fb      	adds	r3, r7, r3
   23d44:	2208      	movs	r2, #8
   23d46:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   23d48:	2364      	movs	r3, #100	; 0x64
   23d4a:	18f9      	adds	r1, r7, r3
   23d4c:	6838      	ldr	r0, [r7, #0]
   23d4e:	2300      	movs	r3, #0
   23d50:	2208      	movs	r2, #8
   23d52:	4c36      	ldr	r4, [pc, #216]	; (23e2c <m2m_ip_cb+0x53c>)
   23d54:	47a0      	blx	r4
   23d56:	1e03      	subs	r3, r0, #0
   23d58:	d162      	bne.n	23e20 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   23d5a:	23dc      	movs	r3, #220	; 0xdc
   23d5c:	18fb      	adds	r3, r7, r3
   23d5e:	2200      	movs	r2, #0
   23d60:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   23d62:	23db      	movs	r3, #219	; 0xdb
   23d64:	18fb      	adds	r3, r7, r3
   23d66:	2264      	movs	r2, #100	; 0x64
   23d68:	18ba      	adds	r2, r7, r2
   23d6a:	7812      	ldrb	r2, [r2, #0]
   23d6c:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   23d6e:	23dc      	movs	r3, #220	; 0xdc
   23d70:	18fb      	adds	r3, r7, r3
   23d72:	2264      	movs	r2, #100	; 0x64
   23d74:	18ba      	adds	r2, r7, r2
   23d76:	8892      	ldrh	r2, [r2, #4]
   23d78:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   23d7a:	2364      	movs	r3, #100	; 0x64
   23d7c:	18fb      	adds	r3, r7, r3
   23d7e:	2202      	movs	r2, #2
   23d80:	5e9a      	ldrsh	r2, [r3, r2]
   23d82:	236e      	movs	r3, #110	; 0x6e
   23d84:	18fb      	adds	r3, r7, r3
   23d86:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   23d88:	23db      	movs	r3, #219	; 0xdb
   23d8a:	18fb      	adds	r3, r7, r3
   23d8c:	781b      	ldrb	r3, [r3, #0]
   23d8e:	b25b      	sxtb	r3, r3
   23d90:	4a27      	ldr	r2, [pc, #156]	; (23e30 <m2m_ip_cb+0x540>)
   23d92:	011b      	lsls	r3, r3, #4
   23d94:	18d3      	adds	r3, r2, r3
   23d96:	3306      	adds	r3, #6
   23d98:	881b      	ldrh	r3, [r3, #0]
   23d9a:	b29b      	uxth	r3, r3
   23d9c:	22dc      	movs	r2, #220	; 0xdc
   23d9e:	18ba      	adds	r2, r7, r2
   23da0:	8812      	ldrh	r2, [r2, #0]
   23da2:	429a      	cmp	r2, r3
   23da4:	d13c      	bne.n	23e20 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   23da6:	4b24      	ldr	r3, [pc, #144]	; (23e38 <m2m_ip_cb+0x548>)
   23da8:	681b      	ldr	r3, [r3, #0]
   23daa:	2b00      	cmp	r3, #0
   23dac:	d038      	beq.n	23e20 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   23dae:	4b22      	ldr	r3, [pc, #136]	; (23e38 <m2m_ip_cb+0x548>)
   23db0:	681b      	ldr	r3, [r3, #0]
   23db2:	226e      	movs	r2, #110	; 0x6e
   23db4:	18bc      	adds	r4, r7, r2
   23db6:	22de      	movs	r2, #222	; 0xde
   23db8:	18ba      	adds	r2, r7, r2
   23dba:	7811      	ldrb	r1, [r2, #0]
   23dbc:	22db      	movs	r2, #219	; 0xdb
   23dbe:	18ba      	adds	r2, r7, r2
   23dc0:	2000      	movs	r0, #0
   23dc2:	5610      	ldrsb	r0, [r2, r0]
   23dc4:	0022      	movs	r2, r4
   23dc6:	4798      	blx	r3
	{
   23dc8:	e02a      	b.n	23e20 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   23dca:	1dfb      	adds	r3, r7, #7
   23dcc:	781b      	ldrb	r3, [r3, #0]
   23dce:	2b52      	cmp	r3, #82	; 0x52
   23dd0:	d127      	bne.n	23e22 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   23dd2:	2350      	movs	r3, #80	; 0x50
   23dd4:	18f9      	adds	r1, r7, r3
   23dd6:	6838      	ldr	r0, [r7, #0]
   23dd8:	2301      	movs	r3, #1
   23dda:	2214      	movs	r2, #20
   23ddc:	4c13      	ldr	r4, [pc, #76]	; (23e2c <m2m_ip_cb+0x53c>)
   23dde:	47a0      	blx	r4
   23de0:	1e03      	subs	r3, r0, #0
   23de2:	d11e      	bne.n	23e22 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   23de4:	2350      	movs	r3, #80	; 0x50
   23de6:	18fb      	adds	r3, r7, r3
   23de8:	685b      	ldr	r3, [r3, #4]
   23dea:	001a      	movs	r2, r3
   23dec:	4b13      	ldr	r3, [pc, #76]	; (23e3c <m2m_ip_cb+0x54c>)
   23dee:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   23df0:	4b12      	ldr	r3, [pc, #72]	; (23e3c <m2m_ip_cb+0x54c>)
   23df2:	681b      	ldr	r3, [r3, #0]
   23df4:	2b00      	cmp	r3, #0
   23df6:	d014      	beq.n	23e22 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   23df8:	4b10      	ldr	r3, [pc, #64]	; (23e3c <m2m_ip_cb+0x54c>)
   23dfa:	681c      	ldr	r4, [r3, #0]
   23dfc:	2350      	movs	r3, #80	; 0x50
   23dfe:	18fb      	adds	r3, r7, r3
   23e00:	6818      	ldr	r0, [r3, #0]
   23e02:	2350      	movs	r3, #80	; 0x50
   23e04:	18fb      	adds	r3, r7, r3
   23e06:	6899      	ldr	r1, [r3, #8]
   23e08:	2350      	movs	r3, #80	; 0x50
   23e0a:	18fb      	adds	r3, r7, r3
   23e0c:	7c1b      	ldrb	r3, [r3, #16]
   23e0e:	001a      	movs	r2, r3
   23e10:	47a0      	blx	r4
}
   23e12:	e006      	b.n	23e22 <m2m_ip_cb+0x532>
	{
   23e14:	46c0      	nop			; (mov r8, r8)
   23e16:	e004      	b.n	23e22 <m2m_ip_cb+0x532>
	{
   23e18:	46c0      	nop			; (mov r8, r8)
   23e1a:	e002      	b.n	23e22 <m2m_ip_cb+0x532>
	{
   23e1c:	46c0      	nop			; (mov r8, r8)
   23e1e:	e000      	b.n	23e22 <m2m_ip_cb+0x532>
	{
   23e20:	46c0      	nop			; (mov r8, r8)
}
   23e22:	46c0      	nop			; (mov r8, r8)
   23e24:	46bd      	mov	sp, r7
   23e26:	b039      	add	sp, #228	; 0xe4
   23e28:	bd90      	pop	{r4, r7, pc}
   23e2a:	46c0      	nop			; (mov r8, r8)
   23e2c:	000200ed 	.word	0x000200ed
   23e30:	200058c4 	.word	0x200058c4
   23e34:	000236f5 	.word	0x000236f5
   23e38:	20005974 	.word	0x20005974
   23e3c:	20005978 	.word	0x20005978

00023e40 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   23e40:	b580      	push	{r7, lr}
   23e42:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   23e44:	4b0c      	ldr	r3, [pc, #48]	; (23e78 <socketInit+0x38>)
   23e46:	781b      	ldrb	r3, [r3, #0]
   23e48:	b2db      	uxtb	r3, r3
   23e4a:	2b00      	cmp	r3, #0
   23e4c:	d110      	bne.n	23e70 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   23e4e:	4b0b      	ldr	r3, [pc, #44]	; (23e7c <socketInit+0x3c>)
   23e50:	22b0      	movs	r2, #176	; 0xb0
   23e52:	2100      	movs	r1, #0
   23e54:	0018      	movs	r0, r3
   23e56:	4b0a      	ldr	r3, [pc, #40]	; (23e80 <socketInit+0x40>)
   23e58:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   23e5a:	4b0a      	ldr	r3, [pc, #40]	; (23e84 <socketInit+0x44>)
   23e5c:	0019      	movs	r1, r3
   23e5e:	2002      	movs	r0, #2
   23e60:	4b09      	ldr	r3, [pc, #36]	; (23e88 <socketInit+0x48>)
   23e62:	4798      	blx	r3
		gbSocketInit	= 1;
   23e64:	4b04      	ldr	r3, [pc, #16]	; (23e78 <socketInit+0x38>)
   23e66:	2201      	movs	r2, #1
   23e68:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   23e6a:	4b08      	ldr	r3, [pc, #32]	; (23e8c <socketInit+0x4c>)
   23e6c:	2200      	movs	r2, #0
   23e6e:	801a      	strh	r2, [r3, #0]
	}
}
   23e70:	46c0      	nop			; (mov r8, r8)
   23e72:	46bd      	mov	sp, r7
   23e74:	bd80      	pop	{r7, pc}
   23e76:	46c0      	nop			; (mov r8, r8)
   23e78:	2000412c 	.word	0x2000412c
   23e7c:	200058c4 	.word	0x200058c4
   23e80:	0001f571 	.word	0x0001f571
   23e84:	000238f1 	.word	0x000238f1
   23e88:	0002026d 	.word	0x0002026d
   23e8c:	2000412a 	.word	0x2000412a

00023e90 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   23e90:	b580      	push	{r7, lr}
   23e92:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   23e94:	4b0a      	ldr	r3, [pc, #40]	; (23ec0 <socketDeinit+0x30>)
   23e96:	22b0      	movs	r2, #176	; 0xb0
   23e98:	2100      	movs	r1, #0
   23e9a:	0018      	movs	r0, r3
   23e9c:	4b09      	ldr	r3, [pc, #36]	; (23ec4 <socketDeinit+0x34>)
   23e9e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   23ea0:	2100      	movs	r1, #0
   23ea2:	2002      	movs	r0, #2
   23ea4:	4b08      	ldr	r3, [pc, #32]	; (23ec8 <socketDeinit+0x38>)
   23ea6:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   23ea8:	4b08      	ldr	r3, [pc, #32]	; (23ecc <socketDeinit+0x3c>)
   23eaa:	2200      	movs	r2, #0
   23eac:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   23eae:	4b08      	ldr	r3, [pc, #32]	; (23ed0 <socketDeinit+0x40>)
   23eb0:	2200      	movs	r2, #0
   23eb2:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   23eb4:	4b07      	ldr	r3, [pc, #28]	; (23ed4 <socketDeinit+0x44>)
   23eb6:	2200      	movs	r2, #0
   23eb8:	701a      	strb	r2, [r3, #0]
}
   23eba:	46c0      	nop			; (mov r8, r8)
   23ebc:	46bd      	mov	sp, r7
   23ebe:	bd80      	pop	{r7, pc}
   23ec0:	200058c4 	.word	0x200058c4
   23ec4:	0001f571 	.word	0x0001f571
   23ec8:	0002026d 	.word	0x0002026d
   23ecc:	20005974 	.word	0x20005974
   23ed0:	2000597c 	.word	0x2000597c
   23ed4:	2000412c 	.word	0x2000412c

00023ed8 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   23ed8:	b580      	push	{r7, lr}
   23eda:	b082      	sub	sp, #8
   23edc:	af00      	add	r7, sp, #0
   23ede:	6078      	str	r0, [r7, #4]
   23ee0:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   23ee2:	4b05      	ldr	r3, [pc, #20]	; (23ef8 <registerSocketCallback+0x20>)
   23ee4:	687a      	ldr	r2, [r7, #4]
   23ee6:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   23ee8:	4b04      	ldr	r3, [pc, #16]	; (23efc <registerSocketCallback+0x24>)
   23eea:	683a      	ldr	r2, [r7, #0]
   23eec:	601a      	str	r2, [r3, #0]
}
   23eee:	46c0      	nop			; (mov r8, r8)
   23ef0:	46bd      	mov	sp, r7
   23ef2:	b002      	add	sp, #8
   23ef4:	bd80      	pop	{r7, pc}
   23ef6:	46c0      	nop			; (mov r8, r8)
   23ef8:	20005974 	.word	0x20005974
   23efc:	2000597c 	.word	0x2000597c

00023f00 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   23f00:	b590      	push	{r4, r7, lr}
   23f02:	b08d      	sub	sp, #52	; 0x34
   23f04:	af04      	add	r7, sp, #16
   23f06:	0004      	movs	r4, r0
   23f08:	0008      	movs	r0, r1
   23f0a:	0011      	movs	r1, r2
   23f0c:	1dbb      	adds	r3, r7, #6
   23f0e:	1c22      	adds	r2, r4, #0
   23f10:	801a      	strh	r2, [r3, #0]
   23f12:	1d7b      	adds	r3, r7, #5
   23f14:	1c02      	adds	r2, r0, #0
   23f16:	701a      	strb	r2, [r3, #0]
   23f18:	1d3b      	adds	r3, r7, #4
   23f1a:	1c0a      	adds	r2, r1, #0
   23f1c:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   23f1e:	231f      	movs	r3, #31
   23f20:	18fb      	adds	r3, r7, r3
   23f22:	22ff      	movs	r2, #255	; 0xff
   23f24:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   23f26:	1dbb      	adds	r3, r7, #6
   23f28:	881b      	ldrh	r3, [r3, #0]
   23f2a:	2b02      	cmp	r3, #2
   23f2c:	d000      	beq.n	23f30 <socket+0x30>
   23f2e:	e0ce      	b.n	240ce <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   23f30:	1d7b      	adds	r3, r7, #5
   23f32:	781b      	ldrb	r3, [r3, #0]
   23f34:	2b01      	cmp	r3, #1
   23f36:	d135      	bne.n	23fa4 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   23f38:	231e      	movs	r3, #30
   23f3a:	18fb      	adds	r3, r7, r3
   23f3c:	2200      	movs	r2, #0
   23f3e:	701a      	strb	r2, [r3, #0]
   23f40:	e02a      	b.n	23f98 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   23f42:	2317      	movs	r3, #23
   23f44:	18fb      	adds	r3, r7, r3
   23f46:	4a66      	ldr	r2, [pc, #408]	; (240e0 <socket+0x1e0>)
   23f48:	7812      	ldrb	r2, [r2, #0]
   23f4a:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   23f4c:	4b64      	ldr	r3, [pc, #400]	; (240e0 <socket+0x1e0>)
   23f4e:	781b      	ldrb	r3, [r3, #0]
   23f50:	b2db      	uxtb	r3, r3
   23f52:	011a      	lsls	r2, r3, #4
   23f54:	4b63      	ldr	r3, [pc, #396]	; (240e4 <socket+0x1e4>)
   23f56:	18d3      	adds	r3, r2, r3
   23f58:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   23f5a:	4b61      	ldr	r3, [pc, #388]	; (240e0 <socket+0x1e0>)
   23f5c:	781b      	ldrb	r3, [r3, #0]
   23f5e:	b2db      	uxtb	r3, r3
   23f60:	1c5a      	adds	r2, r3, #1
   23f62:	4b61      	ldr	r3, [pc, #388]	; (240e8 <socket+0x1e8>)
   23f64:	2107      	movs	r1, #7
   23f66:	0010      	movs	r0, r2
   23f68:	4798      	blx	r3
   23f6a:	000b      	movs	r3, r1
   23f6c:	b2da      	uxtb	r2, r3
   23f6e:	4b5c      	ldr	r3, [pc, #368]	; (240e0 <socket+0x1e0>)
   23f70:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   23f72:	69bb      	ldr	r3, [r7, #24]
   23f74:	7a9b      	ldrb	r3, [r3, #10]
   23f76:	b2db      	uxtb	r3, r3
   23f78:	2b00      	cmp	r3, #0
   23f7a:	d106      	bne.n	23f8a <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   23f7c:	231f      	movs	r3, #31
   23f7e:	18fb      	adds	r3, r7, r3
   23f80:	2217      	movs	r2, #23
   23f82:	18ba      	adds	r2, r7, r2
   23f84:	7812      	ldrb	r2, [r2, #0]
   23f86:	701a      	strb	r2, [r3, #0]
					break;
   23f88:	e04c      	b.n	24024 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   23f8a:	231e      	movs	r3, #30
   23f8c:	18fb      	adds	r3, r7, r3
   23f8e:	781a      	ldrb	r2, [r3, #0]
   23f90:	231e      	movs	r3, #30
   23f92:	18fb      	adds	r3, r7, r3
   23f94:	3201      	adds	r2, #1
   23f96:	701a      	strb	r2, [r3, #0]
   23f98:	231e      	movs	r3, #30
   23f9a:	18fb      	adds	r3, r7, r3
   23f9c:	781b      	ldrb	r3, [r3, #0]
   23f9e:	2b06      	cmp	r3, #6
   23fa0:	d9cf      	bls.n	23f42 <socket+0x42>
   23fa2:	e03f      	b.n	24024 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   23fa4:	1d7b      	adds	r3, r7, #5
   23fa6:	781b      	ldrb	r3, [r3, #0]
   23fa8:	2b02      	cmp	r3, #2
   23faa:	d13b      	bne.n	24024 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   23fac:	4b4f      	ldr	r3, [pc, #316]	; (240ec <socket+0x1ec>)
   23fae:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   23fb0:	231e      	movs	r3, #30
   23fb2:	18fb      	adds	r3, r7, r3
   23fb4:	2200      	movs	r2, #0
   23fb6:	701a      	strb	r2, [r3, #0]
   23fb8:	e02f      	b.n	2401a <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   23fba:	2317      	movs	r3, #23
   23fbc:	18fb      	adds	r3, r7, r3
   23fbe:	4a4c      	ldr	r2, [pc, #304]	; (240f0 <socket+0x1f0>)
   23fc0:	7812      	ldrb	r2, [r2, #0]
   23fc2:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   23fc4:	4b4a      	ldr	r3, [pc, #296]	; (240f0 <socket+0x1f0>)
   23fc6:	781b      	ldrb	r3, [r3, #0]
   23fc8:	b2db      	uxtb	r3, r3
   23fca:	011b      	lsls	r3, r3, #4
   23fcc:	693a      	ldr	r2, [r7, #16]
   23fce:	18d3      	adds	r3, r2, r3
   23fd0:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   23fd2:	4b47      	ldr	r3, [pc, #284]	; (240f0 <socket+0x1f0>)
   23fd4:	781b      	ldrb	r3, [r3, #0]
   23fd6:	b2db      	uxtb	r3, r3
   23fd8:	3301      	adds	r3, #1
   23fda:	4a46      	ldr	r2, [pc, #280]	; (240f4 <socket+0x1f4>)
   23fdc:	4013      	ands	r3, r2
   23fde:	d504      	bpl.n	23fea <socket+0xea>
   23fe0:	3b01      	subs	r3, #1
   23fe2:	2204      	movs	r2, #4
   23fe4:	4252      	negs	r2, r2
   23fe6:	4313      	orrs	r3, r2
   23fe8:	3301      	adds	r3, #1
   23fea:	b2da      	uxtb	r2, r3
   23fec:	4b40      	ldr	r3, [pc, #256]	; (240f0 <socket+0x1f0>)
   23fee:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   23ff0:	69bb      	ldr	r3, [r7, #24]
   23ff2:	7a9b      	ldrb	r3, [r3, #10]
   23ff4:	b2db      	uxtb	r3, r3
   23ff6:	2b00      	cmp	r3, #0
   23ff8:	d108      	bne.n	2400c <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   23ffa:	2317      	movs	r3, #23
   23ffc:	18fb      	adds	r3, r7, r3
   23ffe:	781b      	ldrb	r3, [r3, #0]
   24000:	3307      	adds	r3, #7
   24002:	b2da      	uxtb	r2, r3
   24004:	231f      	movs	r3, #31
   24006:	18fb      	adds	r3, r7, r3
   24008:	701a      	strb	r2, [r3, #0]
					break;
   2400a:	e00b      	b.n	24024 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2400c:	231e      	movs	r3, #30
   2400e:	18fb      	adds	r3, r7, r3
   24010:	781a      	ldrb	r2, [r3, #0]
   24012:	231e      	movs	r3, #30
   24014:	18fb      	adds	r3, r7, r3
   24016:	3201      	adds	r2, #1
   24018:	701a      	strb	r2, [r3, #0]
   2401a:	231e      	movs	r3, #30
   2401c:	18fb      	adds	r3, r7, r3
   2401e:	781b      	ldrb	r3, [r3, #0]
   24020:	2b03      	cmp	r3, #3
   24022:	d9ca      	bls.n	23fba <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   24024:	231f      	movs	r3, #31
   24026:	18fb      	adds	r3, r7, r3
   24028:	781b      	ldrb	r3, [r3, #0]
   2402a:	2b7f      	cmp	r3, #127	; 0x7f
   2402c:	d84f      	bhi.n	240ce <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2402e:	69bb      	ldr	r3, [r7, #24]
   24030:	2210      	movs	r2, #16
   24032:	2100      	movs	r1, #0
   24034:	0018      	movs	r0, r3
   24036:	4b30      	ldr	r3, [pc, #192]	; (240f8 <socket+0x1f8>)
   24038:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   2403a:	69bb      	ldr	r3, [r7, #24]
   2403c:	2201      	movs	r2, #1
   2403e:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   24040:	4b2e      	ldr	r3, [pc, #184]	; (240fc <socket+0x1fc>)
   24042:	881b      	ldrh	r3, [r3, #0]
   24044:	b29b      	uxth	r3, r3
   24046:	3301      	adds	r3, #1
   24048:	b29a      	uxth	r2, r3
   2404a:	4b2c      	ldr	r3, [pc, #176]	; (240fc <socket+0x1fc>)
   2404c:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2404e:	4b2b      	ldr	r3, [pc, #172]	; (240fc <socket+0x1fc>)
   24050:	881b      	ldrh	r3, [r3, #0]
   24052:	b29b      	uxth	r3, r3
   24054:	2b00      	cmp	r3, #0
   24056:	d106      	bne.n	24066 <socket+0x166>
				++gu16SessionID;
   24058:	4b28      	ldr	r3, [pc, #160]	; (240fc <socket+0x1fc>)
   2405a:	881b      	ldrh	r3, [r3, #0]
   2405c:	b29b      	uxth	r3, r3
   2405e:	3301      	adds	r3, #1
   24060:	b29a      	uxth	r2, r3
   24062:	4b26      	ldr	r3, [pc, #152]	; (240fc <socket+0x1fc>)
   24064:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   24066:	4b25      	ldr	r3, [pc, #148]	; (240fc <socket+0x1fc>)
   24068:	881b      	ldrh	r3, [r3, #0]
   2406a:	b29a      	uxth	r2, r3
   2406c:	69bb      	ldr	r3, [r7, #24]
   2406e:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   24070:	4b23      	ldr	r3, [pc, #140]	; (24100 <socket+0x200>)
   24072:	0018      	movs	r0, r3
   24074:	4b23      	ldr	r3, [pc, #140]	; (24104 <socket+0x204>)
   24076:	4798      	blx	r3
   24078:	231f      	movs	r3, #31
   2407a:	18fb      	adds	r3, r7, r3
   2407c:	2100      	movs	r1, #0
   2407e:	5659      	ldrsb	r1, [r3, r1]
   24080:	4b1e      	ldr	r3, [pc, #120]	; (240fc <socket+0x1fc>)
   24082:	881b      	ldrh	r3, [r3, #0]
   24084:	b29b      	uxth	r3, r3
   24086:	001a      	movs	r2, r3
   24088:	4b1f      	ldr	r3, [pc, #124]	; (24108 <socket+0x208>)
   2408a:	0018      	movs	r0, r3
   2408c:	4b1d      	ldr	r3, [pc, #116]	; (24104 <socket+0x204>)
   2408e:	4798      	blx	r3
   24090:	4b1e      	ldr	r3, [pc, #120]	; (2410c <socket+0x20c>)
   24092:	0018      	movs	r0, r3
   24094:	4b1b      	ldr	r3, [pc, #108]	; (24104 <socket+0x204>)
   24096:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   24098:	1d3b      	adds	r3, r7, #4
   2409a:	781b      	ldrb	r3, [r3, #0]
   2409c:	2201      	movs	r2, #1
   2409e:	4013      	ands	r3, r2
   240a0:	d015      	beq.n	240ce <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   240a2:	230c      	movs	r3, #12
   240a4:	18fb      	adds	r3, r7, r3
   240a6:	221f      	movs	r2, #31
   240a8:	18ba      	adds	r2, r7, r2
   240aa:	7812      	ldrb	r2, [r2, #0]
   240ac:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   240ae:	69bb      	ldr	r3, [r7, #24]
   240b0:	2221      	movs	r2, #33	; 0x21
   240b2:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   240b4:	230c      	movs	r3, #12
   240b6:	18fa      	adds	r2, r7, r3
   240b8:	2300      	movs	r3, #0
   240ba:	9302      	str	r3, [sp, #8]
   240bc:	2300      	movs	r3, #0
   240be:	9301      	str	r3, [sp, #4]
   240c0:	2300      	movs	r3, #0
   240c2:	9300      	str	r3, [sp, #0]
   240c4:	2304      	movs	r3, #4
   240c6:	2150      	movs	r1, #80	; 0x50
   240c8:	2002      	movs	r0, #2
   240ca:	4c11      	ldr	r4, [pc, #68]	; (24110 <socket+0x210>)
   240cc:	47a0      	blx	r4
			}
		}
	}
	return sock;
   240ce:	231f      	movs	r3, #31
   240d0:	18fb      	adds	r3, r7, r3
   240d2:	781b      	ldrb	r3, [r3, #0]
   240d4:	b25b      	sxtb	r3, r3
}
   240d6:	0018      	movs	r0, r3
   240d8:	46bd      	mov	sp, r7
   240da:	b009      	add	sp, #36	; 0x24
   240dc:	bd90      	pop	{r4, r7, pc}
   240de:	46c0      	nop			; (mov r8, r8)
   240e0:	2000412d 	.word	0x2000412d
   240e4:	200058c4 	.word	0x200058c4
   240e8:	000315ed 	.word	0x000315ed
   240ec:	20005934 	.word	0x20005934
   240f0:	2000412e 	.word	0x2000412e
   240f4:	80000003 	.word	0x80000003
   240f8:	0001f571 	.word	0x0001f571
   240fc:	2000412a 	.word	0x2000412a
   24100:	000378bc 	.word	0x000378bc
   24104:	0001c7d9 	.word	0x0001c7d9
   24108:	000378e0 	.word	0x000378e0
   2410c:	000378dc 	.word	0x000378dc
   24110:	0001f7d1 	.word	0x0001f7d1

00024114 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   24114:	b5b0      	push	{r4, r5, r7, lr}
   24116:	b08a      	sub	sp, #40	; 0x28
   24118:	af04      	add	r7, sp, #16
   2411a:	6039      	str	r1, [r7, #0]
   2411c:	0011      	movs	r1, r2
   2411e:	1dfb      	adds	r3, r7, #7
   24120:	1c02      	adds	r2, r0, #0
   24122:	701a      	strb	r2, [r3, #0]
   24124:	1dbb      	adds	r3, r7, #6
   24126:	1c0a      	adds	r2, r1, #0
   24128:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   2412a:	2317      	movs	r3, #23
   2412c:	18fb      	adds	r3, r7, r3
   2412e:	22fa      	movs	r2, #250	; 0xfa
   24130:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   24132:	1dfb      	adds	r3, r7, #7
   24134:	781b      	ldrb	r3, [r3, #0]
   24136:	2b7f      	cmp	r3, #127	; 0x7f
   24138:	d867      	bhi.n	2420a <connect+0xf6>
   2413a:	683b      	ldr	r3, [r7, #0]
   2413c:	2b00      	cmp	r3, #0
   2413e:	d064      	beq.n	2420a <connect+0xf6>
   24140:	1dfb      	adds	r3, r7, #7
   24142:	781b      	ldrb	r3, [r3, #0]
   24144:	b25b      	sxtb	r3, r3
   24146:	4a35      	ldr	r2, [pc, #212]	; (2421c <connect+0x108>)
   24148:	011b      	lsls	r3, r3, #4
   2414a:	18d3      	adds	r3, r2, r3
   2414c:	330a      	adds	r3, #10
   2414e:	781b      	ldrb	r3, [r3, #0]
   24150:	b2db      	uxtb	r3, r3
   24152:	2b01      	cmp	r3, #1
   24154:	d159      	bne.n	2420a <connect+0xf6>
   24156:	1dbb      	adds	r3, r7, #6
   24158:	781b      	ldrb	r3, [r3, #0]
   2415a:	2b00      	cmp	r3, #0
   2415c:	d055      	beq.n	2420a <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2415e:	2316      	movs	r3, #22
   24160:	18fb      	adds	r3, r7, r3
   24162:	2244      	movs	r2, #68	; 0x44
   24164:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   24166:	1dfb      	adds	r3, r7, #7
   24168:	781b      	ldrb	r3, [r3, #0]
   2416a:	b25b      	sxtb	r3, r3
   2416c:	4a2b      	ldr	r2, [pc, #172]	; (2421c <connect+0x108>)
   2416e:	011b      	lsls	r3, r3, #4
   24170:	18d3      	adds	r3, r2, r3
   24172:	330b      	adds	r3, #11
   24174:	781b      	ldrb	r3, [r3, #0]
   24176:	b2db      	uxtb	r3, r3
   24178:	001a      	movs	r2, r3
   2417a:	2301      	movs	r3, #1
   2417c:	4013      	ands	r3, r2
   2417e:	d00f      	beq.n	241a0 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   24180:	2316      	movs	r3, #22
   24182:	18fb      	adds	r3, r7, r3
   24184:	224b      	movs	r2, #75	; 0x4b
   24186:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   24188:	1dfb      	adds	r3, r7, #7
   2418a:	781b      	ldrb	r3, [r3, #0]
   2418c:	b25b      	sxtb	r3, r3
   2418e:	4a23      	ldr	r2, [pc, #140]	; (2421c <connect+0x108>)
   24190:	011b      	lsls	r3, r3, #4
   24192:	18d3      	adds	r3, r2, r3
   24194:	330b      	adds	r3, #11
   24196:	781b      	ldrb	r3, [r3, #0]
   24198:	b2da      	uxtb	r2, r3
   2419a:	2308      	movs	r3, #8
   2419c:	18fb      	adds	r3, r7, r3
   2419e:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   241a0:	2308      	movs	r3, #8
   241a2:	18fb      	adds	r3, r7, r3
   241a4:	1dfa      	adds	r2, r7, #7
   241a6:	7812      	ldrb	r2, [r2, #0]
   241a8:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   241aa:	6839      	ldr	r1, [r7, #0]
   241ac:	2308      	movs	r3, #8
   241ae:	18fb      	adds	r3, r7, r3
   241b0:	2208      	movs	r2, #8
   241b2:	0018      	movs	r0, r3
   241b4:	4b1a      	ldr	r3, [pc, #104]	; (24220 <connect+0x10c>)
   241b6:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   241b8:	1dfb      	adds	r3, r7, #7
   241ba:	781b      	ldrb	r3, [r3, #0]
   241bc:	b25b      	sxtb	r3, r3
   241be:	4a17      	ldr	r2, [pc, #92]	; (2421c <connect+0x108>)
   241c0:	011b      	lsls	r3, r3, #4
   241c2:	18d3      	adds	r3, r2, r3
   241c4:	3306      	adds	r3, #6
   241c6:	881b      	ldrh	r3, [r3, #0]
   241c8:	b29a      	uxth	r2, r3
   241ca:	2308      	movs	r3, #8
   241cc:	18fb      	adds	r3, r7, r3
   241ce:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   241d0:	2317      	movs	r3, #23
   241d2:	18fc      	adds	r4, r7, r3
   241d4:	2308      	movs	r3, #8
   241d6:	18fa      	adds	r2, r7, r3
   241d8:	2316      	movs	r3, #22
   241da:	18fb      	adds	r3, r7, r3
   241dc:	7819      	ldrb	r1, [r3, #0]
   241de:	2300      	movs	r3, #0
   241e0:	9302      	str	r3, [sp, #8]
   241e2:	2300      	movs	r3, #0
   241e4:	9301      	str	r3, [sp, #4]
   241e6:	2300      	movs	r3, #0
   241e8:	9300      	str	r3, [sp, #0]
   241ea:	230c      	movs	r3, #12
   241ec:	2002      	movs	r0, #2
   241ee:	4d0d      	ldr	r5, [pc, #52]	; (24224 <connect+0x110>)
   241f0:	47a8      	blx	r5
   241f2:	0003      	movs	r3, r0
   241f4:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   241f6:	2317      	movs	r3, #23
   241f8:	18fb      	adds	r3, r7, r3
   241fa:	781b      	ldrb	r3, [r3, #0]
   241fc:	b25b      	sxtb	r3, r3
   241fe:	2b00      	cmp	r3, #0
   24200:	d003      	beq.n	2420a <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   24202:	2317      	movs	r3, #23
   24204:	18fb      	adds	r3, r7, r3
   24206:	22f7      	movs	r2, #247	; 0xf7
   24208:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   2420a:	2317      	movs	r3, #23
   2420c:	18fb      	adds	r3, r7, r3
   2420e:	781b      	ldrb	r3, [r3, #0]
   24210:	b25b      	sxtb	r3, r3
}
   24212:	0018      	movs	r0, r3
   24214:	46bd      	mov	sp, r7
   24216:	b006      	add	sp, #24
   24218:	bdb0      	pop	{r4, r5, r7, pc}
   2421a:	46c0      	nop			; (mov r8, r8)
   2421c:	200058c4 	.word	0x200058c4
   24220:	0001f535 	.word	0x0001f535
   24224:	0001f7d1 	.word	0x0001f7d1

00024228 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   24228:	b590      	push	{r4, r7, lr}
   2422a:	b08f      	sub	sp, #60	; 0x3c
   2422c:	af04      	add	r7, sp, #16
   2422e:	0004      	movs	r4, r0
   24230:	60b9      	str	r1, [r7, #8]
   24232:	0010      	movs	r0, r2
   24234:	0019      	movs	r1, r3
   24236:	230f      	movs	r3, #15
   24238:	18fb      	adds	r3, r7, r3
   2423a:	1c22      	adds	r2, r4, #0
   2423c:	701a      	strb	r2, [r3, #0]
   2423e:	230c      	movs	r3, #12
   24240:	18fb      	adds	r3, r7, r3
   24242:	1c02      	adds	r2, r0, #0
   24244:	801a      	strh	r2, [r3, #0]
   24246:	1dbb      	adds	r3, r7, #6
   24248:	1c0a      	adds	r2, r1, #0
   2424a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2424c:	2326      	movs	r3, #38	; 0x26
   2424e:	18fb      	adds	r3, r7, r3
   24250:	2206      	movs	r2, #6
   24252:	4252      	negs	r2, r2
   24254:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   24256:	230f      	movs	r3, #15
   24258:	18fb      	adds	r3, r7, r3
   2425a:	781b      	ldrb	r3, [r3, #0]
   2425c:	2b7f      	cmp	r3, #127	; 0x7f
   2425e:	d900      	bls.n	24262 <send+0x3a>
   24260:	e087      	b.n	24372 <send+0x14a>
   24262:	68bb      	ldr	r3, [r7, #8]
   24264:	2b00      	cmp	r3, #0
   24266:	d100      	bne.n	2426a <send+0x42>
   24268:	e083      	b.n	24372 <send+0x14a>
   2426a:	230c      	movs	r3, #12
   2426c:	18fb      	adds	r3, r7, r3
   2426e:	881a      	ldrh	r2, [r3, #0]
   24270:	23af      	movs	r3, #175	; 0xaf
   24272:	00db      	lsls	r3, r3, #3
   24274:	429a      	cmp	r2, r3
   24276:	d900      	bls.n	2427a <send+0x52>
   24278:	e07b      	b.n	24372 <send+0x14a>
   2427a:	230f      	movs	r3, #15
   2427c:	18fb      	adds	r3, r7, r3
   2427e:	781b      	ldrb	r3, [r3, #0]
   24280:	b25b      	sxtb	r3, r3
   24282:	4a40      	ldr	r2, [pc, #256]	; (24384 <send+0x15c>)
   24284:	011b      	lsls	r3, r3, #4
   24286:	18d3      	adds	r3, r2, r3
   24288:	330a      	adds	r3, #10
   2428a:	781b      	ldrb	r3, [r3, #0]
   2428c:	b2db      	uxtb	r3, r3
   2428e:	2b01      	cmp	r3, #1
   24290:	d16f      	bne.n	24372 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   24292:	2323      	movs	r3, #35	; 0x23
   24294:	18fb      	adds	r3, r7, r3
   24296:	2245      	movs	r2, #69	; 0x45
   24298:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2429a:	2324      	movs	r3, #36	; 0x24
   2429c:	18fb      	adds	r3, r7, r3
   2429e:	2250      	movs	r2, #80	; 0x50
   242a0:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   242a2:	2310      	movs	r3, #16
   242a4:	18fb      	adds	r3, r7, r3
   242a6:	220f      	movs	r2, #15
   242a8:	18ba      	adds	r2, r7, r2
   242aa:	7812      	ldrb	r2, [r2, #0]
   242ac:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   242ae:	2310      	movs	r3, #16
   242b0:	18fb      	adds	r3, r7, r3
   242b2:	220c      	movs	r2, #12
   242b4:	18ba      	adds	r2, r7, r2
   242b6:	8812      	ldrh	r2, [r2, #0]
   242b8:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   242ba:	230f      	movs	r3, #15
   242bc:	18fb      	adds	r3, r7, r3
   242be:	781b      	ldrb	r3, [r3, #0]
   242c0:	b25b      	sxtb	r3, r3
   242c2:	4a30      	ldr	r2, [pc, #192]	; (24384 <send+0x15c>)
   242c4:	011b      	lsls	r3, r3, #4
   242c6:	18d3      	adds	r3, r2, r3
   242c8:	3306      	adds	r3, #6
   242ca:	881b      	ldrh	r3, [r3, #0]
   242cc:	b29a      	uxth	r2, r3
   242ce:	2310      	movs	r3, #16
   242d0:	18fb      	adds	r3, r7, r3
   242d2:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   242d4:	230f      	movs	r3, #15
   242d6:	18fb      	adds	r3, r7, r3
   242d8:	781b      	ldrb	r3, [r3, #0]
   242da:	b25b      	sxtb	r3, r3
   242dc:	2b06      	cmp	r3, #6
   242de:	dd03      	ble.n	242e8 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   242e0:	2324      	movs	r3, #36	; 0x24
   242e2:	18fb      	adds	r3, r7, r3
   242e4:	2244      	movs	r2, #68	; 0x44
   242e6:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   242e8:	230f      	movs	r3, #15
   242ea:	18fb      	adds	r3, r7, r3
   242ec:	781b      	ldrb	r3, [r3, #0]
   242ee:	b25b      	sxtb	r3, r3
   242f0:	4a24      	ldr	r2, [pc, #144]	; (24384 <send+0x15c>)
   242f2:	011b      	lsls	r3, r3, #4
   242f4:	18d3      	adds	r3, r2, r3
   242f6:	330b      	adds	r3, #11
   242f8:	781b      	ldrb	r3, [r3, #0]
   242fa:	b2db      	uxtb	r3, r3
   242fc:	001a      	movs	r2, r3
   242fe:	2301      	movs	r3, #1
   24300:	4013      	ands	r3, r2
   24302:	d00f      	beq.n	24324 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   24304:	2323      	movs	r3, #35	; 0x23
   24306:	18fb      	adds	r3, r7, r3
   24308:	224c      	movs	r2, #76	; 0x4c
   2430a:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   2430c:	230f      	movs	r3, #15
   2430e:	18fb      	adds	r3, r7, r3
   24310:	2200      	movs	r2, #0
   24312:	569a      	ldrsb	r2, [r3, r2]
   24314:	2324      	movs	r3, #36	; 0x24
   24316:	18fb      	adds	r3, r7, r3
   24318:	491a      	ldr	r1, [pc, #104]	; (24384 <send+0x15c>)
   2431a:	0112      	lsls	r2, r2, #4
   2431c:	188a      	adds	r2, r1, r2
   2431e:	3208      	adds	r2, #8
   24320:	8812      	ldrh	r2, [r2, #0]
   24322:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   24324:	2323      	movs	r3, #35	; 0x23
   24326:	18fb      	adds	r3, r7, r3
   24328:	781b      	ldrb	r3, [r3, #0]
   2432a:	2280      	movs	r2, #128	; 0x80
   2432c:	4252      	negs	r2, r2
   2432e:	4313      	orrs	r3, r2
   24330:	b2d9      	uxtb	r1, r3
   24332:	2310      	movs	r3, #16
   24334:	18fa      	adds	r2, r7, r3
   24336:	2324      	movs	r3, #36	; 0x24
   24338:	18fb      	adds	r3, r7, r3
   2433a:	881b      	ldrh	r3, [r3, #0]
   2433c:	9302      	str	r3, [sp, #8]
   2433e:	230c      	movs	r3, #12
   24340:	18fb      	adds	r3, r7, r3
   24342:	881b      	ldrh	r3, [r3, #0]
   24344:	9301      	str	r3, [sp, #4]
   24346:	68bb      	ldr	r3, [r7, #8]
   24348:	9300      	str	r3, [sp, #0]
   2434a:	2310      	movs	r3, #16
   2434c:	2002      	movs	r0, #2
   2434e:	4c0e      	ldr	r4, [pc, #56]	; (24388 <send+0x160>)
   24350:	47a0      	blx	r4
   24352:	0003      	movs	r3, r0
   24354:	001a      	movs	r2, r3
   24356:	2326      	movs	r3, #38	; 0x26
   24358:	18fb      	adds	r3, r7, r3
   2435a:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   2435c:	2326      	movs	r3, #38	; 0x26
   2435e:	18fb      	adds	r3, r7, r3
   24360:	2200      	movs	r2, #0
   24362:	5e9b      	ldrsh	r3, [r3, r2]
   24364:	2b00      	cmp	r3, #0
   24366:	d004      	beq.n	24372 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   24368:	2326      	movs	r3, #38	; 0x26
   2436a:	18fb      	adds	r3, r7, r3
   2436c:	220e      	movs	r2, #14
   2436e:	4252      	negs	r2, r2
   24370:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   24372:	2326      	movs	r3, #38	; 0x26
   24374:	18fb      	adds	r3, r7, r3
   24376:	2200      	movs	r2, #0
   24378:	5e9b      	ldrsh	r3, [r3, r2]
}
   2437a:	0018      	movs	r0, r3
   2437c:	46bd      	mov	sp, r7
   2437e:	b00b      	add	sp, #44	; 0x2c
   24380:	bd90      	pop	{r4, r7, pc}
   24382:	46c0      	nop			; (mov r8, r8)
   24384:	200058c4 	.word	0x200058c4
   24388:	0001f7d1 	.word	0x0001f7d1

0002438c <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   2438c:	b590      	push	{r4, r7, lr}
   2438e:	b08d      	sub	sp, #52	; 0x34
   24390:	af04      	add	r7, sp, #16
   24392:	60b9      	str	r1, [r7, #8]
   24394:	0011      	movs	r1, r2
   24396:	607b      	str	r3, [r7, #4]
   24398:	230f      	movs	r3, #15
   2439a:	18fb      	adds	r3, r7, r3
   2439c:	1c02      	adds	r2, r0, #0
   2439e:	701a      	strb	r2, [r3, #0]
   243a0:	230c      	movs	r3, #12
   243a2:	18fb      	adds	r3, r7, r3
   243a4:	1c0a      	adds	r2, r1, #0
   243a6:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   243a8:	231e      	movs	r3, #30
   243aa:	18fb      	adds	r3, r7, r3
   243ac:	2206      	movs	r2, #6
   243ae:	4252      	negs	r2, r2
   243b0:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   243b2:	230f      	movs	r3, #15
   243b4:	18fb      	adds	r3, r7, r3
   243b6:	781b      	ldrb	r3, [r3, #0]
   243b8:	2b7f      	cmp	r3, #127	; 0x7f
   243ba:	d900      	bls.n	243be <recv+0x32>
   243bc:	e099      	b.n	244f2 <recv+0x166>
   243be:	68bb      	ldr	r3, [r7, #8]
   243c0:	2b00      	cmp	r3, #0
   243c2:	d100      	bne.n	243c6 <recv+0x3a>
   243c4:	e095      	b.n	244f2 <recv+0x166>
   243c6:	230c      	movs	r3, #12
   243c8:	18fb      	adds	r3, r7, r3
   243ca:	881b      	ldrh	r3, [r3, #0]
   243cc:	2b00      	cmp	r3, #0
   243ce:	d100      	bne.n	243d2 <recv+0x46>
   243d0:	e08f      	b.n	244f2 <recv+0x166>
   243d2:	230f      	movs	r3, #15
   243d4:	18fb      	adds	r3, r7, r3
   243d6:	781b      	ldrb	r3, [r3, #0]
   243d8:	b25b      	sxtb	r3, r3
   243da:	4a4a      	ldr	r2, [pc, #296]	; (24504 <recv+0x178>)
   243dc:	011b      	lsls	r3, r3, #4
   243de:	18d3      	adds	r3, r2, r3
   243e0:	330a      	adds	r3, #10
   243e2:	781b      	ldrb	r3, [r3, #0]
   243e4:	b2db      	uxtb	r3, r3
   243e6:	2b01      	cmp	r3, #1
   243e8:	d000      	beq.n	243ec <recv+0x60>
   243ea:	e082      	b.n	244f2 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   243ec:	231e      	movs	r3, #30
   243ee:	18fb      	adds	r3, r7, r3
   243f0:	2200      	movs	r2, #0
   243f2:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   243f4:	230f      	movs	r3, #15
   243f6:	18fb      	adds	r3, r7, r3
   243f8:	2200      	movs	r2, #0
   243fa:	569a      	ldrsb	r2, [r3, r2]
   243fc:	4b41      	ldr	r3, [pc, #260]	; (24504 <recv+0x178>)
   243fe:	0112      	lsls	r2, r2, #4
   24400:	68b9      	ldr	r1, [r7, #8]
   24402:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   24404:	230f      	movs	r3, #15
   24406:	18fb      	adds	r3, r7, r3
   24408:	781b      	ldrb	r3, [r3, #0]
   2440a:	b25b      	sxtb	r3, r3
   2440c:	4a3d      	ldr	r2, [pc, #244]	; (24504 <recv+0x178>)
   2440e:	011b      	lsls	r3, r3, #4
   24410:	18d3      	adds	r3, r2, r3
   24412:	3304      	adds	r3, #4
   24414:	220c      	movs	r2, #12
   24416:	18ba      	adds	r2, r7, r2
   24418:	8812      	ldrh	r2, [r2, #0]
   2441a:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   2441c:	230f      	movs	r3, #15
   2441e:	18fb      	adds	r3, r7, r3
   24420:	781b      	ldrb	r3, [r3, #0]
   24422:	b25b      	sxtb	r3, r3
   24424:	4a37      	ldr	r2, [pc, #220]	; (24504 <recv+0x178>)
   24426:	011b      	lsls	r3, r3, #4
   24428:	18d3      	adds	r3, r2, r3
   2442a:	330c      	adds	r3, #12
   2442c:	781b      	ldrb	r3, [r3, #0]
   2442e:	b2db      	uxtb	r3, r3
   24430:	2b00      	cmp	r3, #0
   24432:	d15e      	bne.n	244f2 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   24434:	231d      	movs	r3, #29
   24436:	18fb      	adds	r3, r7, r3
   24438:	2246      	movs	r2, #70	; 0x46
   2443a:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   2443c:	230f      	movs	r3, #15
   2443e:	18fb      	adds	r3, r7, r3
   24440:	781b      	ldrb	r3, [r3, #0]
   24442:	b25b      	sxtb	r3, r3
   24444:	4a2f      	ldr	r2, [pc, #188]	; (24504 <recv+0x178>)
   24446:	011b      	lsls	r3, r3, #4
   24448:	18d3      	adds	r3, r2, r3
   2444a:	330c      	adds	r3, #12
   2444c:	2201      	movs	r2, #1
   2444e:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   24450:	230f      	movs	r3, #15
   24452:	18fb      	adds	r3, r7, r3
   24454:	781b      	ldrb	r3, [r3, #0]
   24456:	b25b      	sxtb	r3, r3
   24458:	4a2a      	ldr	r2, [pc, #168]	; (24504 <recv+0x178>)
   2445a:	011b      	lsls	r3, r3, #4
   2445c:	18d3      	adds	r3, r2, r3
   2445e:	330b      	adds	r3, #11
   24460:	781b      	ldrb	r3, [r3, #0]
   24462:	b2db      	uxtb	r3, r3
   24464:	001a      	movs	r2, r3
   24466:	2301      	movs	r3, #1
   24468:	4013      	ands	r3, r2
   2446a:	d003      	beq.n	24474 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   2446c:	231d      	movs	r3, #29
   2446e:	18fb      	adds	r3, r7, r3
   24470:	224d      	movs	r2, #77	; 0x4d
   24472:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   24474:	687b      	ldr	r3, [r7, #4]
   24476:	2b00      	cmp	r3, #0
   24478:	d105      	bne.n	24486 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2447a:	2314      	movs	r3, #20
   2447c:	18fb      	adds	r3, r7, r3
   2447e:	2201      	movs	r2, #1
   24480:	4252      	negs	r2, r2
   24482:	601a      	str	r2, [r3, #0]
   24484:	e003      	b.n	2448e <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   24486:	2314      	movs	r3, #20
   24488:	18fb      	adds	r3, r7, r3
   2448a:	687a      	ldr	r2, [r7, #4]
   2448c:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2448e:	2314      	movs	r3, #20
   24490:	18fb      	adds	r3, r7, r3
   24492:	220f      	movs	r2, #15
   24494:	18ba      	adds	r2, r7, r2
   24496:	7812      	ldrb	r2, [r2, #0]
   24498:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2449a:	230f      	movs	r3, #15
   2449c:	18fb      	adds	r3, r7, r3
   2449e:	781b      	ldrb	r3, [r3, #0]
   244a0:	b25b      	sxtb	r3, r3
   244a2:	4a18      	ldr	r2, [pc, #96]	; (24504 <recv+0x178>)
   244a4:	011b      	lsls	r3, r3, #4
   244a6:	18d3      	adds	r3, r2, r3
   244a8:	3306      	adds	r3, #6
   244aa:	881b      	ldrh	r3, [r3, #0]
   244ac:	b29a      	uxth	r2, r3
   244ae:	2314      	movs	r3, #20
   244b0:	18fb      	adds	r3, r7, r3
   244b2:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   244b4:	2314      	movs	r3, #20
   244b6:	18fa      	adds	r2, r7, r3
   244b8:	231d      	movs	r3, #29
   244ba:	18fb      	adds	r3, r7, r3
   244bc:	7819      	ldrb	r1, [r3, #0]
   244be:	2300      	movs	r3, #0
   244c0:	9302      	str	r3, [sp, #8]
   244c2:	2300      	movs	r3, #0
   244c4:	9301      	str	r3, [sp, #4]
   244c6:	2300      	movs	r3, #0
   244c8:	9300      	str	r3, [sp, #0]
   244ca:	2308      	movs	r3, #8
   244cc:	2002      	movs	r0, #2
   244ce:	4c0e      	ldr	r4, [pc, #56]	; (24508 <recv+0x17c>)
   244d0:	47a0      	blx	r4
   244d2:	0003      	movs	r3, r0
   244d4:	001a      	movs	r2, r3
   244d6:	231e      	movs	r3, #30
   244d8:	18fb      	adds	r3, r7, r3
   244da:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   244dc:	231e      	movs	r3, #30
   244de:	18fb      	adds	r3, r7, r3
   244e0:	2200      	movs	r2, #0
   244e2:	5e9b      	ldrsh	r3, [r3, r2]
   244e4:	2b00      	cmp	r3, #0
   244e6:	d004      	beq.n	244f2 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   244e8:	231e      	movs	r3, #30
   244ea:	18fb      	adds	r3, r7, r3
   244ec:	220e      	movs	r2, #14
   244ee:	4252      	negs	r2, r2
   244f0:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   244f2:	231e      	movs	r3, #30
   244f4:	18fb      	adds	r3, r7, r3
   244f6:	2200      	movs	r2, #0
   244f8:	5e9b      	ldrsh	r3, [r3, r2]
}
   244fa:	0018      	movs	r0, r3
   244fc:	46bd      	mov	sp, r7
   244fe:	b009      	add	sp, #36	; 0x24
   24500:	bd90      	pop	{r4, r7, pc}
   24502:	46c0      	nop			; (mov r8, r8)
   24504:	200058c4 	.word	0x200058c4
   24508:	0001f7d1 	.word	0x0001f7d1

0002450c <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   2450c:	b5b0      	push	{r4, r5, r7, lr}
   2450e:	b088      	sub	sp, #32
   24510:	af04      	add	r7, sp, #16
   24512:	0002      	movs	r2, r0
   24514:	1dfb      	adds	r3, r7, #7
   24516:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   24518:	230f      	movs	r3, #15
   2451a:	18fb      	adds	r3, r7, r3
   2451c:	22fa      	movs	r2, #250	; 0xfa
   2451e:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   24520:	4b43      	ldr	r3, [pc, #268]	; (24630 <close+0x124>)
   24522:	0018      	movs	r0, r3
   24524:	4b43      	ldr	r3, [pc, #268]	; (24634 <close+0x128>)
   24526:	4798      	blx	r3
   24528:	1dfb      	adds	r3, r7, #7
   2452a:	2200      	movs	r2, #0
   2452c:	569a      	ldrsb	r2, [r3, r2]
   2452e:	4b42      	ldr	r3, [pc, #264]	; (24638 <close+0x12c>)
   24530:	0011      	movs	r1, r2
   24532:	0018      	movs	r0, r3
   24534:	4b3f      	ldr	r3, [pc, #252]	; (24634 <close+0x128>)
   24536:	4798      	blx	r3
   24538:	4b40      	ldr	r3, [pc, #256]	; (2463c <close+0x130>)
   2453a:	0018      	movs	r0, r3
   2453c:	4b3d      	ldr	r3, [pc, #244]	; (24634 <close+0x128>)
   2453e:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   24540:	1dfb      	adds	r3, r7, #7
   24542:	781b      	ldrb	r3, [r3, #0]
   24544:	2b7f      	cmp	r3, #127	; 0x7f
   24546:	d86a      	bhi.n	2461e <close+0x112>
   24548:	1dfb      	adds	r3, r7, #7
   2454a:	781b      	ldrb	r3, [r3, #0]
   2454c:	b25b      	sxtb	r3, r3
   2454e:	4a3c      	ldr	r2, [pc, #240]	; (24640 <close+0x134>)
   24550:	011b      	lsls	r3, r3, #4
   24552:	18d3      	adds	r3, r2, r3
   24554:	330a      	adds	r3, #10
   24556:	781b      	ldrb	r3, [r3, #0]
   24558:	b2db      	uxtb	r3, r3
   2455a:	2b01      	cmp	r3, #1
   2455c:	d15f      	bne.n	2461e <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   2455e:	230e      	movs	r3, #14
   24560:	18fb      	adds	r3, r7, r3
   24562:	2249      	movs	r2, #73	; 0x49
   24564:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   24566:	2308      	movs	r3, #8
   24568:	18fb      	adds	r3, r7, r3
   2456a:	1dfa      	adds	r2, r7, #7
   2456c:	7812      	ldrb	r2, [r2, #0]
   2456e:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   24570:	1dfb      	adds	r3, r7, #7
   24572:	781b      	ldrb	r3, [r3, #0]
   24574:	b25b      	sxtb	r3, r3
   24576:	4a32      	ldr	r2, [pc, #200]	; (24640 <close+0x134>)
   24578:	011b      	lsls	r3, r3, #4
   2457a:	18d3      	adds	r3, r2, r3
   2457c:	3306      	adds	r3, #6
   2457e:	881b      	ldrh	r3, [r3, #0]
   24580:	b29a      	uxth	r2, r3
   24582:	2308      	movs	r3, #8
   24584:	18fb      	adds	r3, r7, r3
   24586:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   24588:	1dfb      	adds	r3, r7, #7
   2458a:	781b      	ldrb	r3, [r3, #0]
   2458c:	b25b      	sxtb	r3, r3
   2458e:	4a2c      	ldr	r2, [pc, #176]	; (24640 <close+0x134>)
   24590:	011b      	lsls	r3, r3, #4
   24592:	18d3      	adds	r3, r2, r3
   24594:	330a      	adds	r3, #10
   24596:	2200      	movs	r2, #0
   24598:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2459a:	1dfb      	adds	r3, r7, #7
   2459c:	781b      	ldrb	r3, [r3, #0]
   2459e:	b25b      	sxtb	r3, r3
   245a0:	4a27      	ldr	r2, [pc, #156]	; (24640 <close+0x134>)
   245a2:	011b      	lsls	r3, r3, #4
   245a4:	18d3      	adds	r3, r2, r3
   245a6:	3306      	adds	r3, #6
   245a8:	2200      	movs	r2, #0
   245aa:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   245ac:	1dfb      	adds	r3, r7, #7
   245ae:	781b      	ldrb	r3, [r3, #0]
   245b0:	b25b      	sxtb	r3, r3
   245b2:	4a23      	ldr	r2, [pc, #140]	; (24640 <close+0x134>)
   245b4:	011b      	lsls	r3, r3, #4
   245b6:	18d3      	adds	r3, r2, r3
   245b8:	330b      	adds	r3, #11
   245ba:	781b      	ldrb	r3, [r3, #0]
   245bc:	b2db      	uxtb	r3, r3
   245be:	001a      	movs	r2, r3
   245c0:	2301      	movs	r3, #1
   245c2:	4013      	ands	r3, r2
   245c4:	d003      	beq.n	245ce <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   245c6:	230e      	movs	r3, #14
   245c8:	18fb      	adds	r3, r7, r3
   245ca:	224e      	movs	r2, #78	; 0x4e
   245cc:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   245ce:	230f      	movs	r3, #15
   245d0:	18fc      	adds	r4, r7, r3
   245d2:	2308      	movs	r3, #8
   245d4:	18fa      	adds	r2, r7, r3
   245d6:	230e      	movs	r3, #14
   245d8:	18fb      	adds	r3, r7, r3
   245da:	7819      	ldrb	r1, [r3, #0]
   245dc:	2300      	movs	r3, #0
   245de:	9302      	str	r3, [sp, #8]
   245e0:	2300      	movs	r3, #0
   245e2:	9301      	str	r3, [sp, #4]
   245e4:	2300      	movs	r3, #0
   245e6:	9300      	str	r3, [sp, #0]
   245e8:	2304      	movs	r3, #4
   245ea:	2002      	movs	r0, #2
   245ec:	4d15      	ldr	r5, [pc, #84]	; (24644 <close+0x138>)
   245ee:	47a8      	blx	r5
   245f0:	0003      	movs	r3, r0
   245f2:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   245f4:	230f      	movs	r3, #15
   245f6:	18fb      	adds	r3, r7, r3
   245f8:	781b      	ldrb	r3, [r3, #0]
   245fa:	b25b      	sxtb	r3, r3
   245fc:	2b00      	cmp	r3, #0
   245fe:	d003      	beq.n	24608 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   24600:	230f      	movs	r3, #15
   24602:	18fb      	adds	r3, r7, r3
   24604:	22f7      	movs	r2, #247	; 0xf7
   24606:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   24608:	1dfb      	adds	r3, r7, #7
   2460a:	781b      	ldrb	r3, [r3, #0]
   2460c:	b25b      	sxtb	r3, r3
   2460e:	011a      	lsls	r2, r3, #4
   24610:	4b0b      	ldr	r3, [pc, #44]	; (24640 <close+0x134>)
   24612:	18d3      	adds	r3, r2, r3
   24614:	2210      	movs	r2, #16
   24616:	2100      	movs	r1, #0
   24618:	0018      	movs	r0, r3
   2461a:	4b0b      	ldr	r3, [pc, #44]	; (24648 <close+0x13c>)
   2461c:	4798      	blx	r3
	}
	return s8Ret;
   2461e:	230f      	movs	r3, #15
   24620:	18fb      	adds	r3, r7, r3
   24622:	781b      	ldrb	r3, [r3, #0]
   24624:	b25b      	sxtb	r3, r3
}
   24626:	0018      	movs	r0, r3
   24628:	46bd      	mov	sp, r7
   2462a:	b004      	add	sp, #16
   2462c:	bdb0      	pop	{r4, r5, r7, pc}
   2462e:	46c0      	nop			; (mov r8, r8)
   24630:	000378bc 	.word	0x000378bc
   24634:	0001c7d9 	.word	0x0001c7d9
   24638:	000378fc 	.word	0x000378fc
   2463c:	000378dc 	.word	0x000378dc
   24640:	200058c4 	.word	0x200058c4
   24644:	0001f7d1 	.word	0x0001f7d1
   24648:	0001f571 	.word	0x0001f571

0002464c <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   2464c:	b580      	push	{r7, lr}
   2464e:	b086      	sub	sp, #24
   24650:	af00      	add	r7, sp, #0
   24652:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   24654:	2300      	movs	r3, #0
   24656:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   24658:	2317      	movs	r3, #23
   2465a:	18fb      	adds	r3, r7, r3
   2465c:	2200      	movs	r2, #0
   2465e:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   24660:	2316      	movs	r3, #22
   24662:	18fb      	adds	r3, r7, r3
   24664:	2200      	movs	r2, #0
   24666:	701a      	strb	r2, [r3, #0]
   24668:	e060      	b.n	2472c <nmi_inet_addr+0xe0>
	{
		j = 0;
   2466a:	2315      	movs	r3, #21
   2466c:	18fb      	adds	r3, r7, r3
   2466e:	2200      	movs	r2, #0
   24670:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   24672:	2314      	movs	r3, #20
   24674:	18fb      	adds	r3, r7, r3
   24676:	687a      	ldr	r2, [r7, #4]
   24678:	7812      	ldrb	r2, [r2, #0]
   2467a:	701a      	strb	r2, [r3, #0]
			++j;
   2467c:	2315      	movs	r3, #21
   2467e:	18fb      	adds	r3, r7, r3
   24680:	2215      	movs	r2, #21
   24682:	18ba      	adds	r2, r7, r2
   24684:	7812      	ldrb	r2, [r2, #0]
   24686:	3201      	adds	r2, #1
   24688:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2468a:	2315      	movs	r3, #21
   2468c:	18fb      	adds	r3, r7, r3
   2468e:	781b      	ldrb	r3, [r3, #0]
   24690:	2b04      	cmp	r3, #4
   24692:	d901      	bls.n	24698 <nmi_inet_addr+0x4c>
			{
				return 0;
   24694:	2300      	movs	r3, #0
   24696:	e057      	b.n	24748 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   24698:	2314      	movs	r3, #20
   2469a:	18fb      	adds	r3, r7, r3
   2469c:	781b      	ldrb	r3, [r3, #0]
   2469e:	2b2e      	cmp	r3, #46	; 0x2e
   246a0:	d004      	beq.n	246ac <nmi_inet_addr+0x60>
   246a2:	2314      	movs	r3, #20
   246a4:	18fb      	adds	r3, r7, r3
   246a6:	781b      	ldrb	r3, [r3, #0]
   246a8:	2b00      	cmp	r3, #0
   246aa:	d10d      	bne.n	246c8 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   246ac:	2316      	movs	r3, #22
   246ae:	18fb      	adds	r3, r7, r3
   246b0:	781b      	ldrb	r3, [r3, #0]
   246b2:	220c      	movs	r2, #12
   246b4:	18ba      	adds	r2, r7, r2
   246b6:	2117      	movs	r1, #23
   246b8:	1879      	adds	r1, r7, r1
   246ba:	7809      	ldrb	r1, [r1, #0]
   246bc:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   246be:	2317      	movs	r3, #23
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	2200      	movs	r2, #0
   246c4:	701a      	strb	r2, [r3, #0]
   246c6:	e01d      	b.n	24704 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   246c8:	2314      	movs	r3, #20
   246ca:	18fb      	adds	r3, r7, r3
   246cc:	781b      	ldrb	r3, [r3, #0]
   246ce:	2b2f      	cmp	r3, #47	; 0x2f
   246d0:	d916      	bls.n	24700 <nmi_inet_addr+0xb4>
   246d2:	2314      	movs	r3, #20
   246d4:	18fb      	adds	r3, r7, r3
   246d6:	781b      	ldrb	r3, [r3, #0]
   246d8:	2b39      	cmp	r3, #57	; 0x39
   246da:	d811      	bhi.n	24700 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   246dc:	2317      	movs	r3, #23
   246de:	18fb      	adds	r3, r7, r3
   246e0:	781b      	ldrb	r3, [r3, #0]
   246e2:	1c1a      	adds	r2, r3, #0
   246e4:	0092      	lsls	r2, r2, #2
   246e6:	18d3      	adds	r3, r2, r3
   246e8:	18db      	adds	r3, r3, r3
   246ea:	b2da      	uxtb	r2, r3
   246ec:	2314      	movs	r3, #20
   246ee:	18fb      	adds	r3, r7, r3
   246f0:	781b      	ldrb	r3, [r3, #0]
   246f2:	18d3      	adds	r3, r2, r3
   246f4:	b2da      	uxtb	r2, r3
   246f6:	2317      	movs	r3, #23
   246f8:	18fb      	adds	r3, r7, r3
   246fa:	3a30      	subs	r2, #48	; 0x30
   246fc:	701a      	strb	r2, [r3, #0]
   246fe:	e001      	b.n	24704 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   24700:	2300      	movs	r3, #0
   24702:	e021      	b.n	24748 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   24704:	687b      	ldr	r3, [r7, #4]
   24706:	3301      	adds	r3, #1
   24708:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   2470a:	2314      	movs	r3, #20
   2470c:	18fb      	adds	r3, r7, r3
   2470e:	781b      	ldrb	r3, [r3, #0]
   24710:	2b2e      	cmp	r3, #46	; 0x2e
   24712:	d004      	beq.n	2471e <nmi_inet_addr+0xd2>
   24714:	2314      	movs	r3, #20
   24716:	18fb      	adds	r3, r7, r3
   24718:	781b      	ldrb	r3, [r3, #0]
   2471a:	2b00      	cmp	r3, #0
   2471c:	d1a9      	bne.n	24672 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   2471e:	2316      	movs	r3, #22
   24720:	18fb      	adds	r3, r7, r3
   24722:	2216      	movs	r2, #22
   24724:	18ba      	adds	r2, r7, r2
   24726:	7812      	ldrb	r2, [r2, #0]
   24728:	3201      	adds	r2, #1
   2472a:	701a      	strb	r2, [r3, #0]
   2472c:	2316      	movs	r3, #22
   2472e:	18fb      	adds	r3, r7, r3
   24730:	781b      	ldrb	r3, [r3, #0]
   24732:	2b03      	cmp	r3, #3
   24734:	d999      	bls.n	2466a <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   24736:	230c      	movs	r3, #12
   24738:	18f9      	adds	r1, r7, r3
   2473a:	2310      	movs	r3, #16
   2473c:	18fb      	adds	r3, r7, r3
   2473e:	2204      	movs	r2, #4
   24740:	0018      	movs	r0, r3
   24742:	4b03      	ldr	r3, [pc, #12]	; (24750 <nmi_inet_addr+0x104>)
   24744:	4798      	blx	r3
	return u32IP;
   24746:	693b      	ldr	r3, [r7, #16]
}
   24748:	0018      	movs	r0, r3
   2474a:	46bd      	mov	sp, r7
   2474c:	b006      	add	sp, #24
   2474e:	bd80      	pop	{r7, pc}
   24750:	0001f535 	.word	0x0001f535

00024754 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   24754:	b5b0      	push	{r4, r5, r7, lr}
   24756:	b088      	sub	sp, #32
   24758:	af04      	add	r7, sp, #16
   2475a:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   2475c:	230f      	movs	r3, #15
   2475e:	18fb      	adds	r3, r7, r3
   24760:	22fa      	movs	r2, #250	; 0xfa
   24762:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   24764:	687b      	ldr	r3, [r7, #4]
   24766:	0018      	movs	r0, r3
   24768:	4b14      	ldr	r3, [pc, #80]	; (247bc <gethostbyname+0x68>)
   2476a:	4798      	blx	r3
   2476c:	0003      	movs	r3, r0
   2476e:	001a      	movs	r2, r3
   24770:	230e      	movs	r3, #14
   24772:	18fb      	adds	r3, r7, r3
   24774:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   24776:	230e      	movs	r3, #14
   24778:	18fb      	adds	r3, r7, r3
   2477a:	781b      	ldrb	r3, [r3, #0]
   2477c:	2b40      	cmp	r3, #64	; 0x40
   2477e:	d815      	bhi.n	247ac <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   24780:	230e      	movs	r3, #14
   24782:	18fb      	adds	r3, r7, r3
   24784:	781b      	ldrb	r3, [r3, #0]
   24786:	b29b      	uxth	r3, r3
   24788:	3301      	adds	r3, #1
   2478a:	b299      	uxth	r1, r3
   2478c:	230f      	movs	r3, #15
   2478e:	18fc      	adds	r4, r7, r3
   24790:	687a      	ldr	r2, [r7, #4]
   24792:	2300      	movs	r3, #0
   24794:	9302      	str	r3, [sp, #8]
   24796:	2300      	movs	r3, #0
   24798:	9301      	str	r3, [sp, #4]
   2479a:	2300      	movs	r3, #0
   2479c:	9300      	str	r3, [sp, #0]
   2479e:	000b      	movs	r3, r1
   247a0:	214a      	movs	r1, #74	; 0x4a
   247a2:	2002      	movs	r0, #2
   247a4:	4d06      	ldr	r5, [pc, #24]	; (247c0 <gethostbyname+0x6c>)
   247a6:	47a8      	blx	r5
   247a8:	0003      	movs	r3, r0
   247aa:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   247ac:	230f      	movs	r3, #15
   247ae:	18fb      	adds	r3, r7, r3
   247b0:	781b      	ldrb	r3, [r3, #0]
   247b2:	b25b      	sxtb	r3, r3
}
   247b4:	0018      	movs	r0, r3
   247b6:	46bd      	mov	sp, r7
   247b8:	b004      	add	sp, #16
   247ba:	bdb0      	pop	{r4, r5, r7, pc}
   247bc:	0001f5af 	.word	0x0001f5af
   247c0:	0001f7d1 	.word	0x0001f7d1

000247c4 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   247c4:	b580      	push	{r7, lr}
   247c6:	b082      	sub	sp, #8
   247c8:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   247ca:	003b      	movs	r3, r7
   247cc:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   247ce:	687b      	ldr	r3, [r7, #4]
   247d0:	22b9      	movs	r2, #185	; 0xb9
   247d2:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   247d4:	4b13      	ldr	r3, [pc, #76]	; (24824 <spi_flash_enter_low_power_mode+0x60>)
   247d6:	2100      	movs	r1, #0
   247d8:	0018      	movs	r0, r3
   247da:	4b13      	ldr	r3, [pc, #76]	; (24828 <spi_flash_enter_low_power_mode+0x64>)
   247dc:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   247de:	687b      	ldr	r3, [r7, #4]
   247e0:	781b      	ldrb	r3, [r3, #0]
   247e2:	001a      	movs	r2, r3
   247e4:	4b11      	ldr	r3, [pc, #68]	; (2482c <spi_flash_enter_low_power_mode+0x68>)
   247e6:	0011      	movs	r1, r2
   247e8:	0018      	movs	r0, r3
   247ea:	4b0f      	ldr	r3, [pc, #60]	; (24828 <spi_flash_enter_low_power_mode+0x64>)
   247ec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   247ee:	4b10      	ldr	r3, [pc, #64]	; (24830 <spi_flash_enter_low_power_mode+0x6c>)
   247f0:	2101      	movs	r1, #1
   247f2:	0018      	movs	r0, r3
   247f4:	4b0c      	ldr	r3, [pc, #48]	; (24828 <spi_flash_enter_low_power_mode+0x64>)
   247f6:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   247f8:	4b0e      	ldr	r3, [pc, #56]	; (24834 <spi_flash_enter_low_power_mode+0x70>)
   247fa:	2100      	movs	r1, #0
   247fc:	0018      	movs	r0, r3
   247fe:	4b0a      	ldr	r3, [pc, #40]	; (24828 <spi_flash_enter_low_power_mode+0x64>)
   24800:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   24802:	4b0d      	ldr	r3, [pc, #52]	; (24838 <spi_flash_enter_low_power_mode+0x74>)
   24804:	2181      	movs	r1, #129	; 0x81
   24806:	0018      	movs	r0, r3
   24808:	4b07      	ldr	r3, [pc, #28]	; (24828 <spi_flash_enter_low_power_mode+0x64>)
   2480a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2480c:	46c0      	nop			; (mov r8, r8)
   2480e:	4b0b      	ldr	r3, [pc, #44]	; (2483c <spi_flash_enter_low_power_mode+0x78>)
   24810:	0018      	movs	r0, r3
   24812:	4b0b      	ldr	r3, [pc, #44]	; (24840 <spi_flash_enter_low_power_mode+0x7c>)
   24814:	4798      	blx	r3
   24816:	0003      	movs	r3, r0
   24818:	2b01      	cmp	r3, #1
   2481a:	d1f8      	bne.n	2480e <spi_flash_enter_low_power_mode+0x4a>
}
   2481c:	46c0      	nop			; (mov r8, r8)
   2481e:	46bd      	mov	sp, r7
   24820:	b002      	add	sp, #8
   24822:	bd80      	pop	{r7, pc}
   24824:	00010208 	.word	0x00010208
   24828:	00021625 	.word	0x00021625
   2482c:	0001020c 	.word	0x0001020c
   24830:	00010214 	.word	0x00010214
   24834:	0001021c 	.word	0x0001021c
   24838:	00010204 	.word	0x00010204
   2483c:	00010218 	.word	0x00010218
   24840:	000215e1 	.word	0x000215e1

00024844 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   24844:	b580      	push	{r7, lr}
   24846:	b082      	sub	sp, #8
   24848:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   2484a:	003b      	movs	r3, r7
   2484c:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   2484e:	687b      	ldr	r3, [r7, #4]
   24850:	22ab      	movs	r2, #171	; 0xab
   24852:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   24854:	4b13      	ldr	r3, [pc, #76]	; (248a4 <spi_flash_leave_low_power_mode+0x60>)
   24856:	2100      	movs	r1, #0
   24858:	0018      	movs	r0, r3
   2485a:	4b13      	ldr	r3, [pc, #76]	; (248a8 <spi_flash_leave_low_power_mode+0x64>)
   2485c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   2485e:	687b      	ldr	r3, [r7, #4]
   24860:	781b      	ldrb	r3, [r3, #0]
   24862:	001a      	movs	r2, r3
   24864:	4b11      	ldr	r3, [pc, #68]	; (248ac <spi_flash_leave_low_power_mode+0x68>)
   24866:	0011      	movs	r1, r2
   24868:	0018      	movs	r0, r3
   2486a:	4b0f      	ldr	r3, [pc, #60]	; (248a8 <spi_flash_leave_low_power_mode+0x64>)
   2486c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   2486e:	4b10      	ldr	r3, [pc, #64]	; (248b0 <spi_flash_leave_low_power_mode+0x6c>)
   24870:	2101      	movs	r1, #1
   24872:	0018      	movs	r0, r3
   24874:	4b0c      	ldr	r3, [pc, #48]	; (248a8 <spi_flash_leave_low_power_mode+0x64>)
   24876:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   24878:	4b0e      	ldr	r3, [pc, #56]	; (248b4 <spi_flash_leave_low_power_mode+0x70>)
   2487a:	2100      	movs	r1, #0
   2487c:	0018      	movs	r0, r3
   2487e:	4b0a      	ldr	r3, [pc, #40]	; (248a8 <spi_flash_leave_low_power_mode+0x64>)
   24880:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   24882:	4b0d      	ldr	r3, [pc, #52]	; (248b8 <spi_flash_leave_low_power_mode+0x74>)
   24884:	2181      	movs	r1, #129	; 0x81
   24886:	0018      	movs	r0, r3
   24888:	4b07      	ldr	r3, [pc, #28]	; (248a8 <spi_flash_leave_low_power_mode+0x64>)
   2488a:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   2488c:	46c0      	nop			; (mov r8, r8)
   2488e:	4b0b      	ldr	r3, [pc, #44]	; (248bc <spi_flash_leave_low_power_mode+0x78>)
   24890:	0018      	movs	r0, r3
   24892:	4b0b      	ldr	r3, [pc, #44]	; (248c0 <spi_flash_leave_low_power_mode+0x7c>)
   24894:	4798      	blx	r3
   24896:	0003      	movs	r3, r0
   24898:	2b01      	cmp	r3, #1
   2489a:	d1f8      	bne.n	2488e <spi_flash_leave_low_power_mode+0x4a>
}
   2489c:	46c0      	nop			; (mov r8, r8)
   2489e:	46bd      	mov	sp, r7
   248a0:	b002      	add	sp, #8
   248a2:	bd80      	pop	{r7, pc}
   248a4:	00010208 	.word	0x00010208
   248a8:	00021625 	.word	0x00021625
   248ac:	0001020c 	.word	0x0001020c
   248b0:	00010214 	.word	0x00010214
   248b4:	0001021c 	.word	0x0001021c
   248b8:	00010204 	.word	0x00010204
   248bc:	00010218 	.word	0x00010218
   248c0:	000215e1 	.word	0x000215e1

000248c4 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   248c4:	b590      	push	{r4, r7, lr}
   248c6:	b085      	sub	sp, #20
   248c8:	af00      	add	r7, sp, #0
   248ca:	0002      	movs	r2, r0
   248cc:	1dfb      	adds	r3, r7, #7
   248ce:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   248d0:	230f      	movs	r3, #15
   248d2:	18fb      	adds	r3, r7, r3
   248d4:	2200      	movs	r2, #0
   248d6:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   248d8:	4b24      	ldr	r3, [pc, #144]	; (2496c <spi_flash_enable+0xa8>)
   248da:	4798      	blx	r3
   248dc:	0003      	movs	r3, r0
   248de:	051b      	lsls	r3, r3, #20
   248e0:	0d1b      	lsrs	r3, r3, #20
   248e2:	4a23      	ldr	r2, [pc, #140]	; (24970 <spi_flash_enable+0xac>)
   248e4:	4293      	cmp	r3, r2
   248e6:	d938      	bls.n	2495a <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   248e8:	230f      	movs	r3, #15
   248ea:	18fc      	adds	r4, r7, r3
   248ec:	2308      	movs	r3, #8
   248ee:	18fb      	adds	r3, r7, r3
   248f0:	4a20      	ldr	r2, [pc, #128]	; (24974 <spi_flash_enable+0xb0>)
   248f2:	0019      	movs	r1, r3
   248f4:	0010      	movs	r0, r2
   248f6:	4b20      	ldr	r3, [pc, #128]	; (24978 <spi_flash_enable+0xb4>)
   248f8:	4798      	blx	r3
   248fa:	0003      	movs	r3, r0
   248fc:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   248fe:	230f      	movs	r3, #15
   24900:	18fb      	adds	r3, r7, r3
   24902:	781b      	ldrb	r3, [r3, #0]
   24904:	b25b      	sxtb	r3, r3
   24906:	2b00      	cmp	r3, #0
   24908:	d126      	bne.n	24958 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   2490a:	68bb      	ldr	r3, [r7, #8]
   2490c:	4a1b      	ldr	r2, [pc, #108]	; (2497c <spi_flash_enable+0xb8>)
   2490e:	4013      	ands	r3, r2
   24910:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   24912:	68bb      	ldr	r3, [r7, #8]
   24914:	4a1a      	ldr	r2, [pc, #104]	; (24980 <spi_flash_enable+0xbc>)
   24916:	4313      	orrs	r3, r2
   24918:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2491a:	68bb      	ldr	r3, [r7, #8]
   2491c:	4a15      	ldr	r2, [pc, #84]	; (24974 <spi_flash_enable+0xb0>)
   2491e:	0019      	movs	r1, r3
   24920:	0010      	movs	r0, r2
   24922:	4b18      	ldr	r3, [pc, #96]	; (24984 <spi_flash_enable+0xc0>)
   24924:	4798      	blx	r3
		if(enable) {
   24926:	1dfb      	adds	r3, r7, #7
   24928:	781b      	ldrb	r3, [r3, #0]
   2492a:	2b00      	cmp	r3, #0
   2492c:	d002      	beq.n	24934 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   2492e:	4b16      	ldr	r3, [pc, #88]	; (24988 <spi_flash_enable+0xc4>)
   24930:	4798      	blx	r3
   24932:	e001      	b.n	24938 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   24934:	4b15      	ldr	r3, [pc, #84]	; (2498c <spi_flash_enable+0xc8>)
   24936:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   24938:	68bb      	ldr	r3, [r7, #8]
   2493a:	4a10      	ldr	r2, [pc, #64]	; (2497c <spi_flash_enable+0xb8>)
   2493c:	4013      	ands	r3, r2
   2493e:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   24940:	68bb      	ldr	r3, [r7, #8]
   24942:	2280      	movs	r2, #128	; 0x80
   24944:	0252      	lsls	r2, r2, #9
   24946:	4313      	orrs	r3, r2
   24948:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   2494a:	68bb      	ldr	r3, [r7, #8]
   2494c:	4a09      	ldr	r2, [pc, #36]	; (24974 <spi_flash_enable+0xb0>)
   2494e:	0019      	movs	r1, r3
   24950:	0010      	movs	r0, r2
   24952:	4b0c      	ldr	r3, [pc, #48]	; (24984 <spi_flash_enable+0xc0>)
   24954:	4798      	blx	r3
   24956:	e000      	b.n	2495a <spi_flash_enable+0x96>
			goto ERR1;
   24958:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   2495a:	230f      	movs	r3, #15
   2495c:	18fb      	adds	r3, r7, r3
   2495e:	781b      	ldrb	r3, [r3, #0]
   24960:	b25b      	sxtb	r3, r3
}
   24962:	0018      	movs	r0, r3
   24964:	46bd      	mov	sp, r7
   24966:	b005      	add	sp, #20
   24968:	bd90      	pop	{r4, r7, pc}
   2496a:	46c0      	nop			; (mov r8, r8)
   2496c:	00020f01 	.word	0x00020f01
   24970:	0000039f 	.word	0x0000039f
   24974:	00001410 	.word	0x00001410
   24978:	00021601 	.word	0x00021601
   2497c:	f8888fff 	.word	0xf8888fff
   24980:	01111000 	.word	0x01111000
   24984:	00021625 	.word	0x00021625
   24988:	00024845 	.word	0x00024845
   2498c:	000247c5 	.word	0x000247c5

00024990 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   24990:	b580      	push	{r7, lr}
   24992:	b084      	sub	sp, #16
   24994:	af00      	add	r7, sp, #0
   24996:	0002      	movs	r2, r0
   24998:	1dfb      	adds	r3, r7, #7
   2499a:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   2499c:	1dfb      	adds	r3, r7, #7
   2499e:	781b      	ldrb	r3, [r3, #0]
   249a0:	2b00      	cmp	r3, #0
   249a2:	d108      	bne.n	249b6 <mem_test_unit_ready+0x26>
   249a4:	1dfb      	adds	r3, r7, #7
   249a6:	781a      	ldrb	r2, [r3, #0]
   249a8:	4b08      	ldr	r3, [pc, #32]	; (249cc <mem_test_unit_ready+0x3c>)
   249aa:	0152      	lsls	r2, r2, #5
   249ac:	58d3      	ldr	r3, [r2, r3]
   249ae:	4798      	blx	r3
   249b0:	0003      	movs	r3, r0
   249b2:	001a      	movs	r2, r3
   249b4:	e000      	b.n	249b8 <mem_test_unit_ready+0x28>
   249b6:	2201      	movs	r2, #1
  status =
   249b8:	230f      	movs	r3, #15
   249ba:	18fb      	adds	r3, r7, r3
   249bc:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   249be:	230f      	movs	r3, #15
   249c0:	18fb      	adds	r3, r7, r3
   249c2:	781b      	ldrb	r3, [r3, #0]
}
   249c4:	0018      	movs	r0, r3
   249c6:	46bd      	mov	sp, r7
   249c8:	b004      	add	sp, #16
   249ca:	bd80      	pop	{r7, pc}
   249cc:	00037988 	.word	0x00037988

000249d0 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   249d0:	b580      	push	{r7, lr}
   249d2:	b084      	sub	sp, #16
   249d4:	af00      	add	r7, sp, #0
   249d6:	0002      	movs	r2, r0
   249d8:	6039      	str	r1, [r7, #0]
   249da:	1dfb      	adds	r3, r7, #7
   249dc:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   249de:	1dfb      	adds	r3, r7, #7
   249e0:	781b      	ldrb	r3, [r3, #0]
   249e2:	2b00      	cmp	r3, #0
   249e4:	d10c      	bne.n	24a00 <mem_read_capacity+0x30>
   249e6:	1dfb      	adds	r3, r7, #7
   249e8:	781b      	ldrb	r3, [r3, #0]
   249ea:	4a0b      	ldr	r2, [pc, #44]	; (24a18 <mem_read_capacity+0x48>)
   249ec:	015b      	lsls	r3, r3, #5
   249ee:	18d3      	adds	r3, r2, r3
   249f0:	3304      	adds	r3, #4
   249f2:	681b      	ldr	r3, [r3, #0]
   249f4:	683a      	ldr	r2, [r7, #0]
   249f6:	0010      	movs	r0, r2
   249f8:	4798      	blx	r3
   249fa:	0003      	movs	r3, r0
   249fc:	001a      	movs	r2, r3
   249fe:	e000      	b.n	24a02 <mem_read_capacity+0x32>
   24a00:	2201      	movs	r2, #1
  status =
   24a02:	230f      	movs	r3, #15
   24a04:	18fb      	adds	r3, r7, r3
   24a06:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   24a08:	230f      	movs	r3, #15
   24a0a:	18fb      	adds	r3, r7, r3
   24a0c:	781b      	ldrb	r3, [r3, #0]
}
   24a0e:	0018      	movs	r0, r3
   24a10:	46bd      	mov	sp, r7
   24a12:	b004      	add	sp, #16
   24a14:	bd80      	pop	{r7, pc}
   24a16:	46c0      	nop			; (mov r8, r8)
   24a18:	00037988 	.word	0x00037988

00024a1c <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   24a1c:	b580      	push	{r7, lr}
   24a1e:	b084      	sub	sp, #16
   24a20:	af00      	add	r7, sp, #0
   24a22:	0002      	movs	r2, r0
   24a24:	1dfb      	adds	r3, r7, #7
   24a26:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   24a28:	1dfb      	adds	r3, r7, #7
   24a2a:	781b      	ldrb	r3, [r3, #0]
   24a2c:	425a      	negs	r2, r3
   24a2e:	4153      	adcs	r3, r2
   24a30:	b2da      	uxtb	r2, r3
  sector_size =
   24a32:	230f      	movs	r3, #15
   24a34:	18fb      	adds	r3, r7, r3
   24a36:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   24a38:	230f      	movs	r3, #15
   24a3a:	18fb      	adds	r3, r7, r3
   24a3c:	781b      	ldrb	r3, [r3, #0]
}
   24a3e:	0018      	movs	r0, r3
   24a40:	46bd      	mov	sp, r7
   24a42:	b004      	add	sp, #16
   24a44:	bd80      	pop	{r7, pc}
	...

00024a48 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   24a48:	b580      	push	{r7, lr}
   24a4a:	b084      	sub	sp, #16
   24a4c:	af00      	add	r7, sp, #0
   24a4e:	0002      	movs	r2, r0
   24a50:	1dfb      	adds	r3, r7, #7
   24a52:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   24a54:	1dfb      	adds	r3, r7, #7
   24a56:	781b      	ldrb	r3, [r3, #0]
   24a58:	2b00      	cmp	r3, #0
   24a5a:	d109      	bne.n	24a70 <mem_wr_protect+0x28>
   24a5c:	1dfb      	adds	r3, r7, #7
   24a5e:	781b      	ldrb	r3, [r3, #0]
   24a60:	4a0a      	ldr	r2, [pc, #40]	; (24a8c <mem_wr_protect+0x44>)
   24a62:	015b      	lsls	r3, r3, #5
   24a64:	18d3      	adds	r3, r2, r3
   24a66:	330c      	adds	r3, #12
   24a68:	681b      	ldr	r3, [r3, #0]
   24a6a:	4798      	blx	r3
   24a6c:	1e03      	subs	r3, r0, #0
   24a6e:	d001      	beq.n	24a74 <mem_wr_protect+0x2c>
   24a70:	2201      	movs	r2, #1
   24a72:	e000      	b.n	24a76 <mem_wr_protect+0x2e>
   24a74:	2200      	movs	r2, #0
  wr_protect =
   24a76:	230f      	movs	r3, #15
   24a78:	18fb      	adds	r3, r7, r3
   24a7a:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   24a7c:	230f      	movs	r3, #15
   24a7e:	18fb      	adds	r3, r7, r3
   24a80:	781b      	ldrb	r3, [r3, #0]
}
   24a82:	0018      	movs	r0, r3
   24a84:	46bd      	mov	sp, r7
   24a86:	b004      	add	sp, #16
   24a88:	bd80      	pop	{r7, pc}
   24a8a:	46c0      	nop			; (mov r8, r8)
   24a8c:	00037988 	.word	0x00037988

00024a90 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   24a90:	b580      	push	{r7, lr}
   24a92:	b086      	sub	sp, #24
   24a94:	af00      	add	r7, sp, #0
   24a96:	60b9      	str	r1, [r7, #8]
   24a98:	607a      	str	r2, [r7, #4]
   24a9a:	230f      	movs	r3, #15
   24a9c:	18fb      	adds	r3, r7, r3
   24a9e:	1c02      	adds	r2, r0, #0
   24aa0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   24aa2:	230f      	movs	r3, #15
   24aa4:	18fb      	adds	r3, r7, r3
   24aa6:	781b      	ldrb	r3, [r3, #0]
   24aa8:	2b00      	cmp	r3, #0
   24aaa:	d10e      	bne.n	24aca <memory_2_ram+0x3a>
   24aac:	230f      	movs	r3, #15
   24aae:	18fb      	adds	r3, r7, r3
   24ab0:	781b      	ldrb	r3, [r3, #0]
   24ab2:	4a0b      	ldr	r2, [pc, #44]	; (24ae0 <memory_2_ram+0x50>)
   24ab4:	015b      	lsls	r3, r3, #5
   24ab6:	18d3      	adds	r3, r2, r3
   24ab8:	3314      	adds	r3, #20
   24aba:	681b      	ldr	r3, [r3, #0]
   24abc:	6879      	ldr	r1, [r7, #4]
   24abe:	68ba      	ldr	r2, [r7, #8]
   24ac0:	0010      	movs	r0, r2
   24ac2:	4798      	blx	r3
   24ac4:	0003      	movs	r3, r0
   24ac6:	001a      	movs	r2, r3
   24ac8:	e000      	b.n	24acc <memory_2_ram+0x3c>
   24aca:	2201      	movs	r2, #1
  status =
   24acc:	2317      	movs	r3, #23
   24ace:	18fb      	adds	r3, r7, r3
   24ad0:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   24ad2:	2317      	movs	r3, #23
   24ad4:	18fb      	adds	r3, r7, r3
   24ad6:	781b      	ldrb	r3, [r3, #0]
}
   24ad8:	0018      	movs	r0, r3
   24ada:	46bd      	mov	sp, r7
   24adc:	b006      	add	sp, #24
   24ade:	bd80      	pop	{r7, pc}
   24ae0:	00037988 	.word	0x00037988

00024ae4 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   24ae4:	b580      	push	{r7, lr}
   24ae6:	b086      	sub	sp, #24
   24ae8:	af00      	add	r7, sp, #0
   24aea:	60b9      	str	r1, [r7, #8]
   24aec:	607a      	str	r2, [r7, #4]
   24aee:	230f      	movs	r3, #15
   24af0:	18fb      	adds	r3, r7, r3
   24af2:	1c02      	adds	r2, r0, #0
   24af4:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   24af6:	230f      	movs	r3, #15
   24af8:	18fb      	adds	r3, r7, r3
   24afa:	781b      	ldrb	r3, [r3, #0]
   24afc:	2b00      	cmp	r3, #0
   24afe:	d10e      	bne.n	24b1e <ram_2_memory+0x3a>
   24b00:	230f      	movs	r3, #15
   24b02:	18fb      	adds	r3, r7, r3
   24b04:	781b      	ldrb	r3, [r3, #0]
   24b06:	4a0b      	ldr	r2, [pc, #44]	; (24b34 <ram_2_memory+0x50>)
   24b08:	015b      	lsls	r3, r3, #5
   24b0a:	18d3      	adds	r3, r2, r3
   24b0c:	3318      	adds	r3, #24
   24b0e:	681b      	ldr	r3, [r3, #0]
   24b10:	6879      	ldr	r1, [r7, #4]
   24b12:	68ba      	ldr	r2, [r7, #8]
   24b14:	0010      	movs	r0, r2
   24b16:	4798      	blx	r3
   24b18:	0003      	movs	r3, r0
   24b1a:	001a      	movs	r2, r3
   24b1c:	e000      	b.n	24b20 <ram_2_memory+0x3c>
   24b1e:	2201      	movs	r2, #1
  status =
   24b20:	2317      	movs	r3, #23
   24b22:	18fb      	adds	r3, r7, r3
   24b24:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   24b26:	2317      	movs	r3, #23
   24b28:	18fb      	adds	r3, r7, r3
   24b2a:	781b      	ldrb	r3, [r3, #0]
}
   24b2c:	0018      	movs	r0, r3
   24b2e:	46bd      	mov	sp, r7
   24b30:	b006      	add	sp, #24
   24b32:	bd80      	pop	{r7, pc}
   24b34:	00037988 	.word	0x00037988

00024b38 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   24b38:	b580      	push	{r7, lr}
   24b3a:	b082      	sub	sp, #8
   24b3c:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   24b3e:	4b10      	ldr	r3, [pc, #64]	; (24b80 <cpu_irq_enter_critical+0x48>)
   24b40:	681b      	ldr	r3, [r3, #0]
   24b42:	2b00      	cmp	r3, #0
   24b44:	d112      	bne.n	24b6c <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   24b46:	f3ef 8310 	mrs	r3, PRIMASK
   24b4a:	607b      	str	r3, [r7, #4]
  return(result);
   24b4c:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   24b4e:	2b00      	cmp	r3, #0
   24b50:	d109      	bne.n	24b66 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   24b52:	b672      	cpsid	i
   24b54:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   24b58:	4b0a      	ldr	r3, [pc, #40]	; (24b84 <cpu_irq_enter_critical+0x4c>)
   24b5a:	2200      	movs	r2, #0
   24b5c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   24b5e:	4b0a      	ldr	r3, [pc, #40]	; (24b88 <cpu_irq_enter_critical+0x50>)
   24b60:	2201      	movs	r2, #1
   24b62:	701a      	strb	r2, [r3, #0]
   24b64:	e002      	b.n	24b6c <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   24b66:	4b08      	ldr	r3, [pc, #32]	; (24b88 <cpu_irq_enter_critical+0x50>)
   24b68:	2200      	movs	r2, #0
   24b6a:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   24b6c:	4b04      	ldr	r3, [pc, #16]	; (24b80 <cpu_irq_enter_critical+0x48>)
   24b6e:	681b      	ldr	r3, [r3, #0]
   24b70:	1c5a      	adds	r2, r3, #1
   24b72:	4b03      	ldr	r3, [pc, #12]	; (24b80 <cpu_irq_enter_critical+0x48>)
   24b74:	601a      	str	r2, [r3, #0]
}
   24b76:	46c0      	nop			; (mov r8, r8)
   24b78:	46bd      	mov	sp, r7
   24b7a:	b002      	add	sp, #8
   24b7c:	bd80      	pop	{r7, pc}
   24b7e:	46c0      	nop			; (mov r8, r8)
   24b80:	20004130 	.word	0x20004130
   24b84:	20000126 	.word	0x20000126
   24b88:	20004134 	.word	0x20004134

00024b8c <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   24b8c:	b580      	push	{r7, lr}
   24b8e:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   24b90:	4b0b      	ldr	r3, [pc, #44]	; (24bc0 <cpu_irq_leave_critical+0x34>)
   24b92:	681b      	ldr	r3, [r3, #0]
   24b94:	1e5a      	subs	r2, r3, #1
   24b96:	4b0a      	ldr	r3, [pc, #40]	; (24bc0 <cpu_irq_leave_critical+0x34>)
   24b98:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   24b9a:	4b09      	ldr	r3, [pc, #36]	; (24bc0 <cpu_irq_leave_critical+0x34>)
   24b9c:	681b      	ldr	r3, [r3, #0]
   24b9e:	2b00      	cmp	r3, #0
   24ba0:	d10a      	bne.n	24bb8 <cpu_irq_leave_critical+0x2c>
   24ba2:	4b08      	ldr	r3, [pc, #32]	; (24bc4 <cpu_irq_leave_critical+0x38>)
   24ba4:	781b      	ldrb	r3, [r3, #0]
   24ba6:	b2db      	uxtb	r3, r3
   24ba8:	2b00      	cmp	r3, #0
   24baa:	d005      	beq.n	24bb8 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   24bac:	4b06      	ldr	r3, [pc, #24]	; (24bc8 <cpu_irq_leave_critical+0x3c>)
   24bae:	2201      	movs	r2, #1
   24bb0:	701a      	strb	r2, [r3, #0]
   24bb2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   24bb6:	b662      	cpsie	i
	}
}
   24bb8:	46c0      	nop			; (mov r8, r8)
   24bba:	46bd      	mov	sp, r7
   24bbc:	bd80      	pop	{r7, pc}
   24bbe:	46c0      	nop			; (mov r8, r8)
   24bc0:	20004130 	.word	0x20004130
   24bc4:	20004134 	.word	0x20004134
   24bc8:	20000126 	.word	0x20000126

00024bcc <system_pinmux_get_group_from_gpio_pin>:
{
   24bcc:	b580      	push	{r7, lr}
   24bce:	b084      	sub	sp, #16
   24bd0:	af00      	add	r7, sp, #0
   24bd2:	0002      	movs	r2, r0
   24bd4:	1dfb      	adds	r3, r7, #7
   24bd6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   24bd8:	230f      	movs	r3, #15
   24bda:	18fb      	adds	r3, r7, r3
   24bdc:	1dfa      	adds	r2, r7, #7
   24bde:	7812      	ldrb	r2, [r2, #0]
   24be0:	09d2      	lsrs	r2, r2, #7
   24be2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   24be4:	230e      	movs	r3, #14
   24be6:	18fb      	adds	r3, r7, r3
   24be8:	1dfa      	adds	r2, r7, #7
   24bea:	7812      	ldrb	r2, [r2, #0]
   24bec:	0952      	lsrs	r2, r2, #5
   24bee:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   24bf0:	4b0d      	ldr	r3, [pc, #52]	; (24c28 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   24bf2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   24bf4:	230f      	movs	r3, #15
   24bf6:	18fb      	adds	r3, r7, r3
   24bf8:	781b      	ldrb	r3, [r3, #0]
   24bfa:	2b00      	cmp	r3, #0
   24bfc:	d10f      	bne.n	24c1e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   24bfe:	230f      	movs	r3, #15
   24c00:	18fb      	adds	r3, r7, r3
   24c02:	781b      	ldrb	r3, [r3, #0]
   24c04:	009b      	lsls	r3, r3, #2
   24c06:	2210      	movs	r2, #16
   24c08:	4694      	mov	ip, r2
   24c0a:	44bc      	add	ip, r7
   24c0c:	4463      	add	r3, ip
   24c0e:	3b08      	subs	r3, #8
   24c10:	681a      	ldr	r2, [r3, #0]
   24c12:	230e      	movs	r3, #14
   24c14:	18fb      	adds	r3, r7, r3
   24c16:	781b      	ldrb	r3, [r3, #0]
   24c18:	01db      	lsls	r3, r3, #7
   24c1a:	18d3      	adds	r3, r2, r3
   24c1c:	e000      	b.n	24c20 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   24c1e:	2300      	movs	r3, #0
}
   24c20:	0018      	movs	r0, r3
   24c22:	46bd      	mov	sp, r7
   24c24:	b004      	add	sp, #16
   24c26:	bd80      	pop	{r7, pc}
   24c28:	41004400 	.word	0x41004400

00024c2c <port_get_group_from_gpio_pin>:
{
   24c2c:	b580      	push	{r7, lr}
   24c2e:	b082      	sub	sp, #8
   24c30:	af00      	add	r7, sp, #0
   24c32:	0002      	movs	r2, r0
   24c34:	1dfb      	adds	r3, r7, #7
   24c36:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   24c38:	1dfb      	adds	r3, r7, #7
   24c3a:	781b      	ldrb	r3, [r3, #0]
   24c3c:	0018      	movs	r0, r3
   24c3e:	4b03      	ldr	r3, [pc, #12]	; (24c4c <port_get_group_from_gpio_pin+0x20>)
   24c40:	4798      	blx	r3
   24c42:	0003      	movs	r3, r0
}
   24c44:	0018      	movs	r0, r3
   24c46:	46bd      	mov	sp, r7
   24c48:	b002      	add	sp, #8
   24c4a:	bd80      	pop	{r7, pc}
   24c4c:	00024bcd 	.word	0x00024bcd

00024c50 <port_get_config_defaults>:
{
   24c50:	b580      	push	{r7, lr}
   24c52:	b082      	sub	sp, #8
   24c54:	af00      	add	r7, sp, #0
   24c56:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   24c58:	687b      	ldr	r3, [r7, #4]
   24c5a:	2200      	movs	r2, #0
   24c5c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   24c5e:	687b      	ldr	r3, [r7, #4]
   24c60:	2201      	movs	r2, #1
   24c62:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   24c64:	687b      	ldr	r3, [r7, #4]
   24c66:	2200      	movs	r2, #0
   24c68:	709a      	strb	r2, [r3, #2]
}
   24c6a:	46c0      	nop			; (mov r8, r8)
   24c6c:	46bd      	mov	sp, r7
   24c6e:	b002      	add	sp, #8
   24c70:	bd80      	pop	{r7, pc}
	...

00024c74 <port_pin_set_output_level>:
{
   24c74:	b580      	push	{r7, lr}
   24c76:	b084      	sub	sp, #16
   24c78:	af00      	add	r7, sp, #0
   24c7a:	0002      	movs	r2, r0
   24c7c:	1dfb      	adds	r3, r7, #7
   24c7e:	701a      	strb	r2, [r3, #0]
   24c80:	1dbb      	adds	r3, r7, #6
   24c82:	1c0a      	adds	r2, r1, #0
   24c84:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   24c86:	1dfb      	adds	r3, r7, #7
   24c88:	781b      	ldrb	r3, [r3, #0]
   24c8a:	0018      	movs	r0, r3
   24c8c:	4b0d      	ldr	r3, [pc, #52]	; (24cc4 <port_pin_set_output_level+0x50>)
   24c8e:	4798      	blx	r3
   24c90:	0003      	movs	r3, r0
   24c92:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   24c94:	1dfb      	adds	r3, r7, #7
   24c96:	781b      	ldrb	r3, [r3, #0]
   24c98:	221f      	movs	r2, #31
   24c9a:	4013      	ands	r3, r2
   24c9c:	2201      	movs	r2, #1
   24c9e:	409a      	lsls	r2, r3
   24ca0:	0013      	movs	r3, r2
   24ca2:	60bb      	str	r3, [r7, #8]
	if (level) {
   24ca4:	1dbb      	adds	r3, r7, #6
   24ca6:	781b      	ldrb	r3, [r3, #0]
   24ca8:	2b00      	cmp	r3, #0
   24caa:	d003      	beq.n	24cb4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   24cac:	68fb      	ldr	r3, [r7, #12]
   24cae:	68ba      	ldr	r2, [r7, #8]
   24cb0:	619a      	str	r2, [r3, #24]
}
   24cb2:	e002      	b.n	24cba <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   24cb4:	68fb      	ldr	r3, [r7, #12]
   24cb6:	68ba      	ldr	r2, [r7, #8]
   24cb8:	615a      	str	r2, [r3, #20]
}
   24cba:	46c0      	nop			; (mov r8, r8)
   24cbc:	46bd      	mov	sp, r7
   24cbe:	b004      	add	sp, #16
   24cc0:	bd80      	pop	{r7, pc}
   24cc2:	46c0      	nop			; (mov r8, r8)
   24cc4:	00024c2d 	.word	0x00024c2d

00024cc8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   24cc8:	b580      	push	{r7, lr}
   24cca:	b082      	sub	sp, #8
   24ccc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   24cce:	1d3b      	adds	r3, r7, #4
   24cd0:	0018      	movs	r0, r3
   24cd2:	4b0e      	ldr	r3, [pc, #56]	; (24d0c <system_board_init+0x44>)
   24cd4:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   24cd6:	1d3b      	adds	r3, r7, #4
   24cd8:	2201      	movs	r2, #1
   24cda:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   24cdc:	1d3b      	adds	r3, r7, #4
   24cde:	0019      	movs	r1, r3
   24ce0:	2017      	movs	r0, #23
   24ce2:	4b0b      	ldr	r3, [pc, #44]	; (24d10 <system_board_init+0x48>)
   24ce4:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   24ce6:	2101      	movs	r1, #1
   24ce8:	2017      	movs	r0, #23
   24cea:	4b0a      	ldr	r3, [pc, #40]	; (24d14 <system_board_init+0x4c>)
   24cec:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   24cee:	1d3b      	adds	r3, r7, #4
   24cf0:	2200      	movs	r2, #0
   24cf2:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   24cf4:	1d3b      	adds	r3, r7, #4
   24cf6:	2201      	movs	r2, #1
   24cf8:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   24cfa:	1d3b      	adds	r3, r7, #4
   24cfc:	0019      	movs	r1, r3
   24cfe:	2037      	movs	r0, #55	; 0x37
   24d00:	4b03      	ldr	r3, [pc, #12]	; (24d10 <system_board_init+0x48>)
   24d02:	4798      	blx	r3
}
   24d04:	46c0      	nop			; (mov r8, r8)
   24d06:	46bd      	mov	sp, r7
   24d08:	b002      	add	sp, #8
   24d0a:	bd80      	pop	{r7, pc}
   24d0c:	00024c51 	.word	0x00024c51
   24d10:	0002533d 	.word	0x0002533d
   24d14:	00024c75 	.word	0x00024c75

00024d18 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   24d18:	b580      	push	{r7, lr}
   24d1a:	b084      	sub	sp, #16
   24d1c:	af00      	add	r7, sp, #0
   24d1e:	0002      	movs	r2, r0
   24d20:	1dfb      	adds	r3, r7, #7
   24d22:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   24d24:	230f      	movs	r3, #15
   24d26:	18fb      	adds	r3, r7, r3
   24d28:	1dfa      	adds	r2, r7, #7
   24d2a:	7812      	ldrb	r2, [r2, #0]
   24d2c:	0952      	lsrs	r2, r2, #5
   24d2e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   24d30:	230f      	movs	r3, #15
   24d32:	18fb      	adds	r3, r7, r3
   24d34:	781b      	ldrb	r3, [r3, #0]
   24d36:	2b00      	cmp	r3, #0
   24d38:	d10c      	bne.n	24d54 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   24d3a:	4b09      	ldr	r3, [pc, #36]	; (24d60 <_extint_get_eic_from_channel+0x48>)
   24d3c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   24d3e:	230f      	movs	r3, #15
   24d40:	18fb      	adds	r3, r7, r3
   24d42:	781b      	ldrb	r3, [r3, #0]
   24d44:	009b      	lsls	r3, r3, #2
   24d46:	2210      	movs	r2, #16
   24d48:	4694      	mov	ip, r2
   24d4a:	44bc      	add	ip, r7
   24d4c:	4463      	add	r3, ip
   24d4e:	3b08      	subs	r3, #8
   24d50:	681b      	ldr	r3, [r3, #0]
   24d52:	e000      	b.n	24d56 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   24d54:	2300      	movs	r3, #0
	}
}
   24d56:	0018      	movs	r0, r3
   24d58:	46bd      	mov	sp, r7
   24d5a:	b004      	add	sp, #16
   24d5c:	bd80      	pop	{r7, pc}
   24d5e:	46c0      	nop			; (mov r8, r8)
   24d60:	40001800 	.word	0x40001800

00024d64 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   24d64:	b580      	push	{r7, lr}
   24d66:	b084      	sub	sp, #16
   24d68:	af00      	add	r7, sp, #0
   24d6a:	0002      	movs	r2, r0
   24d6c:	1dfb      	adds	r3, r7, #7
   24d6e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   24d70:	1dfb      	adds	r3, r7, #7
   24d72:	781b      	ldrb	r3, [r3, #0]
   24d74:	0018      	movs	r0, r3
   24d76:	4b0b      	ldr	r3, [pc, #44]	; (24da4 <extint_chan_is_detected+0x40>)
   24d78:	4798      	blx	r3
   24d7a:	0003      	movs	r3, r0
   24d7c:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   24d7e:	1dfb      	adds	r3, r7, #7
   24d80:	781b      	ldrb	r3, [r3, #0]
   24d82:	221f      	movs	r2, #31
   24d84:	4013      	ands	r3, r2
   24d86:	2201      	movs	r2, #1
   24d88:	409a      	lsls	r2, r3
   24d8a:	0013      	movs	r3, r2
   24d8c:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   24d8e:	68fb      	ldr	r3, [r7, #12]
   24d90:	691b      	ldr	r3, [r3, #16]
   24d92:	68ba      	ldr	r2, [r7, #8]
   24d94:	4013      	ands	r3, r2
   24d96:	1e5a      	subs	r2, r3, #1
   24d98:	4193      	sbcs	r3, r2
   24d9a:	b2db      	uxtb	r3, r3
}
   24d9c:	0018      	movs	r0, r3
   24d9e:	46bd      	mov	sp, r7
   24da0:	b004      	add	sp, #16
   24da2:	bd80      	pop	{r7, pc}
   24da4:	00024d19 	.word	0x00024d19

00024da8 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   24da8:	b580      	push	{r7, lr}
   24daa:	b084      	sub	sp, #16
   24dac:	af00      	add	r7, sp, #0
   24dae:	0002      	movs	r2, r0
   24db0:	1dfb      	adds	r3, r7, #7
   24db2:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   24db4:	1dfb      	adds	r3, r7, #7
   24db6:	781b      	ldrb	r3, [r3, #0]
   24db8:	0018      	movs	r0, r3
   24dba:	4b09      	ldr	r3, [pc, #36]	; (24de0 <extint_chan_clear_detected+0x38>)
   24dbc:	4798      	blx	r3
   24dbe:	0003      	movs	r3, r0
   24dc0:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   24dc2:	1dfb      	adds	r3, r7, #7
   24dc4:	781b      	ldrb	r3, [r3, #0]
   24dc6:	221f      	movs	r2, #31
   24dc8:	4013      	ands	r3, r2
   24dca:	2201      	movs	r2, #1
   24dcc:	409a      	lsls	r2, r3
   24dce:	0013      	movs	r3, r2
   24dd0:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   24dd2:	68fb      	ldr	r3, [r7, #12]
   24dd4:	68ba      	ldr	r2, [r7, #8]
   24dd6:	611a      	str	r2, [r3, #16]
}
   24dd8:	46c0      	nop			; (mov r8, r8)
   24dda:	46bd      	mov	sp, r7
   24ddc:	b004      	add	sp, #16
   24dde:	bd80      	pop	{r7, pc}
   24de0:	00024d19 	.word	0x00024d19

00024de4 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   24de4:	b580      	push	{r7, lr}
   24de6:	b082      	sub	sp, #8
   24de8:	af00      	add	r7, sp, #0
   24dea:	6078      	str	r0, [r7, #4]
   24dec:	0008      	movs	r0, r1
   24dee:	0011      	movs	r1, r2
   24df0:	1cfb      	adds	r3, r7, #3
   24df2:	1c02      	adds	r2, r0, #0
   24df4:	701a      	strb	r2, [r3, #0]
   24df6:	1cbb      	adds	r3, r7, #2
   24df8:	1c0a      	adds	r2, r1, #0
   24dfa:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   24dfc:	1cbb      	adds	r3, r7, #2
   24dfe:	781b      	ldrb	r3, [r3, #0]
   24e00:	2b00      	cmp	r3, #0
   24e02:	d001      	beq.n	24e08 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   24e04:	2317      	movs	r3, #23
   24e06:	e019      	b.n	24e3c <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   24e08:	1cfb      	adds	r3, r7, #3
   24e0a:	781a      	ldrb	r2, [r3, #0]
   24e0c:	4b0d      	ldr	r3, [pc, #52]	; (24e44 <extint_register_callback+0x60>)
   24e0e:	0092      	lsls	r2, r2, #2
   24e10:	58d3      	ldr	r3, [r2, r3]
   24e12:	2b00      	cmp	r3, #0
   24e14:	d107      	bne.n	24e26 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   24e16:	1cfb      	adds	r3, r7, #3
   24e18:	781a      	ldrb	r2, [r3, #0]
   24e1a:	4b0a      	ldr	r3, [pc, #40]	; (24e44 <extint_register_callback+0x60>)
   24e1c:	0092      	lsls	r2, r2, #2
   24e1e:	6879      	ldr	r1, [r7, #4]
   24e20:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   24e22:	2300      	movs	r3, #0
   24e24:	e00a      	b.n	24e3c <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   24e26:	1cfb      	adds	r3, r7, #3
   24e28:	781a      	ldrb	r2, [r3, #0]
   24e2a:	4b06      	ldr	r3, [pc, #24]	; (24e44 <extint_register_callback+0x60>)
   24e2c:	0092      	lsls	r2, r2, #2
   24e2e:	58d2      	ldr	r2, [r2, r3]
   24e30:	687b      	ldr	r3, [r7, #4]
   24e32:	429a      	cmp	r2, r3
   24e34:	d101      	bne.n	24e3a <extint_register_callback+0x56>
		return STATUS_OK;
   24e36:	2300      	movs	r3, #0
   24e38:	e000      	b.n	24e3c <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   24e3a:	231d      	movs	r3, #29
}
   24e3c:	0018      	movs	r0, r3
   24e3e:	46bd      	mov	sp, r7
   24e40:	b002      	add	sp, #8
   24e42:	bd80      	pop	{r7, pc}
   24e44:	20005984 	.word	0x20005984

00024e48 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   24e48:	b580      	push	{r7, lr}
   24e4a:	b084      	sub	sp, #16
   24e4c:	af00      	add	r7, sp, #0
   24e4e:	0002      	movs	r2, r0
   24e50:	1dfb      	adds	r3, r7, #7
   24e52:	701a      	strb	r2, [r3, #0]
   24e54:	1dbb      	adds	r3, r7, #6
   24e56:	1c0a      	adds	r2, r1, #0
   24e58:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   24e5a:	1dbb      	adds	r3, r7, #6
   24e5c:	781b      	ldrb	r3, [r3, #0]
   24e5e:	2b00      	cmp	r3, #0
   24e60:	d10e      	bne.n	24e80 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   24e62:	1dfb      	adds	r3, r7, #7
   24e64:	781b      	ldrb	r3, [r3, #0]
   24e66:	0018      	movs	r0, r3
   24e68:	4b08      	ldr	r3, [pc, #32]	; (24e8c <extint_chan_enable_callback+0x44>)
   24e6a:	4798      	blx	r3
   24e6c:	0003      	movs	r3, r0
   24e6e:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   24e70:	1dfb      	adds	r3, r7, #7
   24e72:	781b      	ldrb	r3, [r3, #0]
   24e74:	2201      	movs	r2, #1
   24e76:	409a      	lsls	r2, r3
   24e78:	68fb      	ldr	r3, [r7, #12]
   24e7a:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   24e7c:	2300      	movs	r3, #0
   24e7e:	e000      	b.n	24e82 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   24e80:	2317      	movs	r3, #23
}
   24e82:	0018      	movs	r0, r3
   24e84:	46bd      	mov	sp, r7
   24e86:	b004      	add	sp, #16
   24e88:	bd80      	pop	{r7, pc}
   24e8a:	46c0      	nop			; (mov r8, r8)
   24e8c:	00024d19 	.word	0x00024d19

00024e90 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   24e90:	b580      	push	{r7, lr}
   24e92:	b084      	sub	sp, #16
   24e94:	af00      	add	r7, sp, #0
   24e96:	0002      	movs	r2, r0
   24e98:	1dfb      	adds	r3, r7, #7
   24e9a:	701a      	strb	r2, [r3, #0]
   24e9c:	1dbb      	adds	r3, r7, #6
   24e9e:	1c0a      	adds	r2, r1, #0
   24ea0:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   24ea2:	1dbb      	adds	r3, r7, #6
   24ea4:	781b      	ldrb	r3, [r3, #0]
   24ea6:	2b00      	cmp	r3, #0
   24ea8:	d10e      	bne.n	24ec8 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   24eaa:	1dfb      	adds	r3, r7, #7
   24eac:	781b      	ldrb	r3, [r3, #0]
   24eae:	0018      	movs	r0, r3
   24eb0:	4b08      	ldr	r3, [pc, #32]	; (24ed4 <extint_chan_disable_callback+0x44>)
   24eb2:	4798      	blx	r3
   24eb4:	0003      	movs	r3, r0
   24eb6:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   24eb8:	1dfb      	adds	r3, r7, #7
   24eba:	781b      	ldrb	r3, [r3, #0]
   24ebc:	2201      	movs	r2, #1
   24ebe:	409a      	lsls	r2, r3
   24ec0:	68fb      	ldr	r3, [r7, #12]
   24ec2:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   24ec4:	2300      	movs	r3, #0
   24ec6:	e000      	b.n	24eca <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   24ec8:	2317      	movs	r3, #23
}
   24eca:	0018      	movs	r0, r3
   24ecc:	46bd      	mov	sp, r7
   24ece:	b004      	add	sp, #16
   24ed0:	bd80      	pop	{r7, pc}
   24ed2:	46c0      	nop			; (mov r8, r8)
   24ed4:	00024d19 	.word	0x00024d19

00024ed8 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   24ed8:	b580      	push	{r7, lr}
   24eda:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   24edc:	4b15      	ldr	r3, [pc, #84]	; (24f34 <EIC_Handler+0x5c>)
   24ede:	2200      	movs	r2, #0
   24ee0:	701a      	strb	r2, [r3, #0]
   24ee2:	e020      	b.n	24f26 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   24ee4:	4b13      	ldr	r3, [pc, #76]	; (24f34 <EIC_Handler+0x5c>)
   24ee6:	781b      	ldrb	r3, [r3, #0]
   24ee8:	0018      	movs	r0, r3
   24eea:	4b13      	ldr	r3, [pc, #76]	; (24f38 <EIC_Handler+0x60>)
   24eec:	4798      	blx	r3
   24eee:	1e03      	subs	r3, r0, #0
   24ef0:	d013      	beq.n	24f1a <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   24ef2:	4b10      	ldr	r3, [pc, #64]	; (24f34 <EIC_Handler+0x5c>)
   24ef4:	781b      	ldrb	r3, [r3, #0]
   24ef6:	0018      	movs	r0, r3
   24ef8:	4b10      	ldr	r3, [pc, #64]	; (24f3c <EIC_Handler+0x64>)
   24efa:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   24efc:	4b0d      	ldr	r3, [pc, #52]	; (24f34 <EIC_Handler+0x5c>)
   24efe:	781b      	ldrb	r3, [r3, #0]
   24f00:	001a      	movs	r2, r3
   24f02:	4b0f      	ldr	r3, [pc, #60]	; (24f40 <EIC_Handler+0x68>)
   24f04:	0092      	lsls	r2, r2, #2
   24f06:	58d3      	ldr	r3, [r2, r3]
   24f08:	2b00      	cmp	r3, #0
   24f0a:	d006      	beq.n	24f1a <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   24f0c:	4b09      	ldr	r3, [pc, #36]	; (24f34 <EIC_Handler+0x5c>)
   24f0e:	781b      	ldrb	r3, [r3, #0]
   24f10:	001a      	movs	r2, r3
   24f12:	4b0b      	ldr	r3, [pc, #44]	; (24f40 <EIC_Handler+0x68>)
   24f14:	0092      	lsls	r2, r2, #2
   24f16:	58d3      	ldr	r3, [r2, r3]
   24f18:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   24f1a:	4b06      	ldr	r3, [pc, #24]	; (24f34 <EIC_Handler+0x5c>)
   24f1c:	781b      	ldrb	r3, [r3, #0]
   24f1e:	3301      	adds	r3, #1
   24f20:	b2da      	uxtb	r2, r3
   24f22:	4b04      	ldr	r3, [pc, #16]	; (24f34 <EIC_Handler+0x5c>)
   24f24:	701a      	strb	r2, [r3, #0]
   24f26:	4b03      	ldr	r3, [pc, #12]	; (24f34 <EIC_Handler+0x5c>)
   24f28:	781b      	ldrb	r3, [r3, #0]
   24f2a:	2b0f      	cmp	r3, #15
   24f2c:	d9da      	bls.n	24ee4 <EIC_Handler+0xc>
			}
		}
	}
}
   24f2e:	46c0      	nop			; (mov r8, r8)
   24f30:	46bd      	mov	sp, r7
   24f32:	bd80      	pop	{r7, pc}
   24f34:	20005980 	.word	0x20005980
   24f38:	00024d65 	.word	0x00024d65
   24f3c:	00024da9 	.word	0x00024da9
   24f40:	20005984 	.word	0x20005984

00024f44 <system_gclk_chan_get_config_defaults>:
{
   24f44:	b580      	push	{r7, lr}
   24f46:	b082      	sub	sp, #8
   24f48:	af00      	add	r7, sp, #0
   24f4a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   24f4c:	687b      	ldr	r3, [r7, #4]
   24f4e:	2200      	movs	r2, #0
   24f50:	701a      	strb	r2, [r3, #0]
}
   24f52:	46c0      	nop			; (mov r8, r8)
   24f54:	46bd      	mov	sp, r7
   24f56:	b002      	add	sp, #8
   24f58:	bd80      	pop	{r7, pc}
	...

00024f5c <system_apb_clock_set_mask>:
{
   24f5c:	b580      	push	{r7, lr}
   24f5e:	b082      	sub	sp, #8
   24f60:	af00      	add	r7, sp, #0
   24f62:	0002      	movs	r2, r0
   24f64:	6039      	str	r1, [r7, #0]
   24f66:	1dfb      	adds	r3, r7, #7
   24f68:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   24f6a:	1dfb      	adds	r3, r7, #7
   24f6c:	781b      	ldrb	r3, [r3, #0]
   24f6e:	2b01      	cmp	r3, #1
   24f70:	d00a      	beq.n	24f88 <system_apb_clock_set_mask+0x2c>
   24f72:	2b02      	cmp	r3, #2
   24f74:	d00f      	beq.n	24f96 <system_apb_clock_set_mask+0x3a>
   24f76:	2b00      	cmp	r3, #0
   24f78:	d114      	bne.n	24fa4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   24f7a:	4b0e      	ldr	r3, [pc, #56]	; (24fb4 <system_apb_clock_set_mask+0x58>)
   24f7c:	4a0d      	ldr	r2, [pc, #52]	; (24fb4 <system_apb_clock_set_mask+0x58>)
   24f7e:	6991      	ldr	r1, [r2, #24]
   24f80:	683a      	ldr	r2, [r7, #0]
   24f82:	430a      	orrs	r2, r1
   24f84:	619a      	str	r2, [r3, #24]
			break;
   24f86:	e00f      	b.n	24fa8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   24f88:	4b0a      	ldr	r3, [pc, #40]	; (24fb4 <system_apb_clock_set_mask+0x58>)
   24f8a:	4a0a      	ldr	r2, [pc, #40]	; (24fb4 <system_apb_clock_set_mask+0x58>)
   24f8c:	69d1      	ldr	r1, [r2, #28]
   24f8e:	683a      	ldr	r2, [r7, #0]
   24f90:	430a      	orrs	r2, r1
   24f92:	61da      	str	r2, [r3, #28]
			break;
   24f94:	e008      	b.n	24fa8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   24f96:	4b07      	ldr	r3, [pc, #28]	; (24fb4 <system_apb_clock_set_mask+0x58>)
   24f98:	4a06      	ldr	r2, [pc, #24]	; (24fb4 <system_apb_clock_set_mask+0x58>)
   24f9a:	6a11      	ldr	r1, [r2, #32]
   24f9c:	683a      	ldr	r2, [r7, #0]
   24f9e:	430a      	orrs	r2, r1
   24fa0:	621a      	str	r2, [r3, #32]
			break;
   24fa2:	e001      	b.n	24fa8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   24fa4:	2317      	movs	r3, #23
   24fa6:	e000      	b.n	24faa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   24fa8:	2300      	movs	r3, #0
}
   24faa:	0018      	movs	r0, r3
   24fac:	46bd      	mov	sp, r7
   24fae:	b002      	add	sp, #8
   24fb0:	bd80      	pop	{r7, pc}
   24fb2:	46c0      	nop			; (mov r8, r8)
   24fb4:	40000400 	.word	0x40000400

00024fb8 <system_pinmux_get_config_defaults>:
{
   24fb8:	b580      	push	{r7, lr}
   24fba:	b082      	sub	sp, #8
   24fbc:	af00      	add	r7, sp, #0
   24fbe:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   24fc0:	687b      	ldr	r3, [r7, #4]
   24fc2:	2280      	movs	r2, #128	; 0x80
   24fc4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   24fc6:	687b      	ldr	r3, [r7, #4]
   24fc8:	2200      	movs	r2, #0
   24fca:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   24fcc:	687b      	ldr	r3, [r7, #4]
   24fce:	2201      	movs	r2, #1
   24fd0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   24fd2:	687b      	ldr	r3, [r7, #4]
   24fd4:	2200      	movs	r2, #0
   24fd6:	70da      	strb	r2, [r3, #3]
}
   24fd8:	46c0      	nop			; (mov r8, r8)
   24fda:	46bd      	mov	sp, r7
   24fdc:	b002      	add	sp, #8
   24fde:	bd80      	pop	{r7, pc}

00024fe0 <system_interrupt_enable>:
{
   24fe0:	b580      	push	{r7, lr}
   24fe2:	b082      	sub	sp, #8
   24fe4:	af00      	add	r7, sp, #0
   24fe6:	0002      	movs	r2, r0
   24fe8:	1dfb      	adds	r3, r7, #7
   24fea:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   24fec:	4b06      	ldr	r3, [pc, #24]	; (25008 <system_interrupt_enable+0x28>)
   24fee:	1dfa      	adds	r2, r7, #7
   24ff0:	7812      	ldrb	r2, [r2, #0]
   24ff2:	0011      	movs	r1, r2
   24ff4:	221f      	movs	r2, #31
   24ff6:	400a      	ands	r2, r1
   24ff8:	2101      	movs	r1, #1
   24ffa:	4091      	lsls	r1, r2
   24ffc:	000a      	movs	r2, r1
   24ffe:	601a      	str	r2, [r3, #0]
}
   25000:	46c0      	nop			; (mov r8, r8)
   25002:	46bd      	mov	sp, r7
   25004:	b002      	add	sp, #8
   25006:	bd80      	pop	{r7, pc}
   25008:	e000e100 	.word	0xe000e100

0002500c <_extint_get_eic_from_channel>:
{
   2500c:	b580      	push	{r7, lr}
   2500e:	b084      	sub	sp, #16
   25010:	af00      	add	r7, sp, #0
   25012:	0002      	movs	r2, r0
   25014:	1dfb      	adds	r3, r7, #7
   25016:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   25018:	230f      	movs	r3, #15
   2501a:	18fb      	adds	r3, r7, r3
   2501c:	1dfa      	adds	r2, r7, #7
   2501e:	7812      	ldrb	r2, [r2, #0]
   25020:	0952      	lsrs	r2, r2, #5
   25022:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   25024:	230f      	movs	r3, #15
   25026:	18fb      	adds	r3, r7, r3
   25028:	781b      	ldrb	r3, [r3, #0]
   2502a:	2b00      	cmp	r3, #0
   2502c:	d10c      	bne.n	25048 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2502e:	4b09      	ldr	r3, [pc, #36]	; (25054 <_extint_get_eic_from_channel+0x48>)
   25030:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   25032:	230f      	movs	r3, #15
   25034:	18fb      	adds	r3, r7, r3
   25036:	781b      	ldrb	r3, [r3, #0]
   25038:	009b      	lsls	r3, r3, #2
   2503a:	2210      	movs	r2, #16
   2503c:	4694      	mov	ip, r2
   2503e:	44bc      	add	ip, r7
   25040:	4463      	add	r3, ip
   25042:	3b08      	subs	r3, #8
   25044:	681b      	ldr	r3, [r3, #0]
   25046:	e000      	b.n	2504a <_extint_get_eic_from_channel+0x3e>
		return NULL;
   25048:	2300      	movs	r3, #0
}
   2504a:	0018      	movs	r0, r3
   2504c:	46bd      	mov	sp, r7
   2504e:	b004      	add	sp, #16
   25050:	bd80      	pop	{r7, pc}
   25052:	46c0      	nop			; (mov r8, r8)
   25054:	40001800 	.word	0x40001800

00025058 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   25058:	b580      	push	{r7, lr}
   2505a:	b082      	sub	sp, #8
   2505c:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2505e:	4b0f      	ldr	r3, [pc, #60]	; (2509c <extint_is_syncing+0x44>)
   25060:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25062:	2300      	movs	r3, #0
   25064:	607b      	str	r3, [r7, #4]
   25066:	e011      	b.n	2508c <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   25068:	687b      	ldr	r3, [r7, #4]
   2506a:	009b      	lsls	r3, r3, #2
   2506c:	2208      	movs	r2, #8
   2506e:	4694      	mov	ip, r2
   25070:	44bc      	add	ip, r7
   25072:	4463      	add	r3, ip
   25074:	3b08      	subs	r3, #8
   25076:	681b      	ldr	r3, [r3, #0]
   25078:	785b      	ldrb	r3, [r3, #1]
   2507a:	b2db      	uxtb	r3, r3
   2507c:	b25b      	sxtb	r3, r3
   2507e:	2b00      	cmp	r3, #0
   25080:	da01      	bge.n	25086 <extint_is_syncing+0x2e>
			return true;
   25082:	2301      	movs	r3, #1
   25084:	e006      	b.n	25094 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25086:	687b      	ldr	r3, [r7, #4]
   25088:	3301      	adds	r3, #1
   2508a:	607b      	str	r3, [r7, #4]
   2508c:	687b      	ldr	r3, [r7, #4]
   2508e:	2b00      	cmp	r3, #0
   25090:	d0ea      	beq.n	25068 <extint_is_syncing+0x10>
		}
	}
	return false;
   25092:	2300      	movs	r3, #0
}
   25094:	0018      	movs	r0, r3
   25096:	46bd      	mov	sp, r7
   25098:	b002      	add	sp, #8
   2509a:	bd80      	pop	{r7, pc}
   2509c:	40001800 	.word	0x40001800

000250a0 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   250a0:	b580      	push	{r7, lr}
   250a2:	b084      	sub	sp, #16
   250a4:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   250a6:	4b2d      	ldr	r3, [pc, #180]	; (2515c <_system_extint_init+0xbc>)
   250a8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   250aa:	2140      	movs	r1, #64	; 0x40
   250ac:	2000      	movs	r0, #0
   250ae:	4b2c      	ldr	r3, [pc, #176]	; (25160 <_system_extint_init+0xc0>)
   250b0:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   250b2:	003b      	movs	r3, r7
   250b4:	0018      	movs	r0, r3
   250b6:	4b2b      	ldr	r3, [pc, #172]	; (25164 <_system_extint_init+0xc4>)
   250b8:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   250ba:	003b      	movs	r3, r7
   250bc:	2200      	movs	r2, #0
   250be:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   250c0:	003b      	movs	r3, r7
   250c2:	0019      	movs	r1, r3
   250c4:	2005      	movs	r0, #5
   250c6:	4b28      	ldr	r3, [pc, #160]	; (25168 <_system_extint_init+0xc8>)
   250c8:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   250ca:	2005      	movs	r0, #5
   250cc:	4b27      	ldr	r3, [pc, #156]	; (2516c <_system_extint_init+0xcc>)
   250ce:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   250d0:	2300      	movs	r3, #0
   250d2:	60fb      	str	r3, [r7, #12]
   250d4:	e018      	b.n	25108 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   250d6:	68fb      	ldr	r3, [r7, #12]
   250d8:	009b      	lsls	r3, r3, #2
   250da:	2210      	movs	r2, #16
   250dc:	4694      	mov	ip, r2
   250de:	44bc      	add	ip, r7
   250e0:	4463      	add	r3, ip
   250e2:	3b0c      	subs	r3, #12
   250e4:	681a      	ldr	r2, [r3, #0]
   250e6:	68fb      	ldr	r3, [r7, #12]
   250e8:	009b      	lsls	r3, r3, #2
   250ea:	2110      	movs	r1, #16
   250ec:	468c      	mov	ip, r1
   250ee:	44bc      	add	ip, r7
   250f0:	4463      	add	r3, ip
   250f2:	3b0c      	subs	r3, #12
   250f4:	681b      	ldr	r3, [r3, #0]
   250f6:	781b      	ldrb	r3, [r3, #0]
   250f8:	b2db      	uxtb	r3, r3
   250fa:	2101      	movs	r1, #1
   250fc:	430b      	orrs	r3, r1
   250fe:	b2db      	uxtb	r3, r3
   25100:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   25102:	68fb      	ldr	r3, [r7, #12]
   25104:	3301      	adds	r3, #1
   25106:	60fb      	str	r3, [r7, #12]
   25108:	68fb      	ldr	r3, [r7, #12]
   2510a:	2b00      	cmp	r3, #0
   2510c:	d0e3      	beq.n	250d6 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   2510e:	46c0      	nop			; (mov r8, r8)
   25110:	4b17      	ldr	r3, [pc, #92]	; (25170 <_system_extint_init+0xd0>)
   25112:	4798      	blx	r3
   25114:	1e03      	subs	r3, r0, #0
   25116:	d1fb      	bne.n	25110 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25118:	230b      	movs	r3, #11
   2511a:	18fb      	adds	r3, r7, r3
   2511c:	2200      	movs	r2, #0
   2511e:	701a      	strb	r2, [r3, #0]
   25120:	e00d      	b.n	2513e <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   25122:	230b      	movs	r3, #11
   25124:	18fb      	adds	r3, r7, r3
   25126:	781a      	ldrb	r2, [r3, #0]
   25128:	4b12      	ldr	r3, [pc, #72]	; (25174 <_system_extint_init+0xd4>)
   2512a:	0092      	lsls	r2, r2, #2
   2512c:	2100      	movs	r1, #0
   2512e:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   25130:	230b      	movs	r3, #11
   25132:	18fb      	adds	r3, r7, r3
   25134:	781a      	ldrb	r2, [r3, #0]
   25136:	230b      	movs	r3, #11
   25138:	18fb      	adds	r3, r7, r3
   2513a:	3201      	adds	r2, #1
   2513c:	701a      	strb	r2, [r3, #0]
   2513e:	230b      	movs	r3, #11
   25140:	18fb      	adds	r3, r7, r3
   25142:	781b      	ldrb	r3, [r3, #0]
   25144:	2b0f      	cmp	r3, #15
   25146:	d9ec      	bls.n	25122 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   25148:	2004      	movs	r0, #4
   2514a:	4b0b      	ldr	r3, [pc, #44]	; (25178 <_system_extint_init+0xd8>)
   2514c:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2514e:	4b0b      	ldr	r3, [pc, #44]	; (2517c <_system_extint_init+0xdc>)
   25150:	4798      	blx	r3
}
   25152:	46c0      	nop			; (mov r8, r8)
   25154:	46bd      	mov	sp, r7
   25156:	b004      	add	sp, #16
   25158:	bd80      	pop	{r7, pc}
   2515a:	46c0      	nop			; (mov r8, r8)
   2515c:	40001800 	.word	0x40001800
   25160:	00024f5d 	.word	0x00024f5d
   25164:	00024f45 	.word	0x00024f45
   25168:	000287cd 	.word	0x000287cd
   2516c:	00028811 	.word	0x00028811
   25170:	00025059 	.word	0x00025059
   25174:	20005984 	.word	0x20005984
   25178:	00024fe1 	.word	0x00024fe1
   2517c:	00025181 	.word	0x00025181

00025180 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   25180:	b580      	push	{r7, lr}
   25182:	b082      	sub	sp, #8
   25184:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   25186:	4b15      	ldr	r3, [pc, #84]	; (251dc <_extint_enable+0x5c>)
   25188:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2518a:	2300      	movs	r3, #0
   2518c:	607b      	str	r3, [r7, #4]
   2518e:	e018      	b.n	251c2 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   25190:	687b      	ldr	r3, [r7, #4]
   25192:	009b      	lsls	r3, r3, #2
   25194:	2208      	movs	r2, #8
   25196:	4694      	mov	ip, r2
   25198:	44bc      	add	ip, r7
   2519a:	4463      	add	r3, ip
   2519c:	3b08      	subs	r3, #8
   2519e:	681a      	ldr	r2, [r3, #0]
   251a0:	687b      	ldr	r3, [r7, #4]
   251a2:	009b      	lsls	r3, r3, #2
   251a4:	2108      	movs	r1, #8
   251a6:	468c      	mov	ip, r1
   251a8:	44bc      	add	ip, r7
   251aa:	4463      	add	r3, ip
   251ac:	3b08      	subs	r3, #8
   251ae:	681b      	ldr	r3, [r3, #0]
   251b0:	781b      	ldrb	r3, [r3, #0]
   251b2:	b2db      	uxtb	r3, r3
   251b4:	2102      	movs	r1, #2
   251b6:	430b      	orrs	r3, r1
   251b8:	b2db      	uxtb	r3, r3
   251ba:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   251bc:	687b      	ldr	r3, [r7, #4]
   251be:	3301      	adds	r3, #1
   251c0:	607b      	str	r3, [r7, #4]
   251c2:	687b      	ldr	r3, [r7, #4]
   251c4:	2b00      	cmp	r3, #0
   251c6:	d0e3      	beq.n	25190 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   251c8:	46c0      	nop			; (mov r8, r8)
   251ca:	4b05      	ldr	r3, [pc, #20]	; (251e0 <_extint_enable+0x60>)
   251cc:	4798      	blx	r3
   251ce:	1e03      	subs	r3, r0, #0
   251d0:	d1fb      	bne.n	251ca <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   251d2:	46c0      	nop			; (mov r8, r8)
   251d4:	46bd      	mov	sp, r7
   251d6:	b002      	add	sp, #8
   251d8:	bd80      	pop	{r7, pc}
   251da:	46c0      	nop			; (mov r8, r8)
   251dc:	40001800 	.word	0x40001800
   251e0:	00025059 	.word	0x00025059

000251e4 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   251e4:	b580      	push	{r7, lr}
   251e6:	b082      	sub	sp, #8
   251e8:	af00      	add	r7, sp, #0
   251ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   251ec:	687b      	ldr	r3, [r7, #4]
   251ee:	2200      	movs	r2, #0
   251f0:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   251f2:	687b      	ldr	r3, [r7, #4]
   251f4:	2200      	movs	r2, #0
   251f6:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   251f8:	687b      	ldr	r3, [r7, #4]
   251fa:	2201      	movs	r2, #1
   251fc:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   251fe:	687b      	ldr	r3, [r7, #4]
   25200:	2201      	movs	r2, #1
   25202:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   25204:	687b      	ldr	r3, [r7, #4]
   25206:	2200      	movs	r2, #0
   25208:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   2520a:	687b      	ldr	r3, [r7, #4]
   2520c:	2202      	movs	r2, #2
   2520e:	72da      	strb	r2, [r3, #11]
}
   25210:	46c0      	nop			; (mov r8, r8)
   25212:	46bd      	mov	sp, r7
   25214:	b002      	add	sp, #8
   25216:	bd80      	pop	{r7, pc}

00025218 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   25218:	b580      	push	{r7, lr}
   2521a:	b086      	sub	sp, #24
   2521c:	af00      	add	r7, sp, #0
   2521e:	0002      	movs	r2, r0
   25220:	6039      	str	r1, [r7, #0]
   25222:	1dfb      	adds	r3, r7, #7
   25224:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   25226:	2308      	movs	r3, #8
   25228:	18fb      	adds	r3, r7, r3
   2522a:	0018      	movs	r0, r3
   2522c:	4b36      	ldr	r3, [pc, #216]	; (25308 <extint_chan_set_config+0xf0>)
   2522e:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   25230:	683b      	ldr	r3, [r7, #0]
   25232:	685b      	ldr	r3, [r3, #4]
   25234:	b2da      	uxtb	r2, r3
   25236:	2308      	movs	r3, #8
   25238:	18fb      	adds	r3, r7, r3
   2523a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2523c:	2308      	movs	r3, #8
   2523e:	18fb      	adds	r3, r7, r3
   25240:	2200      	movs	r2, #0
   25242:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   25244:	683b      	ldr	r3, [r7, #0]
   25246:	7a1a      	ldrb	r2, [r3, #8]
   25248:	2308      	movs	r3, #8
   2524a:	18fb      	adds	r3, r7, r3
   2524c:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2524e:	683b      	ldr	r3, [r7, #0]
   25250:	681b      	ldr	r3, [r3, #0]
   25252:	b2db      	uxtb	r3, r3
   25254:	2208      	movs	r2, #8
   25256:	18ba      	adds	r2, r7, r2
   25258:	0011      	movs	r1, r2
   2525a:	0018      	movs	r0, r3
   2525c:	4b2b      	ldr	r3, [pc, #172]	; (2530c <extint_chan_set_config+0xf4>)
   2525e:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   25260:	1dfb      	adds	r3, r7, #7
   25262:	781b      	ldrb	r3, [r3, #0]
   25264:	0018      	movs	r0, r3
   25266:	4b2a      	ldr	r3, [pc, #168]	; (25310 <extint_chan_set_config+0xf8>)
   25268:	4798      	blx	r3
   2526a:	0003      	movs	r3, r0
   2526c:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2526e:	1dfb      	adds	r3, r7, #7
   25270:	781b      	ldrb	r3, [r3, #0]
   25272:	2207      	movs	r2, #7
   25274:	4013      	ands	r3, r2
   25276:	009b      	lsls	r3, r3, #2
   25278:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2527a:	683b      	ldr	r3, [r7, #0]
   2527c:	7adb      	ldrb	r3, [r3, #11]
   2527e:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   25280:	683b      	ldr	r3, [r7, #0]
   25282:	7a9b      	ldrb	r3, [r3, #10]
   25284:	2b00      	cmp	r3, #0
   25286:	d003      	beq.n	25290 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   25288:	697b      	ldr	r3, [r7, #20]
   2528a:	2208      	movs	r2, #8
   2528c:	4313      	orrs	r3, r2
   2528e:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   25290:	1dfb      	adds	r3, r7, #7
   25292:	781b      	ldrb	r3, [r3, #0]
   25294:	08db      	lsrs	r3, r3, #3
   25296:	b2db      	uxtb	r3, r3
   25298:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2529a:	1dfb      	adds	r3, r7, #7
   2529c:	781b      	ldrb	r3, [r3, #0]
   2529e:	08db      	lsrs	r3, r3, #3
   252a0:	b2db      	uxtb	r3, r3
   252a2:	001a      	movs	r2, r3
   252a4:	693b      	ldr	r3, [r7, #16]
   252a6:	3206      	adds	r2, #6
   252a8:	0092      	lsls	r2, r2, #2
   252aa:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   252ac:	210f      	movs	r1, #15
   252ae:	68fa      	ldr	r2, [r7, #12]
   252b0:	4091      	lsls	r1, r2
   252b2:	000a      	movs	r2, r1
   252b4:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   252b6:	401a      	ands	r2, r3
			(new_config << config_pos);
   252b8:	6979      	ldr	r1, [r7, #20]
   252ba:	68fb      	ldr	r3, [r7, #12]
   252bc:	4099      	lsls	r1, r3
   252be:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   252c0:	431a      	orrs	r2, r3
   252c2:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   252c4:	693b      	ldr	r3, [r7, #16]
   252c6:	1d82      	adds	r2, r0, #6
   252c8:	0092      	lsls	r2, r2, #2
   252ca:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   252cc:	683b      	ldr	r3, [r7, #0]
   252ce:	7a5b      	ldrb	r3, [r3, #9]
   252d0:	2b00      	cmp	r3, #0
   252d2:	d00a      	beq.n	252ea <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   252d4:	693b      	ldr	r3, [r7, #16]
   252d6:	695a      	ldr	r2, [r3, #20]
   252d8:	1dfb      	adds	r3, r7, #7
   252da:	781b      	ldrb	r3, [r3, #0]
   252dc:	2101      	movs	r1, #1
   252de:	4099      	lsls	r1, r3
   252e0:	000b      	movs	r3, r1
   252e2:	431a      	orrs	r2, r3
   252e4:	693b      	ldr	r3, [r7, #16]
   252e6:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   252e8:	e00a      	b.n	25300 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   252ea:	693b      	ldr	r3, [r7, #16]
   252ec:	695b      	ldr	r3, [r3, #20]
   252ee:	1dfa      	adds	r2, r7, #7
   252f0:	7812      	ldrb	r2, [r2, #0]
   252f2:	2101      	movs	r1, #1
   252f4:	4091      	lsls	r1, r2
   252f6:	000a      	movs	r2, r1
   252f8:	43d2      	mvns	r2, r2
   252fa:	401a      	ands	r2, r3
   252fc:	693b      	ldr	r3, [r7, #16]
   252fe:	615a      	str	r2, [r3, #20]
}
   25300:	46c0      	nop			; (mov r8, r8)
   25302:	46bd      	mov	sp, r7
   25304:	b006      	add	sp, #24
   25306:	bd80      	pop	{r7, pc}
   25308:	00024fb9 	.word	0x00024fb9
   2530c:	00028b2d 	.word	0x00028b2d
   25310:	0002500d 	.word	0x0002500d

00025314 <system_pinmux_get_config_defaults>:
{
   25314:	b580      	push	{r7, lr}
   25316:	b082      	sub	sp, #8
   25318:	af00      	add	r7, sp, #0
   2531a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2531c:	687b      	ldr	r3, [r7, #4]
   2531e:	2280      	movs	r2, #128	; 0x80
   25320:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   25322:	687b      	ldr	r3, [r7, #4]
   25324:	2200      	movs	r2, #0
   25326:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   25328:	687b      	ldr	r3, [r7, #4]
   2532a:	2201      	movs	r2, #1
   2532c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2532e:	687b      	ldr	r3, [r7, #4]
   25330:	2200      	movs	r2, #0
   25332:	70da      	strb	r2, [r3, #3]
}
   25334:	46c0      	nop			; (mov r8, r8)
   25336:	46bd      	mov	sp, r7
   25338:	b002      	add	sp, #8
   2533a:	bd80      	pop	{r7, pc}

0002533c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   2533c:	b580      	push	{r7, lr}
   2533e:	b084      	sub	sp, #16
   25340:	af00      	add	r7, sp, #0
   25342:	0002      	movs	r2, r0
   25344:	6039      	str	r1, [r7, #0]
   25346:	1dfb      	adds	r3, r7, #7
   25348:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   2534a:	230c      	movs	r3, #12
   2534c:	18fb      	adds	r3, r7, r3
   2534e:	0018      	movs	r0, r3
   25350:	4b10      	ldr	r3, [pc, #64]	; (25394 <port_pin_set_config+0x58>)
   25352:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   25354:	230c      	movs	r3, #12
   25356:	18fb      	adds	r3, r7, r3
   25358:	2280      	movs	r2, #128	; 0x80
   2535a:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   2535c:	683b      	ldr	r3, [r7, #0]
   2535e:	781a      	ldrb	r2, [r3, #0]
   25360:	230c      	movs	r3, #12
   25362:	18fb      	adds	r3, r7, r3
   25364:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   25366:	683b      	ldr	r3, [r7, #0]
   25368:	785a      	ldrb	r2, [r3, #1]
   2536a:	230c      	movs	r3, #12
   2536c:	18fb      	adds	r3, r7, r3
   2536e:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   25370:	683b      	ldr	r3, [r7, #0]
   25372:	789a      	ldrb	r2, [r3, #2]
   25374:	230c      	movs	r3, #12
   25376:	18fb      	adds	r3, r7, r3
   25378:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2537a:	230c      	movs	r3, #12
   2537c:	18fa      	adds	r2, r7, r3
   2537e:	1dfb      	adds	r3, r7, #7
   25380:	781b      	ldrb	r3, [r3, #0]
   25382:	0011      	movs	r1, r2
   25384:	0018      	movs	r0, r3
   25386:	4b04      	ldr	r3, [pc, #16]	; (25398 <port_pin_set_config+0x5c>)
   25388:	4798      	blx	r3
}
   2538a:	46c0      	nop			; (mov r8, r8)
   2538c:	46bd      	mov	sp, r7
   2538e:	b004      	add	sp, #16
   25390:	bd80      	pop	{r7, pc}
   25392:	46c0      	nop			; (mov r8, r8)
   25394:	00025315 	.word	0x00025315
   25398:	00028b2d 	.word	0x00028b2d

0002539c <system_gclk_chan_get_config_defaults>:
{
   2539c:	b580      	push	{r7, lr}
   2539e:	b082      	sub	sp, #8
   253a0:	af00      	add	r7, sp, #0
   253a2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   253a4:	687b      	ldr	r3, [r7, #4]
   253a6:	2200      	movs	r2, #0
   253a8:	701a      	strb	r2, [r3, #0]
}
   253aa:	46c0      	nop			; (mov r8, r8)
   253ac:	46bd      	mov	sp, r7
   253ae:	b002      	add	sp, #8
   253b0:	bd80      	pop	{r7, pc}
	...

000253b4 <system_apb_clock_set_mask>:
{
   253b4:	b580      	push	{r7, lr}
   253b6:	b082      	sub	sp, #8
   253b8:	af00      	add	r7, sp, #0
   253ba:	0002      	movs	r2, r0
   253bc:	6039      	str	r1, [r7, #0]
   253be:	1dfb      	adds	r3, r7, #7
   253c0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   253c2:	1dfb      	adds	r3, r7, #7
   253c4:	781b      	ldrb	r3, [r3, #0]
   253c6:	2b01      	cmp	r3, #1
   253c8:	d00a      	beq.n	253e0 <system_apb_clock_set_mask+0x2c>
   253ca:	2b02      	cmp	r3, #2
   253cc:	d00f      	beq.n	253ee <system_apb_clock_set_mask+0x3a>
   253ce:	2b00      	cmp	r3, #0
   253d0:	d114      	bne.n	253fc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   253d2:	4b0e      	ldr	r3, [pc, #56]	; (2540c <system_apb_clock_set_mask+0x58>)
   253d4:	4a0d      	ldr	r2, [pc, #52]	; (2540c <system_apb_clock_set_mask+0x58>)
   253d6:	6991      	ldr	r1, [r2, #24]
   253d8:	683a      	ldr	r2, [r7, #0]
   253da:	430a      	orrs	r2, r1
   253dc:	619a      	str	r2, [r3, #24]
			break;
   253de:	e00f      	b.n	25400 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   253e0:	4b0a      	ldr	r3, [pc, #40]	; (2540c <system_apb_clock_set_mask+0x58>)
   253e2:	4a0a      	ldr	r2, [pc, #40]	; (2540c <system_apb_clock_set_mask+0x58>)
   253e4:	69d1      	ldr	r1, [r2, #28]
   253e6:	683a      	ldr	r2, [r7, #0]
   253e8:	430a      	orrs	r2, r1
   253ea:	61da      	str	r2, [r3, #28]
			break;
   253ec:	e008      	b.n	25400 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   253ee:	4b07      	ldr	r3, [pc, #28]	; (2540c <system_apb_clock_set_mask+0x58>)
   253f0:	4a06      	ldr	r2, [pc, #24]	; (2540c <system_apb_clock_set_mask+0x58>)
   253f2:	6a11      	ldr	r1, [r2, #32]
   253f4:	683a      	ldr	r2, [r7, #0]
   253f6:	430a      	orrs	r2, r1
   253f8:	621a      	str	r2, [r3, #32]
			break;
   253fa:	e001      	b.n	25400 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   253fc:	2317      	movs	r3, #23
   253fe:	e000      	b.n	25402 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   25400:	2300      	movs	r3, #0
}
   25402:	0018      	movs	r0, r3
   25404:	46bd      	mov	sp, r7
   25406:	b002      	add	sp, #8
   25408:	bd80      	pop	{r7, pc}
   2540a:	46c0      	nop			; (mov r8, r8)
   2540c:	40000400 	.word	0x40000400

00025410 <system_interrupt_enable>:
{
   25410:	b580      	push	{r7, lr}
   25412:	b082      	sub	sp, #8
   25414:	af00      	add	r7, sp, #0
   25416:	0002      	movs	r2, r0
   25418:	1dfb      	adds	r3, r7, #7
   2541a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2541c:	4b06      	ldr	r3, [pc, #24]	; (25438 <system_interrupt_enable+0x28>)
   2541e:	1dfa      	adds	r2, r7, #7
   25420:	7812      	ldrb	r2, [r2, #0]
   25422:	0011      	movs	r1, r2
   25424:	221f      	movs	r2, #31
   25426:	400a      	ands	r2, r1
   25428:	2101      	movs	r1, #1
   2542a:	4091      	lsls	r1, r2
   2542c:	000a      	movs	r2, r1
   2542e:	601a      	str	r2, [r3, #0]
}
   25430:	46c0      	nop			; (mov r8, r8)
   25432:	46bd      	mov	sp, r7
   25434:	b002      	add	sp, #8
   25436:	bd80      	pop	{r7, pc}
   25438:	e000e100 	.word	0xe000e100

0002543c <system_interrupt_disable>:
{
   2543c:	b580      	push	{r7, lr}
   2543e:	b082      	sub	sp, #8
   25440:	af00      	add	r7, sp, #0
   25442:	0002      	movs	r2, r0
   25444:	1dfb      	adds	r3, r7, #7
   25446:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   25448:	4a07      	ldr	r2, [pc, #28]	; (25468 <system_interrupt_disable+0x2c>)
   2544a:	1dfb      	adds	r3, r7, #7
   2544c:	781b      	ldrb	r3, [r3, #0]
   2544e:	0019      	movs	r1, r3
   25450:	231f      	movs	r3, #31
   25452:	400b      	ands	r3, r1
   25454:	2101      	movs	r1, #1
   25456:	4099      	lsls	r1, r3
   25458:	000b      	movs	r3, r1
   2545a:	0019      	movs	r1, r3
   2545c:	2380      	movs	r3, #128	; 0x80
   2545e:	50d1      	str	r1, [r2, r3]
}
   25460:	46c0      	nop			; (mov r8, r8)
   25462:	46bd      	mov	sp, r7
   25464:	b002      	add	sp, #8
   25466:	bd80      	pop	{r7, pc}
   25468:	e000e100 	.word	0xe000e100

0002546c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   2546c:	b580      	push	{r7, lr}
   2546e:	b084      	sub	sp, #16
   25470:	af00      	add	r7, sp, #0
   25472:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25474:	687b      	ldr	r3, [r7, #4]
   25476:	681b      	ldr	r3, [r3, #0]
   25478:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2547a:	68fb      	ldr	r3, [r7, #12]
   2547c:	7a9b      	ldrb	r3, [r3, #10]
   2547e:	b2db      	uxtb	r3, r3
   25480:	b25b      	sxtb	r3, r3
   25482:	2b00      	cmp	r3, #0
   25484:	da01      	bge.n	2548a <rtc_calendar_is_syncing+0x1e>
                return true;
   25486:	2301      	movs	r3, #1
   25488:	e000      	b.n	2548c <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2548a:	2300      	movs	r3, #0
}
   2548c:	0018      	movs	r0, r3
   2548e:	46bd      	mov	sp, r7
   25490:	b004      	add	sp, #16
   25492:	bd80      	pop	{r7, pc}

00025494 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   25494:	b580      	push	{r7, lr}
   25496:	b084      	sub	sp, #16
   25498:	af00      	add	r7, sp, #0
   2549a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2549c:	687b      	ldr	r3, [r7, #4]
   2549e:	681b      	ldr	r3, [r3, #0]
   254a0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   254a2:	2003      	movs	r0, #3
   254a4:	4b0a      	ldr	r3, [pc, #40]	; (254d0 <rtc_calendar_enable+0x3c>)
   254a6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   254a8:	46c0      	nop			; (mov r8, r8)
   254aa:	687b      	ldr	r3, [r7, #4]
   254ac:	0018      	movs	r0, r3
   254ae:	4b09      	ldr	r3, [pc, #36]	; (254d4 <rtc_calendar_enable+0x40>)
   254b0:	4798      	blx	r3
   254b2:	1e03      	subs	r3, r0, #0
   254b4:	d1f9      	bne.n	254aa <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   254b6:	68fb      	ldr	r3, [r7, #12]
   254b8:	881b      	ldrh	r3, [r3, #0]
   254ba:	b29b      	uxth	r3, r3
   254bc:	2202      	movs	r2, #2
   254be:	4313      	orrs	r3, r2
   254c0:	b29a      	uxth	r2, r3
   254c2:	68fb      	ldr	r3, [r7, #12]
   254c4:	801a      	strh	r2, [r3, #0]
}
   254c6:	46c0      	nop			; (mov r8, r8)
   254c8:	46bd      	mov	sp, r7
   254ca:	b004      	add	sp, #16
   254cc:	bd80      	pop	{r7, pc}
   254ce:	46c0      	nop			; (mov r8, r8)
   254d0:	00025411 	.word	0x00025411
   254d4:	0002546d 	.word	0x0002546d

000254d8 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   254d8:	b580      	push	{r7, lr}
   254da:	b084      	sub	sp, #16
   254dc:	af00      	add	r7, sp, #0
   254de:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   254e0:	687b      	ldr	r3, [r7, #4]
   254e2:	681b      	ldr	r3, [r3, #0]
   254e4:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   254e6:	2003      	movs	r0, #3
   254e8:	4b0d      	ldr	r3, [pc, #52]	; (25520 <rtc_calendar_disable+0x48>)
   254ea:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   254ec:	46c0      	nop			; (mov r8, r8)
   254ee:	687b      	ldr	r3, [r7, #4]
   254f0:	0018      	movs	r0, r3
   254f2:	4b0c      	ldr	r3, [pc, #48]	; (25524 <rtc_calendar_disable+0x4c>)
   254f4:	4798      	blx	r3
   254f6:	1e03      	subs	r3, r0, #0
   254f8:	d1f9      	bne.n	254ee <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   254fa:	68fb      	ldr	r3, [r7, #12]
   254fc:	22c1      	movs	r2, #193	; 0xc1
   254fe:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   25500:	68fb      	ldr	r3, [r7, #12]
   25502:	22c1      	movs	r2, #193	; 0xc1
   25504:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   25506:	68fb      	ldr	r3, [r7, #12]
   25508:	881b      	ldrh	r3, [r3, #0]
   2550a:	b29b      	uxth	r3, r3
   2550c:	2202      	movs	r2, #2
   2550e:	4393      	bics	r3, r2
   25510:	b29a      	uxth	r2, r3
   25512:	68fb      	ldr	r3, [r7, #12]
   25514:	801a      	strh	r2, [r3, #0]
}
   25516:	46c0      	nop			; (mov r8, r8)
   25518:	46bd      	mov	sp, r7
   2551a:	b004      	add	sp, #16
   2551c:	bd80      	pop	{r7, pc}
   2551e:	46c0      	nop			; (mov r8, r8)
   25520:	0002543d 	.word	0x0002543d
   25524:	0002546d 	.word	0x0002546d

00025528 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   25528:	b580      	push	{r7, lr}
   2552a:	b084      	sub	sp, #16
   2552c:	af00      	add	r7, sp, #0
   2552e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25530:	687b      	ldr	r3, [r7, #4]
   25532:	681b      	ldr	r3, [r3, #0]
   25534:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   25536:	687b      	ldr	r3, [r7, #4]
   25538:	0018      	movs	r0, r3
   2553a:	4b0d      	ldr	r3, [pc, #52]	; (25570 <rtc_calendar_reset+0x48>)
   2553c:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   2553e:	687b      	ldr	r3, [r7, #4]
   25540:	2200      	movs	r2, #0
   25542:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   25544:	687b      	ldr	r3, [r7, #4]
   25546:	2200      	movs	r2, #0
   25548:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   2554a:	46c0      	nop			; (mov r8, r8)
   2554c:	687b      	ldr	r3, [r7, #4]
   2554e:	0018      	movs	r0, r3
   25550:	4b08      	ldr	r3, [pc, #32]	; (25574 <rtc_calendar_reset+0x4c>)
   25552:	4798      	blx	r3
   25554:	1e03      	subs	r3, r0, #0
   25556:	d1f9      	bne.n	2554c <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   25558:	68fb      	ldr	r3, [r7, #12]
   2555a:	881b      	ldrh	r3, [r3, #0]
   2555c:	b29b      	uxth	r3, r3
   2555e:	2201      	movs	r2, #1
   25560:	4313      	orrs	r3, r2
   25562:	b29a      	uxth	r2, r3
   25564:	68fb      	ldr	r3, [r7, #12]
   25566:	801a      	strh	r2, [r3, #0]
}
   25568:	46c0      	nop			; (mov r8, r8)
   2556a:	46bd      	mov	sp, r7
   2556c:	b004      	add	sp, #16
   2556e:	bd80      	pop	{r7, pc}
   25570:	000254d9 	.word	0x000254d9
   25574:	0002546d 	.word	0x0002546d

00025578 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   25578:	b580      	push	{r7, lr}
   2557a:	b084      	sub	sp, #16
   2557c:	af00      	add	r7, sp, #0
   2557e:	6078      	str	r0, [r7, #4]
   25580:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   25582:	683b      	ldr	r3, [r7, #0]
   25584:	88db      	ldrh	r3, [r3, #6]
   25586:	001a      	movs	r2, r3
   25588:	687b      	ldr	r3, [r7, #4]
   2558a:	88db      	ldrh	r3, [r3, #6]
   2558c:	1ad3      	subs	r3, r2, r3
   2558e:	069b      	lsls	r3, r3, #26
   25590:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   25592:	683b      	ldr	r3, [r7, #0]
   25594:	795b      	ldrb	r3, [r3, #5]
   25596:	059b      	lsls	r3, r3, #22
   25598:	001a      	movs	r2, r3
   2559a:	68fb      	ldr	r3, [r7, #12]
   2559c:	4313      	orrs	r3, r2
   2559e:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   255a0:	683b      	ldr	r3, [r7, #0]
   255a2:	791b      	ldrb	r3, [r3, #4]
   255a4:	045b      	lsls	r3, r3, #17
   255a6:	001a      	movs	r2, r3
   255a8:	68fb      	ldr	r3, [r7, #12]
   255aa:	4313      	orrs	r3, r2
   255ac:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   255ae:	683b      	ldr	r3, [r7, #0]
   255b0:	789b      	ldrb	r3, [r3, #2]
   255b2:	031b      	lsls	r3, r3, #12
   255b4:	001a      	movs	r2, r3
   255b6:	68fb      	ldr	r3, [r7, #12]
   255b8:	4313      	orrs	r3, r2
   255ba:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   255bc:	687b      	ldr	r3, [r7, #4]
   255be:	791b      	ldrb	r3, [r3, #4]
   255c0:	2201      	movs	r2, #1
   255c2:	4053      	eors	r3, r2
   255c4:	b2db      	uxtb	r3, r3
   255c6:	2b00      	cmp	r3, #0
   255c8:	d008      	beq.n	255dc <rtc_calendar_time_to_register_value+0x64>
   255ca:	683b      	ldr	r3, [r7, #0]
   255cc:	78db      	ldrb	r3, [r3, #3]
   255ce:	2b00      	cmp	r3, #0
   255d0:	d004      	beq.n	255dc <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   255d2:	68fb      	ldr	r3, [r7, #12]
   255d4:	2280      	movs	r2, #128	; 0x80
   255d6:	0252      	lsls	r2, r2, #9
   255d8:	4313      	orrs	r3, r2
   255da:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   255dc:	683b      	ldr	r3, [r7, #0]
   255de:	785b      	ldrb	r3, [r3, #1]
   255e0:	019b      	lsls	r3, r3, #6
   255e2:	001a      	movs	r2, r3
   255e4:	68fb      	ldr	r3, [r7, #12]
   255e6:	4313      	orrs	r3, r2
   255e8:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   255ea:	683b      	ldr	r3, [r7, #0]
   255ec:	781b      	ldrb	r3, [r3, #0]
   255ee:	001a      	movs	r2, r3
   255f0:	68fb      	ldr	r3, [r7, #12]
   255f2:	4313      	orrs	r3, r2
   255f4:	60fb      	str	r3, [r7, #12]

	return register_value;
   255f6:	68fb      	ldr	r3, [r7, #12]
}
   255f8:	0018      	movs	r0, r3
   255fa:	46bd      	mov	sp, r7
   255fc:	b004      	add	sp, #16
   255fe:	bd80      	pop	{r7, pc}

00025600 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   25600:	b580      	push	{r7, lr}
   25602:	b084      	sub	sp, #16
   25604:	af00      	add	r7, sp, #0
   25606:	60f8      	str	r0, [r7, #12]
   25608:	60b9      	str	r1, [r7, #8]
   2560a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2560c:	68bb      	ldr	r3, [r7, #8]
   2560e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   25610:	b29a      	uxth	r2, r3
   25612:	68fb      	ldr	r3, [r7, #12]
   25614:	88db      	ldrh	r3, [r3, #6]
   25616:	18d3      	adds	r3, r2, r3
   25618:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   2561a:	687b      	ldr	r3, [r7, #4]
   2561c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   2561e:	68bb      	ldr	r3, [r7, #8]
   25620:	0d9b      	lsrs	r3, r3, #22
   25622:	b2db      	uxtb	r3, r3
   25624:	220f      	movs	r2, #15
   25626:	4013      	ands	r3, r2
   25628:	b2da      	uxtb	r2, r3
   2562a:	687b      	ldr	r3, [r7, #4]
   2562c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   2562e:	68bb      	ldr	r3, [r7, #8]
   25630:	0c5b      	lsrs	r3, r3, #17
   25632:	b2db      	uxtb	r3, r3
   25634:	221f      	movs	r2, #31
   25636:	4013      	ands	r3, r2
   25638:	b2da      	uxtb	r2, r3
   2563a:	687b      	ldr	r3, [r7, #4]
   2563c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   2563e:	68fb      	ldr	r3, [r7, #12]
   25640:	791b      	ldrb	r3, [r3, #4]
   25642:	2b00      	cmp	r3, #0
   25644:	d008      	beq.n	25658 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   25646:	68bb      	ldr	r3, [r7, #8]
   25648:	0b1b      	lsrs	r3, r3, #12
   2564a:	b2db      	uxtb	r3, r3
   2564c:	221f      	movs	r2, #31
   2564e:	4013      	ands	r3, r2
   25650:	b2da      	uxtb	r2, r3
   25652:	687b      	ldr	r3, [r7, #4]
   25654:	709a      	strb	r2, [r3, #2]
   25656:	e010      	b.n	2567a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   25658:	68bb      	ldr	r3, [r7, #8]
   2565a:	0b1b      	lsrs	r3, r3, #12
   2565c:	b2db      	uxtb	r3, r3
   2565e:	220f      	movs	r2, #15
   25660:	4013      	ands	r3, r2
   25662:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   25664:	687b      	ldr	r3, [r7, #4]
   25666:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   25668:	68ba      	ldr	r2, [r7, #8]
   2566a:	2380      	movs	r3, #128	; 0x80
   2566c:	025b      	lsls	r3, r3, #9
   2566e:	4013      	ands	r3, r2
   25670:	1e5a      	subs	r2, r3, #1
   25672:	4193      	sbcs	r3, r2
   25674:	b2da      	uxtb	r2, r3
   25676:	687b      	ldr	r3, [r7, #4]
   25678:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2567a:	68bb      	ldr	r3, [r7, #8]
   2567c:	099b      	lsrs	r3, r3, #6
   2567e:	b2db      	uxtb	r3, r3
   25680:	223f      	movs	r2, #63	; 0x3f
   25682:	4013      	ands	r3, r2
   25684:	b2da      	uxtb	r2, r3
   25686:	687b      	ldr	r3, [r7, #4]
   25688:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2568a:	68bb      	ldr	r3, [r7, #8]
   2568c:	b2db      	uxtb	r3, r3
   2568e:	223f      	movs	r2, #63	; 0x3f
   25690:	4013      	ands	r3, r2
   25692:	b2da      	uxtb	r2, r3
   25694:	687b      	ldr	r3, [r7, #4]
   25696:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   25698:	46c0      	nop			; (mov r8, r8)
   2569a:	46bd      	mov	sp, r7
   2569c:	b004      	add	sp, #16
   2569e:	bd80      	pop	{r7, pc}

000256a0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   256a0:	b580      	push	{r7, lr}
   256a2:	b084      	sub	sp, #16
   256a4:	af00      	add	r7, sp, #0
   256a6:	6078      	str	r0, [r7, #4]
   256a8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   256aa:	687b      	ldr	r3, [r7, #4]
   256ac:	681b      	ldr	r3, [r3, #0]
   256ae:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   256b0:	683b      	ldr	r3, [r7, #0]
   256b2:	881a      	ldrh	r2, [r3, #0]
   256b4:	230e      	movs	r3, #14
   256b6:	18fb      	adds	r3, r7, r3
   256b8:	2108      	movs	r1, #8
   256ba:	430a      	orrs	r2, r1
   256bc:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   256be:	683b      	ldr	r3, [r7, #0]
   256c0:	791b      	ldrb	r3, [r3, #4]
   256c2:	2201      	movs	r2, #1
   256c4:	4053      	eors	r3, r2
   256c6:	b2db      	uxtb	r3, r3
   256c8:	2b00      	cmp	r3, #0
   256ca:	d007      	beq.n	256dc <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   256cc:	230e      	movs	r3, #14
   256ce:	18fb      	adds	r3, r7, r3
   256d0:	220e      	movs	r2, #14
   256d2:	18ba      	adds	r2, r7, r2
   256d4:	8812      	ldrh	r2, [r2, #0]
   256d6:	2140      	movs	r1, #64	; 0x40
   256d8:	430a      	orrs	r2, r1
   256da:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   256dc:	683b      	ldr	r3, [r7, #0]
   256de:	789b      	ldrb	r3, [r3, #2]
   256e0:	2b00      	cmp	r3, #0
   256e2:	d007      	beq.n	256f4 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   256e4:	230e      	movs	r3, #14
   256e6:	18fb      	adds	r3, r7, r3
   256e8:	220e      	movs	r2, #14
   256ea:	18ba      	adds	r2, r7, r2
   256ec:	8812      	ldrh	r2, [r2, #0]
   256ee:	2180      	movs	r1, #128	; 0x80
   256f0:	430a      	orrs	r2, r1
   256f2:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   256f4:	68bb      	ldr	r3, [r7, #8]
   256f6:	220e      	movs	r2, #14
   256f8:	18ba      	adds	r2, r7, r2
   256fa:	8812      	ldrh	r2, [r2, #0]
   256fc:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   256fe:	683b      	ldr	r3, [r7, #0]
   25700:	78db      	ldrb	r3, [r3, #3]
   25702:	2b00      	cmp	r3, #0
   25704:	d008      	beq.n	25718 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   25706:	68bb      	ldr	r3, [r7, #8]
   25708:	885b      	ldrh	r3, [r3, #2]
   2570a:	b29b      	uxth	r3, r3
   2570c:	2280      	movs	r2, #128	; 0x80
   2570e:	01d2      	lsls	r2, r2, #7
   25710:	4313      	orrs	r3, r2
   25712:	b29a      	uxth	r2, r3
   25714:	68bb      	ldr	r3, [r7, #8]
   25716:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   25718:	230d      	movs	r3, #13
   2571a:	18fb      	adds	r3, r7, r3
   2571c:	2200      	movs	r2, #0
   2571e:	701a      	strb	r2, [r3, #0]
   25720:	e017      	b.n	25752 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   25722:	230d      	movs	r3, #13
   25724:	18fb      	adds	r3, r7, r3
   25726:	781a      	ldrb	r2, [r3, #0]
   25728:	0013      	movs	r3, r2
   2572a:	009b      	lsls	r3, r3, #2
   2572c:	189b      	adds	r3, r3, r2
   2572e:	005b      	lsls	r3, r3, #1
   25730:	3308      	adds	r3, #8
   25732:	683a      	ldr	r2, [r7, #0]
   25734:	18d1      	adds	r1, r2, r3
   25736:	230d      	movs	r3, #13
   25738:	18fb      	adds	r3, r7, r3
   2573a:	781a      	ldrb	r2, [r3, #0]
   2573c:	687b      	ldr	r3, [r7, #4]
   2573e:	0018      	movs	r0, r3
   25740:	4b08      	ldr	r3, [pc, #32]	; (25764 <_rtc_calendar_set_config+0xc4>)
   25742:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   25744:	230d      	movs	r3, #13
   25746:	18fb      	adds	r3, r7, r3
   25748:	781a      	ldrb	r2, [r3, #0]
   2574a:	230d      	movs	r3, #13
   2574c:	18fb      	adds	r3, r7, r3
   2574e:	3201      	adds	r2, #1
   25750:	701a      	strb	r2, [r3, #0]
   25752:	230d      	movs	r3, #13
   25754:	18fb      	adds	r3, r7, r3
   25756:	781b      	ldrb	r3, [r3, #0]
   25758:	2b00      	cmp	r3, #0
   2575a:	d0e2      	beq.n	25722 <_rtc_calendar_set_config+0x82>
	}
}
   2575c:	46c0      	nop			; (mov r8, r8)
   2575e:	46bd      	mov	sp, r7
   25760:	b004      	add	sp, #16
   25762:	bd80      	pop	{r7, pc}
   25764:	00025889 	.word	0x00025889

00025768 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   25768:	b580      	push	{r7, lr}
   2576a:	b086      	sub	sp, #24
   2576c:	af00      	add	r7, sp, #0
   2576e:	60f8      	str	r0, [r7, #12]
   25770:	60b9      	str	r1, [r7, #8]
   25772:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   25774:	68fb      	ldr	r3, [r7, #12]
   25776:	68ba      	ldr	r2, [r7, #8]
   25778:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   2577a:	2120      	movs	r1, #32
   2577c:	2000      	movs	r0, #0
   2577e:	4b18      	ldr	r3, [pc, #96]	; (257e0 <rtc_calendar_init+0x78>)
   25780:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25782:	2314      	movs	r3, #20
   25784:	18fb      	adds	r3, r7, r3
   25786:	0018      	movs	r0, r3
   25788:	4b16      	ldr	r3, [pc, #88]	; (257e4 <rtc_calendar_init+0x7c>)
   2578a:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   2578c:	2314      	movs	r3, #20
   2578e:	18fb      	adds	r3, r7, r3
   25790:	2202      	movs	r2, #2
   25792:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   25794:	2314      	movs	r3, #20
   25796:	18fb      	adds	r3, r7, r3
   25798:	0019      	movs	r1, r3
   2579a:	2004      	movs	r0, #4
   2579c:	4b12      	ldr	r3, [pc, #72]	; (257e8 <rtc_calendar_init+0x80>)
   2579e:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   257a0:	2004      	movs	r0, #4
   257a2:	4b12      	ldr	r3, [pc, #72]	; (257ec <rtc_calendar_init+0x84>)
   257a4:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   257a6:	68fb      	ldr	r3, [r7, #12]
   257a8:	0018      	movs	r0, r3
   257aa:	4b11      	ldr	r3, [pc, #68]	; (257f0 <rtc_calendar_init+0x88>)
   257ac:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   257ae:	687b      	ldr	r3, [r7, #4]
   257b0:	791a      	ldrb	r2, [r3, #4]
   257b2:	68fb      	ldr	r3, [r7, #12]
   257b4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   257b6:	687b      	ldr	r3, [r7, #4]
   257b8:	78da      	ldrb	r2, [r3, #3]
   257ba:	68fb      	ldr	r3, [r7, #12]
   257bc:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   257be:	687b      	ldr	r3, [r7, #4]
   257c0:	88da      	ldrh	r2, [r3, #6]
   257c2:	68fb      	ldr	r3, [r7, #12]
   257c4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   257c6:	4b0b      	ldr	r3, [pc, #44]	; (257f4 <rtc_calendar_init+0x8c>)
   257c8:	68fa      	ldr	r2, [r7, #12]
   257ca:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   257cc:	687a      	ldr	r2, [r7, #4]
   257ce:	68fb      	ldr	r3, [r7, #12]
   257d0:	0011      	movs	r1, r2
   257d2:	0018      	movs	r0, r3
   257d4:	4b08      	ldr	r3, [pc, #32]	; (257f8 <rtc_calendar_init+0x90>)
   257d6:	4798      	blx	r3
}
   257d8:	46c0      	nop			; (mov r8, r8)
   257da:	46bd      	mov	sp, r7
   257dc:	b006      	add	sp, #24
   257de:	bd80      	pop	{r7, pc}
   257e0:	000253b5 	.word	0x000253b5
   257e4:	0002539d 	.word	0x0002539d
   257e8:	000287cd 	.word	0x000287cd
   257ec:	00028811 	.word	0x00028811
   257f0:	00025529 	.word	0x00025529
   257f4:	200059c4 	.word	0x200059c4
   257f8:	000256a1 	.word	0x000256a1

000257fc <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   257fc:	b580      	push	{r7, lr}
   257fe:	b084      	sub	sp, #16
   25800:	af00      	add	r7, sp, #0
   25802:	6078      	str	r0, [r7, #4]
   25804:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25806:	687b      	ldr	r3, [r7, #4]
   25808:	681b      	ldr	r3, [r3, #0]
   2580a:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   2580c:	687b      	ldr	r3, [r7, #4]
   2580e:	795b      	ldrb	r3, [r3, #5]
   25810:	2201      	movs	r2, #1
   25812:	4053      	eors	r3, r2
   25814:	b2db      	uxtb	r3, r3
   25816:	2b00      	cmp	r3, #0
   25818:	d00a      	beq.n	25830 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   2581a:	68fb      	ldr	r3, [r7, #12]
   2581c:	4a16      	ldr	r2, [pc, #88]	; (25878 <rtc_calendar_get_time+0x7c>)
   2581e:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   25820:	46c0      	nop			; (mov r8, r8)
   25822:	687b      	ldr	r3, [r7, #4]
   25824:	0018      	movs	r0, r3
   25826:	4b15      	ldr	r3, [pc, #84]	; (2587c <rtc_calendar_get_time+0x80>)
   25828:	4798      	blx	r3
   2582a:	1e03      	subs	r3, r0, #0
   2582c:	d1f9      	bne.n	25822 <rtc_calendar_get_time+0x26>
   2582e:	e016      	b.n	2585e <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   25830:	68fb      	ldr	r3, [r7, #12]
   25832:	885b      	ldrh	r3, [r3, #2]
   25834:	b29b      	uxth	r3, r3
   25836:	001a      	movs	r2, r3
   25838:	2380      	movs	r3, #128	; 0x80
   2583a:	01db      	lsls	r3, r3, #7
   2583c:	4013      	ands	r3, r2
   2583e:	d10e      	bne.n	2585e <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   25840:	68fb      	ldr	r3, [r7, #12]
   25842:	885b      	ldrh	r3, [r3, #2]
   25844:	b29b      	uxth	r3, r3
   25846:	4a0e      	ldr	r2, [pc, #56]	; (25880 <rtc_calendar_get_time+0x84>)
   25848:	4313      	orrs	r3, r2
   2584a:	b29a      	uxth	r2, r3
   2584c:	68fb      	ldr	r3, [r7, #12]
   2584e:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   25850:	46c0      	nop			; (mov r8, r8)
   25852:	687b      	ldr	r3, [r7, #4]
   25854:	0018      	movs	r0, r3
   25856:	4b09      	ldr	r3, [pc, #36]	; (2587c <rtc_calendar_get_time+0x80>)
   25858:	4798      	blx	r3
   2585a:	1e03      	subs	r3, r0, #0
   2585c:	d1f9      	bne.n	25852 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   2585e:	68fb      	ldr	r3, [r7, #12]
   25860:	691b      	ldr	r3, [r3, #16]
   25862:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   25864:	683a      	ldr	r2, [r7, #0]
   25866:	68b9      	ldr	r1, [r7, #8]
   25868:	687b      	ldr	r3, [r7, #4]
   2586a:	0018      	movs	r0, r3
   2586c:	4b05      	ldr	r3, [pc, #20]	; (25884 <rtc_calendar_get_time+0x88>)
   2586e:	4798      	blx	r3
}
   25870:	46c0      	nop			; (mov r8, r8)
   25872:	46bd      	mov	sp, r7
   25874:	b004      	add	sp, #16
   25876:	bd80      	pop	{r7, pc}
   25878:	ffff8000 	.word	0xffff8000
   2587c:	0002546d 	.word	0x0002546d
   25880:	ffffc000 	.word	0xffffc000
   25884:	00025601 	.word	0x00025601

00025888 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   25888:	b580      	push	{r7, lr}
   2588a:	b086      	sub	sp, #24
   2588c:	af00      	add	r7, sp, #0
   2588e:	60f8      	str	r0, [r7, #12]
   25890:	60b9      	str	r1, [r7, #8]
   25892:	1dfb      	adds	r3, r7, #7
   25894:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   25896:	68fb      	ldr	r3, [r7, #12]
   25898:	681b      	ldr	r3, [r3, #0]
   2589a:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   2589c:	1dfb      	adds	r3, r7, #7
   2589e:	781b      	ldrb	r3, [r3, #0]
   258a0:	2b01      	cmp	r3, #1
   258a2:	d901      	bls.n	258a8 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   258a4:	2317      	movs	r3, #23
   258a6:	e021      	b.n	258ec <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   258a8:	68ba      	ldr	r2, [r7, #8]
   258aa:	68fb      	ldr	r3, [r7, #12]
   258ac:	0011      	movs	r1, r2
   258ae:	0018      	movs	r0, r3
   258b0:	4b10      	ldr	r3, [pc, #64]	; (258f4 <rtc_calendar_set_alarm+0x6c>)
   258b2:	4798      	blx	r3
   258b4:	0003      	movs	r3, r0
   258b6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   258b8:	46c0      	nop			; (mov r8, r8)
   258ba:	68fb      	ldr	r3, [r7, #12]
   258bc:	0018      	movs	r0, r3
   258be:	4b0e      	ldr	r3, [pc, #56]	; (258f8 <rtc_calendar_set_alarm+0x70>)
   258c0:	4798      	blx	r3
   258c2:	1e03      	subs	r3, r0, #0
   258c4:	d1f9      	bne.n	258ba <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   258c6:	1dfb      	adds	r3, r7, #7
   258c8:	781a      	ldrb	r2, [r3, #0]
   258ca:	697b      	ldr	r3, [r7, #20]
   258cc:	3203      	adds	r2, #3
   258ce:	00d2      	lsls	r2, r2, #3
   258d0:	6939      	ldr	r1, [r7, #16]
   258d2:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   258d4:	1dfb      	adds	r3, r7, #7
   258d6:	781b      	ldrb	r3, [r3, #0]
   258d8:	68ba      	ldr	r2, [r7, #8]
   258da:	7a11      	ldrb	r1, [r2, #8]
   258dc:	697a      	ldr	r2, [r7, #20]
   258de:	3303      	adds	r3, #3
   258e0:	00db      	lsls	r3, r3, #3
   258e2:	18d3      	adds	r3, r2, r3
   258e4:	3304      	adds	r3, #4
   258e6:	1c0a      	adds	r2, r1, #0
   258e8:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   258ea:	2300      	movs	r3, #0
}
   258ec:	0018      	movs	r0, r3
   258ee:	46bd      	mov	sp, r7
   258f0:	b006      	add	sp, #24
   258f2:	bd80      	pop	{r7, pc}
   258f4:	00025579 	.word	0x00025579
   258f8:	0002546d 	.word	0x0002546d

000258fc <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   258fc:	b580      	push	{r7, lr}
   258fe:	b086      	sub	sp, #24
   25900:	af00      	add	r7, sp, #0
   25902:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   25904:	4b28      	ldr	r3, [pc, #160]	; (259a8 <_rtc_interrupt_handler+0xac>)
   25906:	687a      	ldr	r2, [r7, #4]
   25908:	0092      	lsls	r2, r2, #2
   2590a:	58d3      	ldr	r3, [r2, r3]
   2590c:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   2590e:	697b      	ldr	r3, [r7, #20]
   25910:	681b      	ldr	r3, [r3, #0]
   25912:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   25914:	230e      	movs	r3, #14
   25916:	18fb      	adds	r3, r7, r3
   25918:	697a      	ldr	r2, [r7, #20]
   2591a:	8a52      	ldrh	r2, [r2, #18]
   2591c:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   2591e:	697b      	ldr	r3, [r7, #20]
   25920:	8a1b      	ldrh	r3, [r3, #16]
   25922:	b29a      	uxth	r2, r3
   25924:	230e      	movs	r3, #14
   25926:	18fb      	adds	r3, r7, r3
   25928:	210e      	movs	r1, #14
   2592a:	1879      	adds	r1, r7, r1
   2592c:	8809      	ldrh	r1, [r1, #0]
   2592e:	400a      	ands	r2, r1
   25930:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   25932:	693b      	ldr	r3, [r7, #16]
   25934:	7a1b      	ldrb	r3, [r3, #8]
   25936:	b2da      	uxtb	r2, r3
   25938:	230c      	movs	r3, #12
   2593a:	18fb      	adds	r3, r7, r3
   2593c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   2593e:	693b      	ldr	r3, [r7, #16]
   25940:	79db      	ldrb	r3, [r3, #7]
   25942:	b2db      	uxtb	r3, r3
   25944:	b29a      	uxth	r2, r3
   25946:	230c      	movs	r3, #12
   25948:	18fb      	adds	r3, r7, r3
   2594a:	210c      	movs	r1, #12
   2594c:	1879      	adds	r1, r7, r1
   2594e:	8809      	ldrh	r1, [r1, #0]
   25950:	400a      	ands	r2, r1
   25952:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   25954:	230c      	movs	r3, #12
   25956:	18fb      	adds	r3, r7, r3
   25958:	881b      	ldrh	r3, [r3, #0]
   2595a:	2280      	movs	r2, #128	; 0x80
   2595c:	4013      	ands	r3, r2
   2595e:	d00c      	beq.n	2597a <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   25960:	230e      	movs	r3, #14
   25962:	18fb      	adds	r3, r7, r3
   25964:	881b      	ldrh	r3, [r3, #0]
   25966:	2202      	movs	r2, #2
   25968:	4013      	ands	r3, r2
   2596a:	d002      	beq.n	25972 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   2596c:	697b      	ldr	r3, [r7, #20]
   2596e:	68db      	ldr	r3, [r3, #12]
   25970:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   25972:	693b      	ldr	r3, [r7, #16]
   25974:	2280      	movs	r2, #128	; 0x80
   25976:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   25978:	e011      	b.n	2599e <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   2597a:	230c      	movs	r3, #12
   2597c:	18fb      	adds	r3, r7, r3
   2597e:	881b      	ldrh	r3, [r3, #0]
   25980:	2201      	movs	r2, #1
   25982:	4013      	ands	r3, r2
   25984:	d00b      	beq.n	2599e <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   25986:	230e      	movs	r3, #14
   25988:	18fb      	adds	r3, r7, r3
   2598a:	881b      	ldrh	r3, [r3, #0]
   2598c:	2201      	movs	r2, #1
   2598e:	4013      	ands	r3, r2
   25990:	d002      	beq.n	25998 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   25992:	697b      	ldr	r3, [r7, #20]
   25994:	689b      	ldr	r3, [r3, #8]
   25996:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   25998:	693b      	ldr	r3, [r7, #16]
   2599a:	2201      	movs	r2, #1
   2599c:	721a      	strb	r2, [r3, #8]
}
   2599e:	46c0      	nop			; (mov r8, r8)
   259a0:	46bd      	mov	sp, r7
   259a2:	b006      	add	sp, #24
   259a4:	bd80      	pop	{r7, pc}
   259a6:	46c0      	nop			; (mov r8, r8)
   259a8:	200059c4 	.word	0x200059c4

000259ac <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   259ac:	b580      	push	{r7, lr}
   259ae:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   259b0:	2000      	movs	r0, #0
   259b2:	4b02      	ldr	r3, [pc, #8]	; (259bc <RTC_Handler+0x10>)
   259b4:	4798      	blx	r3
}
   259b6:	46c0      	nop			; (mov r8, r8)
   259b8:	46bd      	mov	sp, r7
   259ba:	bd80      	pop	{r7, pc}
   259bc:	000258fd 	.word	0x000258fd

000259c0 <system_gclk_chan_get_config_defaults>:
{
   259c0:	b580      	push	{r7, lr}
   259c2:	b082      	sub	sp, #8
   259c4:	af00      	add	r7, sp, #0
   259c6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   259c8:	687b      	ldr	r3, [r7, #4]
   259ca:	2200      	movs	r2, #0
   259cc:	701a      	strb	r2, [r3, #0]
}
   259ce:	46c0      	nop			; (mov r8, r8)
   259d0:	46bd      	mov	sp, r7
   259d2:	b002      	add	sp, #8
   259d4:	bd80      	pop	{r7, pc}

000259d6 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   259d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   259d8:	b08d      	sub	sp, #52	; 0x34
   259da:	af00      	add	r7, sp, #0
   259dc:	60b8      	str	r0, [r7, #8]
   259de:	60f9      	str	r1, [r7, #12]
   259e0:	603a      	str	r2, [r7, #0]
   259e2:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   259e4:	2300      	movs	r3, #0
   259e6:	2400      	movs	r4, #0
   259e8:	623b      	str	r3, [r7, #32]
   259ea:	627c      	str	r4, [r7, #36]	; 0x24
   259ec:	2300      	movs	r3, #0
   259ee:	2400      	movs	r4, #0
   259f0:	61bb      	str	r3, [r7, #24]
   259f2:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   259f4:	233f      	movs	r3, #63	; 0x3f
   259f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   259f8:	e053      	b.n	25aa2 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   259fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   259fc:	3b20      	subs	r3, #32
   259fe:	2b00      	cmp	r3, #0
   25a00:	db04      	blt.n	25a0c <long_division+0x36>
   25a02:	2201      	movs	r2, #1
   25a04:	409a      	lsls	r2, r3
   25a06:	0013      	movs	r3, r2
   25a08:	617b      	str	r3, [r7, #20]
   25a0a:	e00b      	b.n	25a24 <long_division+0x4e>
   25a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25a0e:	2220      	movs	r2, #32
   25a10:	1ad3      	subs	r3, r2, r3
   25a12:	2201      	movs	r2, #1
   25a14:	40da      	lsrs	r2, r3
   25a16:	0013      	movs	r3, r2
   25a18:	2100      	movs	r1, #0
   25a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   25a1c:	4091      	lsls	r1, r2
   25a1e:	000a      	movs	r2, r1
   25a20:	4313      	orrs	r3, r2
   25a22:	617b      	str	r3, [r7, #20]
   25a24:	2201      	movs	r2, #1
   25a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25a28:	409a      	lsls	r2, r3
   25a2a:	0013      	movs	r3, r2
   25a2c:	613b      	str	r3, [r7, #16]

		r = r << 1;
   25a2e:	69bb      	ldr	r3, [r7, #24]
   25a30:	69fc      	ldr	r4, [r7, #28]
   25a32:	18db      	adds	r3, r3, r3
   25a34:	4164      	adcs	r4, r4
   25a36:	61bb      	str	r3, [r7, #24]
   25a38:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   25a3a:	68bb      	ldr	r3, [r7, #8]
   25a3c:	693a      	ldr	r2, [r7, #16]
   25a3e:	401a      	ands	r2, r3
   25a40:	0015      	movs	r5, r2
   25a42:	68fb      	ldr	r3, [r7, #12]
   25a44:	697a      	ldr	r2, [r7, #20]
   25a46:	401a      	ands	r2, r3
   25a48:	0016      	movs	r6, r2
   25a4a:	002b      	movs	r3, r5
   25a4c:	4333      	orrs	r3, r6
   25a4e:	d007      	beq.n	25a60 <long_division+0x8a>
			r |= 0x01;
   25a50:	69bb      	ldr	r3, [r7, #24]
   25a52:	2201      	movs	r2, #1
   25a54:	4313      	orrs	r3, r2
   25a56:	61bb      	str	r3, [r7, #24]
   25a58:	69fb      	ldr	r3, [r7, #28]
   25a5a:	2200      	movs	r2, #0
   25a5c:	4313      	orrs	r3, r2
   25a5e:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   25a60:	687a      	ldr	r2, [r7, #4]
   25a62:	69fb      	ldr	r3, [r7, #28]
   25a64:	429a      	cmp	r2, r3
   25a66:	d819      	bhi.n	25a9c <long_division+0xc6>
   25a68:	687a      	ldr	r2, [r7, #4]
   25a6a:	69fb      	ldr	r3, [r7, #28]
   25a6c:	429a      	cmp	r2, r3
   25a6e:	d103      	bne.n	25a78 <long_division+0xa2>
   25a70:	683a      	ldr	r2, [r7, #0]
   25a72:	69bb      	ldr	r3, [r7, #24]
   25a74:	429a      	cmp	r2, r3
   25a76:	d811      	bhi.n	25a9c <long_division+0xc6>
			r = r - d;
   25a78:	69b9      	ldr	r1, [r7, #24]
   25a7a:	69fa      	ldr	r2, [r7, #28]
   25a7c:	683b      	ldr	r3, [r7, #0]
   25a7e:	687c      	ldr	r4, [r7, #4]
   25a80:	1ac9      	subs	r1, r1, r3
   25a82:	41a2      	sbcs	r2, r4
   25a84:	000b      	movs	r3, r1
   25a86:	0014      	movs	r4, r2
   25a88:	61bb      	str	r3, [r7, #24]
   25a8a:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   25a8c:	6a3a      	ldr	r2, [r7, #32]
   25a8e:	693b      	ldr	r3, [r7, #16]
   25a90:	4313      	orrs	r3, r2
   25a92:	623b      	str	r3, [r7, #32]
   25a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25a96:	697b      	ldr	r3, [r7, #20]
   25a98:	4313      	orrs	r3, r2
   25a9a:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   25a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25a9e:	3b01      	subs	r3, #1
   25aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   25aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25aa4:	2b00      	cmp	r3, #0
   25aa6:	daa8      	bge.n	259fa <long_division+0x24>
		}
	}

	return q;
   25aa8:	6a3b      	ldr	r3, [r7, #32]
   25aaa:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   25aac:	0018      	movs	r0, r3
   25aae:	0021      	movs	r1, r4
   25ab0:	46bd      	mov	sp, r7
   25ab2:	b00d      	add	sp, #52	; 0x34
   25ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025ab6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   25ab6:	b580      	push	{r7, lr}
   25ab8:	b086      	sub	sp, #24
   25aba:	af00      	add	r7, sp, #0
   25abc:	60f8      	str	r0, [r7, #12]
   25abe:	60b9      	str	r1, [r7, #8]
   25ac0:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   25ac2:	2316      	movs	r3, #22
   25ac4:	18fb      	adds	r3, r7, r3
   25ac6:	2200      	movs	r2, #0
   25ac8:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   25aca:	68bb      	ldr	r3, [r7, #8]
   25acc:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   25ace:	68bb      	ldr	r3, [r7, #8]
   25ad0:	085a      	lsrs	r2, r3, #1
   25ad2:	68fb      	ldr	r3, [r7, #12]
   25ad4:	429a      	cmp	r2, r3
   25ad6:	d201      	bcs.n	25adc <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   25ad8:	2340      	movs	r3, #64	; 0x40
   25ada:	e026      	b.n	25b2a <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   25adc:	68bb      	ldr	r3, [r7, #8]
   25ade:	085b      	lsrs	r3, r3, #1
   25ae0:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   25ae2:	e00a      	b.n	25afa <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   25ae4:	693a      	ldr	r2, [r7, #16]
   25ae6:	68fb      	ldr	r3, [r7, #12]
   25ae8:	1ad3      	subs	r3, r2, r3
   25aea:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   25aec:	2316      	movs	r3, #22
   25aee:	18fb      	adds	r3, r7, r3
   25af0:	881a      	ldrh	r2, [r3, #0]
   25af2:	2316      	movs	r3, #22
   25af4:	18fb      	adds	r3, r7, r3
   25af6:	3201      	adds	r2, #1
   25af8:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   25afa:	693a      	ldr	r2, [r7, #16]
   25afc:	68fb      	ldr	r3, [r7, #12]
   25afe:	429a      	cmp	r2, r3
   25b00:	d2f0      	bcs.n	25ae4 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   25b02:	2316      	movs	r3, #22
   25b04:	18fb      	adds	r3, r7, r3
   25b06:	2216      	movs	r2, #22
   25b08:	18ba      	adds	r2, r7, r2
   25b0a:	8812      	ldrh	r2, [r2, #0]
   25b0c:	3a01      	subs	r2, #1
   25b0e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   25b10:	2316      	movs	r3, #22
   25b12:	18fb      	adds	r3, r7, r3
   25b14:	881b      	ldrh	r3, [r3, #0]
   25b16:	2bff      	cmp	r3, #255	; 0xff
   25b18:	d901      	bls.n	25b1e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   25b1a:	2340      	movs	r3, #64	; 0x40
   25b1c:	e005      	b.n	25b2a <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   25b1e:	687b      	ldr	r3, [r7, #4]
   25b20:	2216      	movs	r2, #22
   25b22:	18ba      	adds	r2, r7, r2
   25b24:	8812      	ldrh	r2, [r2, #0]
   25b26:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   25b28:	2300      	movs	r3, #0
	}
}
   25b2a:	0018      	movs	r0, r3
   25b2c:	46bd      	mov	sp, r7
   25b2e:	b006      	add	sp, #24
   25b30:	bd80      	pop	{r7, pc}
	...

00025b34 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   25b34:	b5f0      	push	{r4, r5, r6, r7, lr}
   25b36:	b0a1      	sub	sp, #132	; 0x84
   25b38:	af00      	add	r7, sp, #0
   25b3a:	64f8      	str	r0, [r7, #76]	; 0x4c
   25b3c:	64b9      	str	r1, [r7, #72]	; 0x48
   25b3e:	647a      	str	r2, [r7, #68]	; 0x44
   25b40:	2243      	movs	r2, #67	; 0x43
   25b42:	18ba      	adds	r2, r7, r2
   25b44:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   25b46:	2300      	movs	r3, #0
   25b48:	2400      	movs	r4, #0
   25b4a:	673b      	str	r3, [r7, #112]	; 0x70
   25b4c:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   25b4e:	2300      	movs	r3, #0
   25b50:	2400      	movs	r4, #0
   25b52:	66bb      	str	r3, [r7, #104]	; 0x68
   25b54:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   25b56:	2300      	movs	r3, #0
   25b58:	2400      	movs	r4, #0
   25b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   25b5c:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   25b5e:	2300      	movs	r3, #0
   25b60:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   25b62:	2358      	movs	r3, #88	; 0x58
   25b64:	2240      	movs	r2, #64	; 0x40
   25b66:	4694      	mov	ip, r2
   25b68:	44bc      	add	ip, r7
   25b6a:	4463      	add	r3, ip
   25b6c:	781a      	ldrb	r2, [r3, #0]
   25b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   25b70:	435a      	muls	r2, r3
   25b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25b74:	429a      	cmp	r2, r3
   25b76:	d901      	bls.n	25b7c <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   25b78:	2340      	movs	r3, #64	; 0x40
   25b7a:	e0b3      	b.n	25ce4 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   25b7c:	2343      	movs	r3, #67	; 0x43
   25b7e:	18fb      	adds	r3, r7, r3
   25b80:	781b      	ldrb	r3, [r3, #0]
   25b82:	2b00      	cmp	r3, #0
   25b84:	d13d      	bne.n	25c02 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   25b86:	2358      	movs	r3, #88	; 0x58
   25b88:	2240      	movs	r2, #64	; 0x40
   25b8a:	4694      	mov	ip, r2
   25b8c:	44bc      	add	ip, r7
   25b8e:	4463      	add	r3, ip
   25b90:	781b      	ldrb	r3, [r3, #0]
   25b92:	b2db      	uxtb	r3, r3
   25b94:	613b      	str	r3, [r7, #16]
   25b96:	2300      	movs	r3, #0
   25b98:	617b      	str	r3, [r7, #20]
   25b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   25b9c:	60bb      	str	r3, [r7, #8]
   25b9e:	2300      	movs	r3, #0
   25ba0:	60fb      	str	r3, [r7, #12]
   25ba2:	4c52      	ldr	r4, [pc, #328]	; (25cec <_sercom_get_async_baud_val+0x1b8>)
   25ba4:	68ba      	ldr	r2, [r7, #8]
   25ba6:	68fb      	ldr	r3, [r7, #12]
   25ba8:	6938      	ldr	r0, [r7, #16]
   25baa:	6979      	ldr	r1, [r7, #20]
   25bac:	47a0      	blx	r4
   25bae:	0003      	movs	r3, r0
   25bb0:	000c      	movs	r4, r1
   25bb2:	001b      	movs	r3, r3
   25bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   25bb6:	2300      	movs	r3, #0
   25bb8:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   25bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25bbc:	603b      	str	r3, [r7, #0]
   25bbe:	2300      	movs	r3, #0
   25bc0:	607b      	str	r3, [r7, #4]
   25bc2:	6db8      	ldr	r0, [r7, #88]	; 0x58
   25bc4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   25bc6:	683a      	ldr	r2, [r7, #0]
   25bc8:	687b      	ldr	r3, [r7, #4]
   25bca:	4c49      	ldr	r4, [pc, #292]	; (25cf0 <_sercom_get_async_baud_val+0x1bc>)
   25bcc:	47a0      	blx	r4
   25bce:	0003      	movs	r3, r0
   25bd0:	000c      	movs	r4, r1
   25bd2:	673b      	str	r3, [r7, #112]	; 0x70
   25bd4:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   25bd6:	2100      	movs	r1, #0
   25bd8:	2201      	movs	r2, #1
   25bda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   25bdc:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   25bde:	1ac9      	subs	r1, r1, r3
   25be0:	41a2      	sbcs	r2, r4
   25be2:	000b      	movs	r3, r1
   25be4:	0014      	movs	r4, r2
   25be6:	66bb      	str	r3, [r7, #104]	; 0x68
   25be8:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   25bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25bec:	0c1b      	lsrs	r3, r3, #16
   25bee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   25bf0:	0416      	lsls	r6, r2, #16
   25bf2:	431e      	orrs	r6, r3
   25bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   25bf6:	041d      	lsls	r5, r3, #16
   25bf8:	0033      	movs	r3, r6
   25bfa:	67bb      	str	r3, [r7, #120]	; 0x78
   25bfc:	2300      	movs	r3, #0
   25bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   25c00:	e06a      	b.n	25cd8 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   25c02:	2343      	movs	r3, #67	; 0x43
   25c04:	18fb      	adds	r3, r7, r3
   25c06:	781b      	ldrb	r3, [r3, #0]
   25c08:	2b01      	cmp	r3, #1
   25c0a:	d165      	bne.n	25cd8 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   25c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   25c0e:	633b      	str	r3, [r7, #48]	; 0x30
   25c10:	2300      	movs	r3, #0
   25c12:	637b      	str	r3, [r7, #52]	; 0x34
   25c14:	2358      	movs	r3, #88	; 0x58
   25c16:	2240      	movs	r2, #64	; 0x40
   25c18:	4694      	mov	ip, r2
   25c1a:	44bc      	add	ip, r7
   25c1c:	4463      	add	r3, ip
   25c1e:	781b      	ldrb	r3, [r3, #0]
   25c20:	b2db      	uxtb	r3, r3
   25c22:	62bb      	str	r3, [r7, #40]	; 0x28
   25c24:	2300      	movs	r3, #0
   25c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   25c28:	4c30      	ldr	r4, [pc, #192]	; (25cec <_sercom_get_async_baud_val+0x1b8>)
   25c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   25c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   25c2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
   25c30:	6b79      	ldr	r1, [r7, #52]	; 0x34
   25c32:	47a0      	blx	r4
   25c34:	0003      	movs	r3, r0
   25c36:	000c      	movs	r4, r1
   25c38:	65bb      	str	r3, [r7, #88]	; 0x58
   25c3a:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   25c3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25c3e:	623b      	str	r3, [r7, #32]
   25c40:	2300      	movs	r3, #0
   25c42:	627b      	str	r3, [r7, #36]	; 0x24
   25c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   25c46:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   25c48:	001a      	movs	r2, r3
   25c4a:	0023      	movs	r3, r4
   25c4c:	6a38      	ldr	r0, [r7, #32]
   25c4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
   25c50:	4c27      	ldr	r4, [pc, #156]	; (25cf0 <_sercom_get_async_baud_val+0x1bc>)
   25c52:	47a0      	blx	r4
   25c54:	0003      	movs	r3, r0
   25c56:	000c      	movs	r4, r1
   25c58:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   25c5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   25c5c:	2380      	movs	r3, #128	; 0x80
   25c5e:	019b      	lsls	r3, r3, #6
   25c60:	429a      	cmp	r2, r3
   25c62:	d901      	bls.n	25c68 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   25c64:	2340      	movs	r3, #64	; 0x40
   25c66:	e03d      	b.n	25ce4 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   25c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   25c6a:	61bb      	str	r3, [r7, #24]
   25c6c:	2300      	movs	r3, #0
   25c6e:	61fb      	str	r3, [r7, #28]
   25c70:	69b9      	ldr	r1, [r7, #24]
   25c72:	69fa      	ldr	r2, [r7, #28]
   25c74:	000b      	movs	r3, r1
   25c76:	0f5b      	lsrs	r3, r3, #29
   25c78:	0010      	movs	r0, r2
   25c7a:	00c0      	lsls	r0, r0, #3
   25c7c:	63f8      	str	r0, [r7, #60]	; 0x3c
   25c7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   25c80:	4318      	orrs	r0, r3
   25c82:	63f8      	str	r0, [r7, #60]	; 0x3c
   25c84:	000b      	movs	r3, r1
   25c86:	00db      	lsls	r3, r3, #3
   25c88:	63bb      	str	r3, [r7, #56]	; 0x38
   25c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   25c8c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   25c8e:	001a      	movs	r2, r3
   25c90:	0023      	movs	r3, r4
   25c92:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   25c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   25c96:	4c16      	ldr	r4, [pc, #88]	; (25cf0 <_sercom_get_async_baud_val+0x1bc>)
   25c98:	47a0      	blx	r4
   25c9a:	0003      	movs	r3, r0
   25c9c:	000c      	movs	r4, r1
   25c9e:	65bb      	str	r3, [r7, #88]	; 0x58
   25ca0:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   25ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   25ca4:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   25ca6:	b2d9      	uxtb	r1, r3
   25ca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25caa:	b2db      	uxtb	r3, r3
   25cac:	00db      	lsls	r3, r3, #3
   25cae:	b2da      	uxtb	r2, r3
   25cb0:	2317      	movs	r3, #23
   25cb2:	2040      	movs	r0, #64	; 0x40
   25cb4:	4684      	mov	ip, r0
   25cb6:	44bc      	add	ip, r7
   25cb8:	4463      	add	r3, ip
   25cba:	1a8a      	subs	r2, r1, r2
   25cbc:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   25cbe:	2317      	movs	r3, #23
   25cc0:	2240      	movs	r2, #64	; 0x40
   25cc2:	4694      	mov	ip, r2
   25cc4:	44bc      	add	ip, r7
   25cc6:	4463      	add	r3, ip
   25cc8:	781b      	ldrb	r3, [r3, #0]
   25cca:	035b      	lsls	r3, r3, #13
   25ccc:	001a      	movs	r2, r3
   25cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   25cd0:	4313      	orrs	r3, r2
   25cd2:	67bb      	str	r3, [r7, #120]	; 0x78
   25cd4:	2300      	movs	r3, #0
   25cd6:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   25cd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   25cda:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   25cdc:	b29a      	uxth	r2, r3
   25cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   25ce0:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   25ce2:	2300      	movs	r3, #0
}
   25ce4:	0018      	movs	r0, r3
   25ce6:	46bd      	mov	sp, r7
   25ce8:	b021      	add	sp, #132	; 0x84
   25cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25cec:	000315f9 	.word	0x000315f9
   25cf0:	000259d7 	.word	0x000259d7

00025cf4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   25cf4:	b580      	push	{r7, lr}
   25cf6:	b084      	sub	sp, #16
   25cf8:	af00      	add	r7, sp, #0
   25cfa:	0002      	movs	r2, r0
   25cfc:	1dfb      	adds	r3, r7, #7
   25cfe:	701a      	strb	r2, [r3, #0]
   25d00:	1dbb      	adds	r3, r7, #6
   25d02:	1c0a      	adds	r2, r1, #0
   25d04:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   25d06:	4b1a      	ldr	r3, [pc, #104]	; (25d70 <sercom_set_gclk_generator+0x7c>)
   25d08:	781b      	ldrb	r3, [r3, #0]
   25d0a:	2201      	movs	r2, #1
   25d0c:	4053      	eors	r3, r2
   25d0e:	b2db      	uxtb	r3, r3
   25d10:	2b00      	cmp	r3, #0
   25d12:	d103      	bne.n	25d1c <sercom_set_gclk_generator+0x28>
   25d14:	1dbb      	adds	r3, r7, #6
   25d16:	781b      	ldrb	r3, [r3, #0]
   25d18:	2b00      	cmp	r3, #0
   25d1a:	d01b      	beq.n	25d54 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   25d1c:	230c      	movs	r3, #12
   25d1e:	18fb      	adds	r3, r7, r3
   25d20:	0018      	movs	r0, r3
   25d22:	4b14      	ldr	r3, [pc, #80]	; (25d74 <sercom_set_gclk_generator+0x80>)
   25d24:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   25d26:	230c      	movs	r3, #12
   25d28:	18fb      	adds	r3, r7, r3
   25d2a:	1dfa      	adds	r2, r7, #7
   25d2c:	7812      	ldrb	r2, [r2, #0]
   25d2e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   25d30:	230c      	movs	r3, #12
   25d32:	18fb      	adds	r3, r7, r3
   25d34:	0019      	movs	r1, r3
   25d36:	2013      	movs	r0, #19
   25d38:	4b0f      	ldr	r3, [pc, #60]	; (25d78 <sercom_set_gclk_generator+0x84>)
   25d3a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   25d3c:	2013      	movs	r0, #19
   25d3e:	4b0f      	ldr	r3, [pc, #60]	; (25d7c <sercom_set_gclk_generator+0x88>)
   25d40:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   25d42:	4b0b      	ldr	r3, [pc, #44]	; (25d70 <sercom_set_gclk_generator+0x7c>)
   25d44:	1dfa      	adds	r2, r7, #7
   25d46:	7812      	ldrb	r2, [r2, #0]
   25d48:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   25d4a:	4b09      	ldr	r3, [pc, #36]	; (25d70 <sercom_set_gclk_generator+0x7c>)
   25d4c:	2201      	movs	r2, #1
   25d4e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   25d50:	2300      	movs	r3, #0
   25d52:	e008      	b.n	25d66 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   25d54:	4b06      	ldr	r3, [pc, #24]	; (25d70 <sercom_set_gclk_generator+0x7c>)
   25d56:	785b      	ldrb	r3, [r3, #1]
   25d58:	1dfa      	adds	r2, r7, #7
   25d5a:	7812      	ldrb	r2, [r2, #0]
   25d5c:	429a      	cmp	r2, r3
   25d5e:	d101      	bne.n	25d64 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   25d60:	2300      	movs	r3, #0
   25d62:	e000      	b.n	25d66 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   25d64:	231d      	movs	r3, #29
}
   25d66:	0018      	movs	r0, r3
   25d68:	46bd      	mov	sp, r7
   25d6a:	b004      	add	sp, #16
   25d6c:	bd80      	pop	{r7, pc}
   25d6e:	46c0      	nop			; (mov r8, r8)
   25d70:	20004138 	.word	0x20004138
   25d74:	000259c1 	.word	0x000259c1
   25d78:	000287cd 	.word	0x000287cd
   25d7c:	00028811 	.word	0x00028811

00025d80 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   25d80:	b580      	push	{r7, lr}
   25d82:	b082      	sub	sp, #8
   25d84:	af00      	add	r7, sp, #0
   25d86:	6078      	str	r0, [r7, #4]
   25d88:	000a      	movs	r2, r1
   25d8a:	1cfb      	adds	r3, r7, #3
   25d8c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   25d8e:	687b      	ldr	r3, [r7, #4]
   25d90:	4a4d      	ldr	r2, [pc, #308]	; (25ec8 <_sercom_get_default_pad+0x148>)
   25d92:	4293      	cmp	r3, r2
   25d94:	d03f      	beq.n	25e16 <_sercom_get_default_pad+0x96>
   25d96:	4a4c      	ldr	r2, [pc, #304]	; (25ec8 <_sercom_get_default_pad+0x148>)
   25d98:	4293      	cmp	r3, r2
   25d9a:	d806      	bhi.n	25daa <_sercom_get_default_pad+0x2a>
   25d9c:	4a4b      	ldr	r2, [pc, #300]	; (25ecc <_sercom_get_default_pad+0x14c>)
   25d9e:	4293      	cmp	r3, r2
   25da0:	d00f      	beq.n	25dc2 <_sercom_get_default_pad+0x42>
   25da2:	4a4b      	ldr	r2, [pc, #300]	; (25ed0 <_sercom_get_default_pad+0x150>)
   25da4:	4293      	cmp	r3, r2
   25da6:	d021      	beq.n	25dec <_sercom_get_default_pad+0x6c>
   25da8:	e089      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25daa:	4a4a      	ldr	r2, [pc, #296]	; (25ed4 <_sercom_get_default_pad+0x154>)
   25dac:	4293      	cmp	r3, r2
   25dae:	d100      	bne.n	25db2 <_sercom_get_default_pad+0x32>
   25db0:	e05b      	b.n	25e6a <_sercom_get_default_pad+0xea>
   25db2:	4a49      	ldr	r2, [pc, #292]	; (25ed8 <_sercom_get_default_pad+0x158>)
   25db4:	4293      	cmp	r3, r2
   25db6:	d100      	bne.n	25dba <_sercom_get_default_pad+0x3a>
   25db8:	e06c      	b.n	25e94 <_sercom_get_default_pad+0x114>
   25dba:	4a48      	ldr	r2, [pc, #288]	; (25edc <_sercom_get_default_pad+0x15c>)
   25dbc:	4293      	cmp	r3, r2
   25dbe:	d03f      	beq.n	25e40 <_sercom_get_default_pad+0xc0>
   25dc0:	e07d      	b.n	25ebe <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   25dc2:	1cfb      	adds	r3, r7, #3
   25dc4:	781b      	ldrb	r3, [r3, #0]
   25dc6:	2b01      	cmp	r3, #1
   25dc8:	d00a      	beq.n	25de0 <_sercom_get_default_pad+0x60>
   25dca:	dc02      	bgt.n	25dd2 <_sercom_get_default_pad+0x52>
   25dcc:	2b00      	cmp	r3, #0
   25dce:	d005      	beq.n	25ddc <_sercom_get_default_pad+0x5c>
   25dd0:	e075      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25dd2:	2b02      	cmp	r3, #2
   25dd4:	d006      	beq.n	25de4 <_sercom_get_default_pad+0x64>
   25dd6:	2b03      	cmp	r3, #3
   25dd8:	d006      	beq.n	25de8 <_sercom_get_default_pad+0x68>
   25dda:	e070      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25ddc:	4b40      	ldr	r3, [pc, #256]	; (25ee0 <_sercom_get_default_pad+0x160>)
   25dde:	e06f      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25de0:	4b40      	ldr	r3, [pc, #256]	; (25ee4 <_sercom_get_default_pad+0x164>)
   25de2:	e06d      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25de4:	4b40      	ldr	r3, [pc, #256]	; (25ee8 <_sercom_get_default_pad+0x168>)
   25de6:	e06b      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25de8:	4b40      	ldr	r3, [pc, #256]	; (25eec <_sercom_get_default_pad+0x16c>)
   25dea:	e069      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25dec:	1cfb      	adds	r3, r7, #3
   25dee:	781b      	ldrb	r3, [r3, #0]
   25df0:	2b01      	cmp	r3, #1
   25df2:	d00a      	beq.n	25e0a <_sercom_get_default_pad+0x8a>
   25df4:	dc02      	bgt.n	25dfc <_sercom_get_default_pad+0x7c>
   25df6:	2b00      	cmp	r3, #0
   25df8:	d005      	beq.n	25e06 <_sercom_get_default_pad+0x86>
   25dfa:	e060      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25dfc:	2b02      	cmp	r3, #2
   25dfe:	d006      	beq.n	25e0e <_sercom_get_default_pad+0x8e>
   25e00:	2b03      	cmp	r3, #3
   25e02:	d006      	beq.n	25e12 <_sercom_get_default_pad+0x92>
   25e04:	e05b      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25e06:	2303      	movs	r3, #3
   25e08:	e05a      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e0a:	4b39      	ldr	r3, [pc, #228]	; (25ef0 <_sercom_get_default_pad+0x170>)
   25e0c:	e058      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e0e:	4b39      	ldr	r3, [pc, #228]	; (25ef4 <_sercom_get_default_pad+0x174>)
   25e10:	e056      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e12:	4b39      	ldr	r3, [pc, #228]	; (25ef8 <_sercom_get_default_pad+0x178>)
   25e14:	e054      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e16:	1cfb      	adds	r3, r7, #3
   25e18:	781b      	ldrb	r3, [r3, #0]
   25e1a:	2b01      	cmp	r3, #1
   25e1c:	d00a      	beq.n	25e34 <_sercom_get_default_pad+0xb4>
   25e1e:	dc02      	bgt.n	25e26 <_sercom_get_default_pad+0xa6>
   25e20:	2b00      	cmp	r3, #0
   25e22:	d005      	beq.n	25e30 <_sercom_get_default_pad+0xb0>
   25e24:	e04b      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25e26:	2b02      	cmp	r3, #2
   25e28:	d006      	beq.n	25e38 <_sercom_get_default_pad+0xb8>
   25e2a:	2b03      	cmp	r3, #3
   25e2c:	d006      	beq.n	25e3c <_sercom_get_default_pad+0xbc>
   25e2e:	e046      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25e30:	4b32      	ldr	r3, [pc, #200]	; (25efc <_sercom_get_default_pad+0x17c>)
   25e32:	e045      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e34:	4b32      	ldr	r3, [pc, #200]	; (25f00 <_sercom_get_default_pad+0x180>)
   25e36:	e043      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e38:	4b32      	ldr	r3, [pc, #200]	; (25f04 <_sercom_get_default_pad+0x184>)
   25e3a:	e041      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e3c:	4b32      	ldr	r3, [pc, #200]	; (25f08 <_sercom_get_default_pad+0x188>)
   25e3e:	e03f      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e40:	1cfb      	adds	r3, r7, #3
   25e42:	781b      	ldrb	r3, [r3, #0]
   25e44:	2b01      	cmp	r3, #1
   25e46:	d00a      	beq.n	25e5e <_sercom_get_default_pad+0xde>
   25e48:	dc02      	bgt.n	25e50 <_sercom_get_default_pad+0xd0>
   25e4a:	2b00      	cmp	r3, #0
   25e4c:	d005      	beq.n	25e5a <_sercom_get_default_pad+0xda>
   25e4e:	e036      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25e50:	2b02      	cmp	r3, #2
   25e52:	d006      	beq.n	25e62 <_sercom_get_default_pad+0xe2>
   25e54:	2b03      	cmp	r3, #3
   25e56:	d006      	beq.n	25e66 <_sercom_get_default_pad+0xe6>
   25e58:	e031      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25e5a:	4b2c      	ldr	r3, [pc, #176]	; (25f0c <_sercom_get_default_pad+0x18c>)
   25e5c:	e030      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e5e:	4b2c      	ldr	r3, [pc, #176]	; (25f10 <_sercom_get_default_pad+0x190>)
   25e60:	e02e      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e62:	4b2c      	ldr	r3, [pc, #176]	; (25f14 <_sercom_get_default_pad+0x194>)
   25e64:	e02c      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e66:	4b2c      	ldr	r3, [pc, #176]	; (25f18 <_sercom_get_default_pad+0x198>)
   25e68:	e02a      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e6a:	1cfb      	adds	r3, r7, #3
   25e6c:	781b      	ldrb	r3, [r3, #0]
   25e6e:	2b01      	cmp	r3, #1
   25e70:	d00a      	beq.n	25e88 <_sercom_get_default_pad+0x108>
   25e72:	dc02      	bgt.n	25e7a <_sercom_get_default_pad+0xfa>
   25e74:	2b00      	cmp	r3, #0
   25e76:	d005      	beq.n	25e84 <_sercom_get_default_pad+0x104>
   25e78:	e021      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25e7a:	2b02      	cmp	r3, #2
   25e7c:	d006      	beq.n	25e8c <_sercom_get_default_pad+0x10c>
   25e7e:	2b03      	cmp	r3, #3
   25e80:	d006      	beq.n	25e90 <_sercom_get_default_pad+0x110>
   25e82:	e01c      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25e84:	4b25      	ldr	r3, [pc, #148]	; (25f1c <_sercom_get_default_pad+0x19c>)
   25e86:	e01b      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e88:	4b25      	ldr	r3, [pc, #148]	; (25f20 <_sercom_get_default_pad+0x1a0>)
   25e8a:	e019      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e8c:	4b25      	ldr	r3, [pc, #148]	; (25f24 <_sercom_get_default_pad+0x1a4>)
   25e8e:	e017      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e90:	4b25      	ldr	r3, [pc, #148]	; (25f28 <_sercom_get_default_pad+0x1a8>)
   25e92:	e015      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25e94:	1cfb      	adds	r3, r7, #3
   25e96:	781b      	ldrb	r3, [r3, #0]
   25e98:	2b01      	cmp	r3, #1
   25e9a:	d00a      	beq.n	25eb2 <_sercom_get_default_pad+0x132>
   25e9c:	dc02      	bgt.n	25ea4 <_sercom_get_default_pad+0x124>
   25e9e:	2b00      	cmp	r3, #0
   25ea0:	d005      	beq.n	25eae <_sercom_get_default_pad+0x12e>
   25ea2:	e00c      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25ea4:	2b02      	cmp	r3, #2
   25ea6:	d006      	beq.n	25eb6 <_sercom_get_default_pad+0x136>
   25ea8:	2b03      	cmp	r3, #3
   25eaa:	d006      	beq.n	25eba <_sercom_get_default_pad+0x13a>
   25eac:	e007      	b.n	25ebe <_sercom_get_default_pad+0x13e>
   25eae:	4b1f      	ldr	r3, [pc, #124]	; (25f2c <_sercom_get_default_pad+0x1ac>)
   25eb0:	e006      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25eb2:	4b1f      	ldr	r3, [pc, #124]	; (25f30 <_sercom_get_default_pad+0x1b0>)
   25eb4:	e004      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25eb6:	4b1f      	ldr	r3, [pc, #124]	; (25f34 <_sercom_get_default_pad+0x1b4>)
   25eb8:	e002      	b.n	25ec0 <_sercom_get_default_pad+0x140>
   25eba:	4b1f      	ldr	r3, [pc, #124]	; (25f38 <_sercom_get_default_pad+0x1b8>)
   25ebc:	e000      	b.n	25ec0 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   25ebe:	2300      	movs	r3, #0
}
   25ec0:	0018      	movs	r0, r3
   25ec2:	46bd      	mov	sp, r7
   25ec4:	b002      	add	sp, #8
   25ec6:	bd80      	pop	{r7, pc}
   25ec8:	42001000 	.word	0x42001000
   25ecc:	42000800 	.word	0x42000800
   25ed0:	42000c00 	.word	0x42000c00
   25ed4:	42001800 	.word	0x42001800
   25ed8:	42001c00 	.word	0x42001c00
   25edc:	42001400 	.word	0x42001400
   25ee0:	00040003 	.word	0x00040003
   25ee4:	00050003 	.word	0x00050003
   25ee8:	00060003 	.word	0x00060003
   25eec:	00070003 	.word	0x00070003
   25ef0:	00010003 	.word	0x00010003
   25ef4:	001e0003 	.word	0x001e0003
   25ef8:	001f0003 	.word	0x001f0003
   25efc:	00080003 	.word	0x00080003
   25f00:	00090003 	.word	0x00090003
   25f04:	000a0003 	.word	0x000a0003
   25f08:	000b0003 	.word	0x000b0003
   25f0c:	00100003 	.word	0x00100003
   25f10:	00110003 	.word	0x00110003
   25f14:	00120003 	.word	0x00120003
   25f18:	00130003 	.word	0x00130003
   25f1c:	000c0003 	.word	0x000c0003
   25f20:	000d0003 	.word	0x000d0003
   25f24:	000e0003 	.word	0x000e0003
   25f28:	000f0003 	.word	0x000f0003
   25f2c:	00160003 	.word	0x00160003
   25f30:	00170003 	.word	0x00170003
   25f34:	00180003 	.word	0x00180003
   25f38:	00190003 	.word	0x00190003

00025f3c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   25f3c:	b590      	push	{r4, r7, lr}
   25f3e:	b08b      	sub	sp, #44	; 0x2c
   25f40:	af00      	add	r7, sp, #0
   25f42:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   25f44:	230c      	movs	r3, #12
   25f46:	18fb      	adds	r3, r7, r3
   25f48:	4a0f      	ldr	r2, [pc, #60]	; (25f88 <_sercom_get_sercom_inst_index+0x4c>)
   25f4a:	ca13      	ldmia	r2!, {r0, r1, r4}
   25f4c:	c313      	stmia	r3!, {r0, r1, r4}
   25f4e:	ca13      	ldmia	r2!, {r0, r1, r4}
   25f50:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   25f52:	2300      	movs	r3, #0
   25f54:	627b      	str	r3, [r7, #36]	; 0x24
   25f56:	e00e      	b.n	25f76 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   25f58:	230c      	movs	r3, #12
   25f5a:	18fb      	adds	r3, r7, r3
   25f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   25f5e:	0092      	lsls	r2, r2, #2
   25f60:	58d3      	ldr	r3, [r2, r3]
   25f62:	001a      	movs	r2, r3
   25f64:	687b      	ldr	r3, [r7, #4]
   25f66:	429a      	cmp	r2, r3
   25f68:	d102      	bne.n	25f70 <_sercom_get_sercom_inst_index+0x34>
			return i;
   25f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25f6c:	b2db      	uxtb	r3, r3
   25f6e:	e006      	b.n	25f7e <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   25f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25f72:	3301      	adds	r3, #1
   25f74:	627b      	str	r3, [r7, #36]	; 0x24
   25f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   25f78:	2b05      	cmp	r3, #5
   25f7a:	d9ed      	bls.n	25f58 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   25f7c:	2300      	movs	r3, #0
}
   25f7e:	0018      	movs	r0, r3
   25f80:	46bd      	mov	sp, r7
   25f82:	b00b      	add	sp, #44	; 0x2c
   25f84:	bd90      	pop	{r4, r7, pc}
   25f86:	46c0      	nop			; (mov r8, r8)
   25f88:	000379a8 	.word	0x000379a8

00025f8c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   25f8c:	b580      	push	{r7, lr}
   25f8e:	b082      	sub	sp, #8
   25f90:	af00      	add	r7, sp, #0
   25f92:	0002      	movs	r2, r0
   25f94:	1dfb      	adds	r3, r7, #7
   25f96:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   25f98:	46c0      	nop			; (mov r8, r8)
   25f9a:	46bd      	mov	sp, r7
   25f9c:	b002      	add	sp, #8
   25f9e:	bd80      	pop	{r7, pc}

00025fa0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   25fa0:	b580      	push	{r7, lr}
   25fa2:	b084      	sub	sp, #16
   25fa4:	af00      	add	r7, sp, #0
   25fa6:	0002      	movs	r2, r0
   25fa8:	6039      	str	r1, [r7, #0]
   25faa:	1dfb      	adds	r3, r7, #7
   25fac:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   25fae:	4b13      	ldr	r3, [pc, #76]	; (25ffc <_sercom_set_handler+0x5c>)
   25fb0:	781b      	ldrb	r3, [r3, #0]
   25fb2:	2201      	movs	r2, #1
   25fb4:	4053      	eors	r3, r2
   25fb6:	b2db      	uxtb	r3, r3
   25fb8:	2b00      	cmp	r3, #0
   25fba:	d015      	beq.n	25fe8 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   25fbc:	2300      	movs	r3, #0
   25fbe:	60fb      	str	r3, [r7, #12]
   25fc0:	e00c      	b.n	25fdc <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   25fc2:	4b0f      	ldr	r3, [pc, #60]	; (26000 <_sercom_set_handler+0x60>)
   25fc4:	68fa      	ldr	r2, [r7, #12]
   25fc6:	0092      	lsls	r2, r2, #2
   25fc8:	490e      	ldr	r1, [pc, #56]	; (26004 <_sercom_set_handler+0x64>)
   25fca:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   25fcc:	4b0e      	ldr	r3, [pc, #56]	; (26008 <_sercom_set_handler+0x68>)
   25fce:	68fa      	ldr	r2, [r7, #12]
   25fd0:	0092      	lsls	r2, r2, #2
   25fd2:	2100      	movs	r1, #0
   25fd4:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   25fd6:	68fb      	ldr	r3, [r7, #12]
   25fd8:	3301      	adds	r3, #1
   25fda:	60fb      	str	r3, [r7, #12]
   25fdc:	68fb      	ldr	r3, [r7, #12]
   25fde:	2b05      	cmp	r3, #5
   25fe0:	d9ef      	bls.n	25fc2 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   25fe2:	4b06      	ldr	r3, [pc, #24]	; (25ffc <_sercom_set_handler+0x5c>)
   25fe4:	2201      	movs	r2, #1
   25fe6:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   25fe8:	1dfb      	adds	r3, r7, #7
   25fea:	781a      	ldrb	r2, [r3, #0]
   25fec:	4b04      	ldr	r3, [pc, #16]	; (26000 <_sercom_set_handler+0x60>)
   25fee:	0092      	lsls	r2, r2, #2
   25ff0:	6839      	ldr	r1, [r7, #0]
   25ff2:	50d1      	str	r1, [r2, r3]
}
   25ff4:	46c0      	nop			; (mov r8, r8)
   25ff6:	46bd      	mov	sp, r7
   25ff8:	b004      	add	sp, #16
   25ffa:	bd80      	pop	{r7, pc}
   25ffc:	2000413a 	.word	0x2000413a
   26000:	2000413c 	.word	0x2000413c
   26004:	00025f8d 	.word	0x00025f8d
   26008:	200059c8 	.word	0x200059c8

0002600c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   2600c:	b590      	push	{r4, r7, lr}
   2600e:	b085      	sub	sp, #20
   26010:	af00      	add	r7, sp, #0
   26012:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   26014:	2308      	movs	r3, #8
   26016:	18fb      	adds	r3, r7, r3
   26018:	4a0b      	ldr	r2, [pc, #44]	; (26048 <_sercom_get_interrupt_vector+0x3c>)
   2601a:	6811      	ldr	r1, [r2, #0]
   2601c:	6019      	str	r1, [r3, #0]
   2601e:	8892      	ldrh	r2, [r2, #4]
   26020:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   26022:	230f      	movs	r3, #15
   26024:	18fc      	adds	r4, r7, r3
   26026:	687b      	ldr	r3, [r7, #4]
   26028:	0018      	movs	r0, r3
   2602a:	4b08      	ldr	r3, [pc, #32]	; (2604c <_sercom_get_interrupt_vector+0x40>)
   2602c:	4798      	blx	r3
   2602e:	0003      	movs	r3, r0
   26030:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   26032:	230f      	movs	r3, #15
   26034:	18fb      	adds	r3, r7, r3
   26036:	781b      	ldrb	r3, [r3, #0]
   26038:	2208      	movs	r2, #8
   2603a:	18ba      	adds	r2, r7, r2
   2603c:	5cd3      	ldrb	r3, [r2, r3]
   2603e:	b25b      	sxtb	r3, r3
}
   26040:	0018      	movs	r0, r3
   26042:	46bd      	mov	sp, r7
   26044:	b005      	add	sp, #20
   26046:	bd90      	pop	{r4, r7, pc}
   26048:	000379c0 	.word	0x000379c0
   2604c:	00025f3d 	.word	0x00025f3d

00026050 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   26050:	b580      	push	{r7, lr}
   26052:	af00      	add	r7, sp, #0
   26054:	4b03      	ldr	r3, [pc, #12]	; (26064 <SERCOM0_Handler+0x14>)
   26056:	681b      	ldr	r3, [r3, #0]
   26058:	2000      	movs	r0, #0
   2605a:	4798      	blx	r3
   2605c:	46c0      	nop			; (mov r8, r8)
   2605e:	46bd      	mov	sp, r7
   26060:	bd80      	pop	{r7, pc}
   26062:	46c0      	nop			; (mov r8, r8)
   26064:	2000413c 	.word	0x2000413c

00026068 <SERCOM1_Handler>:
   26068:	b580      	push	{r7, lr}
   2606a:	af00      	add	r7, sp, #0
   2606c:	4b03      	ldr	r3, [pc, #12]	; (2607c <SERCOM1_Handler+0x14>)
   2606e:	685b      	ldr	r3, [r3, #4]
   26070:	2001      	movs	r0, #1
   26072:	4798      	blx	r3
   26074:	46c0      	nop			; (mov r8, r8)
   26076:	46bd      	mov	sp, r7
   26078:	bd80      	pop	{r7, pc}
   2607a:	46c0      	nop			; (mov r8, r8)
   2607c:	2000413c 	.word	0x2000413c

00026080 <SERCOM2_Handler>:
   26080:	b580      	push	{r7, lr}
   26082:	af00      	add	r7, sp, #0
   26084:	4b03      	ldr	r3, [pc, #12]	; (26094 <SERCOM2_Handler+0x14>)
   26086:	689b      	ldr	r3, [r3, #8]
   26088:	2002      	movs	r0, #2
   2608a:	4798      	blx	r3
   2608c:	46c0      	nop			; (mov r8, r8)
   2608e:	46bd      	mov	sp, r7
   26090:	bd80      	pop	{r7, pc}
   26092:	46c0      	nop			; (mov r8, r8)
   26094:	2000413c 	.word	0x2000413c

00026098 <SERCOM3_Handler>:
   26098:	b580      	push	{r7, lr}
   2609a:	af00      	add	r7, sp, #0
   2609c:	4b03      	ldr	r3, [pc, #12]	; (260ac <SERCOM3_Handler+0x14>)
   2609e:	68db      	ldr	r3, [r3, #12]
   260a0:	2003      	movs	r0, #3
   260a2:	4798      	blx	r3
   260a4:	46c0      	nop			; (mov r8, r8)
   260a6:	46bd      	mov	sp, r7
   260a8:	bd80      	pop	{r7, pc}
   260aa:	46c0      	nop			; (mov r8, r8)
   260ac:	2000413c 	.word	0x2000413c

000260b0 <SERCOM4_Handler>:
   260b0:	b580      	push	{r7, lr}
   260b2:	af00      	add	r7, sp, #0
   260b4:	4b03      	ldr	r3, [pc, #12]	; (260c4 <SERCOM4_Handler+0x14>)
   260b6:	691b      	ldr	r3, [r3, #16]
   260b8:	2004      	movs	r0, #4
   260ba:	4798      	blx	r3
   260bc:	46c0      	nop			; (mov r8, r8)
   260be:	46bd      	mov	sp, r7
   260c0:	bd80      	pop	{r7, pc}
   260c2:	46c0      	nop			; (mov r8, r8)
   260c4:	2000413c 	.word	0x2000413c

000260c8 <SERCOM5_Handler>:
   260c8:	b580      	push	{r7, lr}
   260ca:	af00      	add	r7, sp, #0
   260cc:	4b03      	ldr	r3, [pc, #12]	; (260dc <SERCOM5_Handler+0x14>)
   260ce:	695b      	ldr	r3, [r3, #20]
   260d0:	2005      	movs	r0, #5
   260d2:	4798      	blx	r3
   260d4:	46c0      	nop			; (mov r8, r8)
   260d6:	46bd      	mov	sp, r7
   260d8:	bd80      	pop	{r7, pc}
   260da:	46c0      	nop			; (mov r8, r8)
   260dc:	2000413c 	.word	0x2000413c

000260e0 <system_pinmux_get_config_defaults>:
{
   260e0:	b580      	push	{r7, lr}
   260e2:	b082      	sub	sp, #8
   260e4:	af00      	add	r7, sp, #0
   260e6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   260e8:	687b      	ldr	r3, [r7, #4]
   260ea:	2280      	movs	r2, #128	; 0x80
   260ec:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   260ee:	687b      	ldr	r3, [r7, #4]
   260f0:	2200      	movs	r2, #0
   260f2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   260f4:	687b      	ldr	r3, [r7, #4]
   260f6:	2201      	movs	r2, #1
   260f8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   260fa:	687b      	ldr	r3, [r7, #4]
   260fc:	2200      	movs	r2, #0
   260fe:	70da      	strb	r2, [r3, #3]
}
   26100:	46c0      	nop			; (mov r8, r8)
   26102:	46bd      	mov	sp, r7
   26104:	b002      	add	sp, #8
   26106:	bd80      	pop	{r7, pc}

00026108 <system_pinmux_get_group_from_gpio_pin>:
{
   26108:	b580      	push	{r7, lr}
   2610a:	b084      	sub	sp, #16
   2610c:	af00      	add	r7, sp, #0
   2610e:	0002      	movs	r2, r0
   26110:	1dfb      	adds	r3, r7, #7
   26112:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26114:	230f      	movs	r3, #15
   26116:	18fb      	adds	r3, r7, r3
   26118:	1dfa      	adds	r2, r7, #7
   2611a:	7812      	ldrb	r2, [r2, #0]
   2611c:	09d2      	lsrs	r2, r2, #7
   2611e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26120:	230e      	movs	r3, #14
   26122:	18fb      	adds	r3, r7, r3
   26124:	1dfa      	adds	r2, r7, #7
   26126:	7812      	ldrb	r2, [r2, #0]
   26128:	0952      	lsrs	r2, r2, #5
   2612a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2612c:	4b0d      	ldr	r3, [pc, #52]	; (26164 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2612e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26130:	230f      	movs	r3, #15
   26132:	18fb      	adds	r3, r7, r3
   26134:	781b      	ldrb	r3, [r3, #0]
   26136:	2b00      	cmp	r3, #0
   26138:	d10f      	bne.n	2615a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2613a:	230f      	movs	r3, #15
   2613c:	18fb      	adds	r3, r7, r3
   2613e:	781b      	ldrb	r3, [r3, #0]
   26140:	009b      	lsls	r3, r3, #2
   26142:	2210      	movs	r2, #16
   26144:	4694      	mov	ip, r2
   26146:	44bc      	add	ip, r7
   26148:	4463      	add	r3, ip
   2614a:	3b08      	subs	r3, #8
   2614c:	681a      	ldr	r2, [r3, #0]
   2614e:	230e      	movs	r3, #14
   26150:	18fb      	adds	r3, r7, r3
   26152:	781b      	ldrb	r3, [r3, #0]
   26154:	01db      	lsls	r3, r3, #7
   26156:	18d3      	adds	r3, r2, r3
   26158:	e000      	b.n	2615c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2615a:	2300      	movs	r3, #0
}
   2615c:	0018      	movs	r0, r3
   2615e:	46bd      	mov	sp, r7
   26160:	b004      	add	sp, #16
   26162:	bd80      	pop	{r7, pc}
   26164:	41004400 	.word	0x41004400

00026168 <port_get_group_from_gpio_pin>:
{
   26168:	b580      	push	{r7, lr}
   2616a:	b082      	sub	sp, #8
   2616c:	af00      	add	r7, sp, #0
   2616e:	0002      	movs	r2, r0
   26170:	1dfb      	adds	r3, r7, #7
   26172:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26174:	1dfb      	adds	r3, r7, #7
   26176:	781b      	ldrb	r3, [r3, #0]
   26178:	0018      	movs	r0, r3
   2617a:	4b03      	ldr	r3, [pc, #12]	; (26188 <port_get_group_from_gpio_pin+0x20>)
   2617c:	4798      	blx	r3
   2617e:	0003      	movs	r3, r0
}
   26180:	0018      	movs	r0, r3
   26182:	46bd      	mov	sp, r7
   26184:	b002      	add	sp, #8
   26186:	bd80      	pop	{r7, pc}
   26188:	00026109 	.word	0x00026109

0002618c <port_pin_set_output_level>:
{
   2618c:	b580      	push	{r7, lr}
   2618e:	b084      	sub	sp, #16
   26190:	af00      	add	r7, sp, #0
   26192:	0002      	movs	r2, r0
   26194:	1dfb      	adds	r3, r7, #7
   26196:	701a      	strb	r2, [r3, #0]
   26198:	1dbb      	adds	r3, r7, #6
   2619a:	1c0a      	adds	r2, r1, #0
   2619c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2619e:	1dfb      	adds	r3, r7, #7
   261a0:	781b      	ldrb	r3, [r3, #0]
   261a2:	0018      	movs	r0, r3
   261a4:	4b0d      	ldr	r3, [pc, #52]	; (261dc <port_pin_set_output_level+0x50>)
   261a6:	4798      	blx	r3
   261a8:	0003      	movs	r3, r0
   261aa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   261ac:	1dfb      	adds	r3, r7, #7
   261ae:	781b      	ldrb	r3, [r3, #0]
   261b0:	221f      	movs	r2, #31
   261b2:	4013      	ands	r3, r2
   261b4:	2201      	movs	r2, #1
   261b6:	409a      	lsls	r2, r3
   261b8:	0013      	movs	r3, r2
   261ba:	60bb      	str	r3, [r7, #8]
	if (level) {
   261bc:	1dbb      	adds	r3, r7, #6
   261be:	781b      	ldrb	r3, [r3, #0]
   261c0:	2b00      	cmp	r3, #0
   261c2:	d003      	beq.n	261cc <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   261c4:	68fb      	ldr	r3, [r7, #12]
   261c6:	68ba      	ldr	r2, [r7, #8]
   261c8:	619a      	str	r2, [r3, #24]
}
   261ca:	e002      	b.n	261d2 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   261cc:	68fb      	ldr	r3, [r7, #12]
   261ce:	68ba      	ldr	r2, [r7, #8]
   261d0:	615a      	str	r2, [r3, #20]
}
   261d2:	46c0      	nop			; (mov r8, r8)
   261d4:	46bd      	mov	sp, r7
   261d6:	b004      	add	sp, #16
   261d8:	bd80      	pop	{r7, pc}
   261da:	46c0      	nop			; (mov r8, r8)
   261dc:	00026169 	.word	0x00026169

000261e0 <system_gclk_chan_get_config_defaults>:
{
   261e0:	b580      	push	{r7, lr}
   261e2:	b082      	sub	sp, #8
   261e4:	af00      	add	r7, sp, #0
   261e6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   261e8:	687b      	ldr	r3, [r7, #4]
   261ea:	2200      	movs	r2, #0
   261ec:	701a      	strb	r2, [r3, #0]
}
   261ee:	46c0      	nop			; (mov r8, r8)
   261f0:	46bd      	mov	sp, r7
   261f2:	b002      	add	sp, #8
   261f4:	bd80      	pop	{r7, pc}
	...

000261f8 <system_apb_clock_set_mask>:
{
   261f8:	b580      	push	{r7, lr}
   261fa:	b082      	sub	sp, #8
   261fc:	af00      	add	r7, sp, #0
   261fe:	0002      	movs	r2, r0
   26200:	6039      	str	r1, [r7, #0]
   26202:	1dfb      	adds	r3, r7, #7
   26204:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   26206:	1dfb      	adds	r3, r7, #7
   26208:	781b      	ldrb	r3, [r3, #0]
   2620a:	2b01      	cmp	r3, #1
   2620c:	d00a      	beq.n	26224 <system_apb_clock_set_mask+0x2c>
   2620e:	2b02      	cmp	r3, #2
   26210:	d00f      	beq.n	26232 <system_apb_clock_set_mask+0x3a>
   26212:	2b00      	cmp	r3, #0
   26214:	d114      	bne.n	26240 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   26216:	4b0e      	ldr	r3, [pc, #56]	; (26250 <system_apb_clock_set_mask+0x58>)
   26218:	4a0d      	ldr	r2, [pc, #52]	; (26250 <system_apb_clock_set_mask+0x58>)
   2621a:	6991      	ldr	r1, [r2, #24]
   2621c:	683a      	ldr	r2, [r7, #0]
   2621e:	430a      	orrs	r2, r1
   26220:	619a      	str	r2, [r3, #24]
			break;
   26222:	e00f      	b.n	26244 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   26224:	4b0a      	ldr	r3, [pc, #40]	; (26250 <system_apb_clock_set_mask+0x58>)
   26226:	4a0a      	ldr	r2, [pc, #40]	; (26250 <system_apb_clock_set_mask+0x58>)
   26228:	69d1      	ldr	r1, [r2, #28]
   2622a:	683a      	ldr	r2, [r7, #0]
   2622c:	430a      	orrs	r2, r1
   2622e:	61da      	str	r2, [r3, #28]
			break;
   26230:	e008      	b.n	26244 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   26232:	4b07      	ldr	r3, [pc, #28]	; (26250 <system_apb_clock_set_mask+0x58>)
   26234:	4a06      	ldr	r2, [pc, #24]	; (26250 <system_apb_clock_set_mask+0x58>)
   26236:	6a11      	ldr	r1, [r2, #32]
   26238:	683a      	ldr	r2, [r7, #0]
   2623a:	430a      	orrs	r2, r1
   2623c:	621a      	str	r2, [r3, #32]
			break;
   2623e:	e001      	b.n	26244 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   26240:	2317      	movs	r3, #23
   26242:	e000      	b.n	26246 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   26244:	2300      	movs	r3, #0
}
   26246:	0018      	movs	r0, r3
   26248:	46bd      	mov	sp, r7
   2624a:	b002      	add	sp, #8
   2624c:	bd80      	pop	{r7, pc}
   2624e:	46c0      	nop			; (mov r8, r8)
   26250:	40000400 	.word	0x40000400

00026254 <system_is_debugger_present>:
{
   26254:	b580      	push	{r7, lr}
   26256:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   26258:	4b05      	ldr	r3, [pc, #20]	; (26270 <system_is_debugger_present+0x1c>)
   2625a:	789b      	ldrb	r3, [r3, #2]
   2625c:	b2db      	uxtb	r3, r3
   2625e:	001a      	movs	r2, r3
   26260:	2302      	movs	r3, #2
   26262:	4013      	ands	r3, r2
   26264:	1e5a      	subs	r2, r3, #1
   26266:	4193      	sbcs	r3, r2
   26268:	b2db      	uxtb	r3, r3
}
   2626a:	0018      	movs	r0, r3
   2626c:	46bd      	mov	sp, r7
   2626e:	bd80      	pop	{r7, pc}
   26270:	41002000 	.word	0x41002000

00026274 <system_interrupt_enable>:
{
   26274:	b580      	push	{r7, lr}
   26276:	b082      	sub	sp, #8
   26278:	af00      	add	r7, sp, #0
   2627a:	0002      	movs	r2, r0
   2627c:	1dfb      	adds	r3, r7, #7
   2627e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   26280:	4b06      	ldr	r3, [pc, #24]	; (2629c <system_interrupt_enable+0x28>)
   26282:	1dfa      	adds	r2, r7, #7
   26284:	7812      	ldrb	r2, [r2, #0]
   26286:	0011      	movs	r1, r2
   26288:	221f      	movs	r2, #31
   2628a:	400a      	ands	r2, r1
   2628c:	2101      	movs	r1, #1
   2628e:	4091      	lsls	r1, r2
   26290:	000a      	movs	r2, r1
   26292:	601a      	str	r2, [r3, #0]
}
   26294:	46c0      	nop			; (mov r8, r8)
   26296:	46bd      	mov	sp, r7
   26298:	b002      	add	sp, #8
   2629a:	bd80      	pop	{r7, pc}
   2629c:	e000e100 	.word	0xe000e100

000262a0 <system_interrupt_disable>:
{
   262a0:	b580      	push	{r7, lr}
   262a2:	b082      	sub	sp, #8
   262a4:	af00      	add	r7, sp, #0
   262a6:	0002      	movs	r2, r0
   262a8:	1dfb      	adds	r3, r7, #7
   262aa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   262ac:	4a07      	ldr	r2, [pc, #28]	; (262cc <system_interrupt_disable+0x2c>)
   262ae:	1dfb      	adds	r3, r7, #7
   262b0:	781b      	ldrb	r3, [r3, #0]
   262b2:	0019      	movs	r1, r3
   262b4:	231f      	movs	r3, #31
   262b6:	400b      	ands	r3, r1
   262b8:	2101      	movs	r1, #1
   262ba:	4099      	lsls	r1, r3
   262bc:	000b      	movs	r3, r1
   262be:	0019      	movs	r1, r3
   262c0:	2380      	movs	r3, #128	; 0x80
   262c2:	50d1      	str	r1, [r2, r3]
}
   262c4:	46c0      	nop			; (mov r8, r8)
   262c6:	46bd      	mov	sp, r7
   262c8:	b002      	add	sp, #8
   262ca:	bd80      	pop	{r7, pc}
   262cc:	e000e100 	.word	0xe000e100

000262d0 <spi_is_syncing>:
{
   262d0:	b580      	push	{r7, lr}
   262d2:	b084      	sub	sp, #16
   262d4:	af00      	add	r7, sp, #0
   262d6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   262d8:	687b      	ldr	r3, [r7, #4]
   262da:	681b      	ldr	r3, [r3, #0]
   262dc:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   262de:	68fb      	ldr	r3, [r7, #12]
   262e0:	69db      	ldr	r3, [r3, #28]
   262e2:	1e5a      	subs	r2, r3, #1
   262e4:	4193      	sbcs	r3, r2
   262e6:	b2db      	uxtb	r3, r3
}
   262e8:	0018      	movs	r0, r3
   262ea:	46bd      	mov	sp, r7
   262ec:	b004      	add	sp, #16
   262ee:	bd80      	pop	{r7, pc}

000262f0 <spi_enable>:
{
   262f0:	b580      	push	{r7, lr}
   262f2:	b084      	sub	sp, #16
   262f4:	af00      	add	r7, sp, #0
   262f6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   262f8:	687b      	ldr	r3, [r7, #4]
   262fa:	681b      	ldr	r3, [r3, #0]
   262fc:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   262fe:	687b      	ldr	r3, [r7, #4]
   26300:	681b      	ldr	r3, [r3, #0]
   26302:	0018      	movs	r0, r3
   26304:	4b0b      	ldr	r3, [pc, #44]	; (26334 <spi_enable+0x44>)
   26306:	4798      	blx	r3
   26308:	0003      	movs	r3, r0
   2630a:	0018      	movs	r0, r3
   2630c:	4b0a      	ldr	r3, [pc, #40]	; (26338 <spi_enable+0x48>)
   2630e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26310:	46c0      	nop			; (mov r8, r8)
   26312:	687b      	ldr	r3, [r7, #4]
   26314:	0018      	movs	r0, r3
   26316:	4b09      	ldr	r3, [pc, #36]	; (2633c <spi_enable+0x4c>)
   26318:	4798      	blx	r3
   2631a:	1e03      	subs	r3, r0, #0
   2631c:	d1f9      	bne.n	26312 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2631e:	68fb      	ldr	r3, [r7, #12]
   26320:	681b      	ldr	r3, [r3, #0]
   26322:	2202      	movs	r2, #2
   26324:	431a      	orrs	r2, r3
   26326:	68fb      	ldr	r3, [r7, #12]
   26328:	601a      	str	r2, [r3, #0]
}
   2632a:	46c0      	nop			; (mov r8, r8)
   2632c:	46bd      	mov	sp, r7
   2632e:	b004      	add	sp, #16
   26330:	bd80      	pop	{r7, pc}
   26332:	46c0      	nop			; (mov r8, r8)
   26334:	0002600d 	.word	0x0002600d
   26338:	00026275 	.word	0x00026275
   2633c:	000262d1 	.word	0x000262d1

00026340 <spi_disable>:
{
   26340:	b580      	push	{r7, lr}
   26342:	b084      	sub	sp, #16
   26344:	af00      	add	r7, sp, #0
   26346:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26348:	687b      	ldr	r3, [r7, #4]
   2634a:	681b      	ldr	r3, [r3, #0]
   2634c:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2634e:	687b      	ldr	r3, [r7, #4]
   26350:	681b      	ldr	r3, [r3, #0]
   26352:	0018      	movs	r0, r3
   26354:	4b0e      	ldr	r3, [pc, #56]	; (26390 <spi_disable+0x50>)
   26356:	4798      	blx	r3
   26358:	0003      	movs	r3, r0
   2635a:	0018      	movs	r0, r3
   2635c:	4b0d      	ldr	r3, [pc, #52]	; (26394 <spi_disable+0x54>)
   2635e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   26360:	46c0      	nop			; (mov r8, r8)
   26362:	687b      	ldr	r3, [r7, #4]
   26364:	0018      	movs	r0, r3
   26366:	4b0c      	ldr	r3, [pc, #48]	; (26398 <spi_disable+0x58>)
   26368:	4798      	blx	r3
   2636a:	1e03      	subs	r3, r0, #0
   2636c:	d1f9      	bne.n	26362 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2636e:	68fb      	ldr	r3, [r7, #12]
   26370:	228f      	movs	r2, #143	; 0x8f
   26372:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   26374:	68fb      	ldr	r3, [r7, #12]
   26376:	228f      	movs	r2, #143	; 0x8f
   26378:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2637a:	68fb      	ldr	r3, [r7, #12]
   2637c:	681b      	ldr	r3, [r3, #0]
   2637e:	2202      	movs	r2, #2
   26380:	4393      	bics	r3, r2
   26382:	001a      	movs	r2, r3
   26384:	68fb      	ldr	r3, [r7, #12]
   26386:	601a      	str	r2, [r3, #0]
}
   26388:	46c0      	nop			; (mov r8, r8)
   2638a:	46bd      	mov	sp, r7
   2638c:	b004      	add	sp, #16
   2638e:	bd80      	pop	{r7, pc}
   26390:	0002600d 	.word	0x0002600d
   26394:	000262a1 	.word	0x000262a1
   26398:	000262d1 	.word	0x000262d1

0002639c <spi_is_write_complete>:
{
   2639c:	b580      	push	{r7, lr}
   2639e:	b084      	sub	sp, #16
   263a0:	af00      	add	r7, sp, #0
   263a2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   263a4:	687b      	ldr	r3, [r7, #4]
   263a6:	681b      	ldr	r3, [r3, #0]
   263a8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   263aa:	68fb      	ldr	r3, [r7, #12]
   263ac:	7e1b      	ldrb	r3, [r3, #24]
   263ae:	b2db      	uxtb	r3, r3
   263b0:	001a      	movs	r2, r3
   263b2:	2302      	movs	r3, #2
   263b4:	4013      	ands	r3, r2
   263b6:	1e5a      	subs	r2, r3, #1
   263b8:	4193      	sbcs	r3, r2
   263ba:	b2db      	uxtb	r3, r3
}
   263bc:	0018      	movs	r0, r3
   263be:	46bd      	mov	sp, r7
   263c0:	b004      	add	sp, #16
   263c2:	bd80      	pop	{r7, pc}

000263c4 <spi_is_ready_to_write>:
{
   263c4:	b580      	push	{r7, lr}
   263c6:	b084      	sub	sp, #16
   263c8:	af00      	add	r7, sp, #0
   263ca:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   263cc:	687b      	ldr	r3, [r7, #4]
   263ce:	681b      	ldr	r3, [r3, #0]
   263d0:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   263d2:	68fb      	ldr	r3, [r7, #12]
   263d4:	7e1b      	ldrb	r3, [r3, #24]
   263d6:	b2db      	uxtb	r3, r3
   263d8:	001a      	movs	r2, r3
   263da:	2301      	movs	r3, #1
   263dc:	4013      	ands	r3, r2
   263de:	1e5a      	subs	r2, r3, #1
   263e0:	4193      	sbcs	r3, r2
   263e2:	b2db      	uxtb	r3, r3
}
   263e4:	0018      	movs	r0, r3
   263e6:	46bd      	mov	sp, r7
   263e8:	b004      	add	sp, #16
   263ea:	bd80      	pop	{r7, pc}

000263ec <spi_is_ready_to_read>:
{
   263ec:	b580      	push	{r7, lr}
   263ee:	b084      	sub	sp, #16
   263f0:	af00      	add	r7, sp, #0
   263f2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   263f4:	687b      	ldr	r3, [r7, #4]
   263f6:	681b      	ldr	r3, [r3, #0]
   263f8:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   263fa:	68fb      	ldr	r3, [r7, #12]
   263fc:	7e1b      	ldrb	r3, [r3, #24]
   263fe:	b2db      	uxtb	r3, r3
   26400:	001a      	movs	r2, r3
   26402:	2304      	movs	r3, #4
   26404:	4013      	ands	r3, r2
   26406:	1e5a      	subs	r2, r3, #1
   26408:	4193      	sbcs	r3, r2
   2640a:	b2db      	uxtb	r3, r3
}
   2640c:	0018      	movs	r0, r3
   2640e:	46bd      	mov	sp, r7
   26410:	b004      	add	sp, #16
   26412:	bd80      	pop	{r7, pc}

00026414 <spi_write>:
{
   26414:	b580      	push	{r7, lr}
   26416:	b084      	sub	sp, #16
   26418:	af00      	add	r7, sp, #0
   2641a:	6078      	str	r0, [r7, #4]
   2641c:	000a      	movs	r2, r1
   2641e:	1cbb      	adds	r3, r7, #2
   26420:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26422:	687b      	ldr	r3, [r7, #4]
   26424:	681b      	ldr	r3, [r3, #0]
   26426:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   26428:	687b      	ldr	r3, [r7, #4]
   2642a:	0018      	movs	r0, r3
   2642c:	4b0a      	ldr	r3, [pc, #40]	; (26458 <spi_write+0x44>)
   2642e:	4798      	blx	r3
   26430:	0003      	movs	r3, r0
   26432:	001a      	movs	r2, r3
   26434:	2301      	movs	r3, #1
   26436:	4053      	eors	r3, r2
   26438:	b2db      	uxtb	r3, r3
   2643a:	2b00      	cmp	r3, #0
   2643c:	d001      	beq.n	26442 <spi_write+0x2e>
		return STATUS_BUSY;
   2643e:	2305      	movs	r3, #5
   26440:	e006      	b.n	26450 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   26442:	1cbb      	adds	r3, r7, #2
   26444:	881b      	ldrh	r3, [r3, #0]
   26446:	05db      	lsls	r3, r3, #23
   26448:	0dda      	lsrs	r2, r3, #23
   2644a:	68fb      	ldr	r3, [r7, #12]
   2644c:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2644e:	2300      	movs	r3, #0
}
   26450:	0018      	movs	r0, r3
   26452:	46bd      	mov	sp, r7
   26454:	b004      	add	sp, #16
   26456:	bd80      	pop	{r7, pc}
   26458:	000263c5 	.word	0x000263c5

0002645c <spi_read>:
{
   2645c:	b580      	push	{r7, lr}
   2645e:	b084      	sub	sp, #16
   26460:	af00      	add	r7, sp, #0
   26462:	6078      	str	r0, [r7, #4]
   26464:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   26466:	687b      	ldr	r3, [r7, #4]
   26468:	681b      	ldr	r3, [r3, #0]
   2646a:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   2646c:	687b      	ldr	r3, [r7, #4]
   2646e:	0018      	movs	r0, r3
   26470:	4b1b      	ldr	r3, [pc, #108]	; (264e0 <spi_read+0x84>)
   26472:	4798      	blx	r3
   26474:	0003      	movs	r3, r0
   26476:	001a      	movs	r2, r3
   26478:	2301      	movs	r3, #1
   2647a:	4053      	eors	r3, r2
   2647c:	b2db      	uxtb	r3, r3
   2647e:	2b00      	cmp	r3, #0
   26480:	d001      	beq.n	26486 <spi_read+0x2a>
		return STATUS_ERR_IO;
   26482:	2310      	movs	r3, #16
   26484:	e027      	b.n	264d6 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   26486:	230f      	movs	r3, #15
   26488:	18fb      	adds	r3, r7, r3
   2648a:	2200      	movs	r2, #0
   2648c:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2648e:	68bb      	ldr	r3, [r7, #8]
   26490:	8b5b      	ldrh	r3, [r3, #26]
   26492:	b29b      	uxth	r3, r3
   26494:	001a      	movs	r2, r3
   26496:	2304      	movs	r3, #4
   26498:	4013      	ands	r3, r2
   2649a:	d006      	beq.n	264aa <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   2649c:	230f      	movs	r3, #15
   2649e:	18fb      	adds	r3, r7, r3
   264a0:	221e      	movs	r2, #30
   264a2:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   264a4:	68bb      	ldr	r3, [r7, #8]
   264a6:	2204      	movs	r2, #4
   264a8:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   264aa:	687b      	ldr	r3, [r7, #4]
   264ac:	799b      	ldrb	r3, [r3, #6]
   264ae:	2b01      	cmp	r3, #1
   264b0:	d108      	bne.n	264c4 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   264b2:	68bb      	ldr	r3, [r7, #8]
   264b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   264b6:	b29b      	uxth	r3, r3
   264b8:	05db      	lsls	r3, r3, #23
   264ba:	0ddb      	lsrs	r3, r3, #23
   264bc:	b29a      	uxth	r2, r3
   264be:	683b      	ldr	r3, [r7, #0]
   264c0:	801a      	strh	r2, [r3, #0]
   264c2:	e005      	b.n	264d0 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   264c4:	68bb      	ldr	r3, [r7, #8]
   264c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   264c8:	b2db      	uxtb	r3, r3
   264ca:	b29a      	uxth	r2, r3
   264cc:	683b      	ldr	r3, [r7, #0]
   264ce:	801a      	strh	r2, [r3, #0]
	return retval;
   264d0:	230f      	movs	r3, #15
   264d2:	18fb      	adds	r3, r7, r3
   264d4:	781b      	ldrb	r3, [r3, #0]
}
   264d6:	0018      	movs	r0, r3
   264d8:	46bd      	mov	sp, r7
   264da:	b004      	add	sp, #16
   264dc:	bd80      	pop	{r7, pc}
   264de:	46c0      	nop			; (mov r8, r8)
   264e0:	000263ed 	.word	0x000263ed

000264e4 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   264e4:	b590      	push	{r4, r7, lr}
   264e6:	b089      	sub	sp, #36	; 0x24
   264e8:	af00      	add	r7, sp, #0
   264ea:	6078      	str	r0, [r7, #4]
   264ec:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   264ee:	230c      	movs	r3, #12
   264f0:	18fb      	adds	r3, r7, r3
   264f2:	2200      	movs	r2, #0
   264f4:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   264f6:	687b      	ldr	r3, [r7, #4]
   264f8:	681b      	ldr	r3, [r3, #0]
   264fa:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   264fc:	687b      	ldr	r3, [r7, #4]
   264fe:	0018      	movs	r0, r3
   26500:	4b24      	ldr	r3, [pc, #144]	; (26594 <spi_set_baudrate+0xb0>)
   26502:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   26504:	46c0      	nop			; (mov r8, r8)
   26506:	687b      	ldr	r3, [r7, #4]
   26508:	0018      	movs	r0, r3
   2650a:	4b23      	ldr	r3, [pc, #140]	; (26598 <spi_set_baudrate+0xb4>)
   2650c:	4798      	blx	r3
   2650e:	1e03      	subs	r3, r0, #0
   26510:	d1f9      	bne.n	26506 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   26512:	687b      	ldr	r3, [r7, #4]
   26514:	681b      	ldr	r3, [r3, #0]
   26516:	0018      	movs	r0, r3
   26518:	4b20      	ldr	r3, [pc, #128]	; (2659c <spi_set_baudrate+0xb8>)
   2651a:	4798      	blx	r3
   2651c:	0003      	movs	r3, r0
   2651e:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26520:	69bb      	ldr	r3, [r7, #24]
   26522:	3314      	adds	r3, #20
   26524:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   26526:	697b      	ldr	r3, [r7, #20]
   26528:	b2db      	uxtb	r3, r3
   2652a:	0018      	movs	r0, r3
   2652c:	4b1c      	ldr	r3, [pc, #112]	; (265a0 <spi_set_baudrate+0xbc>)
   2652e:	4798      	blx	r3
   26530:	0003      	movs	r3, r0
   26532:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   26534:	230f      	movs	r3, #15
   26536:	18fc      	adds	r4, r7, r3
   26538:	230c      	movs	r3, #12
   2653a:	18fa      	adds	r2, r7, r3
   2653c:	6939      	ldr	r1, [r7, #16]
   2653e:	683b      	ldr	r3, [r7, #0]
   26540:	0018      	movs	r0, r3
   26542:	4b18      	ldr	r3, [pc, #96]	; (265a4 <spi_set_baudrate+0xc0>)
   26544:	4798      	blx	r3
   26546:	0003      	movs	r3, r0
   26548:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   2654a:	230f      	movs	r3, #15
   2654c:	18fb      	adds	r3, r7, r3
   2654e:	781b      	ldrb	r3, [r3, #0]
   26550:	2b00      	cmp	r3, #0
   26552:	d001      	beq.n	26558 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   26554:	2317      	movs	r3, #23
   26556:	e018      	b.n	2658a <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   26558:	230c      	movs	r3, #12
   2655a:	18fb      	adds	r3, r7, r3
   2655c:	881b      	ldrh	r3, [r3, #0]
   2655e:	b2da      	uxtb	r2, r3
   26560:	69fb      	ldr	r3, [r7, #28]
   26562:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   26564:	46c0      	nop			; (mov r8, r8)
   26566:	687b      	ldr	r3, [r7, #4]
   26568:	0018      	movs	r0, r3
   2656a:	4b0b      	ldr	r3, [pc, #44]	; (26598 <spi_set_baudrate+0xb4>)
   2656c:	4798      	blx	r3
   2656e:	1e03      	subs	r3, r0, #0
   26570:	d1f9      	bne.n	26566 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   26572:	687b      	ldr	r3, [r7, #4]
   26574:	0018      	movs	r0, r3
   26576:	4b0c      	ldr	r3, [pc, #48]	; (265a8 <spi_set_baudrate+0xc4>)
   26578:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2657a:	46c0      	nop			; (mov r8, r8)
   2657c:	687b      	ldr	r3, [r7, #4]
   2657e:	0018      	movs	r0, r3
   26580:	4b05      	ldr	r3, [pc, #20]	; (26598 <spi_set_baudrate+0xb4>)
   26582:	4798      	blx	r3
   26584:	1e03      	subs	r3, r0, #0
   26586:	d1f9      	bne.n	2657c <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   26588:	2300      	movs	r3, #0
}
   2658a:	0018      	movs	r0, r3
   2658c:	46bd      	mov	sp, r7
   2658e:	b009      	add	sp, #36	; 0x24
   26590:	bd90      	pop	{r4, r7, pc}
   26592:	46c0      	nop			; (mov r8, r8)
   26594:	00026341 	.word	0x00026341
   26598:	000262d1 	.word	0x000262d1
   2659c:	00025f3d 	.word	0x00025f3d
   265a0:	000288f1 	.word	0x000288f1
   265a4:	00025ab7 	.word	0x00025ab7
   265a8:	000262f1 	.word	0x000262f1

000265ac <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   265ac:	b590      	push	{r4, r7, lr}
   265ae:	b093      	sub	sp, #76	; 0x4c
   265b0:	af00      	add	r7, sp, #0
   265b2:	6078      	str	r0, [r7, #4]
   265b4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   265b6:	687b      	ldr	r3, [r7, #4]
   265b8:	681b      	ldr	r3, [r3, #0]
   265ba:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   265bc:	687b      	ldr	r3, [r7, #4]
   265be:	681b      	ldr	r3, [r3, #0]
   265c0:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   265c2:	231c      	movs	r3, #28
   265c4:	18fb      	adds	r3, r7, r3
   265c6:	0018      	movs	r0, r3
   265c8:	4b75      	ldr	r3, [pc, #468]	; (267a0 <_spi_set_config+0x1f4>)
   265ca:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   265cc:	231c      	movs	r3, #28
   265ce:	18fb      	adds	r3, r7, r3
   265d0:	2200      	movs	r2, #0
   265d2:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   265d4:	683b      	ldr	r3, [r7, #0]
   265d6:	781b      	ldrb	r3, [r3, #0]
   265d8:	2b00      	cmp	r3, #0
   265da:	d103      	bne.n	265e4 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   265dc:	231c      	movs	r3, #28
   265de:	18fb      	adds	r3, r7, r3
   265e0:	2200      	movs	r2, #0
   265e2:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   265e4:	683b      	ldr	r3, [r7, #0]
   265e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   265e8:	230c      	movs	r3, #12
   265ea:	18fb      	adds	r3, r7, r3
   265ec:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   265ee:	683b      	ldr	r3, [r7, #0]
   265f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   265f2:	230c      	movs	r3, #12
   265f4:	18fb      	adds	r3, r7, r3
   265f6:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   265f8:	683b      	ldr	r3, [r7, #0]
   265fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   265fc:	230c      	movs	r3, #12
   265fe:	18fb      	adds	r3, r7, r3
   26600:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   26602:	683b      	ldr	r3, [r7, #0]
   26604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   26606:	230c      	movs	r3, #12
   26608:	18fb      	adds	r3, r7, r3
   2660a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2660c:	2347      	movs	r3, #71	; 0x47
   2660e:	18fb      	adds	r3, r7, r3
   26610:	2200      	movs	r2, #0
   26612:	701a      	strb	r2, [r3, #0]
   26614:	e02c      	b.n	26670 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   26616:	2347      	movs	r3, #71	; 0x47
   26618:	18fb      	adds	r3, r7, r3
   2661a:	781a      	ldrb	r2, [r3, #0]
   2661c:	230c      	movs	r3, #12
   2661e:	18fb      	adds	r3, r7, r3
   26620:	0092      	lsls	r2, r2, #2
   26622:	58d3      	ldr	r3, [r2, r3]
   26624:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   26626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26628:	2b00      	cmp	r3, #0
   2662a:	d109      	bne.n	26640 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2662c:	2347      	movs	r3, #71	; 0x47
   2662e:	18fb      	adds	r3, r7, r3
   26630:	781a      	ldrb	r2, [r3, #0]
   26632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   26634:	0011      	movs	r1, r2
   26636:	0018      	movs	r0, r3
   26638:	4b5a      	ldr	r3, [pc, #360]	; (267a4 <_spi_set_config+0x1f8>)
   2663a:	4798      	blx	r3
   2663c:	0003      	movs	r3, r0
   2663e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   26640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26642:	3301      	adds	r3, #1
   26644:	d00d      	beq.n	26662 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   26646:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26648:	b2da      	uxtb	r2, r3
   2664a:	231c      	movs	r3, #28
   2664c:	18fb      	adds	r3, r7, r3
   2664e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   26650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   26652:	0c1b      	lsrs	r3, r3, #16
   26654:	b2db      	uxtb	r3, r3
   26656:	221c      	movs	r2, #28
   26658:	18ba      	adds	r2, r7, r2
   2665a:	0011      	movs	r1, r2
   2665c:	0018      	movs	r0, r3
   2665e:	4b52      	ldr	r3, [pc, #328]	; (267a8 <_spi_set_config+0x1fc>)
   26660:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   26662:	2347      	movs	r3, #71	; 0x47
   26664:	18fb      	adds	r3, r7, r3
   26666:	781a      	ldrb	r2, [r3, #0]
   26668:	2347      	movs	r3, #71	; 0x47
   2666a:	18fb      	adds	r3, r7, r3
   2666c:	3201      	adds	r2, #1
   2666e:	701a      	strb	r2, [r3, #0]
   26670:	2347      	movs	r3, #71	; 0x47
   26672:	18fb      	adds	r3, r7, r3
   26674:	781b      	ldrb	r3, [r3, #0]
   26676:	2b03      	cmp	r3, #3
   26678:	d9cd      	bls.n	26616 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2667a:	683b      	ldr	r3, [r7, #0]
   2667c:	781a      	ldrb	r2, [r3, #0]
   2667e:	687b      	ldr	r3, [r7, #4]
   26680:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   26682:	683b      	ldr	r3, [r7, #0]
   26684:	7c1a      	ldrb	r2, [r3, #16]
   26686:	687b      	ldr	r3, [r7, #4]
   26688:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2668a:	683b      	ldr	r3, [r7, #0]
   2668c:	7c9a      	ldrb	r2, [r3, #18]
   2668e:	687b      	ldr	r3, [r7, #4]
   26690:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   26692:	683b      	ldr	r3, [r7, #0]
   26694:	7d1a      	ldrb	r2, [r3, #20]
   26696:	687b      	ldr	r3, [r7, #4]
   26698:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2669a:	230a      	movs	r3, #10
   2669c:	18fb      	adds	r3, r7, r3
   2669e:	2200      	movs	r2, #0
   266a0:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   266a2:	2300      	movs	r3, #0
   266a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   266a6:	2300      	movs	r3, #0
   266a8:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   266aa:	683b      	ldr	r3, [r7, #0]
   266ac:	781b      	ldrb	r3, [r3, #0]
   266ae:	2b01      	cmp	r3, #1
   266b0:	d129      	bne.n	26706 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   266b2:	687b      	ldr	r3, [r7, #4]
   266b4:	681b      	ldr	r3, [r3, #0]
   266b6:	0018      	movs	r0, r3
   266b8:	4b3c      	ldr	r3, [pc, #240]	; (267ac <_spi_set_config+0x200>)
   266ba:	4798      	blx	r3
   266bc:	0003      	movs	r3, r0
   266be:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   266c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   266c2:	3314      	adds	r3, #20
   266c4:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   266c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   266c8:	b2db      	uxtb	r3, r3
   266ca:	0018      	movs	r0, r3
   266cc:	4b38      	ldr	r3, [pc, #224]	; (267b0 <_spi_set_config+0x204>)
   266ce:	4798      	blx	r3
   266d0:	0003      	movs	r3, r0
   266d2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   266d4:	683b      	ldr	r3, [r7, #0]
   266d6:	699b      	ldr	r3, [r3, #24]
   266d8:	2223      	movs	r2, #35	; 0x23
   266da:	18bc      	adds	r4, r7, r2
   266dc:	220a      	movs	r2, #10
   266de:	18ba      	adds	r2, r7, r2
   266e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
   266e2:	0018      	movs	r0, r3
   266e4:	4b33      	ldr	r3, [pc, #204]	; (267b4 <_spi_set_config+0x208>)
   266e6:	4798      	blx	r3
   266e8:	0003      	movs	r3, r0
   266ea:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   266ec:	2323      	movs	r3, #35	; 0x23
   266ee:	18fb      	adds	r3, r7, r3
   266f0:	781b      	ldrb	r3, [r3, #0]
   266f2:	2b00      	cmp	r3, #0
   266f4:	d001      	beq.n	266fa <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   266f6:	2317      	movs	r3, #23
   266f8:	e04e      	b.n	26798 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   266fa:	230a      	movs	r3, #10
   266fc:	18fb      	adds	r3, r7, r3
   266fe:	881b      	ldrh	r3, [r3, #0]
   26700:	b2da      	uxtb	r2, r3
   26702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26704:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   26706:	683b      	ldr	r3, [r7, #0]
   26708:	685b      	ldr	r3, [r3, #4]
   2670a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2670c:	4313      	orrs	r3, r2
   2670e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   26710:	683b      	ldr	r3, [r7, #0]
   26712:	689b      	ldr	r3, [r3, #8]
   26714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26716:	4313      	orrs	r3, r2
   26718:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   2671a:	683b      	ldr	r3, [r7, #0]
   2671c:	68db      	ldr	r3, [r3, #12]
   2671e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   26720:	4313      	orrs	r3, r2
   26722:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   26724:	683b      	ldr	r3, [r7, #0]
   26726:	7c1b      	ldrb	r3, [r3, #16]
   26728:	001a      	movs	r2, r3
   2672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2672c:	4313      	orrs	r3, r2
   2672e:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   26730:	683b      	ldr	r3, [r7, #0]
   26732:	7c5b      	ldrb	r3, [r3, #17]
   26734:	2b00      	cmp	r3, #0
   26736:	d103      	bne.n	26740 <_spi_set_config+0x194>
   26738:	4b1f      	ldr	r3, [pc, #124]	; (267b8 <_spi_set_config+0x20c>)
   2673a:	4798      	blx	r3
   2673c:	1e03      	subs	r3, r0, #0
   2673e:	d003      	beq.n	26748 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   26740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26742:	2280      	movs	r2, #128	; 0x80
   26744:	4313      	orrs	r3, r2
   26746:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   26748:	683b      	ldr	r3, [r7, #0]
   2674a:	7c9b      	ldrb	r3, [r3, #18]
   2674c:	2b00      	cmp	r3, #0
   2674e:	d004      	beq.n	2675a <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   26750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26752:	2280      	movs	r2, #128	; 0x80
   26754:	0292      	lsls	r2, r2, #10
   26756:	4313      	orrs	r3, r2
   26758:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   2675a:	683b      	ldr	r3, [r7, #0]
   2675c:	7cdb      	ldrb	r3, [r3, #19]
   2675e:	2b00      	cmp	r3, #0
   26760:	d004      	beq.n	2676c <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   26762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26764:	2280      	movs	r2, #128	; 0x80
   26766:	0092      	lsls	r2, r2, #2
   26768:	4313      	orrs	r3, r2
   2676a:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   2676c:	683b      	ldr	r3, [r7, #0]
   2676e:	7d1b      	ldrb	r3, [r3, #20]
   26770:	2b00      	cmp	r3, #0
   26772:	d004      	beq.n	2677e <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   26774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26776:	2280      	movs	r2, #128	; 0x80
   26778:	0192      	lsls	r2, r2, #6
   2677a:	4313      	orrs	r3, r2
   2677c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   2677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26780:	681a      	ldr	r2, [r3, #0]
   26782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   26784:	431a      	orrs	r2, r3
   26786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26788:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   2678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2678c:	685a      	ldr	r2, [r3, #4]
   2678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   26790:	431a      	orrs	r2, r3
   26792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   26794:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   26796:	2300      	movs	r3, #0
}
   26798:	0018      	movs	r0, r3
   2679a:	46bd      	mov	sp, r7
   2679c:	b013      	add	sp, #76	; 0x4c
   2679e:	bd90      	pop	{r4, r7, pc}
   267a0:	000260e1 	.word	0x000260e1
   267a4:	00025d81 	.word	0x00025d81
   267a8:	00028b2d 	.word	0x00028b2d
   267ac:	00025f3d 	.word	0x00025f3d
   267b0:	000288f1 	.word	0x000288f1
   267b4:	00025ab7 	.word	0x00025ab7
   267b8:	00026255 	.word	0x00026255

000267bc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   267bc:	b590      	push	{r4, r7, lr}
   267be:	b08b      	sub	sp, #44	; 0x2c
   267c0:	af00      	add	r7, sp, #0
   267c2:	60f8      	str	r0, [r7, #12]
   267c4:	60b9      	str	r1, [r7, #8]
   267c6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   267c8:	68fb      	ldr	r3, [r7, #12]
   267ca:	68ba      	ldr	r2, [r7, #8]
   267cc:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   267ce:	68fb      	ldr	r3, [r7, #12]
   267d0:	681b      	ldr	r3, [r3, #0]
   267d2:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   267d4:	6a3b      	ldr	r3, [r7, #32]
   267d6:	681b      	ldr	r3, [r3, #0]
   267d8:	2202      	movs	r2, #2
   267da:	4013      	ands	r3, r2
   267dc:	d001      	beq.n	267e2 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   267de:	231c      	movs	r3, #28
   267e0:	e09c      	b.n	2691c <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   267e2:	6a3b      	ldr	r3, [r7, #32]
   267e4:	681b      	ldr	r3, [r3, #0]
   267e6:	2201      	movs	r2, #1
   267e8:	4013      	ands	r3, r2
   267ea:	d001      	beq.n	267f0 <spi_init+0x34>
		return STATUS_BUSY;
   267ec:	2305      	movs	r3, #5
   267ee:	e095      	b.n	2691c <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   267f0:	68fb      	ldr	r3, [r7, #12]
   267f2:	681b      	ldr	r3, [r3, #0]
   267f4:	0018      	movs	r0, r3
   267f6:	4b4b      	ldr	r3, [pc, #300]	; (26924 <spi_init+0x168>)
   267f8:	4798      	blx	r3
   267fa:	0003      	movs	r3, r0
   267fc:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   267fe:	69fb      	ldr	r3, [r7, #28]
   26800:	3302      	adds	r3, #2
   26802:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   26804:	69fb      	ldr	r3, [r7, #28]
   26806:	3314      	adds	r3, #20
   26808:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2680a:	2201      	movs	r2, #1
   2680c:	69bb      	ldr	r3, [r7, #24]
   2680e:	409a      	lsls	r2, r3
   26810:	0013      	movs	r3, r2
   26812:	0019      	movs	r1, r3
   26814:	2002      	movs	r0, #2
   26816:	4b44      	ldr	r3, [pc, #272]	; (26928 <spi_init+0x16c>)
   26818:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2681a:	2310      	movs	r3, #16
   2681c:	18fb      	adds	r3, r7, r3
   2681e:	0018      	movs	r0, r3
   26820:	4b42      	ldr	r3, [pc, #264]	; (2692c <spi_init+0x170>)
   26822:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   26824:	687b      	ldr	r3, [r7, #4]
   26826:	2224      	movs	r2, #36	; 0x24
   26828:	5c9a      	ldrb	r2, [r3, r2]
   2682a:	2310      	movs	r3, #16
   2682c:	18fb      	adds	r3, r7, r3
   2682e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   26830:	697b      	ldr	r3, [r7, #20]
   26832:	b2db      	uxtb	r3, r3
   26834:	2210      	movs	r2, #16
   26836:	18ba      	adds	r2, r7, r2
   26838:	0011      	movs	r1, r2
   2683a:	0018      	movs	r0, r3
   2683c:	4b3c      	ldr	r3, [pc, #240]	; (26930 <spi_init+0x174>)
   2683e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   26840:	697b      	ldr	r3, [r7, #20]
   26842:	b2db      	uxtb	r3, r3
   26844:	0018      	movs	r0, r3
   26846:	4b3b      	ldr	r3, [pc, #236]	; (26934 <spi_init+0x178>)
   26848:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   2684a:	687b      	ldr	r3, [r7, #4]
   2684c:	2224      	movs	r2, #36	; 0x24
   2684e:	5c9b      	ldrb	r3, [r3, r2]
   26850:	2100      	movs	r1, #0
   26852:	0018      	movs	r0, r3
   26854:	4b38      	ldr	r3, [pc, #224]	; (26938 <spi_init+0x17c>)
   26856:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   26858:	687b      	ldr	r3, [r7, #4]
   2685a:	781b      	ldrb	r3, [r3, #0]
   2685c:	2b01      	cmp	r3, #1
   2685e:	d105      	bne.n	2686c <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   26860:	6a3b      	ldr	r3, [r7, #32]
   26862:	681b      	ldr	r3, [r3, #0]
   26864:	220c      	movs	r2, #12
   26866:	431a      	orrs	r2, r3
   26868:	6a3b      	ldr	r3, [r7, #32]
   2686a:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2686c:	2327      	movs	r3, #39	; 0x27
   2686e:	18fb      	adds	r3, r7, r3
   26870:	2200      	movs	r2, #0
   26872:	701a      	strb	r2, [r3, #0]
   26874:	e010      	b.n	26898 <spi_init+0xdc>
		module->callback[i]        = NULL;
   26876:	2327      	movs	r3, #39	; 0x27
   26878:	18fb      	adds	r3, r7, r3
   2687a:	781b      	ldrb	r3, [r3, #0]
   2687c:	68fa      	ldr	r2, [r7, #12]
   2687e:	3302      	adds	r3, #2
   26880:	009b      	lsls	r3, r3, #2
   26882:	18d3      	adds	r3, r2, r3
   26884:	3304      	adds	r3, #4
   26886:	2200      	movs	r2, #0
   26888:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   2688a:	2327      	movs	r3, #39	; 0x27
   2688c:	18fb      	adds	r3, r7, r3
   2688e:	781a      	ldrb	r2, [r3, #0]
   26890:	2327      	movs	r3, #39	; 0x27
   26892:	18fb      	adds	r3, r7, r3
   26894:	3201      	adds	r2, #1
   26896:	701a      	strb	r2, [r3, #0]
   26898:	2327      	movs	r3, #39	; 0x27
   2689a:	18fb      	adds	r3, r7, r3
   2689c:	781b      	ldrb	r3, [r3, #0]
   2689e:	2b06      	cmp	r3, #6
   268a0:	d9e9      	bls.n	26876 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   268a2:	68fb      	ldr	r3, [r7, #12]
   268a4:	2200      	movs	r2, #0
   268a6:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   268a8:	68fb      	ldr	r3, [r7, #12]
   268aa:	2200      	movs	r2, #0
   268ac:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   268ae:	68fb      	ldr	r3, [r7, #12]
   268b0:	2200      	movs	r2, #0
   268b2:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   268b4:	68fb      	ldr	r3, [r7, #12]
   268b6:	2200      	movs	r2, #0
   268b8:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   268ba:	68fb      	ldr	r3, [r7, #12]
   268bc:	2236      	movs	r2, #54	; 0x36
   268be:	2100      	movs	r1, #0
   268c0:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   268c2:	68fb      	ldr	r3, [r7, #12]
   268c4:	2237      	movs	r2, #55	; 0x37
   268c6:	2100      	movs	r1, #0
   268c8:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   268ca:	68fb      	ldr	r3, [r7, #12]
   268cc:	2238      	movs	r2, #56	; 0x38
   268ce:	2100      	movs	r1, #0
   268d0:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   268d2:	68fb      	ldr	r3, [r7, #12]
   268d4:	2203      	movs	r2, #3
   268d6:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   268d8:	68fb      	ldr	r3, [r7, #12]
   268da:	2200      	movs	r2, #0
   268dc:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   268de:	68fb      	ldr	r3, [r7, #12]
   268e0:	681b      	ldr	r3, [r3, #0]
   268e2:	2213      	movs	r2, #19
   268e4:	18bc      	adds	r4, r7, r2
   268e6:	0018      	movs	r0, r3
   268e8:	4b0e      	ldr	r3, [pc, #56]	; (26924 <spi_init+0x168>)
   268ea:	4798      	blx	r3
   268ec:	0003      	movs	r3, r0
   268ee:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   268f0:	4a12      	ldr	r2, [pc, #72]	; (2693c <spi_init+0x180>)
   268f2:	2313      	movs	r3, #19
   268f4:	18fb      	adds	r3, r7, r3
   268f6:	781b      	ldrb	r3, [r3, #0]
   268f8:	0011      	movs	r1, r2
   268fa:	0018      	movs	r0, r3
   268fc:	4b10      	ldr	r3, [pc, #64]	; (26940 <spi_init+0x184>)
   268fe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   26900:	2313      	movs	r3, #19
   26902:	18fb      	adds	r3, r7, r3
   26904:	781a      	ldrb	r2, [r3, #0]
   26906:	4b0f      	ldr	r3, [pc, #60]	; (26944 <spi_init+0x188>)
   26908:	0092      	lsls	r2, r2, #2
   2690a:	68f9      	ldr	r1, [r7, #12]
   2690c:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   2690e:	687a      	ldr	r2, [r7, #4]
   26910:	68fb      	ldr	r3, [r7, #12]
   26912:	0011      	movs	r1, r2
   26914:	0018      	movs	r0, r3
   26916:	4b0c      	ldr	r3, [pc, #48]	; (26948 <spi_init+0x18c>)
   26918:	4798      	blx	r3
   2691a:	0003      	movs	r3, r0
}
   2691c:	0018      	movs	r0, r3
   2691e:	46bd      	mov	sp, r7
   26920:	b00b      	add	sp, #44	; 0x2c
   26922:	bd90      	pop	{r4, r7, pc}
   26924:	00025f3d 	.word	0x00025f3d
   26928:	000261f9 	.word	0x000261f9
   2692c:	000261e1 	.word	0x000261e1
   26930:	000287cd 	.word	0x000287cd
   26934:	00028811 	.word	0x00028811
   26938:	00025cf5 	.word	0x00025cf5
   2693c:	00026e15 	.word	0x00026e15
   26940:	00025fa1 	.word	0x00025fa1
   26944:	200059c8 	.word	0x200059c8
   26948:	000265ad 	.word	0x000265ad

0002694c <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   2694c:	b590      	push	{r4, r7, lr}
   2694e:	b087      	sub	sp, #28
   26950:	af00      	add	r7, sp, #0
   26952:	60f8      	str	r0, [r7, #12]
   26954:	60b9      	str	r1, [r7, #8]
   26956:	0019      	movs	r1, r3
   26958:	1dbb      	adds	r3, r7, #6
   2695a:	801a      	strh	r2, [r3, #0]
   2695c:	1d3b      	adds	r3, r7, #4
   2695e:	1c0a      	adds	r2, r1, #0
   26960:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   26962:	68fb      	ldr	r3, [r7, #12]
   26964:	2238      	movs	r2, #56	; 0x38
   26966:	5c9b      	ldrb	r3, [r3, r2]
   26968:	b2db      	uxtb	r3, r3
   2696a:	2b05      	cmp	r3, #5
   2696c:	d101      	bne.n	26972 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   2696e:	2305      	movs	r3, #5
   26970:	e07a      	b.n	26a68 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   26972:	1dbb      	adds	r3, r7, #6
   26974:	881b      	ldrh	r3, [r3, #0]
   26976:	2b00      	cmp	r3, #0
   26978:	d101      	bne.n	2697e <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   2697a:	2317      	movs	r3, #23
   2697c:	e074      	b.n	26a68 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   2697e:	68fb      	ldr	r3, [r7, #12]
   26980:	79db      	ldrb	r3, [r3, #7]
   26982:	2201      	movs	r2, #1
   26984:	4053      	eors	r3, r2
   26986:	b2db      	uxtb	r3, r3
   26988:	2b00      	cmp	r3, #0
   2698a:	d001      	beq.n	26990 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   2698c:	231c      	movs	r3, #28
   2698e:	e06b      	b.n	26a68 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   26990:	2316      	movs	r3, #22
   26992:	18fb      	adds	r3, r7, r3
   26994:	2200      	movs	r2, #0
   26996:	801a      	strh	r2, [r3, #0]

	while (length--) {
   26998:	e05e      	b.n	26a58 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   2699a:	68fb      	ldr	r3, [r7, #12]
   2699c:	795b      	ldrb	r3, [r3, #5]
   2699e:	2b01      	cmp	r3, #1
   269a0:	d112      	bne.n	269c8 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   269a2:	46c0      	nop			; (mov r8, r8)
   269a4:	68fb      	ldr	r3, [r7, #12]
   269a6:	0018      	movs	r0, r3
   269a8:	4b31      	ldr	r3, [pc, #196]	; (26a70 <spi_read_buffer_wait+0x124>)
   269aa:	4798      	blx	r3
   269ac:	0003      	movs	r3, r0
   269ae:	001a      	movs	r2, r3
   269b0:	2301      	movs	r3, #1
   269b2:	4053      	eors	r3, r2
   269b4:	b2db      	uxtb	r3, r3
   269b6:	2b00      	cmp	r3, #0
   269b8:	d1f4      	bne.n	269a4 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   269ba:	1d3b      	adds	r3, r7, #4
   269bc:	881a      	ldrh	r2, [r3, #0]
   269be:	68fb      	ldr	r3, [r7, #12]
   269c0:	0011      	movs	r1, r2
   269c2:	0018      	movs	r0, r3
   269c4:	4b2b      	ldr	r3, [pc, #172]	; (26a74 <spi_read_buffer_wait+0x128>)
   269c6:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   269c8:	46c0      	nop			; (mov r8, r8)
   269ca:	68fb      	ldr	r3, [r7, #12]
   269cc:	0018      	movs	r0, r3
   269ce:	4b2a      	ldr	r3, [pc, #168]	; (26a78 <spi_read_buffer_wait+0x12c>)
   269d0:	4798      	blx	r3
   269d2:	0003      	movs	r3, r0
   269d4:	001a      	movs	r2, r3
   269d6:	2301      	movs	r3, #1
   269d8:	4053      	eors	r3, r2
   269da:	b2db      	uxtb	r3, r3
   269dc:	2b00      	cmp	r3, #0
   269de:	d1f4      	bne.n	269ca <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   269e0:	2312      	movs	r3, #18
   269e2:	18fb      	adds	r3, r7, r3
   269e4:	2200      	movs	r2, #0
   269e6:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   269e8:	2315      	movs	r3, #21
   269ea:	18fc      	adds	r4, r7, r3
   269ec:	2312      	movs	r3, #18
   269ee:	18fa      	adds	r2, r7, r3
   269f0:	68fb      	ldr	r3, [r7, #12]
   269f2:	0011      	movs	r1, r2
   269f4:	0018      	movs	r0, r3
   269f6:	4b21      	ldr	r3, [pc, #132]	; (26a7c <spi_read_buffer_wait+0x130>)
   269f8:	4798      	blx	r3
   269fa:	0003      	movs	r3, r0
   269fc:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   269fe:	2315      	movs	r3, #21
   26a00:	18fb      	adds	r3, r7, r3
   26a02:	781b      	ldrb	r3, [r3, #0]
   26a04:	2b00      	cmp	r3, #0
   26a06:	d003      	beq.n	26a10 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   26a08:	2315      	movs	r3, #21
   26a0a:	18fb      	adds	r3, r7, r3
   26a0c:	781b      	ldrb	r3, [r3, #0]
   26a0e:	e02b      	b.n	26a68 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   26a10:	2316      	movs	r3, #22
   26a12:	18fb      	adds	r3, r7, r3
   26a14:	881b      	ldrh	r3, [r3, #0]
   26a16:	2216      	movs	r2, #22
   26a18:	18ba      	adds	r2, r7, r2
   26a1a:	1c59      	adds	r1, r3, #1
   26a1c:	8011      	strh	r1, [r2, #0]
   26a1e:	001a      	movs	r2, r3
   26a20:	68bb      	ldr	r3, [r7, #8]
   26a22:	189b      	adds	r3, r3, r2
   26a24:	2212      	movs	r2, #18
   26a26:	18ba      	adds	r2, r7, r2
   26a28:	8812      	ldrh	r2, [r2, #0]
   26a2a:	b2d2      	uxtb	r2, r2
   26a2c:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26a2e:	68fb      	ldr	r3, [r7, #12]
   26a30:	799b      	ldrb	r3, [r3, #6]
   26a32:	2b01      	cmp	r3, #1
   26a34:	d110      	bne.n	26a58 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   26a36:	2316      	movs	r3, #22
   26a38:	18fb      	adds	r3, r7, r3
   26a3a:	881b      	ldrh	r3, [r3, #0]
   26a3c:	2216      	movs	r2, #22
   26a3e:	18ba      	adds	r2, r7, r2
   26a40:	1c59      	adds	r1, r3, #1
   26a42:	8011      	strh	r1, [r2, #0]
   26a44:	001a      	movs	r2, r3
   26a46:	68bb      	ldr	r3, [r7, #8]
   26a48:	189b      	adds	r3, r3, r2
   26a4a:	2212      	movs	r2, #18
   26a4c:	18ba      	adds	r2, r7, r2
   26a4e:	8812      	ldrh	r2, [r2, #0]
   26a50:	0a12      	lsrs	r2, r2, #8
   26a52:	b292      	uxth	r2, r2
   26a54:	b2d2      	uxtb	r2, r2
   26a56:	701a      	strb	r2, [r3, #0]
	while (length--) {
   26a58:	1dbb      	adds	r3, r7, #6
   26a5a:	881b      	ldrh	r3, [r3, #0]
   26a5c:	1dba      	adds	r2, r7, #6
   26a5e:	1e59      	subs	r1, r3, #1
   26a60:	8011      	strh	r1, [r2, #0]
   26a62:	2b00      	cmp	r3, #0
   26a64:	d199      	bne.n	2699a <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   26a66:	2300      	movs	r3, #0
}
   26a68:	0018      	movs	r0, r3
   26a6a:	46bd      	mov	sp, r7
   26a6c:	b007      	add	sp, #28
   26a6e:	bd90      	pop	{r4, r7, pc}
   26a70:	000263c5 	.word	0x000263c5
   26a74:	00026415 	.word	0x00026415
   26a78:	000263ed 	.word	0x000263ed
   26a7c:	0002645d 	.word	0x0002645d

00026a80 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   26a80:	b580      	push	{r7, lr}
   26a82:	b086      	sub	sp, #24
   26a84:	af00      	add	r7, sp, #0
   26a86:	60f8      	str	r0, [r7, #12]
   26a88:	60b9      	str	r1, [r7, #8]
   26a8a:	1dfb      	adds	r3, r7, #7
   26a8c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   26a8e:	68fb      	ldr	r3, [r7, #12]
   26a90:	795b      	ldrb	r3, [r3, #5]
   26a92:	2b01      	cmp	r3, #1
   26a94:	d001      	beq.n	26a9a <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   26a96:	2315      	movs	r3, #21
   26a98:	e05c      	b.n	26b54 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   26a9a:	68fb      	ldr	r3, [r7, #12]
   26a9c:	7a1b      	ldrb	r3, [r3, #8]
   26a9e:	2201      	movs	r2, #1
   26aa0:	4053      	eors	r3, r2
   26aa2:	b2db      	uxtb	r3, r3
   26aa4:	2b00      	cmp	r3, #0
   26aa6:	d054      	beq.n	26b52 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   26aa8:	1dfb      	adds	r3, r7, #7
   26aaa:	781b      	ldrb	r3, [r3, #0]
   26aac:	2b00      	cmp	r3, #0
   26aae:	d04a      	beq.n	26b46 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   26ab0:	68bb      	ldr	r3, [r7, #8]
   26ab2:	785b      	ldrb	r3, [r3, #1]
   26ab4:	2b00      	cmp	r3, #0
   26ab6:	d03f      	beq.n	26b38 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   26ab8:	68fb      	ldr	r3, [r7, #12]
   26aba:	0018      	movs	r0, r3
   26abc:	4b27      	ldr	r3, [pc, #156]	; (26b5c <spi_select_slave+0xdc>)
   26abe:	4798      	blx	r3
   26ac0:	0003      	movs	r3, r0
   26ac2:	001a      	movs	r2, r3
   26ac4:	2301      	movs	r3, #1
   26ac6:	4053      	eors	r3, r2
   26ac8:	b2db      	uxtb	r3, r3
   26aca:	2b00      	cmp	r3, #0
   26acc:	d007      	beq.n	26ade <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   26ace:	68bb      	ldr	r3, [r7, #8]
   26ad0:	781b      	ldrb	r3, [r3, #0]
   26ad2:	2101      	movs	r1, #1
   26ad4:	0018      	movs	r0, r3
   26ad6:	4b22      	ldr	r3, [pc, #136]	; (26b60 <spi_select_slave+0xe0>)
   26ad8:	4798      	blx	r3
					return STATUS_BUSY;
   26ada:	2305      	movs	r3, #5
   26adc:	e03a      	b.n	26b54 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   26ade:	68bb      	ldr	r3, [r7, #8]
   26ae0:	781b      	ldrb	r3, [r3, #0]
   26ae2:	2100      	movs	r1, #0
   26ae4:	0018      	movs	r0, r3
   26ae6:	4b1e      	ldr	r3, [pc, #120]	; (26b60 <spi_select_slave+0xe0>)
   26ae8:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   26aea:	68bb      	ldr	r3, [r7, #8]
   26aec:	789b      	ldrb	r3, [r3, #2]
   26aee:	b29a      	uxth	r2, r3
   26af0:	68fb      	ldr	r3, [r7, #12]
   26af2:	0011      	movs	r1, r2
   26af4:	0018      	movs	r0, r3
   26af6:	4b1b      	ldr	r3, [pc, #108]	; (26b64 <spi_select_slave+0xe4>)
   26af8:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   26afa:	68fb      	ldr	r3, [r7, #12]
   26afc:	79db      	ldrb	r3, [r3, #7]
   26afe:	2201      	movs	r2, #1
   26b00:	4053      	eors	r3, r2
   26b02:	b2db      	uxtb	r3, r3
   26b04:	2b00      	cmp	r3, #0
   26b06:	d024      	beq.n	26b52 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   26b08:	46c0      	nop			; (mov r8, r8)
   26b0a:	68fb      	ldr	r3, [r7, #12]
   26b0c:	0018      	movs	r0, r3
   26b0e:	4b16      	ldr	r3, [pc, #88]	; (26b68 <spi_select_slave+0xe8>)
   26b10:	4798      	blx	r3
   26b12:	0003      	movs	r3, r0
   26b14:	001a      	movs	r2, r3
   26b16:	2301      	movs	r3, #1
   26b18:	4053      	eors	r3, r2
   26b1a:	b2db      	uxtb	r3, r3
   26b1c:	2b00      	cmp	r3, #0
   26b1e:	d1f4      	bne.n	26b0a <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   26b20:	2316      	movs	r3, #22
   26b22:	18fb      	adds	r3, r7, r3
   26b24:	2200      	movs	r2, #0
   26b26:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   26b28:	2316      	movs	r3, #22
   26b2a:	18fa      	adds	r2, r7, r3
   26b2c:	68fb      	ldr	r3, [r7, #12]
   26b2e:	0011      	movs	r1, r2
   26b30:	0018      	movs	r0, r3
   26b32:	4b0e      	ldr	r3, [pc, #56]	; (26b6c <spi_select_slave+0xec>)
   26b34:	4798      	blx	r3
   26b36:	e00c      	b.n	26b52 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   26b38:	68bb      	ldr	r3, [r7, #8]
   26b3a:	781b      	ldrb	r3, [r3, #0]
   26b3c:	2100      	movs	r1, #0
   26b3e:	0018      	movs	r0, r3
   26b40:	4b07      	ldr	r3, [pc, #28]	; (26b60 <spi_select_slave+0xe0>)
   26b42:	4798      	blx	r3
   26b44:	e005      	b.n	26b52 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   26b46:	68bb      	ldr	r3, [r7, #8]
   26b48:	781b      	ldrb	r3, [r3, #0]
   26b4a:	2101      	movs	r1, #1
   26b4c:	0018      	movs	r0, r3
   26b4e:	4b04      	ldr	r3, [pc, #16]	; (26b60 <spi_select_slave+0xe0>)
   26b50:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   26b52:	2300      	movs	r3, #0
}
   26b54:	0018      	movs	r0, r3
   26b56:	46bd      	mov	sp, r7
   26b58:	b006      	add	sp, #24
   26b5a:	bd80      	pop	{r7, pc}
   26b5c:	000263c5 	.word	0x000263c5
   26b60:	0002618d 	.word	0x0002618d
   26b64:	00026415 	.word	0x00026415
   26b68:	000263ed 	.word	0x000263ed
   26b6c:	0002645d 	.word	0x0002645d

00026b70 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   26b70:	b580      	push	{r7, lr}
   26b72:	b086      	sub	sp, #24
   26b74:	af00      	add	r7, sp, #0
   26b76:	60f8      	str	r0, [r7, #12]
   26b78:	60b9      	str	r1, [r7, #8]
   26b7a:	1dbb      	adds	r3, r7, #6
   26b7c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   26b7e:	68fb      	ldr	r3, [r7, #12]
   26b80:	2238      	movs	r2, #56	; 0x38
   26b82:	5c9b      	ldrb	r3, [r3, r2]
   26b84:	b2db      	uxtb	r3, r3
   26b86:	2b05      	cmp	r3, #5
   26b88:	d101      	bne.n	26b8e <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   26b8a:	2305      	movs	r3, #5
   26b8c:	e087      	b.n	26c9e <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   26b8e:	1dbb      	adds	r3, r7, #6
   26b90:	881b      	ldrh	r3, [r3, #0]
   26b92:	2b00      	cmp	r3, #0
   26b94:	d101      	bne.n	26b9a <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   26b96:	2317      	movs	r3, #23
   26b98:	e081      	b.n	26c9e <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   26b9a:	2316      	movs	r3, #22
   26b9c:	18fb      	adds	r3, r7, r3
   26b9e:	2200      	movs	r2, #0
   26ba0:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   26ba2:	2314      	movs	r3, #20
   26ba4:	18fb      	adds	r3, r7, r3
   26ba6:	1dba      	adds	r2, r7, #6
   26ba8:	8812      	ldrh	r2, [r2, #0]
   26baa:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   26bac:	e05f      	b.n	26c6e <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   26bae:	46c0      	nop			; (mov r8, r8)
   26bb0:	68fb      	ldr	r3, [r7, #12]
   26bb2:	0018      	movs	r0, r3
   26bb4:	4b3c      	ldr	r3, [pc, #240]	; (26ca8 <spi_write_buffer_wait+0x138>)
   26bb6:	4798      	blx	r3
   26bb8:	0003      	movs	r3, r0
   26bba:	001a      	movs	r2, r3
   26bbc:	2301      	movs	r3, #1
   26bbe:	4053      	eors	r3, r2
   26bc0:	b2db      	uxtb	r3, r3
   26bc2:	2b00      	cmp	r3, #0
   26bc4:	d1f4      	bne.n	26bb0 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   26bc6:	2316      	movs	r3, #22
   26bc8:	18fb      	adds	r3, r7, r3
   26bca:	881b      	ldrh	r3, [r3, #0]
   26bcc:	2216      	movs	r2, #22
   26bce:	18ba      	adds	r2, r7, r2
   26bd0:	1c59      	adds	r1, r3, #1
   26bd2:	8011      	strh	r1, [r2, #0]
   26bd4:	001a      	movs	r2, r3
   26bd6:	68bb      	ldr	r3, [r7, #8]
   26bd8:	189b      	adds	r3, r3, r2
   26bda:	781a      	ldrb	r2, [r3, #0]
   26bdc:	2312      	movs	r3, #18
   26bde:	18fb      	adds	r3, r7, r3
   26be0:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26be2:	68fb      	ldr	r3, [r7, #12]
   26be4:	799b      	ldrb	r3, [r3, #6]
   26be6:	2b01      	cmp	r3, #1
   26be8:	d115      	bne.n	26c16 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   26bea:	2316      	movs	r3, #22
   26bec:	18fb      	adds	r3, r7, r3
   26bee:	881b      	ldrh	r3, [r3, #0]
   26bf0:	2216      	movs	r2, #22
   26bf2:	18ba      	adds	r2, r7, r2
   26bf4:	1c59      	adds	r1, r3, #1
   26bf6:	8011      	strh	r1, [r2, #0]
   26bf8:	001a      	movs	r2, r3
   26bfa:	68bb      	ldr	r3, [r7, #8]
   26bfc:	189b      	adds	r3, r3, r2
   26bfe:	781b      	ldrb	r3, [r3, #0]
   26c00:	021b      	lsls	r3, r3, #8
   26c02:	b21a      	sxth	r2, r3
   26c04:	2312      	movs	r3, #18
   26c06:	18fb      	adds	r3, r7, r3
   26c08:	2100      	movs	r1, #0
   26c0a:	5e5b      	ldrsh	r3, [r3, r1]
   26c0c:	4313      	orrs	r3, r2
   26c0e:	b21a      	sxth	r2, r3
   26c10:	2312      	movs	r3, #18
   26c12:	18fb      	adds	r3, r7, r3
   26c14:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   26c16:	2312      	movs	r3, #18
   26c18:	18fb      	adds	r3, r7, r3
   26c1a:	881a      	ldrh	r2, [r3, #0]
   26c1c:	68fb      	ldr	r3, [r7, #12]
   26c1e:	0011      	movs	r1, r2
   26c20:	0018      	movs	r0, r3
   26c22:	4b22      	ldr	r3, [pc, #136]	; (26cac <spi_write_buffer_wait+0x13c>)
   26c24:	4798      	blx	r3

		if (module->receiver_enabled) {
   26c26:	68fb      	ldr	r3, [r7, #12]
   26c28:	79db      	ldrb	r3, [r3, #7]
   26c2a:	2214      	movs	r2, #20
   26c2c:	18ba      	adds	r2, r7, r2
   26c2e:	2114      	movs	r1, #20
   26c30:	1879      	adds	r1, r7, r1
   26c32:	8809      	ldrh	r1, [r1, #0]
   26c34:	8011      	strh	r1, [r2, #0]
   26c36:	2b00      	cmp	r3, #0
   26c38:	d019      	beq.n	26c6e <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   26c3a:	46c0      	nop			; (mov r8, r8)
   26c3c:	68fb      	ldr	r3, [r7, #12]
   26c3e:	0018      	movs	r0, r3
   26c40:	4b1b      	ldr	r3, [pc, #108]	; (26cb0 <spi_write_buffer_wait+0x140>)
   26c42:	4798      	blx	r3
   26c44:	0003      	movs	r3, r0
   26c46:	001a      	movs	r2, r3
   26c48:	2301      	movs	r3, #1
   26c4a:	4053      	eors	r3, r2
   26c4c:	b2db      	uxtb	r3, r3
   26c4e:	2b00      	cmp	r3, #0
   26c50:	d1f4      	bne.n	26c3c <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   26c52:	2310      	movs	r3, #16
   26c54:	18fa      	adds	r2, r7, r3
   26c56:	68fb      	ldr	r3, [r7, #12]
   26c58:	0011      	movs	r1, r2
   26c5a:	0018      	movs	r0, r3
   26c5c:	4b15      	ldr	r3, [pc, #84]	; (26cb4 <spi_write_buffer_wait+0x144>)
   26c5e:	4798      	blx	r3
			flush_length--;
   26c60:	2314      	movs	r3, #20
   26c62:	18fb      	adds	r3, r7, r3
   26c64:	881a      	ldrh	r2, [r3, #0]
   26c66:	2314      	movs	r3, #20
   26c68:	18fb      	adds	r3, r7, r3
   26c6a:	3a01      	subs	r2, #1
   26c6c:	801a      	strh	r2, [r3, #0]
	while (length--) {
   26c6e:	1dbb      	adds	r3, r7, #6
   26c70:	881b      	ldrh	r3, [r3, #0]
   26c72:	1dba      	adds	r2, r7, #6
   26c74:	1e59      	subs	r1, r3, #1
   26c76:	8011      	strh	r1, [r2, #0]
   26c78:	2b00      	cmp	r3, #0
   26c7a:	d198      	bne.n	26bae <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   26c7c:	68fb      	ldr	r3, [r7, #12]
   26c7e:	795b      	ldrb	r3, [r3, #5]
   26c80:	2b01      	cmp	r3, #1
   26c82:	d10b      	bne.n	26c9c <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   26c84:	46c0      	nop			; (mov r8, r8)
   26c86:	68fb      	ldr	r3, [r7, #12]
   26c88:	0018      	movs	r0, r3
   26c8a:	4b0b      	ldr	r3, [pc, #44]	; (26cb8 <spi_write_buffer_wait+0x148>)
   26c8c:	4798      	blx	r3
   26c8e:	0003      	movs	r3, r0
   26c90:	001a      	movs	r2, r3
   26c92:	2301      	movs	r3, #1
   26c94:	4053      	eors	r3, r2
   26c96:	b2db      	uxtb	r3, r3
   26c98:	2b00      	cmp	r3, #0
   26c9a:	d1f4      	bne.n	26c86 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   26c9c:	2300      	movs	r3, #0
}
   26c9e:	0018      	movs	r0, r3
   26ca0:	46bd      	mov	sp, r7
   26ca2:	b006      	add	sp, #24
   26ca4:	bd80      	pop	{r7, pc}
   26ca6:	46c0      	nop			; (mov r8, r8)
   26ca8:	000263c5 	.word	0x000263c5
   26cac:	00026415 	.word	0x00026415
   26cb0:	000263ed 	.word	0x000263ed
   26cb4:	0002645d 	.word	0x0002645d
   26cb8:	0002639d 	.word	0x0002639d

00026cbc <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   26cbc:	b580      	push	{r7, lr}
   26cbe:	b084      	sub	sp, #16
   26cc0:	af00      	add	r7, sp, #0
   26cc2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26cc4:	687b      	ldr	r3, [r7, #4]
   26cc6:	681b      	ldr	r3, [r3, #0]
   26cc8:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   26cca:	687b      	ldr	r3, [r7, #4]
   26ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26cce:	781b      	ldrb	r3, [r3, #0]
   26cd0:	b2da      	uxtb	r2, r3
   26cd2:	230e      	movs	r3, #14
   26cd4:	18fb      	adds	r3, r7, r3
   26cd6:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   26cd8:	687b      	ldr	r3, [r7, #4]
   26cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26cdc:	1c5a      	adds	r2, r3, #1
   26cde:	687b      	ldr	r3, [r7, #4]
   26ce0:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26ce2:	687b      	ldr	r3, [r7, #4]
   26ce4:	799b      	ldrb	r3, [r3, #6]
   26ce6:	2b01      	cmp	r3, #1
   26ce8:	d113      	bne.n	26d12 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   26cea:	687b      	ldr	r3, [r7, #4]
   26cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26cee:	781b      	ldrb	r3, [r3, #0]
   26cf0:	b2db      	uxtb	r3, r3
   26cf2:	021b      	lsls	r3, r3, #8
   26cf4:	b21a      	sxth	r2, r3
   26cf6:	230e      	movs	r3, #14
   26cf8:	18fb      	adds	r3, r7, r3
   26cfa:	2100      	movs	r1, #0
   26cfc:	5e5b      	ldrsh	r3, [r3, r1]
   26cfe:	4313      	orrs	r3, r2
   26d00:	b21a      	sxth	r2, r3
   26d02:	230e      	movs	r3, #14
   26d04:	18fb      	adds	r3, r7, r3
   26d06:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   26d08:	687b      	ldr	r3, [r7, #4]
   26d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26d0c:	1c5a      	adds	r2, r3, #1
   26d0e:	687b      	ldr	r3, [r7, #4]
   26d10:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   26d12:	230e      	movs	r3, #14
   26d14:	18fb      	adds	r3, r7, r3
   26d16:	881b      	ldrh	r3, [r3, #0]
   26d18:	05db      	lsls	r3, r3, #23
   26d1a:	0dda      	lsrs	r2, r3, #23
   26d1c:	68bb      	ldr	r3, [r7, #8]
   26d1e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   26d20:	687b      	ldr	r3, [r7, #4]
   26d22:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   26d24:	b29b      	uxth	r3, r3
   26d26:	3b01      	subs	r3, #1
   26d28:	b29a      	uxth	r2, r3
   26d2a:	687b      	ldr	r3, [r7, #4]
   26d2c:	869a      	strh	r2, [r3, #52]	; 0x34
}
   26d2e:	46c0      	nop			; (mov r8, r8)
   26d30:	46bd      	mov	sp, r7
   26d32:	b004      	add	sp, #16
   26d34:	bd80      	pop	{r7, pc}
	...

00026d38 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   26d38:	b580      	push	{r7, lr}
   26d3a:	b084      	sub	sp, #16
   26d3c:	af00      	add	r7, sp, #0
   26d3e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26d40:	687b      	ldr	r3, [r7, #4]
   26d42:	681b      	ldr	r3, [r3, #0]
   26d44:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   26d46:	4b08      	ldr	r3, [pc, #32]	; (26d68 <_spi_write_dummy+0x30>)
   26d48:	881b      	ldrh	r3, [r3, #0]
   26d4a:	001a      	movs	r2, r3
   26d4c:	68fb      	ldr	r3, [r7, #12]
   26d4e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   26d50:	687b      	ldr	r3, [r7, #4]
   26d52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26d54:	b29b      	uxth	r3, r3
   26d56:	3b01      	subs	r3, #1
   26d58:	b29a      	uxth	r2, r3
   26d5a:	687b      	ldr	r3, [r7, #4]
   26d5c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   26d5e:	46c0      	nop			; (mov r8, r8)
   26d60:	46bd      	mov	sp, r7
   26d62:	b004      	add	sp, #16
   26d64:	bd80      	pop	{r7, pc}
   26d66:	46c0      	nop			; (mov r8, r8)
   26d68:	200059e0 	.word	0x200059e0

00026d6c <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   26d6c:	b580      	push	{r7, lr}
   26d6e:	b084      	sub	sp, #16
   26d70:	af00      	add	r7, sp, #0
   26d72:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26d74:	687b      	ldr	r3, [r7, #4]
   26d76:	681b      	ldr	r3, [r3, #0]
   26d78:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   26d7a:	230a      	movs	r3, #10
   26d7c:	18fb      	adds	r3, r7, r3
   26d7e:	2200      	movs	r2, #0
   26d80:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   26d82:	68fb      	ldr	r3, [r7, #12]
   26d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26d86:	230a      	movs	r3, #10
   26d88:	18fb      	adds	r3, r7, r3
   26d8a:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   26d8c:	687b      	ldr	r3, [r7, #4]
   26d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26d90:	b29b      	uxth	r3, r3
   26d92:	3b01      	subs	r3, #1
   26d94:	b29a      	uxth	r2, r3
   26d96:	687b      	ldr	r3, [r7, #4]
   26d98:	865a      	strh	r2, [r3, #50]	; 0x32
}
   26d9a:	46c0      	nop			; (mov r8, r8)
   26d9c:	46bd      	mov	sp, r7
   26d9e:	b004      	add	sp, #16
   26da0:	bd80      	pop	{r7, pc}

00026da2 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   26da2:	b580      	push	{r7, lr}
   26da4:	b084      	sub	sp, #16
   26da6:	af00      	add	r7, sp, #0
   26da8:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26daa:	687b      	ldr	r3, [r7, #4]
   26dac:	681b      	ldr	r3, [r3, #0]
   26dae:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   26db0:	68fb      	ldr	r3, [r7, #12]
   26db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26db4:	b29a      	uxth	r2, r3
   26db6:	230a      	movs	r3, #10
   26db8:	18fb      	adds	r3, r7, r3
   26dba:	05d2      	lsls	r2, r2, #23
   26dbc:	0dd2      	lsrs	r2, r2, #23
   26dbe:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   26dc0:	687b      	ldr	r3, [r7, #4]
   26dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26dc4:	220a      	movs	r2, #10
   26dc6:	18ba      	adds	r2, r7, r2
   26dc8:	8812      	ldrh	r2, [r2, #0]
   26dca:	b2d2      	uxtb	r2, r2
   26dcc:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   26dce:	687b      	ldr	r3, [r7, #4]
   26dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26dd2:	1c5a      	adds	r2, r3, #1
   26dd4:	687b      	ldr	r3, [r7, #4]
   26dd6:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   26dd8:	687b      	ldr	r3, [r7, #4]
   26dda:	799b      	ldrb	r3, [r3, #6]
   26ddc:	2b01      	cmp	r3, #1
   26dde:	d10d      	bne.n	26dfc <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   26de0:	687b      	ldr	r3, [r7, #4]
   26de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26de4:	220a      	movs	r2, #10
   26de6:	18ba      	adds	r2, r7, r2
   26de8:	8812      	ldrh	r2, [r2, #0]
   26dea:	0a12      	lsrs	r2, r2, #8
   26dec:	b292      	uxth	r2, r2
   26dee:	b2d2      	uxtb	r2, r2
   26df0:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   26df2:	687b      	ldr	r3, [r7, #4]
   26df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26df6:	1c5a      	adds	r2, r3, #1
   26df8:	687b      	ldr	r3, [r7, #4]
   26dfa:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   26dfc:	687b      	ldr	r3, [r7, #4]
   26dfe:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   26e00:	b29b      	uxth	r3, r3
   26e02:	3b01      	subs	r3, #1
   26e04:	b29a      	uxth	r2, r3
   26e06:	687b      	ldr	r3, [r7, #4]
   26e08:	861a      	strh	r2, [r3, #48]	; 0x30
}
   26e0a:	46c0      	nop			; (mov r8, r8)
   26e0c:	46bd      	mov	sp, r7
   26e0e:	b004      	add	sp, #16
   26e10:	bd80      	pop	{r7, pc}
	...

00026e14 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   26e14:	b580      	push	{r7, lr}
   26e16:	b086      	sub	sp, #24
   26e18:	af00      	add	r7, sp, #0
   26e1a:	0002      	movs	r2, r0
   26e1c:	1dfb      	adds	r3, r7, #7
   26e1e:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   26e20:	1dfb      	adds	r3, r7, #7
   26e22:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   26e24:	4b96      	ldr	r3, [pc, #600]	; (27080 <_spi_interrupt_handler+0x26c>)
   26e26:	0092      	lsls	r2, r2, #2
   26e28:	58d3      	ldr	r3, [r2, r3]
   26e2a:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   26e2c:	697b      	ldr	r3, [r7, #20]
   26e2e:	681b      	ldr	r3, [r3, #0]
   26e30:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   26e32:	697b      	ldr	r3, [r7, #20]
   26e34:	2237      	movs	r2, #55	; 0x37
   26e36:	5c9a      	ldrb	r2, [r3, r2]
   26e38:	697b      	ldr	r3, [r7, #20]
   26e3a:	2136      	movs	r1, #54	; 0x36
   26e3c:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   26e3e:	230f      	movs	r3, #15
   26e40:	18fb      	adds	r3, r7, r3
   26e42:	400a      	ands	r2, r1
   26e44:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   26e46:	693b      	ldr	r3, [r7, #16]
   26e48:	7e1b      	ldrb	r3, [r3, #24]
   26e4a:	b2da      	uxtb	r2, r3
   26e4c:	230c      	movs	r3, #12
   26e4e:	18fb      	adds	r3, r7, r3
   26e50:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   26e52:	693b      	ldr	r3, [r7, #16]
   26e54:	7d9b      	ldrb	r3, [r3, #22]
   26e56:	b2db      	uxtb	r3, r3
   26e58:	b29a      	uxth	r2, r3
   26e5a:	230c      	movs	r3, #12
   26e5c:	18fb      	adds	r3, r7, r3
   26e5e:	210c      	movs	r1, #12
   26e60:	1879      	adds	r1, r7, r1
   26e62:	8809      	ldrh	r1, [r1, #0]
   26e64:	400a      	ands	r2, r1
   26e66:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   26e68:	230c      	movs	r3, #12
   26e6a:	18fb      	adds	r3, r7, r3
   26e6c:	881b      	ldrh	r3, [r3, #0]
   26e6e:	2201      	movs	r2, #1
   26e70:	4013      	ands	r3, r2
   26e72:	d038      	beq.n	26ee6 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   26e74:	697b      	ldr	r3, [r7, #20]
   26e76:	795b      	ldrb	r3, [r3, #5]
   26e78:	2b01      	cmp	r3, #1
   26e7a:	d110      	bne.n	26e9e <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   26e7c:	697b      	ldr	r3, [r7, #20]
   26e7e:	7a5b      	ldrb	r3, [r3, #9]
   26e80:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   26e82:	2b00      	cmp	r3, #0
   26e84:	d10b      	bne.n	26e9e <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   26e86:	697b      	ldr	r3, [r7, #20]
   26e88:	0018      	movs	r0, r3
   26e8a:	4b7e      	ldr	r3, [pc, #504]	; (27084 <_spi_interrupt_handler+0x270>)
   26e8c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   26e8e:	697b      	ldr	r3, [r7, #20]
   26e90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26e92:	b29b      	uxth	r3, r3
   26e94:	2b00      	cmp	r3, #0
   26e96:	d102      	bne.n	26e9e <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   26e98:	693b      	ldr	r3, [r7, #16]
   26e9a:	2201      	movs	r2, #1
   26e9c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   26e9e:	697b      	ldr	r3, [r7, #20]
   26ea0:	795b      	ldrb	r3, [r3, #5]
		if (0
   26ea2:	2b01      	cmp	r3, #1
   26ea4:	d11f      	bne.n	26ee6 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   26ea6:	697b      	ldr	r3, [r7, #20]
   26ea8:	7a5b      	ldrb	r3, [r3, #9]
   26eaa:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   26eac:	2b00      	cmp	r3, #0
   26eae:	d01a      	beq.n	26ee6 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   26eb0:	697b      	ldr	r3, [r7, #20]
   26eb2:	0018      	movs	r0, r3
   26eb4:	4b74      	ldr	r3, [pc, #464]	; (27088 <_spi_interrupt_handler+0x274>)
   26eb6:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   26eb8:	697b      	ldr	r3, [r7, #20]
   26eba:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   26ebc:	b29b      	uxth	r3, r3
   26ebe:	2b00      	cmp	r3, #0
   26ec0:	d111      	bne.n	26ee6 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   26ec2:	693b      	ldr	r3, [r7, #16]
   26ec4:	2201      	movs	r2, #1
   26ec6:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   26ec8:	697b      	ldr	r3, [r7, #20]
   26eca:	7a5b      	ldrb	r3, [r3, #9]
   26ecc:	b2db      	uxtb	r3, r3
   26ece:	2b01      	cmp	r3, #1
   26ed0:	d109      	bne.n	26ee6 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   26ed2:	697b      	ldr	r3, [r7, #20]
   26ed4:	79db      	ldrb	r3, [r3, #7]
   26ed6:	2201      	movs	r2, #1
   26ed8:	4053      	eors	r3, r2
   26eda:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   26edc:	2b00      	cmp	r3, #0
   26ede:	d002      	beq.n	26ee6 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   26ee0:	693b      	ldr	r3, [r7, #16]
   26ee2:	2202      	movs	r2, #2
   26ee4:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   26ee6:	230c      	movs	r3, #12
   26ee8:	18fb      	adds	r3, r7, r3
   26eea:	881b      	ldrh	r3, [r3, #0]
   26eec:	2204      	movs	r2, #4
   26eee:	4013      	ands	r3, r2
   26ef0:	d100      	bne.n	26ef4 <_spi_interrupt_handler+0xe0>
   26ef2:	e07e      	b.n	26ff2 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   26ef4:	693b      	ldr	r3, [r7, #16]
   26ef6:	8b5b      	ldrh	r3, [r3, #26]
   26ef8:	b29b      	uxth	r3, r3
   26efa:	001a      	movs	r2, r3
   26efc:	2304      	movs	r3, #4
   26efe:	4013      	ands	r3, r2
   26f00:	d022      	beq.n	26f48 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   26f02:	697b      	ldr	r3, [r7, #20]
   26f04:	7a5b      	ldrb	r3, [r3, #9]
   26f06:	b2db      	uxtb	r3, r3
   26f08:	2b01      	cmp	r3, #1
   26f0a:	d014      	beq.n	26f36 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   26f0c:	697b      	ldr	r3, [r7, #20]
   26f0e:	2238      	movs	r2, #56	; 0x38
   26f10:	211e      	movs	r1, #30
   26f12:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   26f14:	697b      	ldr	r3, [r7, #20]
   26f16:	2203      	movs	r2, #3
   26f18:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   26f1a:	693b      	ldr	r3, [r7, #16]
   26f1c:	2205      	movs	r2, #5
   26f1e:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   26f20:	230f      	movs	r3, #15
   26f22:	18fb      	adds	r3, r7, r3
   26f24:	781b      	ldrb	r3, [r3, #0]
   26f26:	2208      	movs	r2, #8
   26f28:	4013      	ands	r3, r2
   26f2a:	d004      	beq.n	26f36 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   26f2c:	697b      	ldr	r3, [r7, #20]
   26f2e:	699b      	ldr	r3, [r3, #24]
   26f30:	697a      	ldr	r2, [r7, #20]
   26f32:	0010      	movs	r0, r2
   26f34:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   26f36:	693b      	ldr	r3, [r7, #16]
   26f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   26f3a:	230a      	movs	r3, #10
   26f3c:	18fb      	adds	r3, r7, r3
   26f3e:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   26f40:	693b      	ldr	r3, [r7, #16]
   26f42:	2204      	movs	r2, #4
   26f44:	835a      	strh	r2, [r3, #26]
   26f46:	e054      	b.n	26ff2 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   26f48:	697b      	ldr	r3, [r7, #20]
   26f4a:	7a5b      	ldrb	r3, [r3, #9]
   26f4c:	b2db      	uxtb	r3, r3
   26f4e:	2b01      	cmp	r3, #1
   26f50:	d11e      	bne.n	26f90 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   26f52:	697b      	ldr	r3, [r7, #20]
   26f54:	0018      	movs	r0, r3
   26f56:	4b4d      	ldr	r3, [pc, #308]	; (2708c <_spi_interrupt_handler+0x278>)
   26f58:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   26f5a:	697b      	ldr	r3, [r7, #20]
   26f5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   26f5e:	b29b      	uxth	r3, r3
   26f60:	2b00      	cmp	r3, #0
   26f62:	d146      	bne.n	26ff2 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   26f64:	693b      	ldr	r3, [r7, #16]
   26f66:	2204      	movs	r2, #4
   26f68:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   26f6a:	697b      	ldr	r3, [r7, #20]
   26f6c:	2238      	movs	r2, #56	; 0x38
   26f6e:	2100      	movs	r1, #0
   26f70:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   26f72:	697b      	ldr	r3, [r7, #20]
   26f74:	2203      	movs	r2, #3
   26f76:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   26f78:	230f      	movs	r3, #15
   26f7a:	18fb      	adds	r3, r7, r3
   26f7c:	781b      	ldrb	r3, [r3, #0]
   26f7e:	2201      	movs	r2, #1
   26f80:	4013      	ands	r3, r2
   26f82:	d036      	beq.n	26ff2 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   26f84:	697b      	ldr	r3, [r7, #20]
   26f86:	68db      	ldr	r3, [r3, #12]
   26f88:	697a      	ldr	r2, [r7, #20]
   26f8a:	0010      	movs	r0, r2
   26f8c:	4798      	blx	r3
   26f8e:	e030      	b.n	26ff2 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   26f90:	697b      	ldr	r3, [r7, #20]
   26f92:	0018      	movs	r0, r3
   26f94:	4b3e      	ldr	r3, [pc, #248]	; (27090 <_spi_interrupt_handler+0x27c>)
   26f96:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   26f98:	697b      	ldr	r3, [r7, #20]
   26f9a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   26f9c:	b29b      	uxth	r3, r3
   26f9e:	2b00      	cmp	r3, #0
   26fa0:	d127      	bne.n	26ff2 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   26fa2:	697b      	ldr	r3, [r7, #20]
   26fa4:	2238      	movs	r2, #56	; 0x38
   26fa6:	2100      	movs	r1, #0
   26fa8:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   26faa:	693b      	ldr	r3, [r7, #16]
   26fac:	2204      	movs	r2, #4
   26fae:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   26fb0:	697b      	ldr	r3, [r7, #20]
   26fb2:	7a5b      	ldrb	r3, [r3, #9]
   26fb4:	b2db      	uxtb	r3, r3
   26fb6:	2b02      	cmp	r3, #2
   26fb8:	d10b      	bne.n	26fd2 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   26fba:	230f      	movs	r3, #15
   26fbc:	18fb      	adds	r3, r7, r3
   26fbe:	781b      	ldrb	r3, [r3, #0]
   26fc0:	2204      	movs	r2, #4
   26fc2:	4013      	ands	r3, r2
   26fc4:	d015      	beq.n	26ff2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   26fc6:	697b      	ldr	r3, [r7, #20]
   26fc8:	695b      	ldr	r3, [r3, #20]
   26fca:	697a      	ldr	r2, [r7, #20]
   26fcc:	0010      	movs	r0, r2
   26fce:	4798      	blx	r3
   26fd0:	e00f      	b.n	26ff2 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   26fd2:	697b      	ldr	r3, [r7, #20]
   26fd4:	7a5b      	ldrb	r3, [r3, #9]
   26fd6:	b2db      	uxtb	r3, r3
   26fd8:	2b00      	cmp	r3, #0
   26fda:	d10a      	bne.n	26ff2 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   26fdc:	230f      	movs	r3, #15
   26fde:	18fb      	adds	r3, r7, r3
   26fe0:	781b      	ldrb	r3, [r3, #0]
   26fe2:	2202      	movs	r2, #2
   26fe4:	4013      	ands	r3, r2
   26fe6:	d004      	beq.n	26ff2 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   26fe8:	697b      	ldr	r3, [r7, #20]
   26fea:	691b      	ldr	r3, [r3, #16]
   26fec:	697a      	ldr	r2, [r7, #20]
   26fee:	0010      	movs	r0, r2
   26ff0:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   26ff2:	230c      	movs	r3, #12
   26ff4:	18fb      	adds	r3, r7, r3
   26ff6:	881b      	ldrh	r3, [r3, #0]
   26ff8:	2202      	movs	r2, #2
   26ffa:	4013      	ands	r3, r2
   26ffc:	d024      	beq.n	27048 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   26ffe:	697b      	ldr	r3, [r7, #20]
   27000:	795b      	ldrb	r3, [r3, #5]
   27002:	2b01      	cmp	r3, #1
   27004:	d120      	bne.n	27048 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27006:	697b      	ldr	r3, [r7, #20]
   27008:	7a5b      	ldrb	r3, [r3, #9]
   2700a:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2700c:	2b01      	cmp	r3, #1
   2700e:	d11b      	bne.n	27048 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   27010:	697b      	ldr	r3, [r7, #20]
   27012:	79db      	ldrb	r3, [r3, #7]
   27014:	2201      	movs	r2, #1
   27016:	4053      	eors	r3, r2
   27018:	b2db      	uxtb	r3, r3
   2701a:	2b00      	cmp	r3, #0
   2701c:	d014      	beq.n	27048 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2701e:	693b      	ldr	r3, [r7, #16]
   27020:	2202      	movs	r2, #2
   27022:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   27024:	697b      	ldr	r3, [r7, #20]
   27026:	2203      	movs	r2, #3
   27028:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   2702a:	697b      	ldr	r3, [r7, #20]
   2702c:	2238      	movs	r2, #56	; 0x38
   2702e:	2100      	movs	r1, #0
   27030:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   27032:	230f      	movs	r3, #15
   27034:	18fb      	adds	r3, r7, r3
   27036:	781b      	ldrb	r3, [r3, #0]
   27038:	2201      	movs	r2, #1
   2703a:	4013      	ands	r3, r2
   2703c:	d004      	beq.n	27048 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2703e:	697b      	ldr	r3, [r7, #20]
   27040:	68db      	ldr	r3, [r3, #12]
   27042:	697a      	ldr	r2, [r7, #20]
   27044:	0010      	movs	r0, r2
   27046:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   27048:	230c      	movs	r3, #12
   2704a:	18fb      	adds	r3, r7, r3
   2704c:	881b      	ldrh	r3, [r3, #0]
   2704e:	2280      	movs	r2, #128	; 0x80
   27050:	4013      	ands	r3, r2
   27052:	d010      	beq.n	27076 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   27054:	693b      	ldr	r3, [r7, #16]
   27056:	2280      	movs	r2, #128	; 0x80
   27058:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2705a:	693b      	ldr	r3, [r7, #16]
   2705c:	2280      	movs	r2, #128	; 0x80
   2705e:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   27060:	230f      	movs	r3, #15
   27062:	18fb      	adds	r3, r7, r3
   27064:	781b      	ldrb	r3, [r3, #0]
   27066:	2240      	movs	r2, #64	; 0x40
   27068:	4013      	ands	r3, r2
   2706a:	d004      	beq.n	27076 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   2706c:	697b      	ldr	r3, [r7, #20]
   2706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27070:	697a      	ldr	r2, [r7, #20]
   27072:	0010      	movs	r0, r2
   27074:	4798      	blx	r3
		}
	}
#  endif
}
   27076:	46c0      	nop			; (mov r8, r8)
   27078:	46bd      	mov	sp, r7
   2707a:	b006      	add	sp, #24
   2707c:	bd80      	pop	{r7, pc}
   2707e:	46c0      	nop			; (mov r8, r8)
   27080:	200059c8 	.word	0x200059c8
   27084:	00026d39 	.word	0x00026d39
   27088:	00026cbd 	.word	0x00026cbd
   2708c:	00026d6d 	.word	0x00026d6d
   27090:	00026da3 	.word	0x00026da3

00027094 <system_gclk_chan_get_config_defaults>:
{
   27094:	b580      	push	{r7, lr}
   27096:	b082      	sub	sp, #8
   27098:	af00      	add	r7, sp, #0
   2709a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2709c:	687b      	ldr	r3, [r7, #4]
   2709e:	2200      	movs	r2, #0
   270a0:	701a      	strb	r2, [r3, #0]
}
   270a2:	46c0      	nop			; (mov r8, r8)
   270a4:	46bd      	mov	sp, r7
   270a6:	b002      	add	sp, #8
   270a8:	bd80      	pop	{r7, pc}
	...

000270ac <system_apb_clock_set_mask>:
{
   270ac:	b580      	push	{r7, lr}
   270ae:	b082      	sub	sp, #8
   270b0:	af00      	add	r7, sp, #0
   270b2:	0002      	movs	r2, r0
   270b4:	6039      	str	r1, [r7, #0]
   270b6:	1dfb      	adds	r3, r7, #7
   270b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   270ba:	1dfb      	adds	r3, r7, #7
   270bc:	781b      	ldrb	r3, [r3, #0]
   270be:	2b01      	cmp	r3, #1
   270c0:	d00a      	beq.n	270d8 <system_apb_clock_set_mask+0x2c>
   270c2:	2b02      	cmp	r3, #2
   270c4:	d00f      	beq.n	270e6 <system_apb_clock_set_mask+0x3a>
   270c6:	2b00      	cmp	r3, #0
   270c8:	d114      	bne.n	270f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   270ca:	4b0e      	ldr	r3, [pc, #56]	; (27104 <system_apb_clock_set_mask+0x58>)
   270cc:	4a0d      	ldr	r2, [pc, #52]	; (27104 <system_apb_clock_set_mask+0x58>)
   270ce:	6991      	ldr	r1, [r2, #24]
   270d0:	683a      	ldr	r2, [r7, #0]
   270d2:	430a      	orrs	r2, r1
   270d4:	619a      	str	r2, [r3, #24]
			break;
   270d6:	e00f      	b.n	270f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   270d8:	4b0a      	ldr	r3, [pc, #40]	; (27104 <system_apb_clock_set_mask+0x58>)
   270da:	4a0a      	ldr	r2, [pc, #40]	; (27104 <system_apb_clock_set_mask+0x58>)
   270dc:	69d1      	ldr	r1, [r2, #28]
   270de:	683a      	ldr	r2, [r7, #0]
   270e0:	430a      	orrs	r2, r1
   270e2:	61da      	str	r2, [r3, #28]
			break;
   270e4:	e008      	b.n	270f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   270e6:	4b07      	ldr	r3, [pc, #28]	; (27104 <system_apb_clock_set_mask+0x58>)
   270e8:	4a06      	ldr	r2, [pc, #24]	; (27104 <system_apb_clock_set_mask+0x58>)
   270ea:	6a11      	ldr	r1, [r2, #32]
   270ec:	683a      	ldr	r2, [r7, #0]
   270ee:	430a      	orrs	r2, r1
   270f0:	621a      	str	r2, [r3, #32]
			break;
   270f2:	e001      	b.n	270f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   270f4:	2317      	movs	r3, #23
   270f6:	e000      	b.n	270fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   270f8:	2300      	movs	r3, #0
}
   270fa:	0018      	movs	r0, r3
   270fc:	46bd      	mov	sp, r7
   270fe:	b002      	add	sp, #8
   27100:	bd80      	pop	{r7, pc}
   27102:	46c0      	nop			; (mov r8, r8)
   27104:	40000400 	.word	0x40000400

00027108 <system_pinmux_get_config_defaults>:
{
   27108:	b580      	push	{r7, lr}
   2710a:	b082      	sub	sp, #8
   2710c:	af00      	add	r7, sp, #0
   2710e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27110:	687b      	ldr	r3, [r7, #4]
   27112:	2280      	movs	r2, #128	; 0x80
   27114:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27116:	687b      	ldr	r3, [r7, #4]
   27118:	2200      	movs	r2, #0
   2711a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2711c:	687b      	ldr	r3, [r7, #4]
   2711e:	2201      	movs	r2, #1
   27120:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27122:	687b      	ldr	r3, [r7, #4]
   27124:	2200      	movs	r2, #0
   27126:	70da      	strb	r2, [r3, #3]
}
   27128:	46c0      	nop			; (mov r8, r8)
   2712a:	46bd      	mov	sp, r7
   2712c:	b002      	add	sp, #8
   2712e:	bd80      	pop	{r7, pc}

00027130 <system_is_debugger_present>:
{
   27130:	b580      	push	{r7, lr}
   27132:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   27134:	4b05      	ldr	r3, [pc, #20]	; (2714c <system_is_debugger_present+0x1c>)
   27136:	789b      	ldrb	r3, [r3, #2]
   27138:	b2db      	uxtb	r3, r3
   2713a:	001a      	movs	r2, r3
   2713c:	2302      	movs	r3, #2
   2713e:	4013      	ands	r3, r2
   27140:	1e5a      	subs	r2, r3, #1
   27142:	4193      	sbcs	r3, r2
   27144:	b2db      	uxtb	r3, r3
}
   27146:	0018      	movs	r0, r3
   27148:	46bd      	mov	sp, r7
   2714a:	bd80      	pop	{r7, pc}
   2714c:	41002000 	.word	0x41002000

00027150 <usart_is_syncing>:
{
   27150:	b580      	push	{r7, lr}
   27152:	b084      	sub	sp, #16
   27154:	af00      	add	r7, sp, #0
   27156:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   27158:	687b      	ldr	r3, [r7, #4]
   2715a:	681b      	ldr	r3, [r3, #0]
   2715c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2715e:	68fb      	ldr	r3, [r7, #12]
   27160:	69db      	ldr	r3, [r3, #28]
   27162:	1e5a      	subs	r2, r3, #1
   27164:	4193      	sbcs	r3, r2
   27166:	b2db      	uxtb	r3, r3
}
   27168:	0018      	movs	r0, r3
   2716a:	46bd      	mov	sp, r7
   2716c:	b004      	add	sp, #16
   2716e:	bd80      	pop	{r7, pc}

00027170 <_usart_wait_for_sync>:
{
   27170:	b580      	push	{r7, lr}
   27172:	b082      	sub	sp, #8
   27174:	af00      	add	r7, sp, #0
   27176:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27178:	46c0      	nop			; (mov r8, r8)
   2717a:	687b      	ldr	r3, [r7, #4]
   2717c:	0018      	movs	r0, r3
   2717e:	4b04      	ldr	r3, [pc, #16]	; (27190 <_usart_wait_for_sync+0x20>)
   27180:	4798      	blx	r3
   27182:	1e03      	subs	r3, r0, #0
   27184:	d1f9      	bne.n	2717a <_usart_wait_for_sync+0xa>
}
   27186:	46c0      	nop			; (mov r8, r8)
   27188:	46bd      	mov	sp, r7
   2718a:	b002      	add	sp, #8
   2718c:	bd80      	pop	{r7, pc}
   2718e:	46c0      	nop			; (mov r8, r8)
   27190:	00027151 	.word	0x00027151

00027194 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   27194:	b5b0      	push	{r4, r5, r7, lr}
   27196:	b08c      	sub	sp, #48	; 0x30
   27198:	af02      	add	r7, sp, #8
   2719a:	6078      	str	r0, [r7, #4]
   2719c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2719e:	687b      	ldr	r3, [r7, #4]
   271a0:	681b      	ldr	r3, [r3, #0]
   271a2:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   271a4:	687b      	ldr	r3, [r7, #4]
   271a6:	681b      	ldr	r3, [r3, #0]
   271a8:	0018      	movs	r0, r3
   271aa:	4bab      	ldr	r3, [pc, #684]	; (27458 <_usart_set_config+0x2c4>)
   271ac:	4798      	blx	r3
   271ae:	0003      	movs	r3, r0
   271b0:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   271b2:	697b      	ldr	r3, [r7, #20]
   271b4:	3314      	adds	r3, #20
   271b6:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   271b8:	2300      	movs	r3, #0
   271ba:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   271bc:	2300      	movs	r3, #0
   271be:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   271c0:	230a      	movs	r3, #10
   271c2:	18fb      	adds	r3, r7, r3
   271c4:	2200      	movs	r2, #0
   271c6:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   271c8:	231f      	movs	r3, #31
   271ca:	18fb      	adds	r3, r7, r3
   271cc:	2200      	movs	r2, #0
   271ce:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   271d0:	231e      	movs	r3, #30
   271d2:	18fb      	adds	r3, r7, r3
   271d4:	2210      	movs	r2, #16
   271d6:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   271d8:	683b      	ldr	r3, [r7, #0]
   271da:	8a1b      	ldrh	r3, [r3, #16]
   271dc:	2280      	movs	r2, #128	; 0x80
   271de:	01d2      	lsls	r2, r2, #7
   271e0:	4293      	cmp	r3, r2
   271e2:	d01c      	beq.n	2721e <_usart_set_config+0x8a>
   271e4:	2280      	movs	r2, #128	; 0x80
   271e6:	01d2      	lsls	r2, r2, #7
   271e8:	4293      	cmp	r3, r2
   271ea:	dc06      	bgt.n	271fa <_usart_set_config+0x66>
   271ec:	2b00      	cmp	r3, #0
   271ee:	d00d      	beq.n	2720c <_usart_set_config+0x78>
   271f0:	2280      	movs	r2, #128	; 0x80
   271f2:	0192      	lsls	r2, r2, #6
   271f4:	4293      	cmp	r3, r2
   271f6:	d024      	beq.n	27242 <_usart_set_config+0xae>
   271f8:	e035      	b.n	27266 <_usart_set_config+0xd2>
   271fa:	22c0      	movs	r2, #192	; 0xc0
   271fc:	01d2      	lsls	r2, r2, #7
   271fe:	4293      	cmp	r3, r2
   27200:	d028      	beq.n	27254 <_usart_set_config+0xc0>
   27202:	2280      	movs	r2, #128	; 0x80
   27204:	0212      	lsls	r2, r2, #8
   27206:	4293      	cmp	r3, r2
   27208:	d012      	beq.n	27230 <_usart_set_config+0x9c>
   2720a:	e02c      	b.n	27266 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2720c:	231f      	movs	r3, #31
   2720e:	18fb      	adds	r3, r7, r3
   27210:	2200      	movs	r2, #0
   27212:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   27214:	231e      	movs	r3, #30
   27216:	18fb      	adds	r3, r7, r3
   27218:	2210      	movs	r2, #16
   2721a:	701a      	strb	r2, [r3, #0]
			break;
   2721c:	e023      	b.n	27266 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2721e:	231f      	movs	r3, #31
   27220:	18fb      	adds	r3, r7, r3
   27222:	2200      	movs	r2, #0
   27224:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   27226:	231e      	movs	r3, #30
   27228:	18fb      	adds	r3, r7, r3
   2722a:	2208      	movs	r2, #8
   2722c:	701a      	strb	r2, [r3, #0]
			break;
   2722e:	e01a      	b.n	27266 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   27230:	231f      	movs	r3, #31
   27232:	18fb      	adds	r3, r7, r3
   27234:	2200      	movs	r2, #0
   27236:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   27238:	231e      	movs	r3, #30
   2723a:	18fb      	adds	r3, r7, r3
   2723c:	2203      	movs	r2, #3
   2723e:	701a      	strb	r2, [r3, #0]
			break;
   27240:	e011      	b.n	27266 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27242:	231f      	movs	r3, #31
   27244:	18fb      	adds	r3, r7, r3
   27246:	2201      	movs	r2, #1
   27248:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   2724a:	231e      	movs	r3, #30
   2724c:	18fb      	adds	r3, r7, r3
   2724e:	2210      	movs	r2, #16
   27250:	701a      	strb	r2, [r3, #0]
			break;
   27252:	e008      	b.n	27266 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   27254:	231f      	movs	r3, #31
   27256:	18fb      	adds	r3, r7, r3
   27258:	2201      	movs	r2, #1
   2725a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   2725c:	231e      	movs	r3, #30
   2725e:	18fb      	adds	r3, r7, r3
   27260:	2208      	movs	r2, #8
   27262:	701a      	strb	r2, [r3, #0]
			break;
   27264:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   27266:	683b      	ldr	r3, [r7, #0]
   27268:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2726a:	683b      	ldr	r3, [r7, #0]
   2726c:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2726e:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   27270:	683b      	ldr	r3, [r7, #0]
   27272:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   27274:	4313      	orrs	r3, r2
		config->sample_rate |
   27276:	683a      	ldr	r2, [r7, #0]
   27278:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2727a:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   2727c:	683a      	ldr	r2, [r7, #0]
   2727e:	7e12      	ldrb	r2, [r2, #24]
   27280:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   27282:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   27284:	683a      	ldr	r2, [r7, #0]
   27286:	2126      	movs	r1, #38	; 0x26
   27288:	5c52      	ldrb	r2, [r2, r1]
   2728a:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   2728c:	4313      	orrs	r3, r2
   2728e:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   27290:	231d      	movs	r3, #29
   27292:	18fb      	adds	r3, r7, r3
   27294:	2200      	movs	r2, #0
   27296:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   27298:	683b      	ldr	r3, [r7, #0]
   2729a:	685b      	ldr	r3, [r3, #4]
   2729c:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2729e:	68fb      	ldr	r3, [r7, #12]
   272a0:	2b00      	cmp	r3, #0
   272a2:	d01e      	beq.n	272e2 <_usart_set_config+0x14e>
   272a4:	2280      	movs	r2, #128	; 0x80
   272a6:	0552      	lsls	r2, r2, #21
   272a8:	4293      	cmp	r3, r2
   272aa:	d14f      	bne.n	2734c <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   272ac:	683b      	ldr	r3, [r7, #0]
   272ae:	2227      	movs	r2, #39	; 0x27
   272b0:	5c9b      	ldrb	r3, [r3, r2]
   272b2:	2201      	movs	r2, #1
   272b4:	4053      	eors	r3, r2
   272b6:	b2db      	uxtb	r3, r3
   272b8:	2b00      	cmp	r3, #0
   272ba:	d046      	beq.n	2734a <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   272bc:	683b      	ldr	r3, [r7, #0]
   272be:	6a1d      	ldr	r5, [r3, #32]
   272c0:	693b      	ldr	r3, [r7, #16]
   272c2:	b2db      	uxtb	r3, r3
   272c4:	0018      	movs	r0, r3
   272c6:	4b65      	ldr	r3, [pc, #404]	; (2745c <_usart_set_config+0x2c8>)
   272c8:	4798      	blx	r3
   272ca:	0001      	movs	r1, r0
   272cc:	231d      	movs	r3, #29
   272ce:	18fc      	adds	r4, r7, r3
   272d0:	230a      	movs	r3, #10
   272d2:	18fb      	adds	r3, r7, r3
   272d4:	001a      	movs	r2, r3
   272d6:	0028      	movs	r0, r5
   272d8:	4b61      	ldr	r3, [pc, #388]	; (27460 <_usart_set_config+0x2cc>)
   272da:	4798      	blx	r3
   272dc:	0003      	movs	r3, r0
   272de:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   272e0:	e033      	b.n	2734a <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   272e2:	683b      	ldr	r3, [r7, #0]
   272e4:	2227      	movs	r2, #39	; 0x27
   272e6:	5c9b      	ldrb	r3, [r3, r2]
   272e8:	2b00      	cmp	r3, #0
   272ea:	d014      	beq.n	27316 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   272ec:	683b      	ldr	r3, [r7, #0]
   272ee:	6a18      	ldr	r0, [r3, #32]
   272f0:	683b      	ldr	r3, [r7, #0]
   272f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   272f4:	231d      	movs	r3, #29
   272f6:	18fc      	adds	r4, r7, r3
   272f8:	231f      	movs	r3, #31
   272fa:	18fb      	adds	r3, r7, r3
   272fc:	781d      	ldrb	r5, [r3, #0]
   272fe:	230a      	movs	r3, #10
   27300:	18fa      	adds	r2, r7, r3
   27302:	231e      	movs	r3, #30
   27304:	18fb      	adds	r3, r7, r3
   27306:	781b      	ldrb	r3, [r3, #0]
   27308:	9300      	str	r3, [sp, #0]
   2730a:	002b      	movs	r3, r5
   2730c:	4d55      	ldr	r5, [pc, #340]	; (27464 <_usart_set_config+0x2d0>)
   2730e:	47a8      	blx	r5
   27310:	0003      	movs	r3, r0
   27312:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   27314:	e01a      	b.n	2734c <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   27316:	683b      	ldr	r3, [r7, #0]
   27318:	6a1d      	ldr	r5, [r3, #32]
   2731a:	693b      	ldr	r3, [r7, #16]
   2731c:	b2db      	uxtb	r3, r3
   2731e:	0018      	movs	r0, r3
   27320:	4b4e      	ldr	r3, [pc, #312]	; (2745c <_usart_set_config+0x2c8>)
   27322:	4798      	blx	r3
				status_code =
   27324:	231d      	movs	r3, #29
   27326:	18fc      	adds	r4, r7, r3
   27328:	231f      	movs	r3, #31
   2732a:	18fb      	adds	r3, r7, r3
   2732c:	7819      	ldrb	r1, [r3, #0]
   2732e:	230a      	movs	r3, #10
   27330:	18fa      	adds	r2, r7, r3
   27332:	231e      	movs	r3, #30
   27334:	18fb      	adds	r3, r7, r3
   27336:	781b      	ldrb	r3, [r3, #0]
   27338:	9300      	str	r3, [sp, #0]
   2733a:	000b      	movs	r3, r1
   2733c:	0001      	movs	r1, r0
   2733e:	0028      	movs	r0, r5
   27340:	4d48      	ldr	r5, [pc, #288]	; (27464 <_usart_set_config+0x2d0>)
   27342:	47a8      	blx	r5
   27344:	0003      	movs	r3, r0
   27346:	7023      	strb	r3, [r4, #0]
			break;
   27348:	e000      	b.n	2734c <_usart_set_config+0x1b8>
			break;
   2734a:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   2734c:	231d      	movs	r3, #29
   2734e:	18fb      	adds	r3, r7, r3
   27350:	781b      	ldrb	r3, [r3, #0]
   27352:	2b00      	cmp	r3, #0
   27354:	d003      	beq.n	2735e <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   27356:	231d      	movs	r3, #29
   27358:	18fb      	adds	r3, r7, r3
   2735a:	781b      	ldrb	r3, [r3, #0]
   2735c:	e077      	b.n	2744e <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2735e:	683b      	ldr	r3, [r7, #0]
   27360:	7e5b      	ldrb	r3, [r3, #25]
   27362:	2b00      	cmp	r3, #0
   27364:	d003      	beq.n	2736e <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   27366:	683b      	ldr	r3, [r7, #0]
   27368:	7e9a      	ldrb	r2, [r3, #26]
   2736a:	69bb      	ldr	r3, [r7, #24]
   2736c:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2736e:	687b      	ldr	r3, [r7, #4]
   27370:	0018      	movs	r0, r3
   27372:	4b3d      	ldr	r3, [pc, #244]	; (27468 <_usart_set_config+0x2d4>)
   27374:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   27376:	230a      	movs	r3, #10
   27378:	18fb      	adds	r3, r7, r3
   2737a:	881a      	ldrh	r2, [r3, #0]
   2737c:	69bb      	ldr	r3, [r7, #24]
   2737e:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   27380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27382:	68fb      	ldr	r3, [r7, #12]
   27384:	4313      	orrs	r3, r2
   27386:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   27388:	683b      	ldr	r3, [r7, #0]
   2738a:	2227      	movs	r2, #39	; 0x27
   2738c:	5c9b      	ldrb	r3, [r3, r2]
   2738e:	2201      	movs	r2, #1
   27390:	4053      	eors	r3, r2
   27392:	b2db      	uxtb	r3, r3
   27394:	2b00      	cmp	r3, #0
   27396:	d003      	beq.n	273a0 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   27398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2739a:	2204      	movs	r2, #4
   2739c:	4313      	orrs	r3, r2
   2739e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   273a0:	683b      	ldr	r3, [r7, #0]
   273a2:	7e5b      	ldrb	r3, [r3, #25]
   273a4:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   273a6:	683b      	ldr	r3, [r7, #0]
   273a8:	7f1b      	ldrb	r3, [r3, #28]
   273aa:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   273ac:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   273ae:	683b      	ldr	r3, [r7, #0]
   273b0:	7f5b      	ldrb	r3, [r3, #29]
   273b2:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   273b4:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   273b6:	683b      	ldr	r3, [r7, #0]
   273b8:	2124      	movs	r1, #36	; 0x24
   273ba:	5c5b      	ldrb	r3, [r3, r1]
   273bc:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   273be:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   273c0:	683b      	ldr	r3, [r7, #0]
   273c2:	2125      	movs	r1, #37	; 0x25
   273c4:	5c5b      	ldrb	r3, [r3, r1]
   273c6:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   273c8:	4313      	orrs	r3, r2
	ctrlb =  
   273ca:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   273cc:	683b      	ldr	r3, [r7, #0]
   273ce:	7a9b      	ldrb	r3, [r3, #10]
   273d0:	001a      	movs	r2, r3
   273d2:	6a3b      	ldr	r3, [r7, #32]
   273d4:	4313      	orrs	r3, r2
   273d6:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   273d8:	683b      	ldr	r3, [r7, #0]
   273da:	7adb      	ldrb	r3, [r3, #11]
   273dc:	001a      	movs	r2, r3
   273de:	6a3b      	ldr	r3, [r7, #32]
   273e0:	4313      	orrs	r3, r2
   273e2:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   273e4:	683b      	ldr	r3, [r7, #0]
   273e6:	891b      	ldrh	r3, [r3, #8]
   273e8:	2bff      	cmp	r3, #255	; 0xff
   273ea:	d00b      	beq.n	27404 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   273ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   273ee:	2280      	movs	r2, #128	; 0x80
   273f0:	0452      	lsls	r2, r2, #17
   273f2:	4313      	orrs	r3, r2
   273f4:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   273f6:	683b      	ldr	r3, [r7, #0]
   273f8:	891b      	ldrh	r3, [r3, #8]
   273fa:	001a      	movs	r2, r3
   273fc:	6a3b      	ldr	r3, [r7, #32]
   273fe:	4313      	orrs	r3, r2
   27400:	623b      	str	r3, [r7, #32]
   27402:	e008      	b.n	27416 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   27404:	683b      	ldr	r3, [r7, #0]
   27406:	7edb      	ldrb	r3, [r3, #27]
   27408:	2b00      	cmp	r3, #0
   2740a:	d004      	beq.n	27416 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   2740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2740e:	2280      	movs	r2, #128	; 0x80
   27410:	04d2      	lsls	r2, r2, #19
   27412:	4313      	orrs	r3, r2
   27414:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   27416:	683b      	ldr	r3, [r7, #0]
   27418:	222c      	movs	r2, #44	; 0x2c
   2741a:	5c9b      	ldrb	r3, [r3, r2]
   2741c:	2b00      	cmp	r3, #0
   2741e:	d103      	bne.n	27428 <_usart_set_config+0x294>
   27420:	4b12      	ldr	r3, [pc, #72]	; (2746c <_usart_set_config+0x2d8>)
   27422:	4798      	blx	r3
   27424:	1e03      	subs	r3, r0, #0
   27426:	d003      	beq.n	27430 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   27428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2742a:	2280      	movs	r2, #128	; 0x80
   2742c:	4313      	orrs	r3, r2
   2742e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   27430:	687b      	ldr	r3, [r7, #4]
   27432:	0018      	movs	r0, r3
   27434:	4b0c      	ldr	r3, [pc, #48]	; (27468 <_usart_set_config+0x2d4>)
   27436:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   27438:	69bb      	ldr	r3, [r7, #24]
   2743a:	6a3a      	ldr	r2, [r7, #32]
   2743c:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2743e:	687b      	ldr	r3, [r7, #4]
   27440:	0018      	movs	r0, r3
   27442:	4b09      	ldr	r3, [pc, #36]	; (27468 <_usart_set_config+0x2d4>)
   27444:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   27446:	69bb      	ldr	r3, [r7, #24]
   27448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2744a:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   2744c:	2300      	movs	r3, #0
}
   2744e:	0018      	movs	r0, r3
   27450:	46bd      	mov	sp, r7
   27452:	b00a      	add	sp, #40	; 0x28
   27454:	bdb0      	pop	{r4, r5, r7, pc}
   27456:	46c0      	nop			; (mov r8, r8)
   27458:	00025f3d 	.word	0x00025f3d
   2745c:	000288f1 	.word	0x000288f1
   27460:	00025ab7 	.word	0x00025ab7
   27464:	00025b35 	.word	0x00025b35
   27468:	00027171 	.word	0x00027171
   2746c:	00027131 	.word	0x00027131

00027470 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   27470:	b590      	push	{r4, r7, lr}
   27472:	b093      	sub	sp, #76	; 0x4c
   27474:	af00      	add	r7, sp, #0
   27476:	60f8      	str	r0, [r7, #12]
   27478:	60b9      	str	r1, [r7, #8]
   2747a:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   2747c:	233b      	movs	r3, #59	; 0x3b
   2747e:	18fb      	adds	r3, r7, r3
   27480:	2200      	movs	r2, #0
   27482:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   27484:	68fb      	ldr	r3, [r7, #12]
   27486:	68ba      	ldr	r2, [r7, #8]
   27488:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2748a:	68fb      	ldr	r3, [r7, #12]
   2748c:	681b      	ldr	r3, [r3, #0]
   2748e:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   27490:	68fb      	ldr	r3, [r7, #12]
   27492:	681b      	ldr	r3, [r3, #0]
   27494:	0018      	movs	r0, r3
   27496:	4b86      	ldr	r3, [pc, #536]	; (276b0 <usart_init+0x240>)
   27498:	4798      	blx	r3
   2749a:	0003      	movs	r3, r0
   2749c:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   274a0:	3302      	adds	r3, #2
   274a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   274a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   274a6:	3314      	adds	r3, #20
   274a8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   274aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   274ac:	681b      	ldr	r3, [r3, #0]
   274ae:	2201      	movs	r2, #1
   274b0:	4013      	ands	r3, r2
   274b2:	d001      	beq.n	274b8 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   274b4:	2305      	movs	r3, #5
   274b6:	e0f6      	b.n	276a6 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   274b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   274ba:	681b      	ldr	r3, [r3, #0]
   274bc:	2202      	movs	r2, #2
   274be:	4013      	ands	r3, r2
   274c0:	d001      	beq.n	274c6 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   274c2:	231c      	movs	r3, #28
   274c4:	e0ef      	b.n	276a6 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   274c6:	2201      	movs	r2, #1
   274c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   274ca:	409a      	lsls	r2, r3
   274cc:	0013      	movs	r3, r2
   274ce:	0019      	movs	r1, r3
   274d0:	2002      	movs	r0, #2
   274d2:	4b78      	ldr	r3, [pc, #480]	; (276b4 <usart_init+0x244>)
   274d4:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   274d6:	2324      	movs	r3, #36	; 0x24
   274d8:	18fb      	adds	r3, r7, r3
   274da:	0018      	movs	r0, r3
   274dc:	4b76      	ldr	r3, [pc, #472]	; (276b8 <usart_init+0x248>)
   274de:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   274e0:	687b      	ldr	r3, [r7, #4]
   274e2:	222d      	movs	r2, #45	; 0x2d
   274e4:	5c9a      	ldrb	r2, [r3, r2]
   274e6:	2324      	movs	r3, #36	; 0x24
   274e8:	18fb      	adds	r3, r7, r3
   274ea:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   274ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   274ee:	b2db      	uxtb	r3, r3
   274f0:	2224      	movs	r2, #36	; 0x24
   274f2:	18ba      	adds	r2, r7, r2
   274f4:	0011      	movs	r1, r2
   274f6:	0018      	movs	r0, r3
   274f8:	4b70      	ldr	r3, [pc, #448]	; (276bc <usart_init+0x24c>)
   274fa:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   274fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   274fe:	b2db      	uxtb	r3, r3
   27500:	0018      	movs	r0, r3
   27502:	4b6f      	ldr	r3, [pc, #444]	; (276c0 <usart_init+0x250>)
   27504:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   27506:	687b      	ldr	r3, [r7, #4]
   27508:	222d      	movs	r2, #45	; 0x2d
   2750a:	5c9b      	ldrb	r3, [r3, r2]
   2750c:	2100      	movs	r1, #0
   2750e:	0018      	movs	r0, r3
   27510:	4b6c      	ldr	r3, [pc, #432]	; (276c4 <usart_init+0x254>)
   27512:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   27514:	687b      	ldr	r3, [r7, #4]
   27516:	7ada      	ldrb	r2, [r3, #11]
   27518:	68fb      	ldr	r3, [r7, #12]
   2751a:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   2751c:	687b      	ldr	r3, [r7, #4]
   2751e:	2224      	movs	r2, #36	; 0x24
   27520:	5c9a      	ldrb	r2, [r3, r2]
   27522:	68fb      	ldr	r3, [r7, #12]
   27524:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   27526:	687b      	ldr	r3, [r7, #4]
   27528:	2225      	movs	r2, #37	; 0x25
   2752a:	5c9a      	ldrb	r2, [r3, r2]
   2752c:	68fb      	ldr	r3, [r7, #12]
   2752e:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   27530:	687b      	ldr	r3, [r7, #4]
   27532:	7eda      	ldrb	r2, [r3, #27]
   27534:	68fb      	ldr	r3, [r7, #12]
   27536:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   27538:	687b      	ldr	r3, [r7, #4]
   2753a:	7f1a      	ldrb	r2, [r3, #28]
   2753c:	68fb      	ldr	r3, [r7, #12]
   2753e:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   27540:	233b      	movs	r3, #59	; 0x3b
   27542:	18fc      	adds	r4, r7, r3
   27544:	687a      	ldr	r2, [r7, #4]
   27546:	68fb      	ldr	r3, [r7, #12]
   27548:	0011      	movs	r1, r2
   2754a:	0018      	movs	r0, r3
   2754c:	4b5e      	ldr	r3, [pc, #376]	; (276c8 <usart_init+0x258>)
   2754e:	4798      	blx	r3
   27550:	0003      	movs	r3, r0
   27552:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   27554:	233b      	movs	r3, #59	; 0x3b
   27556:	18fb      	adds	r3, r7, r3
   27558:	781b      	ldrb	r3, [r3, #0]
   2755a:	2b00      	cmp	r3, #0
   2755c:	d003      	beq.n	27566 <usart_init+0xf6>
		return status_code;
   2755e:	233b      	movs	r3, #59	; 0x3b
   27560:	18fb      	adds	r3, r7, r3
   27562:	781b      	ldrb	r3, [r3, #0]
   27564:	e09f      	b.n	276a6 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   27566:	2320      	movs	r3, #32
   27568:	18fb      	adds	r3, r7, r3
   2756a:	0018      	movs	r0, r3
   2756c:	4b57      	ldr	r3, [pc, #348]	; (276cc <usart_init+0x25c>)
   2756e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27570:	2320      	movs	r3, #32
   27572:	18fb      	adds	r3, r7, r3
   27574:	2200      	movs	r2, #0
   27576:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   27578:	2320      	movs	r3, #32
   2757a:	18fb      	adds	r3, r7, r3
   2757c:	2200      	movs	r2, #0
   2757e:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   27580:	687b      	ldr	r3, [r7, #4]
   27582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   27584:	2310      	movs	r3, #16
   27586:	18fb      	adds	r3, r7, r3
   27588:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2758a:	687b      	ldr	r3, [r7, #4]
   2758c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   2758e:	2310      	movs	r3, #16
   27590:	18fb      	adds	r3, r7, r3
   27592:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   27594:	687b      	ldr	r3, [r7, #4]
   27596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   27598:	2310      	movs	r3, #16
   2759a:	18fb      	adds	r3, r7, r3
   2759c:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   2759e:	687b      	ldr	r3, [r7, #4]
   275a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   275a2:	2310      	movs	r3, #16
   275a4:	18fb      	adds	r3, r7, r3
   275a6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   275a8:	2347      	movs	r3, #71	; 0x47
   275aa:	18fb      	adds	r3, r7, r3
   275ac:	2200      	movs	r2, #0
   275ae:	701a      	strb	r2, [r3, #0]
   275b0:	e02c      	b.n	2760c <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   275b2:	2347      	movs	r3, #71	; 0x47
   275b4:	18fb      	adds	r3, r7, r3
   275b6:	781a      	ldrb	r2, [r3, #0]
   275b8:	2310      	movs	r3, #16
   275ba:	18fb      	adds	r3, r7, r3
   275bc:	0092      	lsls	r2, r2, #2
   275be:	58d3      	ldr	r3, [r2, r3]
   275c0:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   275c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   275c4:	2b00      	cmp	r3, #0
   275c6:	d109      	bne.n	275dc <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   275c8:	2347      	movs	r3, #71	; 0x47
   275ca:	18fb      	adds	r3, r7, r3
   275cc:	781a      	ldrb	r2, [r3, #0]
   275ce:	68bb      	ldr	r3, [r7, #8]
   275d0:	0011      	movs	r1, r2
   275d2:	0018      	movs	r0, r3
   275d4:	4b3e      	ldr	r3, [pc, #248]	; (276d0 <usart_init+0x260>)
   275d6:	4798      	blx	r3
   275d8:	0003      	movs	r3, r0
   275da:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   275dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   275de:	3301      	adds	r3, #1
   275e0:	d00d      	beq.n	275fe <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   275e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   275e4:	b2da      	uxtb	r2, r3
   275e6:	2320      	movs	r3, #32
   275e8:	18fb      	adds	r3, r7, r3
   275ea:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   275ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   275ee:	0c1b      	lsrs	r3, r3, #16
   275f0:	b2db      	uxtb	r3, r3
   275f2:	2220      	movs	r2, #32
   275f4:	18ba      	adds	r2, r7, r2
   275f6:	0011      	movs	r1, r2
   275f8:	0018      	movs	r0, r3
   275fa:	4b36      	ldr	r3, [pc, #216]	; (276d4 <usart_init+0x264>)
   275fc:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   275fe:	2347      	movs	r3, #71	; 0x47
   27600:	18fb      	adds	r3, r7, r3
   27602:	781a      	ldrb	r2, [r3, #0]
   27604:	2347      	movs	r3, #71	; 0x47
   27606:	18fb      	adds	r3, r7, r3
   27608:	3201      	adds	r2, #1
   2760a:	701a      	strb	r2, [r3, #0]
   2760c:	2347      	movs	r3, #71	; 0x47
   2760e:	18fb      	adds	r3, r7, r3
   27610:	781b      	ldrb	r3, [r3, #0]
   27612:	2b03      	cmp	r3, #3
   27614:	d9cd      	bls.n	275b2 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   27616:	2300      	movs	r3, #0
   27618:	63fb      	str	r3, [r7, #60]	; 0x3c
   2761a:	e00a      	b.n	27632 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   2761c:	68fa      	ldr	r2, [r7, #12]
   2761e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27620:	3302      	adds	r3, #2
   27622:	009b      	lsls	r3, r3, #2
   27624:	18d3      	adds	r3, r2, r3
   27626:	3304      	adds	r3, #4
   27628:	2200      	movs	r2, #0
   2762a:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   2762c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2762e:	3301      	adds	r3, #1
   27630:	63fb      	str	r3, [r7, #60]	; 0x3c
   27632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   27634:	2b05      	cmp	r3, #5
   27636:	d9f1      	bls.n	2761c <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   27638:	68fb      	ldr	r3, [r7, #12]
   2763a:	2200      	movs	r2, #0
   2763c:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   2763e:	68fb      	ldr	r3, [r7, #12]
   27640:	2200      	movs	r2, #0
   27642:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   27644:	68fb      	ldr	r3, [r7, #12]
   27646:	2200      	movs	r2, #0
   27648:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   2764a:	68fb      	ldr	r3, [r7, #12]
   2764c:	2200      	movs	r2, #0
   2764e:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   27650:	68fb      	ldr	r3, [r7, #12]
   27652:	2230      	movs	r2, #48	; 0x30
   27654:	2100      	movs	r1, #0
   27656:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   27658:	68fb      	ldr	r3, [r7, #12]
   2765a:	2231      	movs	r2, #49	; 0x31
   2765c:	2100      	movs	r1, #0
   2765e:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   27660:	68fb      	ldr	r3, [r7, #12]
   27662:	2232      	movs	r2, #50	; 0x32
   27664:	2100      	movs	r1, #0
   27666:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   27668:	68fb      	ldr	r3, [r7, #12]
   2766a:	2233      	movs	r2, #51	; 0x33
   2766c:	2100      	movs	r1, #0
   2766e:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   27670:	68fb      	ldr	r3, [r7, #12]
   27672:	681b      	ldr	r3, [r3, #0]
   27674:	2227      	movs	r2, #39	; 0x27
   27676:	18bc      	adds	r4, r7, r2
   27678:	0018      	movs	r0, r3
   2767a:	4b0d      	ldr	r3, [pc, #52]	; (276b0 <usart_init+0x240>)
   2767c:	4798      	blx	r3
   2767e:	0003      	movs	r3, r0
   27680:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   27682:	4a15      	ldr	r2, [pc, #84]	; (276d8 <usart_init+0x268>)
   27684:	2327      	movs	r3, #39	; 0x27
   27686:	18fb      	adds	r3, r7, r3
   27688:	781b      	ldrb	r3, [r3, #0]
   2768a:	0011      	movs	r1, r2
   2768c:	0018      	movs	r0, r3
   2768e:	4b13      	ldr	r3, [pc, #76]	; (276dc <usart_init+0x26c>)
   27690:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   27692:	2327      	movs	r3, #39	; 0x27
   27694:	18fb      	adds	r3, r7, r3
   27696:	781a      	ldrb	r2, [r3, #0]
   27698:	4b11      	ldr	r3, [pc, #68]	; (276e0 <usart_init+0x270>)
   2769a:	0092      	lsls	r2, r2, #2
   2769c:	68f9      	ldr	r1, [r7, #12]
   2769e:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   276a0:	233b      	movs	r3, #59	; 0x3b
   276a2:	18fb      	adds	r3, r7, r3
   276a4:	781b      	ldrb	r3, [r3, #0]
}
   276a6:	0018      	movs	r0, r3
   276a8:	46bd      	mov	sp, r7
   276aa:	b013      	add	sp, #76	; 0x4c
   276ac:	bd90      	pop	{r4, r7, pc}
   276ae:	46c0      	nop			; (mov r8, r8)
   276b0:	00025f3d 	.word	0x00025f3d
   276b4:	000270ad 	.word	0x000270ad
   276b8:	00027095 	.word	0x00027095
   276bc:	000287cd 	.word	0x000287cd
   276c0:	00028811 	.word	0x00028811
   276c4:	00025cf5 	.word	0x00025cf5
   276c8:	00027195 	.word	0x00027195
   276cc:	00027109 	.word	0x00027109
   276d0:	00025d81 	.word	0x00025d81
   276d4:	00028b2d 	.word	0x00028b2d
   276d8:	0002794d 	.word	0x0002794d
   276dc:	00025fa1 	.word	0x00025fa1
   276e0:	200059c8 	.word	0x200059c8

000276e4 <system_interrupt_enter_critical_section>:
{
   276e4:	b580      	push	{r7, lr}
   276e6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   276e8:	4b02      	ldr	r3, [pc, #8]	; (276f4 <system_interrupt_enter_critical_section+0x10>)
   276ea:	4798      	blx	r3
}
   276ec:	46c0      	nop			; (mov r8, r8)
   276ee:	46bd      	mov	sp, r7
   276f0:	bd80      	pop	{r7, pc}
   276f2:	46c0      	nop			; (mov r8, r8)
   276f4:	00024b39 	.word	0x00024b39

000276f8 <system_interrupt_leave_critical_section>:
{
   276f8:	b580      	push	{r7, lr}
   276fa:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   276fc:	4b02      	ldr	r3, [pc, #8]	; (27708 <system_interrupt_leave_critical_section+0x10>)
   276fe:	4798      	blx	r3
}
   27700:	46c0      	nop			; (mov r8, r8)
   27702:	46bd      	mov	sp, r7
   27704:	bd80      	pop	{r7, pc}
   27706:	46c0      	nop			; (mov r8, r8)
   27708:	00024b8d 	.word	0x00024b8d

0002770c <usart_is_syncing>:
{
   2770c:	b580      	push	{r7, lr}
   2770e:	b084      	sub	sp, #16
   27710:	af00      	add	r7, sp, #0
   27712:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   27714:	687b      	ldr	r3, [r7, #4]
   27716:	681b      	ldr	r3, [r3, #0]
   27718:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2771a:	68fb      	ldr	r3, [r7, #12]
   2771c:	69db      	ldr	r3, [r3, #28]
   2771e:	1e5a      	subs	r2, r3, #1
   27720:	4193      	sbcs	r3, r2
   27722:	b2db      	uxtb	r3, r3
}
   27724:	0018      	movs	r0, r3
   27726:	46bd      	mov	sp, r7
   27728:	b004      	add	sp, #16
   2772a:	bd80      	pop	{r7, pc}

0002772c <_usart_wait_for_sync>:
{
   2772c:	b580      	push	{r7, lr}
   2772e:	b082      	sub	sp, #8
   27730:	af00      	add	r7, sp, #0
   27732:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   27734:	46c0      	nop			; (mov r8, r8)
   27736:	687b      	ldr	r3, [r7, #4]
   27738:	0018      	movs	r0, r3
   2773a:	4b04      	ldr	r3, [pc, #16]	; (2774c <_usart_wait_for_sync+0x20>)
   2773c:	4798      	blx	r3
   2773e:	1e03      	subs	r3, r0, #0
   27740:	d1f9      	bne.n	27736 <_usart_wait_for_sync+0xa>
}
   27742:	46c0      	nop			; (mov r8, r8)
   27744:	46bd      	mov	sp, r7
   27746:	b002      	add	sp, #8
   27748:	bd80      	pop	{r7, pc}
   2774a:	46c0      	nop			; (mov r8, r8)
   2774c:	0002770d 	.word	0x0002770d

00027750 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   27750:	b580      	push	{r7, lr}
   27752:	b086      	sub	sp, #24
   27754:	af00      	add	r7, sp, #0
   27756:	60f8      	str	r0, [r7, #12]
   27758:	60b9      	str	r1, [r7, #8]
   2775a:	1dbb      	adds	r3, r7, #6
   2775c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2775e:	68fb      	ldr	r3, [r7, #12]
   27760:	681b      	ldr	r3, [r3, #0]
   27762:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   27764:	4b0f      	ldr	r3, [pc, #60]	; (277a4 <_usart_write_buffer+0x54>)
   27766:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   27768:	68fb      	ldr	r3, [r7, #12]
   2776a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2776c:	b29b      	uxth	r3, r3
   2776e:	2b00      	cmp	r3, #0
   27770:	d003      	beq.n	2777a <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   27772:	4b0d      	ldr	r3, [pc, #52]	; (277a8 <_usart_write_buffer+0x58>)
   27774:	4798      	blx	r3
		return STATUS_BUSY;
   27776:	2305      	movs	r3, #5
   27778:	e010      	b.n	2779c <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   2777a:	68fb      	ldr	r3, [r7, #12]
   2777c:	1dba      	adds	r2, r7, #6
   2777e:	8812      	ldrh	r2, [r2, #0]
   27780:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   27782:	4b09      	ldr	r3, [pc, #36]	; (277a8 <_usart_write_buffer+0x58>)
   27784:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   27786:	68fb      	ldr	r3, [r7, #12]
   27788:	68ba      	ldr	r2, [r7, #8]
   2778a:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   2778c:	68fb      	ldr	r3, [r7, #12]
   2778e:	2233      	movs	r2, #51	; 0x33
   27790:	2105      	movs	r1, #5
   27792:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   27794:	697b      	ldr	r3, [r7, #20]
   27796:	2201      	movs	r2, #1
   27798:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   2779a:	2300      	movs	r3, #0
}
   2779c:	0018      	movs	r0, r3
   2779e:	46bd      	mov	sp, r7
   277a0:	b006      	add	sp, #24
   277a2:	bd80      	pop	{r7, pc}
   277a4:	000276e5 	.word	0x000276e5
   277a8:	000276f9 	.word	0x000276f9

000277ac <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   277ac:	b580      	push	{r7, lr}
   277ae:	b086      	sub	sp, #24
   277b0:	af00      	add	r7, sp, #0
   277b2:	60f8      	str	r0, [r7, #12]
   277b4:	60b9      	str	r1, [r7, #8]
   277b6:	1dbb      	adds	r3, r7, #6
   277b8:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   277ba:	68fb      	ldr	r3, [r7, #12]
   277bc:	681b      	ldr	r3, [r3, #0]
   277be:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   277c0:	4b16      	ldr	r3, [pc, #88]	; (2781c <_usart_read_buffer+0x70>)
   277c2:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   277c4:	68fb      	ldr	r3, [r7, #12]
   277c6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   277c8:	b29b      	uxth	r3, r3
   277ca:	2b00      	cmp	r3, #0
   277cc:	d003      	beq.n	277d6 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   277ce:	4b14      	ldr	r3, [pc, #80]	; (27820 <_usart_read_buffer+0x74>)
   277d0:	4798      	blx	r3
		return STATUS_BUSY;
   277d2:	2305      	movs	r3, #5
   277d4:	e01e      	b.n	27814 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   277d6:	68fb      	ldr	r3, [r7, #12]
   277d8:	1dba      	adds	r2, r7, #6
   277da:	8812      	ldrh	r2, [r2, #0]
   277dc:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   277de:	4b10      	ldr	r3, [pc, #64]	; (27820 <_usart_read_buffer+0x74>)
   277e0:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   277e2:	68fb      	ldr	r3, [r7, #12]
   277e4:	68ba      	ldr	r2, [r7, #8]
   277e6:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   277e8:	68fb      	ldr	r3, [r7, #12]
   277ea:	2232      	movs	r2, #50	; 0x32
   277ec:	2105      	movs	r1, #5
   277ee:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   277f0:	697b      	ldr	r3, [r7, #20]
   277f2:	2204      	movs	r2, #4
   277f4:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   277f6:	68fb      	ldr	r3, [r7, #12]
   277f8:	7a1b      	ldrb	r3, [r3, #8]
   277fa:	2b00      	cmp	r3, #0
   277fc:	d002      	beq.n	27804 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   277fe:	697b      	ldr	r3, [r7, #20]
   27800:	2220      	movs	r2, #32
   27802:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   27804:	68fb      	ldr	r3, [r7, #12]
   27806:	7a5b      	ldrb	r3, [r3, #9]
   27808:	2b00      	cmp	r3, #0
   2780a:	d002      	beq.n	27812 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   2780c:	697b      	ldr	r3, [r7, #20]
   2780e:	2208      	movs	r2, #8
   27810:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   27812:	2300      	movs	r3, #0
}
   27814:	0018      	movs	r0, r3
   27816:	46bd      	mov	sp, r7
   27818:	b006      	add	sp, #24
   2781a:	bd80      	pop	{r7, pc}
   2781c:	000276e5 	.word	0x000276e5
   27820:	000276f9 	.word	0x000276f9

00027824 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   27824:	b580      	push	{r7, lr}
   27826:	b084      	sub	sp, #16
   27828:	af00      	add	r7, sp, #0
   2782a:	60f8      	str	r0, [r7, #12]
   2782c:	60b9      	str	r1, [r7, #8]
   2782e:	1dfb      	adds	r3, r7, #7
   27830:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   27832:	1dfb      	adds	r3, r7, #7
   27834:	781b      	ldrb	r3, [r3, #0]
   27836:	68fa      	ldr	r2, [r7, #12]
   27838:	3302      	adds	r3, #2
   2783a:	009b      	lsls	r3, r3, #2
   2783c:	18d3      	adds	r3, r2, r3
   2783e:	3304      	adds	r3, #4
   27840:	68ba      	ldr	r2, [r7, #8]
   27842:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   27844:	68fb      	ldr	r3, [r7, #12]
   27846:	2230      	movs	r2, #48	; 0x30
   27848:	5c9b      	ldrb	r3, [r3, r2]
   2784a:	b25a      	sxtb	r2, r3
   2784c:	1dfb      	adds	r3, r7, #7
   2784e:	781b      	ldrb	r3, [r3, #0]
   27850:	2101      	movs	r1, #1
   27852:	4099      	lsls	r1, r3
   27854:	000b      	movs	r3, r1
   27856:	b25b      	sxtb	r3, r3
   27858:	4313      	orrs	r3, r2
   2785a:	b25b      	sxtb	r3, r3
   2785c:	b2d9      	uxtb	r1, r3
   2785e:	68fb      	ldr	r3, [r7, #12]
   27860:	2230      	movs	r2, #48	; 0x30
   27862:	5499      	strb	r1, [r3, r2]
}
   27864:	46c0      	nop			; (mov r8, r8)
   27866:	46bd      	mov	sp, r7
   27868:	b004      	add	sp, #16
   2786a:	bd80      	pop	{r7, pc}

0002786c <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   2786c:	b580      	push	{r7, lr}
   2786e:	b084      	sub	sp, #16
   27870:	af00      	add	r7, sp, #0
   27872:	60f8      	str	r0, [r7, #12]
   27874:	60b9      	str	r1, [r7, #8]
   27876:	1dbb      	adds	r3, r7, #6
   27878:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   2787a:	1dbb      	adds	r3, r7, #6
   2787c:	881b      	ldrh	r3, [r3, #0]
   2787e:	2b00      	cmp	r3, #0
   27880:	d101      	bne.n	27886 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   27882:	2317      	movs	r3, #23
   27884:	e010      	b.n	278a8 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   27886:	68fb      	ldr	r3, [r7, #12]
   27888:	79db      	ldrb	r3, [r3, #7]
   2788a:	2201      	movs	r2, #1
   2788c:	4053      	eors	r3, r2
   2788e:	b2db      	uxtb	r3, r3
   27890:	2b00      	cmp	r3, #0
   27892:	d001      	beq.n	27898 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   27894:	231c      	movs	r3, #28
   27896:	e007      	b.n	278a8 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   27898:	1dbb      	adds	r3, r7, #6
   2789a:	881a      	ldrh	r2, [r3, #0]
   2789c:	68b9      	ldr	r1, [r7, #8]
   2789e:	68fb      	ldr	r3, [r7, #12]
   278a0:	0018      	movs	r0, r3
   278a2:	4b03      	ldr	r3, [pc, #12]	; (278b0 <usart_write_buffer_job+0x44>)
   278a4:	4798      	blx	r3
   278a6:	0003      	movs	r3, r0
}
   278a8:	0018      	movs	r0, r3
   278aa:	46bd      	mov	sp, r7
   278ac:	b004      	add	sp, #16
   278ae:	bd80      	pop	{r7, pc}
   278b0:	00027751 	.word	0x00027751

000278b4 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   278b4:	b580      	push	{r7, lr}
   278b6:	b084      	sub	sp, #16
   278b8:	af00      	add	r7, sp, #0
   278ba:	60f8      	str	r0, [r7, #12]
   278bc:	60b9      	str	r1, [r7, #8]
   278be:	1dbb      	adds	r3, r7, #6
   278c0:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   278c2:	1dbb      	adds	r3, r7, #6
   278c4:	881b      	ldrh	r3, [r3, #0]
   278c6:	2b00      	cmp	r3, #0
   278c8:	d101      	bne.n	278ce <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   278ca:	2317      	movs	r3, #23
   278cc:	e010      	b.n	278f0 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   278ce:	68fb      	ldr	r3, [r7, #12]
   278d0:	799b      	ldrb	r3, [r3, #6]
   278d2:	2201      	movs	r2, #1
   278d4:	4053      	eors	r3, r2
   278d6:	b2db      	uxtb	r3, r3
   278d8:	2b00      	cmp	r3, #0
   278da:	d001      	beq.n	278e0 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   278dc:	231c      	movs	r3, #28
   278de:	e007      	b.n	278f0 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   278e0:	1dbb      	adds	r3, r7, #6
   278e2:	881a      	ldrh	r2, [r3, #0]
   278e4:	68b9      	ldr	r1, [r7, #8]
   278e6:	68fb      	ldr	r3, [r7, #12]
   278e8:	0018      	movs	r0, r3
   278ea:	4b03      	ldr	r3, [pc, #12]	; (278f8 <usart_read_buffer_job+0x44>)
   278ec:	4798      	blx	r3
   278ee:	0003      	movs	r3, r0
}
   278f0:	0018      	movs	r0, r3
   278f2:	46bd      	mov	sp, r7
   278f4:	b004      	add	sp, #16
   278f6:	bd80      	pop	{r7, pc}
   278f8:	000277ad 	.word	0x000277ad

000278fc <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   278fc:	b580      	push	{r7, lr}
   278fe:	b084      	sub	sp, #16
   27900:	af00      	add	r7, sp, #0
   27902:	6078      	str	r0, [r7, #4]
   27904:	000a      	movs	r2, r1
   27906:	1cfb      	adds	r3, r7, #3
   27908:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   2790a:	1cfb      	adds	r3, r7, #3
   2790c:	781b      	ldrb	r3, [r3, #0]
   2790e:	2b00      	cmp	r3, #0
   27910:	d002      	beq.n	27918 <usart_get_job_status+0x1c>
   27912:	2b01      	cmp	r3, #1
   27914:	d007      	beq.n	27926 <usart_get_job_status+0x2a>
   27916:	e00d      	b.n	27934 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   27918:	230f      	movs	r3, #15
   2791a:	18fb      	adds	r3, r7, r3
   2791c:	687a      	ldr	r2, [r7, #4]
   2791e:	2132      	movs	r1, #50	; 0x32
   27920:	5c52      	ldrb	r2, [r2, r1]
   27922:	701a      	strb	r2, [r3, #0]
			break;
   27924:	e00b      	b.n	2793e <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   27926:	230f      	movs	r3, #15
   27928:	18fb      	adds	r3, r7, r3
   2792a:	687a      	ldr	r2, [r7, #4]
   2792c:	2133      	movs	r1, #51	; 0x33
   2792e:	5c52      	ldrb	r2, [r2, r1]
   27930:	701a      	strb	r2, [r3, #0]
			break;
   27932:	e004      	b.n	2793e <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   27934:	230f      	movs	r3, #15
   27936:	18fb      	adds	r3, r7, r3
   27938:	2217      	movs	r2, #23
   2793a:	701a      	strb	r2, [r3, #0]
			break;
   2793c:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   2793e:	230f      	movs	r3, #15
   27940:	18fb      	adds	r3, r7, r3
   27942:	781b      	ldrb	r3, [r3, #0]
}
   27944:	0018      	movs	r0, r3
   27946:	46bd      	mov	sp, r7
   27948:	b004      	add	sp, #16
   2794a:	bd80      	pop	{r7, pc}

0002794c <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   2794c:	b580      	push	{r7, lr}
   2794e:	b088      	sub	sp, #32
   27950:	af00      	add	r7, sp, #0
   27952:	0002      	movs	r2, r0
   27954:	1dfb      	adds	r3, r7, #7
   27956:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   27958:	1dfb      	adds	r3, r7, #7
   2795a:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   2795c:	4ba3      	ldr	r3, [pc, #652]	; (27bec <_usart_interrupt_handler+0x2a0>)
   2795e:	0092      	lsls	r2, r2, #2
   27960:	58d3      	ldr	r3, [r2, r3]
   27962:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   27964:	69bb      	ldr	r3, [r7, #24]
   27966:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   27968:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   2796a:	69bb      	ldr	r3, [r7, #24]
   2796c:	0018      	movs	r0, r3
   2796e:	4ba0      	ldr	r3, [pc, #640]	; (27bf0 <_usart_interrupt_handler+0x2a4>)
   27970:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   27972:	697b      	ldr	r3, [r7, #20]
   27974:	7e1b      	ldrb	r3, [r3, #24]
   27976:	b2da      	uxtb	r2, r3
   27978:	2312      	movs	r3, #18
   2797a:	18fb      	adds	r3, r7, r3
   2797c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   2797e:	697b      	ldr	r3, [r7, #20]
   27980:	7d9b      	ldrb	r3, [r3, #22]
   27982:	b2db      	uxtb	r3, r3
   27984:	b29a      	uxth	r2, r3
   27986:	2312      	movs	r3, #18
   27988:	18fb      	adds	r3, r7, r3
   2798a:	2112      	movs	r1, #18
   2798c:	1879      	adds	r1, r7, r1
   2798e:	8809      	ldrh	r1, [r1, #0]
   27990:	400a      	ands	r2, r1
   27992:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   27994:	69bb      	ldr	r3, [r7, #24]
   27996:	2230      	movs	r2, #48	; 0x30
   27998:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   2799a:	69ba      	ldr	r2, [r7, #24]
   2799c:	2131      	movs	r1, #49	; 0x31
   2799e:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   279a0:	4013      	ands	r3, r2
   279a2:	b2da      	uxtb	r2, r3
   279a4:	2310      	movs	r3, #16
   279a6:	18fb      	adds	r3, r7, r3
   279a8:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   279aa:	2312      	movs	r3, #18
   279ac:	18fb      	adds	r3, r7, r3
   279ae:	881b      	ldrh	r3, [r3, #0]
   279b0:	2201      	movs	r2, #1
   279b2:	4013      	ands	r3, r2
   279b4:	d044      	beq.n	27a40 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   279b6:	69bb      	ldr	r3, [r7, #24]
   279b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   279ba:	b29b      	uxth	r3, r3
   279bc:	2b00      	cmp	r3, #0
   279be:	d03c      	beq.n	27a3a <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   279c0:	69bb      	ldr	r3, [r7, #24]
   279c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   279c4:	781b      	ldrb	r3, [r3, #0]
   279c6:	b2da      	uxtb	r2, r3
   279c8:	231c      	movs	r3, #28
   279ca:	18fb      	adds	r3, r7, r3
   279cc:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   279ce:	69bb      	ldr	r3, [r7, #24]
   279d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   279d2:	1c5a      	adds	r2, r3, #1
   279d4:	69bb      	ldr	r3, [r7, #24]
   279d6:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   279d8:	69bb      	ldr	r3, [r7, #24]
   279da:	795b      	ldrb	r3, [r3, #5]
   279dc:	2b01      	cmp	r3, #1
   279de:	d113      	bne.n	27a08 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   279e0:	69bb      	ldr	r3, [r7, #24]
   279e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   279e4:	781b      	ldrb	r3, [r3, #0]
   279e6:	b2db      	uxtb	r3, r3
   279e8:	021b      	lsls	r3, r3, #8
   279ea:	b21a      	sxth	r2, r3
   279ec:	231c      	movs	r3, #28
   279ee:	18fb      	adds	r3, r7, r3
   279f0:	2100      	movs	r1, #0
   279f2:	5e5b      	ldrsh	r3, [r3, r1]
   279f4:	4313      	orrs	r3, r2
   279f6:	b21a      	sxth	r2, r3
   279f8:	231c      	movs	r3, #28
   279fa:	18fb      	adds	r3, r7, r3
   279fc:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   279fe:	69bb      	ldr	r3, [r7, #24]
   27a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27a02:	1c5a      	adds	r2, r3, #1
   27a04:	69bb      	ldr	r3, [r7, #24]
   27a06:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   27a08:	231c      	movs	r3, #28
   27a0a:	18fb      	adds	r3, r7, r3
   27a0c:	881b      	ldrh	r3, [r3, #0]
   27a0e:	05db      	lsls	r3, r3, #23
   27a10:	0ddb      	lsrs	r3, r3, #23
   27a12:	b29a      	uxth	r2, r3
   27a14:	697b      	ldr	r3, [r7, #20]
   27a16:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   27a18:	69bb      	ldr	r3, [r7, #24]
   27a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   27a1c:	b29b      	uxth	r3, r3
   27a1e:	3b01      	subs	r3, #1
   27a20:	b29b      	uxth	r3, r3
   27a22:	69ba      	ldr	r2, [r7, #24]
   27a24:	1c19      	adds	r1, r3, #0
   27a26:	85d1      	strh	r1, [r2, #46]	; 0x2e
   27a28:	2b00      	cmp	r3, #0
   27a2a:	d109      	bne.n	27a40 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   27a2c:	697b      	ldr	r3, [r7, #20]
   27a2e:	2201      	movs	r2, #1
   27a30:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   27a32:	697b      	ldr	r3, [r7, #20]
   27a34:	2202      	movs	r2, #2
   27a36:	759a      	strb	r2, [r3, #22]
   27a38:	e002      	b.n	27a40 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   27a3a:	697b      	ldr	r3, [r7, #20]
   27a3c:	2201      	movs	r2, #1
   27a3e:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   27a40:	2312      	movs	r3, #18
   27a42:	18fb      	adds	r3, r7, r3
   27a44:	881b      	ldrh	r3, [r3, #0]
   27a46:	2202      	movs	r2, #2
   27a48:	4013      	ands	r3, r2
   27a4a:	d011      	beq.n	27a70 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   27a4c:	697b      	ldr	r3, [r7, #20]
   27a4e:	2202      	movs	r2, #2
   27a50:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   27a52:	69bb      	ldr	r3, [r7, #24]
   27a54:	2233      	movs	r2, #51	; 0x33
   27a56:	2100      	movs	r1, #0
   27a58:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   27a5a:	2310      	movs	r3, #16
   27a5c:	18fb      	adds	r3, r7, r3
   27a5e:	881b      	ldrh	r3, [r3, #0]
   27a60:	2201      	movs	r2, #1
   27a62:	4013      	ands	r3, r2
   27a64:	d004      	beq.n	27a70 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   27a66:	69bb      	ldr	r3, [r7, #24]
   27a68:	68db      	ldr	r3, [r3, #12]
   27a6a:	69ba      	ldr	r2, [r7, #24]
   27a6c:	0010      	movs	r0, r2
   27a6e:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   27a70:	2312      	movs	r3, #18
   27a72:	18fb      	adds	r3, r7, r3
   27a74:	881b      	ldrh	r3, [r3, #0]
   27a76:	2204      	movs	r2, #4
   27a78:	4013      	ands	r3, r2
   27a7a:	d100      	bne.n	27a7e <_usart_interrupt_handler+0x132>
   27a7c:	e0bd      	b.n	27bfa <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   27a7e:	69bb      	ldr	r3, [r7, #24]
   27a80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   27a82:	b29b      	uxth	r3, r3
   27a84:	2b00      	cmp	r3, #0
   27a86:	d100      	bne.n	27a8a <_usart_interrupt_handler+0x13e>
   27a88:	e0b4      	b.n	27bf4 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   27a8a:	697b      	ldr	r3, [r7, #20]
   27a8c:	8b5b      	ldrh	r3, [r3, #26]
   27a8e:	b29b      	uxth	r3, r3
   27a90:	b2da      	uxtb	r2, r3
   27a92:	231f      	movs	r3, #31
   27a94:	18fb      	adds	r3, r7, r3
   27a96:	213f      	movs	r1, #63	; 0x3f
   27a98:	400a      	ands	r2, r1
   27a9a:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   27a9c:	231f      	movs	r3, #31
   27a9e:	18fb      	adds	r3, r7, r3
   27aa0:	781b      	ldrb	r3, [r3, #0]
   27aa2:	2208      	movs	r2, #8
   27aa4:	4013      	ands	r3, r2
   27aa6:	d007      	beq.n	27ab8 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   27aa8:	231f      	movs	r3, #31
   27aaa:	18fb      	adds	r3, r7, r3
   27aac:	221f      	movs	r2, #31
   27aae:	18ba      	adds	r2, r7, r2
   27ab0:	7812      	ldrb	r2, [r2, #0]
   27ab2:	2108      	movs	r1, #8
   27ab4:	438a      	bics	r2, r1
   27ab6:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   27ab8:	231f      	movs	r3, #31
   27aba:	18fb      	adds	r3, r7, r3
   27abc:	781b      	ldrb	r3, [r3, #0]
   27abe:	2b00      	cmp	r3, #0
   27ac0:	d050      	beq.n	27b64 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   27ac2:	231f      	movs	r3, #31
   27ac4:	18fb      	adds	r3, r7, r3
   27ac6:	781b      	ldrb	r3, [r3, #0]
   27ac8:	2202      	movs	r2, #2
   27aca:	4013      	ands	r3, r2
   27acc:	d007      	beq.n	27ade <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   27ace:	69bb      	ldr	r3, [r7, #24]
   27ad0:	2232      	movs	r2, #50	; 0x32
   27ad2:	211a      	movs	r1, #26
   27ad4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   27ad6:	697b      	ldr	r3, [r7, #20]
   27ad8:	2202      	movs	r2, #2
   27ada:	835a      	strh	r2, [r3, #26]
   27adc:	e036      	b.n	27b4c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   27ade:	231f      	movs	r3, #31
   27ae0:	18fb      	adds	r3, r7, r3
   27ae2:	781b      	ldrb	r3, [r3, #0]
   27ae4:	2204      	movs	r2, #4
   27ae6:	4013      	ands	r3, r2
   27ae8:	d007      	beq.n	27afa <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   27aea:	69bb      	ldr	r3, [r7, #24]
   27aec:	2232      	movs	r2, #50	; 0x32
   27aee:	211e      	movs	r1, #30
   27af0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   27af2:	697b      	ldr	r3, [r7, #20]
   27af4:	2204      	movs	r2, #4
   27af6:	835a      	strh	r2, [r3, #26]
   27af8:	e028      	b.n	27b4c <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   27afa:	231f      	movs	r3, #31
   27afc:	18fb      	adds	r3, r7, r3
   27afe:	781b      	ldrb	r3, [r3, #0]
   27b00:	2201      	movs	r2, #1
   27b02:	4013      	ands	r3, r2
   27b04:	d007      	beq.n	27b16 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   27b06:	69bb      	ldr	r3, [r7, #24]
   27b08:	2232      	movs	r2, #50	; 0x32
   27b0a:	2113      	movs	r1, #19
   27b0c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   27b0e:	697b      	ldr	r3, [r7, #20]
   27b10:	2201      	movs	r2, #1
   27b12:	835a      	strh	r2, [r3, #26]
   27b14:	e01a      	b.n	27b4c <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   27b16:	231f      	movs	r3, #31
   27b18:	18fb      	adds	r3, r7, r3
   27b1a:	781b      	ldrb	r3, [r3, #0]
   27b1c:	2210      	movs	r2, #16
   27b1e:	4013      	ands	r3, r2
   27b20:	d007      	beq.n	27b32 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   27b22:	69bb      	ldr	r3, [r7, #24]
   27b24:	2232      	movs	r2, #50	; 0x32
   27b26:	2142      	movs	r1, #66	; 0x42
   27b28:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   27b2a:	697b      	ldr	r3, [r7, #20]
   27b2c:	2210      	movs	r2, #16
   27b2e:	835a      	strh	r2, [r3, #26]
   27b30:	e00c      	b.n	27b4c <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   27b32:	231f      	movs	r3, #31
   27b34:	18fb      	adds	r3, r7, r3
   27b36:	781b      	ldrb	r3, [r3, #0]
   27b38:	2220      	movs	r2, #32
   27b3a:	4013      	ands	r3, r2
   27b3c:	d006      	beq.n	27b4c <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   27b3e:	69bb      	ldr	r3, [r7, #24]
   27b40:	2232      	movs	r2, #50	; 0x32
   27b42:	2141      	movs	r1, #65	; 0x41
   27b44:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   27b46:	697b      	ldr	r3, [r7, #20]
   27b48:	2220      	movs	r2, #32
   27b4a:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   27b4c:	2310      	movs	r3, #16
   27b4e:	18fb      	adds	r3, r7, r3
   27b50:	881b      	ldrh	r3, [r3, #0]
   27b52:	2204      	movs	r2, #4
   27b54:	4013      	ands	r3, r2
				if (callback_status
   27b56:	d050      	beq.n	27bfa <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   27b58:	69bb      	ldr	r3, [r7, #24]
   27b5a:	695b      	ldr	r3, [r3, #20]
   27b5c:	69ba      	ldr	r2, [r7, #24]
   27b5e:	0010      	movs	r0, r2
   27b60:	4798      	blx	r3
   27b62:	e04a      	b.n	27bfa <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   27b64:	697b      	ldr	r3, [r7, #20]
   27b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   27b68:	b29a      	uxth	r2, r3
   27b6a:	230e      	movs	r3, #14
   27b6c:	18fb      	adds	r3, r7, r3
   27b6e:	05d2      	lsls	r2, r2, #23
   27b70:	0dd2      	lsrs	r2, r2, #23
   27b72:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   27b74:	69bb      	ldr	r3, [r7, #24]
   27b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27b78:	220e      	movs	r2, #14
   27b7a:	18ba      	adds	r2, r7, r2
   27b7c:	8812      	ldrh	r2, [r2, #0]
   27b7e:	b2d2      	uxtb	r2, r2
   27b80:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   27b82:	69bb      	ldr	r3, [r7, #24]
   27b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27b86:	1c5a      	adds	r2, r3, #1
   27b88:	69bb      	ldr	r3, [r7, #24]
   27b8a:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   27b8c:	69bb      	ldr	r3, [r7, #24]
   27b8e:	795b      	ldrb	r3, [r3, #5]
   27b90:	2b01      	cmp	r3, #1
   27b92:	d10d      	bne.n	27bb0 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   27b94:	69bb      	ldr	r3, [r7, #24]
   27b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27b98:	220e      	movs	r2, #14
   27b9a:	18ba      	adds	r2, r7, r2
   27b9c:	8812      	ldrh	r2, [r2, #0]
   27b9e:	0a12      	lsrs	r2, r2, #8
   27ba0:	b292      	uxth	r2, r2
   27ba2:	b2d2      	uxtb	r2, r2
   27ba4:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   27ba6:	69bb      	ldr	r3, [r7, #24]
   27ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27baa:	1c5a      	adds	r2, r3, #1
   27bac:	69bb      	ldr	r3, [r7, #24]
   27bae:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   27bb0:	69bb      	ldr	r3, [r7, #24]
   27bb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   27bb4:	b29b      	uxth	r3, r3
   27bb6:	3b01      	subs	r3, #1
   27bb8:	b29b      	uxth	r3, r3
   27bba:	69ba      	ldr	r2, [r7, #24]
   27bbc:	1c19      	adds	r1, r3, #0
   27bbe:	8591      	strh	r1, [r2, #44]	; 0x2c
   27bc0:	2b00      	cmp	r3, #0
   27bc2:	d11a      	bne.n	27bfa <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   27bc4:	697b      	ldr	r3, [r7, #20]
   27bc6:	2204      	movs	r2, #4
   27bc8:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   27bca:	69bb      	ldr	r3, [r7, #24]
   27bcc:	2232      	movs	r2, #50	; 0x32
   27bce:	2100      	movs	r1, #0
   27bd0:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   27bd2:	2310      	movs	r3, #16
   27bd4:	18fb      	adds	r3, r7, r3
   27bd6:	881b      	ldrh	r3, [r3, #0]
   27bd8:	2202      	movs	r2, #2
   27bda:	4013      	ands	r3, r2
					if (callback_status
   27bdc:	d00d      	beq.n	27bfa <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   27bde:	69bb      	ldr	r3, [r7, #24]
   27be0:	691b      	ldr	r3, [r3, #16]
   27be2:	69ba      	ldr	r2, [r7, #24]
   27be4:	0010      	movs	r0, r2
   27be6:	4798      	blx	r3
   27be8:	e007      	b.n	27bfa <_usart_interrupt_handler+0x2ae>
   27bea:	46c0      	nop			; (mov r8, r8)
   27bec:	200059c8 	.word	0x200059c8
   27bf0:	0002772d 	.word	0x0002772d
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   27bf4:	697b      	ldr	r3, [r7, #20]
   27bf6:	2204      	movs	r2, #4
   27bf8:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   27bfa:	2312      	movs	r3, #18
   27bfc:	18fb      	adds	r3, r7, r3
   27bfe:	881b      	ldrh	r3, [r3, #0]
   27c00:	2210      	movs	r2, #16
   27c02:	4013      	ands	r3, r2
   27c04:	d010      	beq.n	27c28 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   27c06:	697b      	ldr	r3, [r7, #20]
   27c08:	2210      	movs	r2, #16
   27c0a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   27c0c:	697b      	ldr	r3, [r7, #20]
   27c0e:	2210      	movs	r2, #16
   27c10:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   27c12:	2310      	movs	r3, #16
   27c14:	18fb      	adds	r3, r7, r3
   27c16:	881b      	ldrh	r3, [r3, #0]
   27c18:	2210      	movs	r2, #16
   27c1a:	4013      	ands	r3, r2
   27c1c:	d004      	beq.n	27c28 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   27c1e:	69bb      	ldr	r3, [r7, #24]
   27c20:	69db      	ldr	r3, [r3, #28]
   27c22:	69ba      	ldr	r2, [r7, #24]
   27c24:	0010      	movs	r0, r2
   27c26:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   27c28:	2312      	movs	r3, #18
   27c2a:	18fb      	adds	r3, r7, r3
   27c2c:	881b      	ldrh	r3, [r3, #0]
   27c2e:	2220      	movs	r2, #32
   27c30:	4013      	ands	r3, r2
   27c32:	d010      	beq.n	27c56 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   27c34:	697b      	ldr	r3, [r7, #20]
   27c36:	2220      	movs	r2, #32
   27c38:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   27c3a:	697b      	ldr	r3, [r7, #20]
   27c3c:	2220      	movs	r2, #32
   27c3e:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   27c40:	2310      	movs	r3, #16
   27c42:	18fb      	adds	r3, r7, r3
   27c44:	881b      	ldrh	r3, [r3, #0]
   27c46:	2208      	movs	r2, #8
   27c48:	4013      	ands	r3, r2
   27c4a:	d004      	beq.n	27c56 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   27c4c:	69bb      	ldr	r3, [r7, #24]
   27c4e:	699b      	ldr	r3, [r3, #24]
   27c50:	69ba      	ldr	r2, [r7, #24]
   27c52:	0010      	movs	r0, r2
   27c54:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   27c56:	2312      	movs	r3, #18
   27c58:	18fb      	adds	r3, r7, r3
   27c5a:	881b      	ldrh	r3, [r3, #0]
   27c5c:	2208      	movs	r2, #8
   27c5e:	4013      	ands	r3, r2
   27c60:	d010      	beq.n	27c84 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   27c62:	697b      	ldr	r3, [r7, #20]
   27c64:	2208      	movs	r2, #8
   27c66:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   27c68:	697b      	ldr	r3, [r7, #20]
   27c6a:	2208      	movs	r2, #8
   27c6c:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   27c6e:	2310      	movs	r3, #16
   27c70:	18fb      	adds	r3, r7, r3
   27c72:	881b      	ldrh	r3, [r3, #0]
   27c74:	2220      	movs	r2, #32
   27c76:	4013      	ands	r3, r2
   27c78:	d004      	beq.n	27c84 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   27c7a:	69bb      	ldr	r3, [r7, #24]
   27c7c:	6a1b      	ldr	r3, [r3, #32]
   27c7e:	69ba      	ldr	r2, [r7, #24]
   27c80:	0010      	movs	r0, r2
   27c82:	4798      	blx	r3
		}
	}
#endif
}
   27c84:	46c0      	nop			; (mov r8, r8)
   27c86:	46bd      	mov	sp, r7
   27c88:	b008      	add	sp, #32
   27c8a:	bd80      	pop	{r7, pc}

00027c8c <system_gclk_gen_get_config_defaults>:
{
   27c8c:	b580      	push	{r7, lr}
   27c8e:	b082      	sub	sp, #8
   27c90:	af00      	add	r7, sp, #0
   27c92:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   27c94:	687b      	ldr	r3, [r7, #4]
   27c96:	2201      	movs	r2, #1
   27c98:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   27c9a:	687b      	ldr	r3, [r7, #4]
   27c9c:	2200      	movs	r2, #0
   27c9e:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   27ca0:	687b      	ldr	r3, [r7, #4]
   27ca2:	2206      	movs	r2, #6
   27ca4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   27ca6:	687b      	ldr	r3, [r7, #4]
   27ca8:	2200      	movs	r2, #0
   27caa:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   27cac:	687b      	ldr	r3, [r7, #4]
   27cae:	2200      	movs	r2, #0
   27cb0:	725a      	strb	r2, [r3, #9]
}
   27cb2:	46c0      	nop			; (mov r8, r8)
   27cb4:	46bd      	mov	sp, r7
   27cb6:	b002      	add	sp, #8
   27cb8:	bd80      	pop	{r7, pc}

00027cba <system_gclk_chan_get_config_defaults>:
{
   27cba:	b580      	push	{r7, lr}
   27cbc:	b082      	sub	sp, #8
   27cbe:	af00      	add	r7, sp, #0
   27cc0:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27cc2:	687b      	ldr	r3, [r7, #4]
   27cc4:	2200      	movs	r2, #0
   27cc6:	701a      	strb	r2, [r3, #0]
}
   27cc8:	46c0      	nop			; (mov r8, r8)
   27cca:	46bd      	mov	sp, r7
   27ccc:	b002      	add	sp, #8
   27cce:	bd80      	pop	{r7, pc}

00027cd0 <system_clock_source_osc8m_get_config_defaults>:
{
   27cd0:	b580      	push	{r7, lr}
   27cd2:	b082      	sub	sp, #8
   27cd4:	af00      	add	r7, sp, #0
   27cd6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   27cd8:	687b      	ldr	r3, [r7, #4]
   27cda:	2203      	movs	r2, #3
   27cdc:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   27cde:	687b      	ldr	r3, [r7, #4]
   27ce0:	2200      	movs	r2, #0
   27ce2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   27ce4:	687b      	ldr	r3, [r7, #4]
   27ce6:	2201      	movs	r2, #1
   27ce8:	709a      	strb	r2, [r3, #2]
}
   27cea:	46c0      	nop			; (mov r8, r8)
   27cec:	46bd      	mov	sp, r7
   27cee:	b002      	add	sp, #8
   27cf0:	bd80      	pop	{r7, pc}
	...

00027cf4 <system_cpu_clock_set_divider>:
{
   27cf4:	b580      	push	{r7, lr}
   27cf6:	b082      	sub	sp, #8
   27cf8:	af00      	add	r7, sp, #0
   27cfa:	0002      	movs	r2, r0
   27cfc:	1dfb      	adds	r3, r7, #7
   27cfe:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   27d00:	4a03      	ldr	r2, [pc, #12]	; (27d10 <system_cpu_clock_set_divider+0x1c>)
   27d02:	1dfb      	adds	r3, r7, #7
   27d04:	781b      	ldrb	r3, [r3, #0]
   27d06:	7213      	strb	r3, [r2, #8]
}
   27d08:	46c0      	nop			; (mov r8, r8)
   27d0a:	46bd      	mov	sp, r7
   27d0c:	b002      	add	sp, #8
   27d0e:	bd80      	pop	{r7, pc}
   27d10:	40000400 	.word	0x40000400

00027d14 <system_apb_clock_set_divider>:
{
   27d14:	b580      	push	{r7, lr}
   27d16:	b082      	sub	sp, #8
   27d18:	af00      	add	r7, sp, #0
   27d1a:	0002      	movs	r2, r0
   27d1c:	1dfb      	adds	r3, r7, #7
   27d1e:	701a      	strb	r2, [r3, #0]
   27d20:	1dbb      	adds	r3, r7, #6
   27d22:	1c0a      	adds	r2, r1, #0
   27d24:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27d26:	1dfb      	adds	r3, r7, #7
   27d28:	781b      	ldrb	r3, [r3, #0]
   27d2a:	2b01      	cmp	r3, #1
   27d2c:	d008      	beq.n	27d40 <system_apb_clock_set_divider+0x2c>
   27d2e:	2b02      	cmp	r3, #2
   27d30:	d00b      	beq.n	27d4a <system_apb_clock_set_divider+0x36>
   27d32:	2b00      	cmp	r3, #0
   27d34:	d10e      	bne.n	27d54 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   27d36:	4a0b      	ldr	r2, [pc, #44]	; (27d64 <system_apb_clock_set_divider+0x50>)
   27d38:	1dbb      	adds	r3, r7, #6
   27d3a:	781b      	ldrb	r3, [r3, #0]
   27d3c:	7253      	strb	r3, [r2, #9]
			break;
   27d3e:	e00b      	b.n	27d58 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   27d40:	4a08      	ldr	r2, [pc, #32]	; (27d64 <system_apb_clock_set_divider+0x50>)
   27d42:	1dbb      	adds	r3, r7, #6
   27d44:	781b      	ldrb	r3, [r3, #0]
   27d46:	7293      	strb	r3, [r2, #10]
			break;
   27d48:	e006      	b.n	27d58 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   27d4a:	4a06      	ldr	r2, [pc, #24]	; (27d64 <system_apb_clock_set_divider+0x50>)
   27d4c:	1dbb      	adds	r3, r7, #6
   27d4e:	781b      	ldrb	r3, [r3, #0]
   27d50:	72d3      	strb	r3, [r2, #11]
			break;
   27d52:	e001      	b.n	27d58 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   27d54:	2317      	movs	r3, #23
   27d56:	e000      	b.n	27d5a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   27d58:	2300      	movs	r3, #0
}
   27d5a:	0018      	movs	r0, r3
   27d5c:	46bd      	mov	sp, r7
   27d5e:	b002      	add	sp, #8
   27d60:	bd80      	pop	{r7, pc}
   27d62:	46c0      	nop			; (mov r8, r8)
   27d64:	40000400 	.word	0x40000400

00027d68 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   27d68:	b580      	push	{r7, lr}
   27d6a:	b082      	sub	sp, #8
   27d6c:	af00      	add	r7, sp, #0
   27d6e:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   27d70:	687b      	ldr	r3, [r7, #4]
   27d72:	2201      	movs	r2, #1
   27d74:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   27d76:	687b      	ldr	r3, [r7, #4]
   27d78:	2200      	movs	r2, #0
   27d7a:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   27d7c:	687b      	ldr	r3, [r7, #4]
   27d7e:	2200      	movs	r2, #0
   27d80:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   27d82:	687b      	ldr	r3, [r7, #4]
   27d84:	2200      	movs	r2, #0
   27d86:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   27d88:	687b      	ldr	r3, [r7, #4]
   27d8a:	2200      	movs	r2, #0
   27d8c:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   27d8e:	687b      	ldr	r3, [r7, #4]
   27d90:	4a0a      	ldr	r2, [pc, #40]	; (27dbc <system_clock_source_dpll_get_config_defaults+0x54>)
   27d92:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   27d94:	687b      	ldr	r3, [r7, #4]
   27d96:	2280      	movs	r2, #128	; 0x80
   27d98:	0212      	lsls	r2, r2, #8
   27d9a:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   27d9c:	687b      	ldr	r3, [r7, #4]
   27d9e:	2201      	movs	r2, #1
   27da0:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   27da2:	687b      	ldr	r3, [r7, #4]
   27da4:	2200      	movs	r2, #0
   27da6:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   27da8:	687b      	ldr	r3, [r7, #4]
   27daa:	2200      	movs	r2, #0
   27dac:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   27dae:	687b      	ldr	r3, [r7, #4]
   27db0:	2200      	movs	r2, #0
   27db2:	749a      	strb	r2, [r3, #18]
};
   27db4:	46c0      	nop			; (mov r8, r8)
   27db6:	46bd      	mov	sp, r7
   27db8:	b002      	add	sp, #8
   27dba:	bd80      	pop	{r7, pc}
   27dbc:	02dc6c00 	.word	0x02dc6c00

00027dc0 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   27dc0:	b580      	push	{r7, lr}
   27dc2:	b082      	sub	sp, #8
   27dc4:	af00      	add	r7, sp, #0
   27dc6:	0002      	movs	r2, r0
   27dc8:	1dfb      	adds	r3, r7, #7
   27dca:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   27dcc:	4a08      	ldr	r2, [pc, #32]	; (27df0 <system_flash_set_waitstates+0x30>)
   27dce:	1dfb      	adds	r3, r7, #7
   27dd0:	781b      	ldrb	r3, [r3, #0]
   27dd2:	210f      	movs	r1, #15
   27dd4:	400b      	ands	r3, r1
   27dd6:	b2d9      	uxtb	r1, r3
   27dd8:	6853      	ldr	r3, [r2, #4]
   27dda:	200f      	movs	r0, #15
   27ddc:	4001      	ands	r1, r0
   27dde:	0049      	lsls	r1, r1, #1
   27de0:	201e      	movs	r0, #30
   27de2:	4383      	bics	r3, r0
   27de4:	430b      	orrs	r3, r1
   27de6:	6053      	str	r3, [r2, #4]
}
   27de8:	46c0      	nop			; (mov r8, r8)
   27dea:	46bd      	mov	sp, r7
   27dec:	b002      	add	sp, #8
   27dee:	bd80      	pop	{r7, pc}
   27df0:	41004000 	.word	0x41004000

00027df4 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   27df4:	b580      	push	{r7, lr}
   27df6:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   27df8:	46c0      	nop			; (mov r8, r8)
   27dfa:	4b04      	ldr	r3, [pc, #16]	; (27e0c <_system_dfll_wait_for_sync+0x18>)
   27dfc:	68db      	ldr	r3, [r3, #12]
   27dfe:	2210      	movs	r2, #16
   27e00:	4013      	ands	r3, r2
   27e02:	d0fa      	beq.n	27dfa <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   27e04:	46c0      	nop			; (mov r8, r8)
   27e06:	46bd      	mov	sp, r7
   27e08:	bd80      	pop	{r7, pc}
   27e0a:	46c0      	nop			; (mov r8, r8)
   27e0c:	40000800 	.word	0x40000800

00027e10 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   27e10:	b580      	push	{r7, lr}
   27e12:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   27e14:	4b0c      	ldr	r3, [pc, #48]	; (27e48 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27e16:	2202      	movs	r2, #2
   27e18:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   27e1a:	4b0c      	ldr	r3, [pc, #48]	; (27e4c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   27e1c:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   27e1e:	4a0a      	ldr	r2, [pc, #40]	; (27e48 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27e20:	4b0b      	ldr	r3, [pc, #44]	; (27e50 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   27e22:	689b      	ldr	r3, [r3, #8]
   27e24:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   27e26:	4a08      	ldr	r2, [pc, #32]	; (27e48 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27e28:	4b09      	ldr	r3, [pc, #36]	; (27e50 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   27e2a:	685b      	ldr	r3, [r3, #4]
   27e2c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   27e2e:	4b06      	ldr	r3, [pc, #24]	; (27e48 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27e30:	2200      	movs	r2, #0
   27e32:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   27e34:	4b05      	ldr	r3, [pc, #20]	; (27e4c <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   27e36:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   27e38:	4a03      	ldr	r2, [pc, #12]	; (27e48 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   27e3a:	4b05      	ldr	r3, [pc, #20]	; (27e50 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   27e3c:	681b      	ldr	r3, [r3, #0]
   27e3e:	b29b      	uxth	r3, r3
   27e40:	8493      	strh	r3, [r2, #36]	; 0x24
}
   27e42:	46c0      	nop			; (mov r8, r8)
   27e44:	46bd      	mov	sp, r7
   27e46:	bd80      	pop	{r7, pc}
   27e48:	40000800 	.word	0x40000800
   27e4c:	00027df5 	.word	0x00027df5
   27e50:	20004154 	.word	0x20004154

00027e54 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   27e54:	b580      	push	{r7, lr}
   27e56:	b082      	sub	sp, #8
   27e58:	af00      	add	r7, sp, #0
   27e5a:	0002      	movs	r2, r0
   27e5c:	1dfb      	adds	r3, r7, #7
   27e5e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   27e60:	1dfb      	adds	r3, r7, #7
   27e62:	781b      	ldrb	r3, [r3, #0]
   27e64:	2b08      	cmp	r3, #8
   27e66:	d841      	bhi.n	27eec <system_clock_source_get_hz+0x98>
   27e68:	009a      	lsls	r2, r3, #2
   27e6a:	4b23      	ldr	r3, [pc, #140]	; (27ef8 <system_clock_source_get_hz+0xa4>)
   27e6c:	18d3      	adds	r3, r2, r3
   27e6e:	681b      	ldr	r3, [r3, #0]
   27e70:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   27e72:	4b22      	ldr	r3, [pc, #136]	; (27efc <system_clock_source_get_hz+0xa8>)
   27e74:	691b      	ldr	r3, [r3, #16]
   27e76:	e03a      	b.n	27eee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   27e78:	4b21      	ldr	r3, [pc, #132]	; (27f00 <system_clock_source_get_hz+0xac>)
   27e7a:	6a1b      	ldr	r3, [r3, #32]
   27e7c:	059b      	lsls	r3, r3, #22
   27e7e:	0f9b      	lsrs	r3, r3, #30
   27e80:	b2db      	uxtb	r3, r3
   27e82:	001a      	movs	r2, r3
   27e84:	4b1f      	ldr	r3, [pc, #124]	; (27f04 <system_clock_source_get_hz+0xb0>)
   27e86:	40d3      	lsrs	r3, r2
   27e88:	e031      	b.n	27eee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   27e8a:	2380      	movs	r3, #128	; 0x80
   27e8c:	021b      	lsls	r3, r3, #8
   27e8e:	e02e      	b.n	27eee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   27e90:	2380      	movs	r3, #128	; 0x80
   27e92:	021b      	lsls	r3, r3, #8
   27e94:	e02b      	b.n	27eee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   27e96:	4b19      	ldr	r3, [pc, #100]	; (27efc <system_clock_source_get_hz+0xa8>)
   27e98:	695b      	ldr	r3, [r3, #20]
   27e9a:	e028      	b.n	27eee <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   27e9c:	4b17      	ldr	r3, [pc, #92]	; (27efc <system_clock_source_get_hz+0xa8>)
   27e9e:	681b      	ldr	r3, [r3, #0]
   27ea0:	2202      	movs	r2, #2
   27ea2:	4013      	ands	r3, r2
   27ea4:	d101      	bne.n	27eaa <system_clock_source_get_hz+0x56>
			return 0;
   27ea6:	2300      	movs	r3, #0
   27ea8:	e021      	b.n	27eee <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   27eaa:	4b17      	ldr	r3, [pc, #92]	; (27f08 <system_clock_source_get_hz+0xb4>)
   27eac:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   27eae:	4b13      	ldr	r3, [pc, #76]	; (27efc <system_clock_source_get_hz+0xa8>)
   27eb0:	681b      	ldr	r3, [r3, #0]
   27eb2:	2224      	movs	r2, #36	; 0x24
   27eb4:	4013      	ands	r3, r2
   27eb6:	2b04      	cmp	r3, #4
   27eb8:	d109      	bne.n	27ece <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   27eba:	2000      	movs	r0, #0
   27ebc:	4b13      	ldr	r3, [pc, #76]	; (27f0c <system_clock_source_get_hz+0xb8>)
   27ebe:	4798      	blx	r3
   27ec0:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   27ec2:	4b0e      	ldr	r3, [pc, #56]	; (27efc <system_clock_source_get_hz+0xa8>)
   27ec4:	689b      	ldr	r3, [r3, #8]
   27ec6:	041b      	lsls	r3, r3, #16
   27ec8:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   27eca:	4353      	muls	r3, r2
   27ecc:	e00f      	b.n	27eee <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   27ece:	4b10      	ldr	r3, [pc, #64]	; (27f10 <system_clock_source_get_hz+0xbc>)
   27ed0:	e00d      	b.n	27eee <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   27ed2:	4a0b      	ldr	r2, [pc, #44]	; (27f00 <system_clock_source_get_hz+0xac>)
   27ed4:	2350      	movs	r3, #80	; 0x50
   27ed6:	5cd3      	ldrb	r3, [r2, r3]
   27ed8:	b2db      	uxtb	r3, r3
   27eda:	001a      	movs	r2, r3
   27edc:	2304      	movs	r3, #4
   27ede:	4013      	ands	r3, r2
   27ee0:	d101      	bne.n	27ee6 <system_clock_source_get_hz+0x92>
			return 0;
   27ee2:	2300      	movs	r3, #0
   27ee4:	e003      	b.n	27eee <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   27ee6:	4b05      	ldr	r3, [pc, #20]	; (27efc <system_clock_source_get_hz+0xa8>)
   27ee8:	68db      	ldr	r3, [r3, #12]
   27eea:	e000      	b.n	27eee <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   27eec:	2300      	movs	r3, #0
	}
}
   27eee:	0018      	movs	r0, r3
   27ef0:	46bd      	mov	sp, r7
   27ef2:	b002      	add	sp, #8
   27ef4:	bd80      	pop	{r7, pc}
   27ef6:	46c0      	nop			; (mov r8, r8)
   27ef8:	000379c8 	.word	0x000379c8
   27efc:	20004154 	.word	0x20004154
   27f00:	40000800 	.word	0x40000800
   27f04:	007a1200 	.word	0x007a1200
   27f08:	00027df5 	.word	0x00027df5
   27f0c:	000288f1 	.word	0x000288f1
   27f10:	02dc6c00 	.word	0x02dc6c00

00027f14 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   27f14:	b580      	push	{r7, lr}
   27f16:	b084      	sub	sp, #16
   27f18:	af00      	add	r7, sp, #0
   27f1a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   27f1c:	4b1a      	ldr	r3, [pc, #104]	; (27f88 <system_clock_source_osc8m_set_config+0x74>)
   27f1e:	6a1b      	ldr	r3, [r3, #32]
   27f20:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   27f22:	687b      	ldr	r3, [r7, #4]
   27f24:	781b      	ldrb	r3, [r3, #0]
   27f26:	1c1a      	adds	r2, r3, #0
   27f28:	2303      	movs	r3, #3
   27f2a:	4013      	ands	r3, r2
   27f2c:	b2da      	uxtb	r2, r3
   27f2e:	230d      	movs	r3, #13
   27f30:	18fb      	adds	r3, r7, r3
   27f32:	2103      	movs	r1, #3
   27f34:	400a      	ands	r2, r1
   27f36:	0010      	movs	r0, r2
   27f38:	781a      	ldrb	r2, [r3, #0]
   27f3a:	2103      	movs	r1, #3
   27f3c:	438a      	bics	r2, r1
   27f3e:	1c11      	adds	r1, r2, #0
   27f40:	1c02      	adds	r2, r0, #0
   27f42:	430a      	orrs	r2, r1
   27f44:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   27f46:	687b      	ldr	r3, [r7, #4]
   27f48:	789a      	ldrb	r2, [r3, #2]
   27f4a:	230c      	movs	r3, #12
   27f4c:	18fb      	adds	r3, r7, r3
   27f4e:	01d0      	lsls	r0, r2, #7
   27f50:	781a      	ldrb	r2, [r3, #0]
   27f52:	217f      	movs	r1, #127	; 0x7f
   27f54:	400a      	ands	r2, r1
   27f56:	1c11      	adds	r1, r2, #0
   27f58:	1c02      	adds	r2, r0, #0
   27f5a:	430a      	orrs	r2, r1
   27f5c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   27f5e:	687b      	ldr	r3, [r7, #4]
   27f60:	785a      	ldrb	r2, [r3, #1]
   27f62:	230c      	movs	r3, #12
   27f64:	18fb      	adds	r3, r7, r3
   27f66:	2101      	movs	r1, #1
   27f68:	400a      	ands	r2, r1
   27f6a:	0190      	lsls	r0, r2, #6
   27f6c:	781a      	ldrb	r2, [r3, #0]
   27f6e:	2140      	movs	r1, #64	; 0x40
   27f70:	438a      	bics	r2, r1
   27f72:	1c11      	adds	r1, r2, #0
   27f74:	1c02      	adds	r2, r0, #0
   27f76:	430a      	orrs	r2, r1
   27f78:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   27f7a:	4b03      	ldr	r3, [pc, #12]	; (27f88 <system_clock_source_osc8m_set_config+0x74>)
   27f7c:	68fa      	ldr	r2, [r7, #12]
   27f7e:	621a      	str	r2, [r3, #32]
}
   27f80:	46c0      	nop			; (mov r8, r8)
   27f82:	46bd      	mov	sp, r7
   27f84:	b004      	add	sp, #16
   27f86:	bd80      	pop	{r7, pc}
   27f88:	40000800 	.word	0x40000800

00027f8c <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   27f8c:	b580      	push	{r7, lr}
   27f8e:	b086      	sub	sp, #24
   27f90:	af00      	add	r7, sp, #0
   27f92:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   27f94:	687b      	ldr	r3, [r7, #4]
   27f96:	68db      	ldr	r3, [r3, #12]
   27f98:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   27f9a:	687b      	ldr	r3, [r7, #4]
   27f9c:	7d1b      	ldrb	r3, [r3, #20]
   27f9e:	2b01      	cmp	r3, #1
   27fa0:	d10a      	bne.n	27fb8 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   27fa2:	687b      	ldr	r3, [r7, #4]
   27fa4:	8a1b      	ldrh	r3, [r3, #16]
   27fa6:	3301      	adds	r3, #1
   27fa8:	005b      	lsls	r3, r3, #1
   27faa:	001a      	movs	r2, r3
   27fac:	4b36      	ldr	r3, [pc, #216]	; (28088 <system_clock_source_dpll_set_config+0xfc>)
   27fae:	0011      	movs	r1, r2
   27fb0:	6978      	ldr	r0, [r7, #20]
   27fb2:	4798      	blx	r3
   27fb4:	0003      	movs	r3, r0
   27fb6:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   27fb8:	687b      	ldr	r3, [r7, #4]
   27fba:	689b      	ldr	r3, [r3, #8]
   27fbc:	011a      	lsls	r2, r3, #4
   27fbe:	4b32      	ldr	r3, [pc, #200]	; (28088 <system_clock_source_dpll_set_config+0xfc>)
   27fc0:	6979      	ldr	r1, [r7, #20]
   27fc2:	0010      	movs	r0, r2
   27fc4:	4798      	blx	r3
   27fc6:	0003      	movs	r3, r0
   27fc8:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   27fca:	693b      	ldr	r3, [r7, #16]
   27fcc:	b2da      	uxtb	r2, r3
   27fce:	230f      	movs	r3, #15
   27fd0:	18fb      	adds	r3, r7, r3
   27fd2:	210f      	movs	r1, #15
   27fd4:	400a      	ands	r2, r1
   27fd6:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   27fd8:	693b      	ldr	r3, [r7, #16]
   27fda:	091b      	lsrs	r3, r3, #4
   27fdc:	3b01      	subs	r3, #1
   27fde:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   27fe0:	492a      	ldr	r1, [pc, #168]	; (2808c <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   27fe2:	687b      	ldr	r3, [r7, #4]
   27fe4:	781b      	ldrb	r3, [r3, #0]
   27fe6:	01db      	lsls	r3, r3, #7
   27fe8:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   27fea:	687b      	ldr	r3, [r7, #4]
   27fec:	785b      	ldrb	r3, [r3, #1]
   27fee:	019b      	lsls	r3, r3, #6
   27ff0:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   27ff2:	4313      	orrs	r3, r2
   27ff4:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   27ff6:	2344      	movs	r3, #68	; 0x44
   27ff8:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   27ffa:	4b24      	ldr	r3, [pc, #144]	; (2808c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   27ffc:	220f      	movs	r2, #15
   27ffe:	18ba      	adds	r2, r7, r2
   28000:	7812      	ldrb	r2, [r2, #0]
   28002:	0412      	lsls	r2, r2, #16
   28004:	0011      	movs	r1, r2
   28006:	22f0      	movs	r2, #240	; 0xf0
   28008:	0312      	lsls	r2, r2, #12
   2800a:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2800c:	693a      	ldr	r2, [r7, #16]
   2800e:	0512      	lsls	r2, r2, #20
   28010:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   28012:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   28014:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   28016:	4b1d      	ldr	r3, [pc, #116]	; (2808c <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   28018:	687a      	ldr	r2, [r7, #4]
   2801a:	8a12      	ldrh	r2, [r2, #16]
   2801c:	0412      	lsls	r2, r2, #16
   2801e:	0011      	movs	r1, r2
   28020:	4a1b      	ldr	r2, [pc, #108]	; (28090 <system_clock_source_dpll_set_config+0x104>)
   28022:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   28024:	687a      	ldr	r2, [r7, #4]
   28026:	7892      	ldrb	r2, [r2, #2]
   28028:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2802a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2802c:	687a      	ldr	r2, [r7, #4]
   2802e:	7cd2      	ldrb	r2, [r2, #19]
   28030:	0212      	lsls	r2, r2, #8
   28032:	0010      	movs	r0, r2
   28034:	22e0      	movs	r2, #224	; 0xe0
   28036:	00d2      	lsls	r2, r2, #3
   28038:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2803a:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2803c:	687a      	ldr	r2, [r7, #4]
   2803e:	7d12      	ldrb	r2, [r2, #20]
   28040:	0112      	lsls	r2, r2, #4
   28042:	0010      	movs	r0, r2
   28044:	2230      	movs	r2, #48	; 0x30
   28046:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   28048:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2804a:	687a      	ldr	r2, [r7, #4]
   2804c:	78d2      	ldrb	r2, [r2, #3]
   2804e:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   28050:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28052:	687a      	ldr	r2, [r7, #4]
   28054:	7912      	ldrb	r2, [r2, #4]
   28056:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   28058:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2805a:	687a      	ldr	r2, [r7, #4]
   2805c:	7c92      	ldrb	r2, [r2, #18]
   2805e:	0010      	movs	r0, r2
   28060:	2203      	movs	r2, #3
   28062:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   28064:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   28066:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   28068:	693b      	ldr	r3, [r7, #16]
   2806a:	3301      	adds	r3, #1
   2806c:	011a      	lsls	r2, r3, #4
   2806e:	230f      	movs	r3, #15
   28070:	18fb      	adds	r3, r7, r3
   28072:	781b      	ldrb	r3, [r3, #0]
   28074:	18d3      	adds	r3, r2, r3
   28076:	697a      	ldr	r2, [r7, #20]
   28078:	4353      	muls	r3, r2
   2807a:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2807c:	4b05      	ldr	r3, [pc, #20]	; (28094 <system_clock_source_dpll_set_config+0x108>)
   2807e:	60da      	str	r2, [r3, #12]
}
   28080:	46c0      	nop			; (mov r8, r8)
   28082:	46bd      	mov	sp, r7
   28084:	b006      	add	sp, #24
   28086:	bd80      	pop	{r7, pc}
   28088:	0003130d 	.word	0x0003130d
   2808c:	40000800 	.word	0x40000800
   28090:	07ff0000 	.word	0x07ff0000
   28094:	20004154 	.word	0x20004154

00028098 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   28098:	b580      	push	{r7, lr}
   2809a:	b082      	sub	sp, #8
   2809c:	af00      	add	r7, sp, #0
   2809e:	0002      	movs	r2, r0
   280a0:	1dfb      	adds	r3, r7, #7
   280a2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   280a4:	1dfb      	adds	r3, r7, #7
   280a6:	781b      	ldrb	r3, [r3, #0]
   280a8:	2b08      	cmp	r3, #8
   280aa:	d83b      	bhi.n	28124 <system_clock_source_enable+0x8c>
   280ac:	009a      	lsls	r2, r3, #2
   280ae:	4b21      	ldr	r3, [pc, #132]	; (28134 <system_clock_source_enable+0x9c>)
   280b0:	18d3      	adds	r3, r2, r3
   280b2:	681b      	ldr	r3, [r3, #0]
   280b4:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   280b6:	4b20      	ldr	r3, [pc, #128]	; (28138 <system_clock_source_enable+0xa0>)
   280b8:	4a1f      	ldr	r2, [pc, #124]	; (28138 <system_clock_source_enable+0xa0>)
   280ba:	6a12      	ldr	r2, [r2, #32]
   280bc:	2102      	movs	r1, #2
   280be:	430a      	orrs	r2, r1
   280c0:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   280c2:	2300      	movs	r3, #0
   280c4:	e031      	b.n	2812a <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   280c6:	4b1c      	ldr	r3, [pc, #112]	; (28138 <system_clock_source_enable+0xa0>)
   280c8:	4a1b      	ldr	r2, [pc, #108]	; (28138 <system_clock_source_enable+0xa0>)
   280ca:	6992      	ldr	r2, [r2, #24]
   280cc:	2102      	movs	r1, #2
   280ce:	430a      	orrs	r2, r1
   280d0:	619a      	str	r2, [r3, #24]
		break;
   280d2:	e029      	b.n	28128 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   280d4:	4a18      	ldr	r2, [pc, #96]	; (28138 <system_clock_source_enable+0xa0>)
   280d6:	4b18      	ldr	r3, [pc, #96]	; (28138 <system_clock_source_enable+0xa0>)
   280d8:	8a1b      	ldrh	r3, [r3, #16]
   280da:	b29b      	uxth	r3, r3
   280dc:	2102      	movs	r1, #2
   280de:	430b      	orrs	r3, r1
   280e0:	b29b      	uxth	r3, r3
   280e2:	8213      	strh	r3, [r2, #16]
		break;
   280e4:	e020      	b.n	28128 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   280e6:	4a14      	ldr	r2, [pc, #80]	; (28138 <system_clock_source_enable+0xa0>)
   280e8:	4b13      	ldr	r3, [pc, #76]	; (28138 <system_clock_source_enable+0xa0>)
   280ea:	8a9b      	ldrh	r3, [r3, #20]
   280ec:	b29b      	uxth	r3, r3
   280ee:	2102      	movs	r1, #2
   280f0:	430b      	orrs	r3, r1
   280f2:	b29b      	uxth	r3, r3
   280f4:	8293      	strh	r3, [r2, #20]
		break;
   280f6:	e017      	b.n	28128 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   280f8:	4b10      	ldr	r3, [pc, #64]	; (2813c <system_clock_source_enable+0xa4>)
   280fa:	681b      	ldr	r3, [r3, #0]
   280fc:	2202      	movs	r2, #2
   280fe:	431a      	orrs	r2, r3
   28100:	4b0e      	ldr	r3, [pc, #56]	; (2813c <system_clock_source_enable+0xa4>)
   28102:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   28104:	4b0e      	ldr	r3, [pc, #56]	; (28140 <system_clock_source_enable+0xa8>)
   28106:	4798      	blx	r3
		break;
   28108:	e00e      	b.n	28128 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2810a:	4a0b      	ldr	r2, [pc, #44]	; (28138 <system_clock_source_enable+0xa0>)
   2810c:	490a      	ldr	r1, [pc, #40]	; (28138 <system_clock_source_enable+0xa0>)
   2810e:	2344      	movs	r3, #68	; 0x44
   28110:	5ccb      	ldrb	r3, [r1, r3]
   28112:	b2db      	uxtb	r3, r3
   28114:	2102      	movs	r1, #2
   28116:	430b      	orrs	r3, r1
   28118:	b2d9      	uxtb	r1, r3
   2811a:	2344      	movs	r3, #68	; 0x44
   2811c:	54d1      	strb	r1, [r2, r3]
		break;
   2811e:	e003      	b.n	28128 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   28120:	2300      	movs	r3, #0
   28122:	e002      	b.n	2812a <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   28124:	2317      	movs	r3, #23
   28126:	e000      	b.n	2812a <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   28128:	2300      	movs	r3, #0
}
   2812a:	0018      	movs	r0, r3
   2812c:	46bd      	mov	sp, r7
   2812e:	b002      	add	sp, #8
   28130:	bd80      	pop	{r7, pc}
   28132:	46c0      	nop			; (mov r8, r8)
   28134:	000379ec 	.word	0x000379ec
   28138:	40000800 	.word	0x40000800
   2813c:	20004154 	.word	0x20004154
   28140:	00027e11 	.word	0x00027e11

00028144 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   28144:	b580      	push	{r7, lr}
   28146:	b084      	sub	sp, #16
   28148:	af00      	add	r7, sp, #0
   2814a:	0002      	movs	r2, r0
   2814c:	1dfb      	adds	r3, r7, #7
   2814e:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   28150:	2300      	movs	r3, #0
   28152:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   28154:	1dfb      	adds	r3, r7, #7
   28156:	781b      	ldrb	r3, [r3, #0]
   28158:	2b08      	cmp	r3, #8
   2815a:	d821      	bhi.n	281a0 <system_clock_source_is_ready+0x5c>
   2815c:	009a      	lsls	r2, r3, #2
   2815e:	4b18      	ldr	r3, [pc, #96]	; (281c0 <system_clock_source_is_ready+0x7c>)
   28160:	18d3      	adds	r3, r2, r3
   28162:	681b      	ldr	r3, [r3, #0]
   28164:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   28166:	2308      	movs	r3, #8
   28168:	60fb      	str	r3, [r7, #12]
		break;
   2816a:	e01b      	b.n	281a4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2816c:	2304      	movs	r3, #4
   2816e:	60fb      	str	r3, [r7, #12]
		break;
   28170:	e018      	b.n	281a4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   28172:	2301      	movs	r3, #1
   28174:	60fb      	str	r3, [r7, #12]
		break;
   28176:	e015      	b.n	281a4 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   28178:	2302      	movs	r3, #2
   2817a:	60fb      	str	r3, [r7, #12]
		break;
   2817c:	e012      	b.n	281a4 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2817e:	2310      	movs	r3, #16
   28180:	60fb      	str	r3, [r7, #12]
		}
		break;
   28182:	e00f      	b.n	281a4 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   28184:	4a0f      	ldr	r2, [pc, #60]	; (281c4 <system_clock_source_is_ready+0x80>)
   28186:	2350      	movs	r3, #80	; 0x50
   28188:	5cd3      	ldrb	r3, [r2, r3]
   2818a:	b2db      	uxtb	r3, r3
   2818c:	001a      	movs	r2, r3
   2818e:	2303      	movs	r3, #3
   28190:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   28192:	3b03      	subs	r3, #3
   28194:	425a      	negs	r2, r3
   28196:	4153      	adcs	r3, r2
   28198:	b2db      	uxtb	r3, r3
   2819a:	e00c      	b.n	281b6 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2819c:	2301      	movs	r3, #1
   2819e:	e00a      	b.n	281b6 <system_clock_source_is_ready+0x72>

	default:
		return false;
   281a0:	2300      	movs	r3, #0
   281a2:	e008      	b.n	281b6 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   281a4:	4b07      	ldr	r3, [pc, #28]	; (281c4 <system_clock_source_is_ready+0x80>)
   281a6:	68db      	ldr	r3, [r3, #12]
   281a8:	68fa      	ldr	r2, [r7, #12]
   281aa:	401a      	ands	r2, r3
   281ac:	68fb      	ldr	r3, [r7, #12]
   281ae:	1ad3      	subs	r3, r2, r3
   281b0:	425a      	negs	r2, r3
   281b2:	4153      	adcs	r3, r2
   281b4:	b2db      	uxtb	r3, r3
}
   281b6:	0018      	movs	r0, r3
   281b8:	46bd      	mov	sp, r7
   281ba:	b004      	add	sp, #16
   281bc:	bd80      	pop	{r7, pc}
   281be:	46c0      	nop			; (mov r8, r8)
   281c0:	00037a10 	.word	0x00037a10
   281c4:	40000800 	.word	0x40000800

000281c8 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   281c8:	b580      	push	{r7, lr}
   281ca:	b082      	sub	sp, #8
   281cc:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   281ce:	003b      	movs	r3, r7
   281d0:	2203      	movs	r2, #3
   281d2:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   281d4:	2300      	movs	r3, #0
   281d6:	607b      	str	r3, [r7, #4]
   281d8:	e009      	b.n	281ee <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   281da:	687b      	ldr	r3, [r7, #4]
   281dc:	b2db      	uxtb	r3, r3
   281de:	003a      	movs	r2, r7
   281e0:	0011      	movs	r1, r2
   281e2:	0018      	movs	r0, r3
   281e4:	4b05      	ldr	r3, [pc, #20]	; (281fc <_switch_peripheral_gclk+0x34>)
   281e6:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   281e8:	687b      	ldr	r3, [r7, #4]
   281ea:	3301      	adds	r3, #1
   281ec:	607b      	str	r3, [r7, #4]
   281ee:	687b      	ldr	r3, [r7, #4]
   281f0:	2b24      	cmp	r3, #36	; 0x24
   281f2:	d9f2      	bls.n	281da <_switch_peripheral_gclk+0x12>
	}
}
   281f4:	46c0      	nop			; (mov r8, r8)
   281f6:	46bd      	mov	sp, r7
   281f8:	b002      	add	sp, #8
   281fa:	bd80      	pop	{r7, pc}
   281fc:	000287cd 	.word	0x000287cd

00028200 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   28200:	b580      	push	{r7, lr}
   28202:	b0a6      	sub	sp, #152	; 0x98
   28204:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   28206:	4b92      	ldr	r3, [pc, #584]	; (28450 <system_clock_init+0x250>)
   28208:	22c2      	movs	r2, #194	; 0xc2
   2820a:	00d2      	lsls	r2, r2, #3
   2820c:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2820e:	2003      	movs	r0, #3
   28210:	4b90      	ldr	r3, [pc, #576]	; (28454 <system_clock_init+0x254>)
   28212:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   28214:	4b90      	ldr	r3, [pc, #576]	; (28458 <system_clock_init+0x258>)
   28216:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   28218:	2394      	movs	r3, #148	; 0x94
   2821a:	18fb      	adds	r3, r7, r3
   2821c:	0018      	movs	r0, r3
   2821e:	4b8f      	ldr	r3, [pc, #572]	; (2845c <system_clock_init+0x25c>)
   28220:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   28222:	2394      	movs	r3, #148	; 0x94
   28224:	18fb      	adds	r3, r7, r3
   28226:	2200      	movs	r2, #0
   28228:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2822a:	2394      	movs	r3, #148	; 0x94
   2822c:	18fb      	adds	r3, r7, r3
   2822e:	2201      	movs	r2, #1
   28230:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   28232:	2394      	movs	r3, #148	; 0x94
   28234:	18fb      	adds	r3, r7, r3
   28236:	2200      	movs	r2, #0
   28238:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2823a:	2394      	movs	r3, #148	; 0x94
   2823c:	18fb      	adds	r3, r7, r3
   2823e:	0018      	movs	r0, r3
   28240:	4b87      	ldr	r3, [pc, #540]	; (28460 <system_clock_init+0x260>)
   28242:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   28244:	2006      	movs	r0, #6
   28246:	4b87      	ldr	r3, [pc, #540]	; (28464 <system_clock_init+0x264>)
   28248:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2824a:	4b87      	ldr	r3, [pc, #540]	; (28468 <system_clock_init+0x268>)
   2824c:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2824e:	2360      	movs	r3, #96	; 0x60
   28250:	18fb      	adds	r3, r7, r3
   28252:	0018      	movs	r0, r3
   28254:	4b85      	ldr	r3, [pc, #532]	; (2846c <system_clock_init+0x26c>)
   28256:	4798      	blx	r3
   28258:	2360      	movs	r3, #96	; 0x60
   2825a:	18fb      	adds	r3, r7, r3
   2825c:	2206      	movs	r2, #6
   2825e:	701a      	strb	r2, [r3, #0]
   28260:	2360      	movs	r3, #96	; 0x60
   28262:	18fb      	adds	r3, r7, r3
   28264:	2208      	movs	r2, #8
   28266:	605a      	str	r2, [r3, #4]
   28268:	2360      	movs	r3, #96	; 0x60
   2826a:	18fb      	adds	r3, r7, r3
   2826c:	2200      	movs	r2, #0
   2826e:	721a      	strb	r2, [r3, #8]
   28270:	2360      	movs	r3, #96	; 0x60
   28272:	18fb      	adds	r3, r7, r3
   28274:	2200      	movs	r2, #0
   28276:	725a      	strb	r2, [r3, #9]
   28278:	2360      	movs	r3, #96	; 0x60
   2827a:	18fb      	adds	r3, r7, r3
   2827c:	0019      	movs	r1, r3
   2827e:	2001      	movs	r0, #1
   28280:	4b7b      	ldr	r3, [pc, #492]	; (28470 <system_clock_init+0x270>)
   28282:	4798      	blx	r3
   28284:	2001      	movs	r0, #1
   28286:	4b7b      	ldr	r3, [pc, #492]	; (28474 <system_clock_init+0x274>)
   28288:	4798      	blx	r3
   2828a:	2354      	movs	r3, #84	; 0x54
   2828c:	18fb      	adds	r3, r7, r3
   2828e:	0018      	movs	r0, r3
   28290:	4b76      	ldr	r3, [pc, #472]	; (2846c <system_clock_init+0x26c>)
   28292:	4798      	blx	r3
   28294:	2354      	movs	r3, #84	; 0x54
   28296:	18fb      	adds	r3, r7, r3
   28298:	2203      	movs	r2, #3
   2829a:	701a      	strb	r2, [r3, #0]
   2829c:	2354      	movs	r3, #84	; 0x54
   2829e:	18fb      	adds	r3, r7, r3
   282a0:	2201      	movs	r2, #1
   282a2:	605a      	str	r2, [r3, #4]
   282a4:	2354      	movs	r3, #84	; 0x54
   282a6:	18fb      	adds	r3, r7, r3
   282a8:	2201      	movs	r2, #1
   282aa:	721a      	strb	r2, [r3, #8]
   282ac:	2354      	movs	r3, #84	; 0x54
   282ae:	18fb      	adds	r3, r7, r3
   282b0:	2200      	movs	r2, #0
   282b2:	725a      	strb	r2, [r3, #9]
   282b4:	2354      	movs	r3, #84	; 0x54
   282b6:	18fb      	adds	r3, r7, r3
   282b8:	0019      	movs	r1, r3
   282ba:	2002      	movs	r0, #2
   282bc:	4b6c      	ldr	r3, [pc, #432]	; (28470 <system_clock_init+0x270>)
   282be:	4798      	blx	r3
   282c0:	2002      	movs	r0, #2
   282c2:	4b6c      	ldr	r3, [pc, #432]	; (28474 <system_clock_init+0x274>)
   282c4:	4798      	blx	r3
   282c6:	233c      	movs	r3, #60	; 0x3c
   282c8:	18fb      	adds	r3, r7, r3
   282ca:	0018      	movs	r0, r3
   282cc:	4b67      	ldr	r3, [pc, #412]	; (2846c <system_clock_init+0x26c>)
   282ce:	4798      	blx	r3
   282d0:	233c      	movs	r3, #60	; 0x3c
   282d2:	18fb      	adds	r3, r7, r3
   282d4:	2203      	movs	r2, #3
   282d6:	701a      	strb	r2, [r3, #0]
   282d8:	233c      	movs	r3, #60	; 0x3c
   282da:	18fb      	adds	r3, r7, r3
   282dc:	2220      	movs	r2, #32
   282de:	605a      	str	r2, [r3, #4]
   282e0:	233c      	movs	r3, #60	; 0x3c
   282e2:	18fb      	adds	r3, r7, r3
   282e4:	2200      	movs	r2, #0
   282e6:	721a      	strb	r2, [r3, #8]
   282e8:	233c      	movs	r3, #60	; 0x3c
   282ea:	18fb      	adds	r3, r7, r3
   282ec:	2200      	movs	r2, #0
   282ee:	725a      	strb	r2, [r3, #9]
   282f0:	233c      	movs	r3, #60	; 0x3c
   282f2:	18fb      	adds	r3, r7, r3
   282f4:	0019      	movs	r1, r3
   282f6:	2004      	movs	r0, #4
   282f8:	4b5d      	ldr	r3, [pc, #372]	; (28470 <system_clock_init+0x270>)
   282fa:	4798      	blx	r3
   282fc:	2004      	movs	r0, #4
   282fe:	4b5d      	ldr	r3, [pc, #372]	; (28474 <system_clock_init+0x274>)
   28300:	4798      	blx	r3
   28302:	2330      	movs	r3, #48	; 0x30
   28304:	18fb      	adds	r3, r7, r3
   28306:	0018      	movs	r0, r3
   28308:	4b58      	ldr	r3, [pc, #352]	; (2846c <system_clock_init+0x26c>)
   2830a:	4798      	blx	r3
   2830c:	2330      	movs	r3, #48	; 0x30
   2830e:	18fb      	adds	r3, r7, r3
   28310:	2206      	movs	r2, #6
   28312:	701a      	strb	r2, [r3, #0]
   28314:	2330      	movs	r3, #48	; 0x30
   28316:	18fb      	adds	r3, r7, r3
   28318:	2201      	movs	r2, #1
   2831a:	605a      	str	r2, [r3, #4]
   2831c:	2330      	movs	r3, #48	; 0x30
   2831e:	18fb      	adds	r3, r7, r3
   28320:	2200      	movs	r2, #0
   28322:	721a      	strb	r2, [r3, #8]
   28324:	2330      	movs	r3, #48	; 0x30
   28326:	18fb      	adds	r3, r7, r3
   28328:	2200      	movs	r2, #0
   2832a:	725a      	strb	r2, [r3, #9]
   2832c:	2330      	movs	r3, #48	; 0x30
   2832e:	18fb      	adds	r3, r7, r3
   28330:	0019      	movs	r1, r3
   28332:	2005      	movs	r0, #5
   28334:	4b4e      	ldr	r3, [pc, #312]	; (28470 <system_clock_init+0x270>)
   28336:	4798      	blx	r3
   28338:	2005      	movs	r0, #5
   2833a:	4b4e      	ldr	r3, [pc, #312]	; (28474 <system_clock_init+0x274>)
   2833c:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2833e:	2390      	movs	r3, #144	; 0x90
   28340:	18fb      	adds	r3, r7, r3
   28342:	0018      	movs	r0, r3
   28344:	4b4c      	ldr	r3, [pc, #304]	; (28478 <system_clock_init+0x278>)
   28346:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   28348:	2390      	movs	r3, #144	; 0x90
   2834a:	18fb      	adds	r3, r7, r3
   2834c:	2201      	movs	r2, #1
   2834e:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   28350:	2390      	movs	r3, #144	; 0x90
   28352:	18fb      	adds	r3, r7, r3
   28354:	0019      	movs	r1, r3
   28356:	2001      	movs	r0, #1
   28358:	4b48      	ldr	r3, [pc, #288]	; (2847c <system_clock_init+0x27c>)
   2835a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2835c:	2001      	movs	r0, #1
   2835e:	4b48      	ldr	r3, [pc, #288]	; (28480 <system_clock_init+0x280>)
   28360:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   28362:	2378      	movs	r3, #120	; 0x78
   28364:	18fb      	adds	r3, r7, r3
   28366:	0018      	movs	r0, r3
   28368:	4b46      	ldr	r3, [pc, #280]	; (28484 <system_clock_init+0x284>)
   2836a:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2836c:	2378      	movs	r3, #120	; 0x78
   2836e:	18fb      	adds	r3, r7, r3
   28370:	2200      	movs	r2, #0
   28372:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   28374:	2378      	movs	r3, #120	; 0x78
   28376:	18fb      	adds	r3, r7, r3
   28378:	2200      	movs	r2, #0
   2837a:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2837c:	2378      	movs	r3, #120	; 0x78
   2837e:	18fb      	adds	r3, r7, r3
   28380:	2200      	movs	r2, #0
   28382:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   28384:	2378      	movs	r3, #120	; 0x78
   28386:	18fb      	adds	r3, r7, r3
   28388:	2200      	movs	r2, #0
   2838a:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2838c:	2378      	movs	r3, #120	; 0x78
   2838e:	18fb      	adds	r3, r7, r3
   28390:	2200      	movs	r2, #0
   28392:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   28394:	2378      	movs	r3, #120	; 0x78
   28396:	18fb      	adds	r3, r7, r3
   28398:	2200      	movs	r2, #0
   2839a:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2839c:	2378      	movs	r3, #120	; 0x78
   2839e:	18fb      	adds	r3, r7, r3
   283a0:	2200      	movs	r2, #0
   283a2:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   283a4:	2378      	movs	r3, #120	; 0x78
   283a6:	18fb      	adds	r3, r7, r3
   283a8:	2202      	movs	r2, #2
   283aa:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   283ac:	2378      	movs	r3, #120	; 0x78
   283ae:	18fb      	adds	r3, r7, r3
   283b0:	4a35      	ldr	r2, [pc, #212]	; (28488 <system_clock_init+0x288>)
   283b2:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   283b4:	2378      	movs	r3, #120	; 0x78
   283b6:	18fb      	adds	r3, r7, r3
   283b8:	2201      	movs	r2, #1
   283ba:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   283bc:	2378      	movs	r3, #120	; 0x78
   283be:	18fb      	adds	r3, r7, r3
   283c0:	4a32      	ldr	r2, [pc, #200]	; (2848c <system_clock_init+0x28c>)
   283c2:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   283c4:	2378      	movs	r3, #120	; 0x78
   283c6:	18fb      	adds	r3, r7, r3
   283c8:	0018      	movs	r0, r3
   283ca:	4b31      	ldr	r3, [pc, #196]	; (28490 <system_clock_init+0x290>)
   283cc:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   283ce:	2008      	movs	r0, #8
   283d0:	4b24      	ldr	r3, [pc, #144]	; (28464 <system_clock_init+0x264>)
   283d2:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   283d4:	46c0      	nop			; (mov r8, r8)
   283d6:	2008      	movs	r0, #8
   283d8:	4b2e      	ldr	r3, [pc, #184]	; (28494 <system_clock_init+0x294>)
   283da:	4798      	blx	r3
   283dc:	0003      	movs	r3, r0
   283de:	001a      	movs	r2, r3
   283e0:	2301      	movs	r3, #1
   283e2:	4053      	eors	r3, r2
   283e4:	b2db      	uxtb	r3, r3
   283e6:	2b00      	cmp	r3, #0
   283e8:	d1f5      	bne.n	283d6 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   283ea:	4919      	ldr	r1, [pc, #100]	; (28450 <system_clock_init+0x250>)
   283ec:	2244      	movs	r2, #68	; 0x44
   283ee:	5c8b      	ldrb	r3, [r1, r2]
   283f0:	2080      	movs	r0, #128	; 0x80
   283f2:	4240      	negs	r0, r0
   283f4:	4303      	orrs	r3, r0
   283f6:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   283f8:	2000      	movs	r0, #0
   283fa:	4b27      	ldr	r3, [pc, #156]	; (28498 <system_clock_init+0x298>)
   283fc:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   283fe:	2100      	movs	r1, #0
   28400:	2000      	movs	r0, #0
   28402:	4b26      	ldr	r3, [pc, #152]	; (2849c <system_clock_init+0x29c>)
   28404:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   28406:	2100      	movs	r1, #0
   28408:	2001      	movs	r0, #1
   2840a:	4b24      	ldr	r3, [pc, #144]	; (2849c <system_clock_init+0x29c>)
   2840c:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2840e:	2100      	movs	r1, #0
   28410:	2002      	movs	r0, #2
   28412:	4b22      	ldr	r3, [pc, #136]	; (2849c <system_clock_init+0x29c>)
   28414:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   28416:	003b      	movs	r3, r7
   28418:	0018      	movs	r0, r3
   2841a:	4b14      	ldr	r3, [pc, #80]	; (2846c <system_clock_init+0x26c>)
   2841c:	4798      	blx	r3
   2841e:	003b      	movs	r3, r7
   28420:	2208      	movs	r2, #8
   28422:	701a      	strb	r2, [r3, #0]
   28424:	003b      	movs	r3, r7
   28426:	2201      	movs	r2, #1
   28428:	605a      	str	r2, [r3, #4]
   2842a:	003b      	movs	r3, r7
   2842c:	2200      	movs	r2, #0
   2842e:	721a      	strb	r2, [r3, #8]
   28430:	003b      	movs	r3, r7
   28432:	2201      	movs	r2, #1
   28434:	725a      	strb	r2, [r3, #9]
   28436:	003b      	movs	r3, r7
   28438:	0019      	movs	r1, r3
   2843a:	2000      	movs	r0, #0
   2843c:	4b0c      	ldr	r3, [pc, #48]	; (28470 <system_clock_init+0x270>)
   2843e:	4798      	blx	r3
   28440:	2000      	movs	r0, #0
   28442:	4b0c      	ldr	r3, [pc, #48]	; (28474 <system_clock_init+0x274>)
   28444:	4798      	blx	r3
#endif
}
   28446:	46c0      	nop			; (mov r8, r8)
   28448:	46bd      	mov	sp, r7
   2844a:	b026      	add	sp, #152	; 0x98
   2844c:	bd80      	pop	{r7, pc}
   2844e:	46c0      	nop			; (mov r8, r8)
   28450:	40000800 	.word	0x40000800
   28454:	00027dc1 	.word	0x00027dc1
   28458:	000281c9 	.word	0x000281c9
   2845c:	00027cd1 	.word	0x00027cd1
   28460:	00027f15 	.word	0x00027f15
   28464:	00028099 	.word	0x00028099
   28468:	00028545 	.word	0x00028545
   2846c:	00027c8d 	.word	0x00027c8d
   28470:	00028575 	.word	0x00028575
   28474:	00028699 	.word	0x00028699
   28478:	00027cbb 	.word	0x00027cbb
   2847c:	000287cd 	.word	0x000287cd
   28480:	00028811 	.word	0x00028811
   28484:	00027d69 	.word	0x00027d69
   28488:	000f4240 	.word	0x000f4240
   2848c:	02dc6c00 	.word	0x02dc6c00
   28490:	00027f8d 	.word	0x00027f8d
   28494:	00028145 	.word	0x00028145
   28498:	00027cf5 	.word	0x00027cf5
   2849c:	00027d15 	.word	0x00027d15

000284a0 <system_apb_clock_set_mask>:
{
   284a0:	b580      	push	{r7, lr}
   284a2:	b082      	sub	sp, #8
   284a4:	af00      	add	r7, sp, #0
   284a6:	0002      	movs	r2, r0
   284a8:	6039      	str	r1, [r7, #0]
   284aa:	1dfb      	adds	r3, r7, #7
   284ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   284ae:	1dfb      	adds	r3, r7, #7
   284b0:	781b      	ldrb	r3, [r3, #0]
   284b2:	2b01      	cmp	r3, #1
   284b4:	d00a      	beq.n	284cc <system_apb_clock_set_mask+0x2c>
   284b6:	2b02      	cmp	r3, #2
   284b8:	d00f      	beq.n	284da <system_apb_clock_set_mask+0x3a>
   284ba:	2b00      	cmp	r3, #0
   284bc:	d114      	bne.n	284e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   284be:	4b0e      	ldr	r3, [pc, #56]	; (284f8 <system_apb_clock_set_mask+0x58>)
   284c0:	4a0d      	ldr	r2, [pc, #52]	; (284f8 <system_apb_clock_set_mask+0x58>)
   284c2:	6991      	ldr	r1, [r2, #24]
   284c4:	683a      	ldr	r2, [r7, #0]
   284c6:	430a      	orrs	r2, r1
   284c8:	619a      	str	r2, [r3, #24]
			break;
   284ca:	e00f      	b.n	284ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   284cc:	4b0a      	ldr	r3, [pc, #40]	; (284f8 <system_apb_clock_set_mask+0x58>)
   284ce:	4a0a      	ldr	r2, [pc, #40]	; (284f8 <system_apb_clock_set_mask+0x58>)
   284d0:	69d1      	ldr	r1, [r2, #28]
   284d2:	683a      	ldr	r2, [r7, #0]
   284d4:	430a      	orrs	r2, r1
   284d6:	61da      	str	r2, [r3, #28]
			break;
   284d8:	e008      	b.n	284ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   284da:	4b07      	ldr	r3, [pc, #28]	; (284f8 <system_apb_clock_set_mask+0x58>)
   284dc:	4a06      	ldr	r2, [pc, #24]	; (284f8 <system_apb_clock_set_mask+0x58>)
   284de:	6a11      	ldr	r1, [r2, #32]
   284e0:	683a      	ldr	r2, [r7, #0]
   284e2:	430a      	orrs	r2, r1
   284e4:	621a      	str	r2, [r3, #32]
			break;
   284e6:	e001      	b.n	284ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   284e8:	2317      	movs	r3, #23
   284ea:	e000      	b.n	284ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   284ec:	2300      	movs	r3, #0
}
   284ee:	0018      	movs	r0, r3
   284f0:	46bd      	mov	sp, r7
   284f2:	b002      	add	sp, #8
   284f4:	bd80      	pop	{r7, pc}
   284f6:	46c0      	nop			; (mov r8, r8)
   284f8:	40000400 	.word	0x40000400

000284fc <system_interrupt_enter_critical_section>:
{
   284fc:	b580      	push	{r7, lr}
   284fe:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   28500:	4b02      	ldr	r3, [pc, #8]	; (2850c <system_interrupt_enter_critical_section+0x10>)
   28502:	4798      	blx	r3
}
   28504:	46c0      	nop			; (mov r8, r8)
   28506:	46bd      	mov	sp, r7
   28508:	bd80      	pop	{r7, pc}
   2850a:	46c0      	nop			; (mov r8, r8)
   2850c:	00024b39 	.word	0x00024b39

00028510 <system_interrupt_leave_critical_section>:
{
   28510:	b580      	push	{r7, lr}
   28512:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   28514:	4b02      	ldr	r3, [pc, #8]	; (28520 <system_interrupt_leave_critical_section+0x10>)
   28516:	4798      	blx	r3
}
   28518:	46c0      	nop			; (mov r8, r8)
   2851a:	46bd      	mov	sp, r7
   2851c:	bd80      	pop	{r7, pc}
   2851e:	46c0      	nop			; (mov r8, r8)
   28520:	00024b8d 	.word	0x00024b8d

00028524 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   28524:	b580      	push	{r7, lr}
   28526:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   28528:	4b05      	ldr	r3, [pc, #20]	; (28540 <system_gclk_is_syncing+0x1c>)
   2852a:	785b      	ldrb	r3, [r3, #1]
   2852c:	b2db      	uxtb	r3, r3
   2852e:	b25b      	sxtb	r3, r3
   28530:	2b00      	cmp	r3, #0
   28532:	da01      	bge.n	28538 <system_gclk_is_syncing+0x14>
		return true;
   28534:	2301      	movs	r3, #1
   28536:	e000      	b.n	2853a <system_gclk_is_syncing+0x16>
	}

	return false;
   28538:	2300      	movs	r3, #0
}
   2853a:	0018      	movs	r0, r3
   2853c:	46bd      	mov	sp, r7
   2853e:	bd80      	pop	{r7, pc}
   28540:	40000c00 	.word	0x40000c00

00028544 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   28544:	b580      	push	{r7, lr}
   28546:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   28548:	2108      	movs	r1, #8
   2854a:	2000      	movs	r0, #0
   2854c:	4b07      	ldr	r3, [pc, #28]	; (2856c <system_gclk_init+0x28>)
   2854e:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   28550:	4b07      	ldr	r3, [pc, #28]	; (28570 <system_gclk_init+0x2c>)
   28552:	2201      	movs	r2, #1
   28554:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   28556:	46c0      	nop			; (mov r8, r8)
   28558:	4b05      	ldr	r3, [pc, #20]	; (28570 <system_gclk_init+0x2c>)
   2855a:	781b      	ldrb	r3, [r3, #0]
   2855c:	b2db      	uxtb	r3, r3
   2855e:	001a      	movs	r2, r3
   28560:	2301      	movs	r3, #1
   28562:	4013      	ands	r3, r2
   28564:	d1f8      	bne.n	28558 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   28566:	46c0      	nop			; (mov r8, r8)
   28568:	46bd      	mov	sp, r7
   2856a:	bd80      	pop	{r7, pc}
   2856c:	000284a1 	.word	0x000284a1
   28570:	40000c00 	.word	0x40000c00

00028574 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   28574:	b580      	push	{r7, lr}
   28576:	b086      	sub	sp, #24
   28578:	af00      	add	r7, sp, #0
   2857a:	0002      	movs	r2, r0
   2857c:	6039      	str	r1, [r7, #0]
   2857e:	1dfb      	adds	r3, r7, #7
   28580:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   28582:	1dfb      	adds	r3, r7, #7
   28584:	781b      	ldrb	r3, [r3, #0]
   28586:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   28588:	1dfb      	adds	r3, r7, #7
   2858a:	781b      	ldrb	r3, [r3, #0]
   2858c:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2858e:	683b      	ldr	r3, [r7, #0]
   28590:	781b      	ldrb	r3, [r3, #0]
   28592:	021b      	lsls	r3, r3, #8
   28594:	001a      	movs	r2, r3
   28596:	697b      	ldr	r3, [r7, #20]
   28598:	4313      	orrs	r3, r2
   2859a:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2859c:	683b      	ldr	r3, [r7, #0]
   2859e:	785b      	ldrb	r3, [r3, #1]
   285a0:	2b00      	cmp	r3, #0
   285a2:	d004      	beq.n	285ae <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   285a4:	697b      	ldr	r3, [r7, #20]
   285a6:	2280      	movs	r2, #128	; 0x80
   285a8:	02d2      	lsls	r2, r2, #11
   285aa:	4313      	orrs	r3, r2
   285ac:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   285ae:	683b      	ldr	r3, [r7, #0]
   285b0:	7a5b      	ldrb	r3, [r3, #9]
   285b2:	2b00      	cmp	r3, #0
   285b4:	d004      	beq.n	285c0 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   285b6:	697b      	ldr	r3, [r7, #20]
   285b8:	2280      	movs	r2, #128	; 0x80
   285ba:	0312      	lsls	r2, r2, #12
   285bc:	4313      	orrs	r3, r2
   285be:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   285c0:	683b      	ldr	r3, [r7, #0]
   285c2:	685b      	ldr	r3, [r3, #4]
   285c4:	2b01      	cmp	r3, #1
   285c6:	d92c      	bls.n	28622 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   285c8:	683b      	ldr	r3, [r7, #0]
   285ca:	685a      	ldr	r2, [r3, #4]
   285cc:	683b      	ldr	r3, [r7, #0]
   285ce:	685b      	ldr	r3, [r3, #4]
   285d0:	3b01      	subs	r3, #1
   285d2:	4013      	ands	r3, r2
   285d4:	d11a      	bne.n	2860c <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   285d6:	2300      	movs	r3, #0
   285d8:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   285da:	2302      	movs	r3, #2
   285dc:	60bb      	str	r3, [r7, #8]
   285de:	e005      	b.n	285ec <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   285e0:	68fb      	ldr	r3, [r7, #12]
   285e2:	3301      	adds	r3, #1
   285e4:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   285e6:	68bb      	ldr	r3, [r7, #8]
   285e8:	005b      	lsls	r3, r3, #1
   285ea:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   285ec:	683b      	ldr	r3, [r7, #0]
   285ee:	685a      	ldr	r2, [r3, #4]
   285f0:	68bb      	ldr	r3, [r7, #8]
   285f2:	429a      	cmp	r2, r3
   285f4:	d8f4      	bhi.n	285e0 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   285f6:	68fb      	ldr	r3, [r7, #12]
   285f8:	021b      	lsls	r3, r3, #8
   285fa:	693a      	ldr	r2, [r7, #16]
   285fc:	4313      	orrs	r3, r2
   285fe:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   28600:	697b      	ldr	r3, [r7, #20]
   28602:	2280      	movs	r2, #128	; 0x80
   28604:	0352      	lsls	r2, r2, #13
   28606:	4313      	orrs	r3, r2
   28608:	617b      	str	r3, [r7, #20]
   2860a:	e00a      	b.n	28622 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2860c:	683b      	ldr	r3, [r7, #0]
   2860e:	685b      	ldr	r3, [r3, #4]
   28610:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   28612:	693a      	ldr	r2, [r7, #16]
   28614:	4313      	orrs	r3, r2
   28616:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   28618:	697b      	ldr	r3, [r7, #20]
   2861a:	2280      	movs	r2, #128	; 0x80
   2861c:	0292      	lsls	r2, r2, #10
   2861e:	4313      	orrs	r3, r2
   28620:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   28622:	683b      	ldr	r3, [r7, #0]
   28624:	7a1b      	ldrb	r3, [r3, #8]
   28626:	2b00      	cmp	r3, #0
   28628:	d004      	beq.n	28634 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2862a:	697b      	ldr	r3, [r7, #20]
   2862c:	2280      	movs	r2, #128	; 0x80
   2862e:	0392      	lsls	r2, r2, #14
   28630:	4313      	orrs	r3, r2
   28632:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   28634:	46c0      	nop			; (mov r8, r8)
   28636:	4b13      	ldr	r3, [pc, #76]	; (28684 <system_gclk_gen_set_config+0x110>)
   28638:	4798      	blx	r3
   2863a:	1e03      	subs	r3, r0, #0
   2863c:	d1fb      	bne.n	28636 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2863e:	4b12      	ldr	r3, [pc, #72]	; (28688 <system_gclk_gen_set_config+0x114>)
   28640:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   28642:	4a12      	ldr	r2, [pc, #72]	; (2868c <system_gclk_gen_set_config+0x118>)
   28644:	1dfb      	adds	r3, r7, #7
   28646:	781b      	ldrb	r3, [r3, #0]
   28648:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2864a:	46c0      	nop			; (mov r8, r8)
   2864c:	4b0d      	ldr	r3, [pc, #52]	; (28684 <system_gclk_gen_set_config+0x110>)
   2864e:	4798      	blx	r3
   28650:	1e03      	subs	r3, r0, #0
   28652:	d1fb      	bne.n	2864c <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   28654:	4b0e      	ldr	r3, [pc, #56]	; (28690 <system_gclk_gen_set_config+0x11c>)
   28656:	693a      	ldr	r2, [r7, #16]
   28658:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2865a:	46c0      	nop			; (mov r8, r8)
   2865c:	4b09      	ldr	r3, [pc, #36]	; (28684 <system_gclk_gen_set_config+0x110>)
   2865e:	4798      	blx	r3
   28660:	1e03      	subs	r3, r0, #0
   28662:	d1fb      	bne.n	2865c <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   28664:	4b0a      	ldr	r3, [pc, #40]	; (28690 <system_gclk_gen_set_config+0x11c>)
   28666:	4a0a      	ldr	r2, [pc, #40]	; (28690 <system_gclk_gen_set_config+0x11c>)
   28668:	6851      	ldr	r1, [r2, #4]
   2866a:	2280      	movs	r2, #128	; 0x80
   2866c:	0252      	lsls	r2, r2, #9
   2866e:	4011      	ands	r1, r2
   28670:	697a      	ldr	r2, [r7, #20]
   28672:	430a      	orrs	r2, r1
   28674:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   28676:	4b07      	ldr	r3, [pc, #28]	; (28694 <system_gclk_gen_set_config+0x120>)
   28678:	4798      	blx	r3
}
   2867a:	46c0      	nop			; (mov r8, r8)
   2867c:	46bd      	mov	sp, r7
   2867e:	b006      	add	sp, #24
   28680:	bd80      	pop	{r7, pc}
   28682:	46c0      	nop			; (mov r8, r8)
   28684:	00028525 	.word	0x00028525
   28688:	000284fd 	.word	0x000284fd
   2868c:	40000c08 	.word	0x40000c08
   28690:	40000c00 	.word	0x40000c00
   28694:	00028511 	.word	0x00028511

00028698 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   28698:	b580      	push	{r7, lr}
   2869a:	b082      	sub	sp, #8
   2869c:	af00      	add	r7, sp, #0
   2869e:	0002      	movs	r2, r0
   286a0:	1dfb      	adds	r3, r7, #7
   286a2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   286a4:	46c0      	nop			; (mov r8, r8)
   286a6:	4b0e      	ldr	r3, [pc, #56]	; (286e0 <system_gclk_gen_enable+0x48>)
   286a8:	4798      	blx	r3
   286aa:	1e03      	subs	r3, r0, #0
   286ac:	d1fb      	bne.n	286a6 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   286ae:	4b0d      	ldr	r3, [pc, #52]	; (286e4 <system_gclk_gen_enable+0x4c>)
   286b0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   286b2:	4a0d      	ldr	r2, [pc, #52]	; (286e8 <system_gclk_gen_enable+0x50>)
   286b4:	1dfb      	adds	r3, r7, #7
   286b6:	781b      	ldrb	r3, [r3, #0]
   286b8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   286ba:	46c0      	nop			; (mov r8, r8)
   286bc:	4b08      	ldr	r3, [pc, #32]	; (286e0 <system_gclk_gen_enable+0x48>)
   286be:	4798      	blx	r3
   286c0:	1e03      	subs	r3, r0, #0
   286c2:	d1fb      	bne.n	286bc <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   286c4:	4b09      	ldr	r3, [pc, #36]	; (286ec <system_gclk_gen_enable+0x54>)
   286c6:	4a09      	ldr	r2, [pc, #36]	; (286ec <system_gclk_gen_enable+0x54>)
   286c8:	6852      	ldr	r2, [r2, #4]
   286ca:	2180      	movs	r1, #128	; 0x80
   286cc:	0249      	lsls	r1, r1, #9
   286ce:	430a      	orrs	r2, r1
   286d0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   286d2:	4b07      	ldr	r3, [pc, #28]	; (286f0 <system_gclk_gen_enable+0x58>)
   286d4:	4798      	blx	r3
}
   286d6:	46c0      	nop			; (mov r8, r8)
   286d8:	46bd      	mov	sp, r7
   286da:	b002      	add	sp, #8
   286dc:	bd80      	pop	{r7, pc}
   286de:	46c0      	nop			; (mov r8, r8)
   286e0:	00028525 	.word	0x00028525
   286e4:	000284fd 	.word	0x000284fd
   286e8:	40000c04 	.word	0x40000c04
   286ec:	40000c00 	.word	0x40000c00
   286f0:	00028511 	.word	0x00028511

000286f4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   286f4:	b580      	push	{r7, lr}
   286f6:	b086      	sub	sp, #24
   286f8:	af00      	add	r7, sp, #0
   286fa:	0002      	movs	r2, r0
   286fc:	1dfb      	adds	r3, r7, #7
   286fe:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   28700:	46c0      	nop			; (mov r8, r8)
   28702:	4b2a      	ldr	r3, [pc, #168]	; (287ac <system_gclk_gen_get_hz+0xb8>)
   28704:	4798      	blx	r3
   28706:	1e03      	subs	r3, r0, #0
   28708:	d1fb      	bne.n	28702 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2870a:	4b29      	ldr	r3, [pc, #164]	; (287b0 <system_gclk_gen_get_hz+0xbc>)
   2870c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2870e:	4a29      	ldr	r2, [pc, #164]	; (287b4 <system_gclk_gen_get_hz+0xc0>)
   28710:	1dfb      	adds	r3, r7, #7
   28712:	781b      	ldrb	r3, [r3, #0]
   28714:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28716:	46c0      	nop			; (mov r8, r8)
   28718:	4b24      	ldr	r3, [pc, #144]	; (287ac <system_gclk_gen_get_hz+0xb8>)
   2871a:	4798      	blx	r3
   2871c:	1e03      	subs	r3, r0, #0
   2871e:	d1fb      	bne.n	28718 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   28720:	4b25      	ldr	r3, [pc, #148]	; (287b8 <system_gclk_gen_get_hz+0xc4>)
   28722:	685b      	ldr	r3, [r3, #4]
   28724:	04db      	lsls	r3, r3, #19
   28726:	0edb      	lsrs	r3, r3, #27
   28728:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2872a:	0018      	movs	r0, r3
   2872c:	4b23      	ldr	r3, [pc, #140]	; (287bc <system_gclk_gen_get_hz+0xc8>)
   2872e:	4798      	blx	r3
   28730:	0003      	movs	r3, r0
   28732:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   28734:	4a1f      	ldr	r2, [pc, #124]	; (287b4 <system_gclk_gen_get_hz+0xc0>)
   28736:	1dfb      	adds	r3, r7, #7
   28738:	781b      	ldrb	r3, [r3, #0]
   2873a:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2873c:	4b1e      	ldr	r3, [pc, #120]	; (287b8 <system_gclk_gen_get_hz+0xc4>)
   2873e:	685b      	ldr	r3, [r3, #4]
   28740:	02db      	lsls	r3, r3, #11
   28742:	0fdb      	lsrs	r3, r3, #31
   28744:	b2da      	uxtb	r2, r3
   28746:	2313      	movs	r3, #19
   28748:	18fb      	adds	r3, r7, r3
   2874a:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2874c:	4a1c      	ldr	r2, [pc, #112]	; (287c0 <system_gclk_gen_get_hz+0xcc>)
   2874e:	1dfb      	adds	r3, r7, #7
   28750:	781b      	ldrb	r3, [r3, #0]
   28752:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   28754:	46c0      	nop			; (mov r8, r8)
   28756:	4b15      	ldr	r3, [pc, #84]	; (287ac <system_gclk_gen_get_hz+0xb8>)
   28758:	4798      	blx	r3
   2875a:	1e03      	subs	r3, r0, #0
   2875c:	d1fb      	bne.n	28756 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2875e:	4b16      	ldr	r3, [pc, #88]	; (287b8 <system_gclk_gen_get_hz+0xc4>)
   28760:	689b      	ldr	r3, [r3, #8]
   28762:	021b      	lsls	r3, r3, #8
   28764:	0c1b      	lsrs	r3, r3, #16
   28766:	b29b      	uxth	r3, r3
   28768:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2876a:	4b16      	ldr	r3, [pc, #88]	; (287c4 <system_gclk_gen_get_hz+0xd0>)
   2876c:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2876e:	2313      	movs	r3, #19
   28770:	18fb      	adds	r3, r7, r3
   28772:	781b      	ldrb	r3, [r3, #0]
   28774:	2b00      	cmp	r3, #0
   28776:	d109      	bne.n	2878c <system_gclk_gen_get_hz+0x98>
   28778:	68fb      	ldr	r3, [r7, #12]
   2877a:	2b01      	cmp	r3, #1
   2877c:	d906      	bls.n	2878c <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2877e:	4b12      	ldr	r3, [pc, #72]	; (287c8 <system_gclk_gen_get_hz+0xd4>)
   28780:	68f9      	ldr	r1, [r7, #12]
   28782:	6978      	ldr	r0, [r7, #20]
   28784:	4798      	blx	r3
   28786:	0003      	movs	r3, r0
   28788:	617b      	str	r3, [r7, #20]
   2878a:	e00a      	b.n	287a2 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2878c:	2313      	movs	r3, #19
   2878e:	18fb      	adds	r3, r7, r3
   28790:	781b      	ldrb	r3, [r3, #0]
   28792:	2b00      	cmp	r3, #0
   28794:	d005      	beq.n	287a2 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   28796:	68fb      	ldr	r3, [r7, #12]
   28798:	3301      	adds	r3, #1
   2879a:	697a      	ldr	r2, [r7, #20]
   2879c:	40da      	lsrs	r2, r3
   2879e:	0013      	movs	r3, r2
   287a0:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   287a2:	697b      	ldr	r3, [r7, #20]
}
   287a4:	0018      	movs	r0, r3
   287a6:	46bd      	mov	sp, r7
   287a8:	b006      	add	sp, #24
   287aa:	bd80      	pop	{r7, pc}
   287ac:	00028525 	.word	0x00028525
   287b0:	000284fd 	.word	0x000284fd
   287b4:	40000c04 	.word	0x40000c04
   287b8:	40000c00 	.word	0x40000c00
   287bc:	00027e55 	.word	0x00027e55
   287c0:	40000c08 	.word	0x40000c08
   287c4:	00028511 	.word	0x00028511
   287c8:	0003130d 	.word	0x0003130d

000287cc <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   287cc:	b580      	push	{r7, lr}
   287ce:	b084      	sub	sp, #16
   287d0:	af00      	add	r7, sp, #0
   287d2:	0002      	movs	r2, r0
   287d4:	6039      	str	r1, [r7, #0]
   287d6:	1dfb      	adds	r3, r7, #7
   287d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   287da:	1dfb      	adds	r3, r7, #7
   287dc:	781b      	ldrb	r3, [r3, #0]
   287de:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   287e0:	683b      	ldr	r3, [r7, #0]
   287e2:	781b      	ldrb	r3, [r3, #0]
   287e4:	021b      	lsls	r3, r3, #8
   287e6:	001a      	movs	r2, r3
   287e8:	68fb      	ldr	r3, [r7, #12]
   287ea:	4313      	orrs	r3, r2
   287ec:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   287ee:	1dfb      	adds	r3, r7, #7
   287f0:	781b      	ldrb	r3, [r3, #0]
   287f2:	0018      	movs	r0, r3
   287f4:	4b04      	ldr	r3, [pc, #16]	; (28808 <system_gclk_chan_set_config+0x3c>)
   287f6:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   287f8:	4b04      	ldr	r3, [pc, #16]	; (2880c <system_gclk_chan_set_config+0x40>)
   287fa:	68fa      	ldr	r2, [r7, #12]
   287fc:	b292      	uxth	r2, r2
   287fe:	805a      	strh	r2, [r3, #2]
}
   28800:	46c0      	nop			; (mov r8, r8)
   28802:	46bd      	mov	sp, r7
   28804:	b004      	add	sp, #16
   28806:	bd80      	pop	{r7, pc}
   28808:	00028859 	.word	0x00028859
   2880c:	40000c00 	.word	0x40000c00

00028810 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   28810:	b580      	push	{r7, lr}
   28812:	b082      	sub	sp, #8
   28814:	af00      	add	r7, sp, #0
   28816:	0002      	movs	r2, r0
   28818:	1dfb      	adds	r3, r7, #7
   2881a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2881c:	4b0a      	ldr	r3, [pc, #40]	; (28848 <system_gclk_chan_enable+0x38>)
   2881e:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   28820:	4a0a      	ldr	r2, [pc, #40]	; (2884c <system_gclk_chan_enable+0x3c>)
   28822:	1dfb      	adds	r3, r7, #7
   28824:	781b      	ldrb	r3, [r3, #0]
   28826:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   28828:	4909      	ldr	r1, [pc, #36]	; (28850 <system_gclk_chan_enable+0x40>)
   2882a:	4b09      	ldr	r3, [pc, #36]	; (28850 <system_gclk_chan_enable+0x40>)
   2882c:	885b      	ldrh	r3, [r3, #2]
   2882e:	b29b      	uxth	r3, r3
   28830:	2280      	movs	r2, #128	; 0x80
   28832:	01d2      	lsls	r2, r2, #7
   28834:	4313      	orrs	r3, r2
   28836:	b29b      	uxth	r3, r3
   28838:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2883a:	4b06      	ldr	r3, [pc, #24]	; (28854 <system_gclk_chan_enable+0x44>)
   2883c:	4798      	blx	r3
}
   2883e:	46c0      	nop			; (mov r8, r8)
   28840:	46bd      	mov	sp, r7
   28842:	b002      	add	sp, #8
   28844:	bd80      	pop	{r7, pc}
   28846:	46c0      	nop			; (mov r8, r8)
   28848:	000284fd 	.word	0x000284fd
   2884c:	40000c02 	.word	0x40000c02
   28850:	40000c00 	.word	0x40000c00
   28854:	00028511 	.word	0x00028511

00028858 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   28858:	b580      	push	{r7, lr}
   2885a:	b084      	sub	sp, #16
   2885c:	af00      	add	r7, sp, #0
   2885e:	0002      	movs	r2, r0
   28860:	1dfb      	adds	r3, r7, #7
   28862:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   28864:	4b1c      	ldr	r3, [pc, #112]	; (288d8 <system_gclk_chan_disable+0x80>)
   28866:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   28868:	4a1c      	ldr	r2, [pc, #112]	; (288dc <system_gclk_chan_disable+0x84>)
   2886a:	1dfb      	adds	r3, r7, #7
   2886c:	781b      	ldrb	r3, [r3, #0]
   2886e:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   28870:	4b1b      	ldr	r3, [pc, #108]	; (288e0 <system_gclk_chan_disable+0x88>)
   28872:	885b      	ldrh	r3, [r3, #2]
   28874:	051b      	lsls	r3, r3, #20
   28876:	0f1b      	lsrs	r3, r3, #28
   28878:	b2db      	uxtb	r3, r3
   2887a:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2887c:	4a18      	ldr	r2, [pc, #96]	; (288e0 <system_gclk_chan_disable+0x88>)
   2887e:	8853      	ldrh	r3, [r2, #2]
   28880:	4918      	ldr	r1, [pc, #96]	; (288e4 <system_gclk_chan_disable+0x8c>)
   28882:	400b      	ands	r3, r1
   28884:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   28886:	4a16      	ldr	r2, [pc, #88]	; (288e0 <system_gclk_chan_disable+0x88>)
   28888:	4b15      	ldr	r3, [pc, #84]	; (288e0 <system_gclk_chan_disable+0x88>)
   2888a:	885b      	ldrh	r3, [r3, #2]
   2888c:	b29b      	uxth	r3, r3
   2888e:	4916      	ldr	r1, [pc, #88]	; (288e8 <system_gclk_chan_disable+0x90>)
   28890:	400b      	ands	r3, r1
   28892:	b29b      	uxth	r3, r3
   28894:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   28896:	46c0      	nop			; (mov r8, r8)
   28898:	4b11      	ldr	r3, [pc, #68]	; (288e0 <system_gclk_chan_disable+0x88>)
   2889a:	885b      	ldrh	r3, [r3, #2]
   2889c:	b29b      	uxth	r3, r3
   2889e:	001a      	movs	r2, r3
   288a0:	2380      	movs	r3, #128	; 0x80
   288a2:	01db      	lsls	r3, r3, #7
   288a4:	4013      	ands	r3, r2
   288a6:	d1f7      	bne.n	28898 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   288a8:	4a0d      	ldr	r2, [pc, #52]	; (288e0 <system_gclk_chan_disable+0x88>)
   288aa:	68fb      	ldr	r3, [r7, #12]
   288ac:	b2db      	uxtb	r3, r3
   288ae:	1c19      	adds	r1, r3, #0
   288b0:	230f      	movs	r3, #15
   288b2:	400b      	ands	r3, r1
   288b4:	b2d9      	uxtb	r1, r3
   288b6:	8853      	ldrh	r3, [r2, #2]
   288b8:	1c08      	adds	r0, r1, #0
   288ba:	210f      	movs	r1, #15
   288bc:	4001      	ands	r1, r0
   288be:	0208      	lsls	r0, r1, #8
   288c0:	4908      	ldr	r1, [pc, #32]	; (288e4 <system_gclk_chan_disable+0x8c>)
   288c2:	400b      	ands	r3, r1
   288c4:	1c19      	adds	r1, r3, #0
   288c6:	1c03      	adds	r3, r0, #0
   288c8:	430b      	orrs	r3, r1
   288ca:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   288cc:	4b07      	ldr	r3, [pc, #28]	; (288ec <system_gclk_chan_disable+0x94>)
   288ce:	4798      	blx	r3
}
   288d0:	46c0      	nop			; (mov r8, r8)
   288d2:	46bd      	mov	sp, r7
   288d4:	b004      	add	sp, #16
   288d6:	bd80      	pop	{r7, pc}
   288d8:	000284fd 	.word	0x000284fd
   288dc:	40000c02 	.word	0x40000c02
   288e0:	40000c00 	.word	0x40000c00
   288e4:	fffff0ff 	.word	0xfffff0ff
   288e8:	ffffbfff 	.word	0xffffbfff
   288ec:	00028511 	.word	0x00028511

000288f0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   288f0:	b580      	push	{r7, lr}
   288f2:	b084      	sub	sp, #16
   288f4:	af00      	add	r7, sp, #0
   288f6:	0002      	movs	r2, r0
   288f8:	1dfb      	adds	r3, r7, #7
   288fa:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   288fc:	4b0d      	ldr	r3, [pc, #52]	; (28934 <system_gclk_chan_get_hz+0x44>)
   288fe:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   28900:	4a0d      	ldr	r2, [pc, #52]	; (28938 <system_gclk_chan_get_hz+0x48>)
   28902:	1dfb      	adds	r3, r7, #7
   28904:	781b      	ldrb	r3, [r3, #0]
   28906:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   28908:	4b0c      	ldr	r3, [pc, #48]	; (2893c <system_gclk_chan_get_hz+0x4c>)
   2890a:	885b      	ldrh	r3, [r3, #2]
   2890c:	051b      	lsls	r3, r3, #20
   2890e:	0f1b      	lsrs	r3, r3, #28
   28910:	b2da      	uxtb	r2, r3
   28912:	230f      	movs	r3, #15
   28914:	18fb      	adds	r3, r7, r3
   28916:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   28918:	4b09      	ldr	r3, [pc, #36]	; (28940 <system_gclk_chan_get_hz+0x50>)
   2891a:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2891c:	230f      	movs	r3, #15
   2891e:	18fb      	adds	r3, r7, r3
   28920:	781b      	ldrb	r3, [r3, #0]
   28922:	0018      	movs	r0, r3
   28924:	4b07      	ldr	r3, [pc, #28]	; (28944 <system_gclk_chan_get_hz+0x54>)
   28926:	4798      	blx	r3
   28928:	0003      	movs	r3, r0
}
   2892a:	0018      	movs	r0, r3
   2892c:	46bd      	mov	sp, r7
   2892e:	b004      	add	sp, #16
   28930:	bd80      	pop	{r7, pc}
   28932:	46c0      	nop			; (mov r8, r8)
   28934:	000284fd 	.word	0x000284fd
   28938:	40000c02 	.word	0x40000c02
   2893c:	40000c00 	.word	0x40000c00
   28940:	00028511 	.word	0x00028511
   28944:	000286f5 	.word	0x000286f5

00028948 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   28948:	b580      	push	{r7, lr}
   2894a:	b084      	sub	sp, #16
   2894c:	af00      	add	r7, sp, #0
   2894e:	0002      	movs	r2, r0
   28950:	1dfb      	adds	r3, r7, #7
   28952:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   28954:	230f      	movs	r3, #15
   28956:	18fb      	adds	r3, r7, r3
   28958:	2200      	movs	r2, #0
   2895a:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2895c:	1dfb      	adds	r3, r7, #7
   2895e:	781b      	ldrb	r3, [r3, #0]
   28960:	2b7f      	cmp	r3, #127	; 0x7f
   28962:	d80b      	bhi.n	2897c <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   28964:	4a13      	ldr	r2, [pc, #76]	; (289b4 <system_interrupt_clear_pending+0x6c>)
   28966:	1dfb      	adds	r3, r7, #7
   28968:	781b      	ldrb	r3, [r3, #0]
   2896a:	b25b      	sxtb	r3, r3
   2896c:	2101      	movs	r1, #1
   2896e:	4099      	lsls	r1, r3
   28970:	000b      	movs	r3, r1
   28972:	0019      	movs	r1, r3
   28974:	23c0      	movs	r3, #192	; 0xc0
   28976:	005b      	lsls	r3, r3, #1
   28978:	50d1      	str	r1, [r2, r3]
   2897a:	e014      	b.n	289a6 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2897c:	1dfb      	adds	r3, r7, #7
   2897e:	781b      	ldrb	r3, [r3, #0]
   28980:	b25b      	sxtb	r3, r3
   28982:	330e      	adds	r3, #14
   28984:	d101      	bne.n	2898a <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   28986:	2317      	movs	r3, #23
   28988:	e010      	b.n	289ac <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2898a:	1dfb      	adds	r3, r7, #7
   2898c:	781b      	ldrb	r3, [r3, #0]
   2898e:	b25b      	sxtb	r3, r3
   28990:	3301      	adds	r3, #1
   28992:	d104      	bne.n	2899e <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   28994:	4b08      	ldr	r3, [pc, #32]	; (289b8 <system_interrupt_clear_pending+0x70>)
   28996:	2280      	movs	r2, #128	; 0x80
   28998:	0492      	lsls	r2, r2, #18
   2899a:	605a      	str	r2, [r3, #4]
   2899c:	e003      	b.n	289a6 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2899e:	230f      	movs	r3, #15
   289a0:	18fb      	adds	r3, r7, r3
   289a2:	2217      	movs	r2, #23
   289a4:	701a      	strb	r2, [r3, #0]
	}

	return status;
   289a6:	230f      	movs	r3, #15
   289a8:	18fb      	adds	r3, r7, r3
   289aa:	781b      	ldrb	r3, [r3, #0]
}
   289ac:	0018      	movs	r0, r3
   289ae:	46bd      	mov	sp, r7
   289b0:	b004      	add	sp, #16
   289b2:	bd80      	pop	{r7, pc}
   289b4:	e000e100 	.word	0xe000e100
   289b8:	e000ed00 	.word	0xe000ed00

000289bc <system_pinmux_get_group_from_gpio_pin>:
{
   289bc:	b580      	push	{r7, lr}
   289be:	b084      	sub	sp, #16
   289c0:	af00      	add	r7, sp, #0
   289c2:	0002      	movs	r2, r0
   289c4:	1dfb      	adds	r3, r7, #7
   289c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   289c8:	230f      	movs	r3, #15
   289ca:	18fb      	adds	r3, r7, r3
   289cc:	1dfa      	adds	r2, r7, #7
   289ce:	7812      	ldrb	r2, [r2, #0]
   289d0:	09d2      	lsrs	r2, r2, #7
   289d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   289d4:	230e      	movs	r3, #14
   289d6:	18fb      	adds	r3, r7, r3
   289d8:	1dfa      	adds	r2, r7, #7
   289da:	7812      	ldrb	r2, [r2, #0]
   289dc:	0952      	lsrs	r2, r2, #5
   289de:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   289e0:	4b0d      	ldr	r3, [pc, #52]	; (28a18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   289e2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   289e4:	230f      	movs	r3, #15
   289e6:	18fb      	adds	r3, r7, r3
   289e8:	781b      	ldrb	r3, [r3, #0]
   289ea:	2b00      	cmp	r3, #0
   289ec:	d10f      	bne.n	28a0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   289ee:	230f      	movs	r3, #15
   289f0:	18fb      	adds	r3, r7, r3
   289f2:	781b      	ldrb	r3, [r3, #0]
   289f4:	009b      	lsls	r3, r3, #2
   289f6:	2210      	movs	r2, #16
   289f8:	4694      	mov	ip, r2
   289fa:	44bc      	add	ip, r7
   289fc:	4463      	add	r3, ip
   289fe:	3b08      	subs	r3, #8
   28a00:	681a      	ldr	r2, [r3, #0]
   28a02:	230e      	movs	r3, #14
   28a04:	18fb      	adds	r3, r7, r3
   28a06:	781b      	ldrb	r3, [r3, #0]
   28a08:	01db      	lsls	r3, r3, #7
   28a0a:	18d3      	adds	r3, r2, r3
   28a0c:	e000      	b.n	28a10 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   28a0e:	2300      	movs	r3, #0
}
   28a10:	0018      	movs	r0, r3
   28a12:	46bd      	mov	sp, r7
   28a14:	b004      	add	sp, #16
   28a16:	bd80      	pop	{r7, pc}
   28a18:	41004400 	.word	0x41004400

00028a1c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   28a1c:	b580      	push	{r7, lr}
   28a1e:	b088      	sub	sp, #32
   28a20:	af00      	add	r7, sp, #0
   28a22:	60f8      	str	r0, [r7, #12]
   28a24:	60b9      	str	r1, [r7, #8]
   28a26:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   28a28:	2300      	movs	r3, #0
   28a2a:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   28a2c:	687b      	ldr	r3, [r7, #4]
   28a2e:	78db      	ldrb	r3, [r3, #3]
   28a30:	2201      	movs	r2, #1
   28a32:	4053      	eors	r3, r2
   28a34:	b2db      	uxtb	r3, r3
   28a36:	2b00      	cmp	r3, #0
   28a38:	d035      	beq.n	28aa6 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   28a3a:	687b      	ldr	r3, [r7, #4]
   28a3c:	781b      	ldrb	r3, [r3, #0]
   28a3e:	2b80      	cmp	r3, #128	; 0x80
   28a40:	d00b      	beq.n	28a5a <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   28a42:	69fb      	ldr	r3, [r7, #28]
   28a44:	2280      	movs	r2, #128	; 0x80
   28a46:	0252      	lsls	r2, r2, #9
   28a48:	4313      	orrs	r3, r2
   28a4a:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   28a4c:	687b      	ldr	r3, [r7, #4]
   28a4e:	781b      	ldrb	r3, [r3, #0]
   28a50:	061b      	lsls	r3, r3, #24
   28a52:	001a      	movs	r2, r3
   28a54:	69fb      	ldr	r3, [r7, #28]
   28a56:	4313      	orrs	r3, r2
   28a58:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   28a5a:	687b      	ldr	r3, [r7, #4]
   28a5c:	785b      	ldrb	r3, [r3, #1]
   28a5e:	2b00      	cmp	r3, #0
   28a60:	d003      	beq.n	28a6a <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   28a62:	687b      	ldr	r3, [r7, #4]
   28a64:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   28a66:	2b02      	cmp	r3, #2
   28a68:	d110      	bne.n	28a8c <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   28a6a:	69fb      	ldr	r3, [r7, #28]
   28a6c:	2280      	movs	r2, #128	; 0x80
   28a6e:	0292      	lsls	r2, r2, #10
   28a70:	4313      	orrs	r3, r2
   28a72:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   28a74:	687b      	ldr	r3, [r7, #4]
   28a76:	789b      	ldrb	r3, [r3, #2]
   28a78:	2b00      	cmp	r3, #0
   28a7a:	d004      	beq.n	28a86 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   28a7c:	69fb      	ldr	r3, [r7, #28]
   28a7e:	2280      	movs	r2, #128	; 0x80
   28a80:	02d2      	lsls	r2, r2, #11
   28a82:	4313      	orrs	r3, r2
   28a84:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   28a86:	68fb      	ldr	r3, [r7, #12]
   28a88:	68ba      	ldr	r2, [r7, #8]
   28a8a:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   28a8c:	687b      	ldr	r3, [r7, #4]
   28a8e:	785b      	ldrb	r3, [r3, #1]
   28a90:	2b01      	cmp	r3, #1
   28a92:	d003      	beq.n	28a9c <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   28a94:	687b      	ldr	r3, [r7, #4]
   28a96:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   28a98:	2b02      	cmp	r3, #2
   28a9a:	d107      	bne.n	28aac <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   28a9c:	69fb      	ldr	r3, [r7, #28]
   28a9e:	4a22      	ldr	r2, [pc, #136]	; (28b28 <_system_pinmux_config+0x10c>)
   28aa0:	4013      	ands	r3, r2
   28aa2:	61fb      	str	r3, [r7, #28]
   28aa4:	e002      	b.n	28aac <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   28aa6:	68fb      	ldr	r3, [r7, #12]
   28aa8:	68ba      	ldr	r2, [r7, #8]
   28aaa:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   28aac:	68bb      	ldr	r3, [r7, #8]
   28aae:	041b      	lsls	r3, r3, #16
   28ab0:	0c1b      	lsrs	r3, r3, #16
   28ab2:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   28ab4:	68bb      	ldr	r3, [r7, #8]
   28ab6:	0c1b      	lsrs	r3, r3, #16
   28ab8:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   28aba:	69ba      	ldr	r2, [r7, #24]
   28abc:	69fb      	ldr	r3, [r7, #28]
   28abe:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   28ac0:	22a0      	movs	r2, #160	; 0xa0
   28ac2:	05d2      	lsls	r2, r2, #23
   28ac4:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   28ac6:	68fb      	ldr	r3, [r7, #12]
   28ac8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   28aca:	697a      	ldr	r2, [r7, #20]
   28acc:	69fb      	ldr	r3, [r7, #28]
   28ace:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   28ad0:	22d0      	movs	r2, #208	; 0xd0
   28ad2:	0612      	lsls	r2, r2, #24
   28ad4:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   28ad6:	68fb      	ldr	r3, [r7, #12]
   28ad8:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   28ada:	687b      	ldr	r3, [r7, #4]
   28adc:	78db      	ldrb	r3, [r3, #3]
   28ade:	2201      	movs	r2, #1
   28ae0:	4053      	eors	r3, r2
   28ae2:	b2db      	uxtb	r3, r3
   28ae4:	2b00      	cmp	r3, #0
   28ae6:	d01a      	beq.n	28b1e <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   28ae8:	69fa      	ldr	r2, [r7, #28]
   28aea:	2380      	movs	r3, #128	; 0x80
   28aec:	02db      	lsls	r3, r3, #11
   28aee:	4013      	ands	r3, r2
   28af0:	d00a      	beq.n	28b08 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   28af2:	687b      	ldr	r3, [r7, #4]
   28af4:	789b      	ldrb	r3, [r3, #2]
   28af6:	2b01      	cmp	r3, #1
   28af8:	d103      	bne.n	28b02 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   28afa:	68fb      	ldr	r3, [r7, #12]
   28afc:	68ba      	ldr	r2, [r7, #8]
   28afe:	619a      	str	r2, [r3, #24]
   28b00:	e002      	b.n	28b08 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   28b02:	68fb      	ldr	r3, [r7, #12]
   28b04:	68ba      	ldr	r2, [r7, #8]
   28b06:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   28b08:	687b      	ldr	r3, [r7, #4]
   28b0a:	785b      	ldrb	r3, [r3, #1]
   28b0c:	2b01      	cmp	r3, #1
   28b0e:	d003      	beq.n	28b18 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   28b10:	687b      	ldr	r3, [r7, #4]
   28b12:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   28b14:	2b02      	cmp	r3, #2
   28b16:	d102      	bne.n	28b1e <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   28b18:	68fb      	ldr	r3, [r7, #12]
   28b1a:	68ba      	ldr	r2, [r7, #8]
   28b1c:	609a      	str	r2, [r3, #8]
		}
	}
}
   28b1e:	46c0      	nop			; (mov r8, r8)
   28b20:	46bd      	mov	sp, r7
   28b22:	b008      	add	sp, #32
   28b24:	bd80      	pop	{r7, pc}
   28b26:	46c0      	nop			; (mov r8, r8)
   28b28:	fffbffff 	.word	0xfffbffff

00028b2c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   28b2c:	b580      	push	{r7, lr}
   28b2e:	b084      	sub	sp, #16
   28b30:	af00      	add	r7, sp, #0
   28b32:	0002      	movs	r2, r0
   28b34:	6039      	str	r1, [r7, #0]
   28b36:	1dfb      	adds	r3, r7, #7
   28b38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   28b3a:	1dfb      	adds	r3, r7, #7
   28b3c:	781b      	ldrb	r3, [r3, #0]
   28b3e:	0018      	movs	r0, r3
   28b40:	4b0a      	ldr	r3, [pc, #40]	; (28b6c <system_pinmux_pin_set_config+0x40>)
   28b42:	4798      	blx	r3
   28b44:	0003      	movs	r3, r0
   28b46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   28b48:	1dfb      	adds	r3, r7, #7
   28b4a:	781b      	ldrb	r3, [r3, #0]
   28b4c:	221f      	movs	r2, #31
   28b4e:	4013      	ands	r3, r2
   28b50:	2201      	movs	r2, #1
   28b52:	409a      	lsls	r2, r3
   28b54:	0013      	movs	r3, r2
   28b56:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   28b58:	683a      	ldr	r2, [r7, #0]
   28b5a:	68b9      	ldr	r1, [r7, #8]
   28b5c:	68fb      	ldr	r3, [r7, #12]
   28b5e:	0018      	movs	r0, r3
   28b60:	4b03      	ldr	r3, [pc, #12]	; (28b70 <system_pinmux_pin_set_config+0x44>)
   28b62:	4798      	blx	r3
}
   28b64:	46c0      	nop			; (mov r8, r8)
   28b66:	46bd      	mov	sp, r7
   28b68:	b004      	add	sp, #16
   28b6a:	bd80      	pop	{r7, pc}
   28b6c:	000289bd 	.word	0x000289bd
   28b70:	00028a1d 	.word	0x00028a1d

00028b74 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   28b74:	b580      	push	{r7, lr}
   28b76:	af00      	add	r7, sp, #0
	return;
   28b78:	46c0      	nop			; (mov r8, r8)
}
   28b7a:	46bd      	mov	sp, r7
   28b7c:	bd80      	pop	{r7, pc}
	...

00028b80 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   28b80:	b580      	push	{r7, lr}
   28b82:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   28b84:	4b06      	ldr	r3, [pc, #24]	; (28ba0 <system_init+0x20>)
   28b86:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   28b88:	4b06      	ldr	r3, [pc, #24]	; (28ba4 <system_init+0x24>)
   28b8a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   28b8c:	4b06      	ldr	r3, [pc, #24]	; (28ba8 <system_init+0x28>)
   28b8e:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   28b90:	4b06      	ldr	r3, [pc, #24]	; (28bac <system_init+0x2c>)
   28b92:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   28b94:	4b06      	ldr	r3, [pc, #24]	; (28bb0 <system_init+0x30>)
   28b96:	4798      	blx	r3
}
   28b98:	46c0      	nop			; (mov r8, r8)
   28b9a:	46bd      	mov	sp, r7
   28b9c:	bd80      	pop	{r7, pc}
   28b9e:	46c0      	nop			; (mov r8, r8)
   28ba0:	00028201 	.word	0x00028201
   28ba4:	00024cc9 	.word	0x00024cc9
   28ba8:	00012879 	.word	0x00012879
   28bac:	000250a1 	.word	0x000250a1
   28bb0:	00028b75 	.word	0x00028b75

00028bb4 <system_gclk_chan_get_config_defaults>:
{
   28bb4:	b580      	push	{r7, lr}
   28bb6:	b082      	sub	sp, #8
   28bb8:	af00      	add	r7, sp, #0
   28bba:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   28bbc:	687b      	ldr	r3, [r7, #4]
   28bbe:	2200      	movs	r2, #0
   28bc0:	701a      	strb	r2, [r3, #0]
}
   28bc2:	46c0      	nop			; (mov r8, r8)
   28bc4:	46bd      	mov	sp, r7
   28bc6:	b002      	add	sp, #8
   28bc8:	bd80      	pop	{r7, pc}
	...

00028bcc <system_apb_clock_set_mask>:
{
   28bcc:	b580      	push	{r7, lr}
   28bce:	b082      	sub	sp, #8
   28bd0:	af00      	add	r7, sp, #0
   28bd2:	0002      	movs	r2, r0
   28bd4:	6039      	str	r1, [r7, #0]
   28bd6:	1dfb      	adds	r3, r7, #7
   28bd8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   28bda:	1dfb      	adds	r3, r7, #7
   28bdc:	781b      	ldrb	r3, [r3, #0]
   28bde:	2b01      	cmp	r3, #1
   28be0:	d00a      	beq.n	28bf8 <system_apb_clock_set_mask+0x2c>
   28be2:	2b02      	cmp	r3, #2
   28be4:	d00f      	beq.n	28c06 <system_apb_clock_set_mask+0x3a>
   28be6:	2b00      	cmp	r3, #0
   28be8:	d114      	bne.n	28c14 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28bea:	4b0e      	ldr	r3, [pc, #56]	; (28c24 <system_apb_clock_set_mask+0x58>)
   28bec:	4a0d      	ldr	r2, [pc, #52]	; (28c24 <system_apb_clock_set_mask+0x58>)
   28bee:	6991      	ldr	r1, [r2, #24]
   28bf0:	683a      	ldr	r2, [r7, #0]
   28bf2:	430a      	orrs	r2, r1
   28bf4:	619a      	str	r2, [r3, #24]
			break;
   28bf6:	e00f      	b.n	28c18 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28bf8:	4b0a      	ldr	r3, [pc, #40]	; (28c24 <system_apb_clock_set_mask+0x58>)
   28bfa:	4a0a      	ldr	r2, [pc, #40]	; (28c24 <system_apb_clock_set_mask+0x58>)
   28bfc:	69d1      	ldr	r1, [r2, #28]
   28bfe:	683a      	ldr	r2, [r7, #0]
   28c00:	430a      	orrs	r2, r1
   28c02:	61da      	str	r2, [r3, #28]
			break;
   28c04:	e008      	b.n	28c18 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   28c06:	4b07      	ldr	r3, [pc, #28]	; (28c24 <system_apb_clock_set_mask+0x58>)
   28c08:	4a06      	ldr	r2, [pc, #24]	; (28c24 <system_apb_clock_set_mask+0x58>)
   28c0a:	6a11      	ldr	r1, [r2, #32]
   28c0c:	683a      	ldr	r2, [r7, #0]
   28c0e:	430a      	orrs	r2, r1
   28c10:	621a      	str	r2, [r3, #32]
			break;
   28c12:	e001      	b.n	28c18 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   28c14:	2317      	movs	r3, #23
   28c16:	e000      	b.n	28c1a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28c18:	2300      	movs	r3, #0
}
   28c1a:	0018      	movs	r0, r3
   28c1c:	46bd      	mov	sp, r7
   28c1e:	b002      	add	sp, #8
   28c20:	bd80      	pop	{r7, pc}
   28c22:	46c0      	nop			; (mov r8, r8)
   28c24:	40000400 	.word	0x40000400

00028c28 <system_pinmux_get_config_defaults>:
{
   28c28:	b580      	push	{r7, lr}
   28c2a:	b082      	sub	sp, #8
   28c2c:	af00      	add	r7, sp, #0
   28c2e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   28c30:	687b      	ldr	r3, [r7, #4]
   28c32:	2280      	movs	r2, #128	; 0x80
   28c34:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28c36:	687b      	ldr	r3, [r7, #4]
   28c38:	2200      	movs	r2, #0
   28c3a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   28c3c:	687b      	ldr	r3, [r7, #4]
   28c3e:	2201      	movs	r2, #1
   28c40:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   28c42:	687b      	ldr	r3, [r7, #4]
   28c44:	2200      	movs	r2, #0
   28c46:	70da      	strb	r2, [r3, #3]
}
   28c48:	46c0      	nop			; (mov r8, r8)
   28c4a:	46bd      	mov	sp, r7
   28c4c:	b002      	add	sp, #8
   28c4e:	bd80      	pop	{r7, pc}

00028c50 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   28c50:	b580      	push	{r7, lr}
   28c52:	b084      	sub	sp, #16
   28c54:	af00      	add	r7, sp, #0
   28c56:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   28c58:	2300      	movs	r3, #0
   28c5a:	60fb      	str	r3, [r7, #12]
   28c5c:	e00c      	b.n	28c78 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   28c5e:	4b0a      	ldr	r3, [pc, #40]	; (28c88 <_tcc_get_inst_index+0x38>)
   28c60:	68fa      	ldr	r2, [r7, #12]
   28c62:	0092      	lsls	r2, r2, #2
   28c64:	58d2      	ldr	r2, [r2, r3]
   28c66:	687b      	ldr	r3, [r7, #4]
   28c68:	429a      	cmp	r2, r3
   28c6a:	d102      	bne.n	28c72 <_tcc_get_inst_index+0x22>
			return i;
   28c6c:	68fb      	ldr	r3, [r7, #12]
   28c6e:	b2db      	uxtb	r3, r3
   28c70:	e006      	b.n	28c80 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   28c72:	68fb      	ldr	r3, [r7, #12]
   28c74:	3301      	adds	r3, #1
   28c76:	60fb      	str	r3, [r7, #12]
   28c78:	68fb      	ldr	r3, [r7, #12]
   28c7a:	2b02      	cmp	r3, #2
   28c7c:	d9ef      	bls.n	28c5e <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   28c7e:	2300      	movs	r3, #0
}
   28c80:	0018      	movs	r0, r3
   28c82:	46bd      	mov	sp, r7
   28c84:	b004      	add	sp, #16
   28c86:	bd80      	pop	{r7, pc}
   28c88:	00037a34 	.word	0x00037a34

00028c8c <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   28c8c:	b590      	push	{r4, r7, lr}
   28c8e:	b085      	sub	sp, #20
   28c90:	af00      	add	r7, sp, #0
   28c92:	6078      	str	r0, [r7, #4]
   28c94:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   28c96:	230f      	movs	r3, #15
   28c98:	18fc      	adds	r4, r7, r3
   28c9a:	683b      	ldr	r3, [r7, #0]
   28c9c:	0018      	movs	r0, r3
   28c9e:	4bad      	ldr	r3, [pc, #692]	; (28f54 <tcc_get_config_defaults+0x2c8>)
   28ca0:	4798      	blx	r3
   28ca2:	0003      	movs	r3, r0
   28ca4:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   28ca6:	687b      	ldr	r3, [r7, #4]
   28ca8:	2200      	movs	r2, #0
   28caa:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   28cac:	230f      	movs	r3, #15
   28cae:	18fb      	adds	r3, r7, r3
   28cb0:	781a      	ldrb	r2, [r3, #0]
   28cb2:	4ba9      	ldr	r3, [pc, #676]	; (28f58 <tcc_get_config_defaults+0x2cc>)
   28cb4:	0092      	lsls	r2, r2, #2
   28cb6:	58d2      	ldr	r2, [r2, r3]
   28cb8:	687b      	ldr	r3, [r7, #4]
   28cba:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   28cbc:	687b      	ldr	r3, [r7, #4]
   28cbe:	2200      	movs	r2, #0
   28cc0:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   28cc2:	687b      	ldr	r3, [r7, #4]
   28cc4:	2200      	movs	r2, #0
   28cc6:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   28cc8:	687b      	ldr	r3, [r7, #4]
   28cca:	2200      	movs	r2, #0
   28ccc:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   28cce:	687b      	ldr	r3, [r7, #4]
   28cd0:	2200      	movs	r2, #0
   28cd2:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   28cd4:	687b      	ldr	r3, [r7, #4]
   28cd6:	2200      	movs	r2, #0
   28cd8:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   28cda:	687b      	ldr	r3, [r7, #4]
   28cdc:	2200      	movs	r2, #0
   28cde:	61da      	str	r2, [r3, #28]
   28ce0:	687b      	ldr	r3, [r7, #4]
   28ce2:	2200      	movs	r2, #0
   28ce4:	621a      	str	r2, [r3, #32]
   28ce6:	687b      	ldr	r3, [r7, #4]
   28ce8:	2200      	movs	r2, #0
   28cea:	625a      	str	r2, [r3, #36]	; 0x24
   28cec:	687b      	ldr	r3, [r7, #4]
   28cee:	2200      	movs	r2, #0
   28cf0:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   28cf2:	687b      	ldr	r3, [r7, #4]
   28cf4:	2200      	movs	r2, #0
   28cf6:	751a      	strb	r2, [r3, #20]
   28cf8:	687b      	ldr	r3, [r7, #4]
   28cfa:	2200      	movs	r2, #0
   28cfc:	755a      	strb	r2, [r3, #21]
   28cfe:	687b      	ldr	r3, [r7, #4]
   28d00:	2200      	movs	r2, #0
   28d02:	759a      	strb	r2, [r3, #22]
   28d04:	687b      	ldr	r3, [r7, #4]
   28d06:	2200      	movs	r2, #0
   28d08:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   28d0a:	687b      	ldr	r3, [r7, #4]
   28d0c:	2200      	movs	r2, #0
   28d0e:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   28d10:	687b      	ldr	r3, [r7, #4]
   28d12:	2200      	movs	r2, #0
   28d14:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   28d16:	687b      	ldr	r3, [r7, #4]
   28d18:	2200      	movs	r2, #0
   28d1a:	741a      	strb	r2, [r3, #16]
   28d1c:	687b      	ldr	r3, [r7, #4]
   28d1e:	2200      	movs	r2, #0
   28d20:	745a      	strb	r2, [r3, #17]
   28d22:	687b      	ldr	r3, [r7, #4]
   28d24:	2200      	movs	r2, #0
   28d26:	749a      	strb	r2, [r3, #18]
   28d28:	687b      	ldr	r3, [r7, #4]
   28d2a:	2200      	movs	r2, #0
   28d2c:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   28d2e:	687b      	ldr	r3, [r7, #4]
   28d30:	222c      	movs	r2, #44	; 0x2c
   28d32:	2100      	movs	r1, #0
   28d34:	5499      	strb	r1, [r3, r2]
   28d36:	687b      	ldr	r3, [r7, #4]
   28d38:	222d      	movs	r2, #45	; 0x2d
   28d3a:	2100      	movs	r1, #0
   28d3c:	5499      	strb	r1, [r3, r2]
   28d3e:	687b      	ldr	r3, [r7, #4]
   28d40:	222e      	movs	r2, #46	; 0x2e
   28d42:	2100      	movs	r1, #0
   28d44:	5499      	strb	r1, [r3, r2]
   28d46:	687b      	ldr	r3, [r7, #4]
   28d48:	222f      	movs	r2, #47	; 0x2f
   28d4a:	2100      	movs	r1, #0
   28d4c:	5499      	strb	r1, [r3, r2]
   28d4e:	687b      	ldr	r3, [r7, #4]
   28d50:	2230      	movs	r2, #48	; 0x30
   28d52:	2100      	movs	r1, #0
   28d54:	5499      	strb	r1, [r3, r2]
   28d56:	687b      	ldr	r3, [r7, #4]
   28d58:	2231      	movs	r2, #49	; 0x31
   28d5a:	2100      	movs	r1, #0
   28d5c:	5499      	strb	r1, [r3, r2]
   28d5e:	687b      	ldr	r3, [r7, #4]
   28d60:	2232      	movs	r2, #50	; 0x32
   28d62:	2100      	movs	r1, #0
   28d64:	5499      	strb	r1, [r3, r2]
   28d66:	687b      	ldr	r3, [r7, #4]
   28d68:	2233      	movs	r2, #51	; 0x33
   28d6a:	2100      	movs	r1, #0
   28d6c:	5499      	strb	r1, [r3, r2]
   28d6e:	687b      	ldr	r3, [r7, #4]
   28d70:	2234      	movs	r2, #52	; 0x34
   28d72:	2100      	movs	r1, #0
   28d74:	5499      	strb	r1, [r3, r2]
   28d76:	687b      	ldr	r3, [r7, #4]
   28d78:	2235      	movs	r2, #53	; 0x35
   28d7a:	2100      	movs	r1, #0
   28d7c:	5499      	strb	r1, [r3, r2]
   28d7e:	687b      	ldr	r3, [r7, #4]
   28d80:	2236      	movs	r2, #54	; 0x36
   28d82:	2100      	movs	r1, #0
   28d84:	5499      	strb	r1, [r3, r2]
   28d86:	687b      	ldr	r3, [r7, #4]
   28d88:	2237      	movs	r2, #55	; 0x37
   28d8a:	2100      	movs	r1, #0
   28d8c:	5499      	strb	r1, [r3, r2]
   28d8e:	687b      	ldr	r3, [r7, #4]
   28d90:	2238      	movs	r2, #56	; 0x38
   28d92:	2100      	movs	r1, #0
   28d94:	5499      	strb	r1, [r3, r2]
   28d96:	687b      	ldr	r3, [r7, #4]
   28d98:	2239      	movs	r2, #57	; 0x39
   28d9a:	2100      	movs	r1, #0
   28d9c:	5499      	strb	r1, [r3, r2]
   28d9e:	687b      	ldr	r3, [r7, #4]
   28da0:	223a      	movs	r2, #58	; 0x3a
   28da2:	2100      	movs	r1, #0
   28da4:	5499      	strb	r1, [r3, r2]
   28da6:	687b      	ldr	r3, [r7, #4]
   28da8:	223b      	movs	r2, #59	; 0x3b
   28daa:	2100      	movs	r1, #0
   28dac:	5499      	strb	r1, [r3, r2]
   28dae:	687b      	ldr	r3, [r7, #4]
   28db0:	223c      	movs	r2, #60	; 0x3c
   28db2:	2100      	movs	r1, #0
   28db4:	5499      	strb	r1, [r3, r2]
   28db6:	687b      	ldr	r3, [r7, #4]
   28db8:	223d      	movs	r2, #61	; 0x3d
   28dba:	2100      	movs	r1, #0
   28dbc:	5499      	strb	r1, [r3, r2]
   28dbe:	687b      	ldr	r3, [r7, #4]
   28dc0:	223e      	movs	r2, #62	; 0x3e
   28dc2:	2100      	movs	r1, #0
   28dc4:	5499      	strb	r1, [r3, r2]
   28dc6:	687b      	ldr	r3, [r7, #4]
   28dc8:	223f      	movs	r2, #63	; 0x3f
   28dca:	2100      	movs	r1, #0
   28dcc:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   28dce:	687b      	ldr	r3, [r7, #4]
   28dd0:	2240      	movs	r2, #64	; 0x40
   28dd2:	2100      	movs	r1, #0
   28dd4:	5499      	strb	r1, [r3, r2]
   28dd6:	687b      	ldr	r3, [r7, #4]
   28dd8:	2241      	movs	r2, #65	; 0x41
   28dda:	2100      	movs	r1, #0
   28ddc:	5499      	strb	r1, [r3, r2]
   28dde:	687b      	ldr	r3, [r7, #4]
   28de0:	2242      	movs	r2, #66	; 0x42
   28de2:	2100      	movs	r1, #0
   28de4:	5499      	strb	r1, [r3, r2]
   28de6:	687b      	ldr	r3, [r7, #4]
   28de8:	2243      	movs	r2, #67	; 0x43
   28dea:	2100      	movs	r1, #0
   28dec:	5499      	strb	r1, [r3, r2]
   28dee:	687b      	ldr	r3, [r7, #4]
   28df0:	2244      	movs	r2, #68	; 0x44
   28df2:	2100      	movs	r1, #0
   28df4:	5499      	strb	r1, [r3, r2]
   28df6:	687b      	ldr	r3, [r7, #4]
   28df8:	2245      	movs	r2, #69	; 0x45
   28dfa:	2100      	movs	r1, #0
   28dfc:	5499      	strb	r1, [r3, r2]
   28dfe:	687b      	ldr	r3, [r7, #4]
   28e00:	2246      	movs	r2, #70	; 0x46
   28e02:	2100      	movs	r1, #0
   28e04:	5499      	strb	r1, [r3, r2]
   28e06:	687b      	ldr	r3, [r7, #4]
   28e08:	2247      	movs	r2, #71	; 0x47
   28e0a:	2100      	movs	r1, #0
   28e0c:	5499      	strb	r1, [r3, r2]
   28e0e:	687b      	ldr	r3, [r7, #4]
   28e10:	2248      	movs	r2, #72	; 0x48
   28e12:	2100      	movs	r1, #0
   28e14:	5499      	strb	r1, [r3, r2]
   28e16:	687b      	ldr	r3, [r7, #4]
   28e18:	2249      	movs	r2, #73	; 0x49
   28e1a:	2100      	movs	r1, #0
   28e1c:	5499      	strb	r1, [r3, r2]
   28e1e:	687b      	ldr	r3, [r7, #4]
   28e20:	224a      	movs	r2, #74	; 0x4a
   28e22:	2100      	movs	r1, #0
   28e24:	5499      	strb	r1, [r3, r2]
   28e26:	687b      	ldr	r3, [r7, #4]
   28e28:	224b      	movs	r2, #75	; 0x4b
   28e2a:	2100      	movs	r1, #0
   28e2c:	5499      	strb	r1, [r3, r2]
   28e2e:	687b      	ldr	r3, [r7, #4]
   28e30:	224c      	movs	r2, #76	; 0x4c
   28e32:	2100      	movs	r1, #0
   28e34:	5499      	strb	r1, [r3, r2]
   28e36:	687b      	ldr	r3, [r7, #4]
   28e38:	224d      	movs	r2, #77	; 0x4d
   28e3a:	2100      	movs	r1, #0
   28e3c:	5499      	strb	r1, [r3, r2]
   28e3e:	687b      	ldr	r3, [r7, #4]
   28e40:	224e      	movs	r2, #78	; 0x4e
   28e42:	2100      	movs	r1, #0
   28e44:	5499      	strb	r1, [r3, r2]
   28e46:	687b      	ldr	r3, [r7, #4]
   28e48:	224f      	movs	r2, #79	; 0x4f
   28e4a:	2100      	movs	r1, #0
   28e4c:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   28e4e:	687b      	ldr	r3, [r7, #4]
   28e50:	2250      	movs	r2, #80	; 0x50
   28e52:	2100      	movs	r1, #0
   28e54:	5499      	strb	r1, [r3, r2]
   28e56:	687b      	ldr	r3, [r7, #4]
   28e58:	2251      	movs	r2, #81	; 0x51
   28e5a:	2100      	movs	r1, #0
   28e5c:	5499      	strb	r1, [r3, r2]
   28e5e:	687b      	ldr	r3, [r7, #4]
   28e60:	2252      	movs	r2, #82	; 0x52
   28e62:	2100      	movs	r1, #0
   28e64:	5499      	strb	r1, [r3, r2]
   28e66:	687b      	ldr	r3, [r7, #4]
   28e68:	2253      	movs	r2, #83	; 0x53
   28e6a:	2100      	movs	r1, #0
   28e6c:	5499      	strb	r1, [r3, r2]
   28e6e:	687b      	ldr	r3, [r7, #4]
   28e70:	2254      	movs	r2, #84	; 0x54
   28e72:	2100      	movs	r1, #0
   28e74:	5499      	strb	r1, [r3, r2]
   28e76:	687b      	ldr	r3, [r7, #4]
   28e78:	2255      	movs	r2, #85	; 0x55
   28e7a:	2100      	movs	r1, #0
   28e7c:	5499      	strb	r1, [r3, r2]
   28e7e:	687b      	ldr	r3, [r7, #4]
   28e80:	2256      	movs	r2, #86	; 0x56
   28e82:	2100      	movs	r1, #0
   28e84:	5499      	strb	r1, [r3, r2]
   28e86:	687b      	ldr	r3, [r7, #4]
   28e88:	2257      	movs	r2, #87	; 0x57
   28e8a:	2100      	movs	r1, #0
   28e8c:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   28e8e:	687b      	ldr	r3, [r7, #4]
   28e90:	2298      	movs	r2, #152	; 0x98
   28e92:	2100      	movs	r1, #0
   28e94:	5499      	strb	r1, [r3, r2]
   28e96:	687b      	ldr	r3, [r7, #4]
   28e98:	2200      	movs	r2, #0
   28e9a:	659a      	str	r2, [r3, #88]	; 0x58
   28e9c:	687b      	ldr	r3, [r7, #4]
   28e9e:	2200      	movs	r2, #0
   28ea0:	679a      	str	r2, [r3, #120]	; 0x78
   28ea2:	687b      	ldr	r3, [r7, #4]
   28ea4:	2299      	movs	r2, #153	; 0x99
   28ea6:	2100      	movs	r1, #0
   28ea8:	5499      	strb	r1, [r3, r2]
   28eaa:	687b      	ldr	r3, [r7, #4]
   28eac:	2200      	movs	r2, #0
   28eae:	65da      	str	r2, [r3, #92]	; 0x5c
   28eb0:	687b      	ldr	r3, [r7, #4]
   28eb2:	2200      	movs	r2, #0
   28eb4:	67da      	str	r2, [r3, #124]	; 0x7c
   28eb6:	687b      	ldr	r3, [r7, #4]
   28eb8:	229a      	movs	r2, #154	; 0x9a
   28eba:	2100      	movs	r1, #0
   28ebc:	5499      	strb	r1, [r3, r2]
   28ebe:	687b      	ldr	r3, [r7, #4]
   28ec0:	2200      	movs	r2, #0
   28ec2:	661a      	str	r2, [r3, #96]	; 0x60
   28ec4:	687b      	ldr	r3, [r7, #4]
   28ec6:	2280      	movs	r2, #128	; 0x80
   28ec8:	2100      	movs	r1, #0
   28eca:	5099      	str	r1, [r3, r2]
   28ecc:	687b      	ldr	r3, [r7, #4]
   28ece:	229b      	movs	r2, #155	; 0x9b
   28ed0:	2100      	movs	r1, #0
   28ed2:	5499      	strb	r1, [r3, r2]
   28ed4:	687b      	ldr	r3, [r7, #4]
   28ed6:	2200      	movs	r2, #0
   28ed8:	665a      	str	r2, [r3, #100]	; 0x64
   28eda:	687b      	ldr	r3, [r7, #4]
   28edc:	2284      	movs	r2, #132	; 0x84
   28ede:	2100      	movs	r1, #0
   28ee0:	5099      	str	r1, [r3, r2]
   28ee2:	687b      	ldr	r3, [r7, #4]
   28ee4:	229c      	movs	r2, #156	; 0x9c
   28ee6:	2100      	movs	r1, #0
   28ee8:	5499      	strb	r1, [r3, r2]
   28eea:	687b      	ldr	r3, [r7, #4]
   28eec:	2200      	movs	r2, #0
   28eee:	669a      	str	r2, [r3, #104]	; 0x68
   28ef0:	687b      	ldr	r3, [r7, #4]
   28ef2:	2288      	movs	r2, #136	; 0x88
   28ef4:	2100      	movs	r1, #0
   28ef6:	5099      	str	r1, [r3, r2]
   28ef8:	687b      	ldr	r3, [r7, #4]
   28efa:	229d      	movs	r2, #157	; 0x9d
   28efc:	2100      	movs	r1, #0
   28efe:	5499      	strb	r1, [r3, r2]
   28f00:	687b      	ldr	r3, [r7, #4]
   28f02:	2200      	movs	r2, #0
   28f04:	66da      	str	r2, [r3, #108]	; 0x6c
   28f06:	687b      	ldr	r3, [r7, #4]
   28f08:	228c      	movs	r2, #140	; 0x8c
   28f0a:	2100      	movs	r1, #0
   28f0c:	5099      	str	r1, [r3, r2]
   28f0e:	687b      	ldr	r3, [r7, #4]
   28f10:	229e      	movs	r2, #158	; 0x9e
   28f12:	2100      	movs	r1, #0
   28f14:	5499      	strb	r1, [r3, r2]
   28f16:	687b      	ldr	r3, [r7, #4]
   28f18:	2200      	movs	r2, #0
   28f1a:	671a      	str	r2, [r3, #112]	; 0x70
   28f1c:	687b      	ldr	r3, [r7, #4]
   28f1e:	2290      	movs	r2, #144	; 0x90
   28f20:	2100      	movs	r1, #0
   28f22:	5099      	str	r1, [r3, r2]
   28f24:	687b      	ldr	r3, [r7, #4]
   28f26:	229f      	movs	r2, #159	; 0x9f
   28f28:	2100      	movs	r1, #0
   28f2a:	5499      	strb	r1, [r3, r2]
   28f2c:	687b      	ldr	r3, [r7, #4]
   28f2e:	2200      	movs	r2, #0
   28f30:	675a      	str	r2, [r3, #116]	; 0x74
   28f32:	687b      	ldr	r3, [r7, #4]
   28f34:	2294      	movs	r2, #148	; 0x94
   28f36:	2100      	movs	r1, #0
   28f38:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   28f3a:	687b      	ldr	r3, [r7, #4]
   28f3c:	22a0      	movs	r2, #160	; 0xa0
   28f3e:	2101      	movs	r1, #1
   28f40:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   28f42:	687b      	ldr	r3, [r7, #4]
   28f44:	22a1      	movs	r2, #161	; 0xa1
   28f46:	2100      	movs	r1, #0
   28f48:	5499      	strb	r1, [r3, r2]
}
   28f4a:	46c0      	nop			; (mov r8, r8)
   28f4c:	46bd      	mov	sp, r7
   28f4e:	b005      	add	sp, #20
   28f50:	bd90      	pop	{r4, r7, pc}
   28f52:	46c0      	nop			; (mov r8, r8)
   28f54:	00028c51 	.word	0x00028c51
   28f58:	00037a50 	.word	0x00037a50

00028f5c <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   28f5c:	b580      	push	{r7, lr}
   28f5e:	b086      	sub	sp, #24
   28f60:	af00      	add	r7, sp, #0
   28f62:	60b9      	str	r1, [r7, #8]
   28f64:	607a      	str	r2, [r7, #4]
   28f66:	230f      	movs	r3, #15
   28f68:	18fb      	adds	r3, r7, r3
   28f6a:	1c02      	adds	r2, r0, #0
   28f6c:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   28f6e:	2300      	movs	r3, #0
   28f70:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   28f72:	2300      	movs	r3, #0
   28f74:	613b      	str	r3, [r7, #16]
   28f76:	e01d      	b.n	28fb4 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   28f78:	68ba      	ldr	r2, [r7, #8]
   28f7a:	693b      	ldr	r3, [r7, #16]
   28f7c:	18d3      	adds	r3, r2, r3
   28f7e:	3310      	adds	r3, #16
   28f80:	781b      	ldrb	r3, [r3, #0]
   28f82:	2b01      	cmp	r3, #1
   28f84:	d113      	bne.n	28fae <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   28f86:	230f      	movs	r3, #15
   28f88:	18fb      	adds	r3, r7, r3
   28f8a:	781b      	ldrb	r3, [r3, #0]
   28f8c:	4a1b      	ldr	r2, [pc, #108]	; (28ffc <_tcc_build_ctrla+0xa0>)
   28f8e:	5cd3      	ldrb	r3, [r2, r3]
   28f90:	001a      	movs	r2, r3
   28f92:	693b      	ldr	r3, [r7, #16]
   28f94:	429a      	cmp	r2, r3
   28f96:	da01      	bge.n	28f9c <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   28f98:	2317      	movs	r3, #23
   28f9a:	e02a      	b.n	28ff2 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   28f9c:	2380      	movs	r3, #128	; 0x80
   28f9e:	045a      	lsls	r2, r3, #17
   28fa0:	693b      	ldr	r3, [r7, #16]
   28fa2:	409a      	lsls	r2, r3
   28fa4:	0013      	movs	r3, r2
   28fa6:	001a      	movs	r2, r3
   28fa8:	697b      	ldr	r3, [r7, #20]
   28faa:	4313      	orrs	r3, r2
   28fac:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   28fae:	693b      	ldr	r3, [r7, #16]
   28fb0:	3301      	adds	r3, #1
   28fb2:	613b      	str	r3, [r7, #16]
   28fb4:	693b      	ldr	r3, [r7, #16]
   28fb6:	2b03      	cmp	r3, #3
   28fb8:	ddde      	ble.n	28f78 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   28fba:	68bb      	ldr	r3, [r7, #8]
   28fbc:	22a1      	movs	r2, #161	; 0xa1
   28fbe:	5c9b      	ldrb	r3, [r3, r2]
   28fc0:	2b00      	cmp	r3, #0
   28fc2:	d004      	beq.n	28fce <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   28fc4:	697b      	ldr	r3, [r7, #20]
   28fc6:	2280      	movs	r2, #128	; 0x80
   28fc8:	0112      	lsls	r2, r2, #4
   28fca:	4313      	orrs	r3, r2
   28fcc:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   28fce:	68bb      	ldr	r3, [r7, #8]
   28fd0:	7b1b      	ldrb	r3, [r3, #12]
   28fd2:	031b      	lsls	r3, r3, #12
   28fd4:	001a      	movs	r2, r3
   28fd6:	697b      	ldr	r3, [r7, #20]
   28fd8:	4313      	orrs	r3, r2
   28fda:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   28fdc:	68bb      	ldr	r3, [r7, #8]
   28fde:	7adb      	ldrb	r3, [r3, #11]
   28fe0:	021b      	lsls	r3, r3, #8
   28fe2:	001a      	movs	r2, r3
   28fe4:	697b      	ldr	r3, [r7, #20]
   28fe6:	4313      	orrs	r3, r2
   28fe8:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   28fea:	687b      	ldr	r3, [r7, #4]
   28fec:	697a      	ldr	r2, [r7, #20]
   28fee:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   28ff0:	2300      	movs	r3, #0
}
   28ff2:	0018      	movs	r0, r3
   28ff4:	46bd      	mov	sp, r7
   28ff6:	b006      	add	sp, #24
   28ff8:	bd80      	pop	{r7, pc}
   28ffa:	46c0      	nop			; (mov r8, r8)
   28ffc:	00037a5c 	.word	0x00037a5c

00029000 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   29000:	b580      	push	{r7, lr}
   29002:	b086      	sub	sp, #24
   29004:	af00      	add	r7, sp, #0
   29006:	60b9      	str	r1, [r7, #8]
   29008:	607a      	str	r2, [r7, #4]
   2900a:	230f      	movs	r3, #15
   2900c:	18fb      	adds	r3, r7, r3
   2900e:	1c02      	adds	r2, r0, #0
   29010:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   29012:	2317      	movs	r3, #23
   29014:	18fb      	adds	r3, r7, r3
   29016:	2200      	movs	r2, #0
   29018:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2901a:	68bb      	ldr	r3, [r7, #8]
   2901c:	7a1b      	ldrb	r3, [r3, #8]
   2901e:	2b00      	cmp	r3, #0
   29020:	d007      	beq.n	29032 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   29022:	2317      	movs	r3, #23
   29024:	18fb      	adds	r3, r7, r3
   29026:	2217      	movs	r2, #23
   29028:	18ba      	adds	r2, r7, r2
   2902a:	7812      	ldrb	r2, [r2, #0]
   2902c:	2104      	movs	r1, #4
   2902e:	430a      	orrs	r2, r1
   29030:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   29032:	68bb      	ldr	r3, [r7, #8]
   29034:	7a5b      	ldrb	r3, [r3, #9]
   29036:	2b01      	cmp	r3, #1
   29038:	d107      	bne.n	2904a <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2903a:	2317      	movs	r3, #23
   2903c:	18fb      	adds	r3, r7, r3
   2903e:	2217      	movs	r2, #23
   29040:	18ba      	adds	r2, r7, r2
   29042:	7812      	ldrb	r2, [r2, #0]
   29044:	2101      	movs	r1, #1
   29046:	430a      	orrs	r2, r1
   29048:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2904a:	687b      	ldr	r3, [r7, #4]
   2904c:	2217      	movs	r2, #23
   2904e:	18ba      	adds	r2, r7, r2
   29050:	7812      	ldrb	r2, [r2, #0]
   29052:	701a      	strb	r2, [r3, #0]
}
   29054:	46c0      	nop			; (mov r8, r8)
   29056:	46bd      	mov	sp, r7
   29058:	b006      	add	sp, #24
   2905a:	bd80      	pop	{r7, pc}

0002905c <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2905c:	b580      	push	{r7, lr}
   2905e:	b088      	sub	sp, #32
   29060:	af00      	add	r7, sp, #0
   29062:	60b9      	str	r1, [r7, #8]
   29064:	607a      	str	r2, [r7, #4]
   29066:	230f      	movs	r3, #15
   29068:	18fb      	adds	r3, r7, r3
   2906a:	1c02      	adds	r2, r0, #0
   2906c:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2906e:	230f      	movs	r3, #15
   29070:	18fb      	adds	r3, r7, r3
   29072:	781a      	ldrb	r2, [r3, #0]
   29074:	231b      	movs	r3, #27
   29076:	18fb      	adds	r3, r7, r3
   29078:	493e      	ldr	r1, [pc, #248]	; (29174 <_tcc_build_faults+0x118>)
   2907a:	5c8a      	ldrb	r2, [r1, r2]
   2907c:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2907e:	2300      	movs	r3, #0
   29080:	61fb      	str	r3, [r7, #28]
   29082:	e06e      	b.n	29162 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   29084:	69fa      	ldr	r2, [r7, #28]
   29086:	0013      	movs	r3, r2
   29088:	009b      	lsls	r3, r3, #2
   2908a:	189b      	adds	r3, r3, r2
   2908c:	005b      	lsls	r3, r3, #1
   2908e:	3328      	adds	r3, #40	; 0x28
   29090:	68ba      	ldr	r2, [r7, #8]
   29092:	18d3      	adds	r3, r2, r3
   29094:	3304      	adds	r3, #4
   29096:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   29098:	697b      	ldr	r3, [r7, #20]
   2909a:	7a5b      	ldrb	r3, [r3, #9]
   2909c:	221b      	movs	r2, #27
   2909e:	18ba      	adds	r2, r7, r2
   290a0:	7812      	ldrb	r2, [r2, #0]
   290a2:	429a      	cmp	r2, r3
   290a4:	d801      	bhi.n	290aa <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   290a6:	2317      	movs	r3, #23
   290a8:	e05f      	b.n	2916a <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   290aa:	697b      	ldr	r3, [r7, #20]
   290ac:	781b      	ldrb	r3, [r3, #0]
   290ae:	2b0f      	cmp	r3, #15
   290b0:	d901      	bls.n	290b6 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   290b2:	2317      	movs	r3, #23
   290b4:	e059      	b.n	2916a <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   290b6:	697b      	ldr	r3, [r7, #20]
   290b8:	781b      	ldrb	r3, [r3, #0]
   290ba:	061b      	lsls	r3, r3, #24
   290bc:	001a      	movs	r2, r3
   290be:	23f0      	movs	r3, #240	; 0xf0
   290c0:	051b      	lsls	r3, r3, #20
   290c2:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   290c4:	697b      	ldr	r3, [r7, #20]
   290c6:	785b      	ldrb	r3, [r3, #1]
   290c8:	041b      	lsls	r3, r3, #16
   290ca:	0019      	movs	r1, r3
   290cc:	23ff      	movs	r3, #255	; 0xff
   290ce:	041b      	lsls	r3, r3, #16
   290d0:	400b      	ands	r3, r1
   290d2:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   290d4:	697b      	ldr	r3, [r7, #20]
   290d6:	789b      	ldrb	r3, [r3, #2]
   290d8:	2b00      	cmp	r3, #0
   290da:	d001      	beq.n	290e0 <_tcc_build_faults+0x84>
   290dc:	2380      	movs	r3, #128	; 0x80
   290de:	e000      	b.n	290e2 <_tcc_build_faults+0x86>
   290e0:	2300      	movs	r3, #0
   290e2:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   290e4:	697b      	ldr	r3, [r7, #20]
   290e6:	78db      	ldrb	r3, [r3, #3]
   290e8:	2b00      	cmp	r3, #0
   290ea:	d001      	beq.n	290f0 <_tcc_build_faults+0x94>
   290ec:	2308      	movs	r3, #8
   290ee:	e000      	b.n	290f2 <_tcc_build_faults+0x96>
   290f0:	2300      	movs	r3, #0
   290f2:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   290f4:	697b      	ldr	r3, [r7, #20]
   290f6:	791b      	ldrb	r3, [r3, #4]
   290f8:	2b00      	cmp	r3, #0
   290fa:	d001      	beq.n	29100 <_tcc_build_faults+0xa4>
   290fc:	2310      	movs	r3, #16
   290fe:	e000      	b.n	29102 <_tcc_build_faults+0xa6>
   29100:	2300      	movs	r3, #0
   29102:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   29104:	697b      	ldr	r3, [r7, #20]
   29106:	795b      	ldrb	r3, [r3, #5]
   29108:	0019      	movs	r1, r3
   2910a:	2303      	movs	r3, #3
   2910c:	400b      	ands	r3, r1
   2910e:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   29110:	697b      	ldr	r3, [r7, #20]
   29112:	799b      	ldrb	r3, [r3, #6]
   29114:	015b      	lsls	r3, r3, #5
   29116:	0019      	movs	r1, r3
   29118:	2360      	movs	r3, #96	; 0x60
   2911a:	400b      	ands	r3, r1
   2911c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2911e:	697b      	ldr	r3, [r7, #20]
   29120:	79db      	ldrb	r3, [r3, #7]
   29122:	021b      	lsls	r3, r3, #8
   29124:	0019      	movs	r1, r3
   29126:	23c0      	movs	r3, #192	; 0xc0
   29128:	009b      	lsls	r3, r3, #2
   2912a:	400b      	ands	r3, r1
   2912c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2912e:	697b      	ldr	r3, [r7, #20]
   29130:	7a1b      	ldrb	r3, [r3, #8]
   29132:	031b      	lsls	r3, r3, #12
   29134:	0019      	movs	r1, r3
   29136:	23e0      	movs	r3, #224	; 0xe0
   29138:	01db      	lsls	r3, r3, #7
   2913a:	400b      	ands	r3, r1
   2913c:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2913e:	697b      	ldr	r3, [r7, #20]
   29140:	7a5b      	ldrb	r3, [r3, #9]
   29142:	029b      	lsls	r3, r3, #10
   29144:	0019      	movs	r1, r3
   29146:	23c0      	movs	r3, #192	; 0xc0
   29148:	011b      	lsls	r3, r3, #4
   2914a:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2914c:	4313      	orrs	r3, r2
   2914e:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   29150:	69fb      	ldr	r3, [r7, #28]
   29152:	009b      	lsls	r3, r3, #2
   29154:	687a      	ldr	r2, [r7, #4]
   29156:	18d3      	adds	r3, r2, r3
   29158:	693a      	ldr	r2, [r7, #16]
   2915a:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2915c:	69fb      	ldr	r3, [r7, #28]
   2915e:	3301      	adds	r3, #1
   29160:	61fb      	str	r3, [r7, #28]
   29162:	69fb      	ldr	r3, [r7, #28]
   29164:	2b01      	cmp	r3, #1
   29166:	dd8d      	ble.n	29084 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   29168:	2300      	movs	r3, #0
}
   2916a:	0018      	movs	r0, r3
   2916c:	46bd      	mov	sp, r7
   2916e:	b008      	add	sp, #32
   29170:	bd80      	pop	{r7, pc}
   29172:	46c0      	nop			; (mov r8, r8)
   29174:	00037a5c 	.word	0x00037a5c

00029178 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29178:	b580      	push	{r7, lr}
   2917a:	b088      	sub	sp, #32
   2917c:	af00      	add	r7, sp, #0
   2917e:	60b9      	str	r1, [r7, #8]
   29180:	607a      	str	r2, [r7, #4]
   29182:	230f      	movs	r3, #15
   29184:	18fb      	adds	r3, r7, r3
   29186:	1c02      	adds	r2, r0, #0
   29188:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2918a:	230f      	movs	r3, #15
   2918c:	18fb      	adds	r3, r7, r3
   2918e:	781a      	ldrb	r2, [r3, #0]
   29190:	2317      	movs	r3, #23
   29192:	18fb      	adds	r3, r7, r3
   29194:	492d      	ldr	r1, [pc, #180]	; (2924c <_tcc_build_drvctrl+0xd4>)
   29196:	5c8a      	ldrb	r2, [r1, r2]
   29198:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2919a:	2300      	movs	r3, #0
   2919c:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2919e:	2300      	movs	r3, #0
   291a0:	61fb      	str	r3, [r7, #28]
   291a2:	e048      	b.n	29236 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   291a4:	68ba      	ldr	r2, [r7, #8]
   291a6:	2150      	movs	r1, #80	; 0x50
   291a8:	69fb      	ldr	r3, [r7, #28]
   291aa:	18d3      	adds	r3, r2, r3
   291ac:	185b      	adds	r3, r3, r1
   291ae:	781b      	ldrb	r3, [r3, #0]
   291b0:	2b00      	cmp	r3, #0
   291b2:	d010      	beq.n	291d6 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   291b4:	2317      	movs	r3, #23
   291b6:	18fb      	adds	r3, r7, r3
   291b8:	781a      	ldrb	r2, [r3, #0]
   291ba:	69fb      	ldr	r3, [r7, #28]
   291bc:	429a      	cmp	r2, r3
   291be:	d801      	bhi.n	291c4 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   291c0:	2317      	movs	r3, #23
   291c2:	e03f      	b.n	29244 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   291c4:	2380      	movs	r3, #128	; 0x80
   291c6:	025a      	lsls	r2, r3, #9
   291c8:	69fb      	ldr	r3, [r7, #28]
   291ca:	409a      	lsls	r2, r3
   291cc:	0013      	movs	r3, r2
   291ce:	001a      	movs	r2, r3
   291d0:	69bb      	ldr	r3, [r7, #24]
   291d2:	4313      	orrs	r3, r2
   291d4:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   291d6:	68ba      	ldr	r2, [r7, #8]
   291d8:	69fb      	ldr	r3, [r7, #28]
   291da:	331c      	adds	r3, #28
   291dc:	005b      	lsls	r3, r3, #1
   291de:	18d3      	adds	r3, r2, r3
   291e0:	3309      	adds	r3, #9
   291e2:	781b      	ldrb	r3, [r3, #0]
   291e4:	2b00      	cmp	r3, #0
   291e6:	d023      	beq.n	29230 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   291e8:	2317      	movs	r3, #23
   291ea:	18fb      	adds	r3, r7, r3
   291ec:	781a      	ldrb	r2, [r3, #0]
   291ee:	69fb      	ldr	r3, [r7, #28]
   291f0:	429a      	cmp	r2, r3
   291f2:	d801      	bhi.n	291f8 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   291f4:	2317      	movs	r3, #23
   291f6:	e025      	b.n	29244 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   291f8:	68ba      	ldr	r2, [r7, #8]
   291fa:	69fb      	ldr	r3, [r7, #28]
   291fc:	331c      	adds	r3, #28
   291fe:	005b      	lsls	r3, r3, #1
   29200:	18d3      	adds	r3, r2, r3
   29202:	3309      	adds	r3, #9
   29204:	781b      	ldrb	r3, [r3, #0]
   29206:	2b02      	cmp	r3, #2
   29208:	d10a      	bne.n	29220 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2920a:	2302      	movs	r3, #2
   2920c:	33ff      	adds	r3, #255	; 0xff
   2920e:	001a      	movs	r2, r3
   29210:	69fb      	ldr	r3, [r7, #28]
   29212:	409a      	lsls	r2, r3
   29214:	0013      	movs	r3, r2
   29216:	001a      	movs	r2, r3
   29218:	69bb      	ldr	r3, [r7, #24]
   2921a:	4313      	orrs	r3, r2
   2921c:	61bb      	str	r3, [r7, #24]
   2921e:	e007      	b.n	29230 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   29220:	2201      	movs	r2, #1
   29222:	69fb      	ldr	r3, [r7, #28]
   29224:	409a      	lsls	r2, r3
   29226:	0013      	movs	r3, r2
   29228:	001a      	movs	r2, r3
   2922a:	69bb      	ldr	r3, [r7, #24]
   2922c:	4313      	orrs	r3, r2
   2922e:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29230:	69fb      	ldr	r3, [r7, #28]
   29232:	3301      	adds	r3, #1
   29234:	61fb      	str	r3, [r7, #28]
   29236:	69fb      	ldr	r3, [r7, #28]
   29238:	2b07      	cmp	r3, #7
   2923a:	d9b3      	bls.n	291a4 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2923c:	687b      	ldr	r3, [r7, #4]
   2923e:	69ba      	ldr	r2, [r7, #24]
   29240:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   29242:	2300      	movs	r3, #0
}
   29244:	0018      	movs	r0, r3
   29246:	46bd      	mov	sp, r7
   29248:	b008      	add	sp, #32
   2924a:	bd80      	pop	{r7, pc}
   2924c:	00037a60 	.word	0x00037a60

00029250 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   29250:	b580      	push	{r7, lr}
   29252:	b088      	sub	sp, #32
   29254:	af00      	add	r7, sp, #0
   29256:	60b9      	str	r1, [r7, #8]
   29258:	607a      	str	r2, [r7, #4]
   2925a:	230f      	movs	r3, #15
   2925c:	18fb      	adds	r3, r7, r3
   2925e:	1c02      	adds	r2, r0, #0
   29260:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   29262:	230f      	movs	r3, #15
   29264:	18fb      	adds	r3, r7, r3
   29266:	781a      	ldrb	r2, [r3, #0]
   29268:	2317      	movs	r3, #23
   2926a:	18fb      	adds	r3, r7, r3
   2926c:	491d      	ldr	r1, [pc, #116]	; (292e4 <_tcc_build_waves+0x94>)
   2926e:	5c8a      	ldrb	r2, [r1, r2]
   29270:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   29272:	68bb      	ldr	r3, [r7, #8]
   29274:	3310      	adds	r3, #16
   29276:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   29278:	693b      	ldr	r3, [r7, #16]
   2927a:	7a5b      	ldrb	r3, [r3, #9]
   2927c:	011b      	lsls	r3, r3, #4
   2927e:	001a      	movs	r2, r3
   29280:	2330      	movs	r3, #48	; 0x30
   29282:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   29284:	693b      	ldr	r3, [r7, #16]
   29286:	7a1b      	ldrb	r3, [r3, #8]
   29288:	0019      	movs	r1, r3
   2928a:	2307      	movs	r3, #7
   2928c:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2928e:	4313      	orrs	r3, r2
   29290:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   29292:	2300      	movs	r3, #0
   29294:	61fb      	str	r3, [r7, #28]
   29296:	e01a      	b.n	292ce <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   29298:	693a      	ldr	r2, [r7, #16]
   2929a:	69fb      	ldr	r3, [r7, #28]
   2929c:	18d3      	adds	r3, r2, r3
   2929e:	3304      	adds	r3, #4
   292a0:	781b      	ldrb	r3, [r3, #0]
   292a2:	2b00      	cmp	r3, #0
   292a4:	d010      	beq.n	292c8 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   292a6:	2317      	movs	r3, #23
   292a8:	18fb      	adds	r3, r7, r3
   292aa:	781a      	ldrb	r2, [r3, #0]
   292ac:	69fb      	ldr	r3, [r7, #28]
   292ae:	429a      	cmp	r2, r3
   292b0:	dc01      	bgt.n	292b6 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   292b2:	2317      	movs	r3, #23
   292b4:	e012      	b.n	292dc <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   292b6:	2380      	movs	r3, #128	; 0x80
   292b8:	025a      	lsls	r2, r3, #9
   292ba:	69fb      	ldr	r3, [r7, #28]
   292bc:	409a      	lsls	r2, r3
   292be:	0013      	movs	r3, r2
   292c0:	001a      	movs	r2, r3
   292c2:	69bb      	ldr	r3, [r7, #24]
   292c4:	4313      	orrs	r3, r2
   292c6:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   292c8:	69fb      	ldr	r3, [r7, #28]
   292ca:	3301      	adds	r3, #1
   292cc:	61fb      	str	r3, [r7, #28]
   292ce:	69fb      	ldr	r3, [r7, #28]
   292d0:	2b03      	cmp	r3, #3
   292d2:	dde1      	ble.n	29298 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   292d4:	687b      	ldr	r3, [r7, #4]
   292d6:	69ba      	ldr	r2, [r7, #24]
   292d8:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   292da:	2300      	movs	r3, #0
}
   292dc:	0018      	movs	r0, r3
   292de:	46bd      	mov	sp, r7
   292e0:	b008      	add	sp, #32
   292e2:	bd80      	pop	{r7, pc}
   292e4:	00037a5c 	.word	0x00037a5c

000292e8 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   292e8:	b590      	push	{r4, r7, lr}
   292ea:	b091      	sub	sp, #68	; 0x44
   292ec:	af00      	add	r7, sp, #0
   292ee:	60f8      	str	r0, [r7, #12]
   292f0:	60b9      	str	r1, [r7, #8]
   292f2:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   292f4:	233b      	movs	r3, #59	; 0x3b
   292f6:	18fc      	adds	r4, r7, r3
   292f8:	68bb      	ldr	r3, [r7, #8]
   292fa:	0018      	movs	r0, r3
   292fc:	4bc4      	ldr	r3, [pc, #784]	; (29610 <tcc_init+0x328>)
   292fe:	4798      	blx	r3
   29300:	0003      	movs	r3, r0
   29302:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   29304:	233b      	movs	r3, #59	; 0x3b
   29306:	18fb      	adds	r3, r7, r3
   29308:	781a      	ldrb	r2, [r3, #0]
   2930a:	4bc2      	ldr	r3, [pc, #776]	; (29614 <tcc_init+0x32c>)
   2930c:	0092      	lsls	r2, r2, #2
   2930e:	58d3      	ldr	r3, [r2, r3]
   29310:	0019      	movs	r1, r3
   29312:	2002      	movs	r0, #2
   29314:	4bc0      	ldr	r3, [pc, #768]	; (29618 <tcc_init+0x330>)
   29316:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   29318:	68bb      	ldr	r3, [r7, #8]
   2931a:	681b      	ldr	r3, [r3, #0]
   2931c:	2202      	movs	r2, #2
   2931e:	4013      	ands	r3, r2
   29320:	d001      	beq.n	29326 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   29322:	231c      	movs	r3, #28
   29324:	e1be      	b.n	296a4 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   29326:	68bb      	ldr	r3, [r7, #8]
   29328:	681b      	ldr	r3, [r3, #0]
   2932a:	2201      	movs	r2, #1
   2932c:	4013      	ands	r3, r2
   2932e:	d001      	beq.n	29334 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   29330:	231c      	movs	r3, #28
   29332:	e1b7      	b.n	296a4 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   29334:	233b      	movs	r3, #59	; 0x3b
   29336:	18fb      	adds	r3, r7, r3
   29338:	781a      	ldrb	r2, [r3, #0]
   2933a:	4bb8      	ldr	r3, [pc, #736]	; (2961c <tcc_init+0x334>)
   2933c:	0092      	lsls	r2, r2, #2
   2933e:	58d3      	ldr	r3, [r2, r3]
   29340:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   29342:	687b      	ldr	r3, [r7, #4]
   29344:	681a      	ldr	r2, [r3, #0]
   29346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29348:	429a      	cmp	r2, r3
   2934a:	d804      	bhi.n	29356 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2934c:	687b      	ldr	r3, [r7, #4]
   2934e:	685a      	ldr	r2, [r3, #4]
   29350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29352:	429a      	cmp	r2, r3
   29354:	d901      	bls.n	2935a <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   29356:	2317      	movs	r3, #23
   29358:	e1a4      	b.n	296a4 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2935a:	2300      	movs	r3, #0
   2935c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2935e:	e00e      	b.n	2937e <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   29360:	687a      	ldr	r2, [r7, #4]
   29362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29364:	3306      	adds	r3, #6
   29366:	009b      	lsls	r3, r3, #2
   29368:	18d3      	adds	r3, r2, r3
   2936a:	3304      	adds	r3, #4
   2936c:	681a      	ldr	r2, [r3, #0]
   2936e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29370:	429a      	cmp	r2, r3
   29372:	d901      	bls.n	29378 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   29374:	2317      	movs	r3, #23
   29376:	e195      	b.n	296a4 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   29378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2937a:	3301      	adds	r3, #1
   2937c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2937e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29380:	2b03      	cmp	r3, #3
   29382:	dded      	ble.n	29360 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   29384:	2300      	movs	r3, #0
   29386:	63fb      	str	r3, [r7, #60]	; 0x3c
   29388:	e019      	b.n	293be <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2938a:	687a      	ldr	r2, [r7, #4]
   2938c:	2198      	movs	r1, #152	; 0x98
   2938e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29390:	18d3      	adds	r3, r2, r3
   29392:	185b      	adds	r3, r3, r1
   29394:	781b      	ldrb	r3, [r3, #0]
   29396:	2201      	movs	r2, #1
   29398:	4053      	eors	r3, r2
   2939a:	b2db      	uxtb	r3, r3
   2939c:	2b00      	cmp	r3, #0
   2939e:	d10a      	bne.n	293b6 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   293a0:	233b      	movs	r3, #59	; 0x3b
   293a2:	18fb      	adds	r3, r7, r3
   293a4:	781b      	ldrb	r3, [r3, #0]
   293a6:	4a9e      	ldr	r2, [pc, #632]	; (29620 <tcc_init+0x338>)
   293a8:	5cd3      	ldrb	r3, [r2, r3]
   293aa:	001a      	movs	r2, r3
   293ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   293ae:	429a      	cmp	r2, r3
   293b0:	dc02      	bgt.n	293b8 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   293b2:	2317      	movs	r3, #23
   293b4:	e176      	b.n	296a4 <tcc_init+0x3bc>
			continue;
   293b6:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   293b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   293ba:	3301      	adds	r3, #1
   293bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   293be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   293c0:	2b07      	cmp	r3, #7
   293c2:	dde2      	ble.n	2938a <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   293c4:	2300      	movs	r3, #0
   293c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   293c8:	2333      	movs	r3, #51	; 0x33
   293ca:	18fc      	adds	r4, r7, r3
   293cc:	232c      	movs	r3, #44	; 0x2c
   293ce:	18fa      	adds	r2, r7, r3
   293d0:	6879      	ldr	r1, [r7, #4]
   293d2:	233b      	movs	r3, #59	; 0x3b
   293d4:	18fb      	adds	r3, r7, r3
   293d6:	781b      	ldrb	r3, [r3, #0]
   293d8:	0018      	movs	r0, r3
   293da:	4b92      	ldr	r3, [pc, #584]	; (29624 <tcc_init+0x33c>)
   293dc:	4798      	blx	r3
   293de:	0003      	movs	r3, r0
   293e0:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   293e2:	2333      	movs	r3, #51	; 0x33
   293e4:	18fb      	adds	r3, r7, r3
   293e6:	781b      	ldrb	r3, [r3, #0]
   293e8:	2b00      	cmp	r3, #0
   293ea:	d003      	beq.n	293f4 <tcc_init+0x10c>
		return status;
   293ec:	2333      	movs	r3, #51	; 0x33
   293ee:	18fb      	adds	r3, r7, r3
   293f0:	781b      	ldrb	r3, [r3, #0]
   293f2:	e157      	b.n	296a4 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   293f4:	232b      	movs	r3, #43	; 0x2b
   293f6:	18fa      	adds	r2, r7, r3
   293f8:	6879      	ldr	r1, [r7, #4]
   293fa:	233b      	movs	r3, #59	; 0x3b
   293fc:	18fb      	adds	r3, r7, r3
   293fe:	781b      	ldrb	r3, [r3, #0]
   29400:	0018      	movs	r0, r3
   29402:	4b89      	ldr	r3, [pc, #548]	; (29628 <tcc_init+0x340>)
   29404:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   29406:	2333      	movs	r3, #51	; 0x33
   29408:	18fc      	adds	r4, r7, r3
   2940a:	2320      	movs	r3, #32
   2940c:	18fa      	adds	r2, r7, r3
   2940e:	6879      	ldr	r1, [r7, #4]
   29410:	233b      	movs	r3, #59	; 0x3b
   29412:	18fb      	adds	r3, r7, r3
   29414:	781b      	ldrb	r3, [r3, #0]
   29416:	0018      	movs	r0, r3
   29418:	4b84      	ldr	r3, [pc, #528]	; (2962c <tcc_init+0x344>)
   2941a:	4798      	blx	r3
   2941c:	0003      	movs	r3, r0
   2941e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29420:	2333      	movs	r3, #51	; 0x33
   29422:	18fb      	adds	r3, r7, r3
   29424:	781b      	ldrb	r3, [r3, #0]
   29426:	2b00      	cmp	r3, #0
   29428:	d003      	beq.n	29432 <tcc_init+0x14a>
		return status;
   2942a:	2333      	movs	r3, #51	; 0x33
   2942c:	18fb      	adds	r3, r7, r3
   2942e:	781b      	ldrb	r3, [r3, #0]
   29430:	e138      	b.n	296a4 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   29432:	2300      	movs	r3, #0
   29434:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   29436:	2333      	movs	r3, #51	; 0x33
   29438:	18fc      	adds	r4, r7, r3
   2943a:	231c      	movs	r3, #28
   2943c:	18fa      	adds	r2, r7, r3
   2943e:	6879      	ldr	r1, [r7, #4]
   29440:	233b      	movs	r3, #59	; 0x3b
   29442:	18fb      	adds	r3, r7, r3
   29444:	781b      	ldrb	r3, [r3, #0]
   29446:	0018      	movs	r0, r3
   29448:	4b79      	ldr	r3, [pc, #484]	; (29630 <tcc_init+0x348>)
   2944a:	4798      	blx	r3
   2944c:	0003      	movs	r3, r0
   2944e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   29450:	2333      	movs	r3, #51	; 0x33
   29452:	18fb      	adds	r3, r7, r3
   29454:	781b      	ldrb	r3, [r3, #0]
   29456:	2b00      	cmp	r3, #0
   29458:	d003      	beq.n	29462 <tcc_init+0x17a>
		return status;
   2945a:	2333      	movs	r3, #51	; 0x33
   2945c:	18fb      	adds	r3, r7, r3
   2945e:	781b      	ldrb	r3, [r3, #0]
   29460:	e120      	b.n	296a4 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   29462:	2333      	movs	r3, #51	; 0x33
   29464:	18fc      	adds	r4, r7, r3
   29466:	2318      	movs	r3, #24
   29468:	18fa      	adds	r2, r7, r3
   2946a:	6879      	ldr	r1, [r7, #4]
   2946c:	233b      	movs	r3, #59	; 0x3b
   2946e:	18fb      	adds	r3, r7, r3
   29470:	781b      	ldrb	r3, [r3, #0]
   29472:	0018      	movs	r0, r3
   29474:	4b6f      	ldr	r3, [pc, #444]	; (29634 <tcc_init+0x34c>)
   29476:	4798      	blx	r3
   29478:	0003      	movs	r3, r0
   2947a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2947c:	2333      	movs	r3, #51	; 0x33
   2947e:	18fb      	adds	r3, r7, r3
   29480:	781b      	ldrb	r3, [r3, #0]
   29482:	2b00      	cmp	r3, #0
   29484:	d003      	beq.n	2948e <tcc_init+0x1a6>
		return status;
   29486:	2333      	movs	r3, #51	; 0x33
   29488:	18fb      	adds	r3, r7, r3
   2948a:	781b      	ldrb	r3, [r3, #0]
   2948c:	e10a      	b.n	296a4 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2948e:	2300      	movs	r3, #0
   29490:	63fb      	str	r3, [r7, #60]	; 0x3c
   29492:	e009      	b.n	294a8 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   29494:	68fa      	ldr	r2, [r7, #12]
   29496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29498:	009b      	lsls	r3, r3, #2
   2949a:	18d3      	adds	r3, r2, r3
   2949c:	3304      	adds	r3, #4
   2949e:	2200      	movs	r2, #0
   294a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   294a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   294a4:	3301      	adds	r3, #1
   294a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   294a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   294aa:	2b0b      	cmp	r3, #11
   294ac:	ddf2      	ble.n	29494 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   294ae:	68fb      	ldr	r3, [r7, #12]
   294b0:	2200      	movs	r2, #0
   294b2:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   294b4:	68fb      	ldr	r3, [r7, #12]
   294b6:	2200      	movs	r2, #0
   294b8:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   294ba:	233b      	movs	r3, #59	; 0x3b
   294bc:	18fb      	adds	r3, r7, r3
   294be:	781a      	ldrb	r2, [r3, #0]
   294c0:	4b5d      	ldr	r3, [pc, #372]	; (29638 <tcc_init+0x350>)
   294c2:	0092      	lsls	r2, r2, #2
   294c4:	68f9      	ldr	r1, [r7, #12]
   294c6:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   294c8:	68fb      	ldr	r3, [r7, #12]
   294ca:	68ba      	ldr	r2, [r7, #8]
   294cc:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   294ce:	687b      	ldr	r3, [r7, #4]
   294d0:	22a0      	movs	r2, #160	; 0xa0
   294d2:	5c99      	ldrb	r1, [r3, r2]
   294d4:	68fb      	ldr	r3, [r7, #12]
   294d6:	223c      	movs	r2, #60	; 0x3c
   294d8:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   294da:	2314      	movs	r3, #20
   294dc:	18fb      	adds	r3, r7, r3
   294de:	0018      	movs	r0, r3
   294e0:	4b56      	ldr	r3, [pc, #344]	; (2963c <tcc_init+0x354>)
   294e2:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   294e4:	687b      	ldr	r3, [r7, #4]
   294e6:	7a9a      	ldrb	r2, [r3, #10]
   294e8:	2314      	movs	r3, #20
   294ea:	18fb      	adds	r3, r7, r3
   294ec:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   294ee:	233b      	movs	r3, #59	; 0x3b
   294f0:	18fb      	adds	r3, r7, r3
   294f2:	781b      	ldrb	r3, [r3, #0]
   294f4:	4a52      	ldr	r2, [pc, #328]	; (29640 <tcc_init+0x358>)
   294f6:	5cd3      	ldrb	r3, [r2, r3]
   294f8:	2214      	movs	r2, #20
   294fa:	18ba      	adds	r2, r7, r2
   294fc:	0011      	movs	r1, r2
   294fe:	0018      	movs	r0, r3
   29500:	4b50      	ldr	r3, [pc, #320]	; (29644 <tcc_init+0x35c>)
   29502:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   29504:	233b      	movs	r3, #59	; 0x3b
   29506:	18fb      	adds	r3, r7, r3
   29508:	781b      	ldrb	r3, [r3, #0]
   2950a:	4a4d      	ldr	r2, [pc, #308]	; (29640 <tcc_init+0x358>)
   2950c:	5cd3      	ldrb	r3, [r2, r3]
   2950e:	0018      	movs	r0, r3
   29510:	4b4d      	ldr	r3, [pc, #308]	; (29648 <tcc_init+0x360>)
   29512:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29514:	2300      	movs	r3, #0
   29516:	63fb      	str	r3, [r7, #60]	; 0x3c
   29518:	e02d      	b.n	29576 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2951a:	687a      	ldr	r2, [r7, #4]
   2951c:	2198      	movs	r1, #152	; 0x98
   2951e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29520:	18d3      	adds	r3, r2, r3
   29522:	185b      	adds	r3, r3, r1
   29524:	781b      	ldrb	r3, [r3, #0]
   29526:	2201      	movs	r2, #1
   29528:	4053      	eors	r3, r2
   2952a:	b2db      	uxtb	r3, r3
   2952c:	2b00      	cmp	r3, #0
   2952e:	d11e      	bne.n	2956e <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   29530:	2310      	movs	r3, #16
   29532:	18fb      	adds	r3, r7, r3
   29534:	0018      	movs	r0, r3
   29536:	4b45      	ldr	r3, [pc, #276]	; (2964c <tcc_init+0x364>)
   29538:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2953a:	687b      	ldr	r3, [r7, #4]
   2953c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2953e:	321e      	adds	r2, #30
   29540:	0092      	lsls	r2, r2, #2
   29542:	58d3      	ldr	r3, [r2, r3]
   29544:	b2da      	uxtb	r2, r3
   29546:	2310      	movs	r3, #16
   29548:	18fb      	adds	r3, r7, r3
   2954a:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2954c:	2310      	movs	r3, #16
   2954e:	18fb      	adds	r3, r7, r3
   29550:	2201      	movs	r2, #1
   29552:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   29554:	687b      	ldr	r3, [r7, #4]
   29556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29558:	3216      	adds	r2, #22
   2955a:	0092      	lsls	r2, r2, #2
   2955c:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2955e:	b2db      	uxtb	r3, r3
   29560:	2210      	movs	r2, #16
   29562:	18ba      	adds	r2, r7, r2
   29564:	0011      	movs	r1, r2
   29566:	0018      	movs	r0, r3
   29568:	4b39      	ldr	r3, [pc, #228]	; (29650 <tcc_init+0x368>)
   2956a:	4798      	blx	r3
   2956c:	e000      	b.n	29570 <tcc_init+0x288>
			continue;
   2956e:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   29570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29572:	3301      	adds	r3, #1
   29574:	63fb      	str	r3, [r7, #60]	; 0x3c
   29576:	233b      	movs	r3, #59	; 0x3b
   29578:	18fb      	adds	r3, r7, r3
   2957a:	781b      	ldrb	r3, [r3, #0]
   2957c:	4a28      	ldr	r2, [pc, #160]	; (29620 <tcc_init+0x338>)
   2957e:	5cd3      	ldrb	r3, [r2, r3]
   29580:	001a      	movs	r2, r3
   29582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29584:	429a      	cmp	r2, r3
   29586:	dcc8      	bgt.n	2951a <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   29588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2958a:	68bb      	ldr	r3, [r7, #8]
   2958c:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2958e:	46c0      	nop			; (mov r8, r8)
   29590:	68bb      	ldr	r3, [r7, #8]
   29592:	689b      	ldr	r3, [r3, #8]
   29594:	2204      	movs	r2, #4
   29596:	4013      	ands	r3, r2
   29598:	d1fa      	bne.n	29590 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2959a:	68bb      	ldr	r3, [r7, #8]
   2959c:	22ff      	movs	r2, #255	; 0xff
   2959e:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   295a0:	46c0      	nop			; (mov r8, r8)
   295a2:	68bb      	ldr	r3, [r7, #8]
   295a4:	689b      	ldr	r3, [r3, #8]
   295a6:	2204      	movs	r2, #4
   295a8:	4013      	ands	r3, r2
   295aa:	d1fa      	bne.n	295a2 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   295ac:	232b      	movs	r3, #43	; 0x2b
   295ae:	18fb      	adds	r3, r7, r3
   295b0:	781a      	ldrb	r2, [r3, #0]
   295b2:	68bb      	ldr	r3, [r7, #8]
   295b4:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   295b6:	2320      	movs	r3, #32
   295b8:	18fb      	adds	r3, r7, r3
   295ba:	681a      	ldr	r2, [r3, #0]
   295bc:	68bb      	ldr	r3, [r7, #8]
   295be:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   295c0:	2320      	movs	r3, #32
   295c2:	18fb      	adds	r3, r7, r3
   295c4:	685a      	ldr	r2, [r3, #4]
   295c6:	68bb      	ldr	r3, [r7, #8]
   295c8:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   295ca:	69fa      	ldr	r2, [r7, #28]
   295cc:	68bb      	ldr	r3, [r7, #8]
   295ce:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   295d0:	46c0      	nop			; (mov r8, r8)
   295d2:	68bb      	ldr	r3, [r7, #8]
   295d4:	689b      	ldr	r3, [r3, #8]
   295d6:	4a1f      	ldr	r2, [pc, #124]	; (29654 <tcc_init+0x36c>)
   295d8:	4013      	ands	r3, r2
   295da:	d1fa      	bne.n	295d2 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   295dc:	69ba      	ldr	r2, [r7, #24]
   295de:	68bb      	ldr	r3, [r7, #8]
   295e0:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   295e2:	46c0      	nop			; (mov r8, r8)
   295e4:	68bb      	ldr	r3, [r7, #8]
   295e6:	689b      	ldr	r3, [r3, #8]
   295e8:	2210      	movs	r2, #16
   295ea:	4013      	ands	r3, r2
   295ec:	d1fa      	bne.n	295e4 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   295ee:	687b      	ldr	r3, [r7, #4]
   295f0:	681a      	ldr	r2, [r3, #0]
   295f2:	68bb      	ldr	r3, [r7, #8]
   295f4:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   295f6:	46c0      	nop			; (mov r8, r8)
   295f8:	68bb      	ldr	r3, [r7, #8]
   295fa:	689b      	ldr	r3, [r3, #8]
   295fc:	4a16      	ldr	r2, [pc, #88]	; (29658 <tcc_init+0x370>)
   295fe:	4013      	ands	r3, r2
   29600:	d1fa      	bne.n	295f8 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   29602:	687b      	ldr	r3, [r7, #4]
   29604:	685a      	ldr	r2, [r3, #4]
   29606:	68bb      	ldr	r3, [r7, #8]
   29608:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2960a:	2300      	movs	r3, #0
   2960c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2960e:	e03f      	b.n	29690 <tcc_init+0x3a8>
   29610:	00028c51 	.word	0x00028c51
   29614:	00037a44 	.word	0x00037a44
   29618:	00028bcd 	.word	0x00028bcd
   2961c:	00037a50 	.word	0x00037a50
   29620:	00037a60 	.word	0x00037a60
   29624:	00028f5d 	.word	0x00028f5d
   29628:	00029001 	.word	0x00029001
   2962c:	0002905d 	.word	0x0002905d
   29630:	00029179 	.word	0x00029179
   29634:	00029251 	.word	0x00029251
   29638:	200059e4 	.word	0x200059e4
   2963c:	00028bb5 	.word	0x00028bb5
   29640:	00037a40 	.word	0x00037a40
   29644:	000287cd 	.word	0x000287cd
   29648:	00028811 	.word	0x00028811
   2964c:	00028c29 	.word	0x00028c29
   29650:	00028b2d 	.word	0x00028b2d
   29654:	00020040 	.word	0x00020040
   29658:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2965c:	46c0      	nop			; (mov r8, r8)
   2965e:	68bb      	ldr	r3, [r7, #8]
   29660:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   29662:	4912      	ldr	r1, [pc, #72]	; (296ac <tcc_init+0x3c4>)
   29664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   29666:	4091      	lsls	r1, r2
   29668:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2966a:	4013      	ands	r3, r2
   2966c:	d1f7      	bne.n	2965e <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2966e:	687a      	ldr	r2, [r7, #4]
   29670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29672:	3306      	adds	r3, #6
   29674:	009b      	lsls	r3, r3, #2
   29676:	18d3      	adds	r3, r2, r3
   29678:	3304      	adds	r3, #4
   2967a:	681a      	ldr	r2, [r3, #0]
   2967c:	68b9      	ldr	r1, [r7, #8]
   2967e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29680:	3310      	adds	r3, #16
   29682:	009b      	lsls	r3, r3, #2
   29684:	18cb      	adds	r3, r1, r3
   29686:	3304      	adds	r3, #4
   29688:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2968a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2968c:	3301      	adds	r3, #1
   2968e:	63fb      	str	r3, [r7, #60]	; 0x3c
   29690:	233b      	movs	r3, #59	; 0x3b
   29692:	18fb      	adds	r3, r7, r3
   29694:	781b      	ldrb	r3, [r3, #0]
   29696:	4a06      	ldr	r2, [pc, #24]	; (296b0 <tcc_init+0x3c8>)
   29698:	5cd3      	ldrb	r3, [r2, r3]
   2969a:	001a      	movs	r2, r3
   2969c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2969e:	429a      	cmp	r2, r3
   296a0:	dcdc      	bgt.n	2965c <tcc_init+0x374>
	}

	return STATUS_OK;
   296a2:	2300      	movs	r3, #0
}
   296a4:	0018      	movs	r0, r3
   296a6:	46bd      	mov	sp, r7
   296a8:	b011      	add	sp, #68	; 0x44
   296aa:	bd90      	pop	{r4, r7, pc}
   296ac:	00080100 	.word	0x00080100
   296b0:	00037a5c 	.word	0x00037a5c

000296b4 <system_interrupt_enable>:
{
   296b4:	b580      	push	{r7, lr}
   296b6:	b082      	sub	sp, #8
   296b8:	af00      	add	r7, sp, #0
   296ba:	0002      	movs	r2, r0
   296bc:	1dfb      	adds	r3, r7, #7
   296be:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   296c0:	4b06      	ldr	r3, [pc, #24]	; (296dc <system_interrupt_enable+0x28>)
   296c2:	1dfa      	adds	r2, r7, #7
   296c4:	7812      	ldrb	r2, [r2, #0]
   296c6:	0011      	movs	r1, r2
   296c8:	221f      	movs	r2, #31
   296ca:	400a      	ands	r2, r1
   296cc:	2101      	movs	r1, #1
   296ce:	4091      	lsls	r1, r2
   296d0:	000a      	movs	r2, r1
   296d2:	601a      	str	r2, [r3, #0]
}
   296d4:	46c0      	nop			; (mov r8, r8)
   296d6:	46bd      	mov	sp, r7
   296d8:	b002      	add	sp, #8
   296da:	bd80      	pop	{r7, pc}
   296dc:	e000e100 	.word	0xe000e100

000296e0 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   296e0:	b580      	push	{r7, lr}
   296e2:	b082      	sub	sp, #8
   296e4:	af00      	add	r7, sp, #0
   296e6:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   296e8:	4a04      	ldr	r2, [pc, #16]	; (296fc <_tcc_interrupt_get_interrupt_vector+0x1c>)
   296ea:	687b      	ldr	r3, [r7, #4]
   296ec:	18d3      	adds	r3, r2, r3
   296ee:	781b      	ldrb	r3, [r3, #0]
   296f0:	b25b      	sxtb	r3, r3
}
   296f2:	0018      	movs	r0, r3
   296f4:	46bd      	mov	sp, r7
   296f6:	b002      	add	sp, #8
   296f8:	bd80      	pop	{r7, pc}
   296fa:	46c0      	nop			; (mov r8, r8)
   296fc:	20000128 	.word	0x20000128

00029700 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   29700:	b580      	push	{r7, lr}
   29702:	b084      	sub	sp, #16
   29704:	af00      	add	r7, sp, #0
   29706:	60f8      	str	r0, [r7, #12]
   29708:	60b9      	str	r1, [r7, #8]
   2970a:	1dfb      	adds	r3, r7, #7
   2970c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2970e:	1dfb      	adds	r3, r7, #7
   29710:	781b      	ldrb	r3, [r3, #0]
   29712:	68fa      	ldr	r2, [r7, #12]
   29714:	009b      	lsls	r3, r3, #2
   29716:	18d3      	adds	r3, r2, r3
   29718:	3304      	adds	r3, #4
   2971a:	68ba      	ldr	r2, [r7, #8]
   2971c:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2971e:	68fb      	ldr	r3, [r7, #12]
   29720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   29722:	1dfb      	adds	r3, r7, #7
   29724:	7819      	ldrb	r1, [r3, #0]
   29726:	4b05      	ldr	r3, [pc, #20]	; (2973c <tcc_register_callback+0x3c>)
   29728:	0089      	lsls	r1, r1, #2
   2972a:	58cb      	ldr	r3, [r1, r3]
   2972c:	431a      	orrs	r2, r3
   2972e:	68fb      	ldr	r3, [r7, #12]
   29730:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   29732:	2300      	movs	r3, #0
}
   29734:	0018      	movs	r0, r3
   29736:	46bd      	mov	sp, r7
   29738:	b004      	add	sp, #16
   2973a:	bd80      	pop	{r7, pc}
   2973c:	00037a64 	.word	0x00037a64

00029740 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   29740:	b580      	push	{r7, lr}
   29742:	b082      	sub	sp, #8
   29744:	af00      	add	r7, sp, #0
   29746:	6078      	str	r0, [r7, #4]
   29748:	000a      	movs	r2, r1
   2974a:	1cfb      	adds	r3, r7, #3
   2974c:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2974e:	687b      	ldr	r3, [r7, #4]
   29750:	681b      	ldr	r3, [r3, #0]
   29752:	0018      	movs	r0, r3
   29754:	4b0f      	ldr	r3, [pc, #60]	; (29794 <tcc_enable_callback+0x54>)
   29756:	4798      	blx	r3
   29758:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2975a:	0018      	movs	r0, r3
   2975c:	4b0e      	ldr	r3, [pc, #56]	; (29798 <tcc_enable_callback+0x58>)
   2975e:	4798      	blx	r3
   29760:	0003      	movs	r3, r0
   29762:	0018      	movs	r0, r3
   29764:	4b0d      	ldr	r3, [pc, #52]	; (2979c <tcc_enable_callback+0x5c>)
   29766:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   29768:	687b      	ldr	r3, [r7, #4]
   2976a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2976c:	1cfb      	adds	r3, r7, #3
   2976e:	7819      	ldrb	r1, [r3, #0]
   29770:	4b0b      	ldr	r3, [pc, #44]	; (297a0 <tcc_enable_callback+0x60>)
   29772:	0089      	lsls	r1, r1, #2
   29774:	58cb      	ldr	r3, [r1, r3]
   29776:	431a      	orrs	r2, r3
   29778:	687b      	ldr	r3, [r7, #4]
   2977a:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2977c:	687b      	ldr	r3, [r7, #4]
   2977e:	681b      	ldr	r3, [r3, #0]
   29780:	1cfa      	adds	r2, r7, #3
   29782:	7811      	ldrb	r1, [r2, #0]
   29784:	4a06      	ldr	r2, [pc, #24]	; (297a0 <tcc_enable_callback+0x60>)
   29786:	0089      	lsls	r1, r1, #2
   29788:	588a      	ldr	r2, [r1, r2]
   2978a:	629a      	str	r2, [r3, #40]	; 0x28
}
   2978c:	46c0      	nop			; (mov r8, r8)
   2978e:	46bd      	mov	sp, r7
   29790:	b002      	add	sp, #8
   29792:	bd80      	pop	{r7, pc}
   29794:	00028c51 	.word	0x00028c51
   29798:	000296e1 	.word	0x000296e1
   2979c:	000296b5 	.word	0x000296b5
   297a0:	00037a64 	.word	0x00037a64

000297a4 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   297a4:	b580      	push	{r7, lr}
   297a6:	af00      	add	r7, sp, #0
   297a8:	2000      	movs	r0, #0
   297aa:	4b02      	ldr	r3, [pc, #8]	; (297b4 <TCC0_Handler+0x10>)
   297ac:	4798      	blx	r3
   297ae:	46c0      	nop			; (mov r8, r8)
   297b0:	46bd      	mov	sp, r7
   297b2:	bd80      	pop	{r7, pc}
   297b4:	000297e1 	.word	0x000297e1

000297b8 <TCC1_Handler>:
   297b8:	b580      	push	{r7, lr}
   297ba:	af00      	add	r7, sp, #0
   297bc:	2001      	movs	r0, #1
   297be:	4b02      	ldr	r3, [pc, #8]	; (297c8 <TCC1_Handler+0x10>)
   297c0:	4798      	blx	r3
   297c2:	46c0      	nop			; (mov r8, r8)
   297c4:	46bd      	mov	sp, r7
   297c6:	bd80      	pop	{r7, pc}
   297c8:	000297e1 	.word	0x000297e1

000297cc <TCC2_Handler>:
   297cc:	b580      	push	{r7, lr}
   297ce:	af00      	add	r7, sp, #0
   297d0:	2002      	movs	r0, #2
   297d2:	4b02      	ldr	r3, [pc, #8]	; (297dc <TCC2_Handler+0x10>)
   297d4:	4798      	blx	r3
   297d6:	46c0      	nop			; (mov r8, r8)
   297d8:	46bd      	mov	sp, r7
   297da:	bd80      	pop	{r7, pc}
   297dc:	000297e1 	.word	0x000297e1

000297e0 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   297e0:	b580      	push	{r7, lr}
   297e2:	b086      	sub	sp, #24
   297e4:	af00      	add	r7, sp, #0
   297e6:	0002      	movs	r2, r0
   297e8:	1dfb      	adds	r3, r7, #7
   297ea:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   297ec:	1dfb      	adds	r3, r7, #7
   297ee:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   297f0:	4b18      	ldr	r3, [pc, #96]	; (29854 <_tcc_interrupt_handler+0x74>)
   297f2:	0092      	lsls	r2, r2, #2
   297f4:	58d3      	ldr	r3, [r2, r3]
   297f6:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   297f8:	693b      	ldr	r3, [r7, #16]
   297fa:	681b      	ldr	r3, [r3, #0]
   297fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   297fe:	693b      	ldr	r3, [r7, #16]
   29800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   29802:	401a      	ands	r2, r3
			module->enable_callback_mask);
   29804:	693b      	ldr	r3, [r7, #16]
   29806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   29808:	4013      	ands	r3, r2
   2980a:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2980c:	2300      	movs	r3, #0
   2980e:	617b      	str	r3, [r7, #20]
   29810:	e019      	b.n	29846 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   29812:	4b11      	ldr	r3, [pc, #68]	; (29858 <_tcc_interrupt_handler+0x78>)
   29814:	697a      	ldr	r2, [r7, #20]
   29816:	0092      	lsls	r2, r2, #2
   29818:	58d3      	ldr	r3, [r2, r3]
   2981a:	68fa      	ldr	r2, [r7, #12]
   2981c:	4013      	ands	r3, r2
   2981e:	d00f      	beq.n	29840 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   29820:	693a      	ldr	r2, [r7, #16]
   29822:	697b      	ldr	r3, [r7, #20]
   29824:	009b      	lsls	r3, r3, #2
   29826:	18d3      	adds	r3, r2, r3
   29828:	3304      	adds	r3, #4
   2982a:	681b      	ldr	r3, [r3, #0]
   2982c:	693a      	ldr	r2, [r7, #16]
   2982e:	0010      	movs	r0, r2
   29830:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   29832:	693b      	ldr	r3, [r7, #16]
   29834:	681b      	ldr	r3, [r3, #0]
   29836:	4a08      	ldr	r2, [pc, #32]	; (29858 <_tcc_interrupt_handler+0x78>)
   29838:	6979      	ldr	r1, [r7, #20]
   2983a:	0089      	lsls	r1, r1, #2
   2983c:	588a      	ldr	r2, [r1, r2]
   2983e:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   29840:	697b      	ldr	r3, [r7, #20]
   29842:	3301      	adds	r3, #1
   29844:	617b      	str	r3, [r7, #20]
   29846:	697b      	ldr	r3, [r7, #20]
   29848:	2b0b      	cmp	r3, #11
   2984a:	dde2      	ble.n	29812 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2984c:	46c0      	nop			; (mov r8, r8)
   2984e:	46bd      	mov	sp, r7
   29850:	b006      	add	sp, #24
   29852:	bd80      	pop	{r7, pc}
   29854:	200059e4 	.word	0x200059e4
   29858:	00037a64 	.word	0x00037a64

0002985c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2985c:	b580      	push	{r7, lr}
   2985e:	b082      	sub	sp, #8
   29860:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   29862:	4b2f      	ldr	r3, [pc, #188]	; (29920 <Reset_Handler+0xc4>)
   29864:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   29866:	4b2f      	ldr	r3, [pc, #188]	; (29924 <Reset_Handler+0xc8>)
   29868:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2986a:	687a      	ldr	r2, [r7, #4]
   2986c:	683b      	ldr	r3, [r7, #0]
   2986e:	429a      	cmp	r2, r3
   29870:	d00c      	beq.n	2988c <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   29872:	e007      	b.n	29884 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   29874:	683b      	ldr	r3, [r7, #0]
   29876:	1d1a      	adds	r2, r3, #4
   29878:	603a      	str	r2, [r7, #0]
   2987a:	687a      	ldr	r2, [r7, #4]
   2987c:	1d11      	adds	r1, r2, #4
   2987e:	6079      	str	r1, [r7, #4]
   29880:	6812      	ldr	r2, [r2, #0]
   29882:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   29884:	683a      	ldr	r2, [r7, #0]
   29886:	4b28      	ldr	r3, [pc, #160]	; (29928 <Reset_Handler+0xcc>)
   29888:	429a      	cmp	r2, r3
   2988a:	d3f3      	bcc.n	29874 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2988c:	4b27      	ldr	r3, [pc, #156]	; (2992c <Reset_Handler+0xd0>)
   2988e:	603b      	str	r3, [r7, #0]
   29890:	e004      	b.n	2989c <Reset_Handler+0x40>
                *pDest++ = 0;
   29892:	683b      	ldr	r3, [r7, #0]
   29894:	1d1a      	adds	r2, r3, #4
   29896:	603a      	str	r2, [r7, #0]
   29898:	2200      	movs	r2, #0
   2989a:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2989c:	683a      	ldr	r2, [r7, #0]
   2989e:	4b24      	ldr	r3, [pc, #144]	; (29930 <Reset_Handler+0xd4>)
   298a0:	429a      	cmp	r2, r3
   298a2:	d3f6      	bcc.n	29892 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   298a4:	4b23      	ldr	r3, [pc, #140]	; (29934 <Reset_Handler+0xd8>)
   298a6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   298a8:	4b23      	ldr	r3, [pc, #140]	; (29938 <Reset_Handler+0xdc>)
   298aa:	687a      	ldr	r2, [r7, #4]
   298ac:	21ff      	movs	r1, #255	; 0xff
   298ae:	438a      	bics	r2, r1
   298b0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   298b2:	4a22      	ldr	r2, [pc, #136]	; (2993c <Reset_Handler+0xe0>)
   298b4:	2390      	movs	r3, #144	; 0x90
   298b6:	005b      	lsls	r3, r3, #1
   298b8:	2102      	movs	r1, #2
   298ba:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   298bc:	4a20      	ldr	r2, [pc, #128]	; (29940 <Reset_Handler+0xe4>)
   298be:	78d3      	ldrb	r3, [r2, #3]
   298c0:	2103      	movs	r1, #3
   298c2:	438b      	bics	r3, r1
   298c4:	1c19      	adds	r1, r3, #0
   298c6:	2302      	movs	r3, #2
   298c8:	430b      	orrs	r3, r1
   298ca:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   298cc:	4a1c      	ldr	r2, [pc, #112]	; (29940 <Reset_Handler+0xe4>)
   298ce:	78d3      	ldrb	r3, [r2, #3]
   298d0:	210c      	movs	r1, #12
   298d2:	438b      	bics	r3, r1
   298d4:	1c19      	adds	r1, r3, #0
   298d6:	2308      	movs	r3, #8
   298d8:	430b      	orrs	r3, r1
   298da:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   298dc:	4a19      	ldr	r2, [pc, #100]	; (29944 <Reset_Handler+0xe8>)
   298de:	7b93      	ldrb	r3, [r2, #14]
   298e0:	2130      	movs	r1, #48	; 0x30
   298e2:	438b      	bics	r3, r1
   298e4:	1c19      	adds	r1, r3, #0
   298e6:	2320      	movs	r3, #32
   298e8:	430b      	orrs	r3, r1
   298ea:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   298ec:	4a15      	ldr	r2, [pc, #84]	; (29944 <Reset_Handler+0xe8>)
   298ee:	7b93      	ldrb	r3, [r2, #14]
   298f0:	210c      	movs	r1, #12
   298f2:	438b      	bics	r3, r1
   298f4:	1c19      	adds	r1, r3, #0
   298f6:	2308      	movs	r3, #8
   298f8:	430b      	orrs	r3, r1
   298fa:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   298fc:	4a11      	ldr	r2, [pc, #68]	; (29944 <Reset_Handler+0xe8>)
   298fe:	7b93      	ldrb	r3, [r2, #14]
   29900:	2103      	movs	r1, #3
   29902:	438b      	bics	r3, r1
   29904:	1c19      	adds	r1, r3, #0
   29906:	2302      	movs	r3, #2
   29908:	430b      	orrs	r3, r1
   2990a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2990c:	4a0e      	ldr	r2, [pc, #56]	; (29948 <Reset_Handler+0xec>)
   2990e:	6853      	ldr	r3, [r2, #4]
   29910:	2180      	movs	r1, #128	; 0x80
   29912:	430b      	orrs	r3, r1
   29914:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   29916:	4b0d      	ldr	r3, [pc, #52]	; (2994c <Reset_Handler+0xf0>)
   29918:	4798      	blx	r3

        /* Branch to main function */
        main();
   2991a:	4b0d      	ldr	r3, [pc, #52]	; (29950 <Reset_Handler+0xf4>)
   2991c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2991e:	e7fe      	b.n	2991e <Reset_Handler+0xc2>
   29920:	00038788 	.word	0x00038788
   29924:	20000000 	.word	0x20000000
   29928:	20000300 	.word	0x20000300
   2992c:	20000300 	.word	0x20000300
   29930:	20005a54 	.word	0x20005a54
   29934:	00012000 	.word	0x00012000
   29938:	e000ed00 	.word	0xe000ed00
   2993c:	41007000 	.word	0x41007000
   29940:	41005000 	.word	0x41005000
   29944:	41004800 	.word	0x41004800
   29948:	41004000 	.word	0x41004000
   2994c:	000330f9 	.word	0x000330f9
   29950:	00031091 	.word	0x00031091

00029954 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   29954:	b580      	push	{r7, lr}
   29956:	af00      	add	r7, sp, #0
  __asm volatile (
   29958:	2004      	movs	r0, #4
   2995a:	4671      	mov	r1, lr
   2995c:	4208      	tst	r0, r1
   2995e:	d002      	beq.n	29966 <_MSP>
   29960:	f3ef 8009 	mrs	r0, PSP
   29964:	e001      	b.n	2996a <_HALT>

00029966 <_MSP>:
   29966:	f3ef 8008 	mrs	r0, MSP

0002996a <_HALT>:
   2996a:	6941      	ldr	r1, [r0, #20]
   2996c:	e004      	b.n	29978 <HardFault_HandlerC>
   2996e:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   29970:	46c0      	nop			; (mov r8, r8)
   29972:	46bd      	mov	sp, r7
   29974:	bd80      	pop	{r7, pc}
	...

00029978 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   29978:	b580      	push	{r7, lr}
   2997a:	b090      	sub	sp, #64	; 0x40
   2997c:	af00      	add	r7, sp, #0
   2997e:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   29980:	687b      	ldr	r3, [r7, #4]
   29982:	681b      	ldr	r3, [r3, #0]
   29984:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   29986:	687b      	ldr	r3, [r7, #4]
   29988:	685b      	ldr	r3, [r3, #4]
   2998a:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2998c:	687b      	ldr	r3, [r7, #4]
   2998e:	689b      	ldr	r3, [r3, #8]
   29990:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   29992:	687b      	ldr	r3, [r7, #4]
   29994:	68db      	ldr	r3, [r3, #12]
   29996:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   29998:	687b      	ldr	r3, [r7, #4]
   2999a:	691b      	ldr	r3, [r3, #16]
   2999c:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2999e:	687b      	ldr	r3, [r7, #4]
   299a0:	695b      	ldr	r3, [r3, #20]
   299a2:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   299a4:	687b      	ldr	r3, [r7, #4]
   299a6:	699b      	ldr	r3, [r3, #24]
   299a8:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   299aa:	687b      	ldr	r3, [r7, #4]
   299ac:	69db      	ldr	r3, [r3, #28]
   299ae:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   299b0:	4b0b      	ldr	r3, [pc, #44]	; (299e0 <HardFault_HandlerC+0x68>)
   299b2:	681b      	ldr	r3, [r3, #0]
   299b4:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   299b6:	4b0b      	ldr	r3, [pc, #44]	; (299e4 <HardFault_HandlerC+0x6c>)
   299b8:	681b      	ldr	r3, [r3, #0]
   299ba:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   299bc:	4b0a      	ldr	r3, [pc, #40]	; (299e8 <HardFault_HandlerC+0x70>)
   299be:	681b      	ldr	r3, [r3, #0]
   299c0:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   299c2:	4b0a      	ldr	r3, [pc, #40]	; (299ec <HardFault_HandlerC+0x74>)
   299c4:	681b      	ldr	r3, [r3, #0]
   299c6:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   299c8:	4b09      	ldr	r3, [pc, #36]	; (299f0 <HardFault_HandlerC+0x78>)
   299ca:	681b      	ldr	r3, [r3, #0]
   299cc:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   299ce:	4b09      	ldr	r3, [pc, #36]	; (299f4 <HardFault_HandlerC+0x7c>)
   299d0:	681b      	ldr	r3, [r3, #0]
   299d2:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   299d4:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   299d6:	46c0      	nop			; (mov r8, r8)
   299d8:	46bd      	mov	sp, r7
   299da:	b010      	add	sp, #64	; 0x40
   299dc:	bd80      	pop	{r7, pc}
   299de:	46c0      	nop			; (mov r8, r8)
   299e0:	e000ed28 	.word	0xe000ed28
   299e4:	e000ed2c 	.word	0xe000ed2c
   299e8:	e000ed30 	.word	0xe000ed30
   299ec:	e000ed3c 	.word	0xe000ed3c
   299f0:	e000ed34 	.word	0xe000ed34
   299f4:	e000ed38 	.word	0xe000ed38

000299f8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   299f8:	b580      	push	{r7, lr}
   299fa:	b086      	sub	sp, #24
   299fc:	af00      	add	r7, sp, #0
   299fe:	60f8      	str	r0, [r7, #12]
   29a00:	60b9      	str	r1, [r7, #8]
   29a02:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   29a04:	2300      	movs	r3, #0
   29a06:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   29a08:	68fb      	ldr	r3, [r7, #12]
   29a0a:	2b00      	cmp	r3, #0
   29a0c:	d012      	beq.n	29a34 <_read+0x3c>
		return -1;
   29a0e:	2301      	movs	r3, #1
   29a10:	425b      	negs	r3, r3
   29a12:	e013      	b.n	29a3c <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   29a14:	4b0b      	ldr	r3, [pc, #44]	; (29a44 <_read+0x4c>)
   29a16:	681a      	ldr	r2, [r3, #0]
   29a18:	4b0b      	ldr	r3, [pc, #44]	; (29a48 <_read+0x50>)
   29a1a:	681b      	ldr	r3, [r3, #0]
   29a1c:	68b9      	ldr	r1, [r7, #8]
   29a1e:	0018      	movs	r0, r3
   29a20:	4790      	blx	r2
		ptr++;
   29a22:	68bb      	ldr	r3, [r7, #8]
   29a24:	3301      	adds	r3, #1
   29a26:	60bb      	str	r3, [r7, #8]
		nChars++;
   29a28:	697b      	ldr	r3, [r7, #20]
   29a2a:	3301      	adds	r3, #1
   29a2c:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   29a2e:	687b      	ldr	r3, [r7, #4]
   29a30:	3b01      	subs	r3, #1
   29a32:	607b      	str	r3, [r7, #4]
   29a34:	687b      	ldr	r3, [r7, #4]
   29a36:	2b00      	cmp	r3, #0
   29a38:	dcec      	bgt.n	29a14 <_read+0x1c>
	}
	return nChars;
   29a3a:	697b      	ldr	r3, [r7, #20]
}
   29a3c:	0018      	movs	r0, r3
   29a3e:	46bd      	mov	sp, r7
   29a40:	b006      	add	sp, #24
   29a42:	bd80      	pop	{r7, pc}
   29a44:	200059f0 	.word	0x200059f0
   29a48:	200059f8 	.word	0x200059f8

00029a4c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   29a4c:	b580      	push	{r7, lr}
   29a4e:	b086      	sub	sp, #24
   29a50:	af00      	add	r7, sp, #0
   29a52:	60f8      	str	r0, [r7, #12]
   29a54:	60b9      	str	r1, [r7, #8]
   29a56:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   29a58:	2300      	movs	r3, #0
   29a5a:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   29a5c:	68fb      	ldr	r3, [r7, #12]
   29a5e:	2b01      	cmp	r3, #1
   29a60:	d01d      	beq.n	29a9e <_write+0x52>
   29a62:	68fb      	ldr	r3, [r7, #12]
   29a64:	2b02      	cmp	r3, #2
   29a66:	d01a      	beq.n	29a9e <_write+0x52>
   29a68:	68fb      	ldr	r3, [r7, #12]
   29a6a:	2b03      	cmp	r3, #3
   29a6c:	d017      	beq.n	29a9e <_write+0x52>
		return -1;
   29a6e:	2301      	movs	r3, #1
   29a70:	425b      	negs	r3, r3
   29a72:	e018      	b.n	29aa6 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   29a74:	4b0e      	ldr	r3, [pc, #56]	; (29ab0 <_write+0x64>)
   29a76:	681a      	ldr	r2, [r3, #0]
   29a78:	4b0e      	ldr	r3, [pc, #56]	; (29ab4 <_write+0x68>)
   29a7a:	6818      	ldr	r0, [r3, #0]
   29a7c:	68bb      	ldr	r3, [r7, #8]
   29a7e:	1c59      	adds	r1, r3, #1
   29a80:	60b9      	str	r1, [r7, #8]
   29a82:	781b      	ldrb	r3, [r3, #0]
   29a84:	0019      	movs	r1, r3
   29a86:	4790      	blx	r2
   29a88:	1e03      	subs	r3, r0, #0
   29a8a:	da02      	bge.n	29a92 <_write+0x46>
			return -1;
   29a8c:	2301      	movs	r3, #1
   29a8e:	425b      	negs	r3, r3
   29a90:	e009      	b.n	29aa6 <_write+0x5a>
		}
		++nChars;
   29a92:	697b      	ldr	r3, [r7, #20]
   29a94:	3301      	adds	r3, #1
   29a96:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   29a98:	687b      	ldr	r3, [r7, #4]
   29a9a:	3b01      	subs	r3, #1
   29a9c:	607b      	str	r3, [r7, #4]
   29a9e:	687b      	ldr	r3, [r7, #4]
   29aa0:	2b00      	cmp	r3, #0
   29aa2:	d1e7      	bne.n	29a74 <_write+0x28>
	}
	return nChars;
   29aa4:	697b      	ldr	r3, [r7, #20]
}
   29aa6:	0018      	movs	r0, r3
   29aa8:	46bd      	mov	sp, r7
   29aaa:	b006      	add	sp, #24
   29aac:	bd80      	pop	{r7, pc}
   29aae:	46c0      	nop			; (mov r8, r8)
   29ab0:	200059f4 	.word	0x200059f4
   29ab4:	200059f8 	.word	0x200059f8

00029ab8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   29ab8:	b580      	push	{r7, lr}
   29aba:	b084      	sub	sp, #16
   29abc:	af00      	add	r7, sp, #0
   29abe:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   29ac0:	4b0a      	ldr	r3, [pc, #40]	; (29aec <_sbrk+0x34>)
   29ac2:	681b      	ldr	r3, [r3, #0]
   29ac4:	2b00      	cmp	r3, #0
   29ac6:	d102      	bne.n	29ace <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   29ac8:	4b08      	ldr	r3, [pc, #32]	; (29aec <_sbrk+0x34>)
   29aca:	4a09      	ldr	r2, [pc, #36]	; (29af0 <_sbrk+0x38>)
   29acc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   29ace:	4b07      	ldr	r3, [pc, #28]	; (29aec <_sbrk+0x34>)
   29ad0:	681b      	ldr	r3, [r3, #0]
   29ad2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   29ad4:	4b05      	ldr	r3, [pc, #20]	; (29aec <_sbrk+0x34>)
   29ad6:	681a      	ldr	r2, [r3, #0]
   29ad8:	687b      	ldr	r3, [r7, #4]
   29ada:	18d2      	adds	r2, r2, r3
   29adc:	4b03      	ldr	r3, [pc, #12]	; (29aec <_sbrk+0x34>)
   29ade:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   29ae0:	68fb      	ldr	r3, [r7, #12]
}
   29ae2:	0018      	movs	r0, r3
   29ae4:	46bd      	mov	sp, r7
   29ae6:	b004      	add	sp, #16
   29ae8:	bd80      	pop	{r7, pc}
   29aea:	46c0      	nop			; (mov r8, r8)
   29aec:	2000416c 	.word	0x2000416c
   29af0:	20007a58 	.word	0x20007a58

00029af4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   29af4:	b580      	push	{r7, lr}
   29af6:	b082      	sub	sp, #8
   29af8:	af00      	add	r7, sp, #0
   29afa:	6078      	str	r0, [r7, #4]
	return -1;
   29afc:	2301      	movs	r3, #1
   29afe:	425b      	negs	r3, r3
}
   29b00:	0018      	movs	r0, r3
   29b02:	46bd      	mov	sp, r7
   29b04:	b002      	add	sp, #8
   29b06:	bd80      	pop	{r7, pc}

00029b08 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   29b08:	b580      	push	{r7, lr}
   29b0a:	b082      	sub	sp, #8
   29b0c:	af00      	add	r7, sp, #0
   29b0e:	6078      	str	r0, [r7, #4]
   29b10:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   29b12:	683b      	ldr	r3, [r7, #0]
   29b14:	2280      	movs	r2, #128	; 0x80
   29b16:	0192      	lsls	r2, r2, #6
   29b18:	605a      	str	r2, [r3, #4]

	return 0;
   29b1a:	2300      	movs	r3, #0
}
   29b1c:	0018      	movs	r0, r3
   29b1e:	46bd      	mov	sp, r7
   29b20:	b002      	add	sp, #8
   29b22:	bd80      	pop	{r7, pc}

00029b24 <_isatty>:

extern int _isatty(int file)
{
   29b24:	b580      	push	{r7, lr}
   29b26:	b082      	sub	sp, #8
   29b28:	af00      	add	r7, sp, #0
   29b2a:	6078      	str	r0, [r7, #4]
	return 1;
   29b2c:	2301      	movs	r3, #1
}
   29b2e:	0018      	movs	r0, r3
   29b30:	46bd      	mov	sp, r7
   29b32:	b002      	add	sp, #8
   29b34:	bd80      	pop	{r7, pc}

00029b36 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   29b36:	b580      	push	{r7, lr}
   29b38:	b084      	sub	sp, #16
   29b3a:	af00      	add	r7, sp, #0
   29b3c:	60f8      	str	r0, [r7, #12]
   29b3e:	60b9      	str	r1, [r7, #8]
   29b40:	607a      	str	r2, [r7, #4]
	return 0;
   29b42:	2300      	movs	r3, #0
}
   29b44:	0018      	movs	r0, r3
   29b46:	46bd      	mov	sp, r7
   29b48:	b004      	add	sp, #16
   29b4a:	bd80      	pop	{r7, pc}

00029b4c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   29b4c:	b580      	push	{r7, lr}
   29b4e:	b082      	sub	sp, #8
   29b50:	af00      	add	r7, sp, #0
   29b52:	6078      	str	r0, [r7, #4]
	time->second = 0;
   29b54:	687b      	ldr	r3, [r7, #4]
   29b56:	2200      	movs	r2, #0
   29b58:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   29b5a:	687b      	ldr	r3, [r7, #4]
   29b5c:	2200      	movs	r2, #0
   29b5e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   29b60:	687b      	ldr	r3, [r7, #4]
   29b62:	2200      	movs	r2, #0
   29b64:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   29b66:	687b      	ldr	r3, [r7, #4]
   29b68:	2200      	movs	r2, #0
   29b6a:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   29b6c:	687b      	ldr	r3, [r7, #4]
   29b6e:	2201      	movs	r2, #1
   29b70:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   29b72:	687b      	ldr	r3, [r7, #4]
   29b74:	2201      	movs	r2, #1
   29b76:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   29b78:	687b      	ldr	r3, [r7, #4]
   29b7a:	22fa      	movs	r2, #250	; 0xfa
   29b7c:	00d2      	lsls	r2, r2, #3
   29b7e:	80da      	strh	r2, [r3, #6]
}
   29b80:	46c0      	nop			; (mov r8, r8)
   29b82:	46bd      	mov	sp, r7
   29b84:	b002      	add	sp, #8
   29b86:	bd80      	pop	{r7, pc}

00029b88 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   29b88:	b580      	push	{r7, lr}
   29b8a:	b086      	sub	sp, #24
   29b8c:	af00      	add	r7, sp, #0
   29b8e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   29b90:	230c      	movs	r3, #12
   29b92:	18fb      	adds	r3, r7, r3
   29b94:	0018      	movs	r0, r3
   29b96:	4b23      	ldr	r3, [pc, #140]	; (29c24 <rtc_calendar_get_config_defaults+0x9c>)
   29b98:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   29b9a:	687b      	ldr	r3, [r7, #4]
   29b9c:	22a0      	movs	r2, #160	; 0xa0
   29b9e:	0112      	lsls	r2, r2, #4
   29ba0:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   29ba2:	687b      	ldr	r3, [r7, #4]
   29ba4:	2200      	movs	r2, #0
   29ba6:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   29ba8:	687b      	ldr	r3, [r7, #4]
   29baa:	2200      	movs	r2, #0
   29bac:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   29bae:	687b      	ldr	r3, [r7, #4]
   29bb0:	2200      	movs	r2, #0
   29bb2:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   29bb4:	687b      	ldr	r3, [r7, #4]
   29bb6:	22fa      	movs	r2, #250	; 0xfa
   29bb8:	00d2      	lsls	r2, r2, #3
   29bba:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   29bbc:	2317      	movs	r3, #23
   29bbe:	18fb      	adds	r3, r7, r3
   29bc0:	2200      	movs	r2, #0
   29bc2:	701a      	strb	r2, [r3, #0]
   29bc4:	e025      	b.n	29c12 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   29bc6:	2317      	movs	r3, #23
   29bc8:	18fb      	adds	r3, r7, r3
   29bca:	781a      	ldrb	r2, [r3, #0]
   29bcc:	6879      	ldr	r1, [r7, #4]
   29bce:	2008      	movs	r0, #8
   29bd0:	0013      	movs	r3, r2
   29bd2:	009b      	lsls	r3, r3, #2
   29bd4:	189b      	adds	r3, r3, r2
   29bd6:	005b      	lsls	r3, r3, #1
   29bd8:	18cb      	adds	r3, r1, r3
   29bda:	181a      	adds	r2, r3, r0
   29bdc:	230c      	movs	r3, #12
   29bde:	18fb      	adds	r3, r7, r3
   29be0:	0010      	movs	r0, r2
   29be2:	0019      	movs	r1, r3
   29be4:	2308      	movs	r3, #8
   29be6:	001a      	movs	r2, r3
   29be8:	4b0f      	ldr	r3, [pc, #60]	; (29c28 <rtc_calendar_get_config_defaults+0xa0>)
   29bea:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   29bec:	2317      	movs	r3, #23
   29bee:	18fb      	adds	r3, r7, r3
   29bf0:	781a      	ldrb	r2, [r3, #0]
   29bf2:	6879      	ldr	r1, [r7, #4]
   29bf4:	0013      	movs	r3, r2
   29bf6:	009b      	lsls	r3, r3, #2
   29bf8:	189b      	adds	r3, r3, r2
   29bfa:	005b      	lsls	r3, r3, #1
   29bfc:	18cb      	adds	r3, r1, r3
   29bfe:	3310      	adds	r3, #16
   29c00:	2206      	movs	r2, #6
   29c02:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   29c04:	2317      	movs	r3, #23
   29c06:	18fb      	adds	r3, r7, r3
   29c08:	781a      	ldrb	r2, [r3, #0]
   29c0a:	2317      	movs	r3, #23
   29c0c:	18fb      	adds	r3, r7, r3
   29c0e:	3201      	adds	r2, #1
   29c10:	701a      	strb	r2, [r3, #0]
   29c12:	2317      	movs	r3, #23
   29c14:	18fb      	adds	r3, r7, r3
   29c16:	781b      	ldrb	r3, [r3, #0]
   29c18:	2b00      	cmp	r3, #0
   29c1a:	d0d4      	beq.n	29bc6 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   29c1c:	46c0      	nop			; (mov r8, r8)
   29c1e:	46bd      	mov	sp, r7
   29c20:	b006      	add	sp, #24
   29c22:	bd80      	pop	{r7, pc}
   29c24:	00029b4d 	.word	0x00029b4d
   29c28:	00033169 	.word	0x00033169

00029c2c <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   29c2c:	b580      	push	{r7, lr}
   29c2e:	b088      	sub	sp, #32
   29c30:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   29c32:	230c      	movs	r3, #12
   29c34:	18fb      	adds	r3, r7, r3
   29c36:	0018      	movs	r0, r3
   29c38:	4b1a      	ldr	r3, [pc, #104]	; (29ca4 <configure_rtc_calendar+0x78>)
   29c3a:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   29c3c:	1d3b      	adds	r3, r7, #4
   29c3e:	0018      	movs	r0, r3
   29c40:	4b19      	ldr	r3, [pc, #100]	; (29ca8 <configure_rtc_calendar+0x7c>)
   29c42:	4798      	blx	r3
	init_time.year   = 2014;
   29c44:	1d3b      	adds	r3, r7, #4
   29c46:	4a19      	ldr	r2, [pc, #100]	; (29cac <configure_rtc_calendar+0x80>)
   29c48:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   29c4a:	1d3b      	adds	r3, r7, #4
   29c4c:	2201      	movs	r2, #1
   29c4e:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   29c50:	1d3b      	adds	r3, r7, #4
   29c52:	2201      	movs	r2, #1
   29c54:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   29c56:	1d3b      	adds	r3, r7, #4
   29c58:	2200      	movs	r2, #0
   29c5a:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   29c5c:	1d3b      	adds	r3, r7, #4
   29c5e:	2200      	movs	r2, #0
   29c60:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   29c62:	1d3b      	adds	r3, r7, #4
   29c64:	2204      	movs	r2, #4
   29c66:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   29c68:	230c      	movs	r3, #12
   29c6a:	18fb      	adds	r3, r7, r3
   29c6c:	2201      	movs	r2, #1
   29c6e:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   29c70:	230c      	movs	r3, #12
   29c72:	18fb      	adds	r3, r7, r3
   29c74:	1d3a      	adds	r2, r7, #4
   29c76:	3308      	adds	r3, #8
   29c78:	ca03      	ldmia	r2!, {r0, r1}
   29c7a:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   29c7c:	230c      	movs	r3, #12
   29c7e:	18fb      	adds	r3, r7, r3
   29c80:	2206      	movs	r2, #6
   29c82:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   29c84:	230c      	movs	r3, #12
   29c86:	18fa      	adds	r2, r7, r3
   29c88:	4909      	ldr	r1, [pc, #36]	; (29cb0 <configure_rtc_calendar+0x84>)
   29c8a:	4b0a      	ldr	r3, [pc, #40]	; (29cb4 <configure_rtc_calendar+0x88>)
   29c8c:	0018      	movs	r0, r3
   29c8e:	4b0a      	ldr	r3, [pc, #40]	; (29cb8 <configure_rtc_calendar+0x8c>)
   29c90:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   29c92:	4b08      	ldr	r3, [pc, #32]	; (29cb4 <configure_rtc_calendar+0x88>)
   29c94:	0018      	movs	r0, r3
   29c96:	4b09      	ldr	r3, [pc, #36]	; (29cbc <configure_rtc_calendar+0x90>)
   29c98:	4798      	blx	r3
}
   29c9a:	46c0      	nop			; (mov r8, r8)
   29c9c:	46bd      	mov	sp, r7
   29c9e:	b008      	add	sp, #32
   29ca0:	bd80      	pop	{r7, pc}
   29ca2:	46c0      	nop			; (mov r8, r8)
   29ca4:	00029b89 	.word	0x00029b89
   29ca8:	00029b4d 	.word	0x00029b4d
   29cac:	000007de 	.word	0x000007de
   29cb0:	40001400 	.word	0x40001400
   29cb4:	200059fc 	.word	0x200059fc
   29cb8:	00025769 	.word	0x00025769
   29cbc:	00025495 	.word	0x00025495

00029cc0 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   29cc0:	b590      	push	{r4, r7, lr}
   29cc2:	b085      	sub	sp, #20
   29cc4:	af00      	add	r7, sp, #0
   29cc6:	0002      	movs	r2, r0
   29cc8:	1dfb      	adds	r3, r7, #7
   29cca:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   29ccc:	4b1a      	ldr	r3, [pc, #104]	; (29d38 <disk_initialize+0x78>)
   29cce:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   29cd0:	1dfb      	adds	r3, r7, #7
   29cd2:	781b      	ldrb	r3, [r3, #0]
   29cd4:	2b01      	cmp	r3, #1
   29cd6:	d901      	bls.n	29cdc <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   29cd8:	2301      	movs	r3, #1
   29cda:	e029      	b.n	29d30 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   29cdc:	2300      	movs	r3, #0
   29cde:	60fb      	str	r3, [r7, #12]
   29ce0:	e010      	b.n	29d04 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   29ce2:	230b      	movs	r3, #11
   29ce4:	18fc      	adds	r4, r7, r3
   29ce6:	1dfb      	adds	r3, r7, #7
   29ce8:	781b      	ldrb	r3, [r3, #0]
   29cea:	0018      	movs	r0, r3
   29cec:	4b13      	ldr	r3, [pc, #76]	; (29d3c <disk_initialize+0x7c>)
   29cee:	4798      	blx	r3
   29cf0:	0003      	movs	r3, r0
   29cf2:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   29cf4:	230b      	movs	r3, #11
   29cf6:	18fb      	adds	r3, r7, r3
   29cf8:	781b      	ldrb	r3, [r3, #0]
   29cfa:	2b03      	cmp	r3, #3
   29cfc:	d106      	bne.n	29d0c <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   29cfe:	68fb      	ldr	r3, [r7, #12]
   29d00:	3301      	adds	r3, #1
   29d02:	60fb      	str	r3, [r7, #12]
   29d04:	68fb      	ldr	r3, [r7, #12]
   29d06:	2b01      	cmp	r3, #1
   29d08:	ddeb      	ble.n	29ce2 <disk_initialize+0x22>
   29d0a:	e000      	b.n	29d0e <disk_initialize+0x4e>
			break;
   29d0c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   29d0e:	230b      	movs	r3, #11
   29d10:	18fb      	adds	r3, r7, r3
   29d12:	781b      	ldrb	r3, [r3, #0]
   29d14:	2b00      	cmp	r3, #0
   29d16:	d001      	beq.n	29d1c <disk_initialize+0x5c>
		return STA_NOINIT;
   29d18:	2301      	movs	r3, #1
   29d1a:	e009      	b.n	29d30 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   29d1c:	1dfb      	adds	r3, r7, #7
   29d1e:	781b      	ldrb	r3, [r3, #0]
   29d20:	0018      	movs	r0, r3
   29d22:	4b07      	ldr	r3, [pc, #28]	; (29d40 <disk_initialize+0x80>)
   29d24:	4798      	blx	r3
   29d26:	1e03      	subs	r3, r0, #0
   29d28:	d001      	beq.n	29d2e <disk_initialize+0x6e>
		return STA_PROTECT;
   29d2a:	2304      	movs	r3, #4
   29d2c:	e000      	b.n	29d30 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   29d2e:	2300      	movs	r3, #0
}
   29d30:	0018      	movs	r0, r3
   29d32:	46bd      	mov	sp, r7
   29d34:	b005      	add	sp, #20
   29d36:	bd90      	pop	{r4, r7, pc}
   29d38:	00029c2d 	.word	0x00029c2d
   29d3c:	00024991 	.word	0x00024991
   29d40:	00024a49 	.word	0x00024a49

00029d44 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   29d44:	b580      	push	{r7, lr}
   29d46:	b082      	sub	sp, #8
   29d48:	af00      	add	r7, sp, #0
   29d4a:	0002      	movs	r2, r0
   29d4c:	1dfb      	adds	r3, r7, #7
   29d4e:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   29d50:	1dfb      	adds	r3, r7, #7
   29d52:	781b      	ldrb	r3, [r3, #0]
   29d54:	0018      	movs	r0, r3
   29d56:	4b08      	ldr	r3, [pc, #32]	; (29d78 <disk_status+0x34>)
   29d58:	4798      	blx	r3
   29d5a:	1e03      	subs	r3, r0, #0
   29d5c:	d002      	beq.n	29d64 <disk_status+0x20>
   29d5e:	2b02      	cmp	r3, #2
   29d60:	d002      	beq.n	29d68 <disk_status+0x24>
   29d62:	e003      	b.n	29d6c <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   29d64:	2300      	movs	r3, #0
   29d66:	e002      	b.n	29d6e <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   29d68:	2303      	movs	r3, #3
   29d6a:	e000      	b.n	29d6e <disk_status+0x2a>
	default:
		return STA_NOINIT;
   29d6c:	2301      	movs	r3, #1
	}
}
   29d6e:	0018      	movs	r0, r3
   29d70:	46bd      	mov	sp, r7
   29d72:	b002      	add	sp, #8
   29d74:	bd80      	pop	{r7, pc}
   29d76:	46c0      	nop			; (mov r8, r8)
   29d78:	00024991 	.word	0x00024991

00029d7c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   29d7c:	b590      	push	{r4, r7, lr}
   29d7e:	b089      	sub	sp, #36	; 0x24
   29d80:	af00      	add	r7, sp, #0
   29d82:	60b9      	str	r1, [r7, #8]
   29d84:	607a      	str	r2, [r7, #4]
   29d86:	0019      	movs	r1, r3
   29d88:	230f      	movs	r3, #15
   29d8a:	18fb      	adds	r3, r7, r3
   29d8c:	1c02      	adds	r2, r0, #0
   29d8e:	701a      	strb	r2, [r3, #0]
   29d90:	230e      	movs	r3, #14
   29d92:	18fb      	adds	r3, r7, r3
   29d94:	1c0a      	adds	r2, r1, #0
   29d96:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   29d98:	231b      	movs	r3, #27
   29d9a:	18fc      	adds	r4, r7, r3
   29d9c:	230f      	movs	r3, #15
   29d9e:	18fb      	adds	r3, r7, r3
   29da0:	781b      	ldrb	r3, [r3, #0]
   29da2:	0018      	movs	r0, r3
   29da4:	4b28      	ldr	r3, [pc, #160]	; (29e48 <disk_read+0xcc>)
   29da6:	4798      	blx	r3
   29da8:	0003      	movs	r3, r0
   29daa:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   29dac:	231b      	movs	r3, #27
   29dae:	18fb      	adds	r3, r7, r3
   29db0:	781b      	ldrb	r3, [r3, #0]
   29db2:	2b00      	cmp	r3, #0
   29db4:	d101      	bne.n	29dba <disk_read+0x3e>
		return RES_ERROR;
   29db6:	2301      	movs	r3, #1
   29db8:	e042      	b.n	29e40 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   29dba:	2314      	movs	r3, #20
   29dbc:	18fa      	adds	r2, r7, r3
   29dbe:	230f      	movs	r3, #15
   29dc0:	18fb      	adds	r3, r7, r3
   29dc2:	781b      	ldrb	r3, [r3, #0]
   29dc4:	0011      	movs	r1, r2
   29dc6:	0018      	movs	r0, r3
   29dc8:	4b20      	ldr	r3, [pc, #128]	; (29e4c <disk_read+0xd0>)
   29dca:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   29dcc:	230e      	movs	r3, #14
   29dce:	18fb      	adds	r3, r7, r3
   29dd0:	781b      	ldrb	r3, [r3, #0]
   29dd2:	221b      	movs	r2, #27
   29dd4:	18ba      	adds	r2, r7, r2
   29dd6:	7812      	ldrb	r2, [r2, #0]
   29dd8:	4353      	muls	r3, r2
   29dda:	001a      	movs	r2, r3
   29ddc:	687b      	ldr	r3, [r7, #4]
   29dde:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   29de0:	697b      	ldr	r3, [r7, #20]
   29de2:	3301      	adds	r3, #1
   29de4:	211b      	movs	r1, #27
   29de6:	1879      	adds	r1, r7, r1
   29de8:	7809      	ldrb	r1, [r1, #0]
   29dea:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   29dec:	429a      	cmp	r2, r3
   29dee:	d901      	bls.n	29df4 <disk_read+0x78>
		return RES_PARERR;
   29df0:	2304      	movs	r3, #4
   29df2:	e025      	b.n	29e40 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   29df4:	2300      	movs	r3, #0
   29df6:	61fb      	str	r3, [r7, #28]
   29df8:	e01b      	b.n	29e32 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   29dfa:	231b      	movs	r3, #27
   29dfc:	18fb      	adds	r3, r7, r3
   29dfe:	781b      	ldrb	r3, [r3, #0]
   29e00:	69fa      	ldr	r2, [r7, #28]
   29e02:	435a      	muls	r2, r3
   29e04:	687b      	ldr	r3, [r7, #4]
   29e06:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   29e08:	231b      	movs	r3, #27
   29e0a:	18fb      	adds	r3, r7, r3
   29e0c:	781b      	ldrb	r3, [r3, #0]
   29e0e:	69fa      	ldr	r2, [r7, #28]
   29e10:	4353      	muls	r3, r2
   29e12:	025b      	lsls	r3, r3, #9
   29e14:	68ba      	ldr	r2, [r7, #8]
   29e16:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   29e18:	230f      	movs	r3, #15
   29e1a:	18fb      	adds	r3, r7, r3
   29e1c:	781b      	ldrb	r3, [r3, #0]
   29e1e:	0018      	movs	r0, r3
   29e20:	4b0b      	ldr	r3, [pc, #44]	; (29e50 <disk_read+0xd4>)
   29e22:	4798      	blx	r3
   29e24:	1e03      	subs	r3, r0, #0
   29e26:	d001      	beq.n	29e2c <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   29e28:	2301      	movs	r3, #1
   29e2a:	e009      	b.n	29e40 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   29e2c:	69fb      	ldr	r3, [r7, #28]
   29e2e:	3301      	adds	r3, #1
   29e30:	61fb      	str	r3, [r7, #28]
   29e32:	230e      	movs	r3, #14
   29e34:	18fb      	adds	r3, r7, r3
   29e36:	781a      	ldrb	r2, [r3, #0]
   29e38:	69fb      	ldr	r3, [r7, #28]
   29e3a:	429a      	cmp	r2, r3
   29e3c:	d8dd      	bhi.n	29dfa <disk_read+0x7e>
		}
	}

	return RES_OK;
   29e3e:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   29e40:	0018      	movs	r0, r3
   29e42:	46bd      	mov	sp, r7
   29e44:	b009      	add	sp, #36	; 0x24
   29e46:	bd90      	pop	{r4, r7, pc}
   29e48:	00024a1d 	.word	0x00024a1d
   29e4c:	000249d1 	.word	0x000249d1
   29e50:	00024a91 	.word	0x00024a91

00029e54 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   29e54:	b590      	push	{r4, r7, lr}
   29e56:	b089      	sub	sp, #36	; 0x24
   29e58:	af00      	add	r7, sp, #0
   29e5a:	60b9      	str	r1, [r7, #8]
   29e5c:	607a      	str	r2, [r7, #4]
   29e5e:	0019      	movs	r1, r3
   29e60:	230f      	movs	r3, #15
   29e62:	18fb      	adds	r3, r7, r3
   29e64:	1c02      	adds	r2, r0, #0
   29e66:	701a      	strb	r2, [r3, #0]
   29e68:	230e      	movs	r3, #14
   29e6a:	18fb      	adds	r3, r7, r3
   29e6c:	1c0a      	adds	r2, r1, #0
   29e6e:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   29e70:	231b      	movs	r3, #27
   29e72:	18fc      	adds	r4, r7, r3
   29e74:	230f      	movs	r3, #15
   29e76:	18fb      	adds	r3, r7, r3
   29e78:	781b      	ldrb	r3, [r3, #0]
   29e7a:	0018      	movs	r0, r3
   29e7c:	4b28      	ldr	r3, [pc, #160]	; (29f20 <disk_write+0xcc>)
   29e7e:	4798      	blx	r3
   29e80:	0003      	movs	r3, r0
   29e82:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   29e84:	231b      	movs	r3, #27
   29e86:	18fb      	adds	r3, r7, r3
   29e88:	781b      	ldrb	r3, [r3, #0]
   29e8a:	2b00      	cmp	r3, #0
   29e8c:	d101      	bne.n	29e92 <disk_write+0x3e>
		return RES_ERROR;
   29e8e:	2301      	movs	r3, #1
   29e90:	e042      	b.n	29f18 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   29e92:	2314      	movs	r3, #20
   29e94:	18fa      	adds	r2, r7, r3
   29e96:	230f      	movs	r3, #15
   29e98:	18fb      	adds	r3, r7, r3
   29e9a:	781b      	ldrb	r3, [r3, #0]
   29e9c:	0011      	movs	r1, r2
   29e9e:	0018      	movs	r0, r3
   29ea0:	4b20      	ldr	r3, [pc, #128]	; (29f24 <disk_write+0xd0>)
   29ea2:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   29ea4:	230e      	movs	r3, #14
   29ea6:	18fb      	adds	r3, r7, r3
   29ea8:	781b      	ldrb	r3, [r3, #0]
   29eaa:	221b      	movs	r2, #27
   29eac:	18ba      	adds	r2, r7, r2
   29eae:	7812      	ldrb	r2, [r2, #0]
   29eb0:	4353      	muls	r3, r2
   29eb2:	001a      	movs	r2, r3
   29eb4:	687b      	ldr	r3, [r7, #4]
   29eb6:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   29eb8:	697b      	ldr	r3, [r7, #20]
   29eba:	3301      	adds	r3, #1
   29ebc:	211b      	movs	r1, #27
   29ebe:	1879      	adds	r1, r7, r1
   29ec0:	7809      	ldrb	r1, [r1, #0]
   29ec2:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   29ec4:	429a      	cmp	r2, r3
   29ec6:	d901      	bls.n	29ecc <disk_write+0x78>
		return RES_PARERR;
   29ec8:	2304      	movs	r3, #4
   29eca:	e025      	b.n	29f18 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   29ecc:	2300      	movs	r3, #0
   29ece:	61fb      	str	r3, [r7, #28]
   29ed0:	e01b      	b.n	29f0a <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   29ed2:	231b      	movs	r3, #27
   29ed4:	18fb      	adds	r3, r7, r3
   29ed6:	781b      	ldrb	r3, [r3, #0]
   29ed8:	69fa      	ldr	r2, [r7, #28]
   29eda:	435a      	muls	r2, r3
   29edc:	687b      	ldr	r3, [r7, #4]
   29ede:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   29ee0:	231b      	movs	r3, #27
   29ee2:	18fb      	adds	r3, r7, r3
   29ee4:	781b      	ldrb	r3, [r3, #0]
   29ee6:	69fa      	ldr	r2, [r7, #28]
   29ee8:	4353      	muls	r3, r2
   29eea:	025b      	lsls	r3, r3, #9
   29eec:	68ba      	ldr	r2, [r7, #8]
   29eee:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   29ef0:	230f      	movs	r3, #15
   29ef2:	18fb      	adds	r3, r7, r3
   29ef4:	781b      	ldrb	r3, [r3, #0]
   29ef6:	0018      	movs	r0, r3
   29ef8:	4b0b      	ldr	r3, [pc, #44]	; (29f28 <disk_write+0xd4>)
   29efa:	4798      	blx	r3
   29efc:	1e03      	subs	r3, r0, #0
   29efe:	d001      	beq.n	29f04 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   29f00:	2301      	movs	r3, #1
   29f02:	e009      	b.n	29f18 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   29f04:	69fb      	ldr	r3, [r7, #28]
   29f06:	3301      	adds	r3, #1
   29f08:	61fb      	str	r3, [r7, #28]
   29f0a:	230e      	movs	r3, #14
   29f0c:	18fb      	adds	r3, r7, r3
   29f0e:	781a      	ldrb	r2, [r3, #0]
   29f10:	69fb      	ldr	r3, [r7, #28]
   29f12:	429a      	cmp	r2, r3
   29f14:	d8dd      	bhi.n	29ed2 <disk_write+0x7e>
		}
	}

	return RES_OK;
   29f16:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   29f18:	0018      	movs	r0, r3
   29f1a:	46bd      	mov	sp, r7
   29f1c:	b009      	add	sp, #36	; 0x24
   29f1e:	bd90      	pop	{r4, r7, pc}
   29f20:	00024a1d 	.word	0x00024a1d
   29f24:	000249d1 	.word	0x000249d1
   29f28:	00024ae5 	.word	0x00024ae5

00029f2c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   29f2c:	b590      	push	{r4, r7, lr}
   29f2e:	b085      	sub	sp, #20
   29f30:	af00      	add	r7, sp, #0
   29f32:	603a      	str	r2, [r7, #0]
   29f34:	1dfb      	adds	r3, r7, #7
   29f36:	1c02      	adds	r2, r0, #0
   29f38:	701a      	strb	r2, [r3, #0]
   29f3a:	1dbb      	adds	r3, r7, #6
   29f3c:	1c0a      	adds	r2, r1, #0
   29f3e:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   29f40:	230f      	movs	r3, #15
   29f42:	18fb      	adds	r3, r7, r3
   29f44:	2204      	movs	r2, #4
   29f46:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   29f48:	1dbb      	adds	r3, r7, #6
   29f4a:	781b      	ldrb	r3, [r3, #0]
   29f4c:	2b01      	cmp	r3, #1
   29f4e:	d00f      	beq.n	29f70 <disk_ioctl+0x44>
   29f50:	dc02      	bgt.n	29f58 <disk_ioctl+0x2c>
   29f52:	2b00      	cmp	r3, #0
   29f54:	d044      	beq.n	29fe0 <disk_ioctl+0xb4>
   29f56:	e054      	b.n	2a002 <disk_ioctl+0xd6>
   29f58:	2b02      	cmp	r3, #2
   29f5a:	d01a      	beq.n	29f92 <disk_ioctl+0x66>
   29f5c:	2b03      	cmp	r3, #3
   29f5e:	d150      	bne.n	2a002 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   29f60:	683b      	ldr	r3, [r7, #0]
   29f62:	2201      	movs	r2, #1
   29f64:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   29f66:	230f      	movs	r3, #15
   29f68:	18fb      	adds	r3, r7, r3
   29f6a:	2200      	movs	r2, #0
   29f6c:	701a      	strb	r2, [r3, #0]
		break;
   29f6e:	e04c      	b.n	2a00a <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   29f70:	2308      	movs	r3, #8
   29f72:	18fa      	adds	r2, r7, r3
   29f74:	1dfb      	adds	r3, r7, #7
   29f76:	781b      	ldrb	r3, [r3, #0]
   29f78:	0011      	movs	r1, r2
   29f7a:	0018      	movs	r0, r3
   29f7c:	4b26      	ldr	r3, [pc, #152]	; (2a018 <disk_ioctl+0xec>)
   29f7e:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   29f80:	68bb      	ldr	r3, [r7, #8]
   29f82:	1c5a      	adds	r2, r3, #1
   29f84:	683b      	ldr	r3, [r7, #0]
   29f86:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   29f88:	230f      	movs	r3, #15
   29f8a:	18fb      	adds	r3, r7, r3
   29f8c:	2200      	movs	r2, #0
   29f8e:	701a      	strb	r2, [r3, #0]
	}
	break;
   29f90:	e03b      	b.n	2a00a <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   29f92:	230e      	movs	r3, #14
   29f94:	18fc      	adds	r4, r7, r3
   29f96:	1dfb      	adds	r3, r7, #7
   29f98:	781b      	ldrb	r3, [r3, #0]
   29f9a:	0018      	movs	r0, r3
   29f9c:	4b1f      	ldr	r3, [pc, #124]	; (2a01c <disk_ioctl+0xf0>)
   29f9e:	4798      	blx	r3
   29fa0:	0003      	movs	r3, r0
   29fa2:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   29fa4:	230e      	movs	r3, #14
   29fa6:	18fb      	adds	r3, r7, r3
   29fa8:	781b      	ldrb	r3, [r3, #0]
   29faa:	2b01      	cmp	r3, #1
   29fac:	d010      	beq.n	29fd0 <disk_ioctl+0xa4>
   29fae:	230e      	movs	r3, #14
   29fb0:	18fb      	adds	r3, r7, r3
   29fb2:	781b      	ldrb	r3, [r3, #0]
   29fb4:	2b02      	cmp	r3, #2
   29fb6:	d00b      	beq.n	29fd0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   29fb8:	230e      	movs	r3, #14
   29fba:	18fb      	adds	r3, r7, r3
   29fbc:	781b      	ldrb	r3, [r3, #0]
   29fbe:	2b04      	cmp	r3, #4
   29fc0:	d006      	beq.n	29fd0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   29fc2:	230e      	movs	r3, #14
   29fc4:	18fb      	adds	r3, r7, r3
   29fc6:	781b      	ldrb	r3, [r3, #0]
   29fc8:	2b08      	cmp	r3, #8
   29fca:	d001      	beq.n	29fd0 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   29fcc:	2301      	movs	r3, #1
   29fce:	e01f      	b.n	2a010 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   29fd0:	683b      	ldr	r3, [r7, #0]
   29fd2:	2200      	movs	r2, #0
   29fd4:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   29fd6:	230f      	movs	r3, #15
   29fd8:	18fb      	adds	r3, r7, r3
   29fda:	2200      	movs	r2, #0
   29fdc:	701a      	strb	r2, [r3, #0]
	}
	break;
   29fde:	e014      	b.n	2a00a <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   29fe0:	1dfb      	adds	r3, r7, #7
   29fe2:	781b      	ldrb	r3, [r3, #0]
   29fe4:	0018      	movs	r0, r3
   29fe6:	4b0e      	ldr	r3, [pc, #56]	; (2a020 <disk_ioctl+0xf4>)
   29fe8:	4798      	blx	r3
   29fea:	1e03      	subs	r3, r0, #0
   29fec:	d104      	bne.n	29ff8 <disk_ioctl+0xcc>
			res = RES_OK;
   29fee:	230f      	movs	r3, #15
   29ff0:	18fb      	adds	r3, r7, r3
   29ff2:	2200      	movs	r2, #0
   29ff4:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   29ff6:	e008      	b.n	2a00a <disk_ioctl+0xde>
			res = RES_NOTRDY;
   29ff8:	230f      	movs	r3, #15
   29ffa:	18fb      	adds	r3, r7, r3
   29ffc:	2203      	movs	r2, #3
   29ffe:	701a      	strb	r2, [r3, #0]
		break;
   2a000:	e003      	b.n	2a00a <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2a002:	230f      	movs	r3, #15
   2a004:	18fb      	adds	r3, r7, r3
   2a006:	2204      	movs	r2, #4
   2a008:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2a00a:	230f      	movs	r3, #15
   2a00c:	18fb      	adds	r3, r7, r3
   2a00e:	781b      	ldrb	r3, [r3, #0]
}
   2a010:	0018      	movs	r0, r3
   2a012:	46bd      	mov	sp, r7
   2a014:	b005      	add	sp, #20
   2a016:	bd90      	pop	{r4, r7, pc}
   2a018:	000249d1 	.word	0x000249d1
   2a01c:	00024a1d 	.word	0x00024a1d
   2a020:	00024991 	.word	0x00024991

0002a024 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2a024:	b580      	push	{r7, lr}
   2a026:	b084      	sub	sp, #16
   2a028:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2a02a:	1d3a      	adds	r2, r7, #4
   2a02c:	4b12      	ldr	r3, [pc, #72]	; (2a078 <get_fattime+0x54>)
   2a02e:	0011      	movs	r1, r2
   2a030:	0018      	movs	r0, r3
   2a032:	4b12      	ldr	r3, [pc, #72]	; (2a07c <get_fattime+0x58>)
   2a034:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2a036:	1d3b      	adds	r3, r7, #4
   2a038:	88db      	ldrh	r3, [r3, #6]
   2a03a:	4a11      	ldr	r2, [pc, #68]	; (2a080 <get_fattime+0x5c>)
   2a03c:	4694      	mov	ip, r2
   2a03e:	4463      	add	r3, ip
   2a040:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2a042:	1d3b      	adds	r3, r7, #4
   2a044:	795b      	ldrb	r3, [r3, #5]
   2a046:	055b      	lsls	r3, r3, #21
   2a048:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2a04a:	1d3b      	adds	r3, r7, #4
   2a04c:	791b      	ldrb	r3, [r3, #4]
   2a04e:	041b      	lsls	r3, r3, #16
   2a050:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2a052:	1d3b      	adds	r3, r7, #4
   2a054:	789b      	ldrb	r3, [r3, #2]
   2a056:	02db      	lsls	r3, r3, #11
   2a058:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2a05a:	1d3b      	adds	r3, r7, #4
   2a05c:	785b      	ldrb	r3, [r3, #1]
   2a05e:	015b      	lsls	r3, r3, #5
   2a060:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2a062:	1d3a      	adds	r2, r7, #4
   2a064:	7812      	ldrb	r2, [r2, #0]
   2a066:	0852      	lsrs	r2, r2, #1
   2a068:	b2d2      	uxtb	r2, r2
   2a06a:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2a06c:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2a06e:	68fb      	ldr	r3, [r7, #12]
}
   2a070:	0018      	movs	r0, r3
   2a072:	46bd      	mov	sp, r7
   2a074:	b004      	add	sp, #16
   2a076:	bd80      	pop	{r7, pc}
   2a078:	200059fc 	.word	0x200059fc
   2a07c:	000257fd 	.word	0x000257fd
   2a080:	fffff844 	.word	0xfffff844

0002a084 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2a084:	b580      	push	{r7, lr}
   2a086:	b086      	sub	sp, #24
   2a088:	af00      	add	r7, sp, #0
   2a08a:	60f8      	str	r0, [r7, #12]
   2a08c:	60b9      	str	r1, [r7, #8]
   2a08e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2a090:	68fb      	ldr	r3, [r7, #12]
   2a092:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2a094:	68bb      	ldr	r3, [r7, #8]
   2a096:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2a098:	e007      	b.n	2a0aa <mem_cpy+0x26>
		*d++ = *s++;
   2a09a:	697b      	ldr	r3, [r7, #20]
   2a09c:	1c5a      	adds	r2, r3, #1
   2a09e:	617a      	str	r2, [r7, #20]
   2a0a0:	693a      	ldr	r2, [r7, #16]
   2a0a2:	1c51      	adds	r1, r2, #1
   2a0a4:	6139      	str	r1, [r7, #16]
   2a0a6:	7812      	ldrb	r2, [r2, #0]
   2a0a8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2a0aa:	687b      	ldr	r3, [r7, #4]
   2a0ac:	1e5a      	subs	r2, r3, #1
   2a0ae:	607a      	str	r2, [r7, #4]
   2a0b0:	2b00      	cmp	r3, #0
   2a0b2:	d1f2      	bne.n	2a09a <mem_cpy+0x16>
}
   2a0b4:	46c0      	nop			; (mov r8, r8)
   2a0b6:	46bd      	mov	sp, r7
   2a0b8:	b006      	add	sp, #24
   2a0ba:	bd80      	pop	{r7, pc}

0002a0bc <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2a0bc:	b580      	push	{r7, lr}
   2a0be:	b086      	sub	sp, #24
   2a0c0:	af00      	add	r7, sp, #0
   2a0c2:	60f8      	str	r0, [r7, #12]
   2a0c4:	60b9      	str	r1, [r7, #8]
   2a0c6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2a0c8:	68fb      	ldr	r3, [r7, #12]
   2a0ca:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2a0cc:	e005      	b.n	2a0da <mem_set+0x1e>
		*d++ = (BYTE)val;
   2a0ce:	697b      	ldr	r3, [r7, #20]
   2a0d0:	1c5a      	adds	r2, r3, #1
   2a0d2:	617a      	str	r2, [r7, #20]
   2a0d4:	68ba      	ldr	r2, [r7, #8]
   2a0d6:	b2d2      	uxtb	r2, r2
   2a0d8:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2a0da:	687b      	ldr	r3, [r7, #4]
   2a0dc:	1e5a      	subs	r2, r3, #1
   2a0de:	607a      	str	r2, [r7, #4]
   2a0e0:	2b00      	cmp	r3, #0
   2a0e2:	d1f4      	bne.n	2a0ce <mem_set+0x12>
}
   2a0e4:	46c0      	nop			; (mov r8, r8)
   2a0e6:	46bd      	mov	sp, r7
   2a0e8:	b006      	add	sp, #24
   2a0ea:	bd80      	pop	{r7, pc}

0002a0ec <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2a0ec:	b580      	push	{r7, lr}
   2a0ee:	b088      	sub	sp, #32
   2a0f0:	af00      	add	r7, sp, #0
   2a0f2:	60f8      	str	r0, [r7, #12]
   2a0f4:	60b9      	str	r1, [r7, #8]
   2a0f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2a0f8:	68fb      	ldr	r3, [r7, #12]
   2a0fa:	61fb      	str	r3, [r7, #28]
   2a0fc:	68bb      	ldr	r3, [r7, #8]
   2a0fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2a100:	2300      	movs	r3, #0
   2a102:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2a104:	46c0      	nop			; (mov r8, r8)
   2a106:	687b      	ldr	r3, [r7, #4]
   2a108:	1e5a      	subs	r2, r3, #1
   2a10a:	607a      	str	r2, [r7, #4]
   2a10c:	2b00      	cmp	r3, #0
   2a10e:	d00d      	beq.n	2a12c <mem_cmp+0x40>
   2a110:	69fb      	ldr	r3, [r7, #28]
   2a112:	1c5a      	adds	r2, r3, #1
   2a114:	61fa      	str	r2, [r7, #28]
   2a116:	781b      	ldrb	r3, [r3, #0]
   2a118:	0019      	movs	r1, r3
   2a11a:	69bb      	ldr	r3, [r7, #24]
   2a11c:	1c5a      	adds	r2, r3, #1
   2a11e:	61ba      	str	r2, [r7, #24]
   2a120:	781b      	ldrb	r3, [r3, #0]
   2a122:	1acb      	subs	r3, r1, r3
   2a124:	617b      	str	r3, [r7, #20]
   2a126:	697b      	ldr	r3, [r7, #20]
   2a128:	2b00      	cmp	r3, #0
   2a12a:	d0ec      	beq.n	2a106 <mem_cmp+0x1a>
	return r;
   2a12c:	697b      	ldr	r3, [r7, #20]
}
   2a12e:	0018      	movs	r0, r3
   2a130:	46bd      	mov	sp, r7
   2a132:	b008      	add	sp, #32
   2a134:	bd80      	pop	{r7, pc}

0002a136 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2a136:	b580      	push	{r7, lr}
   2a138:	b082      	sub	sp, #8
   2a13a:	af00      	add	r7, sp, #0
   2a13c:	6078      	str	r0, [r7, #4]
   2a13e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2a140:	e002      	b.n	2a148 <chk_chr+0x12>
   2a142:	687b      	ldr	r3, [r7, #4]
   2a144:	3301      	adds	r3, #1
   2a146:	607b      	str	r3, [r7, #4]
   2a148:	687b      	ldr	r3, [r7, #4]
   2a14a:	781b      	ldrb	r3, [r3, #0]
   2a14c:	2b00      	cmp	r3, #0
   2a14e:	d005      	beq.n	2a15c <chk_chr+0x26>
   2a150:	687b      	ldr	r3, [r7, #4]
   2a152:	781b      	ldrb	r3, [r3, #0]
   2a154:	001a      	movs	r2, r3
   2a156:	683b      	ldr	r3, [r7, #0]
   2a158:	429a      	cmp	r2, r3
   2a15a:	d1f2      	bne.n	2a142 <chk_chr+0xc>
	return *str;
   2a15c:	687b      	ldr	r3, [r7, #4]
   2a15e:	781b      	ldrb	r3, [r3, #0]
}
   2a160:	0018      	movs	r0, r3
   2a162:	46bd      	mov	sp, r7
   2a164:	b002      	add	sp, #8
   2a166:	bd80      	pop	{r7, pc}

0002a168 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2a168:	b590      	push	{r4, r7, lr}
   2a16a:	b085      	sub	sp, #20
   2a16c:	af00      	add	r7, sp, #0
   2a16e:	6078      	str	r0, [r7, #4]
   2a170:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2a172:	687b      	ldr	r3, [r7, #4]
   2a174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2a176:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2a178:	68fa      	ldr	r2, [r7, #12]
   2a17a:	683b      	ldr	r3, [r7, #0]
   2a17c:	429a      	cmp	r2, r3
   2a17e:	d04e      	beq.n	2a21e <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2a180:	687b      	ldr	r3, [r7, #4]
   2a182:	791b      	ldrb	r3, [r3, #4]
   2a184:	2b00      	cmp	r3, #0
   2a186:	d037      	beq.n	2a1f8 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2a188:	687b      	ldr	r3, [r7, #4]
   2a18a:	7858      	ldrb	r0, [r3, #1]
   2a18c:	687b      	ldr	r3, [r7, #4]
   2a18e:	3330      	adds	r3, #48	; 0x30
   2a190:	0019      	movs	r1, r3
   2a192:	68fa      	ldr	r2, [r7, #12]
   2a194:	2301      	movs	r3, #1
   2a196:	4c24      	ldr	r4, [pc, #144]	; (2a228 <move_window+0xc0>)
   2a198:	47a0      	blx	r4
   2a19a:	1e03      	subs	r3, r0, #0
   2a19c:	d001      	beq.n	2a1a2 <move_window+0x3a>
				return FR_DISK_ERR;
   2a19e:	2301      	movs	r3, #1
   2a1a0:	e03e      	b.n	2a220 <move_window+0xb8>
			fs->wflag = 0;
   2a1a2:	687b      	ldr	r3, [r7, #4]
   2a1a4:	2200      	movs	r2, #0
   2a1a6:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2a1a8:	687b      	ldr	r3, [r7, #4]
   2a1aa:	6a1a      	ldr	r2, [r3, #32]
   2a1ac:	687b      	ldr	r3, [r7, #4]
   2a1ae:	69db      	ldr	r3, [r3, #28]
   2a1b0:	18d2      	adds	r2, r2, r3
   2a1b2:	68fb      	ldr	r3, [r7, #12]
   2a1b4:	429a      	cmp	r2, r3
   2a1b6:	d91f      	bls.n	2a1f8 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2a1b8:	230b      	movs	r3, #11
   2a1ba:	18fb      	adds	r3, r7, r3
   2a1bc:	687a      	ldr	r2, [r7, #4]
   2a1be:	78d2      	ldrb	r2, [r2, #3]
   2a1c0:	701a      	strb	r2, [r3, #0]
   2a1c2:	e014      	b.n	2a1ee <move_window+0x86>
					wsect += fs->fsize;
   2a1c4:	687b      	ldr	r3, [r7, #4]
   2a1c6:	69db      	ldr	r3, [r3, #28]
   2a1c8:	68fa      	ldr	r2, [r7, #12]
   2a1ca:	18d3      	adds	r3, r2, r3
   2a1cc:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2a1ce:	687b      	ldr	r3, [r7, #4]
   2a1d0:	7858      	ldrb	r0, [r3, #1]
   2a1d2:	687b      	ldr	r3, [r7, #4]
   2a1d4:	3330      	adds	r3, #48	; 0x30
   2a1d6:	0019      	movs	r1, r3
   2a1d8:	68fa      	ldr	r2, [r7, #12]
   2a1da:	2301      	movs	r3, #1
   2a1dc:	4c12      	ldr	r4, [pc, #72]	; (2a228 <move_window+0xc0>)
   2a1de:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2a1e0:	230b      	movs	r3, #11
   2a1e2:	18fb      	adds	r3, r7, r3
   2a1e4:	781a      	ldrb	r2, [r3, #0]
   2a1e6:	230b      	movs	r3, #11
   2a1e8:	18fb      	adds	r3, r7, r3
   2a1ea:	3a01      	subs	r2, #1
   2a1ec:	701a      	strb	r2, [r3, #0]
   2a1ee:	230b      	movs	r3, #11
   2a1f0:	18fb      	adds	r3, r7, r3
   2a1f2:	781b      	ldrb	r3, [r3, #0]
   2a1f4:	2b01      	cmp	r3, #1
   2a1f6:	d8e5      	bhi.n	2a1c4 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2a1f8:	683b      	ldr	r3, [r7, #0]
   2a1fa:	2b00      	cmp	r3, #0
   2a1fc:	d00f      	beq.n	2a21e <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2a1fe:	687b      	ldr	r3, [r7, #4]
   2a200:	7858      	ldrb	r0, [r3, #1]
   2a202:	687b      	ldr	r3, [r7, #4]
   2a204:	3330      	adds	r3, #48	; 0x30
   2a206:	0019      	movs	r1, r3
   2a208:	683a      	ldr	r2, [r7, #0]
   2a20a:	2301      	movs	r3, #1
   2a20c:	4c07      	ldr	r4, [pc, #28]	; (2a22c <move_window+0xc4>)
   2a20e:	47a0      	blx	r4
   2a210:	1e03      	subs	r3, r0, #0
   2a212:	d001      	beq.n	2a218 <move_window+0xb0>
				return FR_DISK_ERR;
   2a214:	2301      	movs	r3, #1
   2a216:	e003      	b.n	2a220 <move_window+0xb8>
			fs->winsect = sector;
   2a218:	687b      	ldr	r3, [r7, #4]
   2a21a:	683a      	ldr	r2, [r7, #0]
   2a21c:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2a21e:	2300      	movs	r3, #0
}
   2a220:	0018      	movs	r0, r3
   2a222:	46bd      	mov	sp, r7
   2a224:	b005      	add	sp, #20
   2a226:	bd90      	pop	{r4, r7, pc}
   2a228:	00029e55 	.word	0x00029e55
   2a22c:	00029d7d 	.word	0x00029d7d

0002a230 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2a230:	b590      	push	{r4, r7, lr}
   2a232:	b085      	sub	sp, #20
   2a234:	af00      	add	r7, sp, #0
   2a236:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2a238:	230f      	movs	r3, #15
   2a23a:	18fc      	adds	r4, r7, r3
   2a23c:	687b      	ldr	r3, [r7, #4]
   2a23e:	2100      	movs	r1, #0
   2a240:	0018      	movs	r0, r3
   2a242:	4b52      	ldr	r3, [pc, #328]	; (2a38c <sync+0x15c>)
   2a244:	4798      	blx	r3
   2a246:	0003      	movs	r3, r0
   2a248:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2a24a:	230f      	movs	r3, #15
   2a24c:	18fb      	adds	r3, r7, r3
   2a24e:	781b      	ldrb	r3, [r3, #0]
   2a250:	2b00      	cmp	r3, #0
   2a252:	d000      	beq.n	2a256 <sync+0x26>
   2a254:	e093      	b.n	2a37e <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2a256:	687b      	ldr	r3, [r7, #4]
   2a258:	781b      	ldrb	r3, [r3, #0]
   2a25a:	2b03      	cmp	r3, #3
   2a25c:	d000      	beq.n	2a260 <sync+0x30>
   2a25e:	e081      	b.n	2a364 <sync+0x134>
   2a260:	687b      	ldr	r3, [r7, #4]
   2a262:	795b      	ldrb	r3, [r3, #5]
   2a264:	2b00      	cmp	r3, #0
   2a266:	d07d      	beq.n	2a364 <sync+0x134>
			fs->winsect = 0;
   2a268:	687b      	ldr	r3, [r7, #4]
   2a26a:	2200      	movs	r2, #0
   2a26c:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2a26e:	687b      	ldr	r3, [r7, #4]
   2a270:	3330      	adds	r3, #48	; 0x30
   2a272:	0018      	movs	r0, r3
   2a274:	2380      	movs	r3, #128	; 0x80
   2a276:	009b      	lsls	r3, r3, #2
   2a278:	001a      	movs	r2, r3
   2a27a:	2100      	movs	r1, #0
   2a27c:	4b44      	ldr	r3, [pc, #272]	; (2a390 <sync+0x160>)
   2a27e:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2a280:	687b      	ldr	r3, [r7, #4]
   2a282:	4a44      	ldr	r2, [pc, #272]	; (2a394 <sync+0x164>)
   2a284:	2155      	movs	r1, #85	; 0x55
   2a286:	5499      	strb	r1, [r3, r2]
   2a288:	687b      	ldr	r3, [r7, #4]
   2a28a:	4a43      	ldr	r2, [pc, #268]	; (2a398 <sync+0x168>)
   2a28c:	21aa      	movs	r1, #170	; 0xaa
   2a28e:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2a290:	687b      	ldr	r3, [r7, #4]
   2a292:	2230      	movs	r2, #48	; 0x30
   2a294:	2152      	movs	r1, #82	; 0x52
   2a296:	5499      	strb	r1, [r3, r2]
   2a298:	687b      	ldr	r3, [r7, #4]
   2a29a:	2231      	movs	r2, #49	; 0x31
   2a29c:	2152      	movs	r1, #82	; 0x52
   2a29e:	5499      	strb	r1, [r3, r2]
   2a2a0:	687b      	ldr	r3, [r7, #4]
   2a2a2:	2232      	movs	r2, #50	; 0x32
   2a2a4:	2161      	movs	r1, #97	; 0x61
   2a2a6:	5499      	strb	r1, [r3, r2]
   2a2a8:	687b      	ldr	r3, [r7, #4]
   2a2aa:	2233      	movs	r2, #51	; 0x33
   2a2ac:	2141      	movs	r1, #65	; 0x41
   2a2ae:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2a2b0:	687a      	ldr	r2, [r7, #4]
   2a2b2:	2385      	movs	r3, #133	; 0x85
   2a2b4:	009b      	lsls	r3, r3, #2
   2a2b6:	2172      	movs	r1, #114	; 0x72
   2a2b8:	54d1      	strb	r1, [r2, r3]
   2a2ba:	687b      	ldr	r3, [r7, #4]
   2a2bc:	4a37      	ldr	r2, [pc, #220]	; (2a39c <sync+0x16c>)
   2a2be:	2172      	movs	r1, #114	; 0x72
   2a2c0:	5499      	strb	r1, [r3, r2]
   2a2c2:	687b      	ldr	r3, [r7, #4]
   2a2c4:	4a36      	ldr	r2, [pc, #216]	; (2a3a0 <sync+0x170>)
   2a2c6:	2141      	movs	r1, #65	; 0x41
   2a2c8:	5499      	strb	r1, [r3, r2]
   2a2ca:	687b      	ldr	r3, [r7, #4]
   2a2cc:	4a35      	ldr	r2, [pc, #212]	; (2a3a4 <sync+0x174>)
   2a2ce:	2161      	movs	r1, #97	; 0x61
   2a2d0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2a2d2:	687b      	ldr	r3, [r7, #4]
   2a2d4:	691b      	ldr	r3, [r3, #16]
   2a2d6:	b2d9      	uxtb	r1, r3
   2a2d8:	687a      	ldr	r2, [r7, #4]
   2a2da:	2386      	movs	r3, #134	; 0x86
   2a2dc:	009b      	lsls	r3, r3, #2
   2a2de:	54d1      	strb	r1, [r2, r3]
   2a2e0:	687b      	ldr	r3, [r7, #4]
   2a2e2:	691b      	ldr	r3, [r3, #16]
   2a2e4:	b29b      	uxth	r3, r3
   2a2e6:	0a1b      	lsrs	r3, r3, #8
   2a2e8:	b29b      	uxth	r3, r3
   2a2ea:	b2d9      	uxtb	r1, r3
   2a2ec:	687b      	ldr	r3, [r7, #4]
   2a2ee:	4a2e      	ldr	r2, [pc, #184]	; (2a3a8 <sync+0x178>)
   2a2f0:	5499      	strb	r1, [r3, r2]
   2a2f2:	687b      	ldr	r3, [r7, #4]
   2a2f4:	691b      	ldr	r3, [r3, #16]
   2a2f6:	0c1b      	lsrs	r3, r3, #16
   2a2f8:	b2d9      	uxtb	r1, r3
   2a2fa:	687b      	ldr	r3, [r7, #4]
   2a2fc:	4a2b      	ldr	r2, [pc, #172]	; (2a3ac <sync+0x17c>)
   2a2fe:	5499      	strb	r1, [r3, r2]
   2a300:	687b      	ldr	r3, [r7, #4]
   2a302:	691b      	ldr	r3, [r3, #16]
   2a304:	0e1b      	lsrs	r3, r3, #24
   2a306:	b2d9      	uxtb	r1, r3
   2a308:	687b      	ldr	r3, [r7, #4]
   2a30a:	4a29      	ldr	r2, [pc, #164]	; (2a3b0 <sync+0x180>)
   2a30c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2a30e:	687b      	ldr	r3, [r7, #4]
   2a310:	68db      	ldr	r3, [r3, #12]
   2a312:	b2d9      	uxtb	r1, r3
   2a314:	687a      	ldr	r2, [r7, #4]
   2a316:	2387      	movs	r3, #135	; 0x87
   2a318:	009b      	lsls	r3, r3, #2
   2a31a:	54d1      	strb	r1, [r2, r3]
   2a31c:	687b      	ldr	r3, [r7, #4]
   2a31e:	68db      	ldr	r3, [r3, #12]
   2a320:	b29b      	uxth	r3, r3
   2a322:	0a1b      	lsrs	r3, r3, #8
   2a324:	b29b      	uxth	r3, r3
   2a326:	b2d9      	uxtb	r1, r3
   2a328:	687b      	ldr	r3, [r7, #4]
   2a32a:	4a22      	ldr	r2, [pc, #136]	; (2a3b4 <sync+0x184>)
   2a32c:	5499      	strb	r1, [r3, r2]
   2a32e:	687b      	ldr	r3, [r7, #4]
   2a330:	68db      	ldr	r3, [r3, #12]
   2a332:	0c1b      	lsrs	r3, r3, #16
   2a334:	b2d9      	uxtb	r1, r3
   2a336:	687b      	ldr	r3, [r7, #4]
   2a338:	4a1f      	ldr	r2, [pc, #124]	; (2a3b8 <sync+0x188>)
   2a33a:	5499      	strb	r1, [r3, r2]
   2a33c:	687b      	ldr	r3, [r7, #4]
   2a33e:	68db      	ldr	r3, [r3, #12]
   2a340:	0e1b      	lsrs	r3, r3, #24
   2a342:	b2d9      	uxtb	r1, r3
   2a344:	687b      	ldr	r3, [r7, #4]
   2a346:	4a1d      	ldr	r2, [pc, #116]	; (2a3bc <sync+0x18c>)
   2a348:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2a34a:	687b      	ldr	r3, [r7, #4]
   2a34c:	7858      	ldrb	r0, [r3, #1]
   2a34e:	687b      	ldr	r3, [r7, #4]
   2a350:	3330      	adds	r3, #48	; 0x30
   2a352:	0019      	movs	r1, r3
   2a354:	687b      	ldr	r3, [r7, #4]
   2a356:	695a      	ldr	r2, [r3, #20]
   2a358:	2301      	movs	r3, #1
   2a35a:	4c19      	ldr	r4, [pc, #100]	; (2a3c0 <sync+0x190>)
   2a35c:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2a35e:	687b      	ldr	r3, [r7, #4]
   2a360:	2200      	movs	r2, #0
   2a362:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2a364:	687b      	ldr	r3, [r7, #4]
   2a366:	785b      	ldrb	r3, [r3, #1]
   2a368:	2200      	movs	r2, #0
   2a36a:	2100      	movs	r1, #0
   2a36c:	0018      	movs	r0, r3
   2a36e:	4b15      	ldr	r3, [pc, #84]	; (2a3c4 <sync+0x194>)
   2a370:	4798      	blx	r3
   2a372:	1e03      	subs	r3, r0, #0
   2a374:	d003      	beq.n	2a37e <sync+0x14e>
			res = FR_DISK_ERR;
   2a376:	230f      	movs	r3, #15
   2a378:	18fb      	adds	r3, r7, r3
   2a37a:	2201      	movs	r2, #1
   2a37c:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2a37e:	230f      	movs	r3, #15
   2a380:	18fb      	adds	r3, r7, r3
   2a382:	781b      	ldrb	r3, [r3, #0]
}
   2a384:	0018      	movs	r0, r3
   2a386:	46bd      	mov	sp, r7
   2a388:	b005      	add	sp, #20
   2a38a:	bd90      	pop	{r4, r7, pc}
   2a38c:	0002a169 	.word	0x0002a169
   2a390:	0002a0bd 	.word	0x0002a0bd
   2a394:	0000022e 	.word	0x0000022e
   2a398:	0000022f 	.word	0x0000022f
   2a39c:	00000215 	.word	0x00000215
   2a3a0:	00000216 	.word	0x00000216
   2a3a4:	00000217 	.word	0x00000217
   2a3a8:	00000219 	.word	0x00000219
   2a3ac:	0000021a 	.word	0x0000021a
   2a3b0:	0000021b 	.word	0x0000021b
   2a3b4:	0000021d 	.word	0x0000021d
   2a3b8:	0000021e 	.word	0x0000021e
   2a3bc:	0000021f 	.word	0x0000021f
   2a3c0:	00029e55 	.word	0x00029e55
   2a3c4:	00029f2d 	.word	0x00029f2d

0002a3c8 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2a3c8:	b580      	push	{r7, lr}
   2a3ca:	b082      	sub	sp, #8
   2a3cc:	af00      	add	r7, sp, #0
   2a3ce:	6078      	str	r0, [r7, #4]
   2a3d0:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2a3d2:	683b      	ldr	r3, [r7, #0]
   2a3d4:	3b02      	subs	r3, #2
   2a3d6:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2a3d8:	687b      	ldr	r3, [r7, #4]
   2a3da:	699b      	ldr	r3, [r3, #24]
   2a3dc:	1e9a      	subs	r2, r3, #2
   2a3de:	683b      	ldr	r3, [r7, #0]
   2a3e0:	429a      	cmp	r2, r3
   2a3e2:	d801      	bhi.n	2a3e8 <clust2sect+0x20>
   2a3e4:	2300      	movs	r3, #0
   2a3e6:	e007      	b.n	2a3f8 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2a3e8:	687b      	ldr	r3, [r7, #4]
   2a3ea:	789b      	ldrb	r3, [r3, #2]
   2a3ec:	001a      	movs	r2, r3
   2a3ee:	683b      	ldr	r3, [r7, #0]
   2a3f0:	435a      	muls	r2, r3
   2a3f2:	687b      	ldr	r3, [r7, #4]
   2a3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2a3f6:	18d3      	adds	r3, r2, r3
}
   2a3f8:	0018      	movs	r0, r3
   2a3fa:	46bd      	mov	sp, r7
   2a3fc:	b002      	add	sp, #8
   2a3fe:	bd80      	pop	{r7, pc}

0002a400 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2a400:	b580      	push	{r7, lr}
   2a402:	b086      	sub	sp, #24
   2a404:	af00      	add	r7, sp, #0
   2a406:	6078      	str	r0, [r7, #4]
   2a408:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2a40a:	683b      	ldr	r3, [r7, #0]
   2a40c:	2b01      	cmp	r3, #1
   2a40e:	d904      	bls.n	2a41a <get_fat+0x1a>
   2a410:	687b      	ldr	r3, [r7, #4]
   2a412:	699a      	ldr	r2, [r3, #24]
   2a414:	683b      	ldr	r3, [r7, #0]
   2a416:	429a      	cmp	r2, r3
   2a418:	d801      	bhi.n	2a41e <get_fat+0x1e>
		return 1;
   2a41a:	2301      	movs	r3, #1
   2a41c:	e09f      	b.n	2a55e <get_fat+0x15e>

	switch (fs->fs_type) {
   2a41e:	687b      	ldr	r3, [r7, #4]
   2a420:	781b      	ldrb	r3, [r3, #0]
   2a422:	2b02      	cmp	r3, #2
   2a424:	d048      	beq.n	2a4b8 <get_fat+0xb8>
   2a426:	2b03      	cmp	r3, #3
   2a428:	d067      	beq.n	2a4fa <get_fat+0xfa>
   2a42a:	2b01      	cmp	r3, #1
   2a42c:	d000      	beq.n	2a430 <get_fat+0x30>
   2a42e:	e094      	b.n	2a55a <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2a430:	683b      	ldr	r3, [r7, #0]
   2a432:	617b      	str	r3, [r7, #20]
   2a434:	697b      	ldr	r3, [r7, #20]
   2a436:	085b      	lsrs	r3, r3, #1
   2a438:	697a      	ldr	r2, [r7, #20]
   2a43a:	18d3      	adds	r3, r2, r3
   2a43c:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2a43e:	687b      	ldr	r3, [r7, #4]
   2a440:	6a1a      	ldr	r2, [r3, #32]
   2a442:	697b      	ldr	r3, [r7, #20]
   2a444:	0a5b      	lsrs	r3, r3, #9
   2a446:	18d2      	adds	r2, r2, r3
   2a448:	687b      	ldr	r3, [r7, #4]
   2a44a:	0011      	movs	r1, r2
   2a44c:	0018      	movs	r0, r3
   2a44e:	4b46      	ldr	r3, [pc, #280]	; (2a568 <get_fat+0x168>)
   2a450:	4798      	blx	r3
   2a452:	1e03      	subs	r3, r0, #0
   2a454:	d000      	beq.n	2a458 <get_fat+0x58>
   2a456:	e079      	b.n	2a54c <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2a458:	697b      	ldr	r3, [r7, #20]
   2a45a:	05db      	lsls	r3, r3, #23
   2a45c:	0ddb      	lsrs	r3, r3, #23
   2a45e:	687a      	ldr	r2, [r7, #4]
   2a460:	2130      	movs	r1, #48	; 0x30
   2a462:	18d3      	adds	r3, r2, r3
   2a464:	185b      	adds	r3, r3, r1
   2a466:	781b      	ldrb	r3, [r3, #0]
   2a468:	613b      	str	r3, [r7, #16]
   2a46a:	697b      	ldr	r3, [r7, #20]
   2a46c:	3301      	adds	r3, #1
   2a46e:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2a470:	687b      	ldr	r3, [r7, #4]
   2a472:	6a1a      	ldr	r2, [r3, #32]
   2a474:	697b      	ldr	r3, [r7, #20]
   2a476:	0a5b      	lsrs	r3, r3, #9
   2a478:	18d2      	adds	r2, r2, r3
   2a47a:	687b      	ldr	r3, [r7, #4]
   2a47c:	0011      	movs	r1, r2
   2a47e:	0018      	movs	r0, r3
   2a480:	4b39      	ldr	r3, [pc, #228]	; (2a568 <get_fat+0x168>)
   2a482:	4798      	blx	r3
   2a484:	1e03      	subs	r3, r0, #0
   2a486:	d163      	bne.n	2a550 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2a488:	697b      	ldr	r3, [r7, #20]
   2a48a:	05db      	lsls	r3, r3, #23
   2a48c:	0ddb      	lsrs	r3, r3, #23
   2a48e:	687a      	ldr	r2, [r7, #4]
   2a490:	2130      	movs	r1, #48	; 0x30
   2a492:	18d3      	adds	r3, r2, r3
   2a494:	185b      	adds	r3, r3, r1
   2a496:	781b      	ldrb	r3, [r3, #0]
   2a498:	021b      	lsls	r3, r3, #8
   2a49a:	001a      	movs	r2, r3
   2a49c:	693b      	ldr	r3, [r7, #16]
   2a49e:	4313      	orrs	r3, r2
   2a4a0:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2a4a2:	683b      	ldr	r3, [r7, #0]
   2a4a4:	2201      	movs	r2, #1
   2a4a6:	4013      	ands	r3, r2
   2a4a8:	d002      	beq.n	2a4b0 <get_fat+0xb0>
   2a4aa:	693b      	ldr	r3, [r7, #16]
   2a4ac:	091b      	lsrs	r3, r3, #4
   2a4ae:	e056      	b.n	2a55e <get_fat+0x15e>
   2a4b0:	693b      	ldr	r3, [r7, #16]
   2a4b2:	051b      	lsls	r3, r3, #20
   2a4b4:	0d1b      	lsrs	r3, r3, #20
   2a4b6:	e052      	b.n	2a55e <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2a4b8:	687b      	ldr	r3, [r7, #4]
   2a4ba:	6a1a      	ldr	r2, [r3, #32]
   2a4bc:	683b      	ldr	r3, [r7, #0]
   2a4be:	0a1b      	lsrs	r3, r3, #8
   2a4c0:	18d2      	adds	r2, r2, r3
   2a4c2:	687b      	ldr	r3, [r7, #4]
   2a4c4:	0011      	movs	r1, r2
   2a4c6:	0018      	movs	r0, r3
   2a4c8:	4b27      	ldr	r3, [pc, #156]	; (2a568 <get_fat+0x168>)
   2a4ca:	4798      	blx	r3
   2a4cc:	1e03      	subs	r3, r0, #0
   2a4ce:	d141      	bne.n	2a554 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2a4d0:	683b      	ldr	r3, [r7, #0]
   2a4d2:	005a      	lsls	r2, r3, #1
   2a4d4:	23ff      	movs	r3, #255	; 0xff
   2a4d6:	005b      	lsls	r3, r3, #1
   2a4d8:	4013      	ands	r3, r2
   2a4da:	3330      	adds	r3, #48	; 0x30
   2a4dc:	687a      	ldr	r2, [r7, #4]
   2a4de:	18d3      	adds	r3, r2, r3
   2a4e0:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2a4e2:	68fb      	ldr	r3, [r7, #12]
   2a4e4:	3301      	adds	r3, #1
   2a4e6:	781b      	ldrb	r3, [r3, #0]
   2a4e8:	021b      	lsls	r3, r3, #8
   2a4ea:	b21a      	sxth	r2, r3
   2a4ec:	68fb      	ldr	r3, [r7, #12]
   2a4ee:	781b      	ldrb	r3, [r3, #0]
   2a4f0:	b21b      	sxth	r3, r3
   2a4f2:	4313      	orrs	r3, r2
   2a4f4:	b21b      	sxth	r3, r3
   2a4f6:	b29b      	uxth	r3, r3
   2a4f8:	e031      	b.n	2a55e <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2a4fa:	687b      	ldr	r3, [r7, #4]
   2a4fc:	6a1a      	ldr	r2, [r3, #32]
   2a4fe:	683b      	ldr	r3, [r7, #0]
   2a500:	09db      	lsrs	r3, r3, #7
   2a502:	18d2      	adds	r2, r2, r3
   2a504:	687b      	ldr	r3, [r7, #4]
   2a506:	0011      	movs	r1, r2
   2a508:	0018      	movs	r0, r3
   2a50a:	4b17      	ldr	r3, [pc, #92]	; (2a568 <get_fat+0x168>)
   2a50c:	4798      	blx	r3
   2a50e:	1e03      	subs	r3, r0, #0
   2a510:	d122      	bne.n	2a558 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2a512:	683b      	ldr	r3, [r7, #0]
   2a514:	009a      	lsls	r2, r3, #2
   2a516:	23fe      	movs	r3, #254	; 0xfe
   2a518:	005b      	lsls	r3, r3, #1
   2a51a:	4013      	ands	r3, r2
   2a51c:	3330      	adds	r3, #48	; 0x30
   2a51e:	687a      	ldr	r2, [r7, #4]
   2a520:	18d3      	adds	r3, r2, r3
   2a522:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2a524:	68fb      	ldr	r3, [r7, #12]
   2a526:	3303      	adds	r3, #3
   2a528:	781b      	ldrb	r3, [r3, #0]
   2a52a:	061a      	lsls	r2, r3, #24
   2a52c:	68fb      	ldr	r3, [r7, #12]
   2a52e:	3302      	adds	r3, #2
   2a530:	781b      	ldrb	r3, [r3, #0]
   2a532:	041b      	lsls	r3, r3, #16
   2a534:	4313      	orrs	r3, r2
   2a536:	68fa      	ldr	r2, [r7, #12]
   2a538:	3201      	adds	r2, #1
   2a53a:	7812      	ldrb	r2, [r2, #0]
   2a53c:	0212      	lsls	r2, r2, #8
   2a53e:	4313      	orrs	r3, r2
   2a540:	68fa      	ldr	r2, [r7, #12]
   2a542:	7812      	ldrb	r2, [r2, #0]
   2a544:	4313      	orrs	r3, r2
   2a546:	011b      	lsls	r3, r3, #4
   2a548:	091b      	lsrs	r3, r3, #4
   2a54a:	e008      	b.n	2a55e <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2a54c:	46c0      	nop			; (mov r8, r8)
   2a54e:	e004      	b.n	2a55a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2a550:	46c0      	nop			; (mov r8, r8)
   2a552:	e002      	b.n	2a55a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2a554:	46c0      	nop			; (mov r8, r8)
   2a556:	e000      	b.n	2a55a <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2a558:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2a55a:	2301      	movs	r3, #1
   2a55c:	425b      	negs	r3, r3
}
   2a55e:	0018      	movs	r0, r3
   2a560:	46bd      	mov	sp, r7
   2a562:	b006      	add	sp, #24
   2a564:	bd80      	pop	{r7, pc}
   2a566:	46c0      	nop			; (mov r8, r8)
   2a568:	0002a169 	.word	0x0002a169

0002a56c <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2a56c:	b590      	push	{r4, r7, lr}
   2a56e:	b089      	sub	sp, #36	; 0x24
   2a570:	af00      	add	r7, sp, #0
   2a572:	60f8      	str	r0, [r7, #12]
   2a574:	60b9      	str	r1, [r7, #8]
   2a576:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2a578:	68bb      	ldr	r3, [r7, #8]
   2a57a:	2b01      	cmp	r3, #1
   2a57c:	d904      	bls.n	2a588 <put_fat+0x1c>
   2a57e:	68fb      	ldr	r3, [r7, #12]
   2a580:	699a      	ldr	r2, [r3, #24]
   2a582:	68bb      	ldr	r3, [r7, #8]
   2a584:	429a      	cmp	r2, r3
   2a586:	d804      	bhi.n	2a592 <put_fat+0x26>
		res = FR_INT_ERR;
   2a588:	231f      	movs	r3, #31
   2a58a:	18fb      	adds	r3, r7, r3
   2a58c:	2202      	movs	r2, #2
   2a58e:	701a      	strb	r2, [r3, #0]
   2a590:	e100      	b.n	2a794 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2a592:	68fb      	ldr	r3, [r7, #12]
   2a594:	781b      	ldrb	r3, [r3, #0]
   2a596:	2b02      	cmp	r3, #2
   2a598:	d100      	bne.n	2a59c <put_fat+0x30>
   2a59a:	e078      	b.n	2a68e <put_fat+0x122>
   2a59c:	2b03      	cmp	r3, #3
   2a59e:	d100      	bne.n	2a5a2 <put_fat+0x36>
   2a5a0:	e09e      	b.n	2a6e0 <put_fat+0x174>
   2a5a2:	2b01      	cmp	r3, #1
   2a5a4:	d000      	beq.n	2a5a8 <put_fat+0x3c>
   2a5a6:	e0e6      	b.n	2a776 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2a5a8:	68bb      	ldr	r3, [r7, #8]
   2a5aa:	61bb      	str	r3, [r7, #24]
   2a5ac:	69bb      	ldr	r3, [r7, #24]
   2a5ae:	085b      	lsrs	r3, r3, #1
   2a5b0:	69ba      	ldr	r2, [r7, #24]
   2a5b2:	18d3      	adds	r3, r2, r3
   2a5b4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2a5b6:	68fb      	ldr	r3, [r7, #12]
   2a5b8:	6a1a      	ldr	r2, [r3, #32]
   2a5ba:	69bb      	ldr	r3, [r7, #24]
   2a5bc:	0a5b      	lsrs	r3, r3, #9
   2a5be:	18d2      	adds	r2, r2, r3
   2a5c0:	231f      	movs	r3, #31
   2a5c2:	18fc      	adds	r4, r7, r3
   2a5c4:	68fb      	ldr	r3, [r7, #12]
   2a5c6:	0011      	movs	r1, r2
   2a5c8:	0018      	movs	r0, r3
   2a5ca:	4b76      	ldr	r3, [pc, #472]	; (2a7a4 <put_fat+0x238>)
   2a5cc:	4798      	blx	r3
   2a5ce:	0003      	movs	r3, r0
   2a5d0:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a5d2:	231f      	movs	r3, #31
   2a5d4:	18fb      	adds	r3, r7, r3
   2a5d6:	781b      	ldrb	r3, [r3, #0]
   2a5d8:	2b00      	cmp	r3, #0
   2a5da:	d000      	beq.n	2a5de <put_fat+0x72>
   2a5dc:	e0d0      	b.n	2a780 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2a5de:	69bb      	ldr	r3, [r7, #24]
   2a5e0:	05db      	lsls	r3, r3, #23
   2a5e2:	0ddb      	lsrs	r3, r3, #23
   2a5e4:	3330      	adds	r3, #48	; 0x30
   2a5e6:	68fa      	ldr	r2, [r7, #12]
   2a5e8:	18d3      	adds	r3, r2, r3
   2a5ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2a5ec:	68bb      	ldr	r3, [r7, #8]
   2a5ee:	2201      	movs	r2, #1
   2a5f0:	4013      	ands	r3, r2
   2a5f2:	d00d      	beq.n	2a610 <put_fat+0xa4>
   2a5f4:	697b      	ldr	r3, [r7, #20]
   2a5f6:	781b      	ldrb	r3, [r3, #0]
   2a5f8:	b25b      	sxtb	r3, r3
   2a5fa:	220f      	movs	r2, #15
   2a5fc:	4013      	ands	r3, r2
   2a5fe:	b25a      	sxtb	r2, r3
   2a600:	687b      	ldr	r3, [r7, #4]
   2a602:	b2db      	uxtb	r3, r3
   2a604:	011b      	lsls	r3, r3, #4
   2a606:	b25b      	sxtb	r3, r3
   2a608:	4313      	orrs	r3, r2
   2a60a:	b25b      	sxtb	r3, r3
   2a60c:	b2db      	uxtb	r3, r3
   2a60e:	e001      	b.n	2a614 <put_fat+0xa8>
   2a610:	687b      	ldr	r3, [r7, #4]
   2a612:	b2db      	uxtb	r3, r3
   2a614:	697a      	ldr	r2, [r7, #20]
   2a616:	7013      	strb	r3, [r2, #0]
			bc++;
   2a618:	69bb      	ldr	r3, [r7, #24]
   2a61a:	3301      	adds	r3, #1
   2a61c:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2a61e:	68fb      	ldr	r3, [r7, #12]
   2a620:	2201      	movs	r2, #1
   2a622:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2a624:	68fb      	ldr	r3, [r7, #12]
   2a626:	6a1a      	ldr	r2, [r3, #32]
   2a628:	69bb      	ldr	r3, [r7, #24]
   2a62a:	0a5b      	lsrs	r3, r3, #9
   2a62c:	18d2      	adds	r2, r2, r3
   2a62e:	231f      	movs	r3, #31
   2a630:	18fc      	adds	r4, r7, r3
   2a632:	68fb      	ldr	r3, [r7, #12]
   2a634:	0011      	movs	r1, r2
   2a636:	0018      	movs	r0, r3
   2a638:	4b5a      	ldr	r3, [pc, #360]	; (2a7a4 <put_fat+0x238>)
   2a63a:	4798      	blx	r3
   2a63c:	0003      	movs	r3, r0
   2a63e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a640:	231f      	movs	r3, #31
   2a642:	18fb      	adds	r3, r7, r3
   2a644:	781b      	ldrb	r3, [r3, #0]
   2a646:	2b00      	cmp	r3, #0
   2a648:	d000      	beq.n	2a64c <put_fat+0xe0>
   2a64a:	e09b      	b.n	2a784 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2a64c:	69bb      	ldr	r3, [r7, #24]
   2a64e:	05db      	lsls	r3, r3, #23
   2a650:	0ddb      	lsrs	r3, r3, #23
   2a652:	3330      	adds	r3, #48	; 0x30
   2a654:	68fa      	ldr	r2, [r7, #12]
   2a656:	18d3      	adds	r3, r2, r3
   2a658:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2a65a:	68bb      	ldr	r3, [r7, #8]
   2a65c:	2201      	movs	r2, #1
   2a65e:	4013      	ands	r3, r2
   2a660:	d003      	beq.n	2a66a <put_fat+0xfe>
   2a662:	687b      	ldr	r3, [r7, #4]
   2a664:	091b      	lsrs	r3, r3, #4
   2a666:	b2db      	uxtb	r3, r3
   2a668:	e00e      	b.n	2a688 <put_fat+0x11c>
   2a66a:	697b      	ldr	r3, [r7, #20]
   2a66c:	781b      	ldrb	r3, [r3, #0]
   2a66e:	b25b      	sxtb	r3, r3
   2a670:	220f      	movs	r2, #15
   2a672:	4393      	bics	r3, r2
   2a674:	b25a      	sxtb	r2, r3
   2a676:	687b      	ldr	r3, [r7, #4]
   2a678:	0a1b      	lsrs	r3, r3, #8
   2a67a:	b25b      	sxtb	r3, r3
   2a67c:	210f      	movs	r1, #15
   2a67e:	400b      	ands	r3, r1
   2a680:	b25b      	sxtb	r3, r3
   2a682:	4313      	orrs	r3, r2
   2a684:	b25b      	sxtb	r3, r3
   2a686:	b2db      	uxtb	r3, r3
   2a688:	697a      	ldr	r2, [r7, #20]
   2a68a:	7013      	strb	r3, [r2, #0]
			break;
   2a68c:	e07f      	b.n	2a78e <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2a68e:	68fb      	ldr	r3, [r7, #12]
   2a690:	6a1a      	ldr	r2, [r3, #32]
   2a692:	68bb      	ldr	r3, [r7, #8]
   2a694:	0a1b      	lsrs	r3, r3, #8
   2a696:	18d2      	adds	r2, r2, r3
   2a698:	231f      	movs	r3, #31
   2a69a:	18fc      	adds	r4, r7, r3
   2a69c:	68fb      	ldr	r3, [r7, #12]
   2a69e:	0011      	movs	r1, r2
   2a6a0:	0018      	movs	r0, r3
   2a6a2:	4b40      	ldr	r3, [pc, #256]	; (2a7a4 <put_fat+0x238>)
   2a6a4:	4798      	blx	r3
   2a6a6:	0003      	movs	r3, r0
   2a6a8:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a6aa:	231f      	movs	r3, #31
   2a6ac:	18fb      	adds	r3, r7, r3
   2a6ae:	781b      	ldrb	r3, [r3, #0]
   2a6b0:	2b00      	cmp	r3, #0
   2a6b2:	d169      	bne.n	2a788 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2a6b4:	68bb      	ldr	r3, [r7, #8]
   2a6b6:	005a      	lsls	r2, r3, #1
   2a6b8:	23ff      	movs	r3, #255	; 0xff
   2a6ba:	005b      	lsls	r3, r3, #1
   2a6bc:	4013      	ands	r3, r2
   2a6be:	3330      	adds	r3, #48	; 0x30
   2a6c0:	68fa      	ldr	r2, [r7, #12]
   2a6c2:	18d3      	adds	r3, r2, r3
   2a6c4:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2a6c6:	687b      	ldr	r3, [r7, #4]
   2a6c8:	b2da      	uxtb	r2, r3
   2a6ca:	697b      	ldr	r3, [r7, #20]
   2a6cc:	701a      	strb	r2, [r3, #0]
   2a6ce:	697b      	ldr	r3, [r7, #20]
   2a6d0:	3301      	adds	r3, #1
   2a6d2:	687a      	ldr	r2, [r7, #4]
   2a6d4:	b292      	uxth	r2, r2
   2a6d6:	0a12      	lsrs	r2, r2, #8
   2a6d8:	b292      	uxth	r2, r2
   2a6da:	b2d2      	uxtb	r2, r2
   2a6dc:	701a      	strb	r2, [r3, #0]
			break;
   2a6de:	e056      	b.n	2a78e <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2a6e0:	68fb      	ldr	r3, [r7, #12]
   2a6e2:	6a1a      	ldr	r2, [r3, #32]
   2a6e4:	68bb      	ldr	r3, [r7, #8]
   2a6e6:	09db      	lsrs	r3, r3, #7
   2a6e8:	18d2      	adds	r2, r2, r3
   2a6ea:	231f      	movs	r3, #31
   2a6ec:	18fc      	adds	r4, r7, r3
   2a6ee:	68fb      	ldr	r3, [r7, #12]
   2a6f0:	0011      	movs	r1, r2
   2a6f2:	0018      	movs	r0, r3
   2a6f4:	4b2b      	ldr	r3, [pc, #172]	; (2a7a4 <put_fat+0x238>)
   2a6f6:	4798      	blx	r3
   2a6f8:	0003      	movs	r3, r0
   2a6fa:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a6fc:	231f      	movs	r3, #31
   2a6fe:	18fb      	adds	r3, r7, r3
   2a700:	781b      	ldrb	r3, [r3, #0]
   2a702:	2b00      	cmp	r3, #0
   2a704:	d142      	bne.n	2a78c <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2a706:	68bb      	ldr	r3, [r7, #8]
   2a708:	009a      	lsls	r2, r3, #2
   2a70a:	23fe      	movs	r3, #254	; 0xfe
   2a70c:	005b      	lsls	r3, r3, #1
   2a70e:	4013      	ands	r3, r2
   2a710:	3330      	adds	r3, #48	; 0x30
   2a712:	68fa      	ldr	r2, [r7, #12]
   2a714:	18d3      	adds	r3, r2, r3
   2a716:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2a718:	697b      	ldr	r3, [r7, #20]
   2a71a:	3303      	adds	r3, #3
   2a71c:	781b      	ldrb	r3, [r3, #0]
   2a71e:	061a      	lsls	r2, r3, #24
   2a720:	697b      	ldr	r3, [r7, #20]
   2a722:	3302      	adds	r3, #2
   2a724:	781b      	ldrb	r3, [r3, #0]
   2a726:	041b      	lsls	r3, r3, #16
   2a728:	4313      	orrs	r3, r2
   2a72a:	697a      	ldr	r2, [r7, #20]
   2a72c:	3201      	adds	r2, #1
   2a72e:	7812      	ldrb	r2, [r2, #0]
   2a730:	0212      	lsls	r2, r2, #8
   2a732:	4313      	orrs	r3, r2
   2a734:	697a      	ldr	r2, [r7, #20]
   2a736:	7812      	ldrb	r2, [r2, #0]
   2a738:	4313      	orrs	r3, r2
   2a73a:	0f1b      	lsrs	r3, r3, #28
   2a73c:	071b      	lsls	r3, r3, #28
   2a73e:	687a      	ldr	r2, [r7, #4]
   2a740:	4313      	orrs	r3, r2
   2a742:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2a744:	687b      	ldr	r3, [r7, #4]
   2a746:	b2da      	uxtb	r2, r3
   2a748:	697b      	ldr	r3, [r7, #20]
   2a74a:	701a      	strb	r2, [r3, #0]
   2a74c:	697b      	ldr	r3, [r7, #20]
   2a74e:	3301      	adds	r3, #1
   2a750:	687a      	ldr	r2, [r7, #4]
   2a752:	b292      	uxth	r2, r2
   2a754:	0a12      	lsrs	r2, r2, #8
   2a756:	b292      	uxth	r2, r2
   2a758:	b2d2      	uxtb	r2, r2
   2a75a:	701a      	strb	r2, [r3, #0]
   2a75c:	697b      	ldr	r3, [r7, #20]
   2a75e:	3302      	adds	r3, #2
   2a760:	687a      	ldr	r2, [r7, #4]
   2a762:	0c12      	lsrs	r2, r2, #16
   2a764:	b2d2      	uxtb	r2, r2
   2a766:	701a      	strb	r2, [r3, #0]
   2a768:	697b      	ldr	r3, [r7, #20]
   2a76a:	3303      	adds	r3, #3
   2a76c:	687a      	ldr	r2, [r7, #4]
   2a76e:	0e12      	lsrs	r2, r2, #24
   2a770:	b2d2      	uxtb	r2, r2
   2a772:	701a      	strb	r2, [r3, #0]
			break;
   2a774:	e00b      	b.n	2a78e <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2a776:	231f      	movs	r3, #31
   2a778:	18fb      	adds	r3, r7, r3
   2a77a:	2202      	movs	r2, #2
   2a77c:	701a      	strb	r2, [r3, #0]
   2a77e:	e006      	b.n	2a78e <put_fat+0x222>
			if (res != FR_OK) break;
   2a780:	46c0      	nop			; (mov r8, r8)
   2a782:	e004      	b.n	2a78e <put_fat+0x222>
			if (res != FR_OK) break;
   2a784:	46c0      	nop			; (mov r8, r8)
   2a786:	e002      	b.n	2a78e <put_fat+0x222>
			if (res != FR_OK) break;
   2a788:	46c0      	nop			; (mov r8, r8)
   2a78a:	e000      	b.n	2a78e <put_fat+0x222>
			if (res != FR_OK) break;
   2a78c:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2a78e:	68fb      	ldr	r3, [r7, #12]
   2a790:	2201      	movs	r2, #1
   2a792:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2a794:	231f      	movs	r3, #31
   2a796:	18fb      	adds	r3, r7, r3
   2a798:	781b      	ldrb	r3, [r3, #0]
}
   2a79a:	0018      	movs	r0, r3
   2a79c:	46bd      	mov	sp, r7
   2a79e:	b009      	add	sp, #36	; 0x24
   2a7a0:	bd90      	pop	{r4, r7, pc}
   2a7a2:	46c0      	nop			; (mov r8, r8)
   2a7a4:	0002a169 	.word	0x0002a169

0002a7a8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2a7a8:	b590      	push	{r4, r7, lr}
   2a7aa:	b085      	sub	sp, #20
   2a7ac:	af00      	add	r7, sp, #0
   2a7ae:	6078      	str	r0, [r7, #4]
   2a7b0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2a7b2:	683b      	ldr	r3, [r7, #0]
   2a7b4:	2b01      	cmp	r3, #1
   2a7b6:	d904      	bls.n	2a7c2 <remove_chain+0x1a>
   2a7b8:	687b      	ldr	r3, [r7, #4]
   2a7ba:	699a      	ldr	r2, [r3, #24]
   2a7bc:	683b      	ldr	r3, [r7, #0]
   2a7be:	429a      	cmp	r2, r3
   2a7c0:	d804      	bhi.n	2a7cc <remove_chain+0x24>
		res = FR_INT_ERR;
   2a7c2:	230f      	movs	r3, #15
   2a7c4:	18fb      	adds	r3, r7, r3
   2a7c6:	2202      	movs	r2, #2
   2a7c8:	701a      	strb	r2, [r3, #0]
   2a7ca:	e045      	b.n	2a858 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2a7cc:	230f      	movs	r3, #15
   2a7ce:	18fb      	adds	r3, r7, r3
   2a7d0:	2200      	movs	r2, #0
   2a7d2:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2a7d4:	e037      	b.n	2a846 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2a7d6:	683a      	ldr	r2, [r7, #0]
   2a7d8:	687b      	ldr	r3, [r7, #4]
   2a7da:	0011      	movs	r1, r2
   2a7dc:	0018      	movs	r0, r3
   2a7de:	4b22      	ldr	r3, [pc, #136]	; (2a868 <remove_chain+0xc0>)
   2a7e0:	4798      	blx	r3
   2a7e2:	0003      	movs	r3, r0
   2a7e4:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2a7e6:	68bb      	ldr	r3, [r7, #8]
   2a7e8:	2b00      	cmp	r3, #0
   2a7ea:	d032      	beq.n	2a852 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2a7ec:	68bb      	ldr	r3, [r7, #8]
   2a7ee:	2b01      	cmp	r3, #1
   2a7f0:	d104      	bne.n	2a7fc <remove_chain+0x54>
   2a7f2:	230f      	movs	r3, #15
   2a7f4:	18fb      	adds	r3, r7, r3
   2a7f6:	2202      	movs	r2, #2
   2a7f8:	701a      	strb	r2, [r3, #0]
   2a7fa:	e02d      	b.n	2a858 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2a7fc:	68bb      	ldr	r3, [r7, #8]
   2a7fe:	3301      	adds	r3, #1
   2a800:	d104      	bne.n	2a80c <remove_chain+0x64>
   2a802:	230f      	movs	r3, #15
   2a804:	18fb      	adds	r3, r7, r3
   2a806:	2201      	movs	r2, #1
   2a808:	701a      	strb	r2, [r3, #0]
   2a80a:	e025      	b.n	2a858 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2a80c:	230f      	movs	r3, #15
   2a80e:	18fc      	adds	r4, r7, r3
   2a810:	6839      	ldr	r1, [r7, #0]
   2a812:	687b      	ldr	r3, [r7, #4]
   2a814:	2200      	movs	r2, #0
   2a816:	0018      	movs	r0, r3
   2a818:	4b14      	ldr	r3, [pc, #80]	; (2a86c <remove_chain+0xc4>)
   2a81a:	4798      	blx	r3
   2a81c:	0003      	movs	r3, r0
   2a81e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2a820:	230f      	movs	r3, #15
   2a822:	18fb      	adds	r3, r7, r3
   2a824:	781b      	ldrb	r3, [r3, #0]
   2a826:	2b00      	cmp	r3, #0
   2a828:	d115      	bne.n	2a856 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2a82a:	687b      	ldr	r3, [r7, #4]
   2a82c:	691b      	ldr	r3, [r3, #16]
   2a82e:	3301      	adds	r3, #1
   2a830:	d007      	beq.n	2a842 <remove_chain+0x9a>
				fs->free_clust++;
   2a832:	687b      	ldr	r3, [r7, #4]
   2a834:	691b      	ldr	r3, [r3, #16]
   2a836:	1c5a      	adds	r2, r3, #1
   2a838:	687b      	ldr	r3, [r7, #4]
   2a83a:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2a83c:	687b      	ldr	r3, [r7, #4]
   2a83e:	2201      	movs	r2, #1
   2a840:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2a842:	68bb      	ldr	r3, [r7, #8]
   2a844:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2a846:	687b      	ldr	r3, [r7, #4]
   2a848:	699a      	ldr	r2, [r3, #24]
   2a84a:	683b      	ldr	r3, [r7, #0]
   2a84c:	429a      	cmp	r2, r3
   2a84e:	d8c2      	bhi.n	2a7d6 <remove_chain+0x2e>
   2a850:	e002      	b.n	2a858 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2a852:	46c0      	nop			; (mov r8, r8)
   2a854:	e000      	b.n	2a858 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2a856:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2a858:	230f      	movs	r3, #15
   2a85a:	18fb      	adds	r3, r7, r3
   2a85c:	781b      	ldrb	r3, [r3, #0]
}
   2a85e:	0018      	movs	r0, r3
   2a860:	46bd      	mov	sp, r7
   2a862:	b005      	add	sp, #20
   2a864:	bd90      	pop	{r4, r7, pc}
   2a866:	46c0      	nop			; (mov r8, r8)
   2a868:	0002a401 	.word	0x0002a401
   2a86c:	0002a56d 	.word	0x0002a56d

0002a870 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2a870:	b590      	push	{r4, r7, lr}
   2a872:	b087      	sub	sp, #28
   2a874:	af00      	add	r7, sp, #0
   2a876:	6078      	str	r0, [r7, #4]
   2a878:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2a87a:	683b      	ldr	r3, [r7, #0]
   2a87c:	2b00      	cmp	r3, #0
   2a87e:	d10d      	bne.n	2a89c <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2a880:	687b      	ldr	r3, [r7, #4]
   2a882:	68db      	ldr	r3, [r3, #12]
   2a884:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2a886:	693b      	ldr	r3, [r7, #16]
   2a888:	2b00      	cmp	r3, #0
   2a88a:	d004      	beq.n	2a896 <create_chain+0x26>
   2a88c:	687b      	ldr	r3, [r7, #4]
   2a88e:	699a      	ldr	r2, [r3, #24]
   2a890:	693b      	ldr	r3, [r7, #16]
   2a892:	429a      	cmp	r2, r3
   2a894:	d818      	bhi.n	2a8c8 <create_chain+0x58>
   2a896:	2301      	movs	r3, #1
   2a898:	613b      	str	r3, [r7, #16]
   2a89a:	e015      	b.n	2a8c8 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2a89c:	683a      	ldr	r2, [r7, #0]
   2a89e:	687b      	ldr	r3, [r7, #4]
   2a8a0:	0011      	movs	r1, r2
   2a8a2:	0018      	movs	r0, r3
   2a8a4:	4b3e      	ldr	r3, [pc, #248]	; (2a9a0 <create_chain+0x130>)
   2a8a6:	4798      	blx	r3
   2a8a8:	0003      	movs	r3, r0
   2a8aa:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2a8ac:	68bb      	ldr	r3, [r7, #8]
   2a8ae:	2b01      	cmp	r3, #1
   2a8b0:	d801      	bhi.n	2a8b6 <create_chain+0x46>
   2a8b2:	2301      	movs	r3, #1
   2a8b4:	e070      	b.n	2a998 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2a8b6:	687b      	ldr	r3, [r7, #4]
   2a8b8:	699a      	ldr	r2, [r3, #24]
   2a8ba:	68bb      	ldr	r3, [r7, #8]
   2a8bc:	429a      	cmp	r2, r3
   2a8be:	d901      	bls.n	2a8c4 <create_chain+0x54>
   2a8c0:	68bb      	ldr	r3, [r7, #8]
   2a8c2:	e069      	b.n	2a998 <create_chain+0x128>
		scl = clst;
   2a8c4:	683b      	ldr	r3, [r7, #0]
   2a8c6:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2a8c8:	693b      	ldr	r3, [r7, #16]
   2a8ca:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2a8cc:	697b      	ldr	r3, [r7, #20]
   2a8ce:	3301      	adds	r3, #1
   2a8d0:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2a8d2:	687b      	ldr	r3, [r7, #4]
   2a8d4:	699a      	ldr	r2, [r3, #24]
   2a8d6:	697b      	ldr	r3, [r7, #20]
   2a8d8:	429a      	cmp	r2, r3
   2a8da:	d807      	bhi.n	2a8ec <create_chain+0x7c>
			ncl = 2;
   2a8dc:	2302      	movs	r3, #2
   2a8de:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2a8e0:	697a      	ldr	r2, [r7, #20]
   2a8e2:	693b      	ldr	r3, [r7, #16]
   2a8e4:	429a      	cmp	r2, r3
   2a8e6:	d901      	bls.n	2a8ec <create_chain+0x7c>
   2a8e8:	2300      	movs	r3, #0
   2a8ea:	e055      	b.n	2a998 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2a8ec:	697a      	ldr	r2, [r7, #20]
   2a8ee:	687b      	ldr	r3, [r7, #4]
   2a8f0:	0011      	movs	r1, r2
   2a8f2:	0018      	movs	r0, r3
   2a8f4:	4b2a      	ldr	r3, [pc, #168]	; (2a9a0 <create_chain+0x130>)
   2a8f6:	4798      	blx	r3
   2a8f8:	0003      	movs	r3, r0
   2a8fa:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2a8fc:	68bb      	ldr	r3, [r7, #8]
   2a8fe:	2b00      	cmp	r3, #0
   2a900:	d00d      	beq.n	2a91e <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2a902:	68bb      	ldr	r3, [r7, #8]
   2a904:	3301      	adds	r3, #1
   2a906:	d002      	beq.n	2a90e <create_chain+0x9e>
   2a908:	68bb      	ldr	r3, [r7, #8]
   2a90a:	2b01      	cmp	r3, #1
   2a90c:	d101      	bne.n	2a912 <create_chain+0xa2>
			return cs;
   2a90e:	68bb      	ldr	r3, [r7, #8]
   2a910:	e042      	b.n	2a998 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2a912:	697a      	ldr	r2, [r7, #20]
   2a914:	693b      	ldr	r3, [r7, #16]
   2a916:	429a      	cmp	r2, r3
   2a918:	d1d8      	bne.n	2a8cc <create_chain+0x5c>
   2a91a:	2300      	movs	r3, #0
   2a91c:	e03c      	b.n	2a998 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2a91e:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2a920:	230f      	movs	r3, #15
   2a922:	18fc      	adds	r4, r7, r3
   2a924:	4a1f      	ldr	r2, [pc, #124]	; (2a9a4 <create_chain+0x134>)
   2a926:	6979      	ldr	r1, [r7, #20]
   2a928:	687b      	ldr	r3, [r7, #4]
   2a92a:	0018      	movs	r0, r3
   2a92c:	4b1e      	ldr	r3, [pc, #120]	; (2a9a8 <create_chain+0x138>)
   2a92e:	4798      	blx	r3
   2a930:	0003      	movs	r3, r0
   2a932:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2a934:	230f      	movs	r3, #15
   2a936:	18fb      	adds	r3, r7, r3
   2a938:	781b      	ldrb	r3, [r3, #0]
   2a93a:	2b00      	cmp	r3, #0
   2a93c:	d10c      	bne.n	2a958 <create_chain+0xe8>
   2a93e:	683b      	ldr	r3, [r7, #0]
   2a940:	2b00      	cmp	r3, #0
   2a942:	d009      	beq.n	2a958 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2a944:	230f      	movs	r3, #15
   2a946:	18fc      	adds	r4, r7, r3
   2a948:	697a      	ldr	r2, [r7, #20]
   2a94a:	6839      	ldr	r1, [r7, #0]
   2a94c:	687b      	ldr	r3, [r7, #4]
   2a94e:	0018      	movs	r0, r3
   2a950:	4b15      	ldr	r3, [pc, #84]	; (2a9a8 <create_chain+0x138>)
   2a952:	4798      	blx	r3
   2a954:	0003      	movs	r3, r0
   2a956:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2a958:	230f      	movs	r3, #15
   2a95a:	18fb      	adds	r3, r7, r3
   2a95c:	781b      	ldrb	r3, [r3, #0]
   2a95e:	2b00      	cmp	r3, #0
   2a960:	d10f      	bne.n	2a982 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2a962:	687b      	ldr	r3, [r7, #4]
   2a964:	697a      	ldr	r2, [r7, #20]
   2a966:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2a968:	687b      	ldr	r3, [r7, #4]
   2a96a:	691b      	ldr	r3, [r3, #16]
   2a96c:	3301      	adds	r3, #1
   2a96e:	d012      	beq.n	2a996 <create_chain+0x126>
			fs->free_clust--;
   2a970:	687b      	ldr	r3, [r7, #4]
   2a972:	691b      	ldr	r3, [r3, #16]
   2a974:	1e5a      	subs	r2, r3, #1
   2a976:	687b      	ldr	r3, [r7, #4]
   2a978:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2a97a:	687b      	ldr	r3, [r7, #4]
   2a97c:	2201      	movs	r2, #1
   2a97e:	715a      	strb	r2, [r3, #5]
   2a980:	e009      	b.n	2a996 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2a982:	230f      	movs	r3, #15
   2a984:	18fb      	adds	r3, r7, r3
   2a986:	781b      	ldrb	r3, [r3, #0]
   2a988:	2b01      	cmp	r3, #1
   2a98a:	d102      	bne.n	2a992 <create_chain+0x122>
   2a98c:	2301      	movs	r3, #1
   2a98e:	425b      	negs	r3, r3
   2a990:	e000      	b.n	2a994 <create_chain+0x124>
   2a992:	2301      	movs	r3, #1
   2a994:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2a996:	697b      	ldr	r3, [r7, #20]
}
   2a998:	0018      	movs	r0, r3
   2a99a:	46bd      	mov	sp, r7
   2a99c:	b007      	add	sp, #28
   2a99e:	bd90      	pop	{r4, r7, pc}
   2a9a0:	0002a401 	.word	0x0002a401
   2a9a4:	0fffffff 	.word	0x0fffffff
   2a9a8:	0002a56d 	.word	0x0002a56d

0002a9ac <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2a9ac:	b580      	push	{r7, lr}
   2a9ae:	b084      	sub	sp, #16
   2a9b0:	af00      	add	r7, sp, #0
   2a9b2:	6078      	str	r0, [r7, #4]
   2a9b4:	000a      	movs	r2, r1
   2a9b6:	1cbb      	adds	r3, r7, #2
   2a9b8:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2a9ba:	687b      	ldr	r3, [r7, #4]
   2a9bc:	1cba      	adds	r2, r7, #2
   2a9be:	8812      	ldrh	r2, [r2, #0]
   2a9c0:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2a9c2:	687b      	ldr	r3, [r7, #4]
   2a9c4:	689b      	ldr	r3, [r3, #8]
   2a9c6:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2a9c8:	68fb      	ldr	r3, [r7, #12]
   2a9ca:	2b01      	cmp	r3, #1
   2a9cc:	d005      	beq.n	2a9da <dir_sdi+0x2e>
   2a9ce:	687b      	ldr	r3, [r7, #4]
   2a9d0:	681b      	ldr	r3, [r3, #0]
   2a9d2:	699a      	ldr	r2, [r3, #24]
   2a9d4:	68fb      	ldr	r3, [r7, #12]
   2a9d6:	429a      	cmp	r2, r3
   2a9d8:	d801      	bhi.n	2a9de <dir_sdi+0x32>
		return FR_INT_ERR;
   2a9da:	2302      	movs	r3, #2
   2a9dc:	e075      	b.n	2aaca <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2a9de:	68fb      	ldr	r3, [r7, #12]
   2a9e0:	2b00      	cmp	r3, #0
   2a9e2:	d108      	bne.n	2a9f6 <dir_sdi+0x4a>
   2a9e4:	687b      	ldr	r3, [r7, #4]
   2a9e6:	681b      	ldr	r3, [r3, #0]
   2a9e8:	781b      	ldrb	r3, [r3, #0]
   2a9ea:	2b03      	cmp	r3, #3
   2a9ec:	d103      	bne.n	2a9f6 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2a9ee:	687b      	ldr	r3, [r7, #4]
   2a9f0:	681b      	ldr	r3, [r3, #0]
   2a9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a9f4:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2a9f6:	68fb      	ldr	r3, [r7, #12]
   2a9f8:	2b00      	cmp	r3, #0
   2a9fa:	d116      	bne.n	2aa2a <dir_sdi+0x7e>
		dj->clust = clst;
   2a9fc:	687b      	ldr	r3, [r7, #4]
   2a9fe:	68fa      	ldr	r2, [r7, #12]
   2aa00:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2aa02:	687b      	ldr	r3, [r7, #4]
   2aa04:	681b      	ldr	r3, [r3, #0]
   2aa06:	891b      	ldrh	r3, [r3, #8]
   2aa08:	1cba      	adds	r2, r7, #2
   2aa0a:	8812      	ldrh	r2, [r2, #0]
   2aa0c:	429a      	cmp	r2, r3
   2aa0e:	d301      	bcc.n	2aa14 <dir_sdi+0x68>
			return FR_INT_ERR;
   2aa10:	2302      	movs	r3, #2
   2aa12:	e05a      	b.n	2aaca <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2aa14:	687b      	ldr	r3, [r7, #4]
   2aa16:	681b      	ldr	r3, [r3, #0]
   2aa18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2aa1a:	1cba      	adds	r2, r7, #2
   2aa1c:	8812      	ldrh	r2, [r2, #0]
   2aa1e:	0912      	lsrs	r2, r2, #4
   2aa20:	b292      	uxth	r2, r2
   2aa22:	189a      	adds	r2, r3, r2
   2aa24:	687b      	ldr	r3, [r7, #4]
   2aa26:	611a      	str	r2, [r3, #16]
   2aa28:	e042      	b.n	2aab0 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2aa2a:	687b      	ldr	r3, [r7, #4]
   2aa2c:	681b      	ldr	r3, [r3, #0]
   2aa2e:	789b      	ldrb	r3, [r3, #2]
   2aa30:	b29a      	uxth	r2, r3
   2aa32:	230a      	movs	r3, #10
   2aa34:	18fb      	adds	r3, r7, r3
   2aa36:	0112      	lsls	r2, r2, #4
   2aa38:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2aa3a:	e020      	b.n	2aa7e <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2aa3c:	687b      	ldr	r3, [r7, #4]
   2aa3e:	681b      	ldr	r3, [r3, #0]
   2aa40:	68fa      	ldr	r2, [r7, #12]
   2aa42:	0011      	movs	r1, r2
   2aa44:	0018      	movs	r0, r3
   2aa46:	4b23      	ldr	r3, [pc, #140]	; (2aad4 <dir_sdi+0x128>)
   2aa48:	4798      	blx	r3
   2aa4a:	0003      	movs	r3, r0
   2aa4c:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2aa4e:	68fb      	ldr	r3, [r7, #12]
   2aa50:	3301      	adds	r3, #1
   2aa52:	d101      	bne.n	2aa58 <dir_sdi+0xac>
   2aa54:	2301      	movs	r3, #1
   2aa56:	e038      	b.n	2aaca <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2aa58:	68fb      	ldr	r3, [r7, #12]
   2aa5a:	2b01      	cmp	r3, #1
   2aa5c:	d905      	bls.n	2aa6a <dir_sdi+0xbe>
   2aa5e:	687b      	ldr	r3, [r7, #4]
   2aa60:	681b      	ldr	r3, [r3, #0]
   2aa62:	699a      	ldr	r2, [r3, #24]
   2aa64:	68fb      	ldr	r3, [r7, #12]
   2aa66:	429a      	cmp	r2, r3
   2aa68:	d801      	bhi.n	2aa6e <dir_sdi+0xc2>
				return FR_INT_ERR;
   2aa6a:	2302      	movs	r3, #2
   2aa6c:	e02d      	b.n	2aaca <dir_sdi+0x11e>
			idx -= ic;
   2aa6e:	1cbb      	adds	r3, r7, #2
   2aa70:	1cb9      	adds	r1, r7, #2
   2aa72:	220a      	movs	r2, #10
   2aa74:	18ba      	adds	r2, r7, r2
   2aa76:	8809      	ldrh	r1, [r1, #0]
   2aa78:	8812      	ldrh	r2, [r2, #0]
   2aa7a:	1a8a      	subs	r2, r1, r2
   2aa7c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2aa7e:	1cba      	adds	r2, r7, #2
   2aa80:	230a      	movs	r3, #10
   2aa82:	18fb      	adds	r3, r7, r3
   2aa84:	8812      	ldrh	r2, [r2, #0]
   2aa86:	881b      	ldrh	r3, [r3, #0]
   2aa88:	429a      	cmp	r2, r3
   2aa8a:	d2d7      	bcs.n	2aa3c <dir_sdi+0x90>
		}
		dj->clust = clst;
   2aa8c:	687b      	ldr	r3, [r7, #4]
   2aa8e:	68fa      	ldr	r2, [r7, #12]
   2aa90:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2aa92:	687b      	ldr	r3, [r7, #4]
   2aa94:	681b      	ldr	r3, [r3, #0]
   2aa96:	68fa      	ldr	r2, [r7, #12]
   2aa98:	0011      	movs	r1, r2
   2aa9a:	0018      	movs	r0, r3
   2aa9c:	4b0e      	ldr	r3, [pc, #56]	; (2aad8 <dir_sdi+0x12c>)
   2aa9e:	4798      	blx	r3
   2aaa0:	0002      	movs	r2, r0
   2aaa2:	1cbb      	adds	r3, r7, #2
   2aaa4:	881b      	ldrh	r3, [r3, #0]
   2aaa6:	091b      	lsrs	r3, r3, #4
   2aaa8:	b29b      	uxth	r3, r3
   2aaaa:	18d2      	adds	r2, r2, r3
   2aaac:	687b      	ldr	r3, [r7, #4]
   2aaae:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2aab0:	687b      	ldr	r3, [r7, #4]
   2aab2:	681b      	ldr	r3, [r3, #0]
   2aab4:	3330      	adds	r3, #48	; 0x30
   2aab6:	001a      	movs	r2, r3
   2aab8:	1cbb      	adds	r3, r7, #2
   2aaba:	881b      	ldrh	r3, [r3, #0]
   2aabc:	210f      	movs	r1, #15
   2aabe:	400b      	ands	r3, r1
   2aac0:	015b      	lsls	r3, r3, #5
   2aac2:	18d2      	adds	r2, r2, r3
   2aac4:	687b      	ldr	r3, [r7, #4]
   2aac6:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2aac8:	2300      	movs	r3, #0
}
   2aaca:	0018      	movs	r0, r3
   2aacc:	46bd      	mov	sp, r7
   2aace:	b004      	add	sp, #16
   2aad0:	bd80      	pop	{r7, pc}
   2aad2:	46c0      	nop			; (mov r8, r8)
   2aad4:	0002a401 	.word	0x0002a401
   2aad8:	0002a3c9 	.word	0x0002a3c9

0002aadc <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2aadc:	b590      	push	{r4, r7, lr}
   2aade:	b085      	sub	sp, #20
   2aae0:	af00      	add	r7, sp, #0
   2aae2:	6078      	str	r0, [r7, #4]
   2aae4:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2aae6:	687b      	ldr	r3, [r7, #4]
   2aae8:	88da      	ldrh	r2, [r3, #6]
   2aaea:	2308      	movs	r3, #8
   2aaec:	18fb      	adds	r3, r7, r3
   2aaee:	3201      	adds	r2, #1
   2aaf0:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2aaf2:	2308      	movs	r3, #8
   2aaf4:	18fb      	adds	r3, r7, r3
   2aaf6:	881b      	ldrh	r3, [r3, #0]
   2aaf8:	2b00      	cmp	r3, #0
   2aafa:	d003      	beq.n	2ab04 <dir_next+0x28>
   2aafc:	687b      	ldr	r3, [r7, #4]
   2aafe:	691b      	ldr	r3, [r3, #16]
   2ab00:	2b00      	cmp	r3, #0
   2ab02:	d101      	bne.n	2ab08 <dir_next+0x2c>
		return FR_NO_FILE;
   2ab04:	2304      	movs	r3, #4
   2ab06:	e0d2      	b.n	2acae <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2ab08:	2308      	movs	r3, #8
   2ab0a:	18fb      	adds	r3, r7, r3
   2ab0c:	881b      	ldrh	r3, [r3, #0]
   2ab0e:	220f      	movs	r2, #15
   2ab10:	4013      	ands	r3, r2
   2ab12:	b29b      	uxth	r3, r3
   2ab14:	2b00      	cmp	r3, #0
   2ab16:	d000      	beq.n	2ab1a <dir_next+0x3e>
   2ab18:	e0b6      	b.n	2ac88 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2ab1a:	687b      	ldr	r3, [r7, #4]
   2ab1c:	691b      	ldr	r3, [r3, #16]
   2ab1e:	1c5a      	adds	r2, r3, #1
   2ab20:	687b      	ldr	r3, [r7, #4]
   2ab22:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2ab24:	687b      	ldr	r3, [r7, #4]
   2ab26:	68db      	ldr	r3, [r3, #12]
   2ab28:	2b00      	cmp	r3, #0
   2ab2a:	d10a      	bne.n	2ab42 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2ab2c:	687b      	ldr	r3, [r7, #4]
   2ab2e:	681b      	ldr	r3, [r3, #0]
   2ab30:	891b      	ldrh	r3, [r3, #8]
   2ab32:	2208      	movs	r2, #8
   2ab34:	18ba      	adds	r2, r7, r2
   2ab36:	8812      	ldrh	r2, [r2, #0]
   2ab38:	429a      	cmp	r2, r3
   2ab3a:	d200      	bcs.n	2ab3e <dir_next+0x62>
   2ab3c:	e0a4      	b.n	2ac88 <dir_next+0x1ac>
				return FR_NO_FILE;
   2ab3e:	2304      	movs	r3, #4
   2ab40:	e0b5      	b.n	2acae <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2ab42:	2308      	movs	r3, #8
   2ab44:	18fb      	adds	r3, r7, r3
   2ab46:	881b      	ldrh	r3, [r3, #0]
   2ab48:	091b      	lsrs	r3, r3, #4
   2ab4a:	b29b      	uxth	r3, r3
   2ab4c:	001a      	movs	r2, r3
   2ab4e:	687b      	ldr	r3, [r7, #4]
   2ab50:	681b      	ldr	r3, [r3, #0]
   2ab52:	789b      	ldrb	r3, [r3, #2]
   2ab54:	3b01      	subs	r3, #1
   2ab56:	4013      	ands	r3, r2
   2ab58:	d000      	beq.n	2ab5c <dir_next+0x80>
   2ab5a:	e095      	b.n	2ac88 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2ab5c:	687b      	ldr	r3, [r7, #4]
   2ab5e:	681a      	ldr	r2, [r3, #0]
   2ab60:	687b      	ldr	r3, [r7, #4]
   2ab62:	68db      	ldr	r3, [r3, #12]
   2ab64:	0019      	movs	r1, r3
   2ab66:	0010      	movs	r0, r2
   2ab68:	4b53      	ldr	r3, [pc, #332]	; (2acb8 <dir_next+0x1dc>)
   2ab6a:	4798      	blx	r3
   2ab6c:	0003      	movs	r3, r0
   2ab6e:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2ab70:	68fb      	ldr	r3, [r7, #12]
   2ab72:	2b01      	cmp	r3, #1
   2ab74:	d801      	bhi.n	2ab7a <dir_next+0x9e>
   2ab76:	2302      	movs	r3, #2
   2ab78:	e099      	b.n	2acae <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2ab7a:	68fb      	ldr	r3, [r7, #12]
   2ab7c:	3301      	adds	r3, #1
   2ab7e:	d101      	bne.n	2ab84 <dir_next+0xa8>
   2ab80:	2301      	movs	r3, #1
   2ab82:	e094      	b.n	2acae <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2ab84:	687b      	ldr	r3, [r7, #4]
   2ab86:	681b      	ldr	r3, [r3, #0]
   2ab88:	699a      	ldr	r2, [r3, #24]
   2ab8a:	68fb      	ldr	r3, [r7, #12]
   2ab8c:	429a      	cmp	r2, r3
   2ab8e:	d900      	bls.n	2ab92 <dir_next+0xb6>
   2ab90:	e06d      	b.n	2ac6e <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2ab92:	683b      	ldr	r3, [r7, #0]
   2ab94:	2b00      	cmp	r3, #0
   2ab96:	d101      	bne.n	2ab9c <dir_next+0xc0>
   2ab98:	2304      	movs	r3, #4
   2ab9a:	e088      	b.n	2acae <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2ab9c:	687b      	ldr	r3, [r7, #4]
   2ab9e:	681a      	ldr	r2, [r3, #0]
   2aba0:	687b      	ldr	r3, [r7, #4]
   2aba2:	68db      	ldr	r3, [r3, #12]
   2aba4:	0019      	movs	r1, r3
   2aba6:	0010      	movs	r0, r2
   2aba8:	4b44      	ldr	r3, [pc, #272]	; (2acbc <dir_next+0x1e0>)
   2abaa:	4798      	blx	r3
   2abac:	0003      	movs	r3, r0
   2abae:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2abb0:	68fb      	ldr	r3, [r7, #12]
   2abb2:	2b00      	cmp	r3, #0
   2abb4:	d101      	bne.n	2abba <dir_next+0xde>
   2abb6:	2307      	movs	r3, #7
   2abb8:	e079      	b.n	2acae <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2abba:	68fb      	ldr	r3, [r7, #12]
   2abbc:	2b01      	cmp	r3, #1
   2abbe:	d101      	bne.n	2abc4 <dir_next+0xe8>
   2abc0:	2302      	movs	r3, #2
   2abc2:	e074      	b.n	2acae <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2abc4:	68fb      	ldr	r3, [r7, #12]
   2abc6:	3301      	adds	r3, #1
   2abc8:	d101      	bne.n	2abce <dir_next+0xf2>
   2abca:	2301      	movs	r3, #1
   2abcc:	e06f      	b.n	2acae <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2abce:	687b      	ldr	r3, [r7, #4]
   2abd0:	681b      	ldr	r3, [r3, #0]
   2abd2:	2100      	movs	r1, #0
   2abd4:	0018      	movs	r0, r3
   2abd6:	4b3a      	ldr	r3, [pc, #232]	; (2acc0 <dir_next+0x1e4>)
   2abd8:	4798      	blx	r3
   2abda:	1e03      	subs	r3, r0, #0
   2abdc:	d001      	beq.n	2abe2 <dir_next+0x106>
   2abde:	2301      	movs	r3, #1
   2abe0:	e065      	b.n	2acae <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2abe2:	687b      	ldr	r3, [r7, #4]
   2abe4:	681b      	ldr	r3, [r3, #0]
   2abe6:	3330      	adds	r3, #48	; 0x30
   2abe8:	0018      	movs	r0, r3
   2abea:	2380      	movs	r3, #128	; 0x80
   2abec:	009b      	lsls	r3, r3, #2
   2abee:	001a      	movs	r2, r3
   2abf0:	2100      	movs	r1, #0
   2abf2:	4b34      	ldr	r3, [pc, #208]	; (2acc4 <dir_next+0x1e8>)
   2abf4:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2abf6:	687b      	ldr	r3, [r7, #4]
   2abf8:	681c      	ldr	r4, [r3, #0]
   2abfa:	687b      	ldr	r3, [r7, #4]
   2abfc:	681b      	ldr	r3, [r3, #0]
   2abfe:	68fa      	ldr	r2, [r7, #12]
   2ac00:	0011      	movs	r1, r2
   2ac02:	0018      	movs	r0, r3
   2ac04:	4b30      	ldr	r3, [pc, #192]	; (2acc8 <dir_next+0x1ec>)
   2ac06:	4798      	blx	r3
   2ac08:	0003      	movs	r3, r0
   2ac0a:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2ac0c:	230b      	movs	r3, #11
   2ac0e:	18fb      	adds	r3, r7, r3
   2ac10:	2200      	movs	r2, #0
   2ac12:	701a      	strb	r2, [r3, #0]
   2ac14:	e019      	b.n	2ac4a <dir_next+0x16e>
						dj->fs->wflag = 1;
   2ac16:	687b      	ldr	r3, [r7, #4]
   2ac18:	681b      	ldr	r3, [r3, #0]
   2ac1a:	2201      	movs	r2, #1
   2ac1c:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2ac1e:	687b      	ldr	r3, [r7, #4]
   2ac20:	681b      	ldr	r3, [r3, #0]
   2ac22:	2100      	movs	r1, #0
   2ac24:	0018      	movs	r0, r3
   2ac26:	4b26      	ldr	r3, [pc, #152]	; (2acc0 <dir_next+0x1e4>)
   2ac28:	4798      	blx	r3
   2ac2a:	1e03      	subs	r3, r0, #0
   2ac2c:	d001      	beq.n	2ac32 <dir_next+0x156>
   2ac2e:	2301      	movs	r3, #1
   2ac30:	e03d      	b.n	2acae <dir_next+0x1d2>
						dj->fs->winsect++;
   2ac32:	687b      	ldr	r3, [r7, #4]
   2ac34:	681b      	ldr	r3, [r3, #0]
   2ac36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ac38:	3201      	adds	r2, #1
   2ac3a:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2ac3c:	230b      	movs	r3, #11
   2ac3e:	18fb      	adds	r3, r7, r3
   2ac40:	781a      	ldrb	r2, [r3, #0]
   2ac42:	230b      	movs	r3, #11
   2ac44:	18fb      	adds	r3, r7, r3
   2ac46:	3201      	adds	r2, #1
   2ac48:	701a      	strb	r2, [r3, #0]
   2ac4a:	687b      	ldr	r3, [r7, #4]
   2ac4c:	681b      	ldr	r3, [r3, #0]
   2ac4e:	789b      	ldrb	r3, [r3, #2]
   2ac50:	220b      	movs	r2, #11
   2ac52:	18ba      	adds	r2, r7, r2
   2ac54:	7812      	ldrb	r2, [r2, #0]
   2ac56:	429a      	cmp	r2, r3
   2ac58:	d3dd      	bcc.n	2ac16 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2ac5a:	687b      	ldr	r3, [r7, #4]
   2ac5c:	681b      	ldr	r3, [r3, #0]
   2ac5e:	687a      	ldr	r2, [r7, #4]
   2ac60:	6812      	ldr	r2, [r2, #0]
   2ac62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2ac64:	220b      	movs	r2, #11
   2ac66:	18ba      	adds	r2, r7, r2
   2ac68:	7812      	ldrb	r2, [r2, #0]
   2ac6a:	1a8a      	subs	r2, r1, r2
   2ac6c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2ac6e:	687b      	ldr	r3, [r7, #4]
   2ac70:	68fa      	ldr	r2, [r7, #12]
   2ac72:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2ac74:	687b      	ldr	r3, [r7, #4]
   2ac76:	681b      	ldr	r3, [r3, #0]
   2ac78:	68fa      	ldr	r2, [r7, #12]
   2ac7a:	0011      	movs	r1, r2
   2ac7c:	0018      	movs	r0, r3
   2ac7e:	4b12      	ldr	r3, [pc, #72]	; (2acc8 <dir_next+0x1ec>)
   2ac80:	4798      	blx	r3
   2ac82:	0002      	movs	r2, r0
   2ac84:	687b      	ldr	r3, [r7, #4]
   2ac86:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2ac88:	687b      	ldr	r3, [r7, #4]
   2ac8a:	2208      	movs	r2, #8
   2ac8c:	18ba      	adds	r2, r7, r2
   2ac8e:	8812      	ldrh	r2, [r2, #0]
   2ac90:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2ac92:	687b      	ldr	r3, [r7, #4]
   2ac94:	681b      	ldr	r3, [r3, #0]
   2ac96:	3330      	adds	r3, #48	; 0x30
   2ac98:	001a      	movs	r2, r3
   2ac9a:	2308      	movs	r3, #8
   2ac9c:	18fb      	adds	r3, r7, r3
   2ac9e:	881b      	ldrh	r3, [r3, #0]
   2aca0:	210f      	movs	r1, #15
   2aca2:	400b      	ands	r3, r1
   2aca4:	015b      	lsls	r3, r3, #5
   2aca6:	18d2      	adds	r2, r2, r3
   2aca8:	687b      	ldr	r3, [r7, #4]
   2acaa:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2acac:	2300      	movs	r3, #0
}
   2acae:	0018      	movs	r0, r3
   2acb0:	46bd      	mov	sp, r7
   2acb2:	b005      	add	sp, #20
   2acb4:	bd90      	pop	{r4, r7, pc}
   2acb6:	46c0      	nop			; (mov r8, r8)
   2acb8:	0002a401 	.word	0x0002a401
   2acbc:	0002a871 	.word	0x0002a871
   2acc0:	0002a169 	.word	0x0002a169
   2acc4:	0002a0bd 	.word	0x0002a0bd
   2acc8:	0002a3c9 	.word	0x0002a3c9

0002accc <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2accc:	b590      	push	{r4, r7, lr}
   2acce:	b087      	sub	sp, #28
   2acd0:	af00      	add	r7, sp, #0
   2acd2:	6078      	str	r0, [r7, #4]
   2acd4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2acd6:	683b      	ldr	r3, [r7, #0]
   2acd8:	781b      	ldrb	r3, [r3, #0]
   2acda:	001a      	movs	r2, r3
   2acdc:	2340      	movs	r3, #64	; 0x40
   2acde:	439a      	bics	r2, r3
   2ace0:	0013      	movs	r3, r2
   2ace2:	1e5a      	subs	r2, r3, #1
   2ace4:	0013      	movs	r3, r2
   2ace6:	005b      	lsls	r3, r3, #1
   2ace8:	189b      	adds	r3, r3, r2
   2acea:	009b      	lsls	r3, r3, #2
   2acec:	189b      	adds	r3, r3, r2
   2acee:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2acf0:	2300      	movs	r3, #0
   2acf2:	613b      	str	r3, [r7, #16]
   2acf4:	230e      	movs	r3, #14
   2acf6:	18fb      	adds	r3, r7, r3
   2acf8:	2201      	movs	r2, #1
   2acfa:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2acfc:	4a31      	ldr	r2, [pc, #196]	; (2adc4 <cmp_lfn+0xf8>)
   2acfe:	693b      	ldr	r3, [r7, #16]
   2ad00:	18d3      	adds	r3, r2, r3
   2ad02:	781b      	ldrb	r3, [r3, #0]
   2ad04:	3301      	adds	r3, #1
   2ad06:	683a      	ldr	r2, [r7, #0]
   2ad08:	18d3      	adds	r3, r2, r3
   2ad0a:	781b      	ldrb	r3, [r3, #0]
   2ad0c:	021b      	lsls	r3, r3, #8
   2ad0e:	b21a      	sxth	r2, r3
   2ad10:	492c      	ldr	r1, [pc, #176]	; (2adc4 <cmp_lfn+0xf8>)
   2ad12:	693b      	ldr	r3, [r7, #16]
   2ad14:	18cb      	adds	r3, r1, r3
   2ad16:	781b      	ldrb	r3, [r3, #0]
   2ad18:	0019      	movs	r1, r3
   2ad1a:	683b      	ldr	r3, [r7, #0]
   2ad1c:	185b      	adds	r3, r3, r1
   2ad1e:	781b      	ldrb	r3, [r3, #0]
   2ad20:	b21b      	sxth	r3, r3
   2ad22:	4313      	orrs	r3, r2
   2ad24:	b21a      	sxth	r2, r3
   2ad26:	230c      	movs	r3, #12
   2ad28:	18fb      	adds	r3, r7, r3
   2ad2a:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2ad2c:	230e      	movs	r3, #14
   2ad2e:	18fb      	adds	r3, r7, r3
   2ad30:	881b      	ldrh	r3, [r3, #0]
   2ad32:	2b00      	cmp	r3, #0
   2ad34:	d01f      	beq.n	2ad76 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2ad36:	230e      	movs	r3, #14
   2ad38:	18fc      	adds	r4, r7, r3
   2ad3a:	230c      	movs	r3, #12
   2ad3c:	18fb      	adds	r3, r7, r3
   2ad3e:	881b      	ldrh	r3, [r3, #0]
   2ad40:	0018      	movs	r0, r3
   2ad42:	4b21      	ldr	r3, [pc, #132]	; (2adc8 <cmp_lfn+0xfc>)
   2ad44:	4798      	blx	r3
   2ad46:	0003      	movs	r3, r0
   2ad48:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2ad4a:	697b      	ldr	r3, [r7, #20]
   2ad4c:	2bfe      	cmp	r3, #254	; 0xfe
   2ad4e:	d810      	bhi.n	2ad72 <cmp_lfn+0xa6>
   2ad50:	697b      	ldr	r3, [r7, #20]
   2ad52:	1c5a      	adds	r2, r3, #1
   2ad54:	617a      	str	r2, [r7, #20]
   2ad56:	005b      	lsls	r3, r3, #1
   2ad58:	687a      	ldr	r2, [r7, #4]
   2ad5a:	18d3      	adds	r3, r2, r3
   2ad5c:	881b      	ldrh	r3, [r3, #0]
   2ad5e:	0018      	movs	r0, r3
   2ad60:	4b19      	ldr	r3, [pc, #100]	; (2adc8 <cmp_lfn+0xfc>)
   2ad62:	4798      	blx	r3
   2ad64:	0003      	movs	r3, r0
   2ad66:	001a      	movs	r2, r3
   2ad68:	230e      	movs	r3, #14
   2ad6a:	18fb      	adds	r3, r7, r3
   2ad6c:	881b      	ldrh	r3, [r3, #0]
   2ad6e:	4293      	cmp	r3, r2
   2ad70:	d009      	beq.n	2ad86 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2ad72:	2300      	movs	r3, #0
   2ad74:	e022      	b.n	2adbc <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2ad76:	230c      	movs	r3, #12
   2ad78:	18fb      	adds	r3, r7, r3
   2ad7a:	881b      	ldrh	r3, [r3, #0]
   2ad7c:	4a13      	ldr	r2, [pc, #76]	; (2adcc <cmp_lfn+0x100>)
   2ad7e:	4293      	cmp	r3, r2
   2ad80:	d001      	beq.n	2ad86 <cmp_lfn+0xba>
   2ad82:	2300      	movs	r3, #0
   2ad84:	e01a      	b.n	2adbc <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2ad86:	693b      	ldr	r3, [r7, #16]
   2ad88:	3301      	adds	r3, #1
   2ad8a:	613b      	str	r3, [r7, #16]
   2ad8c:	693b      	ldr	r3, [r7, #16]
   2ad8e:	2b0c      	cmp	r3, #12
   2ad90:	d9b4      	bls.n	2acfc <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2ad92:	683b      	ldr	r3, [r7, #0]
   2ad94:	781b      	ldrb	r3, [r3, #0]
   2ad96:	001a      	movs	r2, r3
   2ad98:	2340      	movs	r3, #64	; 0x40
   2ad9a:	4013      	ands	r3, r2
   2ad9c:	d00d      	beq.n	2adba <cmp_lfn+0xee>
   2ad9e:	230e      	movs	r3, #14
   2ada0:	18fb      	adds	r3, r7, r3
   2ada2:	881b      	ldrh	r3, [r3, #0]
   2ada4:	2b00      	cmp	r3, #0
   2ada6:	d008      	beq.n	2adba <cmp_lfn+0xee>
   2ada8:	697b      	ldr	r3, [r7, #20]
   2adaa:	005b      	lsls	r3, r3, #1
   2adac:	687a      	ldr	r2, [r7, #4]
   2adae:	18d3      	adds	r3, r2, r3
   2adb0:	881b      	ldrh	r3, [r3, #0]
   2adb2:	2b00      	cmp	r3, #0
   2adb4:	d001      	beq.n	2adba <cmp_lfn+0xee>
		return 0;
   2adb6:	2300      	movs	r3, #0
   2adb8:	e000      	b.n	2adbc <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2adba:	2301      	movs	r3, #1
}
   2adbc:	0018      	movs	r0, r3
   2adbe:	46bd      	mov	sp, r7
   2adc0:	b007      	add	sp, #28
   2adc2:	bd90      	pop	{r4, r7, pc}
   2adc4:	00037a94 	.word	0x00037a94
   2adc8:	0002cd79 	.word	0x0002cd79
   2adcc:	0000ffff 	.word	0x0000ffff

0002add0 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2add0:	b580      	push	{r7, lr}
   2add2:	b088      	sub	sp, #32
   2add4:	af00      	add	r7, sp, #0
   2add6:	60f8      	str	r0, [r7, #12]
   2add8:	60b9      	str	r1, [r7, #8]
   2adda:	0019      	movs	r1, r3
   2addc:	1dfb      	adds	r3, r7, #7
   2adde:	701a      	strb	r2, [r3, #0]
   2ade0:	1dbb      	adds	r3, r7, #6
   2ade2:	1c0a      	adds	r2, r1, #0
   2ade4:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2ade6:	68bb      	ldr	r3, [r7, #8]
   2ade8:	330d      	adds	r3, #13
   2adea:	1dba      	adds	r2, r7, #6
   2adec:	7812      	ldrb	r2, [r2, #0]
   2adee:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2adf0:	68bb      	ldr	r3, [r7, #8]
   2adf2:	330b      	adds	r3, #11
   2adf4:	220f      	movs	r2, #15
   2adf6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2adf8:	68bb      	ldr	r3, [r7, #8]
   2adfa:	330c      	adds	r3, #12
   2adfc:	2200      	movs	r2, #0
   2adfe:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2ae00:	68bb      	ldr	r3, [r7, #8]
   2ae02:	331a      	adds	r3, #26
   2ae04:	2200      	movs	r2, #0
   2ae06:	701a      	strb	r2, [r3, #0]
   2ae08:	68bb      	ldr	r3, [r7, #8]
   2ae0a:	331b      	adds	r3, #27
   2ae0c:	2200      	movs	r2, #0
   2ae0e:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2ae10:	1dfb      	adds	r3, r7, #7
   2ae12:	781b      	ldrb	r3, [r3, #0]
   2ae14:	1e5a      	subs	r2, r3, #1
   2ae16:	0013      	movs	r3, r2
   2ae18:	005b      	lsls	r3, r3, #1
   2ae1a:	189b      	adds	r3, r3, r2
   2ae1c:	009b      	lsls	r3, r3, #2
   2ae1e:	189b      	adds	r3, r3, r2
   2ae20:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2ae22:	2316      	movs	r3, #22
   2ae24:	18fb      	adds	r3, r7, r3
   2ae26:	2200      	movs	r2, #0
   2ae28:	801a      	strh	r2, [r3, #0]
   2ae2a:	2300      	movs	r3, #0
   2ae2c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2ae2e:	2316      	movs	r3, #22
   2ae30:	18fb      	adds	r3, r7, r3
   2ae32:	881b      	ldrh	r3, [r3, #0]
   2ae34:	4a28      	ldr	r2, [pc, #160]	; (2aed8 <fit_lfn+0x108>)
   2ae36:	4293      	cmp	r3, r2
   2ae38:	d009      	beq.n	2ae4e <fit_lfn+0x7e>
   2ae3a:	69fb      	ldr	r3, [r7, #28]
   2ae3c:	1c5a      	adds	r2, r3, #1
   2ae3e:	61fa      	str	r2, [r7, #28]
   2ae40:	005b      	lsls	r3, r3, #1
   2ae42:	68fa      	ldr	r2, [r7, #12]
   2ae44:	18d2      	adds	r2, r2, r3
   2ae46:	2316      	movs	r3, #22
   2ae48:	18fb      	adds	r3, r7, r3
   2ae4a:	8812      	ldrh	r2, [r2, #0]
   2ae4c:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2ae4e:	4a23      	ldr	r2, [pc, #140]	; (2aedc <fit_lfn+0x10c>)
   2ae50:	69bb      	ldr	r3, [r7, #24]
   2ae52:	18d3      	adds	r3, r2, r3
   2ae54:	781b      	ldrb	r3, [r3, #0]
   2ae56:	001a      	movs	r2, r3
   2ae58:	68bb      	ldr	r3, [r7, #8]
   2ae5a:	189b      	adds	r3, r3, r2
   2ae5c:	2216      	movs	r2, #22
   2ae5e:	18ba      	adds	r2, r7, r2
   2ae60:	8812      	ldrh	r2, [r2, #0]
   2ae62:	b2d2      	uxtb	r2, r2
   2ae64:	701a      	strb	r2, [r3, #0]
   2ae66:	4a1d      	ldr	r2, [pc, #116]	; (2aedc <fit_lfn+0x10c>)
   2ae68:	69bb      	ldr	r3, [r7, #24]
   2ae6a:	18d3      	adds	r3, r2, r3
   2ae6c:	781b      	ldrb	r3, [r3, #0]
   2ae6e:	3301      	adds	r3, #1
   2ae70:	68ba      	ldr	r2, [r7, #8]
   2ae72:	18d3      	adds	r3, r2, r3
   2ae74:	2216      	movs	r2, #22
   2ae76:	18ba      	adds	r2, r7, r2
   2ae78:	8812      	ldrh	r2, [r2, #0]
   2ae7a:	0a12      	lsrs	r2, r2, #8
   2ae7c:	b292      	uxth	r2, r2
   2ae7e:	b2d2      	uxtb	r2, r2
   2ae80:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2ae82:	2316      	movs	r3, #22
   2ae84:	18fb      	adds	r3, r7, r3
   2ae86:	881b      	ldrh	r3, [r3, #0]
   2ae88:	2b00      	cmp	r3, #0
   2ae8a:	d104      	bne.n	2ae96 <fit_lfn+0xc6>
   2ae8c:	2316      	movs	r3, #22
   2ae8e:	18fb      	adds	r3, r7, r3
   2ae90:	2201      	movs	r2, #1
   2ae92:	4252      	negs	r2, r2
   2ae94:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2ae96:	69bb      	ldr	r3, [r7, #24]
   2ae98:	3301      	adds	r3, #1
   2ae9a:	61bb      	str	r3, [r7, #24]
   2ae9c:	69bb      	ldr	r3, [r7, #24]
   2ae9e:	2b0c      	cmp	r3, #12
   2aea0:	d9c5      	bls.n	2ae2e <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2aea2:	2316      	movs	r3, #22
   2aea4:	18fb      	adds	r3, r7, r3
   2aea6:	881b      	ldrh	r3, [r3, #0]
   2aea8:	4a0b      	ldr	r2, [pc, #44]	; (2aed8 <fit_lfn+0x108>)
   2aeaa:	4293      	cmp	r3, r2
   2aeac:	d006      	beq.n	2aebc <fit_lfn+0xec>
   2aeae:	69fb      	ldr	r3, [r7, #28]
   2aeb0:	005b      	lsls	r3, r3, #1
   2aeb2:	68fa      	ldr	r2, [r7, #12]
   2aeb4:	18d3      	adds	r3, r2, r3
   2aeb6:	881b      	ldrh	r3, [r3, #0]
   2aeb8:	2b00      	cmp	r3, #0
   2aeba:	d105      	bne.n	2aec8 <fit_lfn+0xf8>
   2aebc:	1dfb      	adds	r3, r7, #7
   2aebe:	1dfa      	adds	r2, r7, #7
   2aec0:	7812      	ldrb	r2, [r2, #0]
   2aec2:	2140      	movs	r1, #64	; 0x40
   2aec4:	430a      	orrs	r2, r1
   2aec6:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2aec8:	68bb      	ldr	r3, [r7, #8]
   2aeca:	1dfa      	adds	r2, r7, #7
   2aecc:	7812      	ldrb	r2, [r2, #0]
   2aece:	701a      	strb	r2, [r3, #0]
}
   2aed0:	46c0      	nop			; (mov r8, r8)
   2aed2:	46bd      	mov	sp, r7
   2aed4:	b008      	add	sp, #32
   2aed6:	bd80      	pop	{r7, pc}
   2aed8:	0000ffff 	.word	0x0000ffff
   2aedc:	00037a94 	.word	0x00037a94

0002aee0 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2aee0:	b580      	push	{r7, lr}
   2aee2:	b08a      	sub	sp, #40	; 0x28
   2aee4:	af00      	add	r7, sp, #0
   2aee6:	60f8      	str	r0, [r7, #12]
   2aee8:	60b9      	str	r1, [r7, #8]
   2aeea:	607a      	str	r2, [r7, #4]
   2aeec:	001a      	movs	r2, r3
   2aeee:	1cbb      	adds	r3, r7, #2
   2aef0:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2aef2:	68b9      	ldr	r1, [r7, #8]
   2aef4:	68fb      	ldr	r3, [r7, #12]
   2aef6:	220b      	movs	r2, #11
   2aef8:	0018      	movs	r0, r3
   2aefa:	4b38      	ldr	r3, [pc, #224]	; (2afdc <gen_numname+0xfc>)
   2aefc:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2aefe:	1cbb      	adds	r3, r7, #2
   2af00:	881b      	ldrh	r3, [r3, #0]
   2af02:	2b05      	cmp	r3, #5
   2af04:	d911      	bls.n	2af2a <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2af06:	1cbb      	adds	r3, r7, #2
   2af08:	881b      	ldrh	r3, [r3, #0]
   2af0a:	b29a      	uxth	r2, r3
   2af0c:	0852      	lsrs	r2, r2, #1
   2af0e:	03db      	lsls	r3, r3, #15
   2af10:	4313      	orrs	r3, r2
   2af12:	b299      	uxth	r1, r3
   2af14:	687b      	ldr	r3, [r7, #4]
   2af16:	1c9a      	adds	r2, r3, #2
   2af18:	607a      	str	r2, [r7, #4]
   2af1a:	881a      	ldrh	r2, [r3, #0]
   2af1c:	1cbb      	adds	r3, r7, #2
   2af1e:	188a      	adds	r2, r1, r2
   2af20:	801a      	strh	r2, [r3, #0]
   2af22:	687b      	ldr	r3, [r7, #4]
   2af24:	881b      	ldrh	r3, [r3, #0]
   2af26:	2b00      	cmp	r3, #0
   2af28:	d1ed      	bne.n	2af06 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2af2a:	2307      	movs	r3, #7
   2af2c:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2af2e:	1cbb      	adds	r3, r7, #2
   2af30:	881b      	ldrh	r3, [r3, #0]
   2af32:	b2db      	uxtb	r3, r3
   2af34:	220f      	movs	r2, #15
   2af36:	4013      	ands	r3, r2
   2af38:	b2da      	uxtb	r2, r3
   2af3a:	2327      	movs	r3, #39	; 0x27
   2af3c:	18fb      	adds	r3, r7, r3
   2af3e:	3230      	adds	r2, #48	; 0x30
   2af40:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2af42:	2327      	movs	r3, #39	; 0x27
   2af44:	18fb      	adds	r3, r7, r3
   2af46:	781b      	ldrb	r3, [r3, #0]
   2af48:	2b39      	cmp	r3, #57	; 0x39
   2af4a:	d906      	bls.n	2af5a <gen_numname+0x7a>
   2af4c:	2327      	movs	r3, #39	; 0x27
   2af4e:	18fb      	adds	r3, r7, r3
   2af50:	2227      	movs	r2, #39	; 0x27
   2af52:	18ba      	adds	r2, r7, r2
   2af54:	7812      	ldrb	r2, [r2, #0]
   2af56:	3207      	adds	r2, #7
   2af58:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2af5a:	6a3b      	ldr	r3, [r7, #32]
   2af5c:	1e5a      	subs	r2, r3, #1
   2af5e:	623a      	str	r2, [r7, #32]
   2af60:	2214      	movs	r2, #20
   2af62:	18ba      	adds	r2, r7, r2
   2af64:	2127      	movs	r1, #39	; 0x27
   2af66:	1879      	adds	r1, r7, r1
   2af68:	7809      	ldrb	r1, [r1, #0]
   2af6a:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2af6c:	1cbb      	adds	r3, r7, #2
   2af6e:	1cba      	adds	r2, r7, #2
   2af70:	8812      	ldrh	r2, [r2, #0]
   2af72:	0912      	lsrs	r2, r2, #4
   2af74:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2af76:	1cbb      	adds	r3, r7, #2
   2af78:	881b      	ldrh	r3, [r3, #0]
   2af7a:	2b00      	cmp	r3, #0
   2af7c:	d1d7      	bne.n	2af2e <gen_numname+0x4e>
	ns[i] = '~';
   2af7e:	2314      	movs	r3, #20
   2af80:	18fa      	adds	r2, r7, r3
   2af82:	6a3b      	ldr	r3, [r7, #32]
   2af84:	18d3      	adds	r3, r2, r3
   2af86:	227e      	movs	r2, #126	; 0x7e
   2af88:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2af8a:	2300      	movs	r3, #0
   2af8c:	61fb      	str	r3, [r7, #28]
   2af8e:	e002      	b.n	2af96 <gen_numname+0xb6>
   2af90:	69fb      	ldr	r3, [r7, #28]
   2af92:	3301      	adds	r3, #1
   2af94:	61fb      	str	r3, [r7, #28]
   2af96:	69fa      	ldr	r2, [r7, #28]
   2af98:	6a3b      	ldr	r3, [r7, #32]
   2af9a:	429a      	cmp	r2, r3
   2af9c:	d205      	bcs.n	2afaa <gen_numname+0xca>
   2af9e:	68fa      	ldr	r2, [r7, #12]
   2afa0:	69fb      	ldr	r3, [r7, #28]
   2afa2:	18d3      	adds	r3, r2, r3
   2afa4:	781b      	ldrb	r3, [r3, #0]
   2afa6:	2b20      	cmp	r3, #32
   2afa8:	d1f2      	bne.n	2af90 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2afaa:	69fb      	ldr	r3, [r7, #28]
   2afac:	1c5a      	adds	r2, r3, #1
   2afae:	61fa      	str	r2, [r7, #28]
   2afb0:	68fa      	ldr	r2, [r7, #12]
   2afb2:	18d2      	adds	r2, r2, r3
   2afb4:	6a3b      	ldr	r3, [r7, #32]
   2afb6:	2b07      	cmp	r3, #7
   2afb8:	d806      	bhi.n	2afc8 <gen_numname+0xe8>
   2afba:	6a3b      	ldr	r3, [r7, #32]
   2afbc:	1c59      	adds	r1, r3, #1
   2afbe:	6239      	str	r1, [r7, #32]
   2afc0:	2114      	movs	r1, #20
   2afc2:	1879      	adds	r1, r7, r1
   2afc4:	5ccb      	ldrb	r3, [r1, r3]
   2afc6:	e000      	b.n	2afca <gen_numname+0xea>
   2afc8:	2320      	movs	r3, #32
   2afca:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2afcc:	69fb      	ldr	r3, [r7, #28]
   2afce:	2b07      	cmp	r3, #7
   2afd0:	d9eb      	bls.n	2afaa <gen_numname+0xca>
}
   2afd2:	46c0      	nop			; (mov r8, r8)
   2afd4:	46bd      	mov	sp, r7
   2afd6:	b00a      	add	sp, #40	; 0x28
   2afd8:	bd80      	pop	{r7, pc}
   2afda:	46c0      	nop			; (mov r8, r8)
   2afdc:	0002a085 	.word	0x0002a085

0002afe0 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2afe0:	b580      	push	{r7, lr}
   2afe2:	b084      	sub	sp, #16
   2afe4:	af00      	add	r7, sp, #0
   2afe6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2afe8:	230f      	movs	r3, #15
   2afea:	18fb      	adds	r3, r7, r3
   2afec:	2200      	movs	r2, #0
   2afee:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2aff0:	230b      	movs	r3, #11
   2aff2:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2aff4:	230f      	movs	r3, #15
   2aff6:	18fb      	adds	r3, r7, r3
   2aff8:	781b      	ldrb	r3, [r3, #0]
   2affa:	b2da      	uxtb	r2, r3
   2affc:	0852      	lsrs	r2, r2, #1
   2affe:	01db      	lsls	r3, r3, #7
   2b000:	4313      	orrs	r3, r2
   2b002:	b2d9      	uxtb	r1, r3
   2b004:	687b      	ldr	r3, [r7, #4]
   2b006:	1c5a      	adds	r2, r3, #1
   2b008:	607a      	str	r2, [r7, #4]
   2b00a:	781a      	ldrb	r2, [r3, #0]
   2b00c:	230f      	movs	r3, #15
   2b00e:	18fb      	adds	r3, r7, r3
   2b010:	188a      	adds	r2, r1, r2
   2b012:	701a      	strb	r2, [r3, #0]
   2b014:	68bb      	ldr	r3, [r7, #8]
   2b016:	3b01      	subs	r3, #1
   2b018:	60bb      	str	r3, [r7, #8]
   2b01a:	68bb      	ldr	r3, [r7, #8]
   2b01c:	2b00      	cmp	r3, #0
   2b01e:	d1e9      	bne.n	2aff4 <sum_sfn+0x14>
	return sum;
   2b020:	230f      	movs	r3, #15
   2b022:	18fb      	adds	r3, r7, r3
   2b024:	781b      	ldrb	r3, [r3, #0]
}
   2b026:	0018      	movs	r0, r3
   2b028:	46bd      	mov	sp, r7
   2b02a:	b004      	add	sp, #16
   2b02c:	bd80      	pop	{r7, pc}
	...

0002b030 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2b030:	b590      	push	{r4, r7, lr}
   2b032:	b087      	sub	sp, #28
   2b034:	af00      	add	r7, sp, #0
   2b036:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2b038:	2317      	movs	r3, #23
   2b03a:	18fc      	adds	r4, r7, r3
   2b03c:	687b      	ldr	r3, [r7, #4]
   2b03e:	2100      	movs	r1, #0
   2b040:	0018      	movs	r0, r3
   2b042:	4b74      	ldr	r3, [pc, #464]	; (2b214 <dir_find+0x1e4>)
   2b044:	4798      	blx	r3
   2b046:	0003      	movs	r3, r0
   2b048:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2b04a:	2317      	movs	r3, #23
   2b04c:	18fb      	adds	r3, r7, r3
   2b04e:	781b      	ldrb	r3, [r3, #0]
   2b050:	2b00      	cmp	r3, #0
   2b052:	d003      	beq.n	2b05c <dir_find+0x2c>
   2b054:	2317      	movs	r3, #23
   2b056:	18fb      	adds	r3, r7, r3
   2b058:	781b      	ldrb	r3, [r3, #0]
   2b05a:	e0d6      	b.n	2b20a <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2b05c:	2314      	movs	r3, #20
   2b05e:	18fb      	adds	r3, r7, r3
   2b060:	22ff      	movs	r2, #255	; 0xff
   2b062:	701a      	strb	r2, [r3, #0]
   2b064:	2315      	movs	r3, #21
   2b066:	18fb      	adds	r3, r7, r3
   2b068:	2214      	movs	r2, #20
   2b06a:	18ba      	adds	r2, r7, r2
   2b06c:	7812      	ldrb	r2, [r2, #0]
   2b06e:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2b070:	687b      	ldr	r3, [r7, #4]
   2b072:	681a      	ldr	r2, [r3, #0]
   2b074:	687b      	ldr	r3, [r7, #4]
   2b076:	691b      	ldr	r3, [r3, #16]
   2b078:	2117      	movs	r1, #23
   2b07a:	187c      	adds	r4, r7, r1
   2b07c:	0019      	movs	r1, r3
   2b07e:	0010      	movs	r0, r2
   2b080:	4b65      	ldr	r3, [pc, #404]	; (2b218 <dir_find+0x1e8>)
   2b082:	4798      	blx	r3
   2b084:	0003      	movs	r3, r0
   2b086:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2b088:	2317      	movs	r3, #23
   2b08a:	18fb      	adds	r3, r7, r3
   2b08c:	781b      	ldrb	r3, [r3, #0]
   2b08e:	2b00      	cmp	r3, #0
   2b090:	d000      	beq.n	2b094 <dir_find+0x64>
   2b092:	e0b2      	b.n	2b1fa <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2b094:	687b      	ldr	r3, [r7, #4]
   2b096:	695b      	ldr	r3, [r3, #20]
   2b098:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2b09a:	2316      	movs	r3, #22
   2b09c:	18fb      	adds	r3, r7, r3
   2b09e:	693a      	ldr	r2, [r7, #16]
   2b0a0:	7812      	ldrb	r2, [r2, #0]
   2b0a2:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2b0a4:	2316      	movs	r3, #22
   2b0a6:	18fb      	adds	r3, r7, r3
   2b0a8:	781b      	ldrb	r3, [r3, #0]
   2b0aa:	2b00      	cmp	r3, #0
   2b0ac:	d104      	bne.n	2b0b8 <dir_find+0x88>
   2b0ae:	2317      	movs	r3, #23
   2b0b0:	18fb      	adds	r3, r7, r3
   2b0b2:	2204      	movs	r2, #4
   2b0b4:	701a      	strb	r2, [r3, #0]
   2b0b6:	e0a5      	b.n	2b204 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2b0b8:	693b      	ldr	r3, [r7, #16]
   2b0ba:	330b      	adds	r3, #11
   2b0bc:	781a      	ldrb	r2, [r3, #0]
   2b0be:	230f      	movs	r3, #15
   2b0c0:	18fb      	adds	r3, r7, r3
   2b0c2:	213f      	movs	r1, #63	; 0x3f
   2b0c4:	400a      	ands	r2, r1
   2b0c6:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2b0c8:	2316      	movs	r3, #22
   2b0ca:	18fb      	adds	r3, r7, r3
   2b0cc:	781b      	ldrb	r3, [r3, #0]
   2b0ce:	2be5      	cmp	r3, #229	; 0xe5
   2b0d0:	d00a      	beq.n	2b0e8 <dir_find+0xb8>
   2b0d2:	230f      	movs	r3, #15
   2b0d4:	18fb      	adds	r3, r7, r3
   2b0d6:	781b      	ldrb	r3, [r3, #0]
   2b0d8:	2208      	movs	r2, #8
   2b0da:	4013      	ands	r3, r2
   2b0dc:	d009      	beq.n	2b0f2 <dir_find+0xc2>
   2b0de:	230f      	movs	r3, #15
   2b0e0:	18fb      	adds	r3, r7, r3
   2b0e2:	781b      	ldrb	r3, [r3, #0]
   2b0e4:	2b0f      	cmp	r3, #15
   2b0e6:	d004      	beq.n	2b0f2 <dir_find+0xc2>
			ord = 0xFF;
   2b0e8:	2315      	movs	r3, #21
   2b0ea:	18fb      	adds	r3, r7, r3
   2b0ec:	22ff      	movs	r2, #255	; 0xff
   2b0ee:	701a      	strb	r2, [r3, #0]
   2b0f0:	e073      	b.n	2b1da <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2b0f2:	230f      	movs	r3, #15
   2b0f4:	18fb      	adds	r3, r7, r3
   2b0f6:	781b      	ldrb	r3, [r3, #0]
   2b0f8:	2b0f      	cmp	r3, #15
   2b0fa:	d145      	bne.n	2b188 <dir_find+0x158>
				if (dj->lfn) {
   2b0fc:	687b      	ldr	r3, [r7, #4]
   2b0fe:	69db      	ldr	r3, [r3, #28]
   2b100:	2b00      	cmp	r3, #0
   2b102:	d100      	bne.n	2b106 <dir_find+0xd6>
   2b104:	e069      	b.n	2b1da <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2b106:	2316      	movs	r3, #22
   2b108:	18fb      	adds	r3, r7, r3
   2b10a:	781b      	ldrb	r3, [r3, #0]
   2b10c:	2240      	movs	r2, #64	; 0x40
   2b10e:	4013      	ands	r3, r2
   2b110:	d016      	beq.n	2b140 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2b112:	2314      	movs	r3, #20
   2b114:	18fb      	adds	r3, r7, r3
   2b116:	693a      	ldr	r2, [r7, #16]
   2b118:	7b52      	ldrb	r2, [r2, #13]
   2b11a:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2b11c:	2316      	movs	r3, #22
   2b11e:	18fb      	adds	r3, r7, r3
   2b120:	2216      	movs	r2, #22
   2b122:	18ba      	adds	r2, r7, r2
   2b124:	7812      	ldrb	r2, [r2, #0]
   2b126:	2140      	movs	r1, #64	; 0x40
   2b128:	438a      	bics	r2, r1
   2b12a:	701a      	strb	r2, [r3, #0]
   2b12c:	2315      	movs	r3, #21
   2b12e:	18fb      	adds	r3, r7, r3
   2b130:	2216      	movs	r2, #22
   2b132:	18ba      	adds	r2, r7, r2
   2b134:	7812      	ldrb	r2, [r2, #0]
   2b136:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2b138:	687b      	ldr	r3, [r7, #4]
   2b13a:	88da      	ldrh	r2, [r3, #6]
   2b13c:	687b      	ldr	r3, [r7, #4]
   2b13e:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2b140:	2316      	movs	r3, #22
   2b142:	18fa      	adds	r2, r7, r3
   2b144:	2315      	movs	r3, #21
   2b146:	18fb      	adds	r3, r7, r3
   2b148:	7812      	ldrb	r2, [r2, #0]
   2b14a:	781b      	ldrb	r3, [r3, #0]
   2b14c:	429a      	cmp	r2, r3
   2b14e:	d116      	bne.n	2b17e <dir_find+0x14e>
   2b150:	693b      	ldr	r3, [r7, #16]
   2b152:	330d      	adds	r3, #13
   2b154:	781b      	ldrb	r3, [r3, #0]
   2b156:	2214      	movs	r2, #20
   2b158:	18ba      	adds	r2, r7, r2
   2b15a:	7812      	ldrb	r2, [r2, #0]
   2b15c:	429a      	cmp	r2, r3
   2b15e:	d10e      	bne.n	2b17e <dir_find+0x14e>
   2b160:	687b      	ldr	r3, [r7, #4]
   2b162:	69db      	ldr	r3, [r3, #28]
   2b164:	693a      	ldr	r2, [r7, #16]
   2b166:	0011      	movs	r1, r2
   2b168:	0018      	movs	r0, r3
   2b16a:	4b2c      	ldr	r3, [pc, #176]	; (2b21c <dir_find+0x1ec>)
   2b16c:	4798      	blx	r3
   2b16e:	1e03      	subs	r3, r0, #0
   2b170:	d005      	beq.n	2b17e <dir_find+0x14e>
   2b172:	2315      	movs	r3, #21
   2b174:	18fb      	adds	r3, r7, r3
   2b176:	781b      	ldrb	r3, [r3, #0]
   2b178:	3b01      	subs	r3, #1
   2b17a:	b2da      	uxtb	r2, r3
   2b17c:	e000      	b.n	2b180 <dir_find+0x150>
   2b17e:	22ff      	movs	r2, #255	; 0xff
   2b180:	2315      	movs	r3, #21
   2b182:	18fb      	adds	r3, r7, r3
   2b184:	701a      	strb	r2, [r3, #0]
   2b186:	e028      	b.n	2b1da <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2b188:	2315      	movs	r3, #21
   2b18a:	18fb      	adds	r3, r7, r3
   2b18c:	781b      	ldrb	r3, [r3, #0]
   2b18e:	2b00      	cmp	r3, #0
   2b190:	d10a      	bne.n	2b1a8 <dir_find+0x178>
   2b192:	693b      	ldr	r3, [r7, #16]
   2b194:	0018      	movs	r0, r3
   2b196:	4b22      	ldr	r3, [pc, #136]	; (2b220 <dir_find+0x1f0>)
   2b198:	4798      	blx	r3
   2b19a:	0003      	movs	r3, r0
   2b19c:	001a      	movs	r2, r3
   2b19e:	2314      	movs	r3, #20
   2b1a0:	18fb      	adds	r3, r7, r3
   2b1a2:	781b      	ldrb	r3, [r3, #0]
   2b1a4:	4293      	cmp	r3, r2
   2b1a6:	d02a      	beq.n	2b1fe <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2b1a8:	2315      	movs	r3, #21
   2b1aa:	18fb      	adds	r3, r7, r3
   2b1ac:	22ff      	movs	r2, #255	; 0xff
   2b1ae:	701a      	strb	r2, [r3, #0]
   2b1b0:	687b      	ldr	r3, [r7, #4]
   2b1b2:	2201      	movs	r2, #1
   2b1b4:	4252      	negs	r2, r2
   2b1b6:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2b1b8:	687b      	ldr	r3, [r7, #4]
   2b1ba:	699b      	ldr	r3, [r3, #24]
   2b1bc:	330b      	adds	r3, #11
   2b1be:	781b      	ldrb	r3, [r3, #0]
   2b1c0:	001a      	movs	r2, r3
   2b1c2:	2301      	movs	r3, #1
   2b1c4:	4013      	ands	r3, r2
   2b1c6:	d108      	bne.n	2b1da <dir_find+0x1aa>
   2b1c8:	687b      	ldr	r3, [r7, #4]
   2b1ca:	6999      	ldr	r1, [r3, #24]
   2b1cc:	693b      	ldr	r3, [r7, #16]
   2b1ce:	220b      	movs	r2, #11
   2b1d0:	0018      	movs	r0, r3
   2b1d2:	4b14      	ldr	r3, [pc, #80]	; (2b224 <dir_find+0x1f4>)
   2b1d4:	4798      	blx	r3
   2b1d6:	1e03      	subs	r3, r0, #0
   2b1d8:	d013      	beq.n	2b202 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2b1da:	2317      	movs	r3, #23
   2b1dc:	18fc      	adds	r4, r7, r3
   2b1de:	687b      	ldr	r3, [r7, #4]
   2b1e0:	2100      	movs	r1, #0
   2b1e2:	0018      	movs	r0, r3
   2b1e4:	4b10      	ldr	r3, [pc, #64]	; (2b228 <dir_find+0x1f8>)
   2b1e6:	4798      	blx	r3
   2b1e8:	0003      	movs	r3, r0
   2b1ea:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2b1ec:	2317      	movs	r3, #23
   2b1ee:	18fb      	adds	r3, r7, r3
   2b1f0:	781b      	ldrb	r3, [r3, #0]
   2b1f2:	2b00      	cmp	r3, #0
   2b1f4:	d100      	bne.n	2b1f8 <dir_find+0x1c8>
   2b1f6:	e73b      	b.n	2b070 <dir_find+0x40>
   2b1f8:	e004      	b.n	2b204 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2b1fa:	46c0      	nop			; (mov r8, r8)
   2b1fc:	e002      	b.n	2b204 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2b1fe:	46c0      	nop			; (mov r8, r8)
   2b200:	e000      	b.n	2b204 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2b202:	46c0      	nop			; (mov r8, r8)

	return res;
   2b204:	2317      	movs	r3, #23
   2b206:	18fb      	adds	r3, r7, r3
   2b208:	781b      	ldrb	r3, [r3, #0]
}
   2b20a:	0018      	movs	r0, r3
   2b20c:	46bd      	mov	sp, r7
   2b20e:	b007      	add	sp, #28
   2b210:	bd90      	pop	{r4, r7, pc}
   2b212:	46c0      	nop			; (mov r8, r8)
   2b214:	0002a9ad 	.word	0x0002a9ad
   2b218:	0002a169 	.word	0x0002a169
   2b21c:	0002accd 	.word	0x0002accd
   2b220:	0002afe1 	.word	0x0002afe1
   2b224:	0002a0ed 	.word	0x0002a0ed
   2b228:	0002aadd 	.word	0x0002aadd

0002b22c <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2b22c:	b590      	push	{r4, r7, lr}
   2b22e:	b08d      	sub	sp, #52	; 0x34
   2b230:	af00      	add	r7, sp, #0
   2b232:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2b234:	687b      	ldr	r3, [r7, #4]
   2b236:	699b      	ldr	r3, [r3, #24]
   2b238:	627b      	str	r3, [r7, #36]	; 0x24
   2b23a:	687b      	ldr	r3, [r7, #4]
   2b23c:	69db      	ldr	r3, [r3, #28]
   2b23e:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2b240:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2b242:	230c      	movs	r3, #12
   2b244:	18fb      	adds	r3, r7, r3
   2b246:	220c      	movs	r2, #12
   2b248:	0018      	movs	r0, r3
   2b24a:	4bc8      	ldr	r3, [pc, #800]	; (2b56c <dir_register+0x340>)
   2b24c:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2b24e:	230c      	movs	r3, #12
   2b250:	18fb      	adds	r3, r7, r3
   2b252:	7adb      	ldrb	r3, [r3, #11]
   2b254:	001a      	movs	r2, r3
   2b256:	2301      	movs	r3, #1
   2b258:	4013      	ands	r3, r2
   2b25a:	d048      	beq.n	2b2ee <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2b25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b25e:	330b      	adds	r3, #11
   2b260:	2200      	movs	r2, #0
   2b262:	701a      	strb	r2, [r3, #0]
   2b264:	687b      	ldr	r3, [r7, #4]
   2b266:	2200      	movs	r2, #0
   2b268:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2b26a:	232c      	movs	r3, #44	; 0x2c
   2b26c:	18fb      	adds	r3, r7, r3
   2b26e:	2201      	movs	r2, #1
   2b270:	801a      	strh	r2, [r3, #0]
   2b272:	e01c      	b.n	2b2ae <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2b274:	232c      	movs	r3, #44	; 0x2c
   2b276:	18fb      	adds	r3, r7, r3
   2b278:	881b      	ldrh	r3, [r3, #0]
   2b27a:	6a3a      	ldr	r2, [r7, #32]
   2b27c:	210c      	movs	r1, #12
   2b27e:	1879      	adds	r1, r7, r1
   2b280:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2b282:	4cbb      	ldr	r4, [pc, #748]	; (2b570 <dir_register+0x344>)
   2b284:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2b286:	232f      	movs	r3, #47	; 0x2f
   2b288:	18fc      	adds	r4, r7, r3
   2b28a:	687b      	ldr	r3, [r7, #4]
   2b28c:	0018      	movs	r0, r3
   2b28e:	4bb9      	ldr	r3, [pc, #740]	; (2b574 <dir_register+0x348>)
   2b290:	4798      	blx	r3
   2b292:	0003      	movs	r3, r0
   2b294:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2b296:	232f      	movs	r3, #47	; 0x2f
   2b298:	18fb      	adds	r3, r7, r3
   2b29a:	781b      	ldrb	r3, [r3, #0]
   2b29c:	2b00      	cmp	r3, #0
   2b29e:	d10c      	bne.n	2b2ba <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2b2a0:	232c      	movs	r3, #44	; 0x2c
   2b2a2:	18fb      	adds	r3, r7, r3
   2b2a4:	881a      	ldrh	r2, [r3, #0]
   2b2a6:	232c      	movs	r3, #44	; 0x2c
   2b2a8:	18fb      	adds	r3, r7, r3
   2b2aa:	3201      	adds	r2, #1
   2b2ac:	801a      	strh	r2, [r3, #0]
   2b2ae:	232c      	movs	r3, #44	; 0x2c
   2b2b0:	18fb      	adds	r3, r7, r3
   2b2b2:	881b      	ldrh	r3, [r3, #0]
   2b2b4:	2b63      	cmp	r3, #99	; 0x63
   2b2b6:	d9dd      	bls.n	2b274 <dir_register+0x48>
   2b2b8:	e000      	b.n	2b2bc <dir_register+0x90>
			if (res != FR_OK) break;
   2b2ba:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2b2bc:	232c      	movs	r3, #44	; 0x2c
   2b2be:	18fb      	adds	r3, r7, r3
   2b2c0:	881b      	ldrh	r3, [r3, #0]
   2b2c2:	2b64      	cmp	r3, #100	; 0x64
   2b2c4:	d101      	bne.n	2b2ca <dir_register+0x9e>
   2b2c6:	2307      	movs	r3, #7
   2b2c8:	e14c      	b.n	2b564 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2b2ca:	232f      	movs	r3, #47	; 0x2f
   2b2cc:	18fb      	adds	r3, r7, r3
   2b2ce:	781b      	ldrb	r3, [r3, #0]
   2b2d0:	2b04      	cmp	r3, #4
   2b2d2:	d003      	beq.n	2b2dc <dir_register+0xb0>
   2b2d4:	232f      	movs	r3, #47	; 0x2f
   2b2d6:	18fb      	adds	r3, r7, r3
   2b2d8:	781b      	ldrb	r3, [r3, #0]
   2b2da:	e143      	b.n	2b564 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2b2de:	330b      	adds	r3, #11
   2b2e0:	220c      	movs	r2, #12
   2b2e2:	18ba      	adds	r2, r7, r2
   2b2e4:	7ad2      	ldrb	r2, [r2, #11]
   2b2e6:	701a      	strb	r2, [r3, #0]
   2b2e8:	687b      	ldr	r3, [r7, #4]
   2b2ea:	6a3a      	ldr	r2, [r7, #32]
   2b2ec:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2b2ee:	230c      	movs	r3, #12
   2b2f0:	18fb      	adds	r3, r7, r3
   2b2f2:	7adb      	ldrb	r3, [r3, #11]
   2b2f4:	001a      	movs	r2, r3
   2b2f6:	2302      	movs	r3, #2
   2b2f8:	4013      	ands	r3, r2
   2b2fa:	d023      	beq.n	2b344 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2b2fc:	232a      	movs	r3, #42	; 0x2a
   2b2fe:	18fb      	adds	r3, r7, r3
   2b300:	2200      	movs	r2, #0
   2b302:	801a      	strh	r2, [r3, #0]
   2b304:	e006      	b.n	2b314 <dir_register+0xe8>
   2b306:	232a      	movs	r3, #42	; 0x2a
   2b308:	18fb      	adds	r3, r7, r3
   2b30a:	881a      	ldrh	r2, [r3, #0]
   2b30c:	232a      	movs	r3, #42	; 0x2a
   2b30e:	18fb      	adds	r3, r7, r3
   2b310:	3201      	adds	r2, #1
   2b312:	801a      	strh	r2, [r3, #0]
   2b314:	232a      	movs	r3, #42	; 0x2a
   2b316:	18fb      	adds	r3, r7, r3
   2b318:	881b      	ldrh	r3, [r3, #0]
   2b31a:	005b      	lsls	r3, r3, #1
   2b31c:	6a3a      	ldr	r2, [r7, #32]
   2b31e:	18d3      	adds	r3, r2, r3
   2b320:	881b      	ldrh	r3, [r3, #0]
   2b322:	2b00      	cmp	r3, #0
   2b324:	d1ef      	bne.n	2b306 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2b326:	232a      	movs	r3, #42	; 0x2a
   2b328:	18fb      	adds	r3, r7, r3
   2b32a:	881b      	ldrh	r3, [r3, #0]
   2b32c:	3319      	adds	r3, #25
   2b32e:	001a      	movs	r2, r3
   2b330:	4b91      	ldr	r3, [pc, #580]	; (2b578 <dir_register+0x34c>)
   2b332:	210d      	movs	r1, #13
   2b334:	0010      	movs	r0, r2
   2b336:	4798      	blx	r3
   2b338:	0003      	movs	r3, r0
   2b33a:	001a      	movs	r2, r3
   2b33c:	232a      	movs	r3, #42	; 0x2a
   2b33e:	18fb      	adds	r3, r7, r3
   2b340:	801a      	strh	r2, [r3, #0]
   2b342:	e003      	b.n	2b34c <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2b344:	232a      	movs	r3, #42	; 0x2a
   2b346:	18fb      	adds	r3, r7, r3
   2b348:	2201      	movs	r2, #1
   2b34a:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2b34c:	232f      	movs	r3, #47	; 0x2f
   2b34e:	18fc      	adds	r4, r7, r3
   2b350:	687b      	ldr	r3, [r7, #4]
   2b352:	2100      	movs	r1, #0
   2b354:	0018      	movs	r0, r3
   2b356:	4b89      	ldr	r3, [pc, #548]	; (2b57c <dir_register+0x350>)
   2b358:	4798      	blx	r3
   2b35a:	0003      	movs	r3, r0
   2b35c:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2b35e:	232f      	movs	r3, #47	; 0x2f
   2b360:	18fb      	adds	r3, r7, r3
   2b362:	781b      	ldrb	r3, [r3, #0]
   2b364:	2b00      	cmp	r3, #0
   2b366:	d003      	beq.n	2b370 <dir_register+0x144>
   2b368:	232f      	movs	r3, #47	; 0x2f
   2b36a:	18fb      	adds	r3, r7, r3
   2b36c:	781b      	ldrb	r3, [r3, #0]
   2b36e:	e0f9      	b.n	2b564 <dir_register+0x338>
	n = is = 0;
   2b370:	2328      	movs	r3, #40	; 0x28
   2b372:	18fb      	adds	r3, r7, r3
   2b374:	2200      	movs	r2, #0
   2b376:	801a      	strh	r2, [r3, #0]
   2b378:	232c      	movs	r3, #44	; 0x2c
   2b37a:	18fb      	adds	r3, r7, r3
   2b37c:	2228      	movs	r2, #40	; 0x28
   2b37e:	18ba      	adds	r2, r7, r2
   2b380:	8812      	ldrh	r2, [r2, #0]
   2b382:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2b384:	687b      	ldr	r3, [r7, #4]
   2b386:	681a      	ldr	r2, [r3, #0]
   2b388:	687b      	ldr	r3, [r7, #4]
   2b38a:	691b      	ldr	r3, [r3, #16]
   2b38c:	212f      	movs	r1, #47	; 0x2f
   2b38e:	187c      	adds	r4, r7, r1
   2b390:	0019      	movs	r1, r3
   2b392:	0010      	movs	r0, r2
   2b394:	4b7a      	ldr	r3, [pc, #488]	; (2b580 <dir_register+0x354>)
   2b396:	4798      	blx	r3
   2b398:	0003      	movs	r3, r0
   2b39a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2b39c:	232f      	movs	r3, #47	; 0x2f
   2b39e:	18fb      	adds	r3, r7, r3
   2b3a0:	781b      	ldrb	r3, [r3, #0]
   2b3a2:	2b00      	cmp	r3, #0
   2b3a4:	d13c      	bne.n	2b420 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2b3a6:	687b      	ldr	r3, [r7, #4]
   2b3a8:	695a      	ldr	r2, [r3, #20]
   2b3aa:	231f      	movs	r3, #31
   2b3ac:	18fb      	adds	r3, r7, r3
   2b3ae:	7812      	ldrb	r2, [r2, #0]
   2b3b0:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2b3b2:	231f      	movs	r3, #31
   2b3b4:	18fb      	adds	r3, r7, r3
   2b3b6:	781b      	ldrb	r3, [r3, #0]
   2b3b8:	2be5      	cmp	r3, #229	; 0xe5
   2b3ba:	d004      	beq.n	2b3c6 <dir_register+0x19a>
   2b3bc:	231f      	movs	r3, #31
   2b3be:	18fb      	adds	r3, r7, r3
   2b3c0:	781b      	ldrb	r3, [r3, #0]
   2b3c2:	2b00      	cmp	r3, #0
   2b3c4:	d119      	bne.n	2b3fa <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2b3c6:	232c      	movs	r3, #44	; 0x2c
   2b3c8:	18fb      	adds	r3, r7, r3
   2b3ca:	881b      	ldrh	r3, [r3, #0]
   2b3cc:	2b00      	cmp	r3, #0
   2b3ce:	d104      	bne.n	2b3da <dir_register+0x1ae>
   2b3d0:	2328      	movs	r3, #40	; 0x28
   2b3d2:	18fb      	adds	r3, r7, r3
   2b3d4:	687a      	ldr	r2, [r7, #4]
   2b3d6:	88d2      	ldrh	r2, [r2, #6]
   2b3d8:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2b3da:	232c      	movs	r3, #44	; 0x2c
   2b3dc:	18fb      	adds	r3, r7, r3
   2b3de:	222c      	movs	r2, #44	; 0x2c
   2b3e0:	18ba      	adds	r2, r7, r2
   2b3e2:	8812      	ldrh	r2, [r2, #0]
   2b3e4:	3201      	adds	r2, #1
   2b3e6:	801a      	strh	r2, [r3, #0]
   2b3e8:	232c      	movs	r3, #44	; 0x2c
   2b3ea:	18fa      	adds	r2, r7, r3
   2b3ec:	232a      	movs	r3, #42	; 0x2a
   2b3ee:	18fb      	adds	r3, r7, r3
   2b3f0:	8812      	ldrh	r2, [r2, #0]
   2b3f2:	881b      	ldrh	r3, [r3, #0]
   2b3f4:	429a      	cmp	r2, r3
   2b3f6:	d104      	bne.n	2b402 <dir_register+0x1d6>
   2b3f8:	e013      	b.n	2b422 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2b3fa:	232c      	movs	r3, #44	; 0x2c
   2b3fc:	18fb      	adds	r3, r7, r3
   2b3fe:	2200      	movs	r2, #0
   2b400:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2b402:	232f      	movs	r3, #47	; 0x2f
   2b404:	18fc      	adds	r4, r7, r3
   2b406:	687b      	ldr	r3, [r7, #4]
   2b408:	2101      	movs	r1, #1
   2b40a:	0018      	movs	r0, r3
   2b40c:	4b5d      	ldr	r3, [pc, #372]	; (2b584 <dir_register+0x358>)
   2b40e:	4798      	blx	r3
   2b410:	0003      	movs	r3, r0
   2b412:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2b414:	232f      	movs	r3, #47	; 0x2f
   2b416:	18fb      	adds	r3, r7, r3
   2b418:	781b      	ldrb	r3, [r3, #0]
   2b41a:	2b00      	cmp	r3, #0
   2b41c:	d0b2      	beq.n	2b384 <dir_register+0x158>
   2b41e:	e000      	b.n	2b422 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2b420:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2b422:	232f      	movs	r3, #47	; 0x2f
   2b424:	18fb      	adds	r3, r7, r3
   2b426:	781b      	ldrb	r3, [r3, #0]
   2b428:	2b00      	cmp	r3, #0
   2b42a:	d163      	bne.n	2b4f4 <dir_register+0x2c8>
   2b42c:	232a      	movs	r3, #42	; 0x2a
   2b42e:	18fb      	adds	r3, r7, r3
   2b430:	881b      	ldrh	r3, [r3, #0]
   2b432:	2b01      	cmp	r3, #1
   2b434:	d95e      	bls.n	2b4f4 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2b436:	232f      	movs	r3, #47	; 0x2f
   2b438:	18fc      	adds	r4, r7, r3
   2b43a:	2328      	movs	r3, #40	; 0x28
   2b43c:	18fb      	adds	r3, r7, r3
   2b43e:	881a      	ldrh	r2, [r3, #0]
   2b440:	687b      	ldr	r3, [r7, #4]
   2b442:	0011      	movs	r1, r2
   2b444:	0018      	movs	r0, r3
   2b446:	4b4d      	ldr	r3, [pc, #308]	; (2b57c <dir_register+0x350>)
   2b448:	4798      	blx	r3
   2b44a:	0003      	movs	r3, r0
   2b44c:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2b44e:	232f      	movs	r3, #47	; 0x2f
   2b450:	18fb      	adds	r3, r7, r3
   2b452:	781b      	ldrb	r3, [r3, #0]
   2b454:	2b00      	cmp	r3, #0
   2b456:	d14d      	bne.n	2b4f4 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2b458:	687b      	ldr	r3, [r7, #4]
   2b45a:	699b      	ldr	r3, [r3, #24]
   2b45c:	221e      	movs	r2, #30
   2b45e:	18bc      	adds	r4, r7, r2
   2b460:	0018      	movs	r0, r3
   2b462:	4b49      	ldr	r3, [pc, #292]	; (2b588 <dir_register+0x35c>)
   2b464:	4798      	blx	r3
   2b466:	0003      	movs	r3, r0
   2b468:	7023      	strb	r3, [r4, #0]
			ne--;
   2b46a:	232a      	movs	r3, #42	; 0x2a
   2b46c:	18fb      	adds	r3, r7, r3
   2b46e:	881a      	ldrh	r2, [r3, #0]
   2b470:	232a      	movs	r3, #42	; 0x2a
   2b472:	18fb      	adds	r3, r7, r3
   2b474:	3a01      	subs	r2, #1
   2b476:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2b478:	687b      	ldr	r3, [r7, #4]
   2b47a:	681a      	ldr	r2, [r3, #0]
   2b47c:	687b      	ldr	r3, [r7, #4]
   2b47e:	691b      	ldr	r3, [r3, #16]
   2b480:	212f      	movs	r1, #47	; 0x2f
   2b482:	187c      	adds	r4, r7, r1
   2b484:	0019      	movs	r1, r3
   2b486:	0010      	movs	r0, r2
   2b488:	4b3d      	ldr	r3, [pc, #244]	; (2b580 <dir_register+0x354>)
   2b48a:	4798      	blx	r3
   2b48c:	0003      	movs	r3, r0
   2b48e:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2b490:	232f      	movs	r3, #47	; 0x2f
   2b492:	18fb      	adds	r3, r7, r3
   2b494:	781b      	ldrb	r3, [r3, #0]
   2b496:	2b00      	cmp	r3, #0
   2b498:	d12b      	bne.n	2b4f2 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2b49a:	687b      	ldr	r3, [r7, #4]
   2b49c:	69d8      	ldr	r0, [r3, #28]
   2b49e:	687b      	ldr	r3, [r7, #4]
   2b4a0:	6959      	ldr	r1, [r3, #20]
   2b4a2:	232a      	movs	r3, #42	; 0x2a
   2b4a4:	18fb      	adds	r3, r7, r3
   2b4a6:	881b      	ldrh	r3, [r3, #0]
   2b4a8:	b2da      	uxtb	r2, r3
   2b4aa:	231e      	movs	r3, #30
   2b4ac:	18fb      	adds	r3, r7, r3
   2b4ae:	781b      	ldrb	r3, [r3, #0]
   2b4b0:	4c36      	ldr	r4, [pc, #216]	; (2b58c <dir_register+0x360>)
   2b4b2:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2b4b4:	687b      	ldr	r3, [r7, #4]
   2b4b6:	681b      	ldr	r3, [r3, #0]
   2b4b8:	2201      	movs	r2, #1
   2b4ba:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2b4bc:	232f      	movs	r3, #47	; 0x2f
   2b4be:	18fc      	adds	r4, r7, r3
   2b4c0:	687b      	ldr	r3, [r7, #4]
   2b4c2:	2100      	movs	r1, #0
   2b4c4:	0018      	movs	r0, r3
   2b4c6:	4b2f      	ldr	r3, [pc, #188]	; (2b584 <dir_register+0x358>)
   2b4c8:	4798      	blx	r3
   2b4ca:	0003      	movs	r3, r0
   2b4cc:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2b4ce:	232f      	movs	r3, #47	; 0x2f
   2b4d0:	18fb      	adds	r3, r7, r3
   2b4d2:	781b      	ldrb	r3, [r3, #0]
   2b4d4:	2b00      	cmp	r3, #0
   2b4d6:	d10d      	bne.n	2b4f4 <dir_register+0x2c8>
   2b4d8:	232a      	movs	r3, #42	; 0x2a
   2b4da:	18fb      	adds	r3, r7, r3
   2b4dc:	222a      	movs	r2, #42	; 0x2a
   2b4de:	18ba      	adds	r2, r7, r2
   2b4e0:	8812      	ldrh	r2, [r2, #0]
   2b4e2:	3a01      	subs	r2, #1
   2b4e4:	801a      	strh	r2, [r3, #0]
   2b4e6:	232a      	movs	r3, #42	; 0x2a
   2b4e8:	18fb      	adds	r3, r7, r3
   2b4ea:	881b      	ldrh	r3, [r3, #0]
   2b4ec:	2b00      	cmp	r3, #0
   2b4ee:	d1c3      	bne.n	2b478 <dir_register+0x24c>
   2b4f0:	e000      	b.n	2b4f4 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2b4f2:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2b4f4:	232f      	movs	r3, #47	; 0x2f
   2b4f6:	18fb      	adds	r3, r7, r3
   2b4f8:	781b      	ldrb	r3, [r3, #0]
   2b4fa:	2b00      	cmp	r3, #0
   2b4fc:	d12f      	bne.n	2b55e <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2b4fe:	687b      	ldr	r3, [r7, #4]
   2b500:	681a      	ldr	r2, [r3, #0]
   2b502:	687b      	ldr	r3, [r7, #4]
   2b504:	691b      	ldr	r3, [r3, #16]
   2b506:	212f      	movs	r1, #47	; 0x2f
   2b508:	187c      	adds	r4, r7, r1
   2b50a:	0019      	movs	r1, r3
   2b50c:	0010      	movs	r0, r2
   2b50e:	4b1c      	ldr	r3, [pc, #112]	; (2b580 <dir_register+0x354>)
   2b510:	4798      	blx	r3
   2b512:	0003      	movs	r3, r0
   2b514:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2b516:	232f      	movs	r3, #47	; 0x2f
   2b518:	18fb      	adds	r3, r7, r3
   2b51a:	781b      	ldrb	r3, [r3, #0]
   2b51c:	2b00      	cmp	r3, #0
   2b51e:	d11e      	bne.n	2b55e <dir_register+0x332>
			dir = dj->dir;
   2b520:	687b      	ldr	r3, [r7, #4]
   2b522:	695b      	ldr	r3, [r3, #20]
   2b524:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2b526:	69bb      	ldr	r3, [r7, #24]
   2b528:	2220      	movs	r2, #32
   2b52a:	2100      	movs	r1, #0
   2b52c:	0018      	movs	r0, r3
   2b52e:	4b18      	ldr	r3, [pc, #96]	; (2b590 <dir_register+0x364>)
   2b530:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2b532:	687b      	ldr	r3, [r7, #4]
   2b534:	6999      	ldr	r1, [r3, #24]
   2b536:	69bb      	ldr	r3, [r7, #24]
   2b538:	220b      	movs	r2, #11
   2b53a:	0018      	movs	r0, r3
   2b53c:	4b0b      	ldr	r3, [pc, #44]	; (2b56c <dir_register+0x340>)
   2b53e:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2b540:	69bb      	ldr	r3, [r7, #24]
   2b542:	330c      	adds	r3, #12
   2b544:	001a      	movs	r2, r3
   2b546:	687b      	ldr	r3, [r7, #4]
   2b548:	699b      	ldr	r3, [r3, #24]
   2b54a:	330b      	adds	r3, #11
   2b54c:	781b      	ldrb	r3, [r3, #0]
   2b54e:	2118      	movs	r1, #24
   2b550:	400b      	ands	r3, r1
   2b552:	b2db      	uxtb	r3, r3
   2b554:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2b556:	687b      	ldr	r3, [r7, #4]
   2b558:	681b      	ldr	r3, [r3, #0]
   2b55a:	2201      	movs	r2, #1
   2b55c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2b55e:	232f      	movs	r3, #47	; 0x2f
   2b560:	18fb      	adds	r3, r7, r3
   2b562:	781b      	ldrb	r3, [r3, #0]
}
   2b564:	0018      	movs	r0, r3
   2b566:	46bd      	mov	sp, r7
   2b568:	b00d      	add	sp, #52	; 0x34
   2b56a:	bd90      	pop	{r4, r7, pc}
   2b56c:	0002a085 	.word	0x0002a085
   2b570:	0002aee1 	.word	0x0002aee1
   2b574:	0002b031 	.word	0x0002b031
   2b578:	00031421 	.word	0x00031421
   2b57c:	0002a9ad 	.word	0x0002a9ad
   2b580:	0002a169 	.word	0x0002a169
   2b584:	0002aadd 	.word	0x0002aadd
   2b588:	0002afe1 	.word	0x0002afe1
   2b58c:	0002add1 	.word	0x0002add1
   2b590:	0002a0bd 	.word	0x0002a0bd

0002b594 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2b594:	b590      	push	{r4, r7, lr}
   2b596:	b08b      	sub	sp, #44	; 0x2c
   2b598:	af00      	add	r7, sp, #0
   2b59a:	6078      	str	r0, [r7, #4]
   2b59c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2b59e:	683b      	ldr	r3, [r7, #0]
   2b5a0:	681b      	ldr	r3, [r3, #0]
   2b5a2:	613b      	str	r3, [r7, #16]
   2b5a4:	e002      	b.n	2b5ac <create_name+0x18>
   2b5a6:	693b      	ldr	r3, [r7, #16]
   2b5a8:	3301      	adds	r3, #1
   2b5aa:	613b      	str	r3, [r7, #16]
   2b5ac:	693b      	ldr	r3, [r7, #16]
   2b5ae:	781b      	ldrb	r3, [r3, #0]
   2b5b0:	2b2f      	cmp	r3, #47	; 0x2f
   2b5b2:	d0f8      	beq.n	2b5a6 <create_name+0x12>
   2b5b4:	693b      	ldr	r3, [r7, #16]
   2b5b6:	781b      	ldrb	r3, [r3, #0]
   2b5b8:	2b5c      	cmp	r3, #92	; 0x5c
   2b5ba:	d0f4      	beq.n	2b5a6 <create_name+0x12>
	lfn = dj->lfn;
   2b5bc:	687b      	ldr	r3, [r7, #4]
   2b5be:	69db      	ldr	r3, [r3, #28]
   2b5c0:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2b5c2:	2300      	movs	r3, #0
   2b5c4:	617b      	str	r3, [r7, #20]
   2b5c6:	697b      	ldr	r3, [r7, #20]
   2b5c8:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2b5ca:	69bb      	ldr	r3, [r7, #24]
   2b5cc:	1c5a      	adds	r2, r3, #1
   2b5ce:	61ba      	str	r2, [r7, #24]
   2b5d0:	693a      	ldr	r2, [r7, #16]
   2b5d2:	18d3      	adds	r3, r2, r3
   2b5d4:	781a      	ldrb	r2, [r3, #0]
   2b5d6:	2324      	movs	r3, #36	; 0x24
   2b5d8:	18fb      	adds	r3, r7, r3
   2b5da:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2b5dc:	2324      	movs	r3, #36	; 0x24
   2b5de:	18fb      	adds	r3, r7, r3
   2b5e0:	881b      	ldrh	r3, [r3, #0]
   2b5e2:	2b1f      	cmp	r3, #31
   2b5e4:	d944      	bls.n	2b670 <create_name+0xdc>
   2b5e6:	2324      	movs	r3, #36	; 0x24
   2b5e8:	18fb      	adds	r3, r7, r3
   2b5ea:	881b      	ldrh	r3, [r3, #0]
   2b5ec:	2b2f      	cmp	r3, #47	; 0x2f
   2b5ee:	d03f      	beq.n	2b670 <create_name+0xdc>
   2b5f0:	2324      	movs	r3, #36	; 0x24
   2b5f2:	18fb      	adds	r3, r7, r3
   2b5f4:	881b      	ldrh	r3, [r3, #0]
   2b5f6:	2b5c      	cmp	r3, #92	; 0x5c
   2b5f8:	d03a      	beq.n	2b670 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2b5fa:	697b      	ldr	r3, [r7, #20]
   2b5fc:	2bfe      	cmp	r3, #254	; 0xfe
   2b5fe:	d901      	bls.n	2b604 <create_name+0x70>
			return FR_INVALID_NAME;
   2b600:	2306      	movs	r3, #6
   2b602:	e1e7      	b.n	2b9d4 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2b604:	2324      	movs	r3, #36	; 0x24
   2b606:	18fb      	adds	r3, r7, r3
   2b608:	2224      	movs	r2, #36	; 0x24
   2b60a:	18ba      	adds	r2, r7, r2
   2b60c:	8812      	ldrh	r2, [r2, #0]
   2b60e:	21ff      	movs	r1, #255	; 0xff
   2b610:	400a      	ands	r2, r1
   2b612:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2b614:	2324      	movs	r3, #36	; 0x24
   2b616:	18fc      	adds	r4, r7, r3
   2b618:	2324      	movs	r3, #36	; 0x24
   2b61a:	18fb      	adds	r3, r7, r3
   2b61c:	881b      	ldrh	r3, [r3, #0]
   2b61e:	2101      	movs	r1, #1
   2b620:	0018      	movs	r0, r3
   2b622:	4bba      	ldr	r3, [pc, #744]	; (2b90c <create_name+0x378>)
   2b624:	4798      	blx	r3
   2b626:	0003      	movs	r3, r0
   2b628:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2b62a:	2324      	movs	r3, #36	; 0x24
   2b62c:	18fb      	adds	r3, r7, r3
   2b62e:	881b      	ldrh	r3, [r3, #0]
   2b630:	2b00      	cmp	r3, #0
   2b632:	d101      	bne.n	2b638 <create_name+0xa4>
   2b634:	2306      	movs	r3, #6
   2b636:	e1cd      	b.n	2b9d4 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2b638:	2324      	movs	r3, #36	; 0x24
   2b63a:	18fb      	adds	r3, r7, r3
   2b63c:	881b      	ldrh	r3, [r3, #0]
   2b63e:	2b7f      	cmp	r3, #127	; 0x7f
   2b640:	d80b      	bhi.n	2b65a <create_name+0xc6>
   2b642:	2324      	movs	r3, #36	; 0x24
   2b644:	18fb      	adds	r3, r7, r3
   2b646:	881a      	ldrh	r2, [r3, #0]
   2b648:	4bb1      	ldr	r3, [pc, #708]	; (2b910 <create_name+0x37c>)
   2b64a:	0011      	movs	r1, r2
   2b64c:	0018      	movs	r0, r3
   2b64e:	4bb1      	ldr	r3, [pc, #708]	; (2b914 <create_name+0x380>)
   2b650:	4798      	blx	r3
   2b652:	1e03      	subs	r3, r0, #0
   2b654:	d001      	beq.n	2b65a <create_name+0xc6>
			return FR_INVALID_NAME;
   2b656:	2306      	movs	r3, #6
   2b658:	e1bc      	b.n	2b9d4 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2b65a:	697b      	ldr	r3, [r7, #20]
   2b65c:	1c5a      	adds	r2, r3, #1
   2b65e:	617a      	str	r2, [r7, #20]
   2b660:	005b      	lsls	r3, r3, #1
   2b662:	68fa      	ldr	r2, [r7, #12]
   2b664:	18d3      	adds	r3, r2, r3
   2b666:	2224      	movs	r2, #36	; 0x24
   2b668:	18ba      	adds	r2, r7, r2
   2b66a:	8812      	ldrh	r2, [r2, #0]
   2b66c:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2b66e:	e7ac      	b.n	2b5ca <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2b670:	693a      	ldr	r2, [r7, #16]
   2b672:	69bb      	ldr	r3, [r7, #24]
   2b674:	18d2      	adds	r2, r2, r3
   2b676:	683b      	ldr	r3, [r7, #0]
   2b678:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2b67a:	2324      	movs	r3, #36	; 0x24
   2b67c:	18fb      	adds	r3, r7, r3
   2b67e:	881b      	ldrh	r3, [r3, #0]
   2b680:	2b1f      	cmp	r3, #31
   2b682:	d801      	bhi.n	2b688 <create_name+0xf4>
   2b684:	2204      	movs	r2, #4
   2b686:	e000      	b.n	2b68a <create_name+0xf6>
   2b688:	2200      	movs	r2, #0
   2b68a:	2326      	movs	r3, #38	; 0x26
   2b68c:	18fb      	adds	r3, r7, r3
   2b68e:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2b690:	e017      	b.n	2b6c2 <create_name+0x12e>
		w = lfn[di-1];
   2b692:	697b      	ldr	r3, [r7, #20]
   2b694:	4aa0      	ldr	r2, [pc, #640]	; (2b918 <create_name+0x384>)
   2b696:	4694      	mov	ip, r2
   2b698:	4463      	add	r3, ip
   2b69a:	005b      	lsls	r3, r3, #1
   2b69c:	68fa      	ldr	r2, [r7, #12]
   2b69e:	18d2      	adds	r2, r2, r3
   2b6a0:	2324      	movs	r3, #36	; 0x24
   2b6a2:	18fb      	adds	r3, r7, r3
   2b6a4:	8812      	ldrh	r2, [r2, #0]
   2b6a6:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2b6a8:	2324      	movs	r3, #36	; 0x24
   2b6aa:	18fb      	adds	r3, r7, r3
   2b6ac:	881b      	ldrh	r3, [r3, #0]
   2b6ae:	2b20      	cmp	r3, #32
   2b6b0:	d004      	beq.n	2b6bc <create_name+0x128>
   2b6b2:	2324      	movs	r3, #36	; 0x24
   2b6b4:	18fb      	adds	r3, r7, r3
   2b6b6:	881b      	ldrh	r3, [r3, #0]
   2b6b8:	2b2e      	cmp	r3, #46	; 0x2e
   2b6ba:	d106      	bne.n	2b6ca <create_name+0x136>
		di--;
   2b6bc:	697b      	ldr	r3, [r7, #20]
   2b6be:	3b01      	subs	r3, #1
   2b6c0:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2b6c2:	697b      	ldr	r3, [r7, #20]
   2b6c4:	2b00      	cmp	r3, #0
   2b6c6:	d1e4      	bne.n	2b692 <create_name+0xfe>
   2b6c8:	e000      	b.n	2b6cc <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2b6ca:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2b6cc:	697b      	ldr	r3, [r7, #20]
   2b6ce:	2b00      	cmp	r3, #0
   2b6d0:	d101      	bne.n	2b6d6 <create_name+0x142>
   2b6d2:	2306      	movs	r3, #6
   2b6d4:	e17e      	b.n	2b9d4 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2b6d6:	697b      	ldr	r3, [r7, #20]
   2b6d8:	005b      	lsls	r3, r3, #1
   2b6da:	68fa      	ldr	r2, [r7, #12]
   2b6dc:	18d3      	adds	r3, r2, r3
   2b6de:	2200      	movs	r2, #0
   2b6e0:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2b6e2:	687b      	ldr	r3, [r7, #4]
   2b6e4:	699b      	ldr	r3, [r3, #24]
   2b6e6:	220b      	movs	r2, #11
   2b6e8:	2120      	movs	r1, #32
   2b6ea:	0018      	movs	r0, r3
   2b6ec:	4b8b      	ldr	r3, [pc, #556]	; (2b91c <create_name+0x388>)
   2b6ee:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2b6f0:	2300      	movs	r3, #0
   2b6f2:	61bb      	str	r3, [r7, #24]
   2b6f4:	e002      	b.n	2b6fc <create_name+0x168>
   2b6f6:	69bb      	ldr	r3, [r7, #24]
   2b6f8:	3301      	adds	r3, #1
   2b6fa:	61bb      	str	r3, [r7, #24]
   2b6fc:	69bb      	ldr	r3, [r7, #24]
   2b6fe:	005b      	lsls	r3, r3, #1
   2b700:	68fa      	ldr	r2, [r7, #12]
   2b702:	18d3      	adds	r3, r2, r3
   2b704:	881b      	ldrh	r3, [r3, #0]
   2b706:	2b20      	cmp	r3, #32
   2b708:	d0f5      	beq.n	2b6f6 <create_name+0x162>
   2b70a:	69bb      	ldr	r3, [r7, #24]
   2b70c:	005b      	lsls	r3, r3, #1
   2b70e:	68fa      	ldr	r2, [r7, #12]
   2b710:	18d3      	adds	r3, r2, r3
   2b712:	881b      	ldrh	r3, [r3, #0]
   2b714:	2b2e      	cmp	r3, #46	; 0x2e
   2b716:	d0ee      	beq.n	2b6f6 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2b718:	69bb      	ldr	r3, [r7, #24]
   2b71a:	2b00      	cmp	r3, #0
   2b71c:	d00b      	beq.n	2b736 <create_name+0x1a2>
   2b71e:	2326      	movs	r3, #38	; 0x26
   2b720:	18fb      	adds	r3, r7, r3
   2b722:	2226      	movs	r2, #38	; 0x26
   2b724:	18ba      	adds	r2, r7, r2
   2b726:	7812      	ldrb	r2, [r2, #0]
   2b728:	2103      	movs	r1, #3
   2b72a:	430a      	orrs	r2, r1
   2b72c:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2b72e:	e002      	b.n	2b736 <create_name+0x1a2>
   2b730:	697b      	ldr	r3, [r7, #20]
   2b732:	3b01      	subs	r3, #1
   2b734:	617b      	str	r3, [r7, #20]
   2b736:	697b      	ldr	r3, [r7, #20]
   2b738:	2b00      	cmp	r3, #0
   2b73a:	d009      	beq.n	2b750 <create_name+0x1bc>
   2b73c:	697b      	ldr	r3, [r7, #20]
   2b73e:	4a76      	ldr	r2, [pc, #472]	; (2b918 <create_name+0x384>)
   2b740:	4694      	mov	ip, r2
   2b742:	4463      	add	r3, ip
   2b744:	005b      	lsls	r3, r3, #1
   2b746:	68fa      	ldr	r2, [r7, #12]
   2b748:	18d3      	adds	r3, r2, r3
   2b74a:	881b      	ldrh	r3, [r3, #0]
   2b74c:	2b2e      	cmp	r3, #46	; 0x2e
   2b74e:	d1ef      	bne.n	2b730 <create_name+0x19c>

	b = i = 0; ni = 8;
   2b750:	2300      	movs	r3, #0
   2b752:	623b      	str	r3, [r7, #32]
   2b754:	2327      	movs	r3, #39	; 0x27
   2b756:	18fb      	adds	r3, r7, r3
   2b758:	2200      	movs	r2, #0
   2b75a:	701a      	strb	r2, [r3, #0]
   2b75c:	2308      	movs	r3, #8
   2b75e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2b760:	69bb      	ldr	r3, [r7, #24]
   2b762:	1c5a      	adds	r2, r3, #1
   2b764:	61ba      	str	r2, [r7, #24]
   2b766:	005b      	lsls	r3, r3, #1
   2b768:	68fa      	ldr	r2, [r7, #12]
   2b76a:	18d2      	adds	r2, r2, r3
   2b76c:	2324      	movs	r3, #36	; 0x24
   2b76e:	18fb      	adds	r3, r7, r3
   2b770:	8812      	ldrh	r2, [r2, #0]
   2b772:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2b774:	2324      	movs	r3, #36	; 0x24
   2b776:	18fb      	adds	r3, r7, r3
   2b778:	881b      	ldrh	r3, [r3, #0]
   2b77a:	2b00      	cmp	r3, #0
   2b77c:	d100      	bne.n	2b780 <create_name+0x1ec>
   2b77e:	e0c3      	b.n	2b908 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2b780:	2324      	movs	r3, #36	; 0x24
   2b782:	18fb      	adds	r3, r7, r3
   2b784:	881b      	ldrh	r3, [r3, #0]
   2b786:	2b20      	cmp	r3, #32
   2b788:	d008      	beq.n	2b79c <create_name+0x208>
   2b78a:	2324      	movs	r3, #36	; 0x24
   2b78c:	18fb      	adds	r3, r7, r3
   2b78e:	881b      	ldrh	r3, [r3, #0]
   2b790:	2b2e      	cmp	r3, #46	; 0x2e
   2b792:	d10c      	bne.n	2b7ae <create_name+0x21a>
   2b794:	69ba      	ldr	r2, [r7, #24]
   2b796:	697b      	ldr	r3, [r7, #20]
   2b798:	429a      	cmp	r2, r3
   2b79a:	d008      	beq.n	2b7ae <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2b79c:	2326      	movs	r3, #38	; 0x26
   2b79e:	18fb      	adds	r3, r7, r3
   2b7a0:	2226      	movs	r2, #38	; 0x26
   2b7a2:	18ba      	adds	r2, r7, r2
   2b7a4:	7812      	ldrb	r2, [r2, #0]
   2b7a6:	2103      	movs	r1, #3
   2b7a8:	430a      	orrs	r2, r1
   2b7aa:	701a      	strb	r2, [r3, #0]
   2b7ac:	e0ab      	b.n	2b906 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2b7ae:	6a3a      	ldr	r2, [r7, #32]
   2b7b0:	69fb      	ldr	r3, [r7, #28]
   2b7b2:	429a      	cmp	r2, r3
   2b7b4:	d203      	bcs.n	2b7be <create_name+0x22a>
   2b7b6:	69ba      	ldr	r2, [r7, #24]
   2b7b8:	697b      	ldr	r3, [r7, #20]
   2b7ba:	429a      	cmp	r2, r3
   2b7bc:	d12a      	bne.n	2b814 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2b7be:	69fb      	ldr	r3, [r7, #28]
   2b7c0:	2b0b      	cmp	r3, #11
   2b7c2:	d108      	bne.n	2b7d6 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2b7c4:	2326      	movs	r3, #38	; 0x26
   2b7c6:	18fb      	adds	r3, r7, r3
   2b7c8:	2226      	movs	r2, #38	; 0x26
   2b7ca:	18ba      	adds	r2, r7, r2
   2b7cc:	7812      	ldrb	r2, [r2, #0]
   2b7ce:	2103      	movs	r1, #3
   2b7d0:	430a      	orrs	r2, r1
   2b7d2:	701a      	strb	r2, [r3, #0]
   2b7d4:	e0a9      	b.n	2b92a <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2b7d6:	69ba      	ldr	r2, [r7, #24]
   2b7d8:	697b      	ldr	r3, [r7, #20]
   2b7da:	429a      	cmp	r2, r3
   2b7dc:	d007      	beq.n	2b7ee <create_name+0x25a>
   2b7de:	2326      	movs	r3, #38	; 0x26
   2b7e0:	18fb      	adds	r3, r7, r3
   2b7e2:	2226      	movs	r2, #38	; 0x26
   2b7e4:	18ba      	adds	r2, r7, r2
   2b7e6:	7812      	ldrb	r2, [r2, #0]
   2b7e8:	2103      	movs	r1, #3
   2b7ea:	430a      	orrs	r2, r1
   2b7ec:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2b7ee:	69ba      	ldr	r2, [r7, #24]
   2b7f0:	697b      	ldr	r3, [r7, #20]
   2b7f2:	429a      	cmp	r2, r3
   2b7f4:	d900      	bls.n	2b7f8 <create_name+0x264>
   2b7f6:	e097      	b.n	2b928 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2b7f8:	697b      	ldr	r3, [r7, #20]
   2b7fa:	61bb      	str	r3, [r7, #24]
   2b7fc:	2308      	movs	r3, #8
   2b7fe:	623b      	str	r3, [r7, #32]
   2b800:	230b      	movs	r3, #11
   2b802:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2b804:	2327      	movs	r3, #39	; 0x27
   2b806:	18fb      	adds	r3, r7, r3
   2b808:	2227      	movs	r2, #39	; 0x27
   2b80a:	18ba      	adds	r2, r7, r2
   2b80c:	7812      	ldrb	r2, [r2, #0]
   2b80e:	0092      	lsls	r2, r2, #2
   2b810:	701a      	strb	r2, [r3, #0]
   2b812:	e078      	b.n	2b906 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2b814:	2324      	movs	r3, #36	; 0x24
   2b816:	18fb      	adds	r3, r7, r3
   2b818:	881b      	ldrh	r3, [r3, #0]
   2b81a:	2b7f      	cmp	r3, #127	; 0x7f
   2b81c:	d920      	bls.n	2b860 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2b81e:	2324      	movs	r3, #36	; 0x24
   2b820:	18fc      	adds	r4, r7, r3
   2b822:	2324      	movs	r3, #36	; 0x24
   2b824:	18fb      	adds	r3, r7, r3
   2b826:	881b      	ldrh	r3, [r3, #0]
   2b828:	2100      	movs	r1, #0
   2b82a:	0018      	movs	r0, r3
   2b82c:	4b37      	ldr	r3, [pc, #220]	; (2b90c <create_name+0x378>)
   2b82e:	4798      	blx	r3
   2b830:	0003      	movs	r3, r0
   2b832:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2b834:	2324      	movs	r3, #36	; 0x24
   2b836:	18fb      	adds	r3, r7, r3
   2b838:	881b      	ldrh	r3, [r3, #0]
   2b83a:	2b00      	cmp	r3, #0
   2b83c:	d008      	beq.n	2b850 <create_name+0x2bc>
   2b83e:	2324      	movs	r3, #36	; 0x24
   2b840:	18fb      	adds	r3, r7, r3
   2b842:	881b      	ldrh	r3, [r3, #0]
   2b844:	3b80      	subs	r3, #128	; 0x80
   2b846:	4a36      	ldr	r2, [pc, #216]	; (2b920 <create_name+0x38c>)
   2b848:	5cd2      	ldrb	r2, [r2, r3]
   2b84a:	2324      	movs	r3, #36	; 0x24
   2b84c:	18fb      	adds	r3, r7, r3
   2b84e:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2b850:	2326      	movs	r3, #38	; 0x26
   2b852:	18fb      	adds	r3, r7, r3
   2b854:	2226      	movs	r2, #38	; 0x26
   2b856:	18ba      	adds	r2, r7, r2
   2b858:	7812      	ldrb	r2, [r2, #0]
   2b85a:	2102      	movs	r1, #2
   2b85c:	430a      	orrs	r2, r1
   2b85e:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2b860:	2324      	movs	r3, #36	; 0x24
   2b862:	18fb      	adds	r3, r7, r3
   2b864:	881b      	ldrh	r3, [r3, #0]
   2b866:	2b00      	cmp	r3, #0
   2b868:	d009      	beq.n	2b87e <create_name+0x2ea>
   2b86a:	2324      	movs	r3, #36	; 0x24
   2b86c:	18fb      	adds	r3, r7, r3
   2b86e:	881a      	ldrh	r2, [r3, #0]
   2b870:	4b2c      	ldr	r3, [pc, #176]	; (2b924 <create_name+0x390>)
   2b872:	0011      	movs	r1, r2
   2b874:	0018      	movs	r0, r3
   2b876:	4b27      	ldr	r3, [pc, #156]	; (2b914 <create_name+0x380>)
   2b878:	4798      	blx	r3
   2b87a:	1e03      	subs	r3, r0, #0
   2b87c:	d00c      	beq.n	2b898 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2b87e:	2324      	movs	r3, #36	; 0x24
   2b880:	18fb      	adds	r3, r7, r3
   2b882:	225f      	movs	r2, #95	; 0x5f
   2b884:	801a      	strh	r2, [r3, #0]
   2b886:	2326      	movs	r3, #38	; 0x26
   2b888:	18fb      	adds	r3, r7, r3
   2b88a:	2226      	movs	r2, #38	; 0x26
   2b88c:	18ba      	adds	r2, r7, r2
   2b88e:	7812      	ldrb	r2, [r2, #0]
   2b890:	2103      	movs	r1, #3
   2b892:	430a      	orrs	r2, r1
   2b894:	701a      	strb	r2, [r3, #0]
   2b896:	e02b      	b.n	2b8f0 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2b898:	2324      	movs	r3, #36	; 0x24
   2b89a:	18fb      	adds	r3, r7, r3
   2b89c:	881b      	ldrh	r3, [r3, #0]
   2b89e:	2b40      	cmp	r3, #64	; 0x40
   2b8a0:	d90d      	bls.n	2b8be <create_name+0x32a>
   2b8a2:	2324      	movs	r3, #36	; 0x24
   2b8a4:	18fb      	adds	r3, r7, r3
   2b8a6:	881b      	ldrh	r3, [r3, #0]
   2b8a8:	2b5a      	cmp	r3, #90	; 0x5a
   2b8aa:	d808      	bhi.n	2b8be <create_name+0x32a>
					b |= 2;
   2b8ac:	2327      	movs	r3, #39	; 0x27
   2b8ae:	18fb      	adds	r3, r7, r3
   2b8b0:	2227      	movs	r2, #39	; 0x27
   2b8b2:	18ba      	adds	r2, r7, r2
   2b8b4:	7812      	ldrb	r2, [r2, #0]
   2b8b6:	2102      	movs	r1, #2
   2b8b8:	430a      	orrs	r2, r1
   2b8ba:	701a      	strb	r2, [r3, #0]
   2b8bc:	e018      	b.n	2b8f0 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2b8be:	2324      	movs	r3, #36	; 0x24
   2b8c0:	18fb      	adds	r3, r7, r3
   2b8c2:	881b      	ldrh	r3, [r3, #0]
   2b8c4:	2b60      	cmp	r3, #96	; 0x60
   2b8c6:	d913      	bls.n	2b8f0 <create_name+0x35c>
   2b8c8:	2324      	movs	r3, #36	; 0x24
   2b8ca:	18fb      	adds	r3, r7, r3
   2b8cc:	881b      	ldrh	r3, [r3, #0]
   2b8ce:	2b7a      	cmp	r3, #122	; 0x7a
   2b8d0:	d80e      	bhi.n	2b8f0 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2b8d2:	2327      	movs	r3, #39	; 0x27
   2b8d4:	18fb      	adds	r3, r7, r3
   2b8d6:	2227      	movs	r2, #39	; 0x27
   2b8d8:	18ba      	adds	r2, r7, r2
   2b8da:	7812      	ldrb	r2, [r2, #0]
   2b8dc:	2101      	movs	r1, #1
   2b8de:	430a      	orrs	r2, r1
   2b8e0:	701a      	strb	r2, [r3, #0]
   2b8e2:	2324      	movs	r3, #36	; 0x24
   2b8e4:	18fb      	adds	r3, r7, r3
   2b8e6:	2224      	movs	r2, #36	; 0x24
   2b8e8:	18ba      	adds	r2, r7, r2
   2b8ea:	8812      	ldrh	r2, [r2, #0]
   2b8ec:	3a20      	subs	r2, #32
   2b8ee:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2b8f0:	687b      	ldr	r3, [r7, #4]
   2b8f2:	699a      	ldr	r2, [r3, #24]
   2b8f4:	6a3b      	ldr	r3, [r7, #32]
   2b8f6:	1c59      	adds	r1, r3, #1
   2b8f8:	6239      	str	r1, [r7, #32]
   2b8fa:	18d3      	adds	r3, r2, r3
   2b8fc:	2224      	movs	r2, #36	; 0x24
   2b8fe:	18ba      	adds	r2, r7, r2
   2b900:	8812      	ldrh	r2, [r2, #0]
   2b902:	b2d2      	uxtb	r2, r2
   2b904:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2b906:	e72b      	b.n	2b760 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2b908:	46c0      	nop			; (mov r8, r8)
   2b90a:	e00e      	b.n	2b92a <create_name+0x396>
   2b90c:	0002cccd 	.word	0x0002cccd
   2b910:	00037aa4 	.word	0x00037aa4
   2b914:	0002a137 	.word	0x0002a137
   2b918:	7fffffff 	.word	0x7fffffff
   2b91c:	0002a0bd 	.word	0x0002a0bd
   2b920:	00037aec 	.word	0x00037aec
   2b924:	00037ab0 	.word	0x00037ab0
			if (si > di) break;			/* No extension */
   2b928:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2b92a:	687b      	ldr	r3, [r7, #4]
   2b92c:	699b      	ldr	r3, [r3, #24]
   2b92e:	781b      	ldrb	r3, [r3, #0]
   2b930:	2be5      	cmp	r3, #229	; 0xe5
   2b932:	d103      	bne.n	2b93c <create_name+0x3a8>
   2b934:	687b      	ldr	r3, [r7, #4]
   2b936:	699b      	ldr	r3, [r3, #24]
   2b938:	2205      	movs	r2, #5
   2b93a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2b93c:	69fb      	ldr	r3, [r7, #28]
   2b93e:	2b08      	cmp	r3, #8
   2b940:	d106      	bne.n	2b950 <create_name+0x3bc>
   2b942:	2327      	movs	r3, #39	; 0x27
   2b944:	18fb      	adds	r3, r7, r3
   2b946:	2227      	movs	r2, #39	; 0x27
   2b948:	18ba      	adds	r2, r7, r2
   2b94a:	7812      	ldrb	r2, [r2, #0]
   2b94c:	0092      	lsls	r2, r2, #2
   2b94e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2b950:	2327      	movs	r3, #39	; 0x27
   2b952:	18fb      	adds	r3, r7, r3
   2b954:	781b      	ldrb	r3, [r3, #0]
   2b956:	220c      	movs	r2, #12
   2b958:	4013      	ands	r3, r2
   2b95a:	2b0c      	cmp	r3, #12
   2b95c:	d006      	beq.n	2b96c <create_name+0x3d8>
   2b95e:	2327      	movs	r3, #39	; 0x27
   2b960:	18fb      	adds	r3, r7, r3
   2b962:	781b      	ldrb	r3, [r3, #0]
   2b964:	2203      	movs	r2, #3
   2b966:	4013      	ands	r3, r2
   2b968:	2b03      	cmp	r3, #3
   2b96a:	d107      	bne.n	2b97c <create_name+0x3e8>
		cf |= NS_LFN;
   2b96c:	2326      	movs	r3, #38	; 0x26
   2b96e:	18fb      	adds	r3, r7, r3
   2b970:	2226      	movs	r2, #38	; 0x26
   2b972:	18ba      	adds	r2, r7, r2
   2b974:	7812      	ldrb	r2, [r2, #0]
   2b976:	2102      	movs	r1, #2
   2b978:	430a      	orrs	r2, r1
   2b97a:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2b97c:	2326      	movs	r3, #38	; 0x26
   2b97e:	18fb      	adds	r3, r7, r3
   2b980:	781b      	ldrb	r3, [r3, #0]
   2b982:	2202      	movs	r2, #2
   2b984:	4013      	ands	r3, r2
   2b986:	d11d      	bne.n	2b9c4 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2b988:	2327      	movs	r3, #39	; 0x27
   2b98a:	18fb      	adds	r3, r7, r3
   2b98c:	781b      	ldrb	r3, [r3, #0]
   2b98e:	2203      	movs	r2, #3
   2b990:	4013      	ands	r3, r2
   2b992:	2b01      	cmp	r3, #1
   2b994:	d107      	bne.n	2b9a6 <create_name+0x412>
   2b996:	2326      	movs	r3, #38	; 0x26
   2b998:	18fb      	adds	r3, r7, r3
   2b99a:	2226      	movs	r2, #38	; 0x26
   2b99c:	18ba      	adds	r2, r7, r2
   2b99e:	7812      	ldrb	r2, [r2, #0]
   2b9a0:	2110      	movs	r1, #16
   2b9a2:	430a      	orrs	r2, r1
   2b9a4:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2b9a6:	2327      	movs	r3, #39	; 0x27
   2b9a8:	18fb      	adds	r3, r7, r3
   2b9aa:	781b      	ldrb	r3, [r3, #0]
   2b9ac:	220c      	movs	r2, #12
   2b9ae:	4013      	ands	r3, r2
   2b9b0:	2b04      	cmp	r3, #4
   2b9b2:	d107      	bne.n	2b9c4 <create_name+0x430>
   2b9b4:	2326      	movs	r3, #38	; 0x26
   2b9b6:	18fb      	adds	r3, r7, r3
   2b9b8:	2226      	movs	r2, #38	; 0x26
   2b9ba:	18ba      	adds	r2, r7, r2
   2b9bc:	7812      	ldrb	r2, [r2, #0]
   2b9be:	2108      	movs	r1, #8
   2b9c0:	430a      	orrs	r2, r1
   2b9c2:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2b9c4:	687b      	ldr	r3, [r7, #4]
   2b9c6:	699b      	ldr	r3, [r3, #24]
   2b9c8:	330b      	adds	r3, #11
   2b9ca:	2226      	movs	r2, #38	; 0x26
   2b9cc:	18ba      	adds	r2, r7, r2
   2b9ce:	7812      	ldrb	r2, [r2, #0]
   2b9d0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2b9d2:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2b9d4:	0018      	movs	r0, r3
   2b9d6:	46bd      	mov	sp, r7
   2b9d8:	b00b      	add	sp, #44	; 0x2c
   2b9da:	bd90      	pop	{r4, r7, pc}

0002b9dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2b9dc:	b590      	push	{r4, r7, lr}
   2b9de:	b085      	sub	sp, #20
   2b9e0:	af00      	add	r7, sp, #0
   2b9e2:	6078      	str	r0, [r7, #4]
   2b9e4:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2b9e6:	683b      	ldr	r3, [r7, #0]
   2b9e8:	781b      	ldrb	r3, [r3, #0]
   2b9ea:	2b2f      	cmp	r3, #47	; 0x2f
   2b9ec:	d003      	beq.n	2b9f6 <follow_path+0x1a>
   2b9ee:	683b      	ldr	r3, [r7, #0]
   2b9f0:	781b      	ldrb	r3, [r3, #0]
   2b9f2:	2b5c      	cmp	r3, #92	; 0x5c
   2b9f4:	d102      	bne.n	2b9fc <follow_path+0x20>
		path++;
   2b9f6:	683b      	ldr	r3, [r7, #0]
   2b9f8:	3301      	adds	r3, #1
   2b9fa:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2b9fc:	687b      	ldr	r3, [r7, #4]
   2b9fe:	2200      	movs	r2, #0
   2ba00:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2ba02:	683b      	ldr	r3, [r7, #0]
   2ba04:	781b      	ldrb	r3, [r3, #0]
   2ba06:	2b1f      	cmp	r3, #31
   2ba08:	d80c      	bhi.n	2ba24 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2ba0a:	230f      	movs	r3, #15
   2ba0c:	18fc      	adds	r4, r7, r3
   2ba0e:	687b      	ldr	r3, [r7, #4]
   2ba10:	2100      	movs	r1, #0
   2ba12:	0018      	movs	r0, r3
   2ba14:	4b3c      	ldr	r3, [pc, #240]	; (2bb08 <follow_path+0x12c>)
   2ba16:	4798      	blx	r3
   2ba18:	0003      	movs	r3, r0
   2ba1a:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2ba1c:	687b      	ldr	r3, [r7, #4]
   2ba1e:	2200      	movs	r2, #0
   2ba20:	615a      	str	r2, [r3, #20]
   2ba22:	e06a      	b.n	2bafa <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2ba24:	230f      	movs	r3, #15
   2ba26:	18fc      	adds	r4, r7, r3
   2ba28:	003a      	movs	r2, r7
   2ba2a:	687b      	ldr	r3, [r7, #4]
   2ba2c:	0011      	movs	r1, r2
   2ba2e:	0018      	movs	r0, r3
   2ba30:	4b36      	ldr	r3, [pc, #216]	; (2bb0c <follow_path+0x130>)
   2ba32:	4798      	blx	r3
   2ba34:	0003      	movs	r3, r0
   2ba36:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2ba38:	230f      	movs	r3, #15
   2ba3a:	18fb      	adds	r3, r7, r3
   2ba3c:	781b      	ldrb	r3, [r3, #0]
   2ba3e:	2b00      	cmp	r3, #0
   2ba40:	d154      	bne.n	2baec <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2ba42:	230f      	movs	r3, #15
   2ba44:	18fc      	adds	r4, r7, r3
   2ba46:	687b      	ldr	r3, [r7, #4]
   2ba48:	0018      	movs	r0, r3
   2ba4a:	4b31      	ldr	r3, [pc, #196]	; (2bb10 <follow_path+0x134>)
   2ba4c:	4798      	blx	r3
   2ba4e:	0003      	movs	r3, r0
   2ba50:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2ba52:	687b      	ldr	r3, [r7, #4]
   2ba54:	699a      	ldr	r2, [r3, #24]
   2ba56:	230e      	movs	r3, #14
   2ba58:	18fb      	adds	r3, r7, r3
   2ba5a:	7ad2      	ldrb	r2, [r2, #11]
   2ba5c:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2ba5e:	230f      	movs	r3, #15
   2ba60:	18fb      	adds	r3, r7, r3
   2ba62:	781b      	ldrb	r3, [r3, #0]
   2ba64:	2b00      	cmp	r3, #0
   2ba66:	d00f      	beq.n	2ba88 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2ba68:	230f      	movs	r3, #15
   2ba6a:	18fb      	adds	r3, r7, r3
   2ba6c:	781b      	ldrb	r3, [r3, #0]
   2ba6e:	2b04      	cmp	r3, #4
   2ba70:	d13e      	bne.n	2baf0 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2ba72:	230e      	movs	r3, #14
   2ba74:	18fb      	adds	r3, r7, r3
   2ba76:	781b      	ldrb	r3, [r3, #0]
   2ba78:	2204      	movs	r2, #4
   2ba7a:	4013      	ands	r3, r2
   2ba7c:	d13a      	bne.n	2baf4 <follow_path+0x118>
   2ba7e:	230f      	movs	r3, #15
   2ba80:	18fb      	adds	r3, r7, r3
   2ba82:	2205      	movs	r2, #5
   2ba84:	701a      	strb	r2, [r3, #0]
				}
				break;
   2ba86:	e035      	b.n	2baf4 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2ba88:	230e      	movs	r3, #14
   2ba8a:	18fb      	adds	r3, r7, r3
   2ba8c:	781b      	ldrb	r3, [r3, #0]
   2ba8e:	2204      	movs	r2, #4
   2ba90:	4013      	ands	r3, r2
   2ba92:	d131      	bne.n	2baf8 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2ba94:	687b      	ldr	r3, [r7, #4]
   2ba96:	695b      	ldr	r3, [r3, #20]
   2ba98:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2ba9a:	68bb      	ldr	r3, [r7, #8]
   2ba9c:	330b      	adds	r3, #11
   2ba9e:	781b      	ldrb	r3, [r3, #0]
   2baa0:	001a      	movs	r2, r3
   2baa2:	2310      	movs	r3, #16
   2baa4:	4013      	ands	r3, r2
   2baa6:	d104      	bne.n	2bab2 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2baa8:	230f      	movs	r3, #15
   2baaa:	18fb      	adds	r3, r7, r3
   2baac:	2205      	movs	r2, #5
   2baae:	701a      	strb	r2, [r3, #0]
   2bab0:	e023      	b.n	2bafa <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2bab2:	68bb      	ldr	r3, [r7, #8]
   2bab4:	3315      	adds	r3, #21
   2bab6:	781b      	ldrb	r3, [r3, #0]
   2bab8:	021b      	lsls	r3, r3, #8
   2baba:	b21a      	sxth	r2, r3
   2babc:	68bb      	ldr	r3, [r7, #8]
   2babe:	3314      	adds	r3, #20
   2bac0:	781b      	ldrb	r3, [r3, #0]
   2bac2:	b21b      	sxth	r3, r3
   2bac4:	4313      	orrs	r3, r2
   2bac6:	b21b      	sxth	r3, r3
   2bac8:	b29b      	uxth	r3, r3
   2baca:	041b      	lsls	r3, r3, #16
   2bacc:	68ba      	ldr	r2, [r7, #8]
   2bace:	321b      	adds	r2, #27
   2bad0:	7812      	ldrb	r2, [r2, #0]
   2bad2:	0212      	lsls	r2, r2, #8
   2bad4:	b211      	sxth	r1, r2
   2bad6:	68ba      	ldr	r2, [r7, #8]
   2bad8:	321a      	adds	r2, #26
   2bada:	7812      	ldrb	r2, [r2, #0]
   2badc:	b212      	sxth	r2, r2
   2bade:	430a      	orrs	r2, r1
   2bae0:	b212      	sxth	r2, r2
   2bae2:	b292      	uxth	r2, r2
   2bae4:	431a      	orrs	r2, r3
   2bae6:	687b      	ldr	r3, [r7, #4]
   2bae8:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2baea:	e79b      	b.n	2ba24 <follow_path+0x48>
			if (res != FR_OK) break;
   2baec:	46c0      	nop			; (mov r8, r8)
   2baee:	e004      	b.n	2bafa <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2baf0:	46c0      	nop			; (mov r8, r8)
   2baf2:	e002      	b.n	2bafa <follow_path+0x11e>
				break;
   2baf4:	46c0      	nop			; (mov r8, r8)
   2baf6:	e000      	b.n	2bafa <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2baf8:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2bafa:	230f      	movs	r3, #15
   2bafc:	18fb      	adds	r3, r7, r3
   2bafe:	781b      	ldrb	r3, [r3, #0]
}
   2bb00:	0018      	movs	r0, r3
   2bb02:	46bd      	mov	sp, r7
   2bb04:	b005      	add	sp, #20
   2bb06:	bd90      	pop	{r4, r7, pc}
   2bb08:	0002a9ad 	.word	0x0002a9ad
   2bb0c:	0002b595 	.word	0x0002b595
   2bb10:	0002b031 	.word	0x0002b031

0002bb14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2bb14:	b590      	push	{r4, r7, lr}
   2bb16:	b083      	sub	sp, #12
   2bb18:	af00      	add	r7, sp, #0
   2bb1a:	6078      	str	r0, [r7, #4]
   2bb1c:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2bb1e:	687b      	ldr	r3, [r7, #4]
   2bb20:	7858      	ldrb	r0, [r3, #1]
   2bb22:	687b      	ldr	r3, [r7, #4]
   2bb24:	3330      	adds	r3, #48	; 0x30
   2bb26:	0019      	movs	r1, r3
   2bb28:	683a      	ldr	r2, [r7, #0]
   2bb2a:	2301      	movs	r3, #1
   2bb2c:	4c2a      	ldr	r4, [pc, #168]	; (2bbd8 <check_fs+0xc4>)
   2bb2e:	47a0      	blx	r4
   2bb30:	1e03      	subs	r3, r0, #0
   2bb32:	d001      	beq.n	2bb38 <check_fs+0x24>
		return 3;
   2bb34:	2303      	movs	r3, #3
   2bb36:	e04b      	b.n	2bbd0 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2bb38:	687b      	ldr	r3, [r7, #4]
   2bb3a:	4a28      	ldr	r2, [pc, #160]	; (2bbdc <check_fs+0xc8>)
   2bb3c:	4694      	mov	ip, r2
   2bb3e:	4463      	add	r3, ip
   2bb40:	3301      	adds	r3, #1
   2bb42:	781b      	ldrb	r3, [r3, #0]
   2bb44:	021b      	lsls	r3, r3, #8
   2bb46:	b21a      	sxth	r2, r3
   2bb48:	687b      	ldr	r3, [r7, #4]
   2bb4a:	4924      	ldr	r1, [pc, #144]	; (2bbdc <check_fs+0xc8>)
   2bb4c:	5c5b      	ldrb	r3, [r3, r1]
   2bb4e:	b21b      	sxth	r3, r3
   2bb50:	4313      	orrs	r3, r2
   2bb52:	b21b      	sxth	r3, r3
   2bb54:	4a22      	ldr	r2, [pc, #136]	; (2bbe0 <check_fs+0xcc>)
   2bb56:	4293      	cmp	r3, r2
   2bb58:	d001      	beq.n	2bb5e <check_fs+0x4a>
		return 2;
   2bb5a:	2302      	movs	r3, #2
   2bb5c:	e038      	b.n	2bbd0 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2bb5e:	687b      	ldr	r3, [r7, #4]
   2bb60:	3366      	adds	r3, #102	; 0x66
   2bb62:	3303      	adds	r3, #3
   2bb64:	781b      	ldrb	r3, [r3, #0]
   2bb66:	061a      	lsls	r2, r3, #24
   2bb68:	687b      	ldr	r3, [r7, #4]
   2bb6a:	3366      	adds	r3, #102	; 0x66
   2bb6c:	3302      	adds	r3, #2
   2bb6e:	781b      	ldrb	r3, [r3, #0]
   2bb70:	041b      	lsls	r3, r3, #16
   2bb72:	4313      	orrs	r3, r2
   2bb74:	687a      	ldr	r2, [r7, #4]
   2bb76:	3266      	adds	r2, #102	; 0x66
   2bb78:	3201      	adds	r2, #1
   2bb7a:	7812      	ldrb	r2, [r2, #0]
   2bb7c:	0212      	lsls	r2, r2, #8
   2bb7e:	4313      	orrs	r3, r2
   2bb80:	687a      	ldr	r2, [r7, #4]
   2bb82:	2166      	movs	r1, #102	; 0x66
   2bb84:	5c52      	ldrb	r2, [r2, r1]
   2bb86:	4313      	orrs	r3, r2
   2bb88:	021b      	lsls	r3, r3, #8
   2bb8a:	0a1b      	lsrs	r3, r3, #8
   2bb8c:	4a15      	ldr	r2, [pc, #84]	; (2bbe4 <check_fs+0xd0>)
   2bb8e:	4293      	cmp	r3, r2
   2bb90:	d101      	bne.n	2bb96 <check_fs+0x82>
		return 0;
   2bb92:	2300      	movs	r3, #0
   2bb94:	e01c      	b.n	2bbd0 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2bb96:	687b      	ldr	r3, [r7, #4]
   2bb98:	3382      	adds	r3, #130	; 0x82
   2bb9a:	3303      	adds	r3, #3
   2bb9c:	781b      	ldrb	r3, [r3, #0]
   2bb9e:	061a      	lsls	r2, r3, #24
   2bba0:	687b      	ldr	r3, [r7, #4]
   2bba2:	3382      	adds	r3, #130	; 0x82
   2bba4:	3302      	adds	r3, #2
   2bba6:	781b      	ldrb	r3, [r3, #0]
   2bba8:	041b      	lsls	r3, r3, #16
   2bbaa:	4313      	orrs	r3, r2
   2bbac:	687a      	ldr	r2, [r7, #4]
   2bbae:	3282      	adds	r2, #130	; 0x82
   2bbb0:	3201      	adds	r2, #1
   2bbb2:	7812      	ldrb	r2, [r2, #0]
   2bbb4:	0212      	lsls	r2, r2, #8
   2bbb6:	4313      	orrs	r3, r2
   2bbb8:	687a      	ldr	r2, [r7, #4]
   2bbba:	2182      	movs	r1, #130	; 0x82
   2bbbc:	5c52      	ldrb	r2, [r2, r1]
   2bbbe:	4313      	orrs	r3, r2
   2bbc0:	021b      	lsls	r3, r3, #8
   2bbc2:	0a1b      	lsrs	r3, r3, #8
   2bbc4:	4a07      	ldr	r2, [pc, #28]	; (2bbe4 <check_fs+0xd0>)
   2bbc6:	4293      	cmp	r3, r2
   2bbc8:	d101      	bne.n	2bbce <check_fs+0xba>
		return 0;
   2bbca:	2300      	movs	r3, #0
   2bbcc:	e000      	b.n	2bbd0 <check_fs+0xbc>

	return 1;
   2bbce:	2301      	movs	r3, #1
}
   2bbd0:	0018      	movs	r0, r3
   2bbd2:	46bd      	mov	sp, r7
   2bbd4:	b003      	add	sp, #12
   2bbd6:	bd90      	pop	{r4, r7, pc}
   2bbd8:	00029d7d 	.word	0x00029d7d
   2bbdc:	0000022e 	.word	0x0000022e
   2bbe0:	ffffaa55 	.word	0xffffaa55
   2bbe4:	00544146 	.word	0x00544146

0002bbe8 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2bbe8:	b590      	push	{r4, r7, lr}
   2bbea:	b093      	sub	sp, #76	; 0x4c
   2bbec:	af00      	add	r7, sp, #0
   2bbee:	60f8      	str	r0, [r7, #12]
   2bbf0:	60b9      	str	r1, [r7, #8]
   2bbf2:	1dfb      	adds	r3, r7, #7
   2bbf4:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2bbf6:	68fb      	ldr	r3, [r7, #12]
   2bbf8:	681b      	ldr	r3, [r3, #0]
   2bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2bbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2bbfe:	781b      	ldrb	r3, [r3, #0]
   2bc00:	3b30      	subs	r3, #48	; 0x30
   2bc02:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2bc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2bc06:	2b09      	cmp	r3, #9
   2bc08:	d80b      	bhi.n	2bc22 <chk_mounted+0x3a>
   2bc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2bc0c:	3301      	adds	r3, #1
   2bc0e:	781b      	ldrb	r3, [r3, #0]
   2bc10:	2b3a      	cmp	r3, #58	; 0x3a
   2bc12:	d106      	bne.n	2bc22 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2bc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2bc16:	3302      	adds	r3, #2
   2bc18:	62fb      	str	r3, [r7, #44]	; 0x2c
   2bc1a:	68fb      	ldr	r3, [r7, #12]
   2bc1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2bc1e:	601a      	str	r2, [r3, #0]
   2bc20:	e001      	b.n	2bc26 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2bc22:	2300      	movs	r3, #0
   2bc24:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2bc26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2bc28:	2b07      	cmp	r3, #7
   2bc2a:	d901      	bls.n	2bc30 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2bc2c:	230b      	movs	r3, #11
   2bc2e:	e2af      	b.n	2c190 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2bc30:	4bc5      	ldr	r3, [pc, #788]	; (2bf48 <chk_mounted+0x360>)
   2bc32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2bc34:	0092      	lsls	r2, r2, #2
   2bc36:	58d3      	ldr	r3, [r2, r3]
   2bc38:	62bb      	str	r3, [r7, #40]	; 0x28
   2bc3a:	68bb      	ldr	r3, [r7, #8]
   2bc3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bc3e:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2bc40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc42:	2b00      	cmp	r3, #0
   2bc44:	d101      	bne.n	2bc4a <chk_mounted+0x62>
   2bc46:	230c      	movs	r3, #12
   2bc48:	e2a2      	b.n	2c190 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2bc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc4c:	781b      	ldrb	r3, [r3, #0]
   2bc4e:	2b00      	cmp	r3, #0
   2bc50:	d01c      	beq.n	2bc8c <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2bc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc54:	785b      	ldrb	r3, [r3, #1]
   2bc56:	2227      	movs	r2, #39	; 0x27
   2bc58:	18bc      	adds	r4, r7, r2
   2bc5a:	0018      	movs	r0, r3
   2bc5c:	4bbb      	ldr	r3, [pc, #748]	; (2bf4c <chk_mounted+0x364>)
   2bc5e:	4798      	blx	r3
   2bc60:	0003      	movs	r3, r0
   2bc62:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2bc64:	2327      	movs	r3, #39	; 0x27
   2bc66:	18fb      	adds	r3, r7, r3
   2bc68:	781b      	ldrb	r3, [r3, #0]
   2bc6a:	2201      	movs	r2, #1
   2bc6c:	4013      	ands	r3, r2
   2bc6e:	d10d      	bne.n	2bc8c <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2bc70:	1dfb      	adds	r3, r7, #7
   2bc72:	781b      	ldrb	r3, [r3, #0]
   2bc74:	2b00      	cmp	r3, #0
   2bc76:	d007      	beq.n	2bc88 <chk_mounted+0xa0>
   2bc78:	2327      	movs	r3, #39	; 0x27
   2bc7a:	18fb      	adds	r3, r7, r3
   2bc7c:	781b      	ldrb	r3, [r3, #0]
   2bc7e:	2204      	movs	r2, #4
   2bc80:	4013      	ands	r3, r2
   2bc82:	d001      	beq.n	2bc88 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2bc84:	230a      	movs	r3, #10
   2bc86:	e283      	b.n	2c190 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2bc88:	2300      	movs	r3, #0
   2bc8a:	e281      	b.n	2c190 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2bc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc8e:	2200      	movs	r2, #0
   2bc90:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2bc92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2bc94:	b2da      	uxtb	r2, r3
   2bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc98:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bc9c:	785b      	ldrb	r3, [r3, #1]
   2bc9e:	2227      	movs	r2, #39	; 0x27
   2bca0:	18bc      	adds	r4, r7, r2
   2bca2:	0018      	movs	r0, r3
   2bca4:	4baa      	ldr	r3, [pc, #680]	; (2bf50 <chk_mounted+0x368>)
   2bca6:	4798      	blx	r3
   2bca8:	0003      	movs	r3, r0
   2bcaa:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2bcac:	2327      	movs	r3, #39	; 0x27
   2bcae:	18fb      	adds	r3, r7, r3
   2bcb0:	781b      	ldrb	r3, [r3, #0]
   2bcb2:	2201      	movs	r2, #1
   2bcb4:	4013      	ands	r3, r2
   2bcb6:	d001      	beq.n	2bcbc <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2bcb8:	2303      	movs	r3, #3
   2bcba:	e269      	b.n	2c190 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2bcbc:	1dfb      	adds	r3, r7, #7
   2bcbe:	781b      	ldrb	r3, [r3, #0]
   2bcc0:	2b00      	cmp	r3, #0
   2bcc2:	d007      	beq.n	2bcd4 <chk_mounted+0xec>
   2bcc4:	2327      	movs	r3, #39	; 0x27
   2bcc6:	18fb      	adds	r3, r7, r3
   2bcc8:	781b      	ldrb	r3, [r3, #0]
   2bcca:	2204      	movs	r2, #4
   2bccc:	4013      	ands	r3, r2
   2bcce:	d001      	beq.n	2bcd4 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2bcd0:	230a      	movs	r3, #10
   2bcd2:	e25d      	b.n	2c190 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2bcd4:	2300      	movs	r3, #0
   2bcd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bcd8:	2347      	movs	r3, #71	; 0x47
   2bcda:	18fc      	adds	r4, r7, r3
   2bcdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bce0:	0011      	movs	r1, r2
   2bce2:	0018      	movs	r0, r3
   2bce4:	4b9b      	ldr	r3, [pc, #620]	; (2bf54 <chk_mounted+0x36c>)
   2bce6:	4798      	blx	r3
   2bce8:	0003      	movs	r3, r0
   2bcea:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2bcec:	2347      	movs	r3, #71	; 0x47
   2bcee:	18fb      	adds	r3, r7, r3
   2bcf0:	781b      	ldrb	r3, [r3, #0]
   2bcf2:	2b01      	cmp	r3, #1
   2bcf4:	d13b      	bne.n	2bd6e <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2bcf6:	2346      	movs	r3, #70	; 0x46
   2bcf8:	18fb      	adds	r3, r7, r3
   2bcfa:	2200      	movs	r2, #0
   2bcfc:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2bcfe:	2346      	movs	r3, #70	; 0x46
   2bd00:	18fb      	adds	r3, r7, r3
   2bd02:	781b      	ldrb	r3, [r3, #0]
   2bd04:	2b00      	cmp	r3, #0
   2bd06:	d006      	beq.n	2bd16 <chk_mounted+0x12e>
   2bd08:	2346      	movs	r3, #70	; 0x46
   2bd0a:	18fb      	adds	r3, r7, r3
   2bd0c:	781a      	ldrb	r2, [r3, #0]
   2bd0e:	2346      	movs	r3, #70	; 0x46
   2bd10:	18fb      	adds	r3, r7, r3
   2bd12:	3a01      	subs	r2, #1
   2bd14:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2bd16:	2346      	movs	r3, #70	; 0x46
   2bd18:	18fb      	adds	r3, r7, r3
   2bd1a:	781b      	ldrb	r3, [r3, #0]
   2bd1c:	011b      	lsls	r3, r3, #4
   2bd1e:	33bf      	adds	r3, #191	; 0xbf
   2bd20:	33ff      	adds	r3, #255	; 0xff
   2bd22:	3330      	adds	r3, #48	; 0x30
   2bd24:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bd26:	18d3      	adds	r3, r2, r3
   2bd28:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2bd2a:	6a3b      	ldr	r3, [r7, #32]
   2bd2c:	3304      	adds	r3, #4
   2bd2e:	781b      	ldrb	r3, [r3, #0]
   2bd30:	2b00      	cmp	r3, #0
   2bd32:	d01c      	beq.n	2bd6e <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2bd34:	6a3b      	ldr	r3, [r7, #32]
   2bd36:	330b      	adds	r3, #11
   2bd38:	781b      	ldrb	r3, [r3, #0]
   2bd3a:	061a      	lsls	r2, r3, #24
   2bd3c:	6a3b      	ldr	r3, [r7, #32]
   2bd3e:	330a      	adds	r3, #10
   2bd40:	781b      	ldrb	r3, [r3, #0]
   2bd42:	041b      	lsls	r3, r3, #16
   2bd44:	4313      	orrs	r3, r2
   2bd46:	6a3a      	ldr	r2, [r7, #32]
   2bd48:	3209      	adds	r2, #9
   2bd4a:	7812      	ldrb	r2, [r2, #0]
   2bd4c:	0212      	lsls	r2, r2, #8
   2bd4e:	4313      	orrs	r3, r2
   2bd50:	6a3a      	ldr	r2, [r7, #32]
   2bd52:	3208      	adds	r2, #8
   2bd54:	7812      	ldrb	r2, [r2, #0]
   2bd56:	4313      	orrs	r3, r2
   2bd58:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2bd5a:	2347      	movs	r3, #71	; 0x47
   2bd5c:	18fc      	adds	r4, r7, r3
   2bd5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd62:	0011      	movs	r1, r2
   2bd64:	0018      	movs	r0, r3
   2bd66:	4b7b      	ldr	r3, [pc, #492]	; (2bf54 <chk_mounted+0x36c>)
   2bd68:	4798      	blx	r3
   2bd6a:	0003      	movs	r3, r0
   2bd6c:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2bd6e:	2347      	movs	r3, #71	; 0x47
   2bd70:	18fb      	adds	r3, r7, r3
   2bd72:	781b      	ldrb	r3, [r3, #0]
   2bd74:	2b03      	cmp	r3, #3
   2bd76:	d101      	bne.n	2bd7c <chk_mounted+0x194>
   2bd78:	2301      	movs	r3, #1
   2bd7a:	e209      	b.n	2c190 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2bd7c:	2347      	movs	r3, #71	; 0x47
   2bd7e:	18fb      	adds	r3, r7, r3
   2bd80:	781b      	ldrb	r3, [r3, #0]
   2bd82:	2b00      	cmp	r3, #0
   2bd84:	d001      	beq.n	2bd8a <chk_mounted+0x1a2>
   2bd86:	230d      	movs	r3, #13
   2bd88:	e202      	b.n	2c190 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd8c:	223c      	movs	r2, #60	; 0x3c
   2bd8e:	5c9b      	ldrb	r3, [r3, r2]
   2bd90:	021b      	lsls	r3, r3, #8
   2bd92:	b21a      	sxth	r2, r3
   2bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bd96:	213b      	movs	r1, #59	; 0x3b
   2bd98:	5c5b      	ldrb	r3, [r3, r1]
   2bd9a:	b21b      	sxth	r3, r3
   2bd9c:	4313      	orrs	r3, r2
   2bd9e:	b21a      	sxth	r2, r3
   2bda0:	2380      	movs	r3, #128	; 0x80
   2bda2:	009b      	lsls	r3, r3, #2
   2bda4:	429a      	cmp	r2, r3
   2bda6:	d001      	beq.n	2bdac <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2bda8:	230d      	movs	r3, #13
   2bdaa:	e1f1      	b.n	2c190 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2bdac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bdae:	2247      	movs	r2, #71	; 0x47
   2bdb0:	5c9b      	ldrb	r3, [r3, r2]
   2bdb2:	021b      	lsls	r3, r3, #8
   2bdb4:	b21a      	sxth	r2, r3
   2bdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bdb8:	2146      	movs	r1, #70	; 0x46
   2bdba:	5c5b      	ldrb	r3, [r3, r1]
   2bdbc:	b21b      	sxth	r3, r3
   2bdbe:	4313      	orrs	r3, r2
   2bdc0:	b21b      	sxth	r3, r3
   2bdc2:	b29b      	uxth	r3, r3
   2bdc4:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2bdc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2bdc8:	2b00      	cmp	r3, #0
   2bdca:	d112      	bne.n	2bdf2 <chk_mounted+0x20a>
   2bdcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bdce:	2257      	movs	r2, #87	; 0x57
   2bdd0:	5c9b      	ldrb	r3, [r3, r2]
   2bdd2:	061a      	lsls	r2, r3, #24
   2bdd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bdd6:	2156      	movs	r1, #86	; 0x56
   2bdd8:	5c5b      	ldrb	r3, [r3, r1]
   2bdda:	041b      	lsls	r3, r3, #16
   2bddc:	4313      	orrs	r3, r2
   2bdde:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bde0:	2155      	movs	r1, #85	; 0x55
   2bde2:	5c52      	ldrb	r2, [r2, r1]
   2bde4:	0212      	lsls	r2, r2, #8
   2bde6:	4313      	orrs	r3, r2
   2bde8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bdea:	2154      	movs	r1, #84	; 0x54
   2bdec:	5c52      	ldrb	r2, [r2, r1]
   2bdee:	4313      	orrs	r3, r2
   2bdf0:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bdf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2bdf6:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2bdf8:	231f      	movs	r3, #31
   2bdfa:	18fb      	adds	r3, r7, r3
   2bdfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bdfe:	2140      	movs	r1, #64	; 0x40
   2be00:	5c52      	ldrb	r2, [r2, r1]
   2be02:	701a      	strb	r2, [r3, #0]
   2be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be06:	221f      	movs	r2, #31
   2be08:	18ba      	adds	r2, r7, r2
   2be0a:	7812      	ldrb	r2, [r2, #0]
   2be0c:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2be0e:	231f      	movs	r3, #31
   2be10:	18fb      	adds	r3, r7, r3
   2be12:	781b      	ldrb	r3, [r3, #0]
   2be14:	2b01      	cmp	r3, #1
   2be16:	d006      	beq.n	2be26 <chk_mounted+0x23e>
   2be18:	231f      	movs	r3, #31
   2be1a:	18fb      	adds	r3, r7, r3
   2be1c:	781b      	ldrb	r3, [r3, #0]
   2be1e:	2b02      	cmp	r3, #2
   2be20:	d001      	beq.n	2be26 <chk_mounted+0x23e>
   2be22:	230d      	movs	r3, #13
   2be24:	e1b4      	b.n	2c190 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2be26:	231f      	movs	r3, #31
   2be28:	18fb      	adds	r3, r7, r3
   2be2a:	781a      	ldrb	r2, [r3, #0]
   2be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2be2e:	4353      	muls	r3, r2
   2be30:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2be32:	231f      	movs	r3, #31
   2be34:	18fb      	adds	r3, r7, r3
   2be36:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2be38:	213d      	movs	r1, #61	; 0x3d
   2be3a:	5c52      	ldrb	r2, [r2, r1]
   2be3c:	701a      	strb	r2, [r3, #0]
   2be3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be40:	221f      	movs	r2, #31
   2be42:	18ba      	adds	r2, r7, r2
   2be44:	7812      	ldrb	r2, [r2, #0]
   2be46:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2be48:	231f      	movs	r3, #31
   2be4a:	18fb      	adds	r3, r7, r3
   2be4c:	781b      	ldrb	r3, [r3, #0]
   2be4e:	2b00      	cmp	r3, #0
   2be50:	d008      	beq.n	2be64 <chk_mounted+0x27c>
   2be52:	231f      	movs	r3, #31
   2be54:	18fb      	adds	r3, r7, r3
   2be56:	781b      	ldrb	r3, [r3, #0]
   2be58:	221f      	movs	r2, #31
   2be5a:	18ba      	adds	r2, r7, r2
   2be5c:	7812      	ldrb	r2, [r2, #0]
   2be5e:	3a01      	subs	r2, #1
   2be60:	4013      	ands	r3, r2
   2be62:	d001      	beq.n	2be68 <chk_mounted+0x280>
   2be64:	230d      	movs	r3, #13
   2be66:	e193      	b.n	2c190 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2be68:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be6a:	2242      	movs	r2, #66	; 0x42
   2be6c:	5c9b      	ldrb	r3, [r3, r2]
   2be6e:	021b      	lsls	r3, r3, #8
   2be70:	b21a      	sxth	r2, r3
   2be72:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be74:	2141      	movs	r1, #65	; 0x41
   2be76:	5c5b      	ldrb	r3, [r3, r1]
   2be78:	b21b      	sxth	r3, r3
   2be7a:	4313      	orrs	r3, r2
   2be7c:	b21b      	sxth	r3, r3
   2be7e:	b29a      	uxth	r2, r3
   2be80:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be82:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be86:	891b      	ldrh	r3, [r3, #8]
   2be88:	220f      	movs	r2, #15
   2be8a:	4013      	ands	r3, r2
   2be8c:	b29b      	uxth	r3, r3
   2be8e:	2b00      	cmp	r3, #0
   2be90:	d001      	beq.n	2be96 <chk_mounted+0x2ae>
   2be92:	230d      	movs	r3, #13
   2be94:	e17c      	b.n	2c190 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2be98:	2244      	movs	r2, #68	; 0x44
   2be9a:	5c9b      	ldrb	r3, [r3, r2]
   2be9c:	021b      	lsls	r3, r3, #8
   2be9e:	b21a      	sxth	r2, r3
   2bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bea2:	2143      	movs	r1, #67	; 0x43
   2bea4:	5c5b      	ldrb	r3, [r3, r1]
   2bea6:	b21b      	sxth	r3, r3
   2bea8:	4313      	orrs	r3, r2
   2beaa:	b21b      	sxth	r3, r3
   2beac:	b29b      	uxth	r3, r3
   2beae:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2beb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2beb2:	2b00      	cmp	r3, #0
   2beb4:	d112      	bne.n	2bedc <chk_mounted+0x2f4>
   2beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2beb8:	2253      	movs	r2, #83	; 0x53
   2beba:	5c9b      	ldrb	r3, [r3, r2]
   2bebc:	061a      	lsls	r2, r3, #24
   2bebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bec0:	2152      	movs	r1, #82	; 0x52
   2bec2:	5c5b      	ldrb	r3, [r3, r1]
   2bec4:	041b      	lsls	r3, r3, #16
   2bec6:	4313      	orrs	r3, r2
   2bec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2beca:	2151      	movs	r1, #81	; 0x51
   2becc:	5c52      	ldrb	r2, [r2, r1]
   2bece:	0212      	lsls	r2, r2, #8
   2bed0:	4313      	orrs	r3, r2
   2bed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bed4:	2150      	movs	r1, #80	; 0x50
   2bed6:	5c52      	ldrb	r2, [r2, r1]
   2bed8:	4313      	orrs	r3, r2
   2beda:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2bedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bede:	223f      	movs	r2, #63	; 0x3f
   2bee0:	5c9b      	ldrb	r3, [r3, r2]
   2bee2:	021b      	lsls	r3, r3, #8
   2bee4:	b21a      	sxth	r2, r3
   2bee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bee8:	213e      	movs	r1, #62	; 0x3e
   2beea:	5c5b      	ldrb	r3, [r3, r1]
   2beec:	b21b      	sxth	r3, r3
   2beee:	4313      	orrs	r3, r2
   2bef0:	b21a      	sxth	r2, r3
   2bef2:	231c      	movs	r3, #28
   2bef4:	18fb      	adds	r3, r7, r3
   2bef6:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2bef8:	231c      	movs	r3, #28
   2befa:	18fb      	adds	r3, r7, r3
   2befc:	881b      	ldrh	r3, [r3, #0]
   2befe:	2b00      	cmp	r3, #0
   2bf00:	d101      	bne.n	2bf06 <chk_mounted+0x31e>
   2bf02:	230d      	movs	r3, #13
   2bf04:	e144      	b.n	2c190 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2bf06:	231c      	movs	r3, #28
   2bf08:	18fb      	adds	r3, r7, r3
   2bf0a:	881a      	ldrh	r2, [r3, #0]
   2bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2bf0e:	18d3      	adds	r3, r2, r3
   2bf10:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bf12:	8912      	ldrh	r2, [r2, #8]
   2bf14:	0912      	lsrs	r2, r2, #4
   2bf16:	b292      	uxth	r2, r2
   2bf18:	189b      	adds	r3, r3, r2
   2bf1a:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2bf1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2bf1e:	69bb      	ldr	r3, [r7, #24]
   2bf20:	429a      	cmp	r2, r3
   2bf22:	d201      	bcs.n	2bf28 <chk_mounted+0x340>
   2bf24:	230d      	movs	r3, #13
   2bf26:	e133      	b.n	2c190 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2bf28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2bf2a:	69bb      	ldr	r3, [r7, #24]
   2bf2c:	1ad2      	subs	r2, r2, r3
   2bf2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf30:	789b      	ldrb	r3, [r3, #2]
   2bf32:	0019      	movs	r1, r3
   2bf34:	4b08      	ldr	r3, [pc, #32]	; (2bf58 <chk_mounted+0x370>)
   2bf36:	0010      	movs	r0, r2
   2bf38:	4798      	blx	r3
   2bf3a:	0003      	movs	r3, r0
   2bf3c:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2bf3e:	697b      	ldr	r3, [r7, #20]
   2bf40:	2b00      	cmp	r3, #0
   2bf42:	d10b      	bne.n	2bf5c <chk_mounted+0x374>
   2bf44:	230d      	movs	r3, #13
   2bf46:	e123      	b.n	2c190 <chk_mounted+0x5a8>
   2bf48:	20004170 	.word	0x20004170
   2bf4c:	00029d45 	.word	0x00029d45
   2bf50:	00029cc1 	.word	0x00029cc1
   2bf54:	0002bb15 	.word	0x0002bb15
   2bf58:	0003130d 	.word	0x0003130d
	fmt = FS_FAT12;
   2bf5c:	2347      	movs	r3, #71	; 0x47
   2bf5e:	18fb      	adds	r3, r7, r3
   2bf60:	2201      	movs	r2, #1
   2bf62:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2bf64:	697b      	ldr	r3, [r7, #20]
   2bf66:	4a8c      	ldr	r2, [pc, #560]	; (2c198 <chk_mounted+0x5b0>)
   2bf68:	4293      	cmp	r3, r2
   2bf6a:	d903      	bls.n	2bf74 <chk_mounted+0x38c>
   2bf6c:	2347      	movs	r3, #71	; 0x47
   2bf6e:	18fb      	adds	r3, r7, r3
   2bf70:	2202      	movs	r2, #2
   2bf72:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2bf74:	697b      	ldr	r3, [r7, #20]
   2bf76:	4a89      	ldr	r2, [pc, #548]	; (2c19c <chk_mounted+0x5b4>)
   2bf78:	4293      	cmp	r3, r2
   2bf7a:	d903      	bls.n	2bf84 <chk_mounted+0x39c>
   2bf7c:	2347      	movs	r3, #71	; 0x47
   2bf7e:	18fb      	adds	r3, r7, r3
   2bf80:	2203      	movs	r2, #3
   2bf82:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2bf84:	697b      	ldr	r3, [r7, #20]
   2bf86:	1c9a      	adds	r2, r3, #2
   2bf88:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf8a:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2bf8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bf8e:	69bb      	ldr	r3, [r7, #24]
   2bf90:	18d2      	adds	r2, r2, r3
   2bf92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bf94:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2bf96:	231c      	movs	r3, #28
   2bf98:	18fb      	adds	r3, r7, r3
   2bf9a:	881a      	ldrh	r2, [r3, #0]
   2bf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bf9e:	18d2      	adds	r2, r2, r3
   2bfa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfa2:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2bfa4:	2347      	movs	r3, #71	; 0x47
   2bfa6:	18fb      	adds	r3, r7, r3
   2bfa8:	781b      	ldrb	r3, [r3, #0]
   2bfaa:	2b03      	cmp	r3, #3
   2bfac:	d11e      	bne.n	2bfec <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2bfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfb0:	891b      	ldrh	r3, [r3, #8]
   2bfb2:	2b00      	cmp	r3, #0
   2bfb4:	d001      	beq.n	2bfba <chk_mounted+0x3d2>
   2bfb6:	230d      	movs	r3, #13
   2bfb8:	e0ea      	b.n	2c190 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2bfba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfbc:	225f      	movs	r2, #95	; 0x5f
   2bfbe:	5c9b      	ldrb	r3, [r3, r2]
   2bfc0:	061a      	lsls	r2, r3, #24
   2bfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfc4:	215e      	movs	r1, #94	; 0x5e
   2bfc6:	5c5b      	ldrb	r3, [r3, r1]
   2bfc8:	041b      	lsls	r3, r3, #16
   2bfca:	4313      	orrs	r3, r2
   2bfcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bfce:	215d      	movs	r1, #93	; 0x5d
   2bfd0:	5c52      	ldrb	r2, [r2, r1]
   2bfd2:	0212      	lsls	r2, r2, #8
   2bfd4:	4313      	orrs	r3, r2
   2bfd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2bfd8:	215c      	movs	r1, #92	; 0x5c
   2bfda:	5c52      	ldrb	r2, [r2, r1]
   2bfdc:	431a      	orrs	r2, r3
   2bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfe0:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2bfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfe4:	699b      	ldr	r3, [r3, #24]
   2bfe6:	009b      	lsls	r3, r3, #2
   2bfe8:	633b      	str	r3, [r7, #48]	; 0x30
   2bfea:	e020      	b.n	2c02e <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2bfec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bfee:	891b      	ldrh	r3, [r3, #8]
   2bff0:	2b00      	cmp	r3, #0
   2bff2:	d101      	bne.n	2bff8 <chk_mounted+0x410>
   2bff4:	230d      	movs	r3, #13
   2bff6:	e0cb      	b.n	2c190 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2bff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2bffa:	6a1a      	ldr	r2, [r3, #32]
   2bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2bffe:	18d2      	adds	r2, r2, r3
   2c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c002:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2c004:	2347      	movs	r3, #71	; 0x47
   2c006:	18fb      	adds	r3, r7, r3
   2c008:	781b      	ldrb	r3, [r3, #0]
   2c00a:	2b02      	cmp	r3, #2
   2c00c:	d103      	bne.n	2c016 <chk_mounted+0x42e>
   2c00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c010:	699b      	ldr	r3, [r3, #24]
   2c012:	005b      	lsls	r3, r3, #1
   2c014:	e00a      	b.n	2c02c <chk_mounted+0x444>
   2c016:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c018:	699a      	ldr	r2, [r3, #24]
   2c01a:	0013      	movs	r3, r2
   2c01c:	005b      	lsls	r3, r3, #1
   2c01e:	189b      	adds	r3, r3, r2
   2c020:	085a      	lsrs	r2, r3, #1
   2c022:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c024:	699b      	ldr	r3, [r3, #24]
   2c026:	2101      	movs	r1, #1
   2c028:	400b      	ands	r3, r1
   2c02a:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2c02c:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2c02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c030:	69da      	ldr	r2, [r3, #28]
   2c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2c034:	495a      	ldr	r1, [pc, #360]	; (2c1a0 <chk_mounted+0x5b8>)
   2c036:	468c      	mov	ip, r1
   2c038:	4463      	add	r3, ip
   2c03a:	0a5b      	lsrs	r3, r3, #9
   2c03c:	429a      	cmp	r2, r3
   2c03e:	d201      	bcs.n	2c044 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2c040:	230d      	movs	r3, #13
   2c042:	e0a5      	b.n	2c190 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c046:	2201      	movs	r2, #1
   2c048:	4252      	negs	r2, r2
   2c04a:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2c04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c04e:	2200      	movs	r2, #0
   2c050:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2c052:	2347      	movs	r3, #71	; 0x47
   2c054:	18fb      	adds	r3, r7, r3
   2c056:	781b      	ldrb	r3, [r3, #0]
   2c058:	2b03      	cmp	r3, #3
   2c05a:	d000      	beq.n	2c05e <chk_mounted+0x476>
   2c05c:	e082      	b.n	2c164 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2c05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c060:	2200      	movs	r2, #0
   2c062:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2c064:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c066:	2261      	movs	r2, #97	; 0x61
   2c068:	5c9b      	ldrb	r3, [r3, r2]
   2c06a:	021b      	lsls	r3, r3, #8
   2c06c:	b21a      	sxth	r2, r3
   2c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c070:	2160      	movs	r1, #96	; 0x60
   2c072:	5c5b      	ldrb	r3, [r3, r1]
   2c074:	b21b      	sxth	r3, r3
   2c076:	4313      	orrs	r3, r2
   2c078:	b21b      	sxth	r3, r3
   2c07a:	b29b      	uxth	r3, r3
   2c07c:	001a      	movs	r2, r3
   2c07e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2c080:	18d2      	adds	r2, r2, r3
   2c082:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c084:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c088:	7858      	ldrb	r0, [r3, #1]
   2c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c08c:	3330      	adds	r3, #48	; 0x30
   2c08e:	0019      	movs	r1, r3
   2c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c092:	695a      	ldr	r2, [r3, #20]
   2c094:	2301      	movs	r3, #1
   2c096:	4c43      	ldr	r4, [pc, #268]	; (2c1a4 <chk_mounted+0x5bc>)
   2c098:	47a0      	blx	r4
   2c09a:	1e03      	subs	r3, r0, #0
   2c09c:	d162      	bne.n	2c164 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c0a0:	4a41      	ldr	r2, [pc, #260]	; (2c1a8 <chk_mounted+0x5c0>)
   2c0a2:	5c9b      	ldrb	r3, [r3, r2]
   2c0a4:	021b      	lsls	r3, r3, #8
   2c0a6:	b21a      	sxth	r2, r3
   2c0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c0aa:	4940      	ldr	r1, [pc, #256]	; (2c1ac <chk_mounted+0x5c4>)
   2c0ac:	5c5b      	ldrb	r3, [r3, r1]
   2c0ae:	b21b      	sxth	r3, r3
   2c0b0:	4313      	orrs	r3, r2
   2c0b2:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2c0b4:	4a3e      	ldr	r2, [pc, #248]	; (2c1b0 <chk_mounted+0x5c8>)
   2c0b6:	4293      	cmp	r3, r2
   2c0b8:	d154      	bne.n	2c164 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c0bc:	2233      	movs	r2, #51	; 0x33
   2c0be:	5c9b      	ldrb	r3, [r3, r2]
   2c0c0:	061a      	lsls	r2, r3, #24
   2c0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c0c4:	2132      	movs	r1, #50	; 0x32
   2c0c6:	5c5b      	ldrb	r3, [r3, r1]
   2c0c8:	041b      	lsls	r3, r3, #16
   2c0ca:	4313      	orrs	r3, r2
   2c0cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c0ce:	2131      	movs	r1, #49	; 0x31
   2c0d0:	5c52      	ldrb	r2, [r2, r1]
   2c0d2:	0212      	lsls	r2, r2, #8
   2c0d4:	4313      	orrs	r3, r2
   2c0d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c0d8:	2130      	movs	r1, #48	; 0x30
   2c0da:	5c52      	ldrb	r2, [r2, r1]
   2c0dc:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2c0de:	4a35      	ldr	r2, [pc, #212]	; (2c1b4 <chk_mounted+0x5cc>)
   2c0e0:	4293      	cmp	r3, r2
   2c0e2:	d13f      	bne.n	2c164 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2c0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c0e6:	4a34      	ldr	r2, [pc, #208]	; (2c1b8 <chk_mounted+0x5d0>)
   2c0e8:	5c9b      	ldrb	r3, [r3, r2]
   2c0ea:	061a      	lsls	r2, r3, #24
   2c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c0ee:	4933      	ldr	r1, [pc, #204]	; (2c1bc <chk_mounted+0x5d4>)
   2c0f0:	5c5b      	ldrb	r3, [r3, r1]
   2c0f2:	041b      	lsls	r3, r3, #16
   2c0f4:	4313      	orrs	r3, r2
   2c0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c0f8:	4931      	ldr	r1, [pc, #196]	; (2c1c0 <chk_mounted+0x5d8>)
   2c0fa:	5c52      	ldrb	r2, [r2, r1]
   2c0fc:	0212      	lsls	r2, r2, #8
   2c0fe:	4313      	orrs	r3, r2
   2c100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c102:	2285      	movs	r2, #133	; 0x85
   2c104:	0092      	lsls	r2, r2, #2
   2c106:	5c8a      	ldrb	r2, [r1, r2]
   2c108:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2c10a:	4a2e      	ldr	r2, [pc, #184]	; (2c1c4 <chk_mounted+0x5dc>)
   2c10c:	4293      	cmp	r3, r2
   2c10e:	d129      	bne.n	2c164 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c112:	4a2d      	ldr	r2, [pc, #180]	; (2c1c8 <chk_mounted+0x5e0>)
   2c114:	5c9b      	ldrb	r3, [r3, r2]
   2c116:	061a      	lsls	r2, r3, #24
   2c118:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c11a:	492c      	ldr	r1, [pc, #176]	; (2c1cc <chk_mounted+0x5e4>)
   2c11c:	5c5b      	ldrb	r3, [r3, r1]
   2c11e:	041b      	lsls	r3, r3, #16
   2c120:	4313      	orrs	r3, r2
   2c122:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c124:	492a      	ldr	r1, [pc, #168]	; (2c1d0 <chk_mounted+0x5e8>)
   2c126:	5c52      	ldrb	r2, [r2, r1]
   2c128:	0212      	lsls	r2, r2, #8
   2c12a:	4313      	orrs	r3, r2
   2c12c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c12e:	2287      	movs	r2, #135	; 0x87
   2c130:	0092      	lsls	r2, r2, #2
   2c132:	5c8a      	ldrb	r2, [r1, r2]
   2c134:	431a      	orrs	r2, r3
   2c136:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c138:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c13c:	4a25      	ldr	r2, [pc, #148]	; (2c1d4 <chk_mounted+0x5ec>)
   2c13e:	5c9b      	ldrb	r3, [r3, r2]
   2c140:	061a      	lsls	r2, r3, #24
   2c142:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c144:	4924      	ldr	r1, [pc, #144]	; (2c1d8 <chk_mounted+0x5f0>)
   2c146:	5c5b      	ldrb	r3, [r3, r1]
   2c148:	041b      	lsls	r3, r3, #16
   2c14a:	4313      	orrs	r3, r2
   2c14c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2c14e:	4923      	ldr	r1, [pc, #140]	; (2c1dc <chk_mounted+0x5f4>)
   2c150:	5c52      	ldrb	r2, [r2, r1]
   2c152:	0212      	lsls	r2, r2, #8
   2c154:	4313      	orrs	r3, r2
   2c156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2c158:	2286      	movs	r2, #134	; 0x86
   2c15a:	0092      	lsls	r2, r2, #2
   2c15c:	5c8a      	ldrb	r2, [r1, r2]
   2c15e:	431a      	orrs	r2, r3
   2c160:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c162:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c166:	2247      	movs	r2, #71	; 0x47
   2c168:	18ba      	adds	r2, r7, r2
   2c16a:	7812      	ldrb	r2, [r2, #0]
   2c16c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2c16e:	4b1c      	ldr	r3, [pc, #112]	; (2c1e0 <chk_mounted+0x5f8>)
   2c170:	881b      	ldrh	r3, [r3, #0]
   2c172:	3301      	adds	r3, #1
   2c174:	b29a      	uxth	r2, r3
   2c176:	4b1a      	ldr	r3, [pc, #104]	; (2c1e0 <chk_mounted+0x5f8>)
   2c178:	801a      	strh	r2, [r3, #0]
   2c17a:	4b19      	ldr	r3, [pc, #100]	; (2c1e0 <chk_mounted+0x5f8>)
   2c17c:	881a      	ldrh	r2, [r3, #0]
   2c17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c180:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2c182:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c184:	2200      	movs	r2, #0
   2c186:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2c188:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2c18a:	2200      	movs	r2, #0
   2c18c:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2c18e:	2300      	movs	r3, #0
}
   2c190:	0018      	movs	r0, r3
   2c192:	46bd      	mov	sp, r7
   2c194:	b013      	add	sp, #76	; 0x4c
   2c196:	bd90      	pop	{r4, r7, pc}
   2c198:	00000ff5 	.word	0x00000ff5
   2c19c:	0000fff5 	.word	0x0000fff5
   2c1a0:	000001ff 	.word	0x000001ff
   2c1a4:	00029d7d 	.word	0x00029d7d
   2c1a8:	0000022f 	.word	0x0000022f
   2c1ac:	0000022e 	.word	0x0000022e
   2c1b0:	ffffaa55 	.word	0xffffaa55
   2c1b4:	41615252 	.word	0x41615252
   2c1b8:	00000217 	.word	0x00000217
   2c1bc:	00000216 	.word	0x00000216
   2c1c0:	00000215 	.word	0x00000215
   2c1c4:	61417272 	.word	0x61417272
   2c1c8:	0000021f 	.word	0x0000021f
   2c1cc:	0000021e 	.word	0x0000021e
   2c1d0:	0000021d 	.word	0x0000021d
   2c1d4:	0000021b 	.word	0x0000021b
   2c1d8:	0000021a 	.word	0x0000021a
   2c1dc:	00000219 	.word	0x00000219
   2c1e0:	20004190 	.word	0x20004190

0002c1e4 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2c1e4:	b580      	push	{r7, lr}
   2c1e6:	b082      	sub	sp, #8
   2c1e8:	af00      	add	r7, sp, #0
   2c1ea:	6078      	str	r0, [r7, #4]
   2c1ec:	000a      	movs	r2, r1
   2c1ee:	1cbb      	adds	r3, r7, #2
   2c1f0:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2c1f2:	687b      	ldr	r3, [r7, #4]
   2c1f4:	2b00      	cmp	r3, #0
   2c1f6:	d009      	beq.n	2c20c <validate+0x28>
   2c1f8:	687b      	ldr	r3, [r7, #4]
   2c1fa:	781b      	ldrb	r3, [r3, #0]
   2c1fc:	2b00      	cmp	r3, #0
   2c1fe:	d005      	beq.n	2c20c <validate+0x28>
   2c200:	687b      	ldr	r3, [r7, #4]
   2c202:	88db      	ldrh	r3, [r3, #6]
   2c204:	1cba      	adds	r2, r7, #2
   2c206:	8812      	ldrh	r2, [r2, #0]
   2c208:	429a      	cmp	r2, r3
   2c20a:	d001      	beq.n	2c210 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2c20c:	2309      	movs	r3, #9
   2c20e:	e00c      	b.n	2c22a <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2c210:	687b      	ldr	r3, [r7, #4]
   2c212:	785b      	ldrb	r3, [r3, #1]
   2c214:	0018      	movs	r0, r3
   2c216:	4b07      	ldr	r3, [pc, #28]	; (2c234 <validate+0x50>)
   2c218:	4798      	blx	r3
   2c21a:	0003      	movs	r3, r0
   2c21c:	001a      	movs	r2, r3
   2c21e:	2301      	movs	r3, #1
   2c220:	4013      	ands	r3, r2
   2c222:	d001      	beq.n	2c228 <validate+0x44>
		return FR_NOT_READY;
   2c224:	2303      	movs	r3, #3
   2c226:	e000      	b.n	2c22a <validate+0x46>

	return FR_OK;
   2c228:	2300      	movs	r3, #0
}
   2c22a:	0018      	movs	r0, r3
   2c22c:	46bd      	mov	sp, r7
   2c22e:	b002      	add	sp, #8
   2c230:	bd80      	pop	{r7, pc}
   2c232:	46c0      	nop			; (mov r8, r8)
   2c234:	00029d45 	.word	0x00029d45

0002c238 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2c238:	b580      	push	{r7, lr}
   2c23a:	b084      	sub	sp, #16
   2c23c:	af00      	add	r7, sp, #0
   2c23e:	0002      	movs	r2, r0
   2c240:	6039      	str	r1, [r7, #0]
   2c242:	1dfb      	adds	r3, r7, #7
   2c244:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2c246:	1dfb      	adds	r3, r7, #7
   2c248:	781b      	ldrb	r3, [r3, #0]
   2c24a:	2b07      	cmp	r3, #7
   2c24c:	d901      	bls.n	2c252 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2c24e:	230b      	movs	r3, #11
   2c250:	e018      	b.n	2c284 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2c252:	1dfb      	adds	r3, r7, #7
   2c254:	781a      	ldrb	r2, [r3, #0]
   2c256:	4b0d      	ldr	r3, [pc, #52]	; (2c28c <f_mount+0x54>)
   2c258:	0092      	lsls	r2, r2, #2
   2c25a:	58d3      	ldr	r3, [r2, r3]
   2c25c:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2c25e:	68fb      	ldr	r3, [r7, #12]
   2c260:	2b00      	cmp	r3, #0
   2c262:	d002      	beq.n	2c26a <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2c264:	68fb      	ldr	r3, [r7, #12]
   2c266:	2200      	movs	r2, #0
   2c268:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2c26a:	683b      	ldr	r3, [r7, #0]
   2c26c:	2b00      	cmp	r3, #0
   2c26e:	d002      	beq.n	2c276 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2c270:	683b      	ldr	r3, [r7, #0]
   2c272:	2200      	movs	r2, #0
   2c274:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2c276:	1dfb      	adds	r3, r7, #7
   2c278:	781a      	ldrb	r2, [r3, #0]
   2c27a:	4b04      	ldr	r3, [pc, #16]	; (2c28c <f_mount+0x54>)
   2c27c:	0092      	lsls	r2, r2, #2
   2c27e:	6839      	ldr	r1, [r7, #0]
   2c280:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2c282:	2300      	movs	r3, #0
}
   2c284:	0018      	movs	r0, r3
   2c286:	46bd      	mov	sp, r7
   2c288:	b004      	add	sp, #16
   2c28a:	bd80      	pop	{r7, pc}
   2c28c:	20004170 	.word	0x20004170

0002c290 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2c290:	b590      	push	{r4, r7, lr}
   2c292:	4ce5      	ldr	r4, [pc, #916]	; (2c628 <f_open+0x398>)
   2c294:	44a5      	add	sp, r4
   2c296:	af00      	add	r7, sp, #0
   2c298:	60f8      	str	r0, [r7, #12]
   2c29a:	60b9      	str	r1, [r7, #8]
   2c29c:	4be3      	ldr	r3, [pc, #908]	; (2c62c <f_open+0x39c>)
   2c29e:	2194      	movs	r1, #148	; 0x94
   2c2a0:	0089      	lsls	r1, r1, #2
   2c2a2:	468c      	mov	ip, r1
   2c2a4:	44bc      	add	ip, r7
   2c2a6:	4463      	add	r3, ip
   2c2a8:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2c2aa:	68fb      	ldr	r3, [r7, #12]
   2c2ac:	2200      	movs	r2, #0
   2c2ae:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2c2b0:	4bde      	ldr	r3, [pc, #888]	; (2c62c <f_open+0x39c>)
   2c2b2:	2294      	movs	r2, #148	; 0x94
   2c2b4:	0092      	lsls	r2, r2, #2
   2c2b6:	4694      	mov	ip, r2
   2c2b8:	44bc      	add	ip, r7
   2c2ba:	4463      	add	r3, ip
   2c2bc:	4adb      	ldr	r2, [pc, #876]	; (2c62c <f_open+0x39c>)
   2c2be:	2194      	movs	r1, #148	; 0x94
   2c2c0:	0089      	lsls	r1, r1, #2
   2c2c2:	468c      	mov	ip, r1
   2c2c4:	44bc      	add	ip, r7
   2c2c6:	4462      	add	r2, ip
   2c2c8:	7812      	ldrb	r2, [r2, #0]
   2c2ca:	211f      	movs	r1, #31
   2c2cc:	400a      	ands	r2, r1
   2c2ce:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2c2d0:	4bd6      	ldr	r3, [pc, #856]	; (2c62c <f_open+0x39c>)
   2c2d2:	2294      	movs	r2, #148	; 0x94
   2c2d4:	0092      	lsls	r2, r2, #2
   2c2d6:	4694      	mov	ip, r2
   2c2d8:	44bc      	add	ip, r7
   2c2da:	4463      	add	r3, ip
   2c2dc:	781b      	ldrb	r3, [r3, #0]
   2c2de:	2201      	movs	r2, #1
   2c2e0:	4393      	bics	r3, r2
   2c2e2:	b2da      	uxtb	r2, r3
   2c2e4:	4bd2      	ldr	r3, [pc, #840]	; (2c630 <f_open+0x3a0>)
   2c2e6:	18fc      	adds	r4, r7, r3
   2c2e8:	2387      	movs	r3, #135	; 0x87
   2c2ea:	009b      	lsls	r3, r3, #2
   2c2ec:	18f9      	adds	r1, r7, r3
   2c2ee:	2308      	movs	r3, #8
   2c2f0:	18fb      	adds	r3, r7, r3
   2c2f2:	0018      	movs	r0, r3
   2c2f4:	4bcf      	ldr	r3, [pc, #828]	; (2c634 <f_open+0x3a4>)
   2c2f6:	4798      	blx	r3
   2c2f8:	0003      	movs	r3, r0
   2c2fa:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2c2fc:	2387      	movs	r3, #135	; 0x87
   2c2fe:	009b      	lsls	r3, r3, #2
   2c300:	18fb      	adds	r3, r7, r3
   2c302:	2284      	movs	r2, #132	; 0x84
   2c304:	0092      	lsls	r2, r2, #2
   2c306:	18ba      	adds	r2, r7, r2
   2c308:	619a      	str	r2, [r3, #24]
   2c30a:	2387      	movs	r3, #135	; 0x87
   2c30c:	009b      	lsls	r3, r3, #2
   2c30e:	18fb      	adds	r3, r7, r3
   2c310:	2210      	movs	r2, #16
   2c312:	18ba      	adds	r2, r7, r2
   2c314:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2c316:	4bc6      	ldr	r3, [pc, #792]	; (2c630 <f_open+0x3a0>)
   2c318:	18fb      	adds	r3, r7, r3
   2c31a:	781b      	ldrb	r3, [r3, #0]
   2c31c:	2b00      	cmp	r3, #0
   2c31e:	d10b      	bne.n	2c338 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2c320:	68ba      	ldr	r2, [r7, #8]
   2c322:	4bc3      	ldr	r3, [pc, #780]	; (2c630 <f_open+0x3a0>)
   2c324:	18fc      	adds	r4, r7, r3
   2c326:	2387      	movs	r3, #135	; 0x87
   2c328:	009b      	lsls	r3, r3, #2
   2c32a:	18fb      	adds	r3, r7, r3
   2c32c:	0011      	movs	r1, r2
   2c32e:	0018      	movs	r0, r3
   2c330:	4bc1      	ldr	r3, [pc, #772]	; (2c638 <f_open+0x3a8>)
   2c332:	4798      	blx	r3
   2c334:	0003      	movs	r3, r0
   2c336:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2c338:	2387      	movs	r3, #135	; 0x87
   2c33a:	009b      	lsls	r3, r3, #2
   2c33c:	18fb      	adds	r3, r7, r3
   2c33e:	695b      	ldr	r3, [r3, #20]
   2c340:	2292      	movs	r2, #146	; 0x92
   2c342:	0092      	lsls	r2, r2, #2
   2c344:	18ba      	adds	r2, r7, r2
   2c346:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2c348:	4bb9      	ldr	r3, [pc, #740]	; (2c630 <f_open+0x3a0>)
   2c34a:	18fb      	adds	r3, r7, r3
   2c34c:	781b      	ldrb	r3, [r3, #0]
   2c34e:	2b00      	cmp	r3, #0
   2c350:	d109      	bne.n	2c366 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2c352:	2392      	movs	r3, #146	; 0x92
   2c354:	009b      	lsls	r3, r3, #2
   2c356:	18fb      	adds	r3, r7, r3
   2c358:	681b      	ldr	r3, [r3, #0]
   2c35a:	2b00      	cmp	r3, #0
   2c35c:	d103      	bne.n	2c366 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2c35e:	4bb4      	ldr	r3, [pc, #720]	; (2c630 <f_open+0x3a0>)
   2c360:	18fb      	adds	r3, r7, r3
   2c362:	2206      	movs	r2, #6
   2c364:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2c366:	4bb1      	ldr	r3, [pc, #708]	; (2c62c <f_open+0x39c>)
   2c368:	2294      	movs	r2, #148	; 0x94
   2c36a:	0092      	lsls	r2, r2, #2
   2c36c:	4694      	mov	ip, r2
   2c36e:	44bc      	add	ip, r7
   2c370:	4463      	add	r3, ip
   2c372:	781b      	ldrb	r3, [r3, #0]
   2c374:	221c      	movs	r2, #28
   2c376:	4013      	ands	r3, r2
   2c378:	d100      	bne.n	2c37c <f_open+0xec>
   2c37a:	e141      	b.n	2c600 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2c37c:	4bac      	ldr	r3, [pc, #688]	; (2c630 <f_open+0x3a0>)
   2c37e:	18fb      	adds	r3, r7, r3
   2c380:	781b      	ldrb	r3, [r3, #0]
   2c382:	2b00      	cmp	r3, #0
   2c384:	d027      	beq.n	2c3d6 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2c386:	4baa      	ldr	r3, [pc, #680]	; (2c630 <f_open+0x3a0>)
   2c388:	18fb      	adds	r3, r7, r3
   2c38a:	781b      	ldrb	r3, [r3, #0]
   2c38c:	2b04      	cmp	r3, #4
   2c38e:	d109      	bne.n	2c3a4 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2c390:	4ba7      	ldr	r3, [pc, #668]	; (2c630 <f_open+0x3a0>)
   2c392:	18fc      	adds	r4, r7, r3
   2c394:	2387      	movs	r3, #135	; 0x87
   2c396:	009b      	lsls	r3, r3, #2
   2c398:	18fb      	adds	r3, r7, r3
   2c39a:	0018      	movs	r0, r3
   2c39c:	4ba7      	ldr	r3, [pc, #668]	; (2c63c <f_open+0x3ac>)
   2c39e:	4798      	blx	r3
   2c3a0:	0003      	movs	r3, r0
   2c3a2:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2c3a4:	4ba1      	ldr	r3, [pc, #644]	; (2c62c <f_open+0x39c>)
   2c3a6:	2294      	movs	r2, #148	; 0x94
   2c3a8:	0092      	lsls	r2, r2, #2
   2c3aa:	4694      	mov	ip, r2
   2c3ac:	44bc      	add	ip, r7
   2c3ae:	4463      	add	r3, ip
   2c3b0:	4a9e      	ldr	r2, [pc, #632]	; (2c62c <f_open+0x39c>)
   2c3b2:	2194      	movs	r1, #148	; 0x94
   2c3b4:	0089      	lsls	r1, r1, #2
   2c3b6:	468c      	mov	ip, r1
   2c3b8:	44bc      	add	ip, r7
   2c3ba:	4462      	add	r2, ip
   2c3bc:	7812      	ldrb	r2, [r2, #0]
   2c3be:	2108      	movs	r1, #8
   2c3c0:	430a      	orrs	r2, r1
   2c3c2:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2c3c4:	2387      	movs	r3, #135	; 0x87
   2c3c6:	009b      	lsls	r3, r3, #2
   2c3c8:	18fb      	adds	r3, r7, r3
   2c3ca:	695b      	ldr	r3, [r3, #20]
   2c3cc:	2292      	movs	r2, #146	; 0x92
   2c3ce:	0092      	lsls	r2, r2, #2
   2c3d0:	18ba      	adds	r2, r7, r2
   2c3d2:	6013      	str	r3, [r2, #0]
   2c3d4:	e01c      	b.n	2c410 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2c3d6:	2392      	movs	r3, #146	; 0x92
   2c3d8:	009b      	lsls	r3, r3, #2
   2c3da:	18fb      	adds	r3, r7, r3
   2c3dc:	681b      	ldr	r3, [r3, #0]
   2c3de:	330b      	adds	r3, #11
   2c3e0:	781b      	ldrb	r3, [r3, #0]
   2c3e2:	001a      	movs	r2, r3
   2c3e4:	2311      	movs	r3, #17
   2c3e6:	4013      	ands	r3, r2
   2c3e8:	d004      	beq.n	2c3f4 <f_open+0x164>
				res = FR_DENIED;
   2c3ea:	4b91      	ldr	r3, [pc, #580]	; (2c630 <f_open+0x3a0>)
   2c3ec:	18fb      	adds	r3, r7, r3
   2c3ee:	2207      	movs	r2, #7
   2c3f0:	701a      	strb	r2, [r3, #0]
   2c3f2:	e00d      	b.n	2c410 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2c3f4:	4b8d      	ldr	r3, [pc, #564]	; (2c62c <f_open+0x39c>)
   2c3f6:	2294      	movs	r2, #148	; 0x94
   2c3f8:	0092      	lsls	r2, r2, #2
   2c3fa:	4694      	mov	ip, r2
   2c3fc:	44bc      	add	ip, r7
   2c3fe:	4463      	add	r3, ip
   2c400:	781b      	ldrb	r3, [r3, #0]
   2c402:	2204      	movs	r2, #4
   2c404:	4013      	ands	r3, r2
   2c406:	d003      	beq.n	2c410 <f_open+0x180>
					res = FR_EXIST;
   2c408:	4b89      	ldr	r3, [pc, #548]	; (2c630 <f_open+0x3a0>)
   2c40a:	18fb      	adds	r3, r7, r3
   2c40c:	2208      	movs	r2, #8
   2c40e:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2c410:	4b87      	ldr	r3, [pc, #540]	; (2c630 <f_open+0x3a0>)
   2c412:	18fb      	adds	r3, r7, r3
   2c414:	781b      	ldrb	r3, [r3, #0]
   2c416:	2b00      	cmp	r3, #0
   2c418:	d000      	beq.n	2c41c <f_open+0x18c>
   2c41a:	e12f      	b.n	2c67c <f_open+0x3ec>
   2c41c:	4b83      	ldr	r3, [pc, #524]	; (2c62c <f_open+0x39c>)
   2c41e:	2294      	movs	r2, #148	; 0x94
   2c420:	0092      	lsls	r2, r2, #2
   2c422:	4694      	mov	ip, r2
   2c424:	44bc      	add	ip, r7
   2c426:	4463      	add	r3, ip
   2c428:	781b      	ldrb	r3, [r3, #0]
   2c42a:	2208      	movs	r2, #8
   2c42c:	4013      	ands	r3, r2
   2c42e:	d100      	bne.n	2c432 <f_open+0x1a2>
   2c430:	e124      	b.n	2c67c <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2c432:	4b83      	ldr	r3, [pc, #524]	; (2c640 <f_open+0x3b0>)
   2c434:	4798      	blx	r3
   2c436:	0003      	movs	r3, r0
   2c438:	2291      	movs	r2, #145	; 0x91
   2c43a:	0092      	lsls	r2, r2, #2
   2c43c:	18ba      	adds	r2, r7, r2
   2c43e:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2c440:	2392      	movs	r3, #146	; 0x92
   2c442:	009b      	lsls	r3, r3, #2
   2c444:	18fb      	adds	r3, r7, r3
   2c446:	681b      	ldr	r3, [r3, #0]
   2c448:	330e      	adds	r3, #14
   2c44a:	2291      	movs	r2, #145	; 0x91
   2c44c:	0092      	lsls	r2, r2, #2
   2c44e:	18ba      	adds	r2, r7, r2
   2c450:	6812      	ldr	r2, [r2, #0]
   2c452:	b2d2      	uxtb	r2, r2
   2c454:	701a      	strb	r2, [r3, #0]
   2c456:	2392      	movs	r3, #146	; 0x92
   2c458:	009b      	lsls	r3, r3, #2
   2c45a:	18fb      	adds	r3, r7, r3
   2c45c:	681b      	ldr	r3, [r3, #0]
   2c45e:	330f      	adds	r3, #15
   2c460:	2291      	movs	r2, #145	; 0x91
   2c462:	0092      	lsls	r2, r2, #2
   2c464:	18ba      	adds	r2, r7, r2
   2c466:	6812      	ldr	r2, [r2, #0]
   2c468:	b292      	uxth	r2, r2
   2c46a:	0a12      	lsrs	r2, r2, #8
   2c46c:	b292      	uxth	r2, r2
   2c46e:	b2d2      	uxtb	r2, r2
   2c470:	701a      	strb	r2, [r3, #0]
   2c472:	2392      	movs	r3, #146	; 0x92
   2c474:	009b      	lsls	r3, r3, #2
   2c476:	18fb      	adds	r3, r7, r3
   2c478:	681b      	ldr	r3, [r3, #0]
   2c47a:	3310      	adds	r3, #16
   2c47c:	2291      	movs	r2, #145	; 0x91
   2c47e:	0092      	lsls	r2, r2, #2
   2c480:	18ba      	adds	r2, r7, r2
   2c482:	6812      	ldr	r2, [r2, #0]
   2c484:	0c12      	lsrs	r2, r2, #16
   2c486:	b2d2      	uxtb	r2, r2
   2c488:	701a      	strb	r2, [r3, #0]
   2c48a:	2392      	movs	r3, #146	; 0x92
   2c48c:	009b      	lsls	r3, r3, #2
   2c48e:	18fb      	adds	r3, r7, r3
   2c490:	681b      	ldr	r3, [r3, #0]
   2c492:	3311      	adds	r3, #17
   2c494:	2291      	movs	r2, #145	; 0x91
   2c496:	0092      	lsls	r2, r2, #2
   2c498:	18ba      	adds	r2, r7, r2
   2c49a:	6812      	ldr	r2, [r2, #0]
   2c49c:	0e12      	lsrs	r2, r2, #24
   2c49e:	b2d2      	uxtb	r2, r2
   2c4a0:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2c4a2:	2392      	movs	r3, #146	; 0x92
   2c4a4:	009b      	lsls	r3, r3, #2
   2c4a6:	18fb      	adds	r3, r7, r3
   2c4a8:	681b      	ldr	r3, [r3, #0]
   2c4aa:	330b      	adds	r3, #11
   2c4ac:	2200      	movs	r2, #0
   2c4ae:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2c4b0:	2392      	movs	r3, #146	; 0x92
   2c4b2:	009b      	lsls	r3, r3, #2
   2c4b4:	18fb      	adds	r3, r7, r3
   2c4b6:	681b      	ldr	r3, [r3, #0]
   2c4b8:	331c      	adds	r3, #28
   2c4ba:	2200      	movs	r2, #0
   2c4bc:	701a      	strb	r2, [r3, #0]
   2c4be:	2392      	movs	r3, #146	; 0x92
   2c4c0:	009b      	lsls	r3, r3, #2
   2c4c2:	18fb      	adds	r3, r7, r3
   2c4c4:	681b      	ldr	r3, [r3, #0]
   2c4c6:	331d      	adds	r3, #29
   2c4c8:	2200      	movs	r2, #0
   2c4ca:	701a      	strb	r2, [r3, #0]
   2c4cc:	2392      	movs	r3, #146	; 0x92
   2c4ce:	009b      	lsls	r3, r3, #2
   2c4d0:	18fb      	adds	r3, r7, r3
   2c4d2:	681b      	ldr	r3, [r3, #0]
   2c4d4:	331e      	adds	r3, #30
   2c4d6:	2200      	movs	r2, #0
   2c4d8:	701a      	strb	r2, [r3, #0]
   2c4da:	2392      	movs	r3, #146	; 0x92
   2c4dc:	009b      	lsls	r3, r3, #2
   2c4de:	18fb      	adds	r3, r7, r3
   2c4e0:	681b      	ldr	r3, [r3, #0]
   2c4e2:	331f      	adds	r3, #31
   2c4e4:	2200      	movs	r2, #0
   2c4e6:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2c4e8:	2392      	movs	r3, #146	; 0x92
   2c4ea:	009b      	lsls	r3, r3, #2
   2c4ec:	18fb      	adds	r3, r7, r3
   2c4ee:	681b      	ldr	r3, [r3, #0]
   2c4f0:	3315      	adds	r3, #21
   2c4f2:	781b      	ldrb	r3, [r3, #0]
   2c4f4:	021b      	lsls	r3, r3, #8
   2c4f6:	b21a      	sxth	r2, r3
   2c4f8:	2392      	movs	r3, #146	; 0x92
   2c4fa:	009b      	lsls	r3, r3, #2
   2c4fc:	18fb      	adds	r3, r7, r3
   2c4fe:	681b      	ldr	r3, [r3, #0]
   2c500:	3314      	adds	r3, #20
   2c502:	781b      	ldrb	r3, [r3, #0]
   2c504:	b21b      	sxth	r3, r3
   2c506:	4313      	orrs	r3, r2
   2c508:	b21b      	sxth	r3, r3
   2c50a:	b29b      	uxth	r3, r3
   2c50c:	041b      	lsls	r3, r3, #16
   2c50e:	2292      	movs	r2, #146	; 0x92
   2c510:	0092      	lsls	r2, r2, #2
   2c512:	18ba      	adds	r2, r7, r2
   2c514:	6812      	ldr	r2, [r2, #0]
   2c516:	321b      	adds	r2, #27
   2c518:	7812      	ldrb	r2, [r2, #0]
   2c51a:	0212      	lsls	r2, r2, #8
   2c51c:	b211      	sxth	r1, r2
   2c51e:	2292      	movs	r2, #146	; 0x92
   2c520:	0092      	lsls	r2, r2, #2
   2c522:	18ba      	adds	r2, r7, r2
   2c524:	6812      	ldr	r2, [r2, #0]
   2c526:	321a      	adds	r2, #26
   2c528:	7812      	ldrb	r2, [r2, #0]
   2c52a:	b212      	sxth	r2, r2
   2c52c:	430a      	orrs	r2, r1
   2c52e:	b212      	sxth	r2, r2
   2c530:	b292      	uxth	r2, r2
   2c532:	4313      	orrs	r3, r2
   2c534:	2290      	movs	r2, #144	; 0x90
   2c536:	0092      	lsls	r2, r2, #2
   2c538:	18ba      	adds	r2, r7, r2
   2c53a:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2c53c:	2392      	movs	r3, #146	; 0x92
   2c53e:	009b      	lsls	r3, r3, #2
   2c540:	18fb      	adds	r3, r7, r3
   2c542:	681b      	ldr	r3, [r3, #0]
   2c544:	331a      	adds	r3, #26
   2c546:	2200      	movs	r2, #0
   2c548:	701a      	strb	r2, [r3, #0]
   2c54a:	2392      	movs	r3, #146	; 0x92
   2c54c:	009b      	lsls	r3, r3, #2
   2c54e:	18fb      	adds	r3, r7, r3
   2c550:	681b      	ldr	r3, [r3, #0]
   2c552:	331b      	adds	r3, #27
   2c554:	2200      	movs	r2, #0
   2c556:	701a      	strb	r2, [r3, #0]
   2c558:	2392      	movs	r3, #146	; 0x92
   2c55a:	009b      	lsls	r3, r3, #2
   2c55c:	18fb      	adds	r3, r7, r3
   2c55e:	681b      	ldr	r3, [r3, #0]
   2c560:	3314      	adds	r3, #20
   2c562:	2200      	movs	r2, #0
   2c564:	701a      	strb	r2, [r3, #0]
   2c566:	2392      	movs	r3, #146	; 0x92
   2c568:	009b      	lsls	r3, r3, #2
   2c56a:	18fb      	adds	r3, r7, r3
   2c56c:	681b      	ldr	r3, [r3, #0]
   2c56e:	3315      	adds	r3, #21
   2c570:	2200      	movs	r2, #0
   2c572:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2c574:	2387      	movs	r3, #135	; 0x87
   2c576:	009b      	lsls	r3, r3, #2
   2c578:	18fb      	adds	r3, r7, r3
   2c57a:	681b      	ldr	r3, [r3, #0]
   2c57c:	2201      	movs	r2, #1
   2c57e:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2c580:	2390      	movs	r3, #144	; 0x90
   2c582:	009b      	lsls	r3, r3, #2
   2c584:	18fb      	adds	r3, r7, r3
   2c586:	681b      	ldr	r3, [r3, #0]
   2c588:	2b00      	cmp	r3, #0
   2c58a:	d100      	bne.n	2c58e <f_open+0x2fe>
   2c58c:	e076      	b.n	2c67c <f_open+0x3ec>
				dw = dj.fs->winsect;
   2c58e:	2387      	movs	r3, #135	; 0x87
   2c590:	009b      	lsls	r3, r3, #2
   2c592:	18fb      	adds	r3, r7, r3
   2c594:	681b      	ldr	r3, [r3, #0]
   2c596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c598:	2291      	movs	r2, #145	; 0x91
   2c59a:	0092      	lsls	r2, r2, #2
   2c59c:	18ba      	adds	r2, r7, r2
   2c59e:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2c5a0:	2387      	movs	r3, #135	; 0x87
   2c5a2:	009b      	lsls	r3, r3, #2
   2c5a4:	18fb      	adds	r3, r7, r3
   2c5a6:	681b      	ldr	r3, [r3, #0]
   2c5a8:	4a21      	ldr	r2, [pc, #132]	; (2c630 <f_open+0x3a0>)
   2c5aa:	18bc      	adds	r4, r7, r2
   2c5ac:	2290      	movs	r2, #144	; 0x90
   2c5ae:	0092      	lsls	r2, r2, #2
   2c5b0:	18ba      	adds	r2, r7, r2
   2c5b2:	6812      	ldr	r2, [r2, #0]
   2c5b4:	0011      	movs	r1, r2
   2c5b6:	0018      	movs	r0, r3
   2c5b8:	4b22      	ldr	r3, [pc, #136]	; (2c644 <f_open+0x3b4>)
   2c5ba:	4798      	blx	r3
   2c5bc:	0003      	movs	r3, r0
   2c5be:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2c5c0:	4b1b      	ldr	r3, [pc, #108]	; (2c630 <f_open+0x3a0>)
   2c5c2:	18fb      	adds	r3, r7, r3
   2c5c4:	781b      	ldrb	r3, [r3, #0]
   2c5c6:	2b00      	cmp	r3, #0
   2c5c8:	d158      	bne.n	2c67c <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2c5ca:	2387      	movs	r3, #135	; 0x87
   2c5cc:	009b      	lsls	r3, r3, #2
   2c5ce:	18fb      	adds	r3, r7, r3
   2c5d0:	681b      	ldr	r3, [r3, #0]
   2c5d2:	2290      	movs	r2, #144	; 0x90
   2c5d4:	0092      	lsls	r2, r2, #2
   2c5d6:	18ba      	adds	r2, r7, r2
   2c5d8:	6812      	ldr	r2, [r2, #0]
   2c5da:	3a01      	subs	r2, #1
   2c5dc:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2c5de:	2387      	movs	r3, #135	; 0x87
   2c5e0:	009b      	lsls	r3, r3, #2
   2c5e2:	18fb      	adds	r3, r7, r3
   2c5e4:	681b      	ldr	r3, [r3, #0]
   2c5e6:	4a12      	ldr	r2, [pc, #72]	; (2c630 <f_open+0x3a0>)
   2c5e8:	18bc      	adds	r4, r7, r2
   2c5ea:	2291      	movs	r2, #145	; 0x91
   2c5ec:	0092      	lsls	r2, r2, #2
   2c5ee:	18ba      	adds	r2, r7, r2
   2c5f0:	6812      	ldr	r2, [r2, #0]
   2c5f2:	0011      	movs	r1, r2
   2c5f4:	0018      	movs	r0, r3
   2c5f6:	4b14      	ldr	r3, [pc, #80]	; (2c648 <f_open+0x3b8>)
   2c5f8:	4798      	blx	r3
   2c5fa:	0003      	movs	r3, r0
   2c5fc:	7023      	strb	r3, [r4, #0]
   2c5fe:	e03d      	b.n	2c67c <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2c600:	4b0b      	ldr	r3, [pc, #44]	; (2c630 <f_open+0x3a0>)
   2c602:	18fb      	adds	r3, r7, r3
   2c604:	781b      	ldrb	r3, [r3, #0]
   2c606:	2b00      	cmp	r3, #0
   2c608:	d138      	bne.n	2c67c <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2c60a:	2392      	movs	r3, #146	; 0x92
   2c60c:	009b      	lsls	r3, r3, #2
   2c60e:	18fb      	adds	r3, r7, r3
   2c610:	681b      	ldr	r3, [r3, #0]
   2c612:	330b      	adds	r3, #11
   2c614:	781b      	ldrb	r3, [r3, #0]
   2c616:	001a      	movs	r2, r3
   2c618:	2310      	movs	r3, #16
   2c61a:	4013      	ands	r3, r2
   2c61c:	d016      	beq.n	2c64c <f_open+0x3bc>
				res = FR_NO_FILE;
   2c61e:	4b04      	ldr	r3, [pc, #16]	; (2c630 <f_open+0x3a0>)
   2c620:	18fb      	adds	r3, r7, r3
   2c622:	2204      	movs	r2, #4
   2c624:	701a      	strb	r2, [r3, #0]
   2c626:	e029      	b.n	2c67c <f_open+0x3ec>
   2c628:	fffffdac 	.word	0xfffffdac
   2c62c:	fffffdb7 	.word	0xfffffdb7
   2c630:	0000024f 	.word	0x0000024f
   2c634:	0002bbe9 	.word	0x0002bbe9
   2c638:	0002b9dd 	.word	0x0002b9dd
   2c63c:	0002b22d 	.word	0x0002b22d
   2c640:	0002a025 	.word	0x0002a025
   2c644:	0002a7a9 	.word	0x0002a7a9
   2c648:	0002a169 	.word	0x0002a169
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2c64c:	4b5a      	ldr	r3, [pc, #360]	; (2c7b8 <f_open+0x528>)
   2c64e:	2294      	movs	r2, #148	; 0x94
   2c650:	0092      	lsls	r2, r2, #2
   2c652:	4694      	mov	ip, r2
   2c654:	44bc      	add	ip, r7
   2c656:	4463      	add	r3, ip
   2c658:	781b      	ldrb	r3, [r3, #0]
   2c65a:	2202      	movs	r2, #2
   2c65c:	4013      	ands	r3, r2
   2c65e:	d00d      	beq.n	2c67c <f_open+0x3ec>
   2c660:	2392      	movs	r3, #146	; 0x92
   2c662:	009b      	lsls	r3, r3, #2
   2c664:	18fb      	adds	r3, r7, r3
   2c666:	681b      	ldr	r3, [r3, #0]
   2c668:	330b      	adds	r3, #11
   2c66a:	781b      	ldrb	r3, [r3, #0]
   2c66c:	001a      	movs	r2, r3
   2c66e:	2301      	movs	r3, #1
   2c670:	4013      	ands	r3, r2
   2c672:	d003      	beq.n	2c67c <f_open+0x3ec>
					res = FR_DENIED;
   2c674:	4b51      	ldr	r3, [pc, #324]	; (2c7bc <f_open+0x52c>)
   2c676:	18fb      	adds	r3, r7, r3
   2c678:	2207      	movs	r2, #7
   2c67a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2c67c:	4b4f      	ldr	r3, [pc, #316]	; (2c7bc <f_open+0x52c>)
   2c67e:	18fb      	adds	r3, r7, r3
   2c680:	781b      	ldrb	r3, [r3, #0]
   2c682:	2b00      	cmp	r3, #0
   2c684:	d126      	bne.n	2c6d4 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2c686:	4b4c      	ldr	r3, [pc, #304]	; (2c7b8 <f_open+0x528>)
   2c688:	2294      	movs	r2, #148	; 0x94
   2c68a:	0092      	lsls	r2, r2, #2
   2c68c:	4694      	mov	ip, r2
   2c68e:	44bc      	add	ip, r7
   2c690:	4463      	add	r3, ip
   2c692:	781b      	ldrb	r3, [r3, #0]
   2c694:	2208      	movs	r2, #8
   2c696:	4013      	ands	r3, r2
   2c698:	d00f      	beq.n	2c6ba <f_open+0x42a>
			mode |= FA__WRITTEN;
   2c69a:	4b47      	ldr	r3, [pc, #284]	; (2c7b8 <f_open+0x528>)
   2c69c:	2294      	movs	r2, #148	; 0x94
   2c69e:	0092      	lsls	r2, r2, #2
   2c6a0:	4694      	mov	ip, r2
   2c6a2:	44bc      	add	ip, r7
   2c6a4:	4463      	add	r3, ip
   2c6a6:	4a44      	ldr	r2, [pc, #272]	; (2c7b8 <f_open+0x528>)
   2c6a8:	2194      	movs	r1, #148	; 0x94
   2c6aa:	0089      	lsls	r1, r1, #2
   2c6ac:	468c      	mov	ip, r1
   2c6ae:	44bc      	add	ip, r7
   2c6b0:	4462      	add	r2, ip
   2c6b2:	7812      	ldrb	r2, [r2, #0]
   2c6b4:	2120      	movs	r1, #32
   2c6b6:	430a      	orrs	r2, r1
   2c6b8:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2c6ba:	2387      	movs	r3, #135	; 0x87
   2c6bc:	009b      	lsls	r3, r3, #2
   2c6be:	18fb      	adds	r3, r7, r3
   2c6c0:	681b      	ldr	r3, [r3, #0]
   2c6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c6c4:	68fb      	ldr	r3, [r7, #12]
   2c6c6:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2c6c8:	68fb      	ldr	r3, [r7, #12]
   2c6ca:	2292      	movs	r2, #146	; 0x92
   2c6cc:	0092      	lsls	r2, r2, #2
   2c6ce:	18ba      	adds	r2, r7, r2
   2c6d0:	6812      	ldr	r2, [r2, #0]
   2c6d2:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2c6d4:	4b39      	ldr	r3, [pc, #228]	; (2c7bc <f_open+0x52c>)
   2c6d6:	18fb      	adds	r3, r7, r3
   2c6d8:	781b      	ldrb	r3, [r3, #0]
   2c6da:	2b00      	cmp	r3, #0
   2c6dc:	d163      	bne.n	2c7a6 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2c6de:	68fb      	ldr	r3, [r7, #12]
   2c6e0:	4a35      	ldr	r2, [pc, #212]	; (2c7b8 <f_open+0x528>)
   2c6e2:	2194      	movs	r1, #148	; 0x94
   2c6e4:	0089      	lsls	r1, r1, #2
   2c6e6:	468c      	mov	ip, r1
   2c6e8:	44bc      	add	ip, r7
   2c6ea:	4462      	add	r2, ip
   2c6ec:	7812      	ldrb	r2, [r2, #0]
   2c6ee:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2c6f0:	2392      	movs	r3, #146	; 0x92
   2c6f2:	009b      	lsls	r3, r3, #2
   2c6f4:	18fb      	adds	r3, r7, r3
   2c6f6:	681b      	ldr	r3, [r3, #0]
   2c6f8:	3315      	adds	r3, #21
   2c6fa:	781b      	ldrb	r3, [r3, #0]
   2c6fc:	021b      	lsls	r3, r3, #8
   2c6fe:	b21a      	sxth	r2, r3
   2c700:	2392      	movs	r3, #146	; 0x92
   2c702:	009b      	lsls	r3, r3, #2
   2c704:	18fb      	adds	r3, r7, r3
   2c706:	681b      	ldr	r3, [r3, #0]
   2c708:	3314      	adds	r3, #20
   2c70a:	781b      	ldrb	r3, [r3, #0]
   2c70c:	b21b      	sxth	r3, r3
   2c70e:	4313      	orrs	r3, r2
   2c710:	b21b      	sxth	r3, r3
   2c712:	b29b      	uxth	r3, r3
   2c714:	041b      	lsls	r3, r3, #16
   2c716:	2292      	movs	r2, #146	; 0x92
   2c718:	0092      	lsls	r2, r2, #2
   2c71a:	18ba      	adds	r2, r7, r2
   2c71c:	6812      	ldr	r2, [r2, #0]
   2c71e:	321b      	adds	r2, #27
   2c720:	7812      	ldrb	r2, [r2, #0]
   2c722:	0212      	lsls	r2, r2, #8
   2c724:	b211      	sxth	r1, r2
   2c726:	2292      	movs	r2, #146	; 0x92
   2c728:	0092      	lsls	r2, r2, #2
   2c72a:	18ba      	adds	r2, r7, r2
   2c72c:	6812      	ldr	r2, [r2, #0]
   2c72e:	321a      	adds	r2, #26
   2c730:	7812      	ldrb	r2, [r2, #0]
   2c732:	b212      	sxth	r2, r2
   2c734:	430a      	orrs	r2, r1
   2c736:	b212      	sxth	r2, r2
   2c738:	b292      	uxth	r2, r2
   2c73a:	431a      	orrs	r2, r3
   2c73c:	68fb      	ldr	r3, [r7, #12]
   2c73e:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2c740:	2392      	movs	r3, #146	; 0x92
   2c742:	009b      	lsls	r3, r3, #2
   2c744:	18fb      	adds	r3, r7, r3
   2c746:	681b      	ldr	r3, [r3, #0]
   2c748:	331f      	adds	r3, #31
   2c74a:	781b      	ldrb	r3, [r3, #0]
   2c74c:	061a      	lsls	r2, r3, #24
   2c74e:	2392      	movs	r3, #146	; 0x92
   2c750:	009b      	lsls	r3, r3, #2
   2c752:	18fb      	adds	r3, r7, r3
   2c754:	681b      	ldr	r3, [r3, #0]
   2c756:	331e      	adds	r3, #30
   2c758:	781b      	ldrb	r3, [r3, #0]
   2c75a:	041b      	lsls	r3, r3, #16
   2c75c:	4313      	orrs	r3, r2
   2c75e:	2292      	movs	r2, #146	; 0x92
   2c760:	0092      	lsls	r2, r2, #2
   2c762:	18ba      	adds	r2, r7, r2
   2c764:	6812      	ldr	r2, [r2, #0]
   2c766:	321d      	adds	r2, #29
   2c768:	7812      	ldrb	r2, [r2, #0]
   2c76a:	0212      	lsls	r2, r2, #8
   2c76c:	4313      	orrs	r3, r2
   2c76e:	2292      	movs	r2, #146	; 0x92
   2c770:	0092      	lsls	r2, r2, #2
   2c772:	18ba      	adds	r2, r7, r2
   2c774:	6812      	ldr	r2, [r2, #0]
   2c776:	321c      	adds	r2, #28
   2c778:	7812      	ldrb	r2, [r2, #0]
   2c77a:	431a      	orrs	r2, r3
   2c77c:	68fb      	ldr	r3, [r7, #12]
   2c77e:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2c780:	68fb      	ldr	r3, [r7, #12]
   2c782:	2200      	movs	r2, #0
   2c784:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2c786:	68fb      	ldr	r3, [r7, #12]
   2c788:	2200      	movs	r2, #0
   2c78a:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2c78c:	2387      	movs	r3, #135	; 0x87
   2c78e:	009b      	lsls	r3, r3, #2
   2c790:	18fb      	adds	r3, r7, r3
   2c792:	681a      	ldr	r2, [r3, #0]
   2c794:	68fb      	ldr	r3, [r7, #12]
   2c796:	601a      	str	r2, [r3, #0]
   2c798:	2387      	movs	r3, #135	; 0x87
   2c79a:	009b      	lsls	r3, r3, #2
   2c79c:	18fb      	adds	r3, r7, r3
   2c79e:	681b      	ldr	r3, [r3, #0]
   2c7a0:	88da      	ldrh	r2, [r3, #6]
   2c7a2:	68fb      	ldr	r3, [r7, #12]
   2c7a4:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2c7a6:	4b05      	ldr	r3, [pc, #20]	; (2c7bc <f_open+0x52c>)
   2c7a8:	18fb      	adds	r3, r7, r3
   2c7aa:	781b      	ldrb	r3, [r3, #0]
}
   2c7ac:	0018      	movs	r0, r3
   2c7ae:	46bd      	mov	sp, r7
   2c7b0:	2395      	movs	r3, #149	; 0x95
   2c7b2:	009b      	lsls	r3, r3, #2
   2c7b4:	449d      	add	sp, r3
   2c7b6:	bd90      	pop	{r4, r7, pc}
   2c7b8:	fffffdb7 	.word	0xfffffdb7
   2c7bc:	0000024f 	.word	0x0000024f

0002c7c0 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2c7c0:	b590      	push	{r4, r7, lr}
   2c7c2:	b08b      	sub	sp, #44	; 0x2c
   2c7c4:	af00      	add	r7, sp, #0
   2c7c6:	60f8      	str	r0, [r7, #12]
   2c7c8:	60b9      	str	r1, [r7, #8]
   2c7ca:	607a      	str	r2, [r7, #4]
   2c7cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2c7ce:	68bb      	ldr	r3, [r7, #8]
   2c7d0:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2c7d2:	683b      	ldr	r3, [r7, #0]
   2c7d4:	2200      	movs	r2, #0
   2c7d6:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2c7d8:	68fb      	ldr	r3, [r7, #12]
   2c7da:	681a      	ldr	r2, [r3, #0]
   2c7dc:	68fb      	ldr	r3, [r7, #12]
   2c7de:	889b      	ldrh	r3, [r3, #4]
   2c7e0:	2117      	movs	r1, #23
   2c7e2:	187c      	adds	r4, r7, r1
   2c7e4:	0019      	movs	r1, r3
   2c7e6:	0010      	movs	r0, r2
   2c7e8:	4bc3      	ldr	r3, [pc, #780]	; (2caf8 <f_write+0x338>)
   2c7ea:	4798      	blx	r3
   2c7ec:	0003      	movs	r3, r0
   2c7ee:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2c7f0:	2317      	movs	r3, #23
   2c7f2:	18fb      	adds	r3, r7, r3
   2c7f4:	781b      	ldrb	r3, [r3, #0]
   2c7f6:	2b00      	cmp	r3, #0
   2c7f8:	d003      	beq.n	2c802 <f_write+0x42>
   2c7fa:	2317      	movs	r3, #23
   2c7fc:	18fb      	adds	r3, r7, r3
   2c7fe:	781b      	ldrb	r3, [r3, #0]
   2c800:	e176      	b.n	2caf0 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2c802:	68fb      	ldr	r3, [r7, #12]
   2c804:	799b      	ldrb	r3, [r3, #6]
   2c806:	b25b      	sxtb	r3, r3
   2c808:	2b00      	cmp	r3, #0
   2c80a:	da01      	bge.n	2c810 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2c80c:	2302      	movs	r3, #2
   2c80e:	e16f      	b.n	2caf0 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2c810:	68fb      	ldr	r3, [r7, #12]
   2c812:	799b      	ldrb	r3, [r3, #6]
   2c814:	001a      	movs	r2, r3
   2c816:	2302      	movs	r3, #2
   2c818:	4013      	ands	r3, r2
   2c81a:	d101      	bne.n	2c820 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2c81c:	2307      	movs	r3, #7
   2c81e:	e167      	b.n	2caf0 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2c820:	68fb      	ldr	r3, [r7, #12]
   2c822:	68da      	ldr	r2, [r3, #12]
   2c824:	687b      	ldr	r3, [r7, #4]
   2c826:	18d2      	adds	r2, r2, r3
   2c828:	68fb      	ldr	r3, [r7, #12]
   2c82a:	68db      	ldr	r3, [r3, #12]
   2c82c:	429a      	cmp	r2, r3
   2c82e:	d300      	bcc.n	2c832 <f_write+0x72>
   2c830:	e146      	b.n	2cac0 <f_write+0x300>
   2c832:	2300      	movs	r3, #0
   2c834:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2c836:	e143      	b.n	2cac0 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2c838:	68fb      	ldr	r3, [r7, #12]
   2c83a:	689b      	ldr	r3, [r3, #8]
   2c83c:	05db      	lsls	r3, r3, #23
   2c83e:	0ddb      	lsrs	r3, r3, #23
   2c840:	d000      	beq.n	2c844 <f_write+0x84>
   2c842:	e0f6      	b.n	2ca32 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2c844:	68fb      	ldr	r3, [r7, #12]
   2c846:	689b      	ldr	r3, [r3, #8]
   2c848:	0a5b      	lsrs	r3, r3, #9
   2c84a:	b2da      	uxtb	r2, r3
   2c84c:	68fb      	ldr	r3, [r7, #12]
   2c84e:	681b      	ldr	r3, [r3, #0]
   2c850:	789b      	ldrb	r3, [r3, #2]
   2c852:	3b01      	subs	r3, #1
   2c854:	b2d9      	uxtb	r1, r3
   2c856:	2316      	movs	r3, #22
   2c858:	18fb      	adds	r3, r7, r3
   2c85a:	400a      	ands	r2, r1
   2c85c:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2c85e:	2316      	movs	r3, #22
   2c860:	18fb      	adds	r3, r7, r3
   2c862:	781b      	ldrb	r3, [r3, #0]
   2c864:	2b00      	cmp	r3, #0
   2c866:	d140      	bne.n	2c8ea <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2c868:	68fb      	ldr	r3, [r7, #12]
   2c86a:	689b      	ldr	r3, [r3, #8]
   2c86c:	2b00      	cmp	r3, #0
   2c86e:	d111      	bne.n	2c894 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2c870:	68fb      	ldr	r3, [r7, #12]
   2c872:	691b      	ldr	r3, [r3, #16]
   2c874:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2c876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c878:	2b00      	cmp	r3, #0
   2c87a:	d115      	bne.n	2c8a8 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2c87c:	68fb      	ldr	r3, [r7, #12]
   2c87e:	681b      	ldr	r3, [r3, #0]
   2c880:	2100      	movs	r1, #0
   2c882:	0018      	movs	r0, r3
   2c884:	4b9d      	ldr	r3, [pc, #628]	; (2cafc <f_write+0x33c>)
   2c886:	4798      	blx	r3
   2c888:	0003      	movs	r3, r0
   2c88a:	627b      	str	r3, [r7, #36]	; 0x24
   2c88c:	68fb      	ldr	r3, [r7, #12]
   2c88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2c890:	611a      	str	r2, [r3, #16]
   2c892:	e009      	b.n	2c8a8 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2c894:	68fb      	ldr	r3, [r7, #12]
   2c896:	681a      	ldr	r2, [r3, #0]
   2c898:	68fb      	ldr	r3, [r7, #12]
   2c89a:	695b      	ldr	r3, [r3, #20]
   2c89c:	0019      	movs	r1, r3
   2c89e:	0010      	movs	r0, r2
   2c8a0:	4b96      	ldr	r3, [pc, #600]	; (2cafc <f_write+0x33c>)
   2c8a2:	4798      	blx	r3
   2c8a4:	0003      	movs	r3, r0
   2c8a6:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c8aa:	2b00      	cmp	r3, #0
   2c8ac:	d100      	bne.n	2c8b0 <f_write+0xf0>
   2c8ae:	e10c      	b.n	2caca <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2c8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c8b2:	2b01      	cmp	r3, #1
   2c8b4:	d109      	bne.n	2c8ca <f_write+0x10a>
   2c8b6:	68fb      	ldr	r3, [r7, #12]
   2c8b8:	799b      	ldrb	r3, [r3, #6]
   2c8ba:	2280      	movs	r2, #128	; 0x80
   2c8bc:	4252      	negs	r2, r2
   2c8be:	4313      	orrs	r3, r2
   2c8c0:	b2da      	uxtb	r2, r3
   2c8c2:	68fb      	ldr	r3, [r7, #12]
   2c8c4:	719a      	strb	r2, [r3, #6]
   2c8c6:	2302      	movs	r3, #2
   2c8c8:	e112      	b.n	2caf0 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2c8cc:	3301      	adds	r3, #1
   2c8ce:	d109      	bne.n	2c8e4 <f_write+0x124>
   2c8d0:	68fb      	ldr	r3, [r7, #12]
   2c8d2:	799b      	ldrb	r3, [r3, #6]
   2c8d4:	2280      	movs	r2, #128	; 0x80
   2c8d6:	4252      	negs	r2, r2
   2c8d8:	4313      	orrs	r3, r2
   2c8da:	b2da      	uxtb	r2, r3
   2c8dc:	68fb      	ldr	r3, [r7, #12]
   2c8de:	719a      	strb	r2, [r3, #6]
   2c8e0:	2301      	movs	r3, #1
   2c8e2:	e105      	b.n	2caf0 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2c8e4:	68fb      	ldr	r3, [r7, #12]
   2c8e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2c8e8:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2c8ea:	68fb      	ldr	r3, [r7, #12]
   2c8ec:	681b      	ldr	r3, [r3, #0]
   2c8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c8f0:	68fb      	ldr	r3, [r7, #12]
   2c8f2:	699b      	ldr	r3, [r3, #24]
   2c8f4:	429a      	cmp	r2, r3
   2c8f6:	d111      	bne.n	2c91c <f_write+0x15c>
   2c8f8:	68fb      	ldr	r3, [r7, #12]
   2c8fa:	681b      	ldr	r3, [r3, #0]
   2c8fc:	2100      	movs	r1, #0
   2c8fe:	0018      	movs	r0, r3
   2c900:	4b7f      	ldr	r3, [pc, #508]	; (2cb00 <f_write+0x340>)
   2c902:	4798      	blx	r3
   2c904:	1e03      	subs	r3, r0, #0
   2c906:	d009      	beq.n	2c91c <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2c908:	68fb      	ldr	r3, [r7, #12]
   2c90a:	799b      	ldrb	r3, [r3, #6]
   2c90c:	2280      	movs	r2, #128	; 0x80
   2c90e:	4252      	negs	r2, r2
   2c910:	4313      	orrs	r3, r2
   2c912:	b2da      	uxtb	r2, r3
   2c914:	68fb      	ldr	r3, [r7, #12]
   2c916:	719a      	strb	r2, [r3, #6]
   2c918:	2301      	movs	r3, #1
   2c91a:	e0e9      	b.n	2caf0 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2c91c:	68fb      	ldr	r3, [r7, #12]
   2c91e:	681a      	ldr	r2, [r3, #0]
   2c920:	68fb      	ldr	r3, [r7, #12]
   2c922:	695b      	ldr	r3, [r3, #20]
   2c924:	0019      	movs	r1, r3
   2c926:	0010      	movs	r0, r2
   2c928:	4b76      	ldr	r3, [pc, #472]	; (2cb04 <f_write+0x344>)
   2c92a:	4798      	blx	r3
   2c92c:	0003      	movs	r3, r0
   2c92e:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2c930:	693b      	ldr	r3, [r7, #16]
   2c932:	2b00      	cmp	r3, #0
   2c934:	d109      	bne.n	2c94a <f_write+0x18a>
   2c936:	68fb      	ldr	r3, [r7, #12]
   2c938:	799b      	ldrb	r3, [r3, #6]
   2c93a:	2280      	movs	r2, #128	; 0x80
   2c93c:	4252      	negs	r2, r2
   2c93e:	4313      	orrs	r3, r2
   2c940:	b2da      	uxtb	r2, r3
   2c942:	68fb      	ldr	r3, [r7, #12]
   2c944:	719a      	strb	r2, [r3, #6]
   2c946:	2302      	movs	r3, #2
   2c948:	e0d2      	b.n	2caf0 <f_write+0x330>
			sect += csect;
   2c94a:	2316      	movs	r3, #22
   2c94c:	18fb      	adds	r3, r7, r3
   2c94e:	781b      	ldrb	r3, [r3, #0]
   2c950:	693a      	ldr	r2, [r7, #16]
   2c952:	18d3      	adds	r3, r2, r3
   2c954:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2c956:	687b      	ldr	r3, [r7, #4]
   2c958:	0a5b      	lsrs	r3, r3, #9
   2c95a:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2c95c:	69fb      	ldr	r3, [r7, #28]
   2c95e:	2b00      	cmp	r3, #0
   2c960:	d048      	beq.n	2c9f4 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2c962:	2316      	movs	r3, #22
   2c964:	18fb      	adds	r3, r7, r3
   2c966:	781a      	ldrb	r2, [r3, #0]
   2c968:	69fb      	ldr	r3, [r7, #28]
   2c96a:	18d2      	adds	r2, r2, r3
   2c96c:	68fb      	ldr	r3, [r7, #12]
   2c96e:	681b      	ldr	r3, [r3, #0]
   2c970:	789b      	ldrb	r3, [r3, #2]
   2c972:	429a      	cmp	r2, r3
   2c974:	d908      	bls.n	2c988 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2c976:	68fb      	ldr	r3, [r7, #12]
   2c978:	681b      	ldr	r3, [r3, #0]
   2c97a:	789b      	ldrb	r3, [r3, #2]
   2c97c:	001a      	movs	r2, r3
   2c97e:	2316      	movs	r3, #22
   2c980:	18fb      	adds	r3, r7, r3
   2c982:	781b      	ldrb	r3, [r3, #0]
   2c984:	1ad3      	subs	r3, r2, r3
   2c986:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2c988:	68fb      	ldr	r3, [r7, #12]
   2c98a:	681b      	ldr	r3, [r3, #0]
   2c98c:	7858      	ldrb	r0, [r3, #1]
   2c98e:	69fb      	ldr	r3, [r7, #28]
   2c990:	b2db      	uxtb	r3, r3
   2c992:	693a      	ldr	r2, [r7, #16]
   2c994:	69b9      	ldr	r1, [r7, #24]
   2c996:	4c5c      	ldr	r4, [pc, #368]	; (2cb08 <f_write+0x348>)
   2c998:	47a0      	blx	r4
   2c99a:	1e03      	subs	r3, r0, #0
   2c99c:	d009      	beq.n	2c9b2 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2c99e:	68fb      	ldr	r3, [r7, #12]
   2c9a0:	799b      	ldrb	r3, [r3, #6]
   2c9a2:	2280      	movs	r2, #128	; 0x80
   2c9a4:	4252      	negs	r2, r2
   2c9a6:	4313      	orrs	r3, r2
   2c9a8:	b2da      	uxtb	r2, r3
   2c9aa:	68fb      	ldr	r3, [r7, #12]
   2c9ac:	719a      	strb	r2, [r3, #6]
   2c9ae:	2301      	movs	r3, #1
   2c9b0:	e09e      	b.n	2caf0 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2c9b2:	68fb      	ldr	r3, [r7, #12]
   2c9b4:	681b      	ldr	r3, [r3, #0]
   2c9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c9b8:	693b      	ldr	r3, [r7, #16]
   2c9ba:	1ad2      	subs	r2, r2, r3
   2c9bc:	69fb      	ldr	r3, [r7, #28]
   2c9be:	429a      	cmp	r2, r3
   2c9c0:	d214      	bcs.n	2c9ec <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2c9c2:	68fb      	ldr	r3, [r7, #12]
   2c9c4:	681b      	ldr	r3, [r3, #0]
   2c9c6:	3330      	adds	r3, #48	; 0x30
   2c9c8:	0018      	movs	r0, r3
   2c9ca:	68fb      	ldr	r3, [r7, #12]
   2c9cc:	681b      	ldr	r3, [r3, #0]
   2c9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2c9d0:	693b      	ldr	r3, [r7, #16]
   2c9d2:	1ad3      	subs	r3, r2, r3
   2c9d4:	025b      	lsls	r3, r3, #9
   2c9d6:	69ba      	ldr	r2, [r7, #24]
   2c9d8:	18d1      	adds	r1, r2, r3
   2c9da:	2380      	movs	r3, #128	; 0x80
   2c9dc:	009b      	lsls	r3, r3, #2
   2c9de:	001a      	movs	r2, r3
   2c9e0:	4b4a      	ldr	r3, [pc, #296]	; (2cb0c <f_write+0x34c>)
   2c9e2:	4798      	blx	r3
					fp->fs->wflag = 0;
   2c9e4:	68fb      	ldr	r3, [r7, #12]
   2c9e6:	681b      	ldr	r3, [r3, #0]
   2c9e8:	2200      	movs	r2, #0
   2c9ea:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2c9ec:	69fb      	ldr	r3, [r7, #28]
   2c9ee:	025b      	lsls	r3, r3, #9
   2c9f0:	623b      	str	r3, [r7, #32]
				continue;
   2c9f2:	e051      	b.n	2ca98 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2c9f4:	68fb      	ldr	r3, [r7, #12]
   2c9f6:	689a      	ldr	r2, [r3, #8]
   2c9f8:	68fb      	ldr	r3, [r7, #12]
   2c9fa:	68db      	ldr	r3, [r3, #12]
   2c9fc:	429a      	cmp	r2, r3
   2c9fe:	d315      	bcc.n	2ca2c <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2ca00:	68fb      	ldr	r3, [r7, #12]
   2ca02:	681b      	ldr	r3, [r3, #0]
   2ca04:	2100      	movs	r1, #0
   2ca06:	0018      	movs	r0, r3
   2ca08:	4b3d      	ldr	r3, [pc, #244]	; (2cb00 <f_write+0x340>)
   2ca0a:	4798      	blx	r3
   2ca0c:	1e03      	subs	r3, r0, #0
   2ca0e:	d009      	beq.n	2ca24 <f_write+0x264>
   2ca10:	68fb      	ldr	r3, [r7, #12]
   2ca12:	799b      	ldrb	r3, [r3, #6]
   2ca14:	2280      	movs	r2, #128	; 0x80
   2ca16:	4252      	negs	r2, r2
   2ca18:	4313      	orrs	r3, r2
   2ca1a:	b2da      	uxtb	r2, r3
   2ca1c:	68fb      	ldr	r3, [r7, #12]
   2ca1e:	719a      	strb	r2, [r3, #6]
   2ca20:	2301      	movs	r3, #1
   2ca22:	e065      	b.n	2caf0 <f_write+0x330>
				fp->fs->winsect = sect;
   2ca24:	68fb      	ldr	r3, [r7, #12]
   2ca26:	681b      	ldr	r3, [r3, #0]
   2ca28:	693a      	ldr	r2, [r7, #16]
   2ca2a:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2ca2c:	68fb      	ldr	r3, [r7, #12]
   2ca2e:	693a      	ldr	r2, [r7, #16]
   2ca30:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2ca32:	68fb      	ldr	r3, [r7, #12]
   2ca34:	689b      	ldr	r3, [r3, #8]
   2ca36:	05db      	lsls	r3, r3, #23
   2ca38:	0ddb      	lsrs	r3, r3, #23
   2ca3a:	2280      	movs	r2, #128	; 0x80
   2ca3c:	0092      	lsls	r2, r2, #2
   2ca3e:	1ad3      	subs	r3, r2, r3
   2ca40:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2ca42:	6a3a      	ldr	r2, [r7, #32]
   2ca44:	687b      	ldr	r3, [r7, #4]
   2ca46:	429a      	cmp	r2, r3
   2ca48:	d901      	bls.n	2ca4e <f_write+0x28e>
   2ca4a:	687b      	ldr	r3, [r7, #4]
   2ca4c:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2ca4e:	68fb      	ldr	r3, [r7, #12]
   2ca50:	681a      	ldr	r2, [r3, #0]
   2ca52:	68fb      	ldr	r3, [r7, #12]
   2ca54:	699b      	ldr	r3, [r3, #24]
   2ca56:	0019      	movs	r1, r3
   2ca58:	0010      	movs	r0, r2
   2ca5a:	4b29      	ldr	r3, [pc, #164]	; (2cb00 <f_write+0x340>)
   2ca5c:	4798      	blx	r3
   2ca5e:	1e03      	subs	r3, r0, #0
   2ca60:	d009      	beq.n	2ca76 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2ca62:	68fb      	ldr	r3, [r7, #12]
   2ca64:	799b      	ldrb	r3, [r3, #6]
   2ca66:	2280      	movs	r2, #128	; 0x80
   2ca68:	4252      	negs	r2, r2
   2ca6a:	4313      	orrs	r3, r2
   2ca6c:	b2da      	uxtb	r2, r3
   2ca6e:	68fb      	ldr	r3, [r7, #12]
   2ca70:	719a      	strb	r2, [r3, #6]
   2ca72:	2301      	movs	r3, #1
   2ca74:	e03c      	b.n	2caf0 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2ca76:	68fb      	ldr	r3, [r7, #12]
   2ca78:	681a      	ldr	r2, [r3, #0]
   2ca7a:	68fb      	ldr	r3, [r7, #12]
   2ca7c:	689b      	ldr	r3, [r3, #8]
   2ca7e:	05db      	lsls	r3, r3, #23
   2ca80:	0ddb      	lsrs	r3, r3, #23
   2ca82:	3330      	adds	r3, #48	; 0x30
   2ca84:	18d3      	adds	r3, r2, r3
   2ca86:	6a3a      	ldr	r2, [r7, #32]
   2ca88:	69b9      	ldr	r1, [r7, #24]
   2ca8a:	0018      	movs	r0, r3
   2ca8c:	4b1f      	ldr	r3, [pc, #124]	; (2cb0c <f_write+0x34c>)
   2ca8e:	4798      	blx	r3
		fp->fs->wflag = 1;
   2ca90:	68fb      	ldr	r3, [r7, #12]
   2ca92:	681b      	ldr	r3, [r3, #0]
   2ca94:	2201      	movs	r2, #1
   2ca96:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2ca98:	69ba      	ldr	r2, [r7, #24]
   2ca9a:	6a3b      	ldr	r3, [r7, #32]
   2ca9c:	18d3      	adds	r3, r2, r3
   2ca9e:	61bb      	str	r3, [r7, #24]
   2caa0:	68fb      	ldr	r3, [r7, #12]
   2caa2:	689a      	ldr	r2, [r3, #8]
   2caa4:	6a3b      	ldr	r3, [r7, #32]
   2caa6:	18d2      	adds	r2, r2, r3
   2caa8:	68fb      	ldr	r3, [r7, #12]
   2caaa:	609a      	str	r2, [r3, #8]
   2caac:	683b      	ldr	r3, [r7, #0]
   2caae:	681a      	ldr	r2, [r3, #0]
   2cab0:	6a3b      	ldr	r3, [r7, #32]
   2cab2:	18d2      	adds	r2, r2, r3
   2cab4:	683b      	ldr	r3, [r7, #0]
   2cab6:	601a      	str	r2, [r3, #0]
   2cab8:	687a      	ldr	r2, [r7, #4]
   2caba:	6a3b      	ldr	r3, [r7, #32]
   2cabc:	1ad3      	subs	r3, r2, r3
   2cabe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2cac0:	687b      	ldr	r3, [r7, #4]
   2cac2:	2b00      	cmp	r3, #0
   2cac4:	d000      	beq.n	2cac8 <f_write+0x308>
   2cac6:	e6b7      	b.n	2c838 <f_write+0x78>
   2cac8:	e000      	b.n	2cacc <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2caca:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2cacc:	68fb      	ldr	r3, [r7, #12]
   2cace:	689a      	ldr	r2, [r3, #8]
   2cad0:	68fb      	ldr	r3, [r7, #12]
   2cad2:	68db      	ldr	r3, [r3, #12]
   2cad4:	429a      	cmp	r2, r3
   2cad6:	d903      	bls.n	2cae0 <f_write+0x320>
   2cad8:	68fb      	ldr	r3, [r7, #12]
   2cada:	689a      	ldr	r2, [r3, #8]
   2cadc:	68fb      	ldr	r3, [r7, #12]
   2cade:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2cae0:	68fb      	ldr	r3, [r7, #12]
   2cae2:	799b      	ldrb	r3, [r3, #6]
   2cae4:	2220      	movs	r2, #32
   2cae6:	4313      	orrs	r3, r2
   2cae8:	b2da      	uxtb	r2, r3
   2caea:	68fb      	ldr	r3, [r7, #12]
   2caec:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2caee:	2300      	movs	r3, #0
}
   2caf0:	0018      	movs	r0, r3
   2caf2:	46bd      	mov	sp, r7
   2caf4:	b00b      	add	sp, #44	; 0x2c
   2caf6:	bd90      	pop	{r4, r7, pc}
   2caf8:	0002c1e5 	.word	0x0002c1e5
   2cafc:	0002a871 	.word	0x0002a871
   2cb00:	0002a169 	.word	0x0002a169
   2cb04:	0002a3c9 	.word	0x0002a3c9
   2cb08:	00029e55 	.word	0x00029e55
   2cb0c:	0002a085 	.word	0x0002a085

0002cb10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2cb10:	b590      	push	{r4, r7, lr}
   2cb12:	b087      	sub	sp, #28
   2cb14:	af00      	add	r7, sp, #0
   2cb16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2cb18:	687b      	ldr	r3, [r7, #4]
   2cb1a:	681a      	ldr	r2, [r3, #0]
   2cb1c:	687b      	ldr	r3, [r7, #4]
   2cb1e:	889b      	ldrh	r3, [r3, #4]
   2cb20:	2117      	movs	r1, #23
   2cb22:	187c      	adds	r4, r7, r1
   2cb24:	0019      	movs	r1, r3
   2cb26:	0010      	movs	r0, r2
   2cb28:	4b55      	ldr	r3, [pc, #340]	; (2cc80 <f_sync+0x170>)
   2cb2a:	4798      	blx	r3
   2cb2c:	0003      	movs	r3, r0
   2cb2e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2cb30:	2317      	movs	r3, #23
   2cb32:	18fb      	adds	r3, r7, r3
   2cb34:	781b      	ldrb	r3, [r3, #0]
   2cb36:	2b00      	cmp	r3, #0
   2cb38:	d000      	beq.n	2cb3c <f_sync+0x2c>
   2cb3a:	e09a      	b.n	2cc72 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2cb3c:	687b      	ldr	r3, [r7, #4]
   2cb3e:	799b      	ldrb	r3, [r3, #6]
   2cb40:	001a      	movs	r2, r3
   2cb42:	2320      	movs	r3, #32
   2cb44:	4013      	ands	r3, r2
   2cb46:	d100      	bne.n	2cb4a <f_sync+0x3a>
   2cb48:	e093      	b.n	2cc72 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2cb4a:	687b      	ldr	r3, [r7, #4]
   2cb4c:	681a      	ldr	r2, [r3, #0]
   2cb4e:	687b      	ldr	r3, [r7, #4]
   2cb50:	69db      	ldr	r3, [r3, #28]
   2cb52:	2117      	movs	r1, #23
   2cb54:	187c      	adds	r4, r7, r1
   2cb56:	0019      	movs	r1, r3
   2cb58:	0010      	movs	r0, r2
   2cb5a:	4b4a      	ldr	r3, [pc, #296]	; (2cc84 <f_sync+0x174>)
   2cb5c:	4798      	blx	r3
   2cb5e:	0003      	movs	r3, r0
   2cb60:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2cb62:	2317      	movs	r3, #23
   2cb64:	18fb      	adds	r3, r7, r3
   2cb66:	781b      	ldrb	r3, [r3, #0]
   2cb68:	2b00      	cmp	r3, #0
   2cb6a:	d000      	beq.n	2cb6e <f_sync+0x5e>
   2cb6c:	e081      	b.n	2cc72 <f_sync+0x162>
				dir = fp->dir_ptr;
   2cb6e:	687b      	ldr	r3, [r7, #4]
   2cb70:	6a1b      	ldr	r3, [r3, #32]
   2cb72:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2cb74:	693b      	ldr	r3, [r7, #16]
   2cb76:	330b      	adds	r3, #11
   2cb78:	693a      	ldr	r2, [r7, #16]
   2cb7a:	320b      	adds	r2, #11
   2cb7c:	7812      	ldrb	r2, [r2, #0]
   2cb7e:	2120      	movs	r1, #32
   2cb80:	430a      	orrs	r2, r1
   2cb82:	b2d2      	uxtb	r2, r2
   2cb84:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2cb86:	693b      	ldr	r3, [r7, #16]
   2cb88:	331c      	adds	r3, #28
   2cb8a:	001a      	movs	r2, r3
   2cb8c:	687b      	ldr	r3, [r7, #4]
   2cb8e:	68db      	ldr	r3, [r3, #12]
   2cb90:	b2db      	uxtb	r3, r3
   2cb92:	7013      	strb	r3, [r2, #0]
   2cb94:	693b      	ldr	r3, [r7, #16]
   2cb96:	331d      	adds	r3, #29
   2cb98:	001a      	movs	r2, r3
   2cb9a:	687b      	ldr	r3, [r7, #4]
   2cb9c:	68db      	ldr	r3, [r3, #12]
   2cb9e:	b29b      	uxth	r3, r3
   2cba0:	0a1b      	lsrs	r3, r3, #8
   2cba2:	b29b      	uxth	r3, r3
   2cba4:	b2db      	uxtb	r3, r3
   2cba6:	7013      	strb	r3, [r2, #0]
   2cba8:	693b      	ldr	r3, [r7, #16]
   2cbaa:	331e      	adds	r3, #30
   2cbac:	001a      	movs	r2, r3
   2cbae:	687b      	ldr	r3, [r7, #4]
   2cbb0:	68db      	ldr	r3, [r3, #12]
   2cbb2:	0c1b      	lsrs	r3, r3, #16
   2cbb4:	b2db      	uxtb	r3, r3
   2cbb6:	7013      	strb	r3, [r2, #0]
   2cbb8:	693b      	ldr	r3, [r7, #16]
   2cbba:	331f      	adds	r3, #31
   2cbbc:	001a      	movs	r2, r3
   2cbbe:	687b      	ldr	r3, [r7, #4]
   2cbc0:	68db      	ldr	r3, [r3, #12]
   2cbc2:	0e1b      	lsrs	r3, r3, #24
   2cbc4:	b2db      	uxtb	r3, r3
   2cbc6:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2cbc8:	693b      	ldr	r3, [r7, #16]
   2cbca:	331a      	adds	r3, #26
   2cbcc:	001a      	movs	r2, r3
   2cbce:	687b      	ldr	r3, [r7, #4]
   2cbd0:	691b      	ldr	r3, [r3, #16]
   2cbd2:	b2db      	uxtb	r3, r3
   2cbd4:	7013      	strb	r3, [r2, #0]
   2cbd6:	693b      	ldr	r3, [r7, #16]
   2cbd8:	331b      	adds	r3, #27
   2cbda:	001a      	movs	r2, r3
   2cbdc:	687b      	ldr	r3, [r7, #4]
   2cbde:	691b      	ldr	r3, [r3, #16]
   2cbe0:	b29b      	uxth	r3, r3
   2cbe2:	0a1b      	lsrs	r3, r3, #8
   2cbe4:	b29b      	uxth	r3, r3
   2cbe6:	b2db      	uxtb	r3, r3
   2cbe8:	7013      	strb	r3, [r2, #0]
   2cbea:	693b      	ldr	r3, [r7, #16]
   2cbec:	3314      	adds	r3, #20
   2cbee:	001a      	movs	r2, r3
   2cbf0:	687b      	ldr	r3, [r7, #4]
   2cbf2:	691b      	ldr	r3, [r3, #16]
   2cbf4:	0c1b      	lsrs	r3, r3, #16
   2cbf6:	b2db      	uxtb	r3, r3
   2cbf8:	7013      	strb	r3, [r2, #0]
   2cbfa:	693b      	ldr	r3, [r7, #16]
   2cbfc:	3315      	adds	r3, #21
   2cbfe:	001a      	movs	r2, r3
   2cc00:	687b      	ldr	r3, [r7, #4]
   2cc02:	691b      	ldr	r3, [r3, #16]
   2cc04:	0c1b      	lsrs	r3, r3, #16
   2cc06:	b29b      	uxth	r3, r3
   2cc08:	0a1b      	lsrs	r3, r3, #8
   2cc0a:	b29b      	uxth	r3, r3
   2cc0c:	b2db      	uxtb	r3, r3
   2cc0e:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2cc10:	4b1d      	ldr	r3, [pc, #116]	; (2cc88 <f_sync+0x178>)
   2cc12:	4798      	blx	r3
   2cc14:	0003      	movs	r3, r0
   2cc16:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2cc18:	693b      	ldr	r3, [r7, #16]
   2cc1a:	3316      	adds	r3, #22
   2cc1c:	68fa      	ldr	r2, [r7, #12]
   2cc1e:	b2d2      	uxtb	r2, r2
   2cc20:	701a      	strb	r2, [r3, #0]
   2cc22:	693b      	ldr	r3, [r7, #16]
   2cc24:	3317      	adds	r3, #23
   2cc26:	68fa      	ldr	r2, [r7, #12]
   2cc28:	b292      	uxth	r2, r2
   2cc2a:	0a12      	lsrs	r2, r2, #8
   2cc2c:	b292      	uxth	r2, r2
   2cc2e:	b2d2      	uxtb	r2, r2
   2cc30:	701a      	strb	r2, [r3, #0]
   2cc32:	693b      	ldr	r3, [r7, #16]
   2cc34:	3318      	adds	r3, #24
   2cc36:	68fa      	ldr	r2, [r7, #12]
   2cc38:	0c12      	lsrs	r2, r2, #16
   2cc3a:	b2d2      	uxtb	r2, r2
   2cc3c:	701a      	strb	r2, [r3, #0]
   2cc3e:	693b      	ldr	r3, [r7, #16]
   2cc40:	3319      	adds	r3, #25
   2cc42:	68fa      	ldr	r2, [r7, #12]
   2cc44:	0e12      	lsrs	r2, r2, #24
   2cc46:	b2d2      	uxtb	r2, r2
   2cc48:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2cc4a:	687b      	ldr	r3, [r7, #4]
   2cc4c:	799b      	ldrb	r3, [r3, #6]
   2cc4e:	2220      	movs	r2, #32
   2cc50:	4393      	bics	r3, r2
   2cc52:	b2da      	uxtb	r2, r3
   2cc54:	687b      	ldr	r3, [r7, #4]
   2cc56:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2cc58:	687b      	ldr	r3, [r7, #4]
   2cc5a:	681b      	ldr	r3, [r3, #0]
   2cc5c:	2201      	movs	r2, #1
   2cc5e:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2cc60:	687b      	ldr	r3, [r7, #4]
   2cc62:	681b      	ldr	r3, [r3, #0]
   2cc64:	2217      	movs	r2, #23
   2cc66:	18bc      	adds	r4, r7, r2
   2cc68:	0018      	movs	r0, r3
   2cc6a:	4b08      	ldr	r3, [pc, #32]	; (2cc8c <f_sync+0x17c>)
   2cc6c:	4798      	blx	r3
   2cc6e:	0003      	movs	r3, r0
   2cc70:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2cc72:	2317      	movs	r3, #23
   2cc74:	18fb      	adds	r3, r7, r3
   2cc76:	781b      	ldrb	r3, [r3, #0]
}
   2cc78:	0018      	movs	r0, r3
   2cc7a:	46bd      	mov	sp, r7
   2cc7c:	b007      	add	sp, #28
   2cc7e:	bd90      	pop	{r4, r7, pc}
   2cc80:	0002c1e5 	.word	0x0002c1e5
   2cc84:	0002a169 	.word	0x0002a169
   2cc88:	0002a025 	.word	0x0002a025
   2cc8c:	0002a231 	.word	0x0002a231

0002cc90 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2cc90:	b590      	push	{r4, r7, lr}
   2cc92:	b085      	sub	sp, #20
   2cc94:	af00      	add	r7, sp, #0
   2cc96:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2cc98:	230f      	movs	r3, #15
   2cc9a:	18fc      	adds	r4, r7, r3
   2cc9c:	687b      	ldr	r3, [r7, #4]
   2cc9e:	0018      	movs	r0, r3
   2cca0:	4b09      	ldr	r3, [pc, #36]	; (2ccc8 <f_close+0x38>)
   2cca2:	4798      	blx	r3
   2cca4:	0003      	movs	r3, r0
   2cca6:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2cca8:	230f      	movs	r3, #15
   2ccaa:	18fb      	adds	r3, r7, r3
   2ccac:	781b      	ldrb	r3, [r3, #0]
   2ccae:	2b00      	cmp	r3, #0
   2ccb0:	d102      	bne.n	2ccb8 <f_close+0x28>
   2ccb2:	687b      	ldr	r3, [r7, #4]
   2ccb4:	2200      	movs	r2, #0
   2ccb6:	601a      	str	r2, [r3, #0]
	return res;
   2ccb8:	230f      	movs	r3, #15
   2ccba:	18fb      	adds	r3, r7, r3
   2ccbc:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2ccbe:	0018      	movs	r0, r3
   2ccc0:	46bd      	mov	sp, r7
   2ccc2:	b005      	add	sp, #20
   2ccc4:	bd90      	pop	{r4, r7, pc}
   2ccc6:	46c0      	nop			; (mov r8, r8)
   2ccc8:	0002cb11 	.word	0x0002cb11

0002cccc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
   2cccc:	b580      	push	{r7, lr}
   2ccce:	b084      	sub	sp, #16
   2ccd0:	af00      	add	r7, sp, #0
   2ccd2:	0002      	movs	r2, r0
   2ccd4:	6039      	str	r1, [r7, #0]
   2ccd6:	1dbb      	adds	r3, r7, #6
   2ccd8:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
   2ccda:	1dbb      	adds	r3, r7, #6
   2ccdc:	881b      	ldrh	r3, [r3, #0]
   2ccde:	2b7f      	cmp	r3, #127	; 0x7f
   2cce0:	d805      	bhi.n	2ccee <ff_convert+0x22>
		c = src;
   2cce2:	230e      	movs	r3, #14
   2cce4:	18fb      	adds	r3, r7, r3
   2cce6:	1dba      	adds	r2, r7, #6
   2cce8:	8812      	ldrh	r2, [r2, #0]
   2ccea:	801a      	strh	r2, [r3, #0]
   2ccec:	e03a      	b.n	2cd64 <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
   2ccee:	683b      	ldr	r3, [r7, #0]
   2ccf0:	2b00      	cmp	r3, #0
   2ccf2:	d010      	beq.n	2cd16 <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   2ccf4:	1dbb      	adds	r3, r7, #6
   2ccf6:	881b      	ldrh	r3, [r3, #0]
   2ccf8:	2bff      	cmp	r3, #255	; 0xff
   2ccfa:	d807      	bhi.n	2cd0c <ff_convert+0x40>
   2ccfc:	1dbb      	adds	r3, r7, #6
   2ccfe:	881b      	ldrh	r3, [r3, #0]
   2cd00:	3b80      	subs	r3, #128	; 0x80
   2cd02:	001a      	movs	r2, r3
   2cd04:	4b1b      	ldr	r3, [pc, #108]	; (2cd74 <ff_convert+0xa8>)
   2cd06:	0052      	lsls	r2, r2, #1
   2cd08:	5ad2      	ldrh	r2, [r2, r3]
   2cd0a:	e000      	b.n	2cd0e <ff_convert+0x42>
   2cd0c:	2200      	movs	r2, #0
   2cd0e:	230e      	movs	r3, #14
   2cd10:	18fb      	adds	r3, r7, r3
   2cd12:	801a      	strh	r2, [r3, #0]
   2cd14:	e026      	b.n	2cd64 <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
   2cd16:	230e      	movs	r3, #14
   2cd18:	18fb      	adds	r3, r7, r3
   2cd1a:	2200      	movs	r2, #0
   2cd1c:	801a      	strh	r2, [r3, #0]
   2cd1e:	e010      	b.n	2cd42 <ff_convert+0x76>
				if (src == Tbl[c]) break;
   2cd20:	230e      	movs	r3, #14
   2cd22:	18fb      	adds	r3, r7, r3
   2cd24:	881a      	ldrh	r2, [r3, #0]
   2cd26:	4b13      	ldr	r3, [pc, #76]	; (2cd74 <ff_convert+0xa8>)
   2cd28:	0052      	lsls	r2, r2, #1
   2cd2a:	5ad3      	ldrh	r3, [r2, r3]
   2cd2c:	1dba      	adds	r2, r7, #6
   2cd2e:	8812      	ldrh	r2, [r2, #0]
   2cd30:	429a      	cmp	r2, r3
   2cd32:	d00c      	beq.n	2cd4e <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
   2cd34:	230e      	movs	r3, #14
   2cd36:	18fb      	adds	r3, r7, r3
   2cd38:	881a      	ldrh	r2, [r3, #0]
   2cd3a:	230e      	movs	r3, #14
   2cd3c:	18fb      	adds	r3, r7, r3
   2cd3e:	3201      	adds	r2, #1
   2cd40:	801a      	strh	r2, [r3, #0]
   2cd42:	230e      	movs	r3, #14
   2cd44:	18fb      	adds	r3, r7, r3
   2cd46:	881b      	ldrh	r3, [r3, #0]
   2cd48:	2b7f      	cmp	r3, #127	; 0x7f
   2cd4a:	d9e9      	bls.n	2cd20 <ff_convert+0x54>
   2cd4c:	e000      	b.n	2cd50 <ff_convert+0x84>
				if (src == Tbl[c]) break;
   2cd4e:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
   2cd50:	230e      	movs	r3, #14
   2cd52:	18fb      	adds	r3, r7, r3
   2cd54:	881b      	ldrh	r3, [r3, #0]
   2cd56:	3380      	adds	r3, #128	; 0x80
   2cd58:	b29a      	uxth	r2, r3
   2cd5a:	230e      	movs	r3, #14
   2cd5c:	18fb      	adds	r3, r7, r3
   2cd5e:	21ff      	movs	r1, #255	; 0xff
   2cd60:	400a      	ands	r2, r1
   2cd62:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
   2cd64:	230e      	movs	r3, #14
   2cd66:	18fb      	adds	r3, r7, r3
   2cd68:	881b      	ldrh	r3, [r3, #0]
}
   2cd6a:	0018      	movs	r0, r3
   2cd6c:	46bd      	mov	sp, r7
   2cd6e:	b004      	add	sp, #16
   2cd70:	bd80      	pop	{r7, pc}
   2cd72:	46c0      	nop			; (mov r8, r8)
   2cd74:	00037b6c 	.word	0x00037b6c

0002cd78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
   2cd78:	b580      	push	{r7, lr}
   2cd7a:	b084      	sub	sp, #16
   2cd7c:	af00      	add	r7, sp, #0
   2cd7e:	0002      	movs	r2, r0
   2cd80:	1dbb      	adds	r3, r7, #6
   2cd82:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   2cd84:	2300      	movs	r3, #0
   2cd86:	60fb      	str	r3, [r7, #12]
   2cd88:	e002      	b.n	2cd90 <ff_wtoupper+0x18>
   2cd8a:	68fb      	ldr	r3, [r7, #12]
   2cd8c:	3301      	adds	r3, #1
   2cd8e:	60fb      	str	r3, [r7, #12]
   2cd90:	4b0f      	ldr	r3, [pc, #60]	; (2cdd0 <ff_wtoupper+0x58>)
   2cd92:	68fa      	ldr	r2, [r7, #12]
   2cd94:	0052      	lsls	r2, r2, #1
   2cd96:	5ad3      	ldrh	r3, [r2, r3]
   2cd98:	2b00      	cmp	r3, #0
   2cd9a:	d007      	beq.n	2cdac <ff_wtoupper+0x34>
   2cd9c:	4b0c      	ldr	r3, [pc, #48]	; (2cdd0 <ff_wtoupper+0x58>)
   2cd9e:	68fa      	ldr	r2, [r7, #12]
   2cda0:	0052      	lsls	r2, r2, #1
   2cda2:	5ad3      	ldrh	r3, [r2, r3]
   2cda4:	1dba      	adds	r2, r7, #6
   2cda6:	8812      	ldrh	r2, [r2, #0]
   2cda8:	429a      	cmp	r2, r3
   2cdaa:	d1ee      	bne.n	2cd8a <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
   2cdac:	4b08      	ldr	r3, [pc, #32]	; (2cdd0 <ff_wtoupper+0x58>)
   2cdae:	68fa      	ldr	r2, [r7, #12]
   2cdb0:	0052      	lsls	r2, r2, #1
   2cdb2:	5ad3      	ldrh	r3, [r2, r3]
   2cdb4:	2b00      	cmp	r3, #0
   2cdb6:	d004      	beq.n	2cdc2 <ff_wtoupper+0x4a>
   2cdb8:	4b06      	ldr	r3, [pc, #24]	; (2cdd4 <ff_wtoupper+0x5c>)
   2cdba:	68fa      	ldr	r2, [r7, #12]
   2cdbc:	0052      	lsls	r2, r2, #1
   2cdbe:	5ad3      	ldrh	r3, [r2, r3]
   2cdc0:	e001      	b.n	2cdc6 <ff_wtoupper+0x4e>
   2cdc2:	1dbb      	adds	r3, r7, #6
   2cdc4:	881b      	ldrh	r3, [r3, #0]
}
   2cdc6:	0018      	movs	r0, r3
   2cdc8:	46bd      	mov	sp, r7
   2cdca:	b004      	add	sp, #16
   2cdcc:	bd80      	pop	{r7, pc}
   2cdce:	46c0      	nop			; (mov r8, r8)
   2cdd0:	00037c6c 	.word	0x00037c6c
   2cdd4:	00037e4c 	.word	0x00037e4c

0002cdd8 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2cdd8:	b580      	push	{r7, lr}
   2cdda:	b084      	sub	sp, #16
   2cddc:	af00      	add	r7, sp, #0
   2cdde:	60f8      	str	r0, [r7, #12]
   2cde0:	60b9      	str	r1, [r7, #8]
   2cde2:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2cde4:	68fb      	ldr	r3, [r7, #12]
   2cde6:	68ba      	ldr	r2, [r7, #8]
   2cde8:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2cdea:	68fb      	ldr	r3, [r7, #12]
   2cdec:	687a      	ldr	r2, [r7, #4]
   2cdee:	601a      	str	r2, [r3, #0]
}
   2cdf0:	46c0      	nop			; (mov r8, r8)
   2cdf2:	46bd      	mov	sp, r7
   2cdf4:	b004      	add	sp, #16
   2cdf6:	bd80      	pop	{r7, pc}

0002cdf8 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2cdf8:	b580      	push	{r7, lr}
   2cdfa:	b082      	sub	sp, #8
   2cdfc:	af00      	add	r7, sp, #0
   2cdfe:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2ce00:	687b      	ldr	r3, [r7, #4]
   2ce02:	681b      	ldr	r3, [r3, #0]
   2ce04:	4a07      	ldr	r2, [pc, #28]	; (2ce24 <getNextPacketId+0x2c>)
   2ce06:	4293      	cmp	r3, r2
   2ce08:	d003      	beq.n	2ce12 <getNextPacketId+0x1a>
   2ce0a:	687b      	ldr	r3, [r7, #4]
   2ce0c:	681b      	ldr	r3, [r3, #0]
   2ce0e:	1c5a      	adds	r2, r3, #1
   2ce10:	e000      	b.n	2ce14 <getNextPacketId+0x1c>
   2ce12:	2201      	movs	r2, #1
   2ce14:	687b      	ldr	r3, [r7, #4]
   2ce16:	601a      	str	r2, [r3, #0]
   2ce18:	687b      	ldr	r3, [r7, #4]
   2ce1a:	681b      	ldr	r3, [r3, #0]
}
   2ce1c:	0018      	movs	r0, r3
   2ce1e:	46bd      	mov	sp, r7
   2ce20:	b002      	add	sp, #8
   2ce22:	bd80      	pop	{r7, pc}
   2ce24:	0000ffff 	.word	0x0000ffff

0002ce28 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2ce28:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ce2a:	b087      	sub	sp, #28
   2ce2c:	af00      	add	r7, sp, #0
   2ce2e:	60f8      	str	r0, [r7, #12]
   2ce30:	60b9      	str	r1, [r7, #8]
   2ce32:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2ce34:	2301      	movs	r3, #1
   2ce36:	425b      	negs	r3, r3
   2ce38:	617b      	str	r3, [r7, #20]
        sent = 0;
   2ce3a:	2300      	movs	r3, #0
   2ce3c:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2ce3e:	e01a      	b.n	2ce76 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2ce40:	68fb      	ldr	r3, [r7, #12]
   2ce42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2ce44:	68dc      	ldr	r4, [r3, #12]
   2ce46:	68fb      	ldr	r3, [r7, #12]
   2ce48:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2ce4a:	68fb      	ldr	r3, [r7, #12]
   2ce4c:	691a      	ldr	r2, [r3, #16]
   2ce4e:	693b      	ldr	r3, [r7, #16]
   2ce50:	18d6      	adds	r6, r2, r3
   2ce52:	687b      	ldr	r3, [r7, #4]
   2ce54:	0018      	movs	r0, r3
   2ce56:	4b1a      	ldr	r3, [pc, #104]	; (2cec0 <sendPacket+0x98>)
   2ce58:	4798      	blx	r3
   2ce5a:	0003      	movs	r3, r0
   2ce5c:	68ba      	ldr	r2, [r7, #8]
   2ce5e:	0031      	movs	r1, r6
   2ce60:	0028      	movs	r0, r5
   2ce62:	47a0      	blx	r4
   2ce64:	0003      	movs	r3, r0
   2ce66:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2ce68:	697b      	ldr	r3, [r7, #20]
   2ce6a:	2b00      	cmp	r3, #0
   2ce6c:	db0e      	blt.n	2ce8c <sendPacket+0x64>
            break;
        sent += rc;
   2ce6e:	693a      	ldr	r2, [r7, #16]
   2ce70:	697b      	ldr	r3, [r7, #20]
   2ce72:	18d3      	adds	r3, r2, r3
   2ce74:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2ce76:	693a      	ldr	r2, [r7, #16]
   2ce78:	68bb      	ldr	r3, [r7, #8]
   2ce7a:	429a      	cmp	r2, r3
   2ce7c:	da07      	bge.n	2ce8e <sendPacket+0x66>
   2ce7e:	687b      	ldr	r3, [r7, #4]
   2ce80:	0018      	movs	r0, r3
   2ce82:	4b10      	ldr	r3, [pc, #64]	; (2cec4 <sendPacket+0x9c>)
   2ce84:	4798      	blx	r3
   2ce86:	1e03      	subs	r3, r0, #0
   2ce88:	d0da      	beq.n	2ce40 <sendPacket+0x18>
   2ce8a:	e000      	b.n	2ce8e <sendPacket+0x66>
            break;
   2ce8c:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2ce8e:	693a      	ldr	r2, [r7, #16]
   2ce90:	68bb      	ldr	r3, [r7, #8]
   2ce92:	429a      	cmp	r2, r3
   2ce94:	d10b      	bne.n	2ceae <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2ce96:	68fb      	ldr	r3, [r7, #12]
   2ce98:	3354      	adds	r3, #84	; 0x54
   2ce9a:	001a      	movs	r2, r3
   2ce9c:	68fb      	ldr	r3, [r7, #12]
   2ce9e:	699b      	ldr	r3, [r3, #24]
   2cea0:	0019      	movs	r1, r3
   2cea2:	0010      	movs	r0, r2
   2cea4:	4b08      	ldr	r3, [pc, #32]	; (2cec8 <sendPacket+0xa0>)
   2cea6:	4798      	blx	r3
        rc = SUCCESS;
   2cea8:	2300      	movs	r3, #0
   2ceaa:	617b      	str	r3, [r7, #20]
   2ceac:	e002      	b.n	2ceb4 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2ceae:	2301      	movs	r3, #1
   2ceb0:	425b      	negs	r3, r3
   2ceb2:	617b      	str	r3, [r7, #20]
    return rc;
   2ceb4:	697b      	ldr	r3, [r7, #20]
}
   2ceb6:	0018      	movs	r0, r3
   2ceb8:	46bd      	mov	sp, r7
   2ceba:	b007      	add	sp, #28
   2cebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cebe:	46c0      	nop			; (mov r8, r8)
   2cec0:	0002dc89 	.word	0x0002dc89
   2cec4:	0002dc0d 	.word	0x0002dc0d
   2cec8:	0002dc61 	.word	0x0002dc61

0002cecc <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2cecc:	b580      	push	{r7, lr}
   2cece:	b086      	sub	sp, #24
   2ced0:	af00      	add	r7, sp, #0
   2ced2:	60f8      	str	r0, [r7, #12]
   2ced4:	60b9      	str	r1, [r7, #8]
   2ced6:	607a      	str	r2, [r7, #4]
   2ced8:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2ceda:	68fb      	ldr	r3, [r7, #12]
   2cedc:	68ba      	ldr	r2, [r7, #8]
   2cede:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2cee0:	2300      	movs	r3, #0
   2cee2:	617b      	str	r3, [r7, #20]
   2cee4:	e00a      	b.n	2cefc <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2cee6:	68fa      	ldr	r2, [r7, #12]
   2cee8:	697b      	ldr	r3, [r7, #20]
   2ceea:	3304      	adds	r3, #4
   2ceec:	00db      	lsls	r3, r3, #3
   2ceee:	18d3      	adds	r3, r2, r3
   2cef0:	3304      	adds	r3, #4
   2cef2:	2200      	movs	r2, #0
   2cef4:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2cef6:	697b      	ldr	r3, [r7, #20]
   2cef8:	3301      	adds	r3, #1
   2cefa:	617b      	str	r3, [r7, #20]
   2cefc:	697b      	ldr	r3, [r7, #20]
   2cefe:	2b04      	cmp	r3, #4
   2cf00:	ddf1      	ble.n	2cee6 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2cf02:	68fb      	ldr	r3, [r7, #12]
   2cf04:	687a      	ldr	r2, [r7, #4]
   2cf06:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2cf08:	68fb      	ldr	r3, [r7, #12]
   2cf0a:	683a      	ldr	r2, [r7, #0]
   2cf0c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2cf0e:	68fb      	ldr	r3, [r7, #12]
   2cf10:	6a3a      	ldr	r2, [r7, #32]
   2cf12:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2cf14:	68fb      	ldr	r3, [r7, #12]
   2cf16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2cf18:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2cf1a:	68fb      	ldr	r3, [r7, #12]
   2cf1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2cf1e:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2cf20:	68fb      	ldr	r3, [r7, #12]
   2cf22:	2200      	movs	r2, #0
   2cf24:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2cf26:	68fb      	ldr	r3, [r7, #12]
   2cf28:	2200      	movs	r2, #0
   2cf2a:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2cf2c:	68fb      	ldr	r3, [r7, #12]
   2cf2e:	2200      	movs	r2, #0
   2cf30:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2cf32:	68fb      	ldr	r3, [r7, #12]
   2cf34:	2201      	movs	r2, #1
   2cf36:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2cf38:	68fb      	ldr	r3, [r7, #12]
   2cf3a:	3354      	adds	r3, #84	; 0x54
   2cf3c:	0018      	movs	r0, r3
   2cf3e:	4b03      	ldr	r3, [pc, #12]	; (2cf4c <MQTTClientInit+0x80>)
   2cf40:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2cf42:	46c0      	nop			; (mov r8, r8)
   2cf44:	46bd      	mov	sp, r7
   2cf46:	b006      	add	sp, #24
   2cf48:	bd80      	pop	{r7, pc}
   2cf4a:	46c0      	nop			; (mov r8, r8)
   2cf4c:	0002dcb1 	.word	0x0002dcb1

0002cf50 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2cf50:	b590      	push	{r4, r7, lr}
   2cf52:	b08b      	sub	sp, #44	; 0x2c
   2cf54:	af00      	add	r7, sp, #0
   2cf56:	60f8      	str	r0, [r7, #12]
   2cf58:	60b9      	str	r1, [r7, #8]
   2cf5a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2cf5c:	2301      	movs	r3, #1
   2cf5e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2cf60:	2300      	movs	r3, #0
   2cf62:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2cf64:	2304      	movs	r3, #4
   2cf66:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2cf68:	68bb      	ldr	r3, [r7, #8]
   2cf6a:	2200      	movs	r2, #0
   2cf6c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2cf6e:	2301      	movs	r3, #1
   2cf70:	425b      	negs	r3, r3
   2cf72:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2cf74:	6a3b      	ldr	r3, [r7, #32]
   2cf76:	3301      	adds	r3, #1
   2cf78:	623b      	str	r3, [r7, #32]
   2cf7a:	6a3a      	ldr	r2, [r7, #32]
   2cf7c:	69fb      	ldr	r3, [r7, #28]
   2cf7e:	429a      	cmp	r2, r3
   2cf80:	dd03      	ble.n	2cf8a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2cf82:	2301      	movs	r3, #1
   2cf84:	425b      	negs	r3, r3
   2cf86:	61bb      	str	r3, [r7, #24]
            goto exit;
   2cf88:	e026      	b.n	2cfd8 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2cf8a:	68fb      	ldr	r3, [r7, #12]
   2cf8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2cf8e:	689c      	ldr	r4, [r3, #8]
   2cf90:	68fb      	ldr	r3, [r7, #12]
   2cf92:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2cf94:	687b      	ldr	r3, [r7, #4]
   2cf96:	2217      	movs	r2, #23
   2cf98:	18b9      	adds	r1, r7, r2
   2cf9a:	2201      	movs	r2, #1
   2cf9c:	47a0      	blx	r4
   2cf9e:	0003      	movs	r3, r0
   2cfa0:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2cfa2:	69bb      	ldr	r3, [r7, #24]
   2cfa4:	2b01      	cmp	r3, #1
   2cfa6:	d116      	bne.n	2cfd6 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2cfa8:	68bb      	ldr	r3, [r7, #8]
   2cfaa:	681a      	ldr	r2, [r3, #0]
   2cfac:	2317      	movs	r3, #23
   2cfae:	18fb      	adds	r3, r7, r3
   2cfb0:	781b      	ldrb	r3, [r3, #0]
   2cfb2:	0019      	movs	r1, r3
   2cfb4:	237f      	movs	r3, #127	; 0x7f
   2cfb6:	400b      	ands	r3, r1
   2cfb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2cfba:	434b      	muls	r3, r1
   2cfbc:	18d2      	adds	r2, r2, r3
   2cfbe:	68bb      	ldr	r3, [r7, #8]
   2cfc0:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2cfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2cfc4:	01db      	lsls	r3, r3, #7
   2cfc6:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2cfc8:	2317      	movs	r3, #23
   2cfca:	18fb      	adds	r3, r7, r3
   2cfcc:	781b      	ldrb	r3, [r3, #0]
   2cfce:	b25b      	sxtb	r3, r3
   2cfd0:	2b00      	cmp	r3, #0
   2cfd2:	dbcc      	blt.n	2cf6e <decodePacket+0x1e>
   2cfd4:	e000      	b.n	2cfd8 <decodePacket+0x88>
            goto exit;
   2cfd6:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2cfd8:	6a3b      	ldr	r3, [r7, #32]
}
   2cfda:	0018      	movs	r0, r3
   2cfdc:	46bd      	mov	sp, r7
   2cfde:	b00b      	add	sp, #44	; 0x2c
   2cfe0:	bd90      	pop	{r4, r7, pc}
	...

0002cfe4 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2cfe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cfe6:	46c6      	mov	lr, r8
   2cfe8:	b500      	push	{lr}
   2cfea:	b086      	sub	sp, #24
   2cfec:	af00      	add	r7, sp, #0
   2cfee:	6078      	str	r0, [r7, #4]
   2cff0:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2cff2:	2301      	movs	r3, #1
   2cff4:	425b      	negs	r3, r3
   2cff6:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2cff8:	2300      	movs	r3, #0
   2cffa:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2cffc:	2300      	movs	r3, #0
   2cffe:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2d000:	2300      	movs	r3, #0
   2d002:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2d004:	687b      	ldr	r3, [r7, #4]
   2d006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d008:	689c      	ldr	r4, [r3, #8]
   2d00a:	687b      	ldr	r3, [r7, #4]
   2d00c:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d00e:	687b      	ldr	r3, [r7, #4]
   2d010:	695e      	ldr	r6, [r3, #20]
   2d012:	683b      	ldr	r3, [r7, #0]
   2d014:	0018      	movs	r0, r3
   2d016:	4b2b      	ldr	r3, [pc, #172]	; (2d0c4 <readPacket+0xe0>)
   2d018:	4798      	blx	r3
   2d01a:	0003      	movs	r3, r0
   2d01c:	2201      	movs	r2, #1
   2d01e:	0031      	movs	r1, r6
   2d020:	0028      	movs	r0, r5
   2d022:	47a0      	blx	r4
   2d024:	0003      	movs	r3, r0
   2d026:	2b01      	cmp	r3, #1
   2d028:	d141      	bne.n	2d0ae <readPacket+0xca>
        goto exit;

    len = 1;
   2d02a:	2301      	movs	r3, #1
   2d02c:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2d02e:	683b      	ldr	r3, [r7, #0]
   2d030:	0018      	movs	r0, r3
   2d032:	4b24      	ldr	r3, [pc, #144]	; (2d0c4 <readPacket+0xe0>)
   2d034:	4798      	blx	r3
   2d036:	0002      	movs	r2, r0
   2d038:	2308      	movs	r3, #8
   2d03a:	18f9      	adds	r1, r7, r3
   2d03c:	687b      	ldr	r3, [r7, #4]
   2d03e:	0018      	movs	r0, r3
   2d040:	4b21      	ldr	r3, [pc, #132]	; (2d0c8 <readPacket+0xe4>)
   2d042:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2d044:	687b      	ldr	r3, [r7, #4]
   2d046:	695b      	ldr	r3, [r3, #20]
   2d048:	3301      	adds	r3, #1
   2d04a:	68ba      	ldr	r2, [r7, #8]
   2d04c:	0011      	movs	r1, r2
   2d04e:	0018      	movs	r0, r3
   2d050:	4b1e      	ldr	r3, [pc, #120]	; (2d0cc <readPacket+0xe8>)
   2d052:	4798      	blx	r3
   2d054:	0002      	movs	r2, r0
   2d056:	693b      	ldr	r3, [r7, #16]
   2d058:	189b      	adds	r3, r3, r2
   2d05a:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2d05c:	68bb      	ldr	r3, [r7, #8]
   2d05e:	2b00      	cmp	r3, #0
   2d060:	dd17      	ble.n	2d092 <readPacket+0xae>
   2d062:	687b      	ldr	r3, [r7, #4]
   2d064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2d066:	689c      	ldr	r4, [r3, #8]
   2d068:	687b      	ldr	r3, [r7, #4]
   2d06a:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2d06c:	687b      	ldr	r3, [r7, #4]
   2d06e:	695a      	ldr	r2, [r3, #20]
   2d070:	693b      	ldr	r3, [r7, #16]
   2d072:	18d6      	adds	r6, r2, r3
   2d074:	68bb      	ldr	r3, [r7, #8]
   2d076:	4698      	mov	r8, r3
   2d078:	683b      	ldr	r3, [r7, #0]
   2d07a:	0018      	movs	r0, r3
   2d07c:	4b11      	ldr	r3, [pc, #68]	; (2d0c4 <readPacket+0xe0>)
   2d07e:	4798      	blx	r3
   2d080:	0003      	movs	r3, r0
   2d082:	4642      	mov	r2, r8
   2d084:	0031      	movs	r1, r6
   2d086:	0028      	movs	r0, r5
   2d088:	47a0      	blx	r4
   2d08a:	0002      	movs	r2, r0
   2d08c:	68bb      	ldr	r3, [r7, #8]
   2d08e:	429a      	cmp	r2, r3
   2d090:	d10f      	bne.n	2d0b2 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2d092:	687b      	ldr	r3, [r7, #4]
   2d094:	695b      	ldr	r3, [r3, #20]
   2d096:	781a      	ldrb	r2, [r3, #0]
   2d098:	230c      	movs	r3, #12
   2d09a:	18fb      	adds	r3, r7, r3
   2d09c:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2d09e:	230c      	movs	r3, #12
   2d0a0:	18fb      	adds	r3, r7, r3
   2d0a2:	781b      	ldrb	r3, [r3, #0]
   2d0a4:	061b      	lsls	r3, r3, #24
   2d0a6:	0f1b      	lsrs	r3, r3, #28
   2d0a8:	b2db      	uxtb	r3, r3
   2d0aa:	617b      	str	r3, [r7, #20]
   2d0ac:	e002      	b.n	2d0b4 <readPacket+0xd0>
        goto exit;
   2d0ae:	46c0      	nop			; (mov r8, r8)
   2d0b0:	e000      	b.n	2d0b4 <readPacket+0xd0>
        goto exit;
   2d0b2:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2d0b4:	697b      	ldr	r3, [r7, #20]
}
   2d0b6:	0018      	movs	r0, r3
   2d0b8:	46bd      	mov	sp, r7
   2d0ba:	b006      	add	sp, #24
   2d0bc:	bc04      	pop	{r2}
   2d0be:	4690      	mov	r8, r2
   2d0c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d0c2:	46c0      	nop			; (mov r8, r8)
   2d0c4:	0002dc89 	.word	0x0002dc89
   2d0c8:	0002cf51 	.word	0x0002cf51
   2d0cc:	0002ea61 	.word	0x0002ea61

0002d0d0 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2d0d0:	b580      	push	{r7, lr}
   2d0d2:	b086      	sub	sp, #24
   2d0d4:	af00      	add	r7, sp, #0
   2d0d6:	6078      	str	r0, [r7, #4]
   2d0d8:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2d0da:	687b      	ldr	r3, [r7, #4]
   2d0dc:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2d0de:	683b      	ldr	r3, [r7, #0]
   2d0e0:	689b      	ldr	r3, [r3, #8]
   2d0e2:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2d0e4:	683b      	ldr	r3, [r7, #0]
   2d0e6:	685b      	ldr	r3, [r3, #4]
   2d0e8:	001a      	movs	r2, r3
   2d0ea:	693b      	ldr	r3, [r7, #16]
   2d0ec:	189b      	adds	r3, r3, r2
   2d0ee:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2d0f0:	e039      	b.n	2d166 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2d0f2:	693b      	ldr	r3, [r7, #16]
   2d0f4:	781b      	ldrb	r3, [r3, #0]
   2d0f6:	2b2f      	cmp	r3, #47	; 0x2f
   2d0f8:	d103      	bne.n	2d102 <isTopicMatched+0x32>
   2d0fa:	697b      	ldr	r3, [r7, #20]
   2d0fc:	781b      	ldrb	r3, [r3, #0]
   2d0fe:	2b2f      	cmp	r3, #47	; 0x2f
   2d100:	d13a      	bne.n	2d178 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2d102:	697b      	ldr	r3, [r7, #20]
   2d104:	781b      	ldrb	r3, [r3, #0]
   2d106:	2b2b      	cmp	r3, #43	; 0x2b
   2d108:	d009      	beq.n	2d11e <isTopicMatched+0x4e>
   2d10a:	697b      	ldr	r3, [r7, #20]
   2d10c:	781b      	ldrb	r3, [r3, #0]
   2d10e:	2b23      	cmp	r3, #35	; 0x23
   2d110:	d005      	beq.n	2d11e <isTopicMatched+0x4e>
   2d112:	697b      	ldr	r3, [r7, #20]
   2d114:	781a      	ldrb	r2, [r3, #0]
   2d116:	693b      	ldr	r3, [r7, #16]
   2d118:	781b      	ldrb	r3, [r3, #0]
   2d11a:	429a      	cmp	r2, r3
   2d11c:	d12e      	bne.n	2d17c <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2d11e:	697b      	ldr	r3, [r7, #20]
   2d120:	781b      	ldrb	r3, [r3, #0]
   2d122:	2b2b      	cmp	r3, #43	; 0x2b
   2d124:	d112      	bne.n	2d14c <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2d126:	693b      	ldr	r3, [r7, #16]
   2d128:	3301      	adds	r3, #1
   2d12a:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2d12c:	e005      	b.n	2d13a <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2d12e:	693b      	ldr	r3, [r7, #16]
   2d130:	3301      	adds	r3, #1
   2d132:	613b      	str	r3, [r7, #16]
   2d134:	693b      	ldr	r3, [r7, #16]
   2d136:	3301      	adds	r3, #1
   2d138:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2d13a:	68fa      	ldr	r2, [r7, #12]
   2d13c:	68bb      	ldr	r3, [r7, #8]
   2d13e:	429a      	cmp	r2, r3
   2d140:	d20b      	bcs.n	2d15a <isTopicMatched+0x8a>
   2d142:	68fb      	ldr	r3, [r7, #12]
   2d144:	781b      	ldrb	r3, [r3, #0]
   2d146:	2b2f      	cmp	r3, #47	; 0x2f
   2d148:	d1f1      	bne.n	2d12e <isTopicMatched+0x5e>
   2d14a:	e006      	b.n	2d15a <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2d14c:	697b      	ldr	r3, [r7, #20]
   2d14e:	781b      	ldrb	r3, [r3, #0]
   2d150:	2b23      	cmp	r3, #35	; 0x23
   2d152:	d102      	bne.n	2d15a <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2d154:	68bb      	ldr	r3, [r7, #8]
   2d156:	3b01      	subs	r3, #1
   2d158:	613b      	str	r3, [r7, #16]
        curf++;
   2d15a:	697b      	ldr	r3, [r7, #20]
   2d15c:	3301      	adds	r3, #1
   2d15e:	617b      	str	r3, [r7, #20]
        curn++;
   2d160:	693b      	ldr	r3, [r7, #16]
   2d162:	3301      	adds	r3, #1
   2d164:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2d166:	697b      	ldr	r3, [r7, #20]
   2d168:	781b      	ldrb	r3, [r3, #0]
   2d16a:	2b00      	cmp	r3, #0
   2d16c:	d007      	beq.n	2d17e <isTopicMatched+0xae>
   2d16e:	693a      	ldr	r2, [r7, #16]
   2d170:	68bb      	ldr	r3, [r7, #8]
   2d172:	429a      	cmp	r2, r3
   2d174:	d3bd      	bcc.n	2d0f2 <isTopicMatched+0x22>
   2d176:	e002      	b.n	2d17e <isTopicMatched+0xae>
            break;
   2d178:	46c0      	nop			; (mov r8, r8)
   2d17a:	e000      	b.n	2d17e <isTopicMatched+0xae>
            break;
   2d17c:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2d17e:	693a      	ldr	r2, [r7, #16]
   2d180:	68bb      	ldr	r3, [r7, #8]
   2d182:	429a      	cmp	r2, r3
   2d184:	d105      	bne.n	2d192 <isTopicMatched+0xc2>
   2d186:	697b      	ldr	r3, [r7, #20]
   2d188:	781b      	ldrb	r3, [r3, #0]
   2d18a:	2b00      	cmp	r3, #0
   2d18c:	d101      	bne.n	2d192 <isTopicMatched+0xc2>
   2d18e:	2301      	movs	r3, #1
   2d190:	e000      	b.n	2d194 <isTopicMatched+0xc4>
   2d192:	2300      	movs	r3, #0
   2d194:	b2db      	uxtb	r3, r3
}
   2d196:	0018      	movs	r0, r3
   2d198:	46bd      	mov	sp, r7
   2d19a:	b006      	add	sp, #24
   2d19c:	bd80      	pop	{r7, pc}
	...

0002d1a0 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2d1a0:	b580      	push	{r7, lr}
   2d1a2:	b08a      	sub	sp, #40	; 0x28
   2d1a4:	af00      	add	r7, sp, #0
   2d1a6:	60f8      	str	r0, [r7, #12]
   2d1a8:	60b9      	str	r1, [r7, #8]
   2d1aa:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2d1ac:	2301      	movs	r3, #1
   2d1ae:	425b      	negs	r3, r3
   2d1b0:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d1b2:	2300      	movs	r3, #0
   2d1b4:	627b      	str	r3, [r7, #36]	; 0x24
   2d1b6:	e044      	b.n	2d242 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2d1b8:	68fa      	ldr	r2, [r7, #12]
   2d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d1bc:	3304      	adds	r3, #4
   2d1be:	00db      	lsls	r3, r3, #3
   2d1c0:	18d3      	adds	r3, r2, r3
   2d1c2:	3304      	adds	r3, #4
   2d1c4:	681b      	ldr	r3, [r3, #0]
   2d1c6:	2b00      	cmp	r3, #0
   2d1c8:	d038      	beq.n	2d23c <deliverMessage+0x9c>
   2d1ca:	68fa      	ldr	r2, [r7, #12]
   2d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d1ce:	3304      	adds	r3, #4
   2d1d0:	00db      	lsls	r3, r3, #3
   2d1d2:	18d3      	adds	r3, r2, r3
   2d1d4:	3304      	adds	r3, #4
   2d1d6:	681a      	ldr	r2, [r3, #0]
   2d1d8:	68bb      	ldr	r3, [r7, #8]
   2d1da:	0011      	movs	r1, r2
   2d1dc:	0018      	movs	r0, r3
   2d1de:	4b28      	ldr	r3, [pc, #160]	; (2d280 <deliverMessage+0xe0>)
   2d1e0:	4798      	blx	r3
   2d1e2:	1e03      	subs	r3, r0, #0
   2d1e4:	d10d      	bne.n	2d202 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2d1e6:	68fa      	ldr	r2, [r7, #12]
   2d1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d1ea:	3304      	adds	r3, #4
   2d1ec:	00db      	lsls	r3, r3, #3
   2d1ee:	18d3      	adds	r3, r2, r3
   2d1f0:	3304      	adds	r3, #4
   2d1f2:	681b      	ldr	r3, [r3, #0]
   2d1f4:	68ba      	ldr	r2, [r7, #8]
   2d1f6:	0011      	movs	r1, r2
   2d1f8:	0018      	movs	r0, r3
   2d1fa:	4b22      	ldr	r3, [pc, #136]	; (2d284 <deliverMessage+0xe4>)
   2d1fc:	4798      	blx	r3
   2d1fe:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2d200:	d01c      	beq.n	2d23c <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2d202:	68fa      	ldr	r2, [r7, #12]
   2d204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d206:	3304      	adds	r3, #4
   2d208:	00db      	lsls	r3, r3, #3
   2d20a:	18d3      	adds	r3, r2, r3
   2d20c:	3308      	adds	r3, #8
   2d20e:	681b      	ldr	r3, [r3, #0]
   2d210:	2b00      	cmp	r3, #0
   2d212:	d013      	beq.n	2d23c <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2d214:	687a      	ldr	r2, [r7, #4]
   2d216:	68b9      	ldr	r1, [r7, #8]
   2d218:	2318      	movs	r3, #24
   2d21a:	18fb      	adds	r3, r7, r3
   2d21c:	0018      	movs	r0, r3
   2d21e:	4b1a      	ldr	r3, [pc, #104]	; (2d288 <deliverMessage+0xe8>)
   2d220:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2d222:	68fa      	ldr	r2, [r7, #12]
   2d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d226:	3304      	adds	r3, #4
   2d228:	00db      	lsls	r3, r3, #3
   2d22a:	18d3      	adds	r3, r2, r3
   2d22c:	3308      	adds	r3, #8
   2d22e:	681b      	ldr	r3, [r3, #0]
   2d230:	2218      	movs	r2, #24
   2d232:	18ba      	adds	r2, r7, r2
   2d234:	0010      	movs	r0, r2
   2d236:	4798      	blx	r3
                rc = SUCCESS;
   2d238:	2300      	movs	r3, #0
   2d23a:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d23e:	3301      	adds	r3, #1
   2d240:	627b      	str	r3, [r7, #36]	; 0x24
   2d242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d244:	2b04      	cmp	r3, #4
   2d246:	ddb7      	ble.n	2d1b8 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2d248:	6a3b      	ldr	r3, [r7, #32]
   2d24a:	3301      	adds	r3, #1
   2d24c:	d112      	bne.n	2d274 <deliverMessage+0xd4>
   2d24e:	68fb      	ldr	r3, [r7, #12]
   2d250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d252:	2b00      	cmp	r3, #0
   2d254:	d00e      	beq.n	2d274 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2d256:	687a      	ldr	r2, [r7, #4]
   2d258:	68b9      	ldr	r1, [r7, #8]
   2d25a:	2310      	movs	r3, #16
   2d25c:	18fb      	adds	r3, r7, r3
   2d25e:	0018      	movs	r0, r3
   2d260:	4b09      	ldr	r3, [pc, #36]	; (2d288 <deliverMessage+0xe8>)
   2d262:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2d264:	68fb      	ldr	r3, [r7, #12]
   2d266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2d268:	2210      	movs	r2, #16
   2d26a:	18ba      	adds	r2, r7, r2
   2d26c:	0010      	movs	r0, r2
   2d26e:	4798      	blx	r3
        rc = SUCCESS;
   2d270:	2300      	movs	r3, #0
   2d272:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2d274:	6a3b      	ldr	r3, [r7, #32]
}
   2d276:	0018      	movs	r0, r3
   2d278:	46bd      	mov	sp, r7
   2d27a:	b00a      	add	sp, #40	; 0x28
   2d27c:	bd80      	pop	{r7, pc}
   2d27e:	46c0      	nop			; (mov r8, r8)
   2d280:	0002ee75 	.word	0x0002ee75
   2d284:	0002d0d1 	.word	0x0002d0d1
   2d288:	0002cdd9 	.word	0x0002cdd9

0002d28c <keepalive>:


int keepalive(MQTTClient* c)
{
   2d28c:	b580      	push	{r7, lr}
   2d28e:	b088      	sub	sp, #32
   2d290:	af00      	add	r7, sp, #0
   2d292:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2d294:	2301      	movs	r3, #1
   2d296:	425b      	negs	r3, r3
   2d298:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2d29a:	687b      	ldr	r3, [r7, #4]
   2d29c:	699b      	ldr	r3, [r3, #24]
   2d29e:	2b00      	cmp	r3, #0
   2d2a0:	d102      	bne.n	2d2a8 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2d2a2:	2300      	movs	r3, #0
   2d2a4:	61fb      	str	r3, [r7, #28]
        goto exit;
   2d2a6:	e033      	b.n	2d310 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2d2a8:	687b      	ldr	r3, [r7, #4]
   2d2aa:	3354      	adds	r3, #84	; 0x54
   2d2ac:	0018      	movs	r0, r3
   2d2ae:	4b1b      	ldr	r3, [pc, #108]	; (2d31c <keepalive+0x90>)
   2d2b0:	4798      	blx	r3
   2d2b2:	1e03      	subs	r3, r0, #0
   2d2b4:	d02c      	beq.n	2d310 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2d2b6:	687b      	ldr	r3, [r7, #4]
   2d2b8:	7f1b      	ldrb	r3, [r3, #28]
   2d2ba:	2b00      	cmp	r3, #0
   2d2bc:	d128      	bne.n	2d310 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2d2be:	230c      	movs	r3, #12
   2d2c0:	18fb      	adds	r3, r7, r3
   2d2c2:	0018      	movs	r0, r3
   2d2c4:	4b16      	ldr	r3, [pc, #88]	; (2d320 <keepalive+0x94>)
   2d2c6:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2d2c8:	23fa      	movs	r3, #250	; 0xfa
   2d2ca:	009a      	lsls	r2, r3, #2
   2d2cc:	230c      	movs	r3, #12
   2d2ce:	18fb      	adds	r3, r7, r3
   2d2d0:	0011      	movs	r1, r2
   2d2d2:	0018      	movs	r0, r3
   2d2d4:	4b13      	ldr	r3, [pc, #76]	; (2d324 <keepalive+0x98>)
   2d2d6:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2d2d8:	687b      	ldr	r3, [r7, #4]
   2d2da:	691a      	ldr	r2, [r3, #16]
   2d2dc:	687b      	ldr	r3, [r7, #4]
   2d2de:	689b      	ldr	r3, [r3, #8]
   2d2e0:	0019      	movs	r1, r3
   2d2e2:	0010      	movs	r0, r2
   2d2e4:	4b10      	ldr	r3, [pc, #64]	; (2d328 <keepalive+0x9c>)
   2d2e6:	4798      	blx	r3
   2d2e8:	0003      	movs	r3, r0
   2d2ea:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2d2ec:	69bb      	ldr	r3, [r7, #24]
   2d2ee:	2b00      	cmp	r3, #0
   2d2f0:	dd0e      	ble.n	2d310 <keepalive+0x84>
   2d2f2:	230c      	movs	r3, #12
   2d2f4:	18fa      	adds	r2, r7, r3
   2d2f6:	69b9      	ldr	r1, [r7, #24]
   2d2f8:	687b      	ldr	r3, [r7, #4]
   2d2fa:	0018      	movs	r0, r3
   2d2fc:	4b0b      	ldr	r3, [pc, #44]	; (2d32c <keepalive+0xa0>)
   2d2fe:	4798      	blx	r3
   2d300:	0003      	movs	r3, r0
   2d302:	61fb      	str	r3, [r7, #28]
   2d304:	69fb      	ldr	r3, [r7, #28]
   2d306:	2b00      	cmp	r3, #0
   2d308:	d102      	bne.n	2d310 <keepalive+0x84>
                c->ping_outstanding = 1;
   2d30a:	687b      	ldr	r3, [r7, #4]
   2d30c:	2201      	movs	r2, #1
   2d30e:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2d310:	69fb      	ldr	r3, [r7, #28]
}
   2d312:	0018      	movs	r0, r3
   2d314:	46bd      	mov	sp, r7
   2d316:	b008      	add	sp, #32
   2d318:	bd80      	pop	{r7, pc}
   2d31a:	46c0      	nop			; (mov r8, r8)
   2d31c:	0002dc0d 	.word	0x0002dc0d
   2d320:	0002dcb1 	.word	0x0002dcb1
   2d324:	0002dc39 	.word	0x0002dc39
   2d328:	0002e885 	.word	0x0002e885
   2d32c:	0002ce29 	.word	0x0002ce29

0002d330 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2d330:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d332:	b095      	sub	sp, #84	; 0x54
   2d334:	af06      	add	r7, sp, #24
   2d336:	6078      	str	r0, [r7, #4]
   2d338:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2d33a:	683a      	ldr	r2, [r7, #0]
   2d33c:	687b      	ldr	r3, [r7, #4]
   2d33e:	0011      	movs	r1, r2
   2d340:	0018      	movs	r0, r3
   2d342:	4b70      	ldr	r3, [pc, #448]	; (2d504 <cycle+0x1d4>)
   2d344:	4798      	blx	r3
   2d346:	0002      	movs	r2, r0
   2d348:	232e      	movs	r3, #46	; 0x2e
   2d34a:	18fb      	adds	r3, r7, r3
   2d34c:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2d34e:	2300      	movs	r3, #0
   2d350:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2d352:	2300      	movs	r3, #0
   2d354:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2d356:	232e      	movs	r3, #46	; 0x2e
   2d358:	18fb      	adds	r3, r7, r3
   2d35a:	881b      	ldrh	r3, [r3, #0]
   2d35c:	2b0d      	cmp	r3, #13
   2d35e:	d900      	bls.n	2d362 <cycle+0x32>
   2d360:	e0bd      	b.n	2d4de <cycle+0x1ae>
   2d362:	009a      	lsls	r2, r3, #2
   2d364:	4b68      	ldr	r3, [pc, #416]	; (2d508 <cycle+0x1d8>)
   2d366:	18d3      	adds	r3, r2, r3
   2d368:	681b      	ldr	r3, [r3, #0]
   2d36a:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2d36c:	687b      	ldr	r3, [r7, #4]
   2d36e:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2d370:	687b      	ldr	r3, [r7, #4]
   2d372:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2d374:	001e      	movs	r6, r3
   2d376:	2310      	movs	r3, #16
   2d378:	18fb      	adds	r3, r7, r3
   2d37a:	1d1d      	adds	r5, r3, #4
   2d37c:	2310      	movs	r3, #16
   2d37e:	18fb      	adds	r3, r7, r3
   2d380:	1c5c      	adds	r4, r3, #1
   2d382:	230c      	movs	r3, #12
   2d384:	18f9      	adds	r1, r7, r3
   2d386:	2310      	movs	r3, #16
   2d388:	18fb      	adds	r3, r7, r3
   2d38a:	1c98      	adds	r0, r3, #2
   2d38c:	9604      	str	r6, [sp, #16]
   2d38e:	9203      	str	r2, [sp, #12]
   2d390:	2310      	movs	r3, #16
   2d392:	18fb      	adds	r3, r7, r3
   2d394:	330c      	adds	r3, #12
   2d396:	9302      	str	r3, [sp, #8]
   2d398:	2310      	movs	r3, #16
   2d39a:	18fb      	adds	r3, r7, r3
   2d39c:	3308      	adds	r3, #8
   2d39e:	9301      	str	r3, [sp, #4]
   2d3a0:	2320      	movs	r3, #32
   2d3a2:	18fb      	adds	r3, r7, r3
   2d3a4:	9300      	str	r3, [sp, #0]
   2d3a6:	002b      	movs	r3, r5
   2d3a8:	0022      	movs	r2, r4
   2d3aa:	4c58      	ldr	r4, [pc, #352]	; (2d50c <cycle+0x1dc>)
   2d3ac:	47a0      	blx	r4
   2d3ae:	0003      	movs	r3, r0
   2d3b0:	2b01      	cmp	r3, #1
   2d3b2:	d000      	beq.n	2d3b6 <cycle+0x86>
   2d3b4:	e098      	b.n	2d4e8 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2d3b6:	68fb      	ldr	r3, [r7, #12]
   2d3b8:	b2da      	uxtb	r2, r3
   2d3ba:	2310      	movs	r3, #16
   2d3bc:	18fb      	adds	r3, r7, r3
   2d3be:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2d3c0:	2310      	movs	r3, #16
   2d3c2:	18fa      	adds	r2, r7, r3
   2d3c4:	2320      	movs	r3, #32
   2d3c6:	18f9      	adds	r1, r7, r3
   2d3c8:	687b      	ldr	r3, [r7, #4]
   2d3ca:	0018      	movs	r0, r3
   2d3cc:	4b50      	ldr	r3, [pc, #320]	; (2d510 <cycle+0x1e0>)
   2d3ce:	4798      	blx	r3
            if (msg.qos != QOS0)
   2d3d0:	2310      	movs	r3, #16
   2d3d2:	18fb      	adds	r3, r7, r3
   2d3d4:	781b      	ldrb	r3, [r3, #0]
   2d3d6:	2b00      	cmp	r3, #0
   2d3d8:	d100      	bne.n	2d3dc <cycle+0xac>
   2d3da:	e07d      	b.n	2d4d8 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2d3dc:	2310      	movs	r3, #16
   2d3de:	18fb      	adds	r3, r7, r3
   2d3e0:	781b      	ldrb	r3, [r3, #0]
   2d3e2:	2b01      	cmp	r3, #1
   2d3e4:	d10f      	bne.n	2d406 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2d3e6:	687b      	ldr	r3, [r7, #4]
   2d3e8:	6918      	ldr	r0, [r3, #16]
   2d3ea:	687b      	ldr	r3, [r7, #4]
   2d3ec:	689b      	ldr	r3, [r3, #8]
   2d3ee:	0019      	movs	r1, r3
   2d3f0:	2310      	movs	r3, #16
   2d3f2:	18fb      	adds	r3, r7, r3
   2d3f4:	889b      	ldrh	r3, [r3, #4]
   2d3f6:	9300      	str	r3, [sp, #0]
   2d3f8:	2300      	movs	r3, #0
   2d3fa:	2204      	movs	r2, #4
   2d3fc:	4c45      	ldr	r4, [pc, #276]	; (2d514 <cycle+0x1e4>)
   2d3fe:	47a0      	blx	r4
   2d400:	0003      	movs	r3, r0
   2d402:	637b      	str	r3, [r7, #52]	; 0x34
   2d404:	e013      	b.n	2d42e <cycle+0xfe>
                else if (msg.qos == QOS2)
   2d406:	2310      	movs	r3, #16
   2d408:	18fb      	adds	r3, r7, r3
   2d40a:	781b      	ldrb	r3, [r3, #0]
   2d40c:	2b02      	cmp	r3, #2
   2d40e:	d10e      	bne.n	2d42e <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2d410:	687b      	ldr	r3, [r7, #4]
   2d412:	6918      	ldr	r0, [r3, #16]
   2d414:	687b      	ldr	r3, [r7, #4]
   2d416:	689b      	ldr	r3, [r3, #8]
   2d418:	0019      	movs	r1, r3
   2d41a:	2310      	movs	r3, #16
   2d41c:	18fb      	adds	r3, r7, r3
   2d41e:	889b      	ldrh	r3, [r3, #4]
   2d420:	9300      	str	r3, [sp, #0]
   2d422:	2300      	movs	r3, #0
   2d424:	2205      	movs	r2, #5
   2d426:	4c3b      	ldr	r4, [pc, #236]	; (2d514 <cycle+0x1e4>)
   2d428:	47a0      	blx	r4
   2d42a:	0003      	movs	r3, r0
   2d42c:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d430:	2b00      	cmp	r3, #0
   2d432:	dc03      	bgt.n	2d43c <cycle+0x10c>
                    rc = FAILURE;
   2d434:	2301      	movs	r3, #1
   2d436:	425b      	negs	r3, r3
   2d438:	633b      	str	r3, [r7, #48]	; 0x30
   2d43a:	e007      	b.n	2d44c <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2d43c:	683a      	ldr	r2, [r7, #0]
   2d43e:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2d440:	687b      	ldr	r3, [r7, #4]
   2d442:	0018      	movs	r0, r3
   2d444:	4b34      	ldr	r3, [pc, #208]	; (2d518 <cycle+0x1e8>)
   2d446:	4798      	blx	r3
   2d448:	0003      	movs	r3, r0
   2d44a:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2d44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d44e:	3301      	adds	r3, #1
   2d450:	d142      	bne.n	2d4d8 <cycle+0x1a8>
                    goto exit; // there was a problem
   2d452:	46c0      	nop			; (mov r8, r8)
   2d454:	e049      	b.n	2d4ea <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2d456:	687b      	ldr	r3, [r7, #4]
   2d458:	695c      	ldr	r4, [r3, #20]
   2d45a:	687b      	ldr	r3, [r7, #4]
   2d45c:	68db      	ldr	r3, [r3, #12]
   2d45e:	220a      	movs	r2, #10
   2d460:	18ba      	adds	r2, r7, r2
   2d462:	2109      	movs	r1, #9
   2d464:	1879      	adds	r1, r7, r1
   2d466:	2008      	movs	r0, #8
   2d468:	1838      	adds	r0, r7, r0
   2d46a:	9300      	str	r3, [sp, #0]
   2d46c:	0023      	movs	r3, r4
   2d46e:	4c2b      	ldr	r4, [pc, #172]	; (2d51c <cycle+0x1ec>)
   2d470:	47a0      	blx	r4
   2d472:	0003      	movs	r3, r0
   2d474:	2b01      	cmp	r3, #1
   2d476:	d003      	beq.n	2d480 <cycle+0x150>
                rc = FAILURE;
   2d478:	2301      	movs	r3, #1
   2d47a:	425b      	negs	r3, r3
   2d47c:	633b      	str	r3, [r7, #48]	; 0x30
   2d47e:	e023      	b.n	2d4c8 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2d480:	687b      	ldr	r3, [r7, #4]
   2d482:	6918      	ldr	r0, [r3, #16]
   2d484:	687b      	ldr	r3, [r7, #4]
   2d486:	689b      	ldr	r3, [r3, #8]
   2d488:	0019      	movs	r1, r3
   2d48a:	230a      	movs	r3, #10
   2d48c:	18fb      	adds	r3, r7, r3
   2d48e:	881b      	ldrh	r3, [r3, #0]
   2d490:	9300      	str	r3, [sp, #0]
   2d492:	2300      	movs	r3, #0
   2d494:	2206      	movs	r2, #6
   2d496:	4c1f      	ldr	r4, [pc, #124]	; (2d514 <cycle+0x1e4>)
   2d498:	47a0      	blx	r4
   2d49a:	0003      	movs	r3, r0
   2d49c:	637b      	str	r3, [r7, #52]	; 0x34
   2d49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d4a0:	2b00      	cmp	r3, #0
   2d4a2:	dc03      	bgt.n	2d4ac <cycle+0x17c>
                rc = FAILURE;
   2d4a4:	2301      	movs	r3, #1
   2d4a6:	425b      	negs	r3, r3
   2d4a8:	633b      	str	r3, [r7, #48]	; 0x30
   2d4aa:	e00d      	b.n	2d4c8 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2d4ac:	683a      	ldr	r2, [r7, #0]
   2d4ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2d4b0:	687b      	ldr	r3, [r7, #4]
   2d4b2:	0018      	movs	r0, r3
   2d4b4:	4b18      	ldr	r3, [pc, #96]	; (2d518 <cycle+0x1e8>)
   2d4b6:	4798      	blx	r3
   2d4b8:	0003      	movs	r3, r0
   2d4ba:	633b      	str	r3, [r7, #48]	; 0x30
   2d4bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d4be:	2b00      	cmp	r3, #0
   2d4c0:	d002      	beq.n	2d4c8 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2d4c2:	2301      	movs	r3, #1
   2d4c4:	425b      	negs	r3, r3
   2d4c6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2d4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d4ca:	3301      	adds	r3, #1
   2d4cc:	d106      	bne.n	2d4dc <cycle+0x1ac>
                goto exit; // there was a problem
   2d4ce:	e00c      	b.n	2d4ea <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2d4d0:	687b      	ldr	r3, [r7, #4]
   2d4d2:	2200      	movs	r2, #0
   2d4d4:	771a      	strb	r2, [r3, #28]
            break;
   2d4d6:	e002      	b.n	2d4de <cycle+0x1ae>
            break;
   2d4d8:	46c0      	nop			; (mov r8, r8)
   2d4da:	e000      	b.n	2d4de <cycle+0x1ae>
            break;
   2d4dc:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2d4de:	687b      	ldr	r3, [r7, #4]
   2d4e0:	0018      	movs	r0, r3
   2d4e2:	4b0f      	ldr	r3, [pc, #60]	; (2d520 <cycle+0x1f0>)
   2d4e4:	4798      	blx	r3
   2d4e6:	e000      	b.n	2d4ea <cycle+0x1ba>
                goto exit;
   2d4e8:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2d4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d4ec:	2b00      	cmp	r3, #0
   2d4ee:	d103      	bne.n	2d4f8 <cycle+0x1c8>
        rc = packet_type;
   2d4f0:	232e      	movs	r3, #46	; 0x2e
   2d4f2:	18fb      	adds	r3, r7, r3
   2d4f4:	881b      	ldrh	r3, [r3, #0]
   2d4f6:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2d4fa:	0018      	movs	r0, r3
   2d4fc:	46bd      	mov	sp, r7
   2d4fe:	b00f      	add	sp, #60	; 0x3c
   2d500:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2d502:	46c0      	nop			; (mov r8, r8)
   2d504:	0002cfe5 	.word	0x0002cfe5
   2d508:	0003802c 	.word	0x0003802c
   2d50c:	0002e8a9 	.word	0x0002e8a9
   2d510:	0002d1a1 	.word	0x0002d1a1
   2d514:	0002f0a1 	.word	0x0002f0a1
   2d518:	0002ce29 	.word	0x0002ce29
   2d51c:	0002e9ad 	.word	0x0002e9ad
   2d520:	0002d28d 	.word	0x0002d28d

0002d524 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2d524:	b580      	push	{r7, lr}
   2d526:	b086      	sub	sp, #24
   2d528:	af00      	add	r7, sp, #0
   2d52a:	6078      	str	r0, [r7, #4]
   2d52c:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2d52e:	2300      	movs	r3, #0
   2d530:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2d532:	2308      	movs	r3, #8
   2d534:	18fb      	adds	r3, r7, r3
   2d536:	0018      	movs	r0, r3
   2d538:	4b11      	ldr	r3, [pc, #68]	; (2d580 <MQTTYield+0x5c>)
   2d53a:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2d53c:	683a      	ldr	r2, [r7, #0]
   2d53e:	2308      	movs	r3, #8
   2d540:	18fb      	adds	r3, r7, r3
   2d542:	0011      	movs	r1, r2
   2d544:	0018      	movs	r0, r3
   2d546:	4b0f      	ldr	r3, [pc, #60]	; (2d584 <MQTTYield+0x60>)
   2d548:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2d54a:	2308      	movs	r3, #8
   2d54c:	18fa      	adds	r2, r7, r3
   2d54e:	687b      	ldr	r3, [r7, #4]
   2d550:	0011      	movs	r1, r2
   2d552:	0018      	movs	r0, r3
   2d554:	4b0c      	ldr	r3, [pc, #48]	; (2d588 <MQTTYield+0x64>)
   2d556:	4798      	blx	r3
   2d558:	0003      	movs	r3, r0
   2d55a:	3301      	adds	r3, #1
   2d55c:	d103      	bne.n	2d566 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2d55e:	2301      	movs	r3, #1
   2d560:	425b      	negs	r3, r3
   2d562:	617b      	str	r3, [r7, #20]
            break;
   2d564:	e006      	b.n	2d574 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2d566:	2308      	movs	r3, #8
   2d568:	18fb      	adds	r3, r7, r3
   2d56a:	0018      	movs	r0, r3
   2d56c:	4b07      	ldr	r3, [pc, #28]	; (2d58c <MQTTYield+0x68>)
   2d56e:	4798      	blx	r3
   2d570:	1e03      	subs	r3, r0, #0
   2d572:	d0ea      	beq.n	2d54a <MQTTYield+0x26>
        
    return rc;
   2d574:	697b      	ldr	r3, [r7, #20]
}
   2d576:	0018      	movs	r0, r3
   2d578:	46bd      	mov	sp, r7
   2d57a:	b006      	add	sp, #24
   2d57c:	bd80      	pop	{r7, pc}
   2d57e:	46c0      	nop			; (mov r8, r8)
   2d580:	0002dcb1 	.word	0x0002dcb1
   2d584:	0002dc39 	.word	0x0002dc39
   2d588:	0002d331 	.word	0x0002d331
   2d58c:	0002dc0d 	.word	0x0002dc0d

0002d590 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2d590:	b580      	push	{r7, lr}
   2d592:	b086      	sub	sp, #24
   2d594:	af00      	add	r7, sp, #0
   2d596:	60f8      	str	r0, [r7, #12]
   2d598:	60b9      	str	r1, [r7, #8]
   2d59a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2d59c:	2301      	movs	r3, #1
   2d59e:	425b      	negs	r3, r3
   2d5a0:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2d5a2:	687b      	ldr	r3, [r7, #4]
   2d5a4:	0018      	movs	r0, r3
   2d5a6:	4b0b      	ldr	r3, [pc, #44]	; (2d5d4 <waitfor+0x44>)
   2d5a8:	4798      	blx	r3
   2d5aa:	1e03      	subs	r3, r0, #0
   2d5ac:	d10c      	bne.n	2d5c8 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2d5ae:	687a      	ldr	r2, [r7, #4]
   2d5b0:	68fb      	ldr	r3, [r7, #12]
   2d5b2:	0011      	movs	r1, r2
   2d5b4:	0018      	movs	r0, r3
   2d5b6:	4b08      	ldr	r3, [pc, #32]	; (2d5d8 <waitfor+0x48>)
   2d5b8:	4798      	blx	r3
   2d5ba:	0003      	movs	r3, r0
   2d5bc:	617b      	str	r3, [r7, #20]
   2d5be:	697a      	ldr	r2, [r7, #20]
   2d5c0:	68bb      	ldr	r3, [r7, #8]
   2d5c2:	429a      	cmp	r2, r3
   2d5c4:	d1ed      	bne.n	2d5a2 <waitfor+0x12>
   2d5c6:	e000      	b.n	2d5ca <waitfor+0x3a>
            break; // we timed out
   2d5c8:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2d5ca:	697b      	ldr	r3, [r7, #20]
}
   2d5cc:	0018      	movs	r0, r3
   2d5ce:	46bd      	mov	sp, r7
   2d5d0:	b006      	add	sp, #24
   2d5d2:	bd80      	pop	{r7, pc}
   2d5d4:	0002dc0d 	.word	0x0002dc0d
   2d5d8:	0002d331 	.word	0x0002d331

0002d5dc <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2d5dc:	b590      	push	{r4, r7, lr}
   2d5de:	b09f      	sub	sp, #124	; 0x7c
   2d5e0:	af00      	add	r7, sp, #0
   2d5e2:	6078      	str	r0, [r7, #4]
   2d5e4:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2d5e6:	2301      	movs	r3, #1
   2d5e8:	425b      	negs	r3, r3
   2d5ea:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2d5ec:	230c      	movs	r3, #12
   2d5ee:	18fa      	adds	r2, r7, r3
   2d5f0:	4b41      	ldr	r3, [pc, #260]	; (2d6f8 <MQTTConnect+0x11c>)
   2d5f2:	0010      	movs	r0, r2
   2d5f4:	0019      	movs	r1, r3
   2d5f6:	2358      	movs	r3, #88	; 0x58
   2d5f8:	001a      	movs	r2, r3
   2d5fa:	4b40      	ldr	r3, [pc, #256]	; (2d6fc <MQTTConnect+0x120>)
   2d5fc:	4798      	blx	r3
    int len = 0;
   2d5fe:	2300      	movs	r3, #0
   2d600:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2d602:	687b      	ldr	r3, [r7, #4]
   2d604:	6a1b      	ldr	r3, [r3, #32]
   2d606:	2b00      	cmp	r3, #0
   2d608:	d166      	bne.n	2d6d8 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2d60a:	2364      	movs	r3, #100	; 0x64
   2d60c:	18fb      	adds	r3, r7, r3
   2d60e:	0018      	movs	r0, r3
   2d610:	4b3b      	ldr	r3, [pc, #236]	; (2d700 <MQTTConnect+0x124>)
   2d612:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2d614:	687b      	ldr	r3, [r7, #4]
   2d616:	685a      	ldr	r2, [r3, #4]
   2d618:	2364      	movs	r3, #100	; 0x64
   2d61a:	18fb      	adds	r3, r7, r3
   2d61c:	0011      	movs	r1, r2
   2d61e:	0018      	movs	r0, r3
   2d620:	4b38      	ldr	r3, [pc, #224]	; (2d704 <MQTTConnect+0x128>)
   2d622:	4798      	blx	r3

    if (options == 0)
   2d624:	683b      	ldr	r3, [r7, #0]
   2d626:	2b00      	cmp	r3, #0
   2d628:	d102      	bne.n	2d630 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2d62a:	230c      	movs	r3, #12
   2d62c:	18fb      	adds	r3, r7, r3
   2d62e:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2d630:	683b      	ldr	r3, [r7, #0]
   2d632:	8b1b      	ldrh	r3, [r3, #24]
   2d634:	001a      	movs	r2, r3
   2d636:	687b      	ldr	r3, [r7, #4]
   2d638:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2d63a:	687b      	ldr	r3, [r7, #4]
   2d63c:	3354      	adds	r3, #84	; 0x54
   2d63e:	001a      	movs	r2, r3
   2d640:	687b      	ldr	r3, [r7, #4]
   2d642:	699b      	ldr	r3, [r3, #24]
   2d644:	0019      	movs	r1, r3
   2d646:	0010      	movs	r0, r2
   2d648:	4b2f      	ldr	r3, [pc, #188]	; (2d708 <MQTTConnect+0x12c>)
   2d64a:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2d64c:	687b      	ldr	r3, [r7, #4]
   2d64e:	6918      	ldr	r0, [r3, #16]
   2d650:	687b      	ldr	r3, [r7, #4]
   2d652:	689b      	ldr	r3, [r3, #8]
   2d654:	0019      	movs	r1, r3
   2d656:	683b      	ldr	r3, [r7, #0]
   2d658:	001a      	movs	r2, r3
   2d65a:	4b2c      	ldr	r3, [pc, #176]	; (2d70c <MQTTConnect+0x130>)
   2d65c:	4798      	blx	r3
   2d65e:	0003      	movs	r3, r0
   2d660:	673b      	str	r3, [r7, #112]	; 0x70
   2d662:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2d664:	2b00      	cmp	r3, #0
   2d666:	dd39      	ble.n	2d6dc <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2d668:	2364      	movs	r3, #100	; 0x64
   2d66a:	18fa      	adds	r2, r7, r3
   2d66c:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2d66e:	687b      	ldr	r3, [r7, #4]
   2d670:	0018      	movs	r0, r3
   2d672:	4b27      	ldr	r3, [pc, #156]	; (2d710 <MQTTConnect+0x134>)
   2d674:	4798      	blx	r3
   2d676:	0003      	movs	r3, r0
   2d678:	677b      	str	r3, [r7, #116]	; 0x74
   2d67a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2d67c:	2b00      	cmp	r3, #0
   2d67e:	d12f      	bne.n	2d6e0 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2d680:	2364      	movs	r3, #100	; 0x64
   2d682:	18fa      	adds	r2, r7, r3
   2d684:	687b      	ldr	r3, [r7, #4]
   2d686:	2102      	movs	r1, #2
   2d688:	0018      	movs	r0, r3
   2d68a:	4b22      	ldr	r3, [pc, #136]	; (2d714 <MQTTConnect+0x138>)
   2d68c:	4798      	blx	r3
   2d68e:	0003      	movs	r3, r0
   2d690:	2b02      	cmp	r3, #2
   2d692:	d11d      	bne.n	2d6d0 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2d694:	230b      	movs	r3, #11
   2d696:	18fb      	adds	r3, r7, r3
   2d698:	22ff      	movs	r2, #255	; 0xff
   2d69a:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2d69c:	230a      	movs	r3, #10
   2d69e:	18fb      	adds	r3, r7, r3
   2d6a0:	2200      	movs	r2, #0
   2d6a2:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2d6a4:	687b      	ldr	r3, [r7, #4]
   2d6a6:	695a      	ldr	r2, [r3, #20]
   2d6a8:	687b      	ldr	r3, [r7, #4]
   2d6aa:	68db      	ldr	r3, [r3, #12]
   2d6ac:	210b      	movs	r1, #11
   2d6ae:	1879      	adds	r1, r7, r1
   2d6b0:	200a      	movs	r0, #10
   2d6b2:	1838      	adds	r0, r7, r0
   2d6b4:	4c18      	ldr	r4, [pc, #96]	; (2d718 <MQTTConnect+0x13c>)
   2d6b6:	47a0      	blx	r4
   2d6b8:	0003      	movs	r3, r0
   2d6ba:	2b01      	cmp	r3, #1
   2d6bc:	d104      	bne.n	2d6c8 <MQTTConnect+0xec>
            rc = connack_rc;
   2d6be:	230b      	movs	r3, #11
   2d6c0:	18fb      	adds	r3, r7, r3
   2d6c2:	781b      	ldrb	r3, [r3, #0]
   2d6c4:	677b      	str	r3, [r7, #116]	; 0x74
   2d6c6:	e00c      	b.n	2d6e2 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2d6c8:	2301      	movs	r3, #1
   2d6ca:	425b      	negs	r3, r3
   2d6cc:	677b      	str	r3, [r7, #116]	; 0x74
   2d6ce:	e008      	b.n	2d6e2 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2d6d0:	2301      	movs	r3, #1
   2d6d2:	425b      	negs	r3, r3
   2d6d4:	677b      	str	r3, [r7, #116]	; 0x74
   2d6d6:	e004      	b.n	2d6e2 <MQTTConnect+0x106>
		goto exit;
   2d6d8:	46c0      	nop			; (mov r8, r8)
   2d6da:	e002      	b.n	2d6e2 <MQTTConnect+0x106>
        goto exit;
   2d6dc:	46c0      	nop			; (mov r8, r8)
   2d6de:	e000      	b.n	2d6e2 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2d6e0:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2d6e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2d6e4:	2b00      	cmp	r3, #0
   2d6e6:	d102      	bne.n	2d6ee <MQTTConnect+0x112>
        c->isconnected = 1;
   2d6e8:	687b      	ldr	r3, [r7, #4]
   2d6ea:	2201      	movs	r2, #1
   2d6ec:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2d6ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2d6f0:	0018      	movs	r0, r3
   2d6f2:	46bd      	mov	sp, r7
   2d6f4:	b01f      	add	sp, #124	; 0x7c
   2d6f6:	bd90      	pop	{r4, r7, pc}
   2d6f8:	00038064 	.word	0x00038064
   2d6fc:	00033169 	.word	0x00033169
   2d700:	0002dcb1 	.word	0x0002dcb1
   2d704:	0002dc39 	.word	0x0002dc39
   2d708:	0002dc61 	.word	0x0002dc61
   2d70c:	0002e48d 	.word	0x0002e48d
   2d710:	0002ce29 	.word	0x0002ce29
   2d714:	0002d591 	.word	0x0002d591
   2d718:	0002e709 	.word	0x0002e709

0002d71c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2d71c:	b5b0      	push	{r4, r5, r7, lr}
   2d71e:	b096      	sub	sp, #88	; 0x58
   2d720:	af04      	add	r7, sp, #16
   2d722:	60f8      	str	r0, [r7, #12]
   2d724:	60b9      	str	r1, [r7, #8]
   2d726:	603b      	str	r3, [r7, #0]
   2d728:	1dfb      	adds	r3, r7, #7
   2d72a:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2d72c:	2301      	movs	r3, #1
   2d72e:	425b      	negs	r3, r3
   2d730:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2d732:	2300      	movs	r3, #0
   2d734:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2d736:	2324      	movs	r3, #36	; 0x24
   2d738:	18fb      	adds	r3, r7, r3
   2d73a:	2200      	movs	r2, #0
   2d73c:	601a      	str	r2, [r3, #0]
   2d73e:	2324      	movs	r3, #36	; 0x24
   2d740:	18fb      	adds	r3, r7, r3
   2d742:	2200      	movs	r2, #0
   2d744:	605a      	str	r2, [r3, #4]
   2d746:	2324      	movs	r3, #36	; 0x24
   2d748:	18fb      	adds	r3, r7, r3
   2d74a:	2200      	movs	r2, #0
   2d74c:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2d74e:	1dfb      	adds	r3, r7, #7
   2d750:	781b      	ldrb	r3, [r3, #0]
   2d752:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2d754:	2324      	movs	r3, #36	; 0x24
   2d756:	18fb      	adds	r3, r7, r3
   2d758:	68ba      	ldr	r2, [r7, #8]
   2d75a:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2d75c:	68fb      	ldr	r3, [r7, #12]
   2d75e:	6a1b      	ldr	r3, [r3, #32]
   2d760:	2b00      	cmp	r3, #0
   2d762:	d100      	bne.n	2d766 <MQTTSubscribe+0x4a>
   2d764:	e088      	b.n	2d878 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2d766:	2330      	movs	r3, #48	; 0x30
   2d768:	18fb      	adds	r3, r7, r3
   2d76a:	0018      	movs	r0, r3
   2d76c:	4b47      	ldr	r3, [pc, #284]	; (2d88c <MQTTSubscribe+0x170>)
   2d76e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2d770:	68fb      	ldr	r3, [r7, #12]
   2d772:	685a      	ldr	r2, [r3, #4]
   2d774:	2330      	movs	r3, #48	; 0x30
   2d776:	18fb      	adds	r3, r7, r3
   2d778:	0011      	movs	r1, r2
   2d77a:	0018      	movs	r0, r3
   2d77c:	4b44      	ldr	r3, [pc, #272]	; (2d890 <MQTTSubscribe+0x174>)
   2d77e:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2d780:	68fb      	ldr	r3, [r7, #12]
   2d782:	691c      	ldr	r4, [r3, #16]
   2d784:	68fb      	ldr	r3, [r7, #12]
   2d786:	689b      	ldr	r3, [r3, #8]
   2d788:	001d      	movs	r5, r3
   2d78a:	68fb      	ldr	r3, [r7, #12]
   2d78c:	0018      	movs	r0, r3
   2d78e:	4b41      	ldr	r3, [pc, #260]	; (2d894 <MQTTSubscribe+0x178>)
   2d790:	4798      	blx	r3
   2d792:	0003      	movs	r3, r0
   2d794:	b29a      	uxth	r2, r3
   2d796:	2320      	movs	r3, #32
   2d798:	18fb      	adds	r3, r7, r3
   2d79a:	9302      	str	r3, [sp, #8]
   2d79c:	2324      	movs	r3, #36	; 0x24
   2d79e:	18fb      	adds	r3, r7, r3
   2d7a0:	9301      	str	r3, [sp, #4]
   2d7a2:	2301      	movs	r3, #1
   2d7a4:	9300      	str	r3, [sp, #0]
   2d7a6:	0013      	movs	r3, r2
   2d7a8:	2200      	movs	r2, #0
   2d7aa:	0029      	movs	r1, r5
   2d7ac:	0020      	movs	r0, r4
   2d7ae:	4c3a      	ldr	r4, [pc, #232]	; (2d898 <MQTTSubscribe+0x17c>)
   2d7b0:	47a0      	blx	r4
   2d7b2:	0003      	movs	r3, r0
   2d7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2d7b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2d7b8:	2b00      	cmp	r3, #0
   2d7ba:	dd5f      	ble.n	2d87c <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2d7bc:	2330      	movs	r3, #48	; 0x30
   2d7be:	18fa      	adds	r2, r7, r3
   2d7c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2d7c2:	68fb      	ldr	r3, [r7, #12]
   2d7c4:	0018      	movs	r0, r3
   2d7c6:	4b35      	ldr	r3, [pc, #212]	; (2d89c <MQTTSubscribe+0x180>)
   2d7c8:	4798      	blx	r3
   2d7ca:	0003      	movs	r3, r0
   2d7cc:	647b      	str	r3, [r7, #68]	; 0x44
   2d7ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2d7d0:	2b00      	cmp	r3, #0
   2d7d2:	d155      	bne.n	2d880 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2d7d4:	2330      	movs	r3, #48	; 0x30
   2d7d6:	18fa      	adds	r2, r7, r3
   2d7d8:	68fb      	ldr	r3, [r7, #12]
   2d7da:	2109      	movs	r1, #9
   2d7dc:	0018      	movs	r0, r3
   2d7de:	4b30      	ldr	r3, [pc, #192]	; (2d8a0 <MQTTSubscribe+0x184>)
   2d7e0:	4798      	blx	r3
   2d7e2:	0003      	movs	r3, r0
   2d7e4:	2b09      	cmp	r3, #9
   2d7e6:	d143      	bne.n	2d870 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2d7e8:	2300      	movs	r3, #0
   2d7ea:	61fb      	str	r3, [r7, #28]
   2d7ec:	2301      	movs	r3, #1
   2d7ee:	425b      	negs	r3, r3
   2d7f0:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2d7f2:	68fb      	ldr	r3, [r7, #12]
   2d7f4:	695a      	ldr	r2, [r3, #20]
   2d7f6:	68fb      	ldr	r3, [r7, #12]
   2d7f8:	68db      	ldr	r3, [r3, #12]
   2d7fa:	001c      	movs	r4, r3
   2d7fc:	2318      	movs	r3, #24
   2d7fe:	18fb      	adds	r3, r7, r3
   2d800:	211c      	movs	r1, #28
   2d802:	1879      	adds	r1, r7, r1
   2d804:	2016      	movs	r0, #22
   2d806:	1838      	adds	r0, r7, r0
   2d808:	9401      	str	r4, [sp, #4]
   2d80a:	9200      	str	r2, [sp, #0]
   2d80c:	000a      	movs	r2, r1
   2d80e:	2101      	movs	r1, #1
   2d810:	4c24      	ldr	r4, [pc, #144]	; (2d8a4 <MQTTSubscribe+0x188>)
   2d812:	47a0      	blx	r4
   2d814:	0003      	movs	r3, r0
   2d816:	2b01      	cmp	r3, #1
   2d818:	d101      	bne.n	2d81e <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2d81a:	69bb      	ldr	r3, [r7, #24]
   2d81c:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2d81e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2d820:	2b80      	cmp	r3, #128	; 0x80
   2d822:	d02e      	beq.n	2d882 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d824:	2300      	movs	r3, #0
   2d826:	643b      	str	r3, [r7, #64]	; 0x40
   2d828:	e01e      	b.n	2d868 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2d82a:	68fa      	ldr	r2, [r7, #12]
   2d82c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d82e:	3304      	adds	r3, #4
   2d830:	00db      	lsls	r3, r3, #3
   2d832:	18d3      	adds	r3, r2, r3
   2d834:	3304      	adds	r3, #4
   2d836:	681b      	ldr	r3, [r3, #0]
   2d838:	2b00      	cmp	r3, #0
   2d83a:	d112      	bne.n	2d862 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2d83c:	68fa      	ldr	r2, [r7, #12]
   2d83e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d840:	3304      	adds	r3, #4
   2d842:	00db      	lsls	r3, r3, #3
   2d844:	18d3      	adds	r3, r2, r3
   2d846:	3304      	adds	r3, #4
   2d848:	68ba      	ldr	r2, [r7, #8]
   2d84a:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2d84c:	68fa      	ldr	r2, [r7, #12]
   2d84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d850:	3304      	adds	r3, #4
   2d852:	00db      	lsls	r3, r3, #3
   2d854:	18d3      	adds	r3, r2, r3
   2d856:	3308      	adds	r3, #8
   2d858:	683a      	ldr	r2, [r7, #0]
   2d85a:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2d85c:	2300      	movs	r3, #0
   2d85e:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2d860:	e00f      	b.n	2d882 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2d862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d864:	3301      	adds	r3, #1
   2d866:	643b      	str	r3, [r7, #64]	; 0x40
   2d868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2d86a:	2b04      	cmp	r3, #4
   2d86c:	dddd      	ble.n	2d82a <MQTTSubscribe+0x10e>
   2d86e:	e008      	b.n	2d882 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2d870:	2301      	movs	r3, #1
   2d872:	425b      	negs	r3, r3
   2d874:	647b      	str	r3, [r7, #68]	; 0x44
   2d876:	e004      	b.n	2d882 <MQTTSubscribe+0x166>
		goto exit;
   2d878:	46c0      	nop			; (mov r8, r8)
   2d87a:	e002      	b.n	2d882 <MQTTSubscribe+0x166>
        goto exit;
   2d87c:	46c0      	nop			; (mov r8, r8)
   2d87e:	e000      	b.n	2d882 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2d880:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2d882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2d884:	0018      	movs	r0, r3
   2d886:	46bd      	mov	sp, r7
   2d888:	b012      	add	sp, #72	; 0x48
   2d88a:	bdb0      	pop	{r4, r5, r7, pc}
   2d88c:	0002dcb1 	.word	0x0002dcb1
   2d890:	0002dc39 	.word	0x0002dc39
   2d894:	0002cdf9 	.word	0x0002cdf9
   2d898:	0002f1e9 	.word	0x0002f1e9
   2d89c:	0002ce29 	.word	0x0002ce29
   2d8a0:	0002d591 	.word	0x0002d591
   2d8a4:	0002f339 	.word	0x0002f339

0002d8a8 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2d8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   2d8aa:	46ce      	mov	lr, r9
   2d8ac:	4647      	mov	r7, r8
   2d8ae:	b580      	push	{r7, lr}
   2d8b0:	b097      	sub	sp, #92	; 0x5c
   2d8b2:	af08      	add	r7, sp, #32
   2d8b4:	60f8      	str	r0, [r7, #12]
   2d8b6:	60b9      	str	r1, [r7, #8]
   2d8b8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2d8ba:	2301      	movs	r3, #1
   2d8bc:	425b      	negs	r3, r3
   2d8be:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2d8c0:	2318      	movs	r3, #24
   2d8c2:	18fb      	adds	r3, r7, r3
   2d8c4:	2200      	movs	r2, #0
   2d8c6:	601a      	str	r2, [r3, #0]
   2d8c8:	2318      	movs	r3, #24
   2d8ca:	18fb      	adds	r3, r7, r3
   2d8cc:	2200      	movs	r2, #0
   2d8ce:	605a      	str	r2, [r3, #4]
   2d8d0:	2318      	movs	r3, #24
   2d8d2:	18fb      	adds	r3, r7, r3
   2d8d4:	2200      	movs	r2, #0
   2d8d6:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2d8d8:	2318      	movs	r3, #24
   2d8da:	18fb      	adds	r3, r7, r3
   2d8dc:	68ba      	ldr	r2, [r7, #8]
   2d8de:	601a      	str	r2, [r3, #0]
    int len = 0;
   2d8e0:	2300      	movs	r3, #0
   2d8e2:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2d8e4:	68fb      	ldr	r3, [r7, #12]
   2d8e6:	6a1b      	ldr	r3, [r3, #32]
   2d8e8:	2b00      	cmp	r3, #0
   2d8ea:	d100      	bne.n	2d8ee <MQTTPublish+0x46>
   2d8ec:	e0a0      	b.n	2da30 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2d8ee:	2324      	movs	r3, #36	; 0x24
   2d8f0:	18fb      	adds	r3, r7, r3
   2d8f2:	0018      	movs	r0, r3
   2d8f4:	4b55      	ldr	r3, [pc, #340]	; (2da4c <MQTTPublish+0x1a4>)
   2d8f6:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2d8f8:	68fb      	ldr	r3, [r7, #12]
   2d8fa:	685a      	ldr	r2, [r3, #4]
   2d8fc:	2324      	movs	r3, #36	; 0x24
   2d8fe:	18fb      	adds	r3, r7, r3
   2d900:	0011      	movs	r1, r2
   2d902:	0018      	movs	r0, r3
   2d904:	4b52      	ldr	r3, [pc, #328]	; (2da50 <MQTTPublish+0x1a8>)
   2d906:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2d908:	687b      	ldr	r3, [r7, #4]
   2d90a:	781b      	ldrb	r3, [r3, #0]
   2d90c:	2b01      	cmp	r3, #1
   2d90e:	d003      	beq.n	2d918 <MQTTPublish+0x70>
   2d910:	687b      	ldr	r3, [r7, #4]
   2d912:	781b      	ldrb	r3, [r3, #0]
   2d914:	2b02      	cmp	r3, #2
   2d916:	d107      	bne.n	2d928 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2d918:	68fb      	ldr	r3, [r7, #12]
   2d91a:	0018      	movs	r0, r3
   2d91c:	4b4d      	ldr	r3, [pc, #308]	; (2da54 <MQTTPublish+0x1ac>)
   2d91e:	4798      	blx	r3
   2d920:	0003      	movs	r3, r0
   2d922:	b29a      	uxth	r2, r3
   2d924:	687b      	ldr	r3, [r7, #4]
   2d926:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2d928:	68fb      	ldr	r3, [r7, #12]
   2d92a:	691b      	ldr	r3, [r3, #16]
   2d92c:	469c      	mov	ip, r3
   2d92e:	68fb      	ldr	r3, [r7, #12]
   2d930:	689b      	ldr	r3, [r3, #8]
   2d932:	001d      	movs	r5, r3
   2d934:	687b      	ldr	r3, [r7, #4]
   2d936:	781b      	ldrb	r3, [r3, #0]
   2d938:	001e      	movs	r6, r3
   2d93a:	687b      	ldr	r3, [r7, #4]
   2d93c:	785b      	ldrb	r3, [r3, #1]
   2d93e:	4698      	mov	r8, r3
   2d940:	687b      	ldr	r3, [r7, #4]
   2d942:	889b      	ldrh	r3, [r3, #4]
   2d944:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2d946:	687b      	ldr	r3, [r7, #4]
   2d948:	689a      	ldr	r2, [r3, #8]
   2d94a:	687b      	ldr	r3, [r7, #4]
   2d94c:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2d94e:	9306      	str	r3, [sp, #24]
   2d950:	9205      	str	r2, [sp, #20]
   2d952:	2318      	movs	r3, #24
   2d954:	18fa      	adds	r2, r7, r3
   2d956:	2308      	movs	r3, #8
   2d958:	446b      	add	r3, sp
   2d95a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2d95c:	c313      	stmia	r3!, {r0, r1, r4}
   2d95e:	464b      	mov	r3, r9
   2d960:	9301      	str	r3, [sp, #4]
   2d962:	4643      	mov	r3, r8
   2d964:	9300      	str	r3, [sp, #0]
   2d966:	0033      	movs	r3, r6
   2d968:	2200      	movs	r2, #0
   2d96a:	0029      	movs	r1, r5
   2d96c:	4660      	mov	r0, ip
   2d96e:	4c3a      	ldr	r4, [pc, #232]	; (2da58 <MQTTPublish+0x1b0>)
   2d970:	47a0      	blx	r4
   2d972:	0003      	movs	r3, r0
   2d974:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2d976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2d978:	2b00      	cmp	r3, #0
   2d97a:	dd5b      	ble.n	2da34 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2d97c:	2324      	movs	r3, #36	; 0x24
   2d97e:	18fa      	adds	r2, r7, r3
   2d980:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2d982:	68fb      	ldr	r3, [r7, #12]
   2d984:	0018      	movs	r0, r3
   2d986:	4b35      	ldr	r3, [pc, #212]	; (2da5c <MQTTPublish+0x1b4>)
   2d988:	4798      	blx	r3
   2d98a:	0003      	movs	r3, r0
   2d98c:	637b      	str	r3, [r7, #52]	; 0x34
   2d98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2d990:	2b00      	cmp	r3, #0
   2d992:	d151      	bne.n	2da38 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2d994:	687b      	ldr	r3, [r7, #4]
   2d996:	781b      	ldrb	r3, [r3, #0]
   2d998:	2b01      	cmp	r3, #1
   2d99a:	d122      	bne.n	2d9e2 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2d99c:	2324      	movs	r3, #36	; 0x24
   2d99e:	18fa      	adds	r2, r7, r3
   2d9a0:	68fb      	ldr	r3, [r7, #12]
   2d9a2:	2104      	movs	r1, #4
   2d9a4:	0018      	movs	r0, r3
   2d9a6:	4b2e      	ldr	r3, [pc, #184]	; (2da60 <MQTTPublish+0x1b8>)
   2d9a8:	4798      	blx	r3
   2d9aa:	0003      	movs	r3, r0
   2d9ac:	2b04      	cmp	r3, #4
   2d9ae:	d114      	bne.n	2d9da <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2d9b0:	68fb      	ldr	r3, [r7, #12]
   2d9b2:	695c      	ldr	r4, [r3, #20]
   2d9b4:	68fb      	ldr	r3, [r7, #12]
   2d9b6:	68db      	ldr	r3, [r3, #12]
   2d9b8:	2216      	movs	r2, #22
   2d9ba:	18ba      	adds	r2, r7, r2
   2d9bc:	2115      	movs	r1, #21
   2d9be:	1879      	adds	r1, r7, r1
   2d9c0:	2014      	movs	r0, #20
   2d9c2:	1838      	adds	r0, r7, r0
   2d9c4:	9300      	str	r3, [sp, #0]
   2d9c6:	0023      	movs	r3, r4
   2d9c8:	4c26      	ldr	r4, [pc, #152]	; (2da64 <MQTTPublish+0x1bc>)
   2d9ca:	47a0      	blx	r4
   2d9cc:	0003      	movs	r3, r0
   2d9ce:	2b01      	cmp	r3, #1
   2d9d0:	d033      	beq.n	2da3a <MQTTPublish+0x192>
                rc = FAILURE;
   2d9d2:	2301      	movs	r3, #1
   2d9d4:	425b      	negs	r3, r3
   2d9d6:	637b      	str	r3, [r7, #52]	; 0x34
   2d9d8:	e02f      	b.n	2da3a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2d9da:	2301      	movs	r3, #1
   2d9dc:	425b      	negs	r3, r3
   2d9de:	637b      	str	r3, [r7, #52]	; 0x34
   2d9e0:	e02b      	b.n	2da3a <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2d9e2:	687b      	ldr	r3, [r7, #4]
   2d9e4:	781b      	ldrb	r3, [r3, #0]
   2d9e6:	2b02      	cmp	r3, #2
   2d9e8:	d127      	bne.n	2da3a <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2d9ea:	2324      	movs	r3, #36	; 0x24
   2d9ec:	18fa      	adds	r2, r7, r3
   2d9ee:	68fb      	ldr	r3, [r7, #12]
   2d9f0:	2107      	movs	r1, #7
   2d9f2:	0018      	movs	r0, r3
   2d9f4:	4b1a      	ldr	r3, [pc, #104]	; (2da60 <MQTTPublish+0x1b8>)
   2d9f6:	4798      	blx	r3
   2d9f8:	0003      	movs	r3, r0
   2d9fa:	2b07      	cmp	r3, #7
   2d9fc:	d114      	bne.n	2da28 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2d9fe:	68fb      	ldr	r3, [r7, #12]
   2da00:	695c      	ldr	r4, [r3, #20]
   2da02:	68fb      	ldr	r3, [r7, #12]
   2da04:	68db      	ldr	r3, [r3, #12]
   2da06:	2212      	movs	r2, #18
   2da08:	18ba      	adds	r2, r7, r2
   2da0a:	2111      	movs	r1, #17
   2da0c:	1879      	adds	r1, r7, r1
   2da0e:	2010      	movs	r0, #16
   2da10:	1838      	adds	r0, r7, r0
   2da12:	9300      	str	r3, [sp, #0]
   2da14:	0023      	movs	r3, r4
   2da16:	4c13      	ldr	r4, [pc, #76]	; (2da64 <MQTTPublish+0x1bc>)
   2da18:	47a0      	blx	r4
   2da1a:	0003      	movs	r3, r0
   2da1c:	2b01      	cmp	r3, #1
   2da1e:	d00c      	beq.n	2da3a <MQTTPublish+0x192>
                rc = FAILURE;
   2da20:	2301      	movs	r3, #1
   2da22:	425b      	negs	r3, r3
   2da24:	637b      	str	r3, [r7, #52]	; 0x34
   2da26:	e008      	b.n	2da3a <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2da28:	2301      	movs	r3, #1
   2da2a:	425b      	negs	r3, r3
   2da2c:	637b      	str	r3, [r7, #52]	; 0x34
   2da2e:	e004      	b.n	2da3a <MQTTPublish+0x192>
		goto exit;
   2da30:	46c0      	nop			; (mov r8, r8)
   2da32:	e002      	b.n	2da3a <MQTTPublish+0x192>
        goto exit;
   2da34:	46c0      	nop			; (mov r8, r8)
   2da36:	e000      	b.n	2da3a <MQTTPublish+0x192>
        goto exit; // there was a problem
   2da38:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2da3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2da3c:	0018      	movs	r0, r3
   2da3e:	46bd      	mov	sp, r7
   2da40:	b00f      	add	sp, #60	; 0x3c
   2da42:	bc0c      	pop	{r2, r3}
   2da44:	4690      	mov	r8, r2
   2da46:	4699      	mov	r9, r3
   2da48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2da4a:	46c0      	nop			; (mov r8, r8)
   2da4c:	0002dcb1 	.word	0x0002dcb1
   2da50:	0002dc39 	.word	0x0002dc39
   2da54:	0002cdf9 	.word	0x0002cdf9
   2da58:	0002ef35 	.word	0x0002ef35
   2da5c:	0002ce29 	.word	0x0002ce29
   2da60:	0002d591 	.word	0x0002d591
   2da64:	0002e9ad 	.word	0x0002e9ad

0002da68 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2da68:	b580      	push	{r7, lr}
   2da6a:	b088      	sub	sp, #32
   2da6c:	af00      	add	r7, sp, #0
   2da6e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2da70:	2301      	movs	r3, #1
   2da72:	425b      	negs	r3, r3
   2da74:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2da76:	2300      	movs	r3, #0
   2da78:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2da7a:	230c      	movs	r3, #12
   2da7c:	18fb      	adds	r3, r7, r3
   2da7e:	0018      	movs	r0, r3
   2da80:	4b13      	ldr	r3, [pc, #76]	; (2dad0 <MQTTDisconnect+0x68>)
   2da82:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2da84:	687b      	ldr	r3, [r7, #4]
   2da86:	685a      	ldr	r2, [r3, #4]
   2da88:	230c      	movs	r3, #12
   2da8a:	18fb      	adds	r3, r7, r3
   2da8c:	0011      	movs	r1, r2
   2da8e:	0018      	movs	r0, r3
   2da90:	4b10      	ldr	r3, [pc, #64]	; (2dad4 <MQTTDisconnect+0x6c>)
   2da92:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2da94:	687b      	ldr	r3, [r7, #4]
   2da96:	691a      	ldr	r2, [r3, #16]
   2da98:	687b      	ldr	r3, [r7, #4]
   2da9a:	689b      	ldr	r3, [r3, #8]
   2da9c:	0019      	movs	r1, r3
   2da9e:	0010      	movs	r0, r2
   2daa0:	4b0d      	ldr	r3, [pc, #52]	; (2dad8 <MQTTDisconnect+0x70>)
   2daa2:	4798      	blx	r3
   2daa4:	0003      	movs	r3, r0
   2daa6:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2daa8:	69bb      	ldr	r3, [r7, #24]
   2daaa:	2b00      	cmp	r3, #0
   2daac:	dd08      	ble.n	2dac0 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2daae:	230c      	movs	r3, #12
   2dab0:	18fa      	adds	r2, r7, r3
   2dab2:	69b9      	ldr	r1, [r7, #24]
   2dab4:	687b      	ldr	r3, [r7, #4]
   2dab6:	0018      	movs	r0, r3
   2dab8:	4b08      	ldr	r3, [pc, #32]	; (2dadc <MQTTDisconnect+0x74>)
   2daba:	4798      	blx	r3
   2dabc:	0003      	movs	r3, r0
   2dabe:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2dac0:	687b      	ldr	r3, [r7, #4]
   2dac2:	2200      	movs	r2, #0
   2dac4:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2dac6:	69fb      	ldr	r3, [r7, #28]
}
   2dac8:	0018      	movs	r0, r3
   2daca:	46bd      	mov	sp, r7
   2dacc:	b008      	add	sp, #32
   2dace:	bd80      	pop	{r7, pc}
   2dad0:	0002dcb1 	.word	0x0002dcb1
   2dad4:	0002dc39 	.word	0x0002dc39
   2dad8:	0002e861 	.word	0x0002e861
   2dadc:	0002ce29 	.word	0x0002ce29

0002dae0 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2dae0:	b580      	push	{r7, lr}
   2dae2:	b084      	sub	sp, #16
   2dae4:	af00      	add	r7, sp, #0
   2dae6:	0002      	movs	r2, r0
   2dae8:	1dfb      	adds	r3, r7, #7
   2daea:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2daec:	2300      	movs	r3, #0
   2daee:	60fb      	str	r3, [r7, #12]
   2daf0:	e01c      	b.n	2db2c <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2daf2:	4a12      	ldr	r2, [pc, #72]	; (2db3c <isMQTTSocket+0x5c>)
   2daf4:	68fb      	ldr	r3, [r7, #12]
   2daf6:	2164      	movs	r1, #100	; 0x64
   2daf8:	434b      	muls	r3, r1
   2dafa:	18d3      	adds	r3, r2, r3
   2dafc:	3360      	adds	r3, #96	; 0x60
   2dafe:	681b      	ldr	r3, [r3, #0]
   2db00:	2b00      	cmp	r3, #0
   2db02:	d010      	beq.n	2db26 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2db04:	4a0d      	ldr	r2, [pc, #52]	; (2db3c <isMQTTSocket+0x5c>)
   2db06:	68fb      	ldr	r3, [r7, #12]
   2db08:	2164      	movs	r1, #100	; 0x64
   2db0a:	434b      	muls	r3, r1
   2db0c:	18d3      	adds	r3, r2, r3
   2db0e:	3360      	adds	r3, #96	; 0x60
   2db10:	681b      	ldr	r3, [r3, #0]
   2db12:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2db14:	68bb      	ldr	r3, [r7, #8]
   2db16:	6a1a      	ldr	r2, [r3, #32]
   2db18:	1dfb      	adds	r3, r7, #7
   2db1a:	781b      	ldrb	r3, [r3, #0]
   2db1c:	b25b      	sxtb	r3, r3
   2db1e:	429a      	cmp	r2, r3
   2db20:	d101      	bne.n	2db26 <isMQTTSocket+0x46>
				return true;
   2db22:	2301      	movs	r3, #1
   2db24:	e006      	b.n	2db34 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2db26:	68fb      	ldr	r3, [r7, #12]
   2db28:	3301      	adds	r3, #1
   2db2a:	60fb      	str	r3, [r7, #12]
   2db2c:	68fb      	ldr	r3, [r7, #12]
   2db2e:	2b06      	cmp	r3, #6
   2db30:	d9df      	bls.n	2daf2 <isMQTTSocket+0x12>
		}
	}
	return false;
   2db32:	2300      	movs	r3, #0
}
   2db34:	0018      	movs	r0, r3
   2db36:	46bd      	mov	sp, r7
   2db38:	b004      	add	sp, #16
   2db3a:	bd80      	pop	{r7, pc}
   2db3c:	200042ac 	.word	0x200042ac

0002db40 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2db40:	b580      	push	{r7, lr}
   2db42:	b082      	sub	sp, #8
   2db44:	af00      	add	r7, sp, #0
   2db46:	6078      	str	r0, [r7, #4]
   2db48:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2db4a:	4b0d      	ldr	r3, [pc, #52]	; (2db80 <dnsResolveCallback+0x40>)
   2db4c:	781b      	ldrb	r3, [r3, #0]
   2db4e:	2201      	movs	r2, #1
   2db50:	4053      	eors	r3, r2
   2db52:	b2db      	uxtb	r3, r3
   2db54:	2b00      	cmp	r3, #0
   2db56:	d00e      	beq.n	2db76 <dnsResolveCallback+0x36>
   2db58:	4b0a      	ldr	r3, [pc, #40]	; (2db84 <dnsResolveCallback+0x44>)
   2db5a:	681b      	ldr	r3, [r3, #0]
   2db5c:	687a      	ldr	r2, [r7, #4]
   2db5e:	0011      	movs	r1, r2
   2db60:	0018      	movs	r0, r3
   2db62:	4b09      	ldr	r3, [pc, #36]	; (2db88 <dnsResolveCallback+0x48>)
   2db64:	4798      	blx	r3
   2db66:	1e03      	subs	r3, r0, #0
   2db68:	d105      	bne.n	2db76 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2db6a:	683a      	ldr	r2, [r7, #0]
   2db6c:	4b07      	ldr	r3, [pc, #28]	; (2db8c <dnsResolveCallback+0x4c>)
   2db6e:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2db70:	4b03      	ldr	r3, [pc, #12]	; (2db80 <dnsResolveCallback+0x40>)
   2db72:	2201      	movs	r2, #1
   2db74:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2db76:	46c0      	nop			; (mov r8, r8)
   2db78:	46bd      	mov	sp, r7
   2db7a:	b002      	add	sp, #8
   2db7c:	bd80      	pop	{r7, pc}
   2db7e:	46c0      	nop			; (mov r8, r8)
   2db80:	2000419c 	.word	0x2000419c
   2db84:	200042a8 	.word	0x200042a8
   2db88:	000334dd 	.word	0x000334dd
   2db8c:	20004194 	.word	0x20004194

0002db90 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2db90:	b580      	push	{r7, lr}
   2db92:	b084      	sub	sp, #16
   2db94:	af00      	add	r7, sp, #0
   2db96:	603a      	str	r2, [r7, #0]
   2db98:	1dfb      	adds	r3, r7, #7
   2db9a:	1c02      	adds	r2, r0, #0
   2db9c:	701a      	strb	r2, [r3, #0]
   2db9e:	1dbb      	adds	r3, r7, #6
   2dba0:	1c0a      	adds	r2, r1, #0
   2dba2:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2dba4:	1dfb      	adds	r3, r7, #7
   2dba6:	781b      	ldrb	r3, [r3, #0]
   2dba8:	b25b      	sxtb	r3, r3
   2dbaa:	0018      	movs	r0, r3
   2dbac:	4b12      	ldr	r3, [pc, #72]	; (2dbf8 <tcpClientSocketEventHandler+0x68>)
   2dbae:	4798      	blx	r3
   2dbb0:	1e03      	subs	r3, r0, #0
   2dbb2:	d01c      	beq.n	2dbee <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2dbb4:	1dbb      	adds	r3, r7, #6
   2dbb6:	781b      	ldrb	r3, [r3, #0]
   2dbb8:	2b06      	cmp	r3, #6
   2dbba:	d00c      	beq.n	2dbd6 <tcpClientSocketEventHandler+0x46>
   2dbbc:	2b07      	cmp	r3, #7
   2dbbe:	d006      	beq.n	2dbce <tcpClientSocketEventHandler+0x3e>
   2dbc0:	2b05      	cmp	r3, #5
   2dbc2:	d000      	beq.n	2dbc6 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2dbc4:	e013      	b.n	2dbee <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2dbc6:	4b0d      	ldr	r3, [pc, #52]	; (2dbfc <tcpClientSocketEventHandler+0x6c>)
   2dbc8:	2201      	movs	r2, #1
   2dbca:	701a      	strb	r2, [r3, #0]
			break;
   2dbcc:	e00f      	b.n	2dbee <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2dbce:	4b0c      	ldr	r3, [pc, #48]	; (2dc00 <tcpClientSocketEventHandler+0x70>)
   2dbd0:	2201      	movs	r2, #1
   2dbd2:	701a      	strb	r2, [r3, #0]
			break;
   2dbd4:	e00b      	b.n	2dbee <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2dbd6:	683b      	ldr	r3, [r7, #0]
   2dbd8:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2dbda:	68fb      	ldr	r3, [r7, #12]
   2dbdc:	2204      	movs	r2, #4
   2dbde:	5e9b      	ldrsh	r3, [r3, r2]
   2dbe0:	001a      	movs	r2, r3
   2dbe2:	4b08      	ldr	r3, [pc, #32]	; (2dc04 <tcpClientSocketEventHandler+0x74>)
   2dbe4:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2dbe6:	4b08      	ldr	r3, [pc, #32]	; (2dc08 <tcpClientSocketEventHandler+0x78>)
   2dbe8:	2201      	movs	r2, #1
   2dbea:	701a      	strb	r2, [r3, #0]
			break;
   2dbec:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2dbee:	46c0      	nop			; (mov r8, r8)
   2dbf0:	46bd      	mov	sp, r7
   2dbf2:	b004      	add	sp, #16
   2dbf4:	bd80      	pop	{r7, pc}
   2dbf6:	46c0      	nop			; (mov r8, r8)
   2dbf8:	0002dae1 	.word	0x0002dae1
   2dbfc:	2000419d 	.word	0x2000419d
   2dc00:	2000419e 	.word	0x2000419e
   2dc04:	20004198 	.word	0x20004198
   2dc08:	2000419f 	.word	0x2000419f

0002dc0c <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2dc0c:	b580      	push	{r7, lr}
   2dc0e:	b082      	sub	sp, #8
   2dc10:	af00      	add	r7, sp, #0
   2dc12:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2dc14:	687b      	ldr	r3, [r7, #4]
   2dc16:	3304      	adds	r3, #4
   2dc18:	687a      	ldr	r2, [r7, #4]
   2dc1a:	0011      	movs	r1, r2
   2dc1c:	0018      	movs	r0, r3
   2dc1e:	4b05      	ldr	r3, [pc, #20]	; (2dc34 <TimerIsExpired+0x28>)
   2dc20:	4798      	blx	r3
   2dc22:	0003      	movs	r3, r0
   2dc24:	3b01      	subs	r3, #1
   2dc26:	425a      	negs	r2, r3
   2dc28:	4153      	adcs	r3, r2
   2dc2a:	b2db      	uxtb	r3, r3
}
   2dc2c:	0018      	movs	r0, r3
   2dc2e:	46bd      	mov	sp, r7
   2dc30:	b002      	add	sp, #8
   2dc32:	bd80      	pop	{r7, pc}
   2dc34:	0001b441 	.word	0x0001b441

0002dc38 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2dc38:	b580      	push	{r7, lr}
   2dc3a:	b082      	sub	sp, #8
   2dc3c:	af00      	add	r7, sp, #0
   2dc3e:	6078      	str	r0, [r7, #4]
   2dc40:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2dc42:	687b      	ldr	r3, [r7, #4]
   2dc44:	683a      	ldr	r2, [r7, #0]
   2dc46:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2dc48:	687b      	ldr	r3, [r7, #4]
   2dc4a:	3304      	adds	r3, #4
   2dc4c:	0018      	movs	r0, r3
   2dc4e:	4b03      	ldr	r3, [pc, #12]	; (2dc5c <TimerCountdownMS+0x24>)
   2dc50:	4798      	blx	r3
}
   2dc52:	46c0      	nop			; (mov r8, r8)
   2dc54:	46bd      	mov	sp, r7
   2dc56:	b002      	add	sp, #8
   2dc58:	bd80      	pop	{r7, pc}
   2dc5a:	46c0      	nop			; (mov r8, r8)
   2dc5c:	0001b3d5 	.word	0x0001b3d5

0002dc60 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2dc60:	b580      	push	{r7, lr}
   2dc62:	b082      	sub	sp, #8
   2dc64:	af00      	add	r7, sp, #0
   2dc66:	6078      	str	r0, [r7, #4]
   2dc68:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2dc6a:	683b      	ldr	r3, [r7, #0]
   2dc6c:	22fa      	movs	r2, #250	; 0xfa
   2dc6e:	0092      	lsls	r2, r2, #2
   2dc70:	435a      	muls	r2, r3
   2dc72:	687b      	ldr	r3, [r7, #4]
   2dc74:	0011      	movs	r1, r2
   2dc76:	0018      	movs	r0, r3
   2dc78:	4b02      	ldr	r3, [pc, #8]	; (2dc84 <TimerCountdown+0x24>)
   2dc7a:	4798      	blx	r3
}
   2dc7c:	46c0      	nop			; (mov r8, r8)
   2dc7e:	46bd      	mov	sp, r7
   2dc80:	b002      	add	sp, #8
   2dc82:	bd80      	pop	{r7, pc}
   2dc84:	0002dc39 	.word	0x0002dc39

0002dc88 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2dc88:	b580      	push	{r7, lr}
   2dc8a:	b082      	sub	sp, #8
   2dc8c:	af00      	add	r7, sp, #0
   2dc8e:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2dc90:	687b      	ldr	r3, [r7, #4]
   2dc92:	3304      	adds	r3, #4
   2dc94:	687a      	ldr	r2, [r7, #4]
   2dc96:	0011      	movs	r1, r2
   2dc98:	0018      	movs	r0, r3
   2dc9a:	4b04      	ldr	r3, [pc, #16]	; (2dcac <TimerLeftMS+0x24>)
   2dc9c:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2dc9e:	687b      	ldr	r3, [r7, #4]
   2dca0:	681b      	ldr	r3, [r3, #0]
}
   2dca2:	0018      	movs	r0, r3
   2dca4:	46bd      	mov	sp, r7
   2dca6:	b002      	add	sp, #8
   2dca8:	bd80      	pop	{r7, pc}
   2dcaa:	46c0      	nop			; (mov r8, r8)
   2dcac:	0001b441 	.word	0x0001b441

0002dcb0 <TimerInit>:


void TimerInit(Timer* timer) {
   2dcb0:	b580      	push	{r7, lr}
   2dcb2:	b082      	sub	sp, #8
   2dcb4:	af00      	add	r7, sp, #0
   2dcb6:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2dcb8:	687b      	ldr	r3, [r7, #4]
   2dcba:	2200      	movs	r2, #0
   2dcbc:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2dcbe:	687b      	ldr	r3, [r7, #4]
   2dcc0:	3304      	adds	r3, #4
   2dcc2:	2208      	movs	r2, #8
   2dcc4:	2100      	movs	r1, #0
   2dcc6:	0018      	movs	r0, r3
   2dcc8:	4b02      	ldr	r3, [pc, #8]	; (2dcd4 <TimerInit+0x24>)
   2dcca:	4798      	blx	r3
}
   2dccc:	46c0      	nop			; (mov r8, r8)
   2dcce:	46bd      	mov	sp, r7
   2dcd0:	b002      	add	sp, #8
   2dcd2:	bd80      	pop	{r7, pc}
   2dcd4:	0003319f 	.word	0x0003319f

0002dcd8 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2dcd8:	b590      	push	{r4, r7, lr}
   2dcda:	b085      	sub	sp, #20
   2dcdc:	af00      	add	r7, sp, #0
   2dcde:	60f8      	str	r0, [r7, #12]
   2dce0:	60b9      	str	r1, [r7, #8]
   2dce2:	607a      	str	r2, [r7, #4]
   2dce4:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2dce6:	683b      	ldr	r3, [r7, #0]
   2dce8:	2b00      	cmp	r3, #0
   2dcea:	d101      	bne.n	2dcf0 <WINC1500_read+0x18>
   2dcec:	230a      	movs	r3, #10
   2dcee:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2dcf0:	4b2c      	ldr	r3, [pc, #176]	; (2dda4 <WINC1500_read+0xcc>)
   2dcf2:	681b      	ldr	r3, [r3, #0]
   2dcf4:	2b00      	cmp	r3, #0
   2dcf6:	d131      	bne.n	2dd5c <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2dcf8:	4b2b      	ldr	r3, [pc, #172]	; (2dda8 <WINC1500_read+0xd0>)
   2dcfa:	2200      	movs	r2, #0
   2dcfc:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2dcfe:	68fb      	ldr	r3, [r7, #12]
   2dd00:	681b      	ldr	r3, [r3, #0]
   2dd02:	b258      	sxtb	r0, r3
   2dd04:	683c      	ldr	r4, [r7, #0]
   2dd06:	2380      	movs	r3, #128	; 0x80
   2dd08:	005a      	lsls	r2, r3, #1
   2dd0a:	4928      	ldr	r1, [pc, #160]	; (2ddac <WINC1500_read+0xd4>)
   2dd0c:	0023      	movs	r3, r4
   2dd0e:	4c28      	ldr	r4, [pc, #160]	; (2ddb0 <WINC1500_read+0xd8>)
   2dd10:	47a0      	blx	r4
   2dd12:	1e03      	subs	r3, r0, #0
   2dd14:	d005      	beq.n	2dd22 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2dd16:	2301      	movs	r3, #1
   2dd18:	425b      	negs	r3, r3
   2dd1a:	e03e      	b.n	2dd9a <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2dd1c:	2000      	movs	r0, #0
   2dd1e:	4b25      	ldr	r3, [pc, #148]	; (2ddb4 <WINC1500_read+0xdc>)
   2dd20:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2dd22:	4b21      	ldr	r3, [pc, #132]	; (2dda8 <WINC1500_read+0xd0>)
   2dd24:	781b      	ldrb	r3, [r3, #0]
   2dd26:	2201      	movs	r2, #1
   2dd28:	4053      	eors	r3, r2
   2dd2a:	b2db      	uxtb	r3, r3
   2dd2c:	2b00      	cmp	r3, #0
   2dd2e:	d1f5      	bne.n	2dd1c <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2dd30:	4b21      	ldr	r3, [pc, #132]	; (2ddb8 <WINC1500_read+0xe0>)
   2dd32:	681b      	ldr	r3, [r3, #0]
   2dd34:	2b00      	cmp	r3, #0
   2dd36:	dd08      	ble.n	2dd4a <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2dd38:	4b1f      	ldr	r3, [pc, #124]	; (2ddb8 <WINC1500_read+0xe0>)
   2dd3a:	681b      	ldr	r3, [r3, #0]
   2dd3c:	001a      	movs	r2, r3
   2dd3e:	4b19      	ldr	r3, [pc, #100]	; (2dda4 <WINC1500_read+0xcc>)
   2dd40:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2dd42:	4b1e      	ldr	r3, [pc, #120]	; (2ddbc <WINC1500_read+0xe4>)
   2dd44:	2200      	movs	r2, #0
   2dd46:	601a      	str	r2, [r3, #0]
   2dd48:	e008      	b.n	2dd5c <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2dd4a:	4b16      	ldr	r3, [pc, #88]	; (2dda4 <WINC1500_read+0xcc>)
   2dd4c:	2200      	movs	r2, #0
   2dd4e:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   2dd50:	4b1a      	ldr	r3, [pc, #104]	; (2ddbc <WINC1500_read+0xe4>)
   2dd52:	2200      	movs	r2, #0
   2dd54:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   2dd56:	4b18      	ldr	r3, [pc, #96]	; (2ddb8 <WINC1500_read+0xe0>)
   2dd58:	681b      	ldr	r3, [r3, #0]
   2dd5a:	e01e      	b.n	2dd9a <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   2dd5c:	4b11      	ldr	r3, [pc, #68]	; (2dda4 <WINC1500_read+0xcc>)
   2dd5e:	681b      	ldr	r3, [r3, #0]
   2dd60:	001a      	movs	r2, r3
   2dd62:	687b      	ldr	r3, [r7, #4]
   2dd64:	4293      	cmp	r3, r2
   2dd66:	dd02      	ble.n	2dd6e <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   2dd68:	2301      	movs	r3, #1
   2dd6a:	425b      	negs	r3, r3
   2dd6c:	e015      	b.n	2dd9a <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   2dd6e:	4b13      	ldr	r3, [pc, #76]	; (2ddbc <WINC1500_read+0xe4>)
   2dd70:	681a      	ldr	r2, [r3, #0]
   2dd72:	4b0e      	ldr	r3, [pc, #56]	; (2ddac <WINC1500_read+0xd4>)
   2dd74:	18d1      	adds	r1, r2, r3
   2dd76:	687a      	ldr	r2, [r7, #4]
   2dd78:	68bb      	ldr	r3, [r7, #8]
   2dd7a:	0018      	movs	r0, r3
   2dd7c:	4b10      	ldr	r3, [pc, #64]	; (2ddc0 <WINC1500_read+0xe8>)
   2dd7e:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   2dd80:	4b08      	ldr	r3, [pc, #32]	; (2dda4 <WINC1500_read+0xcc>)
   2dd82:	681a      	ldr	r2, [r3, #0]
   2dd84:	687b      	ldr	r3, [r7, #4]
   2dd86:	1ad2      	subs	r2, r2, r3
   2dd88:	4b06      	ldr	r3, [pc, #24]	; (2dda4 <WINC1500_read+0xcc>)
   2dd8a:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   2dd8c:	4b0b      	ldr	r3, [pc, #44]	; (2ddbc <WINC1500_read+0xe4>)
   2dd8e:	681a      	ldr	r2, [r3, #0]
   2dd90:	687b      	ldr	r3, [r7, #4]
   2dd92:	18d2      	adds	r2, r2, r3
   2dd94:	4b09      	ldr	r3, [pc, #36]	; (2ddbc <WINC1500_read+0xe4>)
   2dd96:	601a      	str	r2, [r3, #0]
  
  return len;
   2dd98:	687b      	ldr	r3, [r7, #4]
}
   2dd9a:	0018      	movs	r0, r3
   2dd9c:	46bd      	mov	sp, r7
   2dd9e:	b005      	add	sp, #20
   2dda0:	bd90      	pop	{r4, r7, pc}
   2dda2:	46c0      	nop			; (mov r8, r8)
   2dda4:	200042a4 	.word	0x200042a4
   2dda8:	2000419f 	.word	0x2000419f
   2ddac:	200041a0 	.word	0x200041a0
   2ddb0:	0002438d 	.word	0x0002438d
   2ddb4:	000208d5 	.word	0x000208d5
   2ddb8:	20004198 	.word	0x20004198
   2ddbc:	200042a0 	.word	0x200042a0
   2ddc0:	00033169 	.word	0x00033169

0002ddc4 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   2ddc4:	b590      	push	{r4, r7, lr}
   2ddc6:	b085      	sub	sp, #20
   2ddc8:	af00      	add	r7, sp, #0
   2ddca:	60f8      	str	r0, [r7, #12]
   2ddcc:	60b9      	str	r1, [r7, #8]
   2ddce:	607a      	str	r2, [r7, #4]
   2ddd0:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   2ddd2:	4b10      	ldr	r3, [pc, #64]	; (2de14 <WINC1500_write+0x50>)
   2ddd4:	2200      	movs	r2, #0
   2ddd6:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   2ddd8:	68fb      	ldr	r3, [r7, #12]
   2ddda:	681b      	ldr	r3, [r3, #0]
   2dddc:	b258      	sxtb	r0, r3
   2ddde:	687b      	ldr	r3, [r7, #4]
   2dde0:	b29a      	uxth	r2, r3
   2dde2:	68b9      	ldr	r1, [r7, #8]
   2dde4:	2300      	movs	r3, #0
   2dde6:	4c0c      	ldr	r4, [pc, #48]	; (2de18 <WINC1500_write+0x54>)
   2dde8:	47a0      	blx	r4
   2ddea:	1e03      	subs	r3, r0, #0
   2ddec:	d005      	beq.n	2ddfa <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   2ddee:	2301      	movs	r3, #1
   2ddf0:	425b      	negs	r3, r3
   2ddf2:	e00a      	b.n	2de0a <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   2ddf4:	2000      	movs	r0, #0
   2ddf6:	4b09      	ldr	r3, [pc, #36]	; (2de1c <WINC1500_write+0x58>)
   2ddf8:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   2ddfa:	4b06      	ldr	r3, [pc, #24]	; (2de14 <WINC1500_write+0x50>)
   2ddfc:	781b      	ldrb	r3, [r3, #0]
   2ddfe:	2201      	movs	r2, #1
   2de00:	4053      	eors	r3, r2
   2de02:	b2db      	uxtb	r3, r3
   2de04:	2b00      	cmp	r3, #0
   2de06:	d1f5      	bne.n	2ddf4 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   2de08:	687b      	ldr	r3, [r7, #4]
}
   2de0a:	0018      	movs	r0, r3
   2de0c:	46bd      	mov	sp, r7
   2de0e:	b005      	add	sp, #20
   2de10:	bd90      	pop	{r4, r7, pc}
   2de12:	46c0      	nop			; (mov r8, r8)
   2de14:	2000419e 	.word	0x2000419e
   2de18:	00024229 	.word	0x00024229
   2de1c:	000208d5 	.word	0x000208d5

0002de20 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   2de20:	b580      	push	{r7, lr}
   2de22:	b082      	sub	sp, #8
   2de24:	af00      	add	r7, sp, #0
   2de26:	6078      	str	r0, [r7, #4]
	close(n->socket);
   2de28:	687b      	ldr	r3, [r7, #4]
   2de2a:	681b      	ldr	r3, [r3, #0]
   2de2c:	b25b      	sxtb	r3, r3
   2de2e:	0018      	movs	r0, r3
   2de30:	4b06      	ldr	r3, [pc, #24]	; (2de4c <WINC1500_disconnect+0x2c>)
   2de32:	4798      	blx	r3
	n->socket=-1;
   2de34:	687b      	ldr	r3, [r7, #4]
   2de36:	2201      	movs	r2, #1
   2de38:	4252      	negs	r2, r2
   2de3a:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   2de3c:	4b04      	ldr	r3, [pc, #16]	; (2de50 <WINC1500_disconnect+0x30>)
   2de3e:	2200      	movs	r2, #0
   2de40:	701a      	strb	r2, [r3, #0]
}
   2de42:	46c0      	nop			; (mov r8, r8)
   2de44:	46bd      	mov	sp, r7
   2de46:	b002      	add	sp, #8
   2de48:	bd80      	pop	{r7, pc}
   2de4a:	46c0      	nop			; (mov r8, r8)
   2de4c:	0002450d 	.word	0x0002450d
   2de50:	2000419d 	.word	0x2000419d

0002de54 <NetworkInit>:


void NetworkInit(Network* n) {
   2de54:	b580      	push	{r7, lr}
   2de56:	b082      	sub	sp, #8
   2de58:	af00      	add	r7, sp, #0
   2de5a:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   2de5c:	687b      	ldr	r3, [r7, #4]
   2de5e:	2201      	movs	r2, #1
   2de60:	4252      	negs	r2, r2
   2de62:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   2de64:	687b      	ldr	r3, [r7, #4]
   2de66:	4a06      	ldr	r2, [pc, #24]	; (2de80 <NetworkInit+0x2c>)
   2de68:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   2de6a:	687b      	ldr	r3, [r7, #4]
   2de6c:	4a05      	ldr	r2, [pc, #20]	; (2de84 <NetworkInit+0x30>)
   2de6e:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   2de70:	687b      	ldr	r3, [r7, #4]
   2de72:	4a05      	ldr	r2, [pc, #20]	; (2de88 <NetworkInit+0x34>)
   2de74:	611a      	str	r2, [r3, #16]
}
   2de76:	46c0      	nop			; (mov r8, r8)
   2de78:	46bd      	mov	sp, r7
   2de7a:	b002      	add	sp, #8
   2de7c:	bd80      	pop	{r7, pc}
   2de7e:	46c0      	nop			; (mov r8, r8)
   2de80:	0002dcd9 	.word	0x0002dcd9
   2de84:	0002ddc5 	.word	0x0002ddc5
   2de88:	0002de21 	.word	0x0002de21

0002de8c <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   2de8c:	b580      	push	{r7, lr}
   2de8e:	b088      	sub	sp, #32
   2de90:	af00      	add	r7, sp, #0
   2de92:	60f8      	str	r0, [r7, #12]
   2de94:	60b9      	str	r1, [r7, #8]
   2de96:	607a      	str	r2, [r7, #4]
   2de98:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   2de9a:	4b37      	ldr	r3, [pc, #220]	; (2df78 <ConnectNetwork+0xec>)
   2de9c:	2200      	movs	r2, #0
   2de9e:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   2dea0:	4b36      	ldr	r3, [pc, #216]	; (2df7c <ConnectNetwork+0xf0>)
   2dea2:	68ba      	ldr	r2, [r7, #8]
   2dea4:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   2dea6:	68bb      	ldr	r3, [r7, #8]
   2dea8:	0018      	movs	r0, r3
   2deaa:	4b35      	ldr	r3, [pc, #212]	; (2df80 <ConnectNetwork+0xf4>)
   2deac:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   2deae:	e002      	b.n	2deb6 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   2deb0:	2000      	movs	r0, #0
   2deb2:	4b34      	ldr	r3, [pc, #208]	; (2df84 <ConnectNetwork+0xf8>)
   2deb4:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   2deb6:	4b30      	ldr	r3, [pc, #192]	; (2df78 <ConnectNetwork+0xec>)
   2deb8:	781b      	ldrb	r3, [r3, #0]
   2deba:	2201      	movs	r2, #1
   2debc:	4053      	eors	r3, r2
   2debe:	b2db      	uxtb	r3, r3
   2dec0:	2b00      	cmp	r3, #0
   2dec2:	d1f5      	bne.n	2deb0 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   2dec4:	4b30      	ldr	r3, [pc, #192]	; (2df88 <ConnectNetwork+0xfc>)
   2dec6:	681a      	ldr	r2, [r3, #0]
   2dec8:	68fb      	ldr	r3, [r7, #12]
   2deca:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   2decc:	2310      	movs	r3, #16
   2dece:	18fb      	adds	r3, r7, r3
   2ded0:	2202      	movs	r2, #2
   2ded2:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   2ded4:	687b      	ldr	r3, [r7, #4]
   2ded6:	b29b      	uxth	r3, r3
   2ded8:	021b      	lsls	r3, r3, #8
   2deda:	b21a      	sxth	r2, r3
   2dedc:	687b      	ldr	r3, [r7, #4]
   2dede:	b29b      	uxth	r3, r3
   2dee0:	0a1b      	lsrs	r3, r3, #8
   2dee2:	b29b      	uxth	r3, r3
   2dee4:	b21b      	sxth	r3, r3
   2dee6:	4313      	orrs	r3, r2
   2dee8:	b21b      	sxth	r3, r3
   2deea:	b29a      	uxth	r2, r3
   2deec:	2310      	movs	r3, #16
   2deee:	18fb      	adds	r3, r7, r3
   2def0:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   2def2:	4b25      	ldr	r3, [pc, #148]	; (2df88 <ConnectNetwork+0xfc>)
   2def4:	681b      	ldr	r3, [r3, #0]
   2def6:	001a      	movs	r2, r3
   2def8:	2310      	movs	r3, #16
   2defa:	18fb      	adds	r3, r7, r3
   2defc:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   2defe:	68fb      	ldr	r3, [r7, #12]
   2df00:	681b      	ldr	r3, [r3, #0]
   2df02:	2b00      	cmp	r3, #0
   2df04:	da0a      	bge.n	2df1c <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   2df06:	683b      	ldr	r3, [r7, #0]
   2df08:	b2db      	uxtb	r3, r3
   2df0a:	001a      	movs	r2, r3
   2df0c:	2101      	movs	r1, #1
   2df0e:	2002      	movs	r0, #2
   2df10:	4b1e      	ldr	r3, [pc, #120]	; (2df8c <ConnectNetwork+0x100>)
   2df12:	4798      	blx	r3
   2df14:	0003      	movs	r3, r0
   2df16:	001a      	movs	r2, r3
   2df18:	68fb      	ldr	r3, [r7, #12]
   2df1a:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   2df1c:	68fb      	ldr	r3, [r7, #12]
   2df1e:	681b      	ldr	r3, [r3, #0]
   2df20:	3301      	adds	r3, #1
   2df22:	d108      	bne.n	2df36 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   2df24:	68fb      	ldr	r3, [r7, #12]
   2df26:	681b      	ldr	r3, [r3, #0]
   2df28:	b25b      	sxtb	r3, r3
   2df2a:	0018      	movs	r0, r3
   2df2c:	4b18      	ldr	r3, [pc, #96]	; (2df90 <ConnectNetwork+0x104>)
   2df2e:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   2df30:	2309      	movs	r3, #9
   2df32:	425b      	negs	r3, r3
   2df34:	e01c      	b.n	2df70 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   2df36:	68fb      	ldr	r3, [r7, #12]
   2df38:	681b      	ldr	r3, [r3, #0]
   2df3a:	b25b      	sxtb	r3, r3
   2df3c:	2210      	movs	r2, #16
   2df3e:	18b9      	adds	r1, r7, r2
   2df40:	2210      	movs	r2, #16
   2df42:	0018      	movs	r0, r3
   2df44:	4b13      	ldr	r3, [pc, #76]	; (2df94 <ConnectNetwork+0x108>)
   2df46:	4798      	blx	r3
   2df48:	1e03      	subs	r3, r0, #0
   2df4a:	d002      	beq.n	2df52 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   2df4c:	2309      	movs	r3, #9
   2df4e:	425b      	negs	r3, r3
   2df50:	e00e      	b.n	2df70 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   2df52:	4b11      	ldr	r3, [pc, #68]	; (2df98 <ConnectNetwork+0x10c>)
   2df54:	2200      	movs	r2, #0
   2df56:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   2df58:	e002      	b.n	2df60 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   2df5a:	2000      	movs	r0, #0
   2df5c:	4b09      	ldr	r3, [pc, #36]	; (2df84 <ConnectNetwork+0xf8>)
   2df5e:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   2df60:	4b0d      	ldr	r3, [pc, #52]	; (2df98 <ConnectNetwork+0x10c>)
   2df62:	781b      	ldrb	r3, [r3, #0]
   2df64:	2201      	movs	r2, #1
   2df66:	4053      	eors	r3, r2
   2df68:	b2db      	uxtb	r3, r3
   2df6a:	2b00      	cmp	r3, #0
   2df6c:	d1f5      	bne.n	2df5a <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   2df6e:	2300      	movs	r3, #0
   2df70:	0018      	movs	r0, r3
   2df72:	46bd      	mov	sp, r7
   2df74:	b008      	add	sp, #32
   2df76:	bd80      	pop	{r7, pc}
   2df78:	2000419c 	.word	0x2000419c
   2df7c:	200042a8 	.word	0x200042a8
   2df80:	00024755 	.word	0x00024755
   2df84:	000208d5 	.word	0x000208d5
   2df88:	20004194 	.word	0x20004194
   2df8c:	00023f01 	.word	0x00023f01
   2df90:	0002450d 	.word	0x0002450d
   2df94:	00024115 	.word	0x00024115
   2df98:	2000419d 	.word	0x2000419d

0002df9c <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   2df9c:	b580      	push	{r7, lr}
   2df9e:	b084      	sub	sp, #16
   2dfa0:	af00      	add	r7, sp, #0
   2dfa2:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   2dfa4:	687b      	ldr	r3, [r7, #4]
   2dfa6:	2b00      	cmp	r3, #0
   2dfa8:	d022      	beq.n	2dff0 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2dfaa:	2300      	movs	r3, #0
   2dfac:	60fb      	str	r3, [r7, #12]
   2dfae:	e01b      	b.n	2dfe8 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   2dfb0:	4a11      	ldr	r2, [pc, #68]	; (2dff8 <allocateClient+0x5c>)
   2dfb2:	68fb      	ldr	r3, [r7, #12]
   2dfb4:	2164      	movs	r1, #100	; 0x64
   2dfb6:	434b      	muls	r3, r1
   2dfb8:	18d3      	adds	r3, r2, r3
   2dfba:	3360      	adds	r3, #96	; 0x60
   2dfbc:	681b      	ldr	r3, [r3, #0]
   2dfbe:	2b00      	cmp	r3, #0
   2dfc0:	d10f      	bne.n	2dfe2 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   2dfc2:	4a0d      	ldr	r2, [pc, #52]	; (2dff8 <allocateClient+0x5c>)
   2dfc4:	68fb      	ldr	r3, [r7, #12]
   2dfc6:	2164      	movs	r1, #100	; 0x64
   2dfc8:	434b      	muls	r3, r1
   2dfca:	18d3      	adds	r3, r2, r3
   2dfcc:	3360      	adds	r3, #96	; 0x60
   2dfce:	687a      	ldr	r2, [r7, #4]
   2dfd0:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   2dfd2:	68fb      	ldr	r3, [r7, #12]
   2dfd4:	2264      	movs	r2, #100	; 0x64
   2dfd6:	435a      	muls	r2, r3
   2dfd8:	4b07      	ldr	r3, [pc, #28]	; (2dff8 <allocateClient+0x5c>)
   2dfda:	18d2      	adds	r2, r2, r3
   2dfdc:	687b      	ldr	r3, [r7, #4]
   2dfde:	61da      	str	r2, [r3, #28]
			return;
   2dfe0:	e007      	b.n	2dff2 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2dfe2:	68fb      	ldr	r3, [r7, #12]
   2dfe4:	3301      	adds	r3, #1
   2dfe6:	60fb      	str	r3, [r7, #12]
   2dfe8:	68fb      	ldr	r3, [r7, #12]
   2dfea:	2b06      	cmp	r3, #6
   2dfec:	d9e0      	bls.n	2dfb0 <allocateClient+0x14>
   2dfee:	e000      	b.n	2dff2 <allocateClient+0x56>
		return;
   2dff0:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   2dff2:	46bd      	mov	sp, r7
   2dff4:	b004      	add	sp, #16
   2dff6:	bd80      	pop	{r7, pc}
   2dff8:	200042ac 	.word	0x200042ac

0002dffc <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   2dffc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dffe:	b089      	sub	sp, #36	; 0x24
   2e000:	af04      	add	r7, sp, #16
   2e002:	6078      	str	r0, [r7, #4]
   2e004:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   2e006:	687b      	ldr	r3, [r7, #4]
   2e008:	2b00      	cmp	r3, #0
   2e00a:	d00a      	beq.n	2e022 <mqtt_init+0x26>
   2e00c:	683b      	ldr	r3, [r7, #0]
   2e00e:	2b00      	cmp	r3, #0
   2e010:	d007      	beq.n	2e022 <mqtt_init+0x26>
   2e012:	683b      	ldr	r3, [r7, #0]
   2e014:	691b      	ldr	r3, [r3, #16]
   2e016:	2b00      	cmp	r3, #0
   2e018:	d003      	beq.n	2e022 <mqtt_init+0x26>
   2e01a:	683b      	ldr	r3, [r7, #0]
   2e01c:	689b      	ldr	r3, [r3, #8]
   2e01e:	2b00      	cmp	r3, #0
   2e020:	d102      	bne.n	2e028 <mqtt_init+0x2c>
		return FAILURE;
   2e022:	2301      	movs	r3, #1
   2e024:	425b      	negs	r3, r3
   2e026:	e034      	b.n	2e092 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   2e028:	683b      	ldr	r3, [r7, #0]
   2e02a:	889b      	ldrh	r3, [r3, #4]
   2e02c:	001a      	movs	r2, r3
   2e02e:	23fa      	movs	r3, #250	; 0xfa
   2e030:	009b      	lsls	r3, r3, #2
   2e032:	4353      	muls	r3, r2
   2e034:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   2e036:	687b      	ldr	r3, [r7, #4]
   2e038:	3320      	adds	r3, #32
   2e03a:	0018      	movs	r0, r3
   2e03c:	4b17      	ldr	r3, [pc, #92]	; (2e09c <mqtt_init+0xa0>)
   2e03e:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   2e040:	687b      	ldr	r3, [r7, #4]
   2e042:	3304      	adds	r3, #4
   2e044:	6839      	ldr	r1, [r7, #0]
   2e046:	2218      	movs	r2, #24
   2e048:	0018      	movs	r0, r3
   2e04a:	4b15      	ldr	r3, [pc, #84]	; (2e0a0 <mqtt_init+0xa4>)
   2e04c:	4798      	blx	r3
	allocateClient(module);
   2e04e:	687b      	ldr	r3, [r7, #4]
   2e050:	0018      	movs	r0, r3
   2e052:	4b14      	ldr	r3, [pc, #80]	; (2e0a4 <mqtt_init+0xa8>)
   2e054:	4798      	blx	r3
	
	if(module->client)
   2e056:	687b      	ldr	r3, [r7, #4]
   2e058:	69db      	ldr	r3, [r3, #28]
   2e05a:	2b00      	cmp	r3, #0
   2e05c:	d017      	beq.n	2e08e <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   2e05e:	687b      	ldr	r3, [r7, #4]
   2e060:	69d8      	ldr	r0, [r3, #28]
   2e062:	687b      	ldr	r3, [r7, #4]
   2e064:	3320      	adds	r3, #32
   2e066:	001c      	movs	r4, r3
   2e068:	683b      	ldr	r3, [r7, #0]
   2e06a:	691e      	ldr	r6, [r3, #16]
   2e06c:	683b      	ldr	r3, [r7, #0]
   2e06e:	695a      	ldr	r2, [r3, #20]
   2e070:	683b      	ldr	r3, [r7, #0]
   2e072:	6899      	ldr	r1, [r3, #8]
   2e074:	683b      	ldr	r3, [r7, #0]
   2e076:	68db      	ldr	r3, [r3, #12]
   2e078:	68fd      	ldr	r5, [r7, #12]
   2e07a:	9302      	str	r3, [sp, #8]
   2e07c:	9101      	str	r1, [sp, #4]
   2e07e:	9200      	str	r2, [sp, #0]
   2e080:	0033      	movs	r3, r6
   2e082:	002a      	movs	r2, r5
   2e084:	0021      	movs	r1, r4
   2e086:	4c08      	ldr	r4, [pc, #32]	; (2e0a8 <mqtt_init+0xac>)
   2e088:	47a0      	blx	r4
		return SUCCESS;
   2e08a:	2300      	movs	r3, #0
   2e08c:	e001      	b.n	2e092 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   2e08e:	2301      	movs	r3, #1
   2e090:	425b      	negs	r3, r3
}
   2e092:	0018      	movs	r0, r3
   2e094:	46bd      	mov	sp, r7
   2e096:	b005      	add	sp, #20
   2e098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e09a:	46c0      	nop			; (mov r8, r8)
   2e09c:	0002de55 	.word	0x0002de55
   2e0a0:	00033169 	.word	0x00033169
   2e0a4:	0002df9d 	.word	0x0002df9d
   2e0a8:	0002cecd 	.word	0x0002cecd

0002e0ac <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   2e0ac:	b580      	push	{r7, lr}
   2e0ae:	b082      	sub	sp, #8
   2e0b0:	af00      	add	r7, sp, #0
   2e0b2:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   2e0b4:	687b      	ldr	r3, [r7, #4]
   2e0b6:	4a0c      	ldr	r2, [pc, #48]	; (2e0e8 <mqtt_get_config_defaults+0x3c>)
   2e0b8:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2e0ba:	687b      	ldr	r3, [r7, #4]
   2e0bc:	2200      	movs	r2, #0
   2e0be:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   2e0c0:	687b      	ldr	r3, [r7, #4]
   2e0c2:	223c      	movs	r2, #60	; 0x3c
   2e0c4:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   2e0c6:	687b      	ldr	r3, [r7, #4]
   2e0c8:	2200      	movs	r2, #0
   2e0ca:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   2e0cc:	687b      	ldr	r3, [r7, #4]
   2e0ce:	2200      	movs	r2, #0
   2e0d0:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   2e0d2:	687b      	ldr	r3, [r7, #4]
   2e0d4:	2200      	movs	r2, #0
   2e0d6:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   2e0d8:	687b      	ldr	r3, [r7, #4]
   2e0da:	2200      	movs	r2, #0
   2e0dc:	615a      	str	r2, [r3, #20]
}
   2e0de:	46c0      	nop			; (mov r8, r8)
   2e0e0:	46bd      	mov	sp, r7
   2e0e2:	b002      	add	sp, #8
   2e0e4:	bd80      	pop	{r7, pc}
   2e0e6:	46c0      	nop			; (mov r8, r8)
   2e0e8:	0000075b 	.word	0x0000075b

0002e0ec <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   2e0ec:	b580      	push	{r7, lr}
   2e0ee:	b082      	sub	sp, #8
   2e0f0:	af00      	add	r7, sp, #0
   2e0f2:	6078      	str	r0, [r7, #4]
   2e0f4:	6039      	str	r1, [r7, #0]
	if(module)
   2e0f6:	687b      	ldr	r3, [r7, #4]
   2e0f8:	2b00      	cmp	r3, #0
   2e0fa:	d004      	beq.n	2e106 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   2e0fc:	687b      	ldr	r3, [r7, #4]
   2e0fe:	683a      	ldr	r2, [r7, #0]
   2e100:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   2e102:	2300      	movs	r3, #0
   2e104:	e001      	b.n	2e10a <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   2e106:	2301      	movs	r3, #1
   2e108:	425b      	negs	r3, r3
}
   2e10a:	0018      	movs	r0, r3
   2e10c:	46bd      	mov	sp, r7
   2e10e:	b002      	add	sp, #8
   2e110:	bd80      	pop	{r7, pc}
	...

0002e114 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2e114:	b580      	push	{r7, lr}
   2e116:	b082      	sub	sp, #8
   2e118:	af00      	add	r7, sp, #0
   2e11a:	603a      	str	r2, [r7, #0]
   2e11c:	1dfb      	adds	r3, r7, #7
   2e11e:	1c02      	adds	r2, r0, #0
   2e120:	701a      	strb	r2, [r3, #0]
   2e122:	1dbb      	adds	r3, r7, #6
   2e124:	1c0a      	adds	r2, r1, #0
   2e126:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   2e128:	683a      	ldr	r2, [r7, #0]
   2e12a:	1dbb      	adds	r3, r7, #6
   2e12c:	7819      	ldrb	r1, [r3, #0]
   2e12e:	1dfb      	adds	r3, r7, #7
   2e130:	781b      	ldrb	r3, [r3, #0]
   2e132:	b25b      	sxtb	r3, r3
   2e134:	0018      	movs	r0, r3
   2e136:	4b03      	ldr	r3, [pc, #12]	; (2e144 <mqtt_socket_event_handler+0x30>)
   2e138:	4798      	blx	r3
}
   2e13a:	46c0      	nop			; (mov r8, r8)
   2e13c:	46bd      	mov	sp, r7
   2e13e:	b002      	add	sp, #8
   2e140:	bd80      	pop	{r7, pc}
   2e142:	46c0      	nop			; (mov r8, r8)
   2e144:	0002db91 	.word	0x0002db91

0002e148 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   2e148:	b580      	push	{r7, lr}
   2e14a:	b082      	sub	sp, #8
   2e14c:	af00      	add	r7, sp, #0
   2e14e:	6078      	str	r0, [r7, #4]
   2e150:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   2e152:	683a      	ldr	r2, [r7, #0]
   2e154:	687b      	ldr	r3, [r7, #4]
   2e156:	0011      	movs	r1, r2
   2e158:	0018      	movs	r0, r3
   2e15a:	4b03      	ldr	r3, [pc, #12]	; (2e168 <mqtt_socket_resolve_handler+0x20>)
   2e15c:	4798      	blx	r3
}
   2e15e:	46c0      	nop			; (mov r8, r8)
   2e160:	46bd      	mov	sp, r7
   2e162:	b002      	add	sp, #8
   2e164:	bd80      	pop	{r7, pc}
   2e166:	46c0      	nop			; (mov r8, r8)
   2e168:	0002db41 	.word	0x0002db41

0002e16c <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   2e16c:	b590      	push	{r4, r7, lr}
   2e16e:	b085      	sub	sp, #20
   2e170:	af00      	add	r7, sp, #0
   2e172:	6078      	str	r0, [r7, #4]
   2e174:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   2e176:	687b      	ldr	r3, [r7, #4]
   2e178:	3320      	adds	r3, #32
   2e17a:	0018      	movs	r0, r3
   2e17c:	687b      	ldr	r3, [r7, #4]
   2e17e:	889b      	ldrh	r3, [r3, #4]
   2e180:	001a      	movs	r2, r3
   2e182:	687b      	ldr	r3, [r7, #4]
   2e184:	799b      	ldrb	r3, [r3, #6]
   2e186:	6839      	ldr	r1, [r7, #0]
   2e188:	4c09      	ldr	r4, [pc, #36]	; (2e1b0 <mqtt_connect+0x44>)
   2e18a:	47a0      	blx	r4
   2e18c:	0003      	movs	r3, r0
   2e18e:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   2e190:	687b      	ldr	r3, [r7, #4]
   2e192:	681b      	ldr	r3, [r3, #0]
   2e194:	2b00      	cmp	r3, #0
   2e196:	d006      	beq.n	2e1a6 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   2e198:	687b      	ldr	r3, [r7, #4]
   2e19a:	681b      	ldr	r3, [r3, #0]
   2e19c:	220c      	movs	r2, #12
   2e19e:	18ba      	adds	r2, r7, r2
   2e1a0:	6878      	ldr	r0, [r7, #4]
   2e1a2:	2100      	movs	r1, #0
   2e1a4:	4798      	blx	r3
	return connResult.sock_connected.result;
   2e1a6:	68fb      	ldr	r3, [r7, #12]
}
   2e1a8:	0018      	movs	r0, r3
   2e1aa:	46bd      	mov	sp, r7
   2e1ac:	b005      	add	sp, #20
   2e1ae:	bd90      	pop	{r4, r7, pc}
   2e1b0:	0002de8d 	.word	0x0002de8d

0002e1b4 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   2e1b4:	b580      	push	{r7, lr}
   2e1b6:	b09c      	sub	sp, #112	; 0x70
   2e1b8:	af00      	add	r7, sp, #0
   2e1ba:	60f8      	str	r0, [r7, #12]
   2e1bc:	607a      	str	r2, [r7, #4]
   2e1be:	603b      	str	r3, [r7, #0]
   2e1c0:	230b      	movs	r3, #11
   2e1c2:	18fb      	adds	r3, r7, r3
   2e1c4:	1c0a      	adds	r2, r1, #0
   2e1c6:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   2e1c8:	2310      	movs	r3, #16
   2e1ca:	18fa      	adds	r2, r7, r3
   2e1cc:	4b31      	ldr	r3, [pc, #196]	; (2e294 <mqtt_connect_broker+0xe0>)
   2e1ce:	0010      	movs	r0, r2
   2e1d0:	0019      	movs	r1, r3
   2e1d2:	2358      	movs	r3, #88	; 0x58
   2e1d4:	001a      	movs	r2, r3
   2e1d6:	4b30      	ldr	r3, [pc, #192]	; (2e298 <mqtt_connect_broker+0xe4>)
   2e1d8:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   2e1da:	2310      	movs	r3, #16
   2e1dc:	18fb      	adds	r3, r7, r3
   2e1de:	2204      	movs	r2, #4
   2e1e0:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   2e1e2:	2310      	movs	r3, #16
   2e1e4:	18fb      	adds	r3, r7, r3
   2e1e6:	6fba      	ldr	r2, [r7, #120]	; 0x78
   2e1e8:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   2e1ea:	2310      	movs	r3, #16
   2e1ec:	18fb      	adds	r3, r7, r3
   2e1ee:	687a      	ldr	r2, [r7, #4]
   2e1f0:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   2e1f2:	2310      	movs	r3, #16
   2e1f4:	18fb      	adds	r3, r7, r3
   2e1f6:	683a      	ldr	r2, [r7, #0]
   2e1f8:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   2e1fa:	2310      	movs	r3, #16
   2e1fc:	18fb      	adds	r3, r7, r3
   2e1fe:	220b      	movs	r2, #11
   2e200:	18ba      	adds	r2, r7, r2
   2e202:	7812      	ldrb	r2, [r2, #0]
   2e204:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   2e206:	2310      	movs	r3, #16
   2e208:	18fb      	adds	r3, r7, r3
   2e20a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   2e20c:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   2e20e:	2310      	movs	r3, #16
   2e210:	18fb      	adds	r3, r7, r3
   2e212:	2280      	movs	r2, #128	; 0x80
   2e214:	18ba      	adds	r2, r7, r2
   2e216:	6812      	ldr	r2, [r2, #0]
   2e218:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   2e21a:	2310      	movs	r3, #16
   2e21c:	18fb      	adds	r3, r7, r3
   2e21e:	228c      	movs	r2, #140	; 0x8c
   2e220:	18ba      	adds	r2, r7, r2
   2e222:	213c      	movs	r1, #60	; 0x3c
   2e224:	7812      	ldrb	r2, [r2, #0]
   2e226:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   2e228:	2310      	movs	r3, #16
   2e22a:	18fb      	adds	r3, r7, r3
   2e22c:	2288      	movs	r2, #136	; 0x88
   2e22e:	18ba      	adds	r2, r7, r2
   2e230:	213d      	movs	r1, #61	; 0x3d
   2e232:	7812      	ldrb	r2, [r2, #0]
   2e234:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   2e236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   2e238:	2b00      	cmp	r3, #0
   2e23a:	d008      	beq.n	2e24e <mqtt_connect_broker+0x9a>
   2e23c:	2380      	movs	r3, #128	; 0x80
   2e23e:	18fb      	adds	r3, r7, r3
   2e240:	681b      	ldr	r3, [r3, #0]
   2e242:	2b00      	cmp	r3, #0
   2e244:	d003      	beq.n	2e24e <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   2e246:	2310      	movs	r3, #16
   2e248:	18fb      	adds	r3, r7, r3
   2e24a:	2201      	movs	r2, #1
   2e24c:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   2e24e:	68fb      	ldr	r3, [r7, #12]
   2e250:	69db      	ldr	r3, [r3, #28]
   2e252:	2210      	movs	r2, #16
   2e254:	18ba      	adds	r2, r7, r2
   2e256:	0011      	movs	r1, r2
   2e258:	0018      	movs	r0, r3
   2e25a:	4b10      	ldr	r3, [pc, #64]	; (2e29c <mqtt_connect_broker+0xe8>)
   2e25c:	4798      	blx	r3
   2e25e:	0003      	movs	r3, r0
   2e260:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   2e262:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2e264:	b2da      	uxtb	r2, r3
   2e266:	2368      	movs	r3, #104	; 0x68
   2e268:	18fb      	adds	r3, r7, r3
   2e26a:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   2e26c:	68fb      	ldr	r3, [r7, #12]
   2e26e:	681b      	ldr	r3, [r3, #0]
   2e270:	2b00      	cmp	r3, #0
   2e272:	d006      	beq.n	2e282 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   2e274:	68fb      	ldr	r3, [r7, #12]
   2e276:	681b      	ldr	r3, [r3, #0]
   2e278:	2268      	movs	r2, #104	; 0x68
   2e27a:	18ba      	adds	r2, r7, r2
   2e27c:	68f8      	ldr	r0, [r7, #12]
   2e27e:	2101      	movs	r1, #1
   2e280:	4798      	blx	r3
	
	module->isConnected = true;
   2e282:	68fb      	ldr	r3, [r7, #12]
   2e284:	2234      	movs	r2, #52	; 0x34
   2e286:	2101      	movs	r1, #1
   2e288:	5499      	strb	r1, [r3, r2]
	return rc;
   2e28a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   2e28c:	0018      	movs	r0, r3
   2e28e:	46bd      	mov	sp, r7
   2e290:	b01c      	add	sp, #112	; 0x70
   2e292:	bd80      	pop	{r7, pc}
   2e294:	000380bc 	.word	0x000380bc
   2e298:	00033169 	.word	0x00033169
   2e29c:	0002d5dd 	.word	0x0002d5dd

0002e2a0 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   2e2a0:	b580      	push	{r7, lr}
   2e2a2:	b084      	sub	sp, #16
   2e2a4:	af00      	add	r7, sp, #0
   2e2a6:	6078      	str	r0, [r7, #4]
   2e2a8:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   2e2aa:	687b      	ldr	r3, [r7, #4]
   2e2ac:	69db      	ldr	r3, [r3, #28]
   2e2ae:	0018      	movs	r0, r3
   2e2b0:	4b0c      	ldr	r3, [pc, #48]	; (2e2e4 <mqtt_disconnect+0x44>)
   2e2b2:	4798      	blx	r3
   2e2b4:	0003      	movs	r3, r0
   2e2b6:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   2e2b8:	68fb      	ldr	r3, [r7, #12]
   2e2ba:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   2e2bc:	687b      	ldr	r3, [r7, #4]
   2e2be:	681b      	ldr	r3, [r3, #0]
   2e2c0:	2b00      	cmp	r3, #0
   2e2c2:	d006      	beq.n	2e2d2 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   2e2c4:	687b      	ldr	r3, [r7, #4]
   2e2c6:	681b      	ldr	r3, [r3, #0]
   2e2c8:	2208      	movs	r2, #8
   2e2ca:	18ba      	adds	r2, r7, r2
   2e2cc:	6878      	ldr	r0, [r7, #4]
   2e2ce:	2105      	movs	r1, #5
   2e2d0:	4798      	blx	r3
	
	module->isConnected = false;
   2e2d2:	687b      	ldr	r3, [r7, #4]
   2e2d4:	2234      	movs	r2, #52	; 0x34
   2e2d6:	2100      	movs	r1, #0
   2e2d8:	5499      	strb	r1, [r3, r2]
	return rc;
   2e2da:	68fb      	ldr	r3, [r7, #12]
}
   2e2dc:	0018      	movs	r0, r3
   2e2de:	46bd      	mov	sp, r7
   2e2e0:	b004      	add	sp, #16
   2e2e2:	bd80      	pop	{r7, pc}
   2e2e4:	0002da69 	.word	0x0002da69

0002e2e8 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   2e2e8:	b580      	push	{r7, lr}
   2e2ea:	b08a      	sub	sp, #40	; 0x28
   2e2ec:	af00      	add	r7, sp, #0
   2e2ee:	60f8      	str	r0, [r7, #12]
   2e2f0:	60b9      	str	r1, [r7, #8]
   2e2f2:	607a      	str	r2, [r7, #4]
   2e2f4:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   2e2f6:	2314      	movs	r3, #20
   2e2f8:	18fb      	adds	r3, r7, r3
   2e2fa:	2230      	movs	r2, #48	; 0x30
   2e2fc:	18ba      	adds	r2, r7, r2
   2e2fe:	7812      	ldrb	r2, [r2, #0]
   2e300:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   2e302:	2314      	movs	r3, #20
   2e304:	18fb      	adds	r3, r7, r3
   2e306:	687a      	ldr	r2, [r7, #4]
   2e308:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   2e30a:	2314      	movs	r3, #20
   2e30c:	18fb      	adds	r3, r7, r3
   2e30e:	683a      	ldr	r2, [r7, #0]
   2e310:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   2e312:	2314      	movs	r3, #20
   2e314:	18fb      	adds	r3, r7, r3
   2e316:	2234      	movs	r2, #52	; 0x34
   2e318:	18ba      	adds	r2, r7, r2
   2e31a:	7812      	ldrb	r2, [r2, #0]
   2e31c:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   2e31e:	68fb      	ldr	r3, [r7, #12]
   2e320:	69db      	ldr	r3, [r3, #28]
   2e322:	2214      	movs	r2, #20
   2e324:	18ba      	adds	r2, r7, r2
   2e326:	68b9      	ldr	r1, [r7, #8]
   2e328:	0018      	movs	r0, r3
   2e32a:	4b09      	ldr	r3, [pc, #36]	; (2e350 <mqtt_publish+0x68>)
   2e32c:	4798      	blx	r3
   2e32e:	0003      	movs	r3, r0
   2e330:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   2e332:	68fb      	ldr	r3, [r7, #12]
   2e334:	681b      	ldr	r3, [r3, #0]
   2e336:	2b00      	cmp	r3, #0
   2e338:	d005      	beq.n	2e346 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   2e33a:	68fb      	ldr	r3, [r7, #12]
   2e33c:	681b      	ldr	r3, [r3, #0]
   2e33e:	68f8      	ldr	r0, [r7, #12]
   2e340:	2200      	movs	r2, #0
   2e342:	2102      	movs	r1, #2
   2e344:	4798      	blx	r3
	
	return rc;
   2e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e348:	0018      	movs	r0, r3
   2e34a:	46bd      	mov	sp, r7
   2e34c:	b00a      	add	sp, #40	; 0x28
   2e34e:	bd80      	pop	{r7, pc}
   2e350:	0002d8a9 	.word	0x0002d8a9

0002e354 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   2e354:	b590      	push	{r4, r7, lr}
   2e356:	b087      	sub	sp, #28
   2e358:	af00      	add	r7, sp, #0
   2e35a:	60f8      	str	r0, [r7, #12]
   2e35c:	60b9      	str	r1, [r7, #8]
   2e35e:	603b      	str	r3, [r7, #0]
   2e360:	1dfb      	adds	r3, r7, #7
   2e362:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   2e364:	68fb      	ldr	r3, [r7, #12]
   2e366:	69d8      	ldr	r0, [r3, #28]
   2e368:	683c      	ldr	r4, [r7, #0]
   2e36a:	1dfb      	adds	r3, r7, #7
   2e36c:	781a      	ldrb	r2, [r3, #0]
   2e36e:	68b9      	ldr	r1, [r7, #8]
   2e370:	0023      	movs	r3, r4
   2e372:	4c09      	ldr	r4, [pc, #36]	; (2e398 <mqtt_subscribe+0x44>)
   2e374:	47a0      	blx	r4
   2e376:	0003      	movs	r3, r0
   2e378:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   2e37a:	68fb      	ldr	r3, [r7, #12]
   2e37c:	681b      	ldr	r3, [r3, #0]
   2e37e:	2b00      	cmp	r3, #0
   2e380:	d005      	beq.n	2e38e <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   2e382:	68fb      	ldr	r3, [r7, #12]
   2e384:	681b      	ldr	r3, [r3, #0]
   2e386:	68f8      	ldr	r0, [r7, #12]
   2e388:	2200      	movs	r2, #0
   2e38a:	2103      	movs	r1, #3
   2e38c:	4798      	blx	r3
	
	return rc;
   2e38e:	697b      	ldr	r3, [r7, #20]
}
   2e390:	0018      	movs	r0, r3
   2e392:	46bd      	mov	sp, r7
   2e394:	b007      	add	sp, #28
   2e396:	bd90      	pop	{r4, r7, pc}
   2e398:	0002d71d 	.word	0x0002d71d

0002e39c <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   2e39c:	b580      	push	{r7, lr}
   2e39e:	b082      	sub	sp, #8
   2e3a0:	af00      	add	r7, sp, #0
   2e3a2:	6078      	str	r0, [r7, #4]
   2e3a4:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   2e3a6:	687b      	ldr	r3, [r7, #4]
   2e3a8:	69db      	ldr	r3, [r3, #28]
   2e3aa:	683a      	ldr	r2, [r7, #0]
   2e3ac:	0011      	movs	r1, r2
   2e3ae:	0018      	movs	r0, r3
   2e3b0:	4b03      	ldr	r3, [pc, #12]	; (2e3c0 <mqtt_yield+0x24>)
   2e3b2:	4798      	blx	r3
   2e3b4:	0003      	movs	r3, r0
   2e3b6:	0018      	movs	r0, r3
   2e3b8:	46bd      	mov	sp, r7
   2e3ba:	b002      	add	sp, #8
   2e3bc:	bd80      	pop	{r7, pc}
   2e3be:	46c0      	nop			; (mov r8, r8)
   2e3c0:	0002d525 	.word	0x0002d525

0002e3c4 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   2e3c4:	b590      	push	{r4, r7, lr}
   2e3c6:	b085      	sub	sp, #20
   2e3c8:	af00      	add	r7, sp, #0
   2e3ca:	6078      	str	r0, [r7, #4]
	int len = 0;
   2e3cc:	2300      	movs	r3, #0
   2e3ce:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   2e3d0:	687b      	ldr	r3, [r7, #4]
   2e3d2:	7a1b      	ldrb	r3, [r3, #8]
   2e3d4:	2b03      	cmp	r3, #3
   2e3d6:	d102      	bne.n	2e3de <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   2e3d8:	230c      	movs	r3, #12
   2e3da:	60fb      	str	r3, [r7, #12]
   2e3dc:	e005      	b.n	2e3ea <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   2e3de:	687b      	ldr	r3, [r7, #4]
   2e3e0:	7a1b      	ldrb	r3, [r3, #8]
   2e3e2:	2b04      	cmp	r3, #4
   2e3e4:	d101      	bne.n	2e3ea <MQTTSerialize_connectLength+0x26>
		len = 10;
   2e3e6:	230a      	movs	r3, #10
   2e3e8:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   2e3ea:	687b      	ldr	r3, [r7, #4]
   2e3ec:	68d8      	ldr	r0, [r3, #12]
   2e3ee:	6919      	ldr	r1, [r3, #16]
   2e3f0:	695a      	ldr	r2, [r3, #20]
   2e3f2:	4b25      	ldr	r3, [pc, #148]	; (2e488 <MQTTSerialize_connectLength+0xc4>)
   2e3f4:	4798      	blx	r3
   2e3f6:	0003      	movs	r3, r0
   2e3f8:	3302      	adds	r3, #2
   2e3fa:	68fa      	ldr	r2, [r7, #12]
   2e3fc:	18d3      	adds	r3, r2, r3
   2e3fe:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   2e400:	687b      	ldr	r3, [r7, #4]
   2e402:	7edb      	ldrb	r3, [r3, #27]
   2e404:	2b00      	cmp	r3, #0
   2e406:	d013      	beq.n	2e430 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   2e408:	687b      	ldr	r3, [r7, #4]
   2e40a:	6a58      	ldr	r0, [r3, #36]	; 0x24
   2e40c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   2e40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e410:	4b1d      	ldr	r3, [pc, #116]	; (2e488 <MQTTSerialize_connectLength+0xc4>)
   2e412:	4798      	blx	r3
   2e414:	0003      	movs	r3, r0
   2e416:	1c9c      	adds	r4, r3, #2
   2e418:	687b      	ldr	r3, [r7, #4]
   2e41a:	6b18      	ldr	r0, [r3, #48]	; 0x30
   2e41c:	6b59      	ldr	r1, [r3, #52]	; 0x34
   2e41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2e420:	4b19      	ldr	r3, [pc, #100]	; (2e488 <MQTTSerialize_connectLength+0xc4>)
   2e422:	4798      	blx	r3
   2e424:	0003      	movs	r3, r0
   2e426:	18e3      	adds	r3, r4, r3
   2e428:	3302      	adds	r3, #2
   2e42a:	68fa      	ldr	r2, [r7, #12]
   2e42c:	18d3      	adds	r3, r2, r3
   2e42e:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   2e430:	687b      	ldr	r3, [r7, #4]
   2e432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2e434:	2b00      	cmp	r3, #0
   2e436:	d103      	bne.n	2e440 <MQTTSerialize_connectLength+0x7c>
   2e438:	687b      	ldr	r3, [r7, #4]
   2e43a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2e43c:	2b00      	cmp	r3, #0
   2e43e:	d00a      	beq.n	2e456 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   2e440:	687b      	ldr	r3, [r7, #4]
   2e442:	6c18      	ldr	r0, [r3, #64]	; 0x40
   2e444:	6c59      	ldr	r1, [r3, #68]	; 0x44
   2e446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   2e448:	4b0f      	ldr	r3, [pc, #60]	; (2e488 <MQTTSerialize_connectLength+0xc4>)
   2e44a:	4798      	blx	r3
   2e44c:	0003      	movs	r3, r0
   2e44e:	3302      	adds	r3, #2
   2e450:	68fa      	ldr	r2, [r7, #12]
   2e452:	18d3      	adds	r3, r2, r3
   2e454:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   2e456:	687b      	ldr	r3, [r7, #4]
   2e458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e45a:	2b00      	cmp	r3, #0
   2e45c:	d103      	bne.n	2e466 <MQTTSerialize_connectLength+0xa2>
   2e45e:	687b      	ldr	r3, [r7, #4]
   2e460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2e462:	2b00      	cmp	r3, #0
   2e464:	d00a      	beq.n	2e47c <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   2e466:	687b      	ldr	r3, [r7, #4]
   2e468:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   2e46a:	6d19      	ldr	r1, [r3, #80]	; 0x50
   2e46c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   2e46e:	4b06      	ldr	r3, [pc, #24]	; (2e488 <MQTTSerialize_connectLength+0xc4>)
   2e470:	4798      	blx	r3
   2e472:	0003      	movs	r3, r0
   2e474:	3302      	adds	r3, #2
   2e476:	68fa      	ldr	r2, [r7, #12]
   2e478:	18d3      	adds	r3, r2, r3
   2e47a:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   2e47c:	68fb      	ldr	r3, [r7, #12]
}
   2e47e:	0018      	movs	r0, r3
   2e480:	46bd      	mov	sp, r7
   2e482:	b005      	add	sp, #20
   2e484:	bd90      	pop	{r4, r7, pc}
   2e486:	46c0      	nop			; (mov r8, r8)
   2e488:	0002ee35 	.word	0x0002ee35

0002e48c <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   2e48c:	b590      	push	{r4, r7, lr}
   2e48e:	b08b      	sub	sp, #44	; 0x2c
   2e490:	af00      	add	r7, sp, #0
   2e492:	60f8      	str	r0, [r7, #12]
   2e494:	60b9      	str	r1, [r7, #8]
   2e496:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   2e498:	68fb      	ldr	r3, [r7, #12]
   2e49a:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   2e49c:	2300      	movs	r3, #0
   2e49e:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   2e4a0:	2300      	movs	r3, #0
   2e4a2:	617b      	str	r3, [r7, #20]
	int len = 0;
   2e4a4:	2300      	movs	r3, #0
   2e4a6:	623b      	str	r3, [r7, #32]
	int rc = -1;
   2e4a8:	2301      	movs	r3, #1
   2e4aa:	425b      	negs	r3, r3
   2e4ac:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   2e4ae:	687b      	ldr	r3, [r7, #4]
   2e4b0:	0018      	movs	r0, r3
   2e4b2:	4b8c      	ldr	r3, [pc, #560]	; (2e6e4 <MQTTSerialize_connect+0x258>)
   2e4b4:	4798      	blx	r3
   2e4b6:	0003      	movs	r3, r0
   2e4b8:	623b      	str	r3, [r7, #32]
   2e4ba:	6a3b      	ldr	r3, [r7, #32]
   2e4bc:	0018      	movs	r0, r3
   2e4be:	4b8a      	ldr	r3, [pc, #552]	; (2e6e8 <MQTTSerialize_connect+0x25c>)
   2e4c0:	4798      	blx	r3
   2e4c2:	0002      	movs	r2, r0
   2e4c4:	68bb      	ldr	r3, [r7, #8]
   2e4c6:	429a      	cmp	r2, r3
   2e4c8:	dd03      	ble.n	2e4d2 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2e4ca:	2302      	movs	r3, #2
   2e4cc:	425b      	negs	r3, r3
   2e4ce:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2e4d0:	e103      	b.n	2e6da <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   2e4d2:	2318      	movs	r3, #24
   2e4d4:	18fb      	adds	r3, r7, r3
   2e4d6:	2200      	movs	r2, #0
   2e4d8:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   2e4da:	2318      	movs	r3, #24
   2e4dc:	18fb      	adds	r3, r7, r3
   2e4de:	781a      	ldrb	r2, [r3, #0]
   2e4e0:	210f      	movs	r1, #15
   2e4e2:	400a      	ands	r2, r1
   2e4e4:	1c11      	adds	r1, r2, #0
   2e4e6:	2210      	movs	r2, #16
   2e4e8:	430a      	orrs	r2, r1
   2e4ea:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2e4ec:	2318      	movs	r3, #24
   2e4ee:	18fb      	adds	r3, r7, r3
   2e4f0:	781a      	ldrb	r2, [r3, #0]
   2e4f2:	231c      	movs	r3, #28
   2e4f4:	18fb      	adds	r3, r7, r3
   2e4f6:	0011      	movs	r1, r2
   2e4f8:	0018      	movs	r0, r3
   2e4fa:	4b7c      	ldr	r3, [pc, #496]	; (2e6ec <MQTTSerialize_connect+0x260>)
   2e4fc:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   2e4fe:	69fb      	ldr	r3, [r7, #28]
   2e500:	6a3a      	ldr	r2, [r7, #32]
   2e502:	0011      	movs	r1, r2
   2e504:	0018      	movs	r0, r3
   2e506:	4b7a      	ldr	r3, [pc, #488]	; (2e6f0 <MQTTSerialize_connect+0x264>)
   2e508:	4798      	blx	r3
   2e50a:	0002      	movs	r2, r0
   2e50c:	69fb      	ldr	r3, [r7, #28]
   2e50e:	189b      	adds	r3, r3, r2
   2e510:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   2e512:	687b      	ldr	r3, [r7, #4]
   2e514:	7a1b      	ldrb	r3, [r3, #8]
   2e516:	2b04      	cmp	r3, #4
   2e518:	d10d      	bne.n	2e536 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   2e51a:	4a76      	ldr	r2, [pc, #472]	; (2e6f4 <MQTTSerialize_connect+0x268>)
   2e51c:	231c      	movs	r3, #28
   2e51e:	18fb      	adds	r3, r7, r3
   2e520:	0011      	movs	r1, r2
   2e522:	0018      	movs	r0, r3
   2e524:	4b74      	ldr	r3, [pc, #464]	; (2e6f8 <MQTTSerialize_connect+0x26c>)
   2e526:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   2e528:	231c      	movs	r3, #28
   2e52a:	18fb      	adds	r3, r7, r3
   2e52c:	2104      	movs	r1, #4
   2e52e:	0018      	movs	r0, r3
   2e530:	4b6e      	ldr	r3, [pc, #440]	; (2e6ec <MQTTSerialize_connect+0x260>)
   2e532:	4798      	blx	r3
   2e534:	e00c      	b.n	2e550 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   2e536:	4a71      	ldr	r2, [pc, #452]	; (2e6fc <MQTTSerialize_connect+0x270>)
   2e538:	231c      	movs	r3, #28
   2e53a:	18fb      	adds	r3, r7, r3
   2e53c:	0011      	movs	r1, r2
   2e53e:	0018      	movs	r0, r3
   2e540:	4b6d      	ldr	r3, [pc, #436]	; (2e6f8 <MQTTSerialize_connect+0x26c>)
   2e542:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   2e544:	231c      	movs	r3, #28
   2e546:	18fb      	adds	r3, r7, r3
   2e548:	2103      	movs	r1, #3
   2e54a:	0018      	movs	r0, r3
   2e54c:	4b67      	ldr	r3, [pc, #412]	; (2e6ec <MQTTSerialize_connect+0x260>)
   2e54e:	4798      	blx	r3
	}

	flags.all = 0;
   2e550:	2314      	movs	r3, #20
   2e552:	18fb      	adds	r3, r7, r3
   2e554:	2200      	movs	r2, #0
   2e556:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   2e558:	687b      	ldr	r3, [r7, #4]
   2e55a:	7e9b      	ldrb	r3, [r3, #26]
   2e55c:	1c1a      	adds	r2, r3, #0
   2e55e:	2301      	movs	r3, #1
   2e560:	4013      	ands	r3, r2
   2e562:	b2da      	uxtb	r2, r3
   2e564:	2314      	movs	r3, #20
   2e566:	18fb      	adds	r3, r7, r3
   2e568:	2101      	movs	r1, #1
   2e56a:	400a      	ands	r2, r1
   2e56c:	1890      	adds	r0, r2, r2
   2e56e:	781a      	ldrb	r2, [r3, #0]
   2e570:	2102      	movs	r1, #2
   2e572:	438a      	bics	r2, r1
   2e574:	1c11      	adds	r1, r2, #0
   2e576:	1c02      	adds	r2, r0, #0
   2e578:	430a      	orrs	r2, r1
   2e57a:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   2e57c:	687b      	ldr	r3, [r7, #4]
   2e57e:	7edb      	ldrb	r3, [r3, #27]
   2e580:	1e5a      	subs	r2, r3, #1
   2e582:	4193      	sbcs	r3, r2
   2e584:	b2da      	uxtb	r2, r3
   2e586:	2314      	movs	r3, #20
   2e588:	18fb      	adds	r3, r7, r3
   2e58a:	2101      	movs	r1, #1
   2e58c:	400a      	ands	r2, r1
   2e58e:	0090      	lsls	r0, r2, #2
   2e590:	781a      	ldrb	r2, [r3, #0]
   2e592:	2104      	movs	r1, #4
   2e594:	438a      	bics	r2, r1
   2e596:	1c11      	adds	r1, r2, #0
   2e598:	1c02      	adds	r2, r0, #0
   2e59a:	430a      	orrs	r2, r1
   2e59c:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   2e59e:	2314      	movs	r3, #20
   2e5a0:	18fb      	adds	r3, r7, r3
   2e5a2:	781b      	ldrb	r3, [r3, #0]
   2e5a4:	2204      	movs	r2, #4
   2e5a6:	4013      	ands	r3, r2
   2e5a8:	b2db      	uxtb	r3, r3
   2e5aa:	2b00      	cmp	r3, #0
   2e5ac:	d025      	beq.n	2e5fa <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   2e5ae:	687b      	ldr	r3, [r7, #4]
   2e5b0:	223d      	movs	r2, #61	; 0x3d
   2e5b2:	5c9b      	ldrb	r3, [r3, r2]
   2e5b4:	1c1a      	adds	r2, r3, #0
   2e5b6:	2303      	movs	r3, #3
   2e5b8:	4013      	ands	r3, r2
   2e5ba:	b2da      	uxtb	r2, r3
   2e5bc:	2314      	movs	r3, #20
   2e5be:	18fb      	adds	r3, r7, r3
   2e5c0:	2103      	movs	r1, #3
   2e5c2:	400a      	ands	r2, r1
   2e5c4:	00d0      	lsls	r0, r2, #3
   2e5c6:	781a      	ldrb	r2, [r3, #0]
   2e5c8:	2118      	movs	r1, #24
   2e5ca:	438a      	bics	r2, r1
   2e5cc:	1c11      	adds	r1, r2, #0
   2e5ce:	1c02      	adds	r2, r0, #0
   2e5d0:	430a      	orrs	r2, r1
   2e5d2:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   2e5d4:	687b      	ldr	r3, [r7, #4]
   2e5d6:	223c      	movs	r2, #60	; 0x3c
   2e5d8:	5c9b      	ldrb	r3, [r3, r2]
   2e5da:	1c1a      	adds	r2, r3, #0
   2e5dc:	2301      	movs	r3, #1
   2e5de:	4013      	ands	r3, r2
   2e5e0:	b2da      	uxtb	r2, r3
   2e5e2:	2314      	movs	r3, #20
   2e5e4:	18fb      	adds	r3, r7, r3
   2e5e6:	2101      	movs	r1, #1
   2e5e8:	400a      	ands	r2, r1
   2e5ea:	0150      	lsls	r0, r2, #5
   2e5ec:	781a      	ldrb	r2, [r3, #0]
   2e5ee:	2120      	movs	r1, #32
   2e5f0:	438a      	bics	r2, r1
   2e5f2:	1c11      	adds	r1, r2, #0
   2e5f4:	1c02      	adds	r2, r0, #0
   2e5f6:	430a      	orrs	r2, r1
   2e5f8:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   2e5fa:	687b      	ldr	r3, [r7, #4]
   2e5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   2e5fe:	2b00      	cmp	r3, #0
   2e600:	d103      	bne.n	2e60a <MQTTSerialize_connect+0x17e>
   2e602:	687b      	ldr	r3, [r7, #4]
   2e604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2e606:	2b00      	cmp	r3, #0
   2e608:	d006      	beq.n	2e618 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   2e60a:	2314      	movs	r3, #20
   2e60c:	18fb      	adds	r3, r7, r3
   2e60e:	781a      	ldrb	r2, [r3, #0]
   2e610:	2180      	movs	r1, #128	; 0x80
   2e612:	4249      	negs	r1, r1
   2e614:	430a      	orrs	r2, r1
   2e616:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   2e618:	687b      	ldr	r3, [r7, #4]
   2e61a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2e61c:	2b00      	cmp	r3, #0
   2e61e:	d103      	bne.n	2e628 <MQTTSerialize_connect+0x19c>
   2e620:	687b      	ldr	r3, [r7, #4]
   2e622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2e624:	2b00      	cmp	r3, #0
   2e626:	d005      	beq.n	2e634 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   2e628:	2314      	movs	r3, #20
   2e62a:	18fb      	adds	r3, r7, r3
   2e62c:	781a      	ldrb	r2, [r3, #0]
   2e62e:	2140      	movs	r1, #64	; 0x40
   2e630:	430a      	orrs	r2, r1
   2e632:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   2e634:	2314      	movs	r3, #20
   2e636:	18fb      	adds	r3, r7, r3
   2e638:	781a      	ldrb	r2, [r3, #0]
   2e63a:	231c      	movs	r3, #28
   2e63c:	18fb      	adds	r3, r7, r3
   2e63e:	0011      	movs	r1, r2
   2e640:	0018      	movs	r0, r3
   2e642:	4b2a      	ldr	r3, [pc, #168]	; (2e6ec <MQTTSerialize_connect+0x260>)
   2e644:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   2e646:	687b      	ldr	r3, [r7, #4]
   2e648:	8b1b      	ldrh	r3, [r3, #24]
   2e64a:	001a      	movs	r2, r3
   2e64c:	231c      	movs	r3, #28
   2e64e:	18fb      	adds	r3, r7, r3
   2e650:	0011      	movs	r1, r2
   2e652:	0018      	movs	r0, r3
   2e654:	4b2a      	ldr	r3, [pc, #168]	; (2e700 <MQTTSerialize_connect+0x274>)
   2e656:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   2e658:	687b      	ldr	r3, [r7, #4]
   2e65a:	221c      	movs	r2, #28
   2e65c:	18b8      	adds	r0, r7, r2
   2e65e:	68d9      	ldr	r1, [r3, #12]
   2e660:	691a      	ldr	r2, [r3, #16]
   2e662:	695b      	ldr	r3, [r3, #20]
   2e664:	4c27      	ldr	r4, [pc, #156]	; (2e704 <MQTTSerialize_connect+0x278>)
   2e666:	47a0      	blx	r4
	if (options->willFlag)
   2e668:	687b      	ldr	r3, [r7, #4]
   2e66a:	7edb      	ldrb	r3, [r3, #27]
   2e66c:	2b00      	cmp	r3, #0
   2e66e:	d00f      	beq.n	2e690 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   2e670:	687b      	ldr	r3, [r7, #4]
   2e672:	221c      	movs	r2, #28
   2e674:	18b8      	adds	r0, r7, r2
   2e676:	6a59      	ldr	r1, [r3, #36]	; 0x24
   2e678:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2e67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e67c:	4c21      	ldr	r4, [pc, #132]	; (2e704 <MQTTSerialize_connect+0x278>)
   2e67e:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   2e680:	687b      	ldr	r3, [r7, #4]
   2e682:	221c      	movs	r2, #28
   2e684:	18b8      	adds	r0, r7, r2
   2e686:	6b19      	ldr	r1, [r3, #48]	; 0x30
   2e688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2e68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2e68c:	4c1d      	ldr	r4, [pc, #116]	; (2e704 <MQTTSerialize_connect+0x278>)
   2e68e:	47a0      	blx	r4
	}
	if (flags.bits.username)
   2e690:	2314      	movs	r3, #20
   2e692:	18fb      	adds	r3, r7, r3
   2e694:	781b      	ldrb	r3, [r3, #0]
   2e696:	227f      	movs	r2, #127	; 0x7f
   2e698:	4393      	bics	r3, r2
   2e69a:	b2db      	uxtb	r3, r3
   2e69c:	2b00      	cmp	r3, #0
   2e69e:	d007      	beq.n	2e6b0 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   2e6a0:	687b      	ldr	r3, [r7, #4]
   2e6a2:	221c      	movs	r2, #28
   2e6a4:	18b8      	adds	r0, r7, r2
   2e6a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
   2e6a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   2e6aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2e6ac:	4c15      	ldr	r4, [pc, #84]	; (2e704 <MQTTSerialize_connect+0x278>)
   2e6ae:	47a0      	blx	r4
	if (flags.bits.password)
   2e6b0:	2314      	movs	r3, #20
   2e6b2:	18fb      	adds	r3, r7, r3
   2e6b4:	781b      	ldrb	r3, [r3, #0]
   2e6b6:	2240      	movs	r2, #64	; 0x40
   2e6b8:	4013      	ands	r3, r2
   2e6ba:	b2db      	uxtb	r3, r3
   2e6bc:	2b00      	cmp	r3, #0
   2e6be:	d007      	beq.n	2e6d0 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   2e6c0:	687b      	ldr	r3, [r7, #4]
   2e6c2:	221c      	movs	r2, #28
   2e6c4:	18b8      	adds	r0, r7, r2
   2e6c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   2e6c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   2e6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2e6cc:	4c0d      	ldr	r4, [pc, #52]	; (2e704 <MQTTSerialize_connect+0x278>)
   2e6ce:	47a0      	blx	r4

	rc = ptr - buf;
   2e6d0:	69fb      	ldr	r3, [r7, #28]
   2e6d2:	001a      	movs	r2, r3
   2e6d4:	68fb      	ldr	r3, [r7, #12]
   2e6d6:	1ad3      	subs	r3, r2, r3
   2e6d8:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   2e6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e6dc:	0018      	movs	r0, r3
   2e6de:	46bd      	mov	sp, r7
   2e6e0:	b00b      	add	sp, #44	; 0x2c
   2e6e2:	bd90      	pop	{r4, r7, pc}
   2e6e4:	0002e3c5 	.word	0x0002e3c5
   2e6e8:	0002eb59 	.word	0x0002eb59
   2e6ec:	0002ec7b 	.word	0x0002ec7b
   2e6f0:	0002ea61 	.word	0x0002ea61
   2e6f4:	00038114 	.word	0x00038114
   2e6f8:	0002ecfd 	.word	0x0002ecfd
   2e6fc:	0003811c 	.word	0x0003811c
   2e700:	0002eca5 	.word	0x0002eca5
   2e704:	0002ed4d 	.word	0x0002ed4d

0002e708 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   2e708:	b580      	push	{r7, lr}
   2e70a:	b08a      	sub	sp, #40	; 0x28
   2e70c:	af00      	add	r7, sp, #0
   2e70e:	60f8      	str	r0, [r7, #12]
   2e710:	60b9      	str	r1, [r7, #8]
   2e712:	607a      	str	r2, [r7, #4]
   2e714:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2e716:	2300      	movs	r3, #0
   2e718:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2e71a:	687b      	ldr	r3, [r7, #4]
   2e71c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2e71e:	2300      	movs	r3, #0
   2e720:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2e722:	2300      	movs	r3, #0
   2e724:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   2e726:	2300      	movs	r3, #0
   2e728:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2e72a:	2318      	movs	r3, #24
   2e72c:	18fb      	adds	r3, r7, r3
   2e72e:	0018      	movs	r0, r3
   2e730:	4b25      	ldr	r3, [pc, #148]	; (2e7c8 <MQTTDeserialize_connack+0xc0>)
   2e732:	4798      	blx	r3
   2e734:	0003      	movs	r3, r0
   2e736:	001a      	movs	r2, r3
   2e738:	231c      	movs	r3, #28
   2e73a:	18fb      	adds	r3, r7, r3
   2e73c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   2e73e:	231c      	movs	r3, #28
   2e740:	18fb      	adds	r3, r7, r3
   2e742:	781b      	ldrb	r3, [r3, #0]
   2e744:	220f      	movs	r2, #15
   2e746:	4393      	bics	r3, r2
   2e748:	b2db      	uxtb	r3, r3
   2e74a:	2b20      	cmp	r3, #32
   2e74c:	d134      	bne.n	2e7b8 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2e74e:	69bb      	ldr	r3, [r7, #24]
   2e750:	2214      	movs	r2, #20
   2e752:	18ba      	adds	r2, r7, r2
   2e754:	0011      	movs	r1, r2
   2e756:	0018      	movs	r0, r3
   2e758:	4b1c      	ldr	r3, [pc, #112]	; (2e7cc <MQTTDeserialize_connack+0xc4>)
   2e75a:	4798      	blx	r3
   2e75c:	0003      	movs	r3, r0
   2e75e:	627b      	str	r3, [r7, #36]	; 0x24
   2e760:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e762:	69bb      	ldr	r3, [r7, #24]
   2e764:	189b      	adds	r3, r3, r2
   2e766:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2e768:	69bb      	ldr	r3, [r7, #24]
   2e76a:	697a      	ldr	r2, [r7, #20]
   2e76c:	189b      	adds	r3, r3, r2
   2e76e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2e770:	6a3b      	ldr	r3, [r7, #32]
   2e772:	69ba      	ldr	r2, [r7, #24]
   2e774:	1a9b      	subs	r3, r3, r2
   2e776:	2b01      	cmp	r3, #1
   2e778:	dd20      	ble.n	2e7bc <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   2e77a:	2318      	movs	r3, #24
   2e77c:	18fb      	adds	r3, r7, r3
   2e77e:	0018      	movs	r0, r3
   2e780:	4b11      	ldr	r3, [pc, #68]	; (2e7c8 <MQTTDeserialize_connack+0xc0>)
   2e782:	4798      	blx	r3
   2e784:	0003      	movs	r3, r0
   2e786:	001a      	movs	r2, r3
   2e788:	2310      	movs	r3, #16
   2e78a:	18fb      	adds	r3, r7, r3
   2e78c:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   2e78e:	2310      	movs	r3, #16
   2e790:	18fb      	adds	r3, r7, r3
   2e792:	781b      	ldrb	r3, [r3, #0]
   2e794:	061b      	lsls	r3, r3, #24
   2e796:	0fdb      	lsrs	r3, r3, #31
   2e798:	b2db      	uxtb	r3, r3
   2e79a:	001a      	movs	r2, r3
   2e79c:	68fb      	ldr	r3, [r7, #12]
   2e79e:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   2e7a0:	2318      	movs	r3, #24
   2e7a2:	18fb      	adds	r3, r7, r3
   2e7a4:	0018      	movs	r0, r3
   2e7a6:	4b08      	ldr	r3, [pc, #32]	; (2e7c8 <MQTTDeserialize_connack+0xc0>)
   2e7a8:	4798      	blx	r3
   2e7aa:	0003      	movs	r3, r0
   2e7ac:	001a      	movs	r2, r3
   2e7ae:	68bb      	ldr	r3, [r7, #8]
   2e7b0:	701a      	strb	r2, [r3, #0]

	rc = 1;
   2e7b2:	2301      	movs	r3, #1
   2e7b4:	627b      	str	r3, [r7, #36]	; 0x24
   2e7b6:	e002      	b.n	2e7be <MQTTDeserialize_connack+0xb6>
		goto exit;
   2e7b8:	46c0      	nop			; (mov r8, r8)
   2e7ba:	e000      	b.n	2e7be <MQTTDeserialize_connack+0xb6>
		goto exit;
   2e7bc:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2e7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e7c0:	0018      	movs	r0, r3
   2e7c2:	46bd      	mov	sp, r7
   2e7c4:	b00a      	add	sp, #40	; 0x28
   2e7c6:	bd80      	pop	{r7, pc}
   2e7c8:	0002ec4f 	.word	0x0002ec4f
   2e7cc:	0002ebe9 	.word	0x0002ebe9

0002e7d0 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   2e7d0:	b580      	push	{r7, lr}
   2e7d2:	b088      	sub	sp, #32
   2e7d4:	af00      	add	r7, sp, #0
   2e7d6:	60f8      	str	r0, [r7, #12]
   2e7d8:	60b9      	str	r1, [r7, #8]
   2e7da:	1dfb      	adds	r3, r7, #7
   2e7dc:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2e7de:	2300      	movs	r3, #0
   2e7e0:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   2e7e2:	2301      	movs	r3, #1
   2e7e4:	425b      	negs	r3, r3
   2e7e6:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2e7e8:	68fb      	ldr	r3, [r7, #12]
   2e7ea:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   2e7ec:	68bb      	ldr	r3, [r7, #8]
   2e7ee:	2b01      	cmp	r3, #1
   2e7f0:	dc03      	bgt.n	2e7fa <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2e7f2:	2302      	movs	r3, #2
   2e7f4:	425b      	negs	r3, r3
   2e7f6:	61fb      	str	r3, [r7, #28]
		goto exit;
   2e7f8:	e029      	b.n	2e84e <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   2e7fa:	2318      	movs	r3, #24
   2e7fc:	18fb      	adds	r3, r7, r3
   2e7fe:	2200      	movs	r2, #0
   2e800:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   2e802:	1dfb      	adds	r3, r7, #7
   2e804:	781b      	ldrb	r3, [r3, #0]
   2e806:	220f      	movs	r2, #15
   2e808:	4013      	ands	r3, r2
   2e80a:	b2da      	uxtb	r2, r3
   2e80c:	2318      	movs	r3, #24
   2e80e:	18fb      	adds	r3, r7, r3
   2e810:	0110      	lsls	r0, r2, #4
   2e812:	781a      	ldrb	r2, [r3, #0]
   2e814:	210f      	movs	r1, #15
   2e816:	400a      	ands	r2, r1
   2e818:	1c11      	adds	r1, r2, #0
   2e81a:	1c02      	adds	r2, r0, #0
   2e81c:	430a      	orrs	r2, r1
   2e81e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2e820:	2318      	movs	r3, #24
   2e822:	18fb      	adds	r3, r7, r3
   2e824:	781a      	ldrb	r2, [r3, #0]
   2e826:	2314      	movs	r3, #20
   2e828:	18fb      	adds	r3, r7, r3
   2e82a:	0011      	movs	r1, r2
   2e82c:	0018      	movs	r0, r3
   2e82e:	4b0a      	ldr	r3, [pc, #40]	; (2e858 <MQTTSerialize_zero+0x88>)
   2e830:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   2e832:	697b      	ldr	r3, [r7, #20]
   2e834:	2100      	movs	r1, #0
   2e836:	0018      	movs	r0, r3
   2e838:	4b08      	ldr	r3, [pc, #32]	; (2e85c <MQTTSerialize_zero+0x8c>)
   2e83a:	4798      	blx	r3
   2e83c:	0002      	movs	r2, r0
   2e83e:	697b      	ldr	r3, [r7, #20]
   2e840:	189b      	adds	r3, r3, r2
   2e842:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   2e844:	697b      	ldr	r3, [r7, #20]
   2e846:	001a      	movs	r2, r3
   2e848:	68fb      	ldr	r3, [r7, #12]
   2e84a:	1ad3      	subs	r3, r2, r3
   2e84c:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2e84e:	69fb      	ldr	r3, [r7, #28]
}
   2e850:	0018      	movs	r0, r3
   2e852:	46bd      	mov	sp, r7
   2e854:	b008      	add	sp, #32
   2e856:	bd80      	pop	{r7, pc}
   2e858:	0002ec7b 	.word	0x0002ec7b
   2e85c:	0002ea61 	.word	0x0002ea61

0002e860 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   2e860:	b580      	push	{r7, lr}
   2e862:	b082      	sub	sp, #8
   2e864:	af00      	add	r7, sp, #0
   2e866:	6078      	str	r0, [r7, #4]
   2e868:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   2e86a:	6839      	ldr	r1, [r7, #0]
   2e86c:	687b      	ldr	r3, [r7, #4]
   2e86e:	220e      	movs	r2, #14
   2e870:	0018      	movs	r0, r3
   2e872:	4b03      	ldr	r3, [pc, #12]	; (2e880 <MQTTSerialize_disconnect+0x20>)
   2e874:	4798      	blx	r3
   2e876:	0003      	movs	r3, r0
}
   2e878:	0018      	movs	r0, r3
   2e87a:	46bd      	mov	sp, r7
   2e87c:	b002      	add	sp, #8
   2e87e:	bd80      	pop	{r7, pc}
   2e880:	0002e7d1 	.word	0x0002e7d1

0002e884 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   2e884:	b580      	push	{r7, lr}
   2e886:	b082      	sub	sp, #8
   2e888:	af00      	add	r7, sp, #0
   2e88a:	6078      	str	r0, [r7, #4]
   2e88c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   2e88e:	6839      	ldr	r1, [r7, #0]
   2e890:	687b      	ldr	r3, [r7, #4]
   2e892:	220c      	movs	r2, #12
   2e894:	0018      	movs	r0, r3
   2e896:	4b03      	ldr	r3, [pc, #12]	; (2e8a4 <MQTTSerialize_pingreq+0x20>)
   2e898:	4798      	blx	r3
   2e89a:	0003      	movs	r3, r0
}
   2e89c:	0018      	movs	r0, r3
   2e89e:	46bd      	mov	sp, r7
   2e8a0:	b002      	add	sp, #8
   2e8a2:	bd80      	pop	{r7, pc}
   2e8a4:	0002e7d1 	.word	0x0002e7d1

0002e8a8 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   2e8a8:	b580      	push	{r7, lr}
   2e8aa:	b08a      	sub	sp, #40	; 0x28
   2e8ac:	af00      	add	r7, sp, #0
   2e8ae:	60f8      	str	r0, [r7, #12]
   2e8b0:	60b9      	str	r1, [r7, #8]
   2e8b2:	607a      	str	r2, [r7, #4]
   2e8b4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2e8b6:	2300      	movs	r3, #0
   2e8b8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2e8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e8bc:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2e8be:	2300      	movs	r3, #0
   2e8c0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2e8c2:	2300      	movs	r3, #0
   2e8c4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   2e8c6:	2300      	movs	r3, #0
   2e8c8:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2e8ca:	2318      	movs	r3, #24
   2e8cc:	18fb      	adds	r3, r7, r3
   2e8ce:	0018      	movs	r0, r3
   2e8d0:	4b32      	ldr	r3, [pc, #200]	; (2e99c <MQTTDeserialize_publish+0xf4>)
   2e8d2:	4798      	blx	r3
   2e8d4:	0003      	movs	r3, r0
   2e8d6:	001a      	movs	r2, r3
   2e8d8:	231c      	movs	r3, #28
   2e8da:	18fb      	adds	r3, r7, r3
   2e8dc:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   2e8de:	231c      	movs	r3, #28
   2e8e0:	18fb      	adds	r3, r7, r3
   2e8e2:	781b      	ldrb	r3, [r3, #0]
   2e8e4:	220f      	movs	r2, #15
   2e8e6:	4393      	bics	r3, r2
   2e8e8:	b2db      	uxtb	r3, r3
   2e8ea:	2b30      	cmp	r3, #48	; 0x30
   2e8ec:	d150      	bne.n	2e990 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   2e8ee:	231c      	movs	r3, #28
   2e8f0:	18fb      	adds	r3, r7, r3
   2e8f2:	781b      	ldrb	r3, [r3, #0]
   2e8f4:	071b      	lsls	r3, r3, #28
   2e8f6:	0fdb      	lsrs	r3, r3, #31
   2e8f8:	b2db      	uxtb	r3, r3
   2e8fa:	001a      	movs	r2, r3
   2e8fc:	68fb      	ldr	r3, [r7, #12]
   2e8fe:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   2e900:	231c      	movs	r3, #28
   2e902:	18fb      	adds	r3, r7, r3
   2e904:	781b      	ldrb	r3, [r3, #0]
   2e906:	075b      	lsls	r3, r3, #29
   2e908:	0f9b      	lsrs	r3, r3, #30
   2e90a:	b2db      	uxtb	r3, r3
   2e90c:	001a      	movs	r2, r3
   2e90e:	68bb      	ldr	r3, [r7, #8]
   2e910:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   2e912:	231c      	movs	r3, #28
   2e914:	18fb      	adds	r3, r7, r3
   2e916:	781b      	ldrb	r3, [r3, #0]
   2e918:	07db      	lsls	r3, r3, #31
   2e91a:	0fdb      	lsrs	r3, r3, #31
   2e91c:	b2db      	uxtb	r3, r3
   2e91e:	001a      	movs	r2, r3
   2e920:	687b      	ldr	r3, [r7, #4]
   2e922:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2e924:	69bb      	ldr	r3, [r7, #24]
   2e926:	2214      	movs	r2, #20
   2e928:	18ba      	adds	r2, r7, r2
   2e92a:	0011      	movs	r1, r2
   2e92c:	0018      	movs	r0, r3
   2e92e:	4b1c      	ldr	r3, [pc, #112]	; (2e9a0 <MQTTDeserialize_publish+0xf8>)
   2e930:	4798      	blx	r3
   2e932:	0003      	movs	r3, r0
   2e934:	627b      	str	r3, [r7, #36]	; 0x24
   2e936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2e938:	69bb      	ldr	r3, [r7, #24]
   2e93a:	189b      	adds	r3, r3, r2
   2e93c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2e93e:	69bb      	ldr	r3, [r7, #24]
   2e940:	697a      	ldr	r2, [r7, #20]
   2e942:	189b      	adds	r3, r3, r2
   2e944:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2e946:	6a3a      	ldr	r2, [r7, #32]
   2e948:	2318      	movs	r3, #24
   2e94a:	18f9      	adds	r1, r7, r3
   2e94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e94e:	0018      	movs	r0, r3
   2e950:	4b14      	ldr	r3, [pc, #80]	; (2e9a4 <MQTTDeserialize_publish+0xfc>)
   2e952:	4798      	blx	r3
   2e954:	1e03      	subs	r3, r0, #0
   2e956:	d01c      	beq.n	2e992 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   2e958:	6a3b      	ldr	r3, [r7, #32]
   2e95a:	69ba      	ldr	r2, [r7, #24]
   2e95c:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   2e95e:	d418      	bmi.n	2e992 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   2e960:	68bb      	ldr	r3, [r7, #8]
   2e962:	681b      	ldr	r3, [r3, #0]
   2e964:	2b00      	cmp	r3, #0
   2e966:	dd08      	ble.n	2e97a <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   2e968:	2318      	movs	r3, #24
   2e96a:	18fb      	adds	r3, r7, r3
   2e96c:	0018      	movs	r0, r3
   2e96e:	4b0e      	ldr	r3, [pc, #56]	; (2e9a8 <MQTTDeserialize_publish+0x100>)
   2e970:	4798      	blx	r3
   2e972:	0003      	movs	r3, r0
   2e974:	b29a      	uxth	r2, r3
   2e976:	683b      	ldr	r3, [r7, #0]
   2e978:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   2e97a:	6a3b      	ldr	r3, [r7, #32]
   2e97c:	69ba      	ldr	r2, [r7, #24]
   2e97e:	1a9a      	subs	r2, r3, r2
   2e980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e982:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   2e984:	69ba      	ldr	r2, [r7, #24]
   2e986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e988:	601a      	str	r2, [r3, #0]
	rc = 1;
   2e98a:	2301      	movs	r3, #1
   2e98c:	627b      	str	r3, [r7, #36]	; 0x24
   2e98e:	e000      	b.n	2e992 <MQTTDeserialize_publish+0xea>
		goto exit;
   2e990:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2e992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2e994:	0018      	movs	r0, r3
   2e996:	46bd      	mov	sp, r7
   2e998:	b00a      	add	sp, #40	; 0x28
   2e99a:	bd80      	pop	{r7, pc}
   2e99c:	0002ec4f 	.word	0x0002ec4f
   2e9a0:	0002ebe9 	.word	0x0002ebe9
   2e9a4:	0002edcd 	.word	0x0002edcd
   2e9a8:	0002ec1d 	.word	0x0002ec1d

0002e9ac <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   2e9ac:	b580      	push	{r7, lr}
   2e9ae:	b08a      	sub	sp, #40	; 0x28
   2e9b0:	af00      	add	r7, sp, #0
   2e9b2:	60f8      	str	r0, [r7, #12]
   2e9b4:	60b9      	str	r1, [r7, #8]
   2e9b6:	607a      	str	r2, [r7, #4]
   2e9b8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2e9ba:	2300      	movs	r3, #0
   2e9bc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2e9be:	683b      	ldr	r3, [r7, #0]
   2e9c0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2e9c2:	2300      	movs	r3, #0
   2e9c4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2e9c6:	2300      	movs	r3, #0
   2e9c8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2e9ca:	2318      	movs	r3, #24
   2e9cc:	18fb      	adds	r3, r7, r3
   2e9ce:	0018      	movs	r0, r3
   2e9d0:	4b20      	ldr	r3, [pc, #128]	; (2ea54 <MQTTDeserialize_ack+0xa8>)
   2e9d2:	4798      	blx	r3
   2e9d4:	0003      	movs	r3, r0
   2e9d6:	001a      	movs	r2, r3
   2e9d8:	231c      	movs	r3, #28
   2e9da:	18fb      	adds	r3, r7, r3
   2e9dc:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   2e9de:	231c      	movs	r3, #28
   2e9e0:	18fb      	adds	r3, r7, r3
   2e9e2:	781b      	ldrb	r3, [r3, #0]
   2e9e4:	071b      	lsls	r3, r3, #28
   2e9e6:	0fdb      	lsrs	r3, r3, #31
   2e9e8:	b2db      	uxtb	r3, r3
   2e9ea:	001a      	movs	r2, r3
   2e9ec:	68bb      	ldr	r3, [r7, #8]
   2e9ee:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   2e9f0:	231c      	movs	r3, #28
   2e9f2:	18fb      	adds	r3, r7, r3
   2e9f4:	781b      	ldrb	r3, [r3, #0]
   2e9f6:	061b      	lsls	r3, r3, #24
   2e9f8:	0f1b      	lsrs	r3, r3, #28
   2e9fa:	b2db      	uxtb	r3, r3
   2e9fc:	001a      	movs	r2, r3
   2e9fe:	68fb      	ldr	r3, [r7, #12]
   2ea00:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2ea02:	69bb      	ldr	r3, [r7, #24]
   2ea04:	2214      	movs	r2, #20
   2ea06:	18ba      	adds	r2, r7, r2
   2ea08:	0011      	movs	r1, r2
   2ea0a:	0018      	movs	r0, r3
   2ea0c:	4b12      	ldr	r3, [pc, #72]	; (2ea58 <MQTTDeserialize_ack+0xac>)
   2ea0e:	4798      	blx	r3
   2ea10:	0003      	movs	r3, r0
   2ea12:	627b      	str	r3, [r7, #36]	; 0x24
   2ea14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ea16:	69bb      	ldr	r3, [r7, #24]
   2ea18:	189b      	adds	r3, r3, r2
   2ea1a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2ea1c:	69bb      	ldr	r3, [r7, #24]
   2ea1e:	697a      	ldr	r2, [r7, #20]
   2ea20:	189b      	adds	r3, r3, r2
   2ea22:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   2ea24:	6a3b      	ldr	r3, [r7, #32]
   2ea26:	69ba      	ldr	r2, [r7, #24]
   2ea28:	1a9b      	subs	r3, r3, r2
   2ea2a:	2b01      	cmp	r3, #1
   2ea2c:	dd0b      	ble.n	2ea46 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   2ea2e:	2318      	movs	r3, #24
   2ea30:	18fb      	adds	r3, r7, r3
   2ea32:	0018      	movs	r0, r3
   2ea34:	4b09      	ldr	r3, [pc, #36]	; (2ea5c <MQTTDeserialize_ack+0xb0>)
   2ea36:	4798      	blx	r3
   2ea38:	0003      	movs	r3, r0
   2ea3a:	b29a      	uxth	r2, r3
   2ea3c:	687b      	ldr	r3, [r7, #4]
   2ea3e:	801a      	strh	r2, [r3, #0]

	rc = 1;
   2ea40:	2301      	movs	r3, #1
   2ea42:	627b      	str	r3, [r7, #36]	; 0x24
   2ea44:	e000      	b.n	2ea48 <MQTTDeserialize_ack+0x9c>
		goto exit;
   2ea46:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2ea4a:	0018      	movs	r0, r3
   2ea4c:	46bd      	mov	sp, r7
   2ea4e:	b00a      	add	sp, #40	; 0x28
   2ea50:	bd80      	pop	{r7, pc}
   2ea52:	46c0      	nop			; (mov r8, r8)
   2ea54:	0002ec4f 	.word	0x0002ec4f
   2ea58:	0002ebe9 	.word	0x0002ebe9
   2ea5c:	0002ec1d 	.word	0x0002ec1d

0002ea60 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   2ea60:	b580      	push	{r7, lr}
   2ea62:	b084      	sub	sp, #16
   2ea64:	af00      	add	r7, sp, #0
   2ea66:	6078      	str	r0, [r7, #4]
   2ea68:	6039      	str	r1, [r7, #0]
	int rc = 0;
   2ea6a:	2300      	movs	r3, #0
   2ea6c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   2ea6e:	683b      	ldr	r3, [r7, #0]
   2ea70:	4a17      	ldr	r2, [pc, #92]	; (2ead0 <MQTTPacket_encode+0x70>)
   2ea72:	4013      	ands	r3, r2
   2ea74:	d504      	bpl.n	2ea80 <MQTTPacket_encode+0x20>
   2ea76:	3b01      	subs	r3, #1
   2ea78:	2280      	movs	r2, #128	; 0x80
   2ea7a:	4252      	negs	r2, r2
   2ea7c:	4313      	orrs	r3, r2
   2ea7e:	3301      	adds	r3, #1
   2ea80:	001a      	movs	r2, r3
   2ea82:	230b      	movs	r3, #11
   2ea84:	18fb      	adds	r3, r7, r3
   2ea86:	701a      	strb	r2, [r3, #0]
		length /= 128;
   2ea88:	683b      	ldr	r3, [r7, #0]
   2ea8a:	2b00      	cmp	r3, #0
   2ea8c:	da00      	bge.n	2ea90 <MQTTPacket_encode+0x30>
   2ea8e:	337f      	adds	r3, #127	; 0x7f
   2ea90:	11db      	asrs	r3, r3, #7
   2ea92:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   2ea94:	683b      	ldr	r3, [r7, #0]
   2ea96:	2b00      	cmp	r3, #0
   2ea98:	dd08      	ble.n	2eaac <MQTTPacket_encode+0x4c>
			d |= 0x80;
   2ea9a:	230b      	movs	r3, #11
   2ea9c:	18fb      	adds	r3, r7, r3
   2ea9e:	220b      	movs	r2, #11
   2eaa0:	18ba      	adds	r2, r7, r2
   2eaa2:	7812      	ldrb	r2, [r2, #0]
   2eaa4:	2180      	movs	r1, #128	; 0x80
   2eaa6:	4249      	negs	r1, r1
   2eaa8:	430a      	orrs	r2, r1
   2eaaa:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   2eaac:	68fb      	ldr	r3, [r7, #12]
   2eaae:	1c5a      	adds	r2, r3, #1
   2eab0:	60fa      	str	r2, [r7, #12]
   2eab2:	001a      	movs	r2, r3
   2eab4:	687b      	ldr	r3, [r7, #4]
   2eab6:	189b      	adds	r3, r3, r2
   2eab8:	220b      	movs	r2, #11
   2eaba:	18ba      	adds	r2, r7, r2
   2eabc:	7812      	ldrb	r2, [r2, #0]
   2eabe:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   2eac0:	683b      	ldr	r3, [r7, #0]
   2eac2:	2b00      	cmp	r3, #0
   2eac4:	dcd3      	bgt.n	2ea6e <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   2eac6:	68fb      	ldr	r3, [r7, #12]
}
   2eac8:	0018      	movs	r0, r3
   2eaca:	46bd      	mov	sp, r7
   2eacc:	b004      	add	sp, #16
   2eace:	bd80      	pop	{r7, pc}
   2ead0:	8000007f 	.word	0x8000007f

0002ead4 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   2ead4:	b580      	push	{r7, lr}
   2ead6:	b086      	sub	sp, #24
   2ead8:	af00      	add	r7, sp, #0
   2eada:	6078      	str	r0, [r7, #4]
   2eadc:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   2eade:	2301      	movs	r3, #1
   2eae0:	617b      	str	r3, [r7, #20]
	int len = 0;
   2eae2:	2300      	movs	r3, #0
   2eae4:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   2eae6:	683b      	ldr	r3, [r7, #0]
   2eae8:	2200      	movs	r2, #0
   2eaea:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   2eaec:	2301      	movs	r3, #1
   2eaee:	425b      	negs	r3, r3
   2eaf0:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2eaf2:	693b      	ldr	r3, [r7, #16]
   2eaf4:	3301      	adds	r3, #1
   2eaf6:	613b      	str	r3, [r7, #16]
   2eaf8:	693b      	ldr	r3, [r7, #16]
   2eafa:	2b04      	cmp	r3, #4
   2eafc:	dd03      	ble.n	2eb06 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   2eafe:	2301      	movs	r3, #1
   2eb00:	425b      	negs	r3, r3
   2eb02:	60fb      	str	r3, [r7, #12]
			goto exit;
   2eb04:	e022      	b.n	2eb4c <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   2eb06:	230b      	movs	r3, #11
   2eb08:	18fa      	adds	r2, r7, r3
   2eb0a:	687b      	ldr	r3, [r7, #4]
   2eb0c:	2101      	movs	r1, #1
   2eb0e:	0010      	movs	r0, r2
   2eb10:	4798      	blx	r3
   2eb12:	0003      	movs	r3, r0
   2eb14:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   2eb16:	68fb      	ldr	r3, [r7, #12]
   2eb18:	2b01      	cmp	r3, #1
   2eb1a:	d116      	bne.n	2eb4a <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   2eb1c:	683b      	ldr	r3, [r7, #0]
   2eb1e:	681a      	ldr	r2, [r3, #0]
   2eb20:	230b      	movs	r3, #11
   2eb22:	18fb      	adds	r3, r7, r3
   2eb24:	781b      	ldrb	r3, [r3, #0]
   2eb26:	0019      	movs	r1, r3
   2eb28:	237f      	movs	r3, #127	; 0x7f
   2eb2a:	400b      	ands	r3, r1
   2eb2c:	6979      	ldr	r1, [r7, #20]
   2eb2e:	434b      	muls	r3, r1
   2eb30:	18d2      	adds	r2, r2, r3
   2eb32:	683b      	ldr	r3, [r7, #0]
   2eb34:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   2eb36:	697b      	ldr	r3, [r7, #20]
   2eb38:	01db      	lsls	r3, r3, #7
   2eb3a:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   2eb3c:	230b      	movs	r3, #11
   2eb3e:	18fb      	adds	r3, r7, r3
   2eb40:	781b      	ldrb	r3, [r3, #0]
   2eb42:	b25b      	sxtb	r3, r3
   2eb44:	2b00      	cmp	r3, #0
   2eb46:	dbd1      	blt.n	2eaec <MQTTPacket_decode+0x18>
   2eb48:	e000      	b.n	2eb4c <MQTTPacket_decode+0x78>
			goto exit;
   2eb4a:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   2eb4c:	693b      	ldr	r3, [r7, #16]
}
   2eb4e:	0018      	movs	r0, r3
   2eb50:	46bd      	mov	sp, r7
   2eb52:	b006      	add	sp, #24
   2eb54:	bd80      	pop	{r7, pc}
	...

0002eb58 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   2eb58:	b580      	push	{r7, lr}
   2eb5a:	b082      	sub	sp, #8
   2eb5c:	af00      	add	r7, sp, #0
   2eb5e:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   2eb60:	687b      	ldr	r3, [r7, #4]
   2eb62:	3301      	adds	r3, #1
   2eb64:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   2eb66:	687b      	ldr	r3, [r7, #4]
   2eb68:	2b7f      	cmp	r3, #127	; 0x7f
   2eb6a:	dc03      	bgt.n	2eb74 <MQTTPacket_len+0x1c>
		rem_len += 1;
   2eb6c:	687b      	ldr	r3, [r7, #4]
   2eb6e:	3301      	adds	r3, #1
   2eb70:	607b      	str	r3, [r7, #4]
   2eb72:	e012      	b.n	2eb9a <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   2eb74:	687b      	ldr	r3, [r7, #4]
   2eb76:	4a0b      	ldr	r2, [pc, #44]	; (2eba4 <MQTTPacket_len+0x4c>)
   2eb78:	4293      	cmp	r3, r2
   2eb7a:	dc03      	bgt.n	2eb84 <MQTTPacket_len+0x2c>
		rem_len += 2;
   2eb7c:	687b      	ldr	r3, [r7, #4]
   2eb7e:	3302      	adds	r3, #2
   2eb80:	607b      	str	r3, [r7, #4]
   2eb82:	e00a      	b.n	2eb9a <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   2eb84:	687b      	ldr	r3, [r7, #4]
   2eb86:	4a08      	ldr	r2, [pc, #32]	; (2eba8 <MQTTPacket_len+0x50>)
   2eb88:	4293      	cmp	r3, r2
   2eb8a:	dc03      	bgt.n	2eb94 <MQTTPacket_len+0x3c>
		rem_len += 3;
   2eb8c:	687b      	ldr	r3, [r7, #4]
   2eb8e:	3303      	adds	r3, #3
   2eb90:	607b      	str	r3, [r7, #4]
   2eb92:	e002      	b.n	2eb9a <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   2eb94:	687b      	ldr	r3, [r7, #4]
   2eb96:	3304      	adds	r3, #4
   2eb98:	607b      	str	r3, [r7, #4]
	return rem_len;
   2eb9a:	687b      	ldr	r3, [r7, #4]
}
   2eb9c:	0018      	movs	r0, r3
   2eb9e:	46bd      	mov	sp, r7
   2eba0:	b002      	add	sp, #8
   2eba2:	bd80      	pop	{r7, pc}
   2eba4:	00003fff 	.word	0x00003fff
   2eba8:	001ffffe 	.word	0x001ffffe

0002ebac <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   2ebac:	b580      	push	{r7, lr}
   2ebae:	b084      	sub	sp, #16
   2ebb0:	af00      	add	r7, sp, #0
   2ebb2:	6078      	str	r0, [r7, #4]
   2ebb4:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   2ebb6:	2300      	movs	r3, #0
   2ebb8:	60fb      	str	r3, [r7, #12]
   2ebba:	e00a      	b.n	2ebd2 <bufchar+0x26>
		*c = *bufptr++;
   2ebbc:	4b09      	ldr	r3, [pc, #36]	; (2ebe4 <bufchar+0x38>)
   2ebbe:	681b      	ldr	r3, [r3, #0]
   2ebc0:	1c59      	adds	r1, r3, #1
   2ebc2:	4a08      	ldr	r2, [pc, #32]	; (2ebe4 <bufchar+0x38>)
   2ebc4:	6011      	str	r1, [r2, #0]
   2ebc6:	781a      	ldrb	r2, [r3, #0]
   2ebc8:	687b      	ldr	r3, [r7, #4]
   2ebca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   2ebcc:	68fb      	ldr	r3, [r7, #12]
   2ebce:	3301      	adds	r3, #1
   2ebd0:	60fb      	str	r3, [r7, #12]
   2ebd2:	68fa      	ldr	r2, [r7, #12]
   2ebd4:	683b      	ldr	r3, [r7, #0]
   2ebd6:	429a      	cmp	r2, r3
   2ebd8:	dbf0      	blt.n	2ebbc <bufchar+0x10>
	return count;
   2ebda:	683b      	ldr	r3, [r7, #0]
}
   2ebdc:	0018      	movs	r0, r3
   2ebde:	46bd      	mov	sp, r7
   2ebe0:	b004      	add	sp, #16
   2ebe2:	bd80      	pop	{r7, pc}
   2ebe4:	20004568 	.word	0x20004568

0002ebe8 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   2ebe8:	b580      	push	{r7, lr}
   2ebea:	b082      	sub	sp, #8
   2ebec:	af00      	add	r7, sp, #0
   2ebee:	6078      	str	r0, [r7, #4]
   2ebf0:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   2ebf2:	4b07      	ldr	r3, [pc, #28]	; (2ec10 <MQTTPacket_decodeBuf+0x28>)
   2ebf4:	687a      	ldr	r2, [r7, #4]
   2ebf6:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   2ebf8:	683a      	ldr	r2, [r7, #0]
   2ebfa:	4b06      	ldr	r3, [pc, #24]	; (2ec14 <MQTTPacket_decodeBuf+0x2c>)
   2ebfc:	0011      	movs	r1, r2
   2ebfe:	0018      	movs	r0, r3
   2ec00:	4b05      	ldr	r3, [pc, #20]	; (2ec18 <MQTTPacket_decodeBuf+0x30>)
   2ec02:	4798      	blx	r3
   2ec04:	0003      	movs	r3, r0
}
   2ec06:	0018      	movs	r0, r3
   2ec08:	46bd      	mov	sp, r7
   2ec0a:	b002      	add	sp, #8
   2ec0c:	bd80      	pop	{r7, pc}
   2ec0e:	46c0      	nop			; (mov r8, r8)
   2ec10:	20004568 	.word	0x20004568
   2ec14:	0002ebad 	.word	0x0002ebad
   2ec18:	0002ead5 	.word	0x0002ead5

0002ec1c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   2ec1c:	b580      	push	{r7, lr}
   2ec1e:	b084      	sub	sp, #16
   2ec20:	af00      	add	r7, sp, #0
   2ec22:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   2ec24:	687b      	ldr	r3, [r7, #4]
   2ec26:	681b      	ldr	r3, [r3, #0]
   2ec28:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   2ec2a:	68fb      	ldr	r3, [r7, #12]
   2ec2c:	781b      	ldrb	r3, [r3, #0]
   2ec2e:	021b      	lsls	r3, r3, #8
   2ec30:	68fa      	ldr	r2, [r7, #12]
   2ec32:	3201      	adds	r2, #1
   2ec34:	7812      	ldrb	r2, [r2, #0]
   2ec36:	189b      	adds	r3, r3, r2
   2ec38:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   2ec3a:	687b      	ldr	r3, [r7, #4]
   2ec3c:	681b      	ldr	r3, [r3, #0]
   2ec3e:	1c9a      	adds	r2, r3, #2
   2ec40:	687b      	ldr	r3, [r7, #4]
   2ec42:	601a      	str	r2, [r3, #0]
	return len;
   2ec44:	68bb      	ldr	r3, [r7, #8]
}
   2ec46:	0018      	movs	r0, r3
   2ec48:	46bd      	mov	sp, r7
   2ec4a:	b004      	add	sp, #16
   2ec4c:	bd80      	pop	{r7, pc}

0002ec4e <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   2ec4e:	b580      	push	{r7, lr}
   2ec50:	b084      	sub	sp, #16
   2ec52:	af00      	add	r7, sp, #0
   2ec54:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   2ec56:	687b      	ldr	r3, [r7, #4]
   2ec58:	681a      	ldr	r2, [r3, #0]
   2ec5a:	230f      	movs	r3, #15
   2ec5c:	18fb      	adds	r3, r7, r3
   2ec5e:	7812      	ldrb	r2, [r2, #0]
   2ec60:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2ec62:	687b      	ldr	r3, [r7, #4]
   2ec64:	681b      	ldr	r3, [r3, #0]
   2ec66:	1c5a      	adds	r2, r3, #1
   2ec68:	687b      	ldr	r3, [r7, #4]
   2ec6a:	601a      	str	r2, [r3, #0]
	return c;
   2ec6c:	230f      	movs	r3, #15
   2ec6e:	18fb      	adds	r3, r7, r3
   2ec70:	781b      	ldrb	r3, [r3, #0]
}
   2ec72:	0018      	movs	r0, r3
   2ec74:	46bd      	mov	sp, r7
   2ec76:	b004      	add	sp, #16
   2ec78:	bd80      	pop	{r7, pc}

0002ec7a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   2ec7a:	b580      	push	{r7, lr}
   2ec7c:	b082      	sub	sp, #8
   2ec7e:	af00      	add	r7, sp, #0
   2ec80:	6078      	str	r0, [r7, #4]
   2ec82:	000a      	movs	r2, r1
   2ec84:	1cfb      	adds	r3, r7, #3
   2ec86:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   2ec88:	687b      	ldr	r3, [r7, #4]
   2ec8a:	681b      	ldr	r3, [r3, #0]
   2ec8c:	1cfa      	adds	r2, r7, #3
   2ec8e:	7812      	ldrb	r2, [r2, #0]
   2ec90:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   2ec92:	687b      	ldr	r3, [r7, #4]
   2ec94:	681b      	ldr	r3, [r3, #0]
   2ec96:	1c5a      	adds	r2, r3, #1
   2ec98:	687b      	ldr	r3, [r7, #4]
   2ec9a:	601a      	str	r2, [r3, #0]
}
   2ec9c:	46c0      	nop			; (mov r8, r8)
   2ec9e:	46bd      	mov	sp, r7
   2eca0:	b002      	add	sp, #8
   2eca2:	bd80      	pop	{r7, pc}

0002eca4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   2eca4:	b580      	push	{r7, lr}
   2eca6:	b082      	sub	sp, #8
   2eca8:	af00      	add	r7, sp, #0
   2ecaa:	6078      	str	r0, [r7, #4]
   2ecac:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   2ecae:	687b      	ldr	r3, [r7, #4]
   2ecb0:	681a      	ldr	r2, [r3, #0]
   2ecb2:	683b      	ldr	r3, [r7, #0]
   2ecb4:	2b00      	cmp	r3, #0
   2ecb6:	da00      	bge.n	2ecba <writeInt+0x16>
   2ecb8:	33ff      	adds	r3, #255	; 0xff
   2ecba:	121b      	asrs	r3, r3, #8
   2ecbc:	b2db      	uxtb	r3, r3
   2ecbe:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2ecc0:	687b      	ldr	r3, [r7, #4]
   2ecc2:	681b      	ldr	r3, [r3, #0]
   2ecc4:	1c5a      	adds	r2, r3, #1
   2ecc6:	687b      	ldr	r3, [r7, #4]
   2ecc8:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   2ecca:	687b      	ldr	r3, [r7, #4]
   2eccc:	681a      	ldr	r2, [r3, #0]
   2ecce:	683b      	ldr	r3, [r7, #0]
   2ecd0:	4908      	ldr	r1, [pc, #32]	; (2ecf4 <writeInt+0x50>)
   2ecd2:	400b      	ands	r3, r1
   2ecd4:	d503      	bpl.n	2ecde <writeInt+0x3a>
   2ecd6:	3b01      	subs	r3, #1
   2ecd8:	4907      	ldr	r1, [pc, #28]	; (2ecf8 <writeInt+0x54>)
   2ecda:	430b      	orrs	r3, r1
   2ecdc:	3301      	adds	r3, #1
   2ecde:	b2db      	uxtb	r3, r3
   2ece0:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   2ece2:	687b      	ldr	r3, [r7, #4]
   2ece4:	681b      	ldr	r3, [r3, #0]
   2ece6:	1c5a      	adds	r2, r3, #1
   2ece8:	687b      	ldr	r3, [r7, #4]
   2ecea:	601a      	str	r2, [r3, #0]
}
   2ecec:	46c0      	nop			; (mov r8, r8)
   2ecee:	46bd      	mov	sp, r7
   2ecf0:	b002      	add	sp, #8
   2ecf2:	bd80      	pop	{r7, pc}
   2ecf4:	800000ff 	.word	0x800000ff
   2ecf8:	ffffff00 	.word	0xffffff00

0002ecfc <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   2ecfc:	b580      	push	{r7, lr}
   2ecfe:	b084      	sub	sp, #16
   2ed00:	af00      	add	r7, sp, #0
   2ed02:	6078      	str	r0, [r7, #4]
   2ed04:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   2ed06:	683b      	ldr	r3, [r7, #0]
   2ed08:	0018      	movs	r0, r3
   2ed0a:	4b0d      	ldr	r3, [pc, #52]	; (2ed40 <writeCString+0x44>)
   2ed0c:	4798      	blx	r3
   2ed0e:	0003      	movs	r3, r0
   2ed10:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   2ed12:	68fa      	ldr	r2, [r7, #12]
   2ed14:	687b      	ldr	r3, [r7, #4]
   2ed16:	0011      	movs	r1, r2
   2ed18:	0018      	movs	r0, r3
   2ed1a:	4b0a      	ldr	r3, [pc, #40]	; (2ed44 <writeCString+0x48>)
   2ed1c:	4798      	blx	r3
	memcpy(*pptr, string, len);
   2ed1e:	687b      	ldr	r3, [r7, #4]
   2ed20:	681b      	ldr	r3, [r3, #0]
   2ed22:	68fa      	ldr	r2, [r7, #12]
   2ed24:	6839      	ldr	r1, [r7, #0]
   2ed26:	0018      	movs	r0, r3
   2ed28:	4b07      	ldr	r3, [pc, #28]	; (2ed48 <writeCString+0x4c>)
   2ed2a:	4798      	blx	r3
	*pptr += len;
   2ed2c:	687b      	ldr	r3, [r7, #4]
   2ed2e:	681a      	ldr	r2, [r3, #0]
   2ed30:	68fb      	ldr	r3, [r7, #12]
   2ed32:	18d2      	adds	r2, r2, r3
   2ed34:	687b      	ldr	r3, [r7, #4]
   2ed36:	601a      	str	r2, [r3, #0]
}
   2ed38:	46c0      	nop			; (mov r8, r8)
   2ed3a:	46bd      	mov	sp, r7
   2ed3c:	b004      	add	sp, #16
   2ed3e:	bd80      	pop	{r7, pc}
   2ed40:	0003353b 	.word	0x0003353b
   2ed44:	0002eca5 	.word	0x0002eca5
   2ed48:	00033169 	.word	0x00033169

0002ed4c <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   2ed4c:	b580      	push	{r7, lr}
   2ed4e:	b084      	sub	sp, #16
   2ed50:	af00      	add	r7, sp, #0
   2ed52:	60f8      	str	r0, [r7, #12]
   2ed54:	0038      	movs	r0, r7
   2ed56:	6001      	str	r1, [r0, #0]
   2ed58:	6042      	str	r2, [r0, #4]
   2ed5a:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   2ed5c:	003b      	movs	r3, r7
   2ed5e:	685b      	ldr	r3, [r3, #4]
   2ed60:	2b00      	cmp	r3, #0
   2ed62:	dd17      	ble.n	2ed94 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   2ed64:	003b      	movs	r3, r7
   2ed66:	685a      	ldr	r2, [r3, #4]
   2ed68:	68fb      	ldr	r3, [r7, #12]
   2ed6a:	0011      	movs	r1, r2
   2ed6c:	0018      	movs	r0, r3
   2ed6e:	4b14      	ldr	r3, [pc, #80]	; (2edc0 <writeMQTTString+0x74>)
   2ed70:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   2ed72:	68fb      	ldr	r3, [r7, #12]
   2ed74:	6818      	ldr	r0, [r3, #0]
   2ed76:	003b      	movs	r3, r7
   2ed78:	6899      	ldr	r1, [r3, #8]
   2ed7a:	003b      	movs	r3, r7
   2ed7c:	685b      	ldr	r3, [r3, #4]
   2ed7e:	001a      	movs	r2, r3
   2ed80:	4b10      	ldr	r3, [pc, #64]	; (2edc4 <writeMQTTString+0x78>)
   2ed82:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   2ed84:	68fb      	ldr	r3, [r7, #12]
   2ed86:	681a      	ldr	r2, [r3, #0]
   2ed88:	003b      	movs	r3, r7
   2ed8a:	685b      	ldr	r3, [r3, #4]
   2ed8c:	18d2      	adds	r2, r2, r3
   2ed8e:	68fb      	ldr	r3, [r7, #12]
   2ed90:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   2ed92:	e010      	b.n	2edb6 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   2ed94:	003b      	movs	r3, r7
   2ed96:	681b      	ldr	r3, [r3, #0]
   2ed98:	2b00      	cmp	r3, #0
   2ed9a:	d007      	beq.n	2edac <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   2ed9c:	003b      	movs	r3, r7
   2ed9e:	681a      	ldr	r2, [r3, #0]
   2eda0:	68fb      	ldr	r3, [r7, #12]
   2eda2:	0011      	movs	r1, r2
   2eda4:	0018      	movs	r0, r3
   2eda6:	4b08      	ldr	r3, [pc, #32]	; (2edc8 <writeMQTTString+0x7c>)
   2eda8:	4798      	blx	r3
}
   2edaa:	e004      	b.n	2edb6 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   2edac:	68fb      	ldr	r3, [r7, #12]
   2edae:	2100      	movs	r1, #0
   2edb0:	0018      	movs	r0, r3
   2edb2:	4b03      	ldr	r3, [pc, #12]	; (2edc0 <writeMQTTString+0x74>)
   2edb4:	4798      	blx	r3
}
   2edb6:	46c0      	nop			; (mov r8, r8)
   2edb8:	46bd      	mov	sp, r7
   2edba:	b004      	add	sp, #16
   2edbc:	bd80      	pop	{r7, pc}
   2edbe:	46c0      	nop			; (mov r8, r8)
   2edc0:	0002eca5 	.word	0x0002eca5
   2edc4:	00033169 	.word	0x00033169
   2edc8:	0002ecfd 	.word	0x0002ecfd

0002edcc <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   2edcc:	b580      	push	{r7, lr}
   2edce:	b086      	sub	sp, #24
   2edd0:	af00      	add	r7, sp, #0
   2edd2:	60f8      	str	r0, [r7, #12]
   2edd4:	60b9      	str	r1, [r7, #8]
   2edd6:	607a      	str	r2, [r7, #4]
	int rc = 0;
   2edd8:	2300      	movs	r3, #0
   2edda:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   2eddc:	687a      	ldr	r2, [r7, #4]
   2edde:	68bb      	ldr	r3, [r7, #8]
   2ede0:	681b      	ldr	r3, [r3, #0]
   2ede2:	1ad3      	subs	r3, r2, r3
   2ede4:	2b01      	cmp	r3, #1
   2ede6:	dd1b      	ble.n	2ee20 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   2ede8:	68bb      	ldr	r3, [r7, #8]
   2edea:	0018      	movs	r0, r3
   2edec:	4b10      	ldr	r3, [pc, #64]	; (2ee30 <readMQTTLenString+0x64>)
   2edee:	4798      	blx	r3
   2edf0:	0002      	movs	r2, r0
   2edf2:	68fb      	ldr	r3, [r7, #12]
   2edf4:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   2edf6:	68bb      	ldr	r3, [r7, #8]
   2edf8:	681a      	ldr	r2, [r3, #0]
   2edfa:	68fb      	ldr	r3, [r7, #12]
   2edfc:	685b      	ldr	r3, [r3, #4]
   2edfe:	18d2      	adds	r2, r2, r3
   2ee00:	687b      	ldr	r3, [r7, #4]
   2ee02:	429a      	cmp	r2, r3
   2ee04:	d80c      	bhi.n	2ee20 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   2ee06:	68bb      	ldr	r3, [r7, #8]
   2ee08:	681a      	ldr	r2, [r3, #0]
   2ee0a:	68fb      	ldr	r3, [r7, #12]
   2ee0c:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   2ee0e:	68bb      	ldr	r3, [r7, #8]
   2ee10:	681a      	ldr	r2, [r3, #0]
   2ee12:	68fb      	ldr	r3, [r7, #12]
   2ee14:	685b      	ldr	r3, [r3, #4]
   2ee16:	18d2      	adds	r2, r2, r3
   2ee18:	68bb      	ldr	r3, [r7, #8]
   2ee1a:	601a      	str	r2, [r3, #0]
			rc = 1;
   2ee1c:	2301      	movs	r3, #1
   2ee1e:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   2ee20:	68fb      	ldr	r3, [r7, #12]
   2ee22:	2200      	movs	r2, #0
   2ee24:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   2ee26:	697b      	ldr	r3, [r7, #20]
}
   2ee28:	0018      	movs	r0, r3
   2ee2a:	46bd      	mov	sp, r7
   2ee2c:	b006      	add	sp, #24
   2ee2e:	bd80      	pop	{r7, pc}
   2ee30:	0002ec1d 	.word	0x0002ec1d

0002ee34 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   2ee34:	b580      	push	{r7, lr}
   2ee36:	b086      	sub	sp, #24
   2ee38:	af00      	add	r7, sp, #0
   2ee3a:	1d3b      	adds	r3, r7, #4
   2ee3c:	6018      	str	r0, [r3, #0]
   2ee3e:	6059      	str	r1, [r3, #4]
   2ee40:	609a      	str	r2, [r3, #8]
	int rc = 0;
   2ee42:	2300      	movs	r3, #0
   2ee44:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   2ee46:	1d3b      	adds	r3, r7, #4
   2ee48:	681b      	ldr	r3, [r3, #0]
   2ee4a:	2b00      	cmp	r3, #0
   2ee4c:	d007      	beq.n	2ee5e <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   2ee4e:	1d3b      	adds	r3, r7, #4
   2ee50:	681b      	ldr	r3, [r3, #0]
   2ee52:	0018      	movs	r0, r3
   2ee54:	4b06      	ldr	r3, [pc, #24]	; (2ee70 <MQTTstrlen+0x3c>)
   2ee56:	4798      	blx	r3
   2ee58:	0003      	movs	r3, r0
   2ee5a:	617b      	str	r3, [r7, #20]
   2ee5c:	e002      	b.n	2ee64 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   2ee5e:	1d3b      	adds	r3, r7, #4
   2ee60:	685b      	ldr	r3, [r3, #4]
   2ee62:	617b      	str	r3, [r7, #20]
	return rc;
   2ee64:	697b      	ldr	r3, [r7, #20]
}
   2ee66:	0018      	movs	r0, r3
   2ee68:	46bd      	mov	sp, r7
   2ee6a:	b006      	add	sp, #24
   2ee6c:	bd80      	pop	{r7, pc}
   2ee6e:	46c0      	nop			; (mov r8, r8)
   2ee70:	0003353b 	.word	0x0003353b

0002ee74 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   2ee74:	b580      	push	{r7, lr}
   2ee76:	b086      	sub	sp, #24
   2ee78:	af00      	add	r7, sp, #0
   2ee7a:	6078      	str	r0, [r7, #4]
   2ee7c:	6039      	str	r1, [r7, #0]
	int alen = 0,
   2ee7e:	2300      	movs	r3, #0
   2ee80:	617b      	str	r3, [r7, #20]
		blen = 0;
   2ee82:	2300      	movs	r3, #0
   2ee84:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   2ee86:	687b      	ldr	r3, [r7, #4]
   2ee88:	681b      	ldr	r3, [r3, #0]
   2ee8a:	2b00      	cmp	r3, #0
   2ee8c:	d00a      	beq.n	2eea4 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   2ee8e:	687b      	ldr	r3, [r7, #4]
   2ee90:	681b      	ldr	r3, [r3, #0]
   2ee92:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   2ee94:	687b      	ldr	r3, [r7, #4]
   2ee96:	681b      	ldr	r3, [r3, #0]
   2ee98:	0018      	movs	r0, r3
   2ee9a:	4b12      	ldr	r3, [pc, #72]	; (2eee4 <MQTTPacket_equals+0x70>)
   2ee9c:	4798      	blx	r3
   2ee9e:	0003      	movs	r3, r0
   2eea0:	617b      	str	r3, [r7, #20]
   2eea2:	e005      	b.n	2eeb0 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   2eea4:	687b      	ldr	r3, [r7, #4]
   2eea6:	689b      	ldr	r3, [r3, #8]
   2eea8:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   2eeaa:	687b      	ldr	r3, [r7, #4]
   2eeac:	685b      	ldr	r3, [r3, #4]
   2eeae:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   2eeb0:	683b      	ldr	r3, [r7, #0]
   2eeb2:	0018      	movs	r0, r3
   2eeb4:	4b0b      	ldr	r3, [pc, #44]	; (2eee4 <MQTTPacket_equals+0x70>)
   2eeb6:	4798      	blx	r3
   2eeb8:	0003      	movs	r3, r0
   2eeba:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   2eebc:	697a      	ldr	r2, [r7, #20]
   2eebe:	68fb      	ldr	r3, [r7, #12]
   2eec0:	429a      	cmp	r2, r3
   2eec2:	d109      	bne.n	2eed8 <MQTTPacket_equals+0x64>
   2eec4:	697a      	ldr	r2, [r7, #20]
   2eec6:	6839      	ldr	r1, [r7, #0]
   2eec8:	693b      	ldr	r3, [r7, #16]
   2eeca:	0018      	movs	r0, r3
   2eecc:	4b06      	ldr	r3, [pc, #24]	; (2eee8 <MQTTPacket_equals+0x74>)
   2eece:	4798      	blx	r3
   2eed0:	1e03      	subs	r3, r0, #0
   2eed2:	d101      	bne.n	2eed8 <MQTTPacket_equals+0x64>
   2eed4:	2301      	movs	r3, #1
   2eed6:	e000      	b.n	2eeda <MQTTPacket_equals+0x66>
   2eed8:	2300      	movs	r3, #0
}
   2eeda:	0018      	movs	r0, r3
   2eedc:	46bd      	mov	sp, r7
   2eede:	b006      	add	sp, #24
   2eee0:	bd80      	pop	{r7, pc}
   2eee2:	46c0      	nop			; (mov r8, r8)
   2eee4:	0003353b 	.word	0x0003353b
   2eee8:	00033549 	.word	0x00033549

0002eeec <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   2eeec:	b580      	push	{r7, lr}
   2eeee:	b086      	sub	sp, #24
   2eef0:	af00      	add	r7, sp, #0
   2eef2:	60f8      	str	r0, [r7, #12]
   2eef4:	0038      	movs	r0, r7
   2eef6:	6001      	str	r1, [r0, #0]
   2eef8:	6042      	str	r2, [r0, #4]
   2eefa:	6083      	str	r3, [r0, #8]
	int len = 0;
   2eefc:	2300      	movs	r3, #0
   2eefe:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   2ef00:	003b      	movs	r3, r7
   2ef02:	6818      	ldr	r0, [r3, #0]
   2ef04:	6859      	ldr	r1, [r3, #4]
   2ef06:	689a      	ldr	r2, [r3, #8]
   2ef08:	4b09      	ldr	r3, [pc, #36]	; (2ef30 <MQTTSerialize_publishLength+0x44>)
   2ef0a:	4798      	blx	r3
   2ef0c:	0003      	movs	r3, r0
   2ef0e:	1c9a      	adds	r2, r3, #2
   2ef10:	6a3b      	ldr	r3, [r7, #32]
   2ef12:	18d3      	adds	r3, r2, r3
   2ef14:	697a      	ldr	r2, [r7, #20]
   2ef16:	18d3      	adds	r3, r2, r3
   2ef18:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   2ef1a:	68fb      	ldr	r3, [r7, #12]
   2ef1c:	2b00      	cmp	r3, #0
   2ef1e:	dd02      	ble.n	2ef26 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   2ef20:	697b      	ldr	r3, [r7, #20]
   2ef22:	3302      	adds	r3, #2
   2ef24:	617b      	str	r3, [r7, #20]
	return len;
   2ef26:	697b      	ldr	r3, [r7, #20]
}
   2ef28:	0018      	movs	r0, r3
   2ef2a:	46bd      	mov	sp, r7
   2ef2c:	b006      	add	sp, #24
   2ef2e:	bd80      	pop	{r7, pc}
   2ef30:	0002ee35 	.word	0x0002ee35

0002ef34 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   2ef34:	b590      	push	{r4, r7, lr}
   2ef36:	b08b      	sub	sp, #44	; 0x2c
   2ef38:	af02      	add	r7, sp, #8
   2ef3a:	60f8      	str	r0, [r7, #12]
   2ef3c:	60b9      	str	r1, [r7, #8]
   2ef3e:	603b      	str	r3, [r7, #0]
   2ef40:	1dfb      	adds	r3, r7, #7
   2ef42:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   2ef44:	68fb      	ldr	r3, [r7, #12]
   2ef46:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   2ef48:	2300      	movs	r3, #0
   2ef4a:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   2ef4c:	2300      	movs	r3, #0
   2ef4e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2ef50:	2300      	movs	r3, #0
   2ef52:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   2ef54:	2308      	movs	r3, #8
   2ef56:	2230      	movs	r2, #48	; 0x30
   2ef58:	4694      	mov	ip, r2
   2ef5a:	44bc      	add	ip, r7
   2ef5c:	4463      	add	r3, ip
   2ef5e:	6838      	ldr	r0, [r7, #0]
   2ef60:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2ef62:	9200      	str	r2, [sp, #0]
   2ef64:	6819      	ldr	r1, [r3, #0]
   2ef66:	685a      	ldr	r2, [r3, #4]
   2ef68:	689b      	ldr	r3, [r3, #8]
   2ef6a:	4c46      	ldr	r4, [pc, #280]	; (2f084 <MQTTSerialize_publish+0x150>)
   2ef6c:	47a0      	blx	r4
   2ef6e:	0003      	movs	r3, r0
   2ef70:	61bb      	str	r3, [r7, #24]
   2ef72:	69bb      	ldr	r3, [r7, #24]
   2ef74:	0018      	movs	r0, r3
   2ef76:	4b44      	ldr	r3, [pc, #272]	; (2f088 <MQTTSerialize_publish+0x154>)
   2ef78:	4798      	blx	r3
   2ef7a:	0002      	movs	r2, r0
   2ef7c:	68bb      	ldr	r3, [r7, #8]
   2ef7e:	429a      	cmp	r2, r3
   2ef80:	dd03      	ble.n	2ef8a <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2ef82:	2302      	movs	r3, #2
   2ef84:	425b      	negs	r3, r3
   2ef86:	61fb      	str	r3, [r7, #28]
		goto exit;
   2ef88:	e077      	b.n	2f07a <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   2ef8a:	2310      	movs	r3, #16
   2ef8c:	18fb      	adds	r3, r7, r3
   2ef8e:	781a      	ldrb	r2, [r3, #0]
   2ef90:	210f      	movs	r1, #15
   2ef92:	400a      	ands	r2, r1
   2ef94:	1c11      	adds	r1, r2, #0
   2ef96:	2230      	movs	r2, #48	; 0x30
   2ef98:	430a      	orrs	r2, r1
   2ef9a:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2ef9c:	1dfb      	adds	r3, r7, #7
   2ef9e:	781b      	ldrb	r3, [r3, #0]
   2efa0:	2201      	movs	r2, #1
   2efa2:	4013      	ands	r3, r2
   2efa4:	b2da      	uxtb	r2, r3
   2efa6:	2310      	movs	r3, #16
   2efa8:	18fb      	adds	r3, r7, r3
   2efaa:	2101      	movs	r1, #1
   2efac:	400a      	ands	r2, r1
   2efae:	00d0      	lsls	r0, r2, #3
   2efb0:	781a      	ldrb	r2, [r3, #0]
   2efb2:	2108      	movs	r1, #8
   2efb4:	438a      	bics	r2, r1
   2efb6:	1c11      	adds	r1, r2, #0
   2efb8:	1c02      	adds	r2, r0, #0
   2efba:	430a      	orrs	r2, r1
   2efbc:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   2efbe:	683b      	ldr	r3, [r7, #0]
   2efc0:	b2db      	uxtb	r3, r3
   2efc2:	1c1a      	adds	r2, r3, #0
   2efc4:	2303      	movs	r3, #3
   2efc6:	4013      	ands	r3, r2
   2efc8:	b2da      	uxtb	r2, r3
   2efca:	2310      	movs	r3, #16
   2efcc:	18fb      	adds	r3, r7, r3
   2efce:	2103      	movs	r1, #3
   2efd0:	400a      	ands	r2, r1
   2efd2:	1890      	adds	r0, r2, r2
   2efd4:	781a      	ldrb	r2, [r3, #0]
   2efd6:	2106      	movs	r1, #6
   2efd8:	438a      	bics	r2, r1
   2efda:	1c11      	adds	r1, r2, #0
   2efdc:	1c02      	adds	r2, r0, #0
   2efde:	430a      	orrs	r2, r1
   2efe0:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   2efe2:	2330      	movs	r3, #48	; 0x30
   2efe4:	18fb      	adds	r3, r7, r3
   2efe6:	781b      	ldrb	r3, [r3, #0]
   2efe8:	2201      	movs	r2, #1
   2efea:	4013      	ands	r3, r2
   2efec:	b2da      	uxtb	r2, r3
   2efee:	2310      	movs	r3, #16
   2eff0:	18fb      	adds	r3, r7, r3
   2eff2:	2101      	movs	r1, #1
   2eff4:	400a      	ands	r2, r1
   2eff6:	0010      	movs	r0, r2
   2eff8:	781a      	ldrb	r2, [r3, #0]
   2effa:	2101      	movs	r1, #1
   2effc:	438a      	bics	r2, r1
   2effe:	1c11      	adds	r1, r2, #0
   2f000:	1c02      	adds	r2, r0, #0
   2f002:	430a      	orrs	r2, r1
   2f004:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f006:	2310      	movs	r3, #16
   2f008:	18fb      	adds	r3, r7, r3
   2f00a:	781a      	ldrb	r2, [r3, #0]
   2f00c:	2314      	movs	r3, #20
   2f00e:	18fb      	adds	r3, r7, r3
   2f010:	0011      	movs	r1, r2
   2f012:	0018      	movs	r0, r3
   2f014:	4b1d      	ldr	r3, [pc, #116]	; (2f08c <MQTTSerialize_publish+0x158>)
   2f016:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2f018:	697b      	ldr	r3, [r7, #20]
   2f01a:	69ba      	ldr	r2, [r7, #24]
   2f01c:	0011      	movs	r1, r2
   2f01e:	0018      	movs	r0, r3
   2f020:	4b1b      	ldr	r3, [pc, #108]	; (2f090 <MQTTSerialize_publish+0x15c>)
   2f022:	4798      	blx	r3
   2f024:	0002      	movs	r2, r0
   2f026:	697b      	ldr	r3, [r7, #20]
   2f028:	189b      	adds	r3, r3, r2
   2f02a:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   2f02c:	2308      	movs	r3, #8
   2f02e:	2230      	movs	r2, #48	; 0x30
   2f030:	4694      	mov	ip, r2
   2f032:	44bc      	add	ip, r7
   2f034:	4463      	add	r3, ip
   2f036:	2214      	movs	r2, #20
   2f038:	18b8      	adds	r0, r7, r2
   2f03a:	6819      	ldr	r1, [r3, #0]
   2f03c:	685a      	ldr	r2, [r3, #4]
   2f03e:	689b      	ldr	r3, [r3, #8]
   2f040:	4c14      	ldr	r4, [pc, #80]	; (2f094 <MQTTSerialize_publish+0x160>)
   2f042:	47a0      	blx	r4

	if (qos > 0)
   2f044:	683b      	ldr	r3, [r7, #0]
   2f046:	2b00      	cmp	r3, #0
   2f048:	dd08      	ble.n	2f05c <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   2f04a:	2334      	movs	r3, #52	; 0x34
   2f04c:	18fb      	adds	r3, r7, r3
   2f04e:	881a      	ldrh	r2, [r3, #0]
   2f050:	2314      	movs	r3, #20
   2f052:	18fb      	adds	r3, r7, r3
   2f054:	0011      	movs	r1, r2
   2f056:	0018      	movs	r0, r3
   2f058:	4b0f      	ldr	r3, [pc, #60]	; (2f098 <MQTTSerialize_publish+0x164>)
   2f05a:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   2f05c:	697b      	ldr	r3, [r7, #20]
   2f05e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   2f060:	6c79      	ldr	r1, [r7, #68]	; 0x44
   2f062:	0018      	movs	r0, r3
   2f064:	4b0d      	ldr	r3, [pc, #52]	; (2f09c <MQTTSerialize_publish+0x168>)
   2f066:	4798      	blx	r3
	ptr += payloadlen;
   2f068:	697a      	ldr	r2, [r7, #20]
   2f06a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2f06c:	18d3      	adds	r3, r2, r3
   2f06e:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   2f070:	697b      	ldr	r3, [r7, #20]
   2f072:	001a      	movs	r2, r3
   2f074:	68fb      	ldr	r3, [r7, #12]
   2f076:	1ad3      	subs	r3, r2, r3
   2f078:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f07a:	69fb      	ldr	r3, [r7, #28]
}
   2f07c:	0018      	movs	r0, r3
   2f07e:	46bd      	mov	sp, r7
   2f080:	b009      	add	sp, #36	; 0x24
   2f082:	bd90      	pop	{r4, r7, pc}
   2f084:	0002eeed 	.word	0x0002eeed
   2f088:	0002eb59 	.word	0x0002eb59
   2f08c:	0002ec7b 	.word	0x0002ec7b
   2f090:	0002ea61 	.word	0x0002ea61
   2f094:	0002ed4d 	.word	0x0002ed4d
   2f098:	0002eca5 	.word	0x0002eca5
   2f09c:	00033169 	.word	0x00033169

0002f0a0 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   2f0a0:	b580      	push	{r7, lr}
   2f0a2:	b088      	sub	sp, #32
   2f0a4:	af00      	add	r7, sp, #0
   2f0a6:	60f8      	str	r0, [r7, #12]
   2f0a8:	60b9      	str	r1, [r7, #8]
   2f0aa:	0019      	movs	r1, r3
   2f0ac:	1dfb      	adds	r3, r7, #7
   2f0ae:	701a      	strb	r2, [r3, #0]
   2f0b0:	1dbb      	adds	r3, r7, #6
   2f0b2:	1c0a      	adds	r2, r1, #0
   2f0b4:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   2f0b6:	2300      	movs	r3, #0
   2f0b8:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   2f0ba:	2300      	movs	r3, #0
   2f0bc:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   2f0be:	68fb      	ldr	r3, [r7, #12]
   2f0c0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   2f0c2:	68bb      	ldr	r3, [r7, #8]
   2f0c4:	2b03      	cmp	r3, #3
   2f0c6:	dc03      	bgt.n	2f0d0 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f0c8:	2302      	movs	r3, #2
   2f0ca:	425b      	negs	r3, r3
   2f0cc:	61fb      	str	r3, [r7, #28]
		goto exit;
   2f0ce:	e055      	b.n	2f17c <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   2f0d0:	1dfb      	adds	r3, r7, #7
   2f0d2:	781b      	ldrb	r3, [r3, #0]
   2f0d4:	220f      	movs	r2, #15
   2f0d6:	4013      	ands	r3, r2
   2f0d8:	b2da      	uxtb	r2, r3
   2f0da:	2318      	movs	r3, #24
   2f0dc:	18fb      	adds	r3, r7, r3
   2f0de:	0110      	lsls	r0, r2, #4
   2f0e0:	781a      	ldrb	r2, [r3, #0]
   2f0e2:	210f      	movs	r1, #15
   2f0e4:	400a      	ands	r2, r1
   2f0e6:	1c11      	adds	r1, r2, #0
   2f0e8:	1c02      	adds	r2, r0, #0
   2f0ea:	430a      	orrs	r2, r1
   2f0ec:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f0ee:	1dbb      	adds	r3, r7, #6
   2f0f0:	781b      	ldrb	r3, [r3, #0]
   2f0f2:	2201      	movs	r2, #1
   2f0f4:	4013      	ands	r3, r2
   2f0f6:	b2da      	uxtb	r2, r3
   2f0f8:	2318      	movs	r3, #24
   2f0fa:	18fb      	adds	r3, r7, r3
   2f0fc:	2101      	movs	r1, #1
   2f0fe:	400a      	ands	r2, r1
   2f100:	00d0      	lsls	r0, r2, #3
   2f102:	781a      	ldrb	r2, [r3, #0]
   2f104:	2108      	movs	r1, #8
   2f106:	438a      	bics	r2, r1
   2f108:	1c11      	adds	r1, r2, #0
   2f10a:	1c02      	adds	r2, r0, #0
   2f10c:	430a      	orrs	r2, r1
   2f10e:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   2f110:	1dfb      	adds	r3, r7, #7
   2f112:	781b      	ldrb	r3, [r3, #0]
   2f114:	3b06      	subs	r3, #6
   2f116:	425a      	negs	r2, r3
   2f118:	4153      	adcs	r3, r2
   2f11a:	b2db      	uxtb	r3, r3
   2f11c:	1c1a      	adds	r2, r3, #0
   2f11e:	2303      	movs	r3, #3
   2f120:	4013      	ands	r3, r2
   2f122:	b2da      	uxtb	r2, r3
   2f124:	2318      	movs	r3, #24
   2f126:	18fb      	adds	r3, r7, r3
   2f128:	2103      	movs	r1, #3
   2f12a:	400a      	ands	r2, r1
   2f12c:	1890      	adds	r0, r2, r2
   2f12e:	781a      	ldrb	r2, [r3, #0]
   2f130:	2106      	movs	r1, #6
   2f132:	438a      	bics	r2, r1
   2f134:	1c11      	adds	r1, r2, #0
   2f136:	1c02      	adds	r2, r0, #0
   2f138:	430a      	orrs	r2, r1
   2f13a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f13c:	2318      	movs	r3, #24
   2f13e:	18fb      	adds	r3, r7, r3
   2f140:	781a      	ldrb	r2, [r3, #0]
   2f142:	2314      	movs	r3, #20
   2f144:	18fb      	adds	r3, r7, r3
   2f146:	0011      	movs	r1, r2
   2f148:	0018      	movs	r0, r3
   2f14a:	4b0f      	ldr	r3, [pc, #60]	; (2f188 <MQTTSerialize_ack+0xe8>)
   2f14c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   2f14e:	697b      	ldr	r3, [r7, #20]
   2f150:	2102      	movs	r1, #2
   2f152:	0018      	movs	r0, r3
   2f154:	4b0d      	ldr	r3, [pc, #52]	; (2f18c <MQTTSerialize_ack+0xec>)
   2f156:	4798      	blx	r3
   2f158:	0002      	movs	r2, r0
   2f15a:	697b      	ldr	r3, [r7, #20]
   2f15c:	189b      	adds	r3, r3, r2
   2f15e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   2f160:	2328      	movs	r3, #40	; 0x28
   2f162:	18fb      	adds	r3, r7, r3
   2f164:	881a      	ldrh	r2, [r3, #0]
   2f166:	2314      	movs	r3, #20
   2f168:	18fb      	adds	r3, r7, r3
   2f16a:	0011      	movs	r1, r2
   2f16c:	0018      	movs	r0, r3
   2f16e:	4b08      	ldr	r3, [pc, #32]	; (2f190 <MQTTSerialize_ack+0xf0>)
   2f170:	4798      	blx	r3
	rc = ptr - buf;
   2f172:	697b      	ldr	r3, [r7, #20]
   2f174:	001a      	movs	r2, r3
   2f176:	68fb      	ldr	r3, [r7, #12]
   2f178:	1ad3      	subs	r3, r2, r3
   2f17a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f17c:	69fb      	ldr	r3, [r7, #28]
}
   2f17e:	0018      	movs	r0, r3
   2f180:	46bd      	mov	sp, r7
   2f182:	b008      	add	sp, #32
   2f184:	bd80      	pop	{r7, pc}
   2f186:	46c0      	nop			; (mov r8, r8)
   2f188:	0002ec7b 	.word	0x0002ec7b
   2f18c:	0002ea61 	.word	0x0002ea61
   2f190:	0002eca5 	.word	0x0002eca5

0002f194 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   2f194:	b580      	push	{r7, lr}
   2f196:	b084      	sub	sp, #16
   2f198:	af00      	add	r7, sp, #0
   2f19a:	6078      	str	r0, [r7, #4]
   2f19c:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   2f19e:	2302      	movs	r3, #2
   2f1a0:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   2f1a2:	2300      	movs	r3, #0
   2f1a4:	60fb      	str	r3, [r7, #12]
   2f1a6:	e014      	b.n	2f1d2 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   2f1a8:	68fa      	ldr	r2, [r7, #12]
   2f1aa:	0013      	movs	r3, r2
   2f1ac:	005b      	lsls	r3, r3, #1
   2f1ae:	189b      	adds	r3, r3, r2
   2f1b0:	009b      	lsls	r3, r3, #2
   2f1b2:	001a      	movs	r2, r3
   2f1b4:	683b      	ldr	r3, [r7, #0]
   2f1b6:	189b      	adds	r3, r3, r2
   2f1b8:	6818      	ldr	r0, [r3, #0]
   2f1ba:	6859      	ldr	r1, [r3, #4]
   2f1bc:	689a      	ldr	r2, [r3, #8]
   2f1be:	4b09      	ldr	r3, [pc, #36]	; (2f1e4 <MQTTSerialize_subscribeLength+0x50>)
   2f1c0:	4798      	blx	r3
   2f1c2:	0003      	movs	r3, r0
   2f1c4:	3303      	adds	r3, #3
   2f1c6:	68ba      	ldr	r2, [r7, #8]
   2f1c8:	18d3      	adds	r3, r2, r3
   2f1ca:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   2f1cc:	68fb      	ldr	r3, [r7, #12]
   2f1ce:	3301      	adds	r3, #1
   2f1d0:	60fb      	str	r3, [r7, #12]
   2f1d2:	68fa      	ldr	r2, [r7, #12]
   2f1d4:	687b      	ldr	r3, [r7, #4]
   2f1d6:	429a      	cmp	r2, r3
   2f1d8:	dbe6      	blt.n	2f1a8 <MQTTSerialize_subscribeLength+0x14>
	return len;
   2f1da:	68bb      	ldr	r3, [r7, #8]
}
   2f1dc:	0018      	movs	r0, r3
   2f1de:	46bd      	mov	sp, r7
   2f1e0:	b004      	add	sp, #16
   2f1e2:	bd80      	pop	{r7, pc}
   2f1e4:	0002ee35 	.word	0x0002ee35

0002f1e8 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   2f1e8:	b590      	push	{r4, r7, lr}
   2f1ea:	b08b      	sub	sp, #44	; 0x2c
   2f1ec:	af00      	add	r7, sp, #0
   2f1ee:	60f8      	str	r0, [r7, #12]
   2f1f0:	60b9      	str	r1, [r7, #8]
   2f1f2:	0019      	movs	r1, r3
   2f1f4:	1dfb      	adds	r3, r7, #7
   2f1f6:	701a      	strb	r2, [r3, #0]
   2f1f8:	1d3b      	adds	r3, r7, #4
   2f1fa:	1c0a      	adds	r2, r1, #0
   2f1fc:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   2f1fe:	68fb      	ldr	r3, [r7, #12]
   2f200:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   2f202:	2300      	movs	r3, #0
   2f204:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   2f206:	2300      	movs	r3, #0
   2f208:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   2f20a:	2300      	movs	r3, #0
   2f20c:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   2f20e:	2300      	movs	r3, #0
   2f210:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   2f212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2f214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f216:	0011      	movs	r1, r2
   2f218:	0018      	movs	r0, r3
   2f21a:	4b41      	ldr	r3, [pc, #260]	; (2f320 <MQTTSerialize_subscribe+0x138>)
   2f21c:	4798      	blx	r3
   2f21e:	0003      	movs	r3, r0
   2f220:	61fb      	str	r3, [r7, #28]
   2f222:	69fb      	ldr	r3, [r7, #28]
   2f224:	0018      	movs	r0, r3
   2f226:	4b3f      	ldr	r3, [pc, #252]	; (2f324 <MQTTSerialize_subscribe+0x13c>)
   2f228:	4798      	blx	r3
   2f22a:	0002      	movs	r2, r0
   2f22c:	68bb      	ldr	r3, [r7, #8]
   2f22e:	429a      	cmp	r2, r3
   2f230:	dd03      	ble.n	2f23a <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   2f232:	2302      	movs	r3, #2
   2f234:	425b      	negs	r3, r3
   2f236:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   2f238:	e06c      	b.n	2f314 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   2f23a:	2314      	movs	r3, #20
   2f23c:	18fb      	adds	r3, r7, r3
   2f23e:	2200      	movs	r2, #0
   2f240:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   2f242:	2314      	movs	r3, #20
   2f244:	18fb      	adds	r3, r7, r3
   2f246:	781a      	ldrb	r2, [r3, #0]
   2f248:	210f      	movs	r1, #15
   2f24a:	400a      	ands	r2, r1
   2f24c:	1c11      	adds	r1, r2, #0
   2f24e:	2280      	movs	r2, #128	; 0x80
   2f250:	4252      	negs	r2, r2
   2f252:	430a      	orrs	r2, r1
   2f254:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   2f256:	1dfb      	adds	r3, r7, #7
   2f258:	781b      	ldrb	r3, [r3, #0]
   2f25a:	2201      	movs	r2, #1
   2f25c:	4013      	ands	r3, r2
   2f25e:	b2da      	uxtb	r2, r3
   2f260:	2314      	movs	r3, #20
   2f262:	18fb      	adds	r3, r7, r3
   2f264:	2101      	movs	r1, #1
   2f266:	400a      	ands	r2, r1
   2f268:	00d0      	lsls	r0, r2, #3
   2f26a:	781a      	ldrb	r2, [r3, #0]
   2f26c:	2108      	movs	r1, #8
   2f26e:	438a      	bics	r2, r1
   2f270:	1c11      	adds	r1, r2, #0
   2f272:	1c02      	adds	r2, r0, #0
   2f274:	430a      	orrs	r2, r1
   2f276:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   2f278:	2314      	movs	r3, #20
   2f27a:	18fb      	adds	r3, r7, r3
   2f27c:	781a      	ldrb	r2, [r3, #0]
   2f27e:	2106      	movs	r1, #6
   2f280:	438a      	bics	r2, r1
   2f282:	1c11      	adds	r1, r2, #0
   2f284:	2202      	movs	r2, #2
   2f286:	430a      	orrs	r2, r1
   2f288:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   2f28a:	2314      	movs	r3, #20
   2f28c:	18fb      	adds	r3, r7, r3
   2f28e:	781a      	ldrb	r2, [r3, #0]
   2f290:	2318      	movs	r3, #24
   2f292:	18fb      	adds	r3, r7, r3
   2f294:	0011      	movs	r1, r2
   2f296:	0018      	movs	r0, r3
   2f298:	4b23      	ldr	r3, [pc, #140]	; (2f328 <MQTTSerialize_subscribe+0x140>)
   2f29a:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   2f29c:	69bb      	ldr	r3, [r7, #24]
   2f29e:	69fa      	ldr	r2, [r7, #28]
   2f2a0:	0011      	movs	r1, r2
   2f2a2:	0018      	movs	r0, r3
   2f2a4:	4b21      	ldr	r3, [pc, #132]	; (2f32c <MQTTSerialize_subscribe+0x144>)
   2f2a6:	4798      	blx	r3
   2f2a8:	0002      	movs	r2, r0
   2f2aa:	69bb      	ldr	r3, [r7, #24]
   2f2ac:	189b      	adds	r3, r3, r2
   2f2ae:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   2f2b0:	1d3b      	adds	r3, r7, #4
   2f2b2:	881a      	ldrh	r2, [r3, #0]
   2f2b4:	2318      	movs	r3, #24
   2f2b6:	18fb      	adds	r3, r7, r3
   2f2b8:	0011      	movs	r1, r2
   2f2ba:	0018      	movs	r0, r3
   2f2bc:	4b1c      	ldr	r3, [pc, #112]	; (2f330 <MQTTSerialize_subscribe+0x148>)
   2f2be:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   2f2c0:	2300      	movs	r3, #0
   2f2c2:	623b      	str	r3, [r7, #32]
   2f2c4:	e01d      	b.n	2f302 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   2f2c6:	6a3a      	ldr	r2, [r7, #32]
   2f2c8:	0013      	movs	r3, r2
   2f2ca:	005b      	lsls	r3, r3, #1
   2f2cc:	189b      	adds	r3, r3, r2
   2f2ce:	009b      	lsls	r3, r3, #2
   2f2d0:	001a      	movs	r2, r3
   2f2d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2f2d4:	189b      	adds	r3, r3, r2
   2f2d6:	2218      	movs	r2, #24
   2f2d8:	18b8      	adds	r0, r7, r2
   2f2da:	6819      	ldr	r1, [r3, #0]
   2f2dc:	685a      	ldr	r2, [r3, #4]
   2f2de:	689b      	ldr	r3, [r3, #8]
   2f2e0:	4c14      	ldr	r4, [pc, #80]	; (2f334 <MQTTSerialize_subscribe+0x14c>)
   2f2e2:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   2f2e4:	6a3b      	ldr	r3, [r7, #32]
   2f2e6:	009b      	lsls	r3, r3, #2
   2f2e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2f2ea:	18d3      	adds	r3, r2, r3
   2f2ec:	681b      	ldr	r3, [r3, #0]
   2f2ee:	b2da      	uxtb	r2, r3
   2f2f0:	2318      	movs	r3, #24
   2f2f2:	18fb      	adds	r3, r7, r3
   2f2f4:	0011      	movs	r1, r2
   2f2f6:	0018      	movs	r0, r3
   2f2f8:	4b0b      	ldr	r3, [pc, #44]	; (2f328 <MQTTSerialize_subscribe+0x140>)
   2f2fa:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   2f2fc:	6a3b      	ldr	r3, [r7, #32]
   2f2fe:	3301      	adds	r3, #1
   2f300:	623b      	str	r3, [r7, #32]
   2f302:	6a3a      	ldr	r2, [r7, #32]
   2f304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f306:	429a      	cmp	r2, r3
   2f308:	dbdd      	blt.n	2f2c6 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   2f30a:	69bb      	ldr	r3, [r7, #24]
   2f30c:	001a      	movs	r2, r3
   2f30e:	68fb      	ldr	r3, [r7, #12]
   2f310:	1ad3      	subs	r3, r2, r3
   2f312:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f316:	0018      	movs	r0, r3
   2f318:	46bd      	mov	sp, r7
   2f31a:	b00b      	add	sp, #44	; 0x2c
   2f31c:	bd90      	pop	{r4, r7, pc}
   2f31e:	46c0      	nop			; (mov r8, r8)
   2f320:	0002f195 	.word	0x0002f195
   2f324:	0002eb59 	.word	0x0002eb59
   2f328:	0002ec7b 	.word	0x0002ec7b
   2f32c:	0002ea61 	.word	0x0002ea61
   2f330:	0002eca5 	.word	0x0002eca5
   2f334:	0002ed4d 	.word	0x0002ed4d

0002f338 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   2f338:	b590      	push	{r4, r7, lr}
   2f33a:	b08b      	sub	sp, #44	; 0x2c
   2f33c:	af00      	add	r7, sp, #0
   2f33e:	60f8      	str	r0, [r7, #12]
   2f340:	60b9      	str	r1, [r7, #8]
   2f342:	607a      	str	r2, [r7, #4]
   2f344:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   2f346:	2300      	movs	r3, #0
   2f348:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   2f34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2f34c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   2f34e:	2300      	movs	r3, #0
   2f350:	623b      	str	r3, [r7, #32]
	int rc = 0;
   2f352:	2300      	movs	r3, #0
   2f354:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   2f356:	2318      	movs	r3, #24
   2f358:	18fb      	adds	r3, r7, r3
   2f35a:	0018      	movs	r0, r3
   2f35c:	4b2c      	ldr	r3, [pc, #176]	; (2f410 <MQTTDeserialize_suback+0xd8>)
   2f35e:	4798      	blx	r3
   2f360:	0003      	movs	r3, r0
   2f362:	001a      	movs	r2, r3
   2f364:	231c      	movs	r3, #28
   2f366:	18fb      	adds	r3, r7, r3
   2f368:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   2f36a:	231c      	movs	r3, #28
   2f36c:	18fb      	adds	r3, r7, r3
   2f36e:	781b      	ldrb	r3, [r3, #0]
   2f370:	220f      	movs	r2, #15
   2f372:	4393      	bics	r3, r2
   2f374:	b2db      	uxtb	r3, r3
   2f376:	2b90      	cmp	r3, #144	; 0x90
   2f378:	d142      	bne.n	2f400 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   2f37a:	69bb      	ldr	r3, [r7, #24]
   2f37c:	2214      	movs	r2, #20
   2f37e:	18ba      	adds	r2, r7, r2
   2f380:	0011      	movs	r1, r2
   2f382:	0018      	movs	r0, r3
   2f384:	4b23      	ldr	r3, [pc, #140]	; (2f414 <MQTTDeserialize_suback+0xdc>)
   2f386:	4798      	blx	r3
   2f388:	0003      	movs	r3, r0
   2f38a:	627b      	str	r3, [r7, #36]	; 0x24
   2f38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f38e:	69bb      	ldr	r3, [r7, #24]
   2f390:	189b      	adds	r3, r3, r2
   2f392:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   2f394:	69bb      	ldr	r3, [r7, #24]
   2f396:	697a      	ldr	r2, [r7, #20]
   2f398:	189b      	adds	r3, r3, r2
   2f39a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   2f39c:	6a3b      	ldr	r3, [r7, #32]
   2f39e:	69ba      	ldr	r2, [r7, #24]
   2f3a0:	1a9b      	subs	r3, r3, r2
   2f3a2:	2b01      	cmp	r3, #1
   2f3a4:	dd2e      	ble.n	2f404 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   2f3a6:	2318      	movs	r3, #24
   2f3a8:	18fb      	adds	r3, r7, r3
   2f3aa:	0018      	movs	r0, r3
   2f3ac:	4b1a      	ldr	r3, [pc, #104]	; (2f418 <MQTTDeserialize_suback+0xe0>)
   2f3ae:	4798      	blx	r3
   2f3b0:	0003      	movs	r3, r0
   2f3b2:	b29a      	uxth	r2, r3
   2f3b4:	68fb      	ldr	r3, [r7, #12]
   2f3b6:	801a      	strh	r2, [r3, #0]

	*count = 0;
   2f3b8:	687b      	ldr	r3, [r7, #4]
   2f3ba:	2200      	movs	r2, #0
   2f3bc:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   2f3be:	e018      	b.n	2f3f2 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   2f3c0:	687b      	ldr	r3, [r7, #4]
   2f3c2:	681a      	ldr	r2, [r3, #0]
   2f3c4:	68bb      	ldr	r3, [r7, #8]
   2f3c6:	429a      	cmp	r2, r3
   2f3c8:	dd03      	ble.n	2f3d2 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   2f3ca:	2301      	movs	r3, #1
   2f3cc:	425b      	negs	r3, r3
   2f3ce:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   2f3d0:	e019      	b.n	2f406 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   2f3d2:	687b      	ldr	r3, [r7, #4]
   2f3d4:	681a      	ldr	r2, [r3, #0]
   2f3d6:	1c51      	adds	r1, r2, #1
   2f3d8:	687b      	ldr	r3, [r7, #4]
   2f3da:	6019      	str	r1, [r3, #0]
   2f3dc:	0013      	movs	r3, r2
   2f3de:	009b      	lsls	r3, r3, #2
   2f3e0:	683a      	ldr	r2, [r7, #0]
   2f3e2:	18d4      	adds	r4, r2, r3
   2f3e4:	2318      	movs	r3, #24
   2f3e6:	18fb      	adds	r3, r7, r3
   2f3e8:	0018      	movs	r0, r3
   2f3ea:	4b09      	ldr	r3, [pc, #36]	; (2f410 <MQTTDeserialize_suback+0xd8>)
   2f3ec:	4798      	blx	r3
   2f3ee:	0003      	movs	r3, r0
   2f3f0:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   2f3f2:	69ba      	ldr	r2, [r7, #24]
   2f3f4:	6a3b      	ldr	r3, [r7, #32]
   2f3f6:	429a      	cmp	r2, r3
   2f3f8:	d3e2      	bcc.n	2f3c0 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   2f3fa:	2301      	movs	r3, #1
   2f3fc:	627b      	str	r3, [r7, #36]	; 0x24
   2f3fe:	e002      	b.n	2f406 <MQTTDeserialize_suback+0xce>
		goto exit;
   2f400:	46c0      	nop			; (mov r8, r8)
   2f402:	e000      	b.n	2f406 <MQTTDeserialize_suback+0xce>
		goto exit;
   2f404:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   2f406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   2f408:	0018      	movs	r0, r3
   2f40a:	46bd      	mov	sp, r7
   2f40c:	b00b      	add	sp, #44	; 0x2c
   2f40e:	bd90      	pop	{r4, r7, pc}
   2f410:	0002ec4f 	.word	0x0002ec4f
   2f414:	0002ebe9 	.word	0x0002ebe9
   2f418:	0002ec1d 	.word	0x0002ec1d

0002f41c <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   2f41c:	b580      	push	{r7, lr}
   2f41e:	b082      	sub	sp, #8
   2f420:	af00      	add	r7, sp, #0
   2f422:	6078      	str	r0, [r7, #4]
	config->port = 80;
   2f424:	687b      	ldr	r3, [r7, #4]
   2f426:	2250      	movs	r2, #80	; 0x50
   2f428:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   2f42a:	687b      	ldr	r3, [r7, #4]
   2f42c:	2200      	movs	r2, #0
   2f42e:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   2f430:	687b      	ldr	r3, [r7, #4]
   2f432:	4a0b      	ldr	r2, [pc, #44]	; (2f460 <http_client_get_config_defaults+0x44>)
   2f434:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   2f436:	687b      	ldr	r3, [r7, #4]
   2f438:	2200      	movs	r2, #0
   2f43a:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   2f43c:	687b      	ldr	r3, [r7, #4]
   2f43e:	2200      	movs	r2, #0
   2f440:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   2f442:	687b      	ldr	r3, [r7, #4]
   2f444:	2280      	movs	r2, #128	; 0x80
   2f446:	0052      	lsls	r2, r2, #1
   2f448:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   2f44a:	687b      	ldr	r3, [r7, #4]
   2f44c:	2252      	movs	r2, #82	; 0x52
   2f44e:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   2f450:	687b      	ldr	r3, [r7, #4]
   2f452:	4a04      	ldr	r2, [pc, #16]	; (2f464 <http_client_get_config_defaults+0x48>)
   2f454:	619a      	str	r2, [r3, #24]
}
   2f456:	46c0      	nop			; (mov r8, r8)
   2f458:	46bd      	mov	sp, r7
   2f45a:	b002      	add	sp, #8
   2f45c:	bd80      	pop	{r7, pc}
   2f45e:	46c0      	nop			; (mov r8, r8)
   2f460:	00004e20 	.word	0x00004e20
   2f464:	00038124 	.word	0x00038124

0002f468 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   2f468:	b590      	push	{r4, r7, lr}
   2f46a:	b083      	sub	sp, #12
   2f46c:	af00      	add	r7, sp, #0
   2f46e:	6078      	str	r0, [r7, #4]
   2f470:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   2f472:	687b      	ldr	r3, [r7, #4]
   2f474:	2b00      	cmp	r3, #0
   2f476:	d002      	beq.n	2f47e <http_client_init+0x16>
   2f478:	683b      	ldr	r3, [r7, #0]
   2f47a:	2b00      	cmp	r3, #0
   2f47c:	d102      	bne.n	2f484 <http_client_init+0x1c>
		return -EINVAL;
   2f47e:	2316      	movs	r3, #22
   2f480:	425b      	negs	r3, r3
   2f482:	e058      	b.n	2f536 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   2f484:	683b      	ldr	r3, [r7, #0]
   2f486:	691b      	ldr	r3, [r3, #16]
   2f488:	2b00      	cmp	r3, #0
   2f48a:	d102      	bne.n	2f492 <http_client_init+0x2a>
		return -EINVAL;
   2f48c:	2316      	movs	r3, #22
   2f48e:	425b      	negs	r3, r3
   2f490:	e051      	b.n	2f536 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   2f492:	683b      	ldr	r3, [r7, #0]
   2f494:	685b      	ldr	r3, [r3, #4]
   2f496:	2b00      	cmp	r3, #0
   2f498:	d102      	bne.n	2f4a0 <http_client_init+0x38>
		return -EINVAL;
   2f49a:	2316      	movs	r3, #22
   2f49c:	425b      	negs	r3, r3
   2f49e:	e04a      	b.n	2f536 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   2f4a0:	683b      	ldr	r3, [r7, #0]
   2f4a2:	695b      	ldr	r3, [r3, #20]
   2f4a4:	2b51      	cmp	r3, #81	; 0x51
   2f4a6:	d802      	bhi.n	2f4ae <http_client_init+0x46>
		return -EINVAL;
   2f4a8:	2316      	movs	r3, #22
   2f4aa:	425b      	negs	r3, r3
   2f4ac:	e043      	b.n	2f536 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   2f4ae:	687b      	ldr	r3, [r7, #4]
   2f4b0:	22e8      	movs	r2, #232	; 0xe8
   2f4b2:	2100      	movs	r1, #0
   2f4b4:	0018      	movs	r0, r3
   2f4b6:	4b22      	ldr	r3, [pc, #136]	; (2f540 <http_client_init+0xd8>)
   2f4b8:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   2f4ba:	687b      	ldr	r3, [r7, #4]
   2f4bc:	3350      	adds	r3, #80	; 0x50
   2f4be:	6839      	ldr	r1, [r7, #0]
   2f4c0:	221c      	movs	r2, #28
   2f4c2:	0018      	movs	r0, r3
   2f4c4:	4b1f      	ldr	r3, [pc, #124]	; (2f544 <http_client_init+0xdc>)
   2f4c6:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   2f4c8:	687b      	ldr	r3, [r7, #4]
   2f4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f4cc:	2b00      	cmp	r3, #0
   2f4ce:	d115      	bne.n	2f4fc <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   2f4d0:	683b      	ldr	r3, [r7, #0]
   2f4d2:	691b      	ldr	r3, [r3, #16]
   2f4d4:	0018      	movs	r0, r3
   2f4d6:	4b1c      	ldr	r3, [pc, #112]	; (2f548 <http_client_init+0xe0>)
   2f4d8:	4798      	blx	r3
   2f4da:	0003      	movs	r3, r0
   2f4dc:	001a      	movs	r2, r3
   2f4de:	687b      	ldr	r3, [r7, #4]
   2f4e0:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   2f4e2:	687b      	ldr	r3, [r7, #4]
   2f4e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   2f4e6:	2b00      	cmp	r3, #0
   2f4e8:	d102      	bne.n	2f4f0 <http_client_init+0x88>
			return -ENOMEM;
   2f4ea:	230c      	movs	r3, #12
   2f4ec:	425b      	negs	r3, r3
   2f4ee:	e022      	b.n	2f536 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   2f4f0:	687b      	ldr	r3, [r7, #4]
   2f4f2:	2241      	movs	r2, #65	; 0x41
   2f4f4:	5c99      	ldrb	r1, [r3, r2]
   2f4f6:	2004      	movs	r0, #4
   2f4f8:	4301      	orrs	r1, r0
   2f4fa:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   2f4fc:	683b      	ldr	r3, [r7, #0]
   2f4fe:	891b      	ldrh	r3, [r3, #8]
   2f500:	2b00      	cmp	r3, #0
   2f502:	d010      	beq.n	2f526 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   2f504:	683b      	ldr	r3, [r7, #0]
   2f506:	6858      	ldr	r0, [r3, #4]
   2f508:	687a      	ldr	r2, [r7, #4]
   2f50a:	4910      	ldr	r1, [pc, #64]	; (2f54c <http_client_init+0xe4>)
   2f50c:	2300      	movs	r3, #0
   2f50e:	4c10      	ldr	r4, [pc, #64]	; (2f550 <http_client_init+0xe8>)
   2f510:	47a0      	blx	r4
   2f512:	0002      	movs	r2, r0
   2f514:	687b      	ldr	r3, [r7, #4]
   2f516:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   2f518:	687b      	ldr	r3, [r7, #4]
   2f51a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2f51c:	2b00      	cmp	r3, #0
   2f51e:	da02      	bge.n	2f526 <http_client_init+0xbe>
			return -ENOSPC;
   2f520:	231c      	movs	r3, #28
   2f522:	425b      	negs	r3, r3
   2f524:	e007      	b.n	2f536 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   2f526:	687b      	ldr	r3, [r7, #4]
   2f528:	2200      	movs	r2, #0
   2f52a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2f52c:	687b      	ldr	r3, [r7, #4]
   2f52e:	22d8      	movs	r2, #216	; 0xd8
   2f530:	2100      	movs	r1, #0
   2f532:	5099      	str	r1, [r3, r2]

	return 0;
   2f534:	2300      	movs	r3, #0
}
   2f536:	0018      	movs	r0, r3
   2f538:	46bd      	mov	sp, r7
   2f53a:	b003      	add	sp, #12
   2f53c:	bd90      	pop	{r4, r7, pc}
   2f53e:	46c0      	nop			; (mov r8, r8)
   2f540:	0003319f 	.word	0x0003319f
   2f544:	00033169 	.word	0x00033169
   2f548:	00033141 	.word	0x00033141
   2f54c:	0002f819 	.word	0x0002f819
   2f550:	00030ebd 	.word	0x00030ebd

0002f554 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   2f554:	b580      	push	{r7, lr}
   2f556:	b082      	sub	sp, #8
   2f558:	af00      	add	r7, sp, #0
   2f55a:	6078      	str	r0, [r7, #4]
   2f55c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   2f55e:	687b      	ldr	r3, [r7, #4]
   2f560:	2b00      	cmp	r3, #0
   2f562:	d102      	bne.n	2f56a <http_client_register_callback+0x16>
		return -EINVAL;
   2f564:	2316      	movs	r3, #22
   2f566:	425b      	negs	r3, r3
   2f568:	e003      	b.n	2f572 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   2f56a:	687b      	ldr	r3, [r7, #4]
   2f56c:	683a      	ldr	r2, [r7, #0]
   2f56e:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   2f570:	2300      	movs	r3, #0
}
   2f572:	0018      	movs	r0, r3
   2f574:	46bd      	mov	sp, r7
   2f576:	b002      	add	sp, #8
   2f578:	bd80      	pop	{r7, pc}
	...

0002f57c <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   2f57c:	b580      	push	{r7, lr}
   2f57e:	b082      	sub	sp, #8
   2f580:	af00      	add	r7, sp, #0
   2f582:	6078      	str	r0, [r7, #4]
	switch (err) {
   2f584:	687b      	ldr	r3, [r7, #4]
   2f586:	330e      	adds	r3, #14
   2f588:	2b0e      	cmp	r3, #14
   2f58a:	d825      	bhi.n	2f5d8 <_hwerr_to_stderr+0x5c>
   2f58c:	009a      	lsls	r2, r3, #2
   2f58e:	4b18      	ldr	r3, [pc, #96]	; (2f5f0 <_hwerr_to_stderr+0x74>)
   2f590:	18d3      	adds	r3, r2, r3
   2f592:	681b      	ldr	r3, [r3, #0]
   2f594:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   2f596:	2305      	movs	r3, #5
   2f598:	425b      	negs	r3, r3
   2f59a:	e024      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   2f59c:	2302      	movs	r3, #2
   2f59e:	425b      	negs	r3, r3
   2f5a0:	e021      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   2f5a2:	2370      	movs	r3, #112	; 0x70
   2f5a4:	425b      	negs	r3, r3
   2f5a6:	e01e      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   2f5a8:	230c      	movs	r3, #12
   2f5aa:	425b      	negs	r3, r3
   2f5ac:	e01b      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   2f5ae:	2316      	movs	r3, #22
   2f5b0:	425b      	negs	r3, r3
   2f5b2:	e018      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   2f5b4:	230c      	movs	r3, #12
   2f5b6:	425b      	negs	r3, r3
   2f5b8:	e015      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   2f5ba:	2305      	movs	r3, #5
   2f5bc:	425b      	negs	r3, r3
   2f5be:	e012      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   2f5c0:	2379      	movs	r3, #121	; 0x79
   2f5c2:	425b      	negs	r3, r3
   2f5c4:	e00f      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   2f5c6:	2368      	movs	r3, #104	; 0x68
   2f5c8:	425b      	negs	r3, r3
   2f5ca:	e00c      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   2f5cc:	230b      	movs	r3, #11
   2f5ce:	425b      	negs	r3, r3
   2f5d0:	e009      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   2f5d2:	2310      	movs	r3, #16
   2f5d4:	425b      	negs	r3, r3
   2f5d6:	e006      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   2f5d8:	687b      	ldr	r3, [r7, #4]
   2f5da:	2b00      	cmp	r3, #0
   2f5dc:	da02      	bge.n	2f5e4 <_hwerr_to_stderr+0x68>
				return -EIO;
   2f5de:	2305      	movs	r3, #5
   2f5e0:	425b      	negs	r3, r3
   2f5e2:	e000      	b.n	2f5e6 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   2f5e4:	2300      	movs	r3, #0
	}
}
   2f5e6:	0018      	movs	r0, r3
   2f5e8:	46bd      	mov	sp, r7
   2f5ea:	b002      	add	sp, #8
   2f5ec:	bd80      	pop	{r7, pc}
   2f5ee:	46c0      	nop			; (mov r8, r8)
   2f5f0:	00038260 	.word	0x00038260

0002f5f4 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   2f5f4:	b580      	push	{r7, lr}
   2f5f6:	b08a      	sub	sp, #40	; 0x28
   2f5f8:	af00      	add	r7, sp, #0
   2f5fa:	603a      	str	r2, [r7, #0]
   2f5fc:	1dfb      	adds	r3, r7, #7
   2f5fe:	1c02      	adds	r2, r0, #0
   2f600:	701a      	strb	r2, [r3, #0]
   2f602:	1dbb      	adds	r3, r7, #6
   2f604:	1c0a      	adds	r2, r1, #0
   2f606:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   2f608:	1dfb      	adds	r3, r7, #7
   2f60a:	2200      	movs	r2, #0
   2f60c:	569a      	ldrsb	r2, [r3, r2]
   2f60e:	4b4b      	ldr	r3, [pc, #300]	; (2f73c <http_client_socket_event_handler+0x148>)
   2f610:	0092      	lsls	r2, r2, #2
   2f612:	58d3      	ldr	r3, [r2, r3]
   2f614:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   2f616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f618:	2b00      	cmp	r3, #0
   2f61a:	d100      	bne.n	2f61e <http_client_socket_event_handler+0x2a>
   2f61c:	e08a      	b.n	2f734 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   2f61e:	1dbb      	adds	r3, r7, #6
   2f620:	781b      	ldrb	r3, [r3, #0]
   2f622:	2b06      	cmp	r3, #6
   2f624:	d040      	beq.n	2f6a8 <http_client_socket_event_handler+0xb4>
   2f626:	2b07      	cmp	r3, #7
   2f628:	d060      	beq.n	2f6ec <http_client_socket_event_handler+0xf8>
   2f62a:	2b05      	cmp	r3, #5
   2f62c:	d000      	beq.n	2f630 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   2f62e:	e082      	b.n	2f736 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   2f630:	683b      	ldr	r3, [r7, #0]
   2f632:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   2f634:	6a3b      	ldr	r3, [r7, #32]
   2f636:	785b      	ldrb	r3, [r3, #1]
   2f638:	b25b      	sxtb	r3, r3
   2f63a:	001a      	movs	r2, r3
   2f63c:	230c      	movs	r3, #12
   2f63e:	18fb      	adds	r3, r7, r3
   2f640:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   2f642:	6a3b      	ldr	r3, [r7, #32]
   2f644:	785b      	ldrb	r3, [r3, #1]
   2f646:	b25b      	sxtb	r3, r3
   2f648:	2b00      	cmp	r3, #0
   2f64a:	da0c      	bge.n	2f666 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   2f64c:	6a3b      	ldr	r3, [r7, #32]
   2f64e:	785b      	ldrb	r3, [r3, #1]
   2f650:	b25b      	sxtb	r3, r3
   2f652:	0018      	movs	r0, r3
   2f654:	4b3a      	ldr	r3, [pc, #232]	; (2f740 <http_client_socket_event_handler+0x14c>)
   2f656:	4798      	blx	r3
   2f658:	0002      	movs	r2, r0
   2f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f65c:	0011      	movs	r1, r2
   2f65e:	0018      	movs	r0, r3
   2f660:	4b38      	ldr	r3, [pc, #224]	; (2f744 <http_client_socket_event_handler+0x150>)
   2f662:	4798      	blx	r3
    	break;
   2f664:	e067      	b.n	2f736 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   2f666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f66a:	2b00      	cmp	r3, #0
   2f66c:	d006      	beq.n	2f67c <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   2f66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f672:	220c      	movs	r2, #12
   2f674:	18ba      	adds	r2, r7, r2
   2f676:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2f678:	2100      	movs	r1, #0
   2f67a:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   2f67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f67e:	2203      	movs	r2, #3
   2f680:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   2f682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f684:	6d58      	ldr	r0, [r3, #84]	; 0x54
   2f686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f688:	6c99      	ldr	r1, [r3, #72]	; 0x48
   2f68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f68c:	2258      	movs	r2, #88	; 0x58
   2f68e:	5a9b      	ldrh	r3, [r3, r2]
   2f690:	001a      	movs	r2, r3
   2f692:	4b2d      	ldr	r3, [pc, #180]	; (2f748 <http_client_socket_event_handler+0x154>)
   2f694:	4798      	blx	r3
    		_http_client_recv_packet(module);
   2f696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f698:	0018      	movs	r0, r3
   2f69a:	4b2c      	ldr	r3, [pc, #176]	; (2f74c <http_client_socket_event_handler+0x158>)
   2f69c:	4798      	blx	r3
			_http_client_request(module);
   2f69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f6a0:	0018      	movs	r0, r3
   2f6a2:	4b2b      	ldr	r3, [pc, #172]	; (2f750 <http_client_socket_event_handler+0x15c>)
   2f6a4:	4798      	blx	r3
    	break;
   2f6a6:	e046      	b.n	2f736 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   2f6a8:	683b      	ldr	r3, [r7, #0]
   2f6aa:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   2f6ac:	69fb      	ldr	r3, [r7, #28]
   2f6ae:	2204      	movs	r2, #4
   2f6b0:	5e9b      	ldrsh	r3, [r3, r2]
   2f6b2:	2b00      	cmp	r3, #0
   2f6b4:	dd09      	ble.n	2f6ca <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   2f6b6:	69fb      	ldr	r3, [r7, #28]
   2f6b8:	2204      	movs	r2, #4
   2f6ba:	5e9b      	ldrsh	r3, [r3, r2]
   2f6bc:	001a      	movs	r2, r3
   2f6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f6c0:	0011      	movs	r1, r2
   2f6c2:	0018      	movs	r0, r3
   2f6c4:	4b23      	ldr	r3, [pc, #140]	; (2f754 <http_client_socket_event_handler+0x160>)
   2f6c6:	4798      	blx	r3
   2f6c8:	e00b      	b.n	2f6e2 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   2f6ca:	69fb      	ldr	r3, [r7, #28]
   2f6cc:	2204      	movs	r2, #4
   2f6ce:	5e9b      	ldrsh	r3, [r3, r2]
   2f6d0:	0018      	movs	r0, r3
   2f6d2:	4b1b      	ldr	r3, [pc, #108]	; (2f740 <http_client_socket_event_handler+0x14c>)
   2f6d4:	4798      	blx	r3
   2f6d6:	0002      	movs	r2, r0
   2f6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f6da:	0011      	movs	r1, r2
   2f6dc:	0018      	movs	r0, r3
   2f6de:	4b19      	ldr	r3, [pc, #100]	; (2f744 <http_client_socket_event_handler+0x150>)
   2f6e0:	4798      	blx	r3
		_http_client_recv_packet(module);
   2f6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f6e4:	0018      	movs	r0, r3
   2f6e6:	4b19      	ldr	r3, [pc, #100]	; (2f74c <http_client_socket_event_handler+0x158>)
   2f6e8:	4798      	blx	r3
		break;
   2f6ea:	e024      	b.n	2f736 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   2f6ec:	231a      	movs	r3, #26
   2f6ee:	18fb      	adds	r3, r7, r3
   2f6f0:	683a      	ldr	r2, [r7, #0]
   2f6f2:	8812      	ldrh	r2, [r2, #0]
   2f6f4:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   2f6f6:	231a      	movs	r3, #26
   2f6f8:	18fb      	adds	r3, r7, r3
   2f6fa:	2200      	movs	r2, #0
   2f6fc:	5e9b      	ldrsh	r3, [r3, r2]
   2f6fe:	2b00      	cmp	r3, #0
   2f700:	da0d      	bge.n	2f71e <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   2f702:	231a      	movs	r3, #26
   2f704:	18fb      	adds	r3, r7, r3
   2f706:	2200      	movs	r2, #0
   2f708:	5e9b      	ldrsh	r3, [r3, r2]
   2f70a:	0018      	movs	r0, r3
   2f70c:	4b0c      	ldr	r3, [pc, #48]	; (2f740 <http_client_socket_event_handler+0x14c>)
   2f70e:	4798      	blx	r3
   2f710:	0002      	movs	r2, r0
   2f712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f714:	0011      	movs	r1, r2
   2f716:	0018      	movs	r0, r3
   2f718:	4b0a      	ldr	r3, [pc, #40]	; (2f744 <http_client_socket_event_handler+0x150>)
   2f71a:	4798      	blx	r3
   2f71c:	e003      	b.n	2f726 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   2f71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f720:	0018      	movs	r0, r3
   2f722:	4b0b      	ldr	r3, [pc, #44]	; (2f750 <http_client_socket_event_handler+0x15c>)
   2f724:	4798      	blx	r3
		module->sending = 0;
   2f726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f728:	2241      	movs	r2, #65	; 0x41
   2f72a:	5c99      	ldrb	r1, [r3, r2]
   2f72c:	2001      	movs	r0, #1
   2f72e:	4381      	bics	r1, r0
   2f730:	5499      	strb	r1, [r3, r2]
    	break;
   2f732:	e000      	b.n	2f736 <http_client_socket_event_handler+0x142>
		return;
   2f734:	46c0      	nop			; (mov r8, r8)
	}

}
   2f736:	46bd      	mov	sp, r7
   2f738:	b00a      	add	sp, #40	; 0x28
   2f73a:	bd80      	pop	{r7, pc}
   2f73c:	2000456c 	.word	0x2000456c
   2f740:	0002f57d 	.word	0x0002f57d
   2f744:	0002fbf1 	.word	0x0002fbf1
   2f748:	00030f4d 	.word	0x00030f4d
   2f74c:	0003047d 	.word	0x0003047d
   2f750:	0002fd45 	.word	0x0002fd45
   2f754:	000304e1 	.word	0x000304e1

0002f758 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   2f758:	b580      	push	{r7, lr}
   2f75a:	b088      	sub	sp, #32
   2f75c:	af00      	add	r7, sp, #0
   2f75e:	6078      	str	r0, [r7, #4]
   2f760:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2f762:	2300      	movs	r3, #0
   2f764:	61fb      	str	r3, [r7, #28]
   2f766:	e048      	b.n	2f7fa <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   2f768:	4b27      	ldr	r3, [pc, #156]	; (2f808 <http_client_socket_resolve_handler+0xb0>)
   2f76a:	69fa      	ldr	r2, [r7, #28]
   2f76c:	0092      	lsls	r2, r2, #2
   2f76e:	58d3      	ldr	r3, [r2, r3]
   2f770:	2b00      	cmp	r3, #0
   2f772:	d03f      	beq.n	2f7f4 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   2f774:	4b24      	ldr	r3, [pc, #144]	; (2f808 <http_client_socket_resolve_handler+0xb0>)
   2f776:	69fa      	ldr	r2, [r7, #28]
   2f778:	0092      	lsls	r2, r2, #2
   2f77a:	58d3      	ldr	r3, [r2, r3]
   2f77c:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   2f77e:	69bb      	ldr	r3, [r7, #24]
   2f780:	1c5a      	adds	r2, r3, #1
   2f782:	687b      	ldr	r3, [r7, #4]
   2f784:	0011      	movs	r1, r2
   2f786:	0018      	movs	r0, r3
   2f788:	4b20      	ldr	r3, [pc, #128]	; (2f80c <http_client_socket_resolve_handler+0xb4>)
   2f78a:	4798      	blx	r3
   2f78c:	1e03      	subs	r3, r0, #0
   2f78e:	d131      	bne.n	2f7f4 <http_client_socket_resolve_handler+0x9c>
   2f790:	69bb      	ldr	r3, [r7, #24]
   2f792:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2f794:	2b01      	cmp	r3, #1
   2f796:	d12d      	bne.n	2f7f4 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   2f798:	683b      	ldr	r3, [r7, #0]
   2f79a:	2b00      	cmp	r3, #0
   2f79c:	d107      	bne.n	2f7ae <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   2f79e:	2376      	movs	r3, #118	; 0x76
   2f7a0:	425a      	negs	r2, r3
   2f7a2:	69bb      	ldr	r3, [r7, #24]
   2f7a4:	0011      	movs	r1, r2
   2f7a6:	0018      	movs	r0, r3
   2f7a8:	4b19      	ldr	r3, [pc, #100]	; (2f810 <http_client_socket_resolve_handler+0xb8>)
   2f7aa:	4798      	blx	r3
					return;
   2f7ac:	e028      	b.n	2f800 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   2f7ae:	2308      	movs	r3, #8
   2f7b0:	18fb      	adds	r3, r7, r3
   2f7b2:	2202      	movs	r2, #2
   2f7b4:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2f7b6:	69bb      	ldr	r3, [r7, #24]
   2f7b8:	2250      	movs	r2, #80	; 0x50
   2f7ba:	5a9b      	ldrh	r3, [r3, r2]
   2f7bc:	021b      	lsls	r3, r3, #8
   2f7be:	b21a      	sxth	r2, r3
   2f7c0:	69bb      	ldr	r3, [r7, #24]
   2f7c2:	2150      	movs	r1, #80	; 0x50
   2f7c4:	5a5b      	ldrh	r3, [r3, r1]
   2f7c6:	0a1b      	lsrs	r3, r3, #8
   2f7c8:	b29b      	uxth	r3, r3
   2f7ca:	b21b      	sxth	r3, r3
   2f7cc:	4313      	orrs	r3, r2
   2f7ce:	b21b      	sxth	r3, r3
   2f7d0:	b29a      	uxth	r2, r3
   2f7d2:	2308      	movs	r3, #8
   2f7d4:	18fb      	adds	r3, r7, r3
   2f7d6:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   2f7d8:	2308      	movs	r3, #8
   2f7da:	18fb      	adds	r3, r7, r3
   2f7dc:	683a      	ldr	r2, [r7, #0]
   2f7de:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2f7e0:	69bb      	ldr	r3, [r7, #24]
   2f7e2:	781b      	ldrb	r3, [r3, #0]
   2f7e4:	b25b      	sxtb	r3, r3
   2f7e6:	2208      	movs	r2, #8
   2f7e8:	18b9      	adds	r1, r7, r2
   2f7ea:	2210      	movs	r2, #16
   2f7ec:	0018      	movs	r0, r3
   2f7ee:	4b09      	ldr	r3, [pc, #36]	; (2f814 <http_client_socket_resolve_handler+0xbc>)
   2f7f0:	4798      	blx	r3
				return;
   2f7f2:	e005      	b.n	2f800 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   2f7f4:	69fb      	ldr	r3, [r7, #28]
   2f7f6:	3301      	adds	r3, #1
   2f7f8:	61fb      	str	r3, [r7, #28]
   2f7fa:	69fb      	ldr	r3, [r7, #28]
   2f7fc:	2b06      	cmp	r3, #6
   2f7fe:	ddb3      	ble.n	2f768 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   2f800:	46bd      	mov	sp, r7
   2f802:	b008      	add	sp, #32
   2f804:	bd80      	pop	{r7, pc}
   2f806:	46c0      	nop			; (mov r8, r8)
   2f808:	2000456c 	.word	0x2000456c
   2f80c:	000334dd 	.word	0x000334dd
   2f810:	0002fbf1 	.word	0x0002fbf1
   2f814:	00024115 	.word	0x00024115

0002f818 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   2f818:	b580      	push	{r7, lr}
   2f81a:	b086      	sub	sp, #24
   2f81c:	af00      	add	r7, sp, #0
   2f81e:	60f8      	str	r0, [r7, #12]
   2f820:	60b9      	str	r1, [r7, #8]
   2f822:	607a      	str	r2, [r7, #4]
   2f824:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   2f826:	687b      	ldr	r3, [r7, #4]
   2f828:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   2f82a:	697b      	ldr	r3, [r7, #20]
   2f82c:	2b00      	cmp	r3, #0
   2f82e:	d007      	beq.n	2f840 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   2f830:	233e      	movs	r3, #62	; 0x3e
   2f832:	425a      	negs	r2, r3
   2f834:	697b      	ldr	r3, [r7, #20]
   2f836:	0011      	movs	r1, r2
   2f838:	0018      	movs	r0, r3
   2f83a:	4b03      	ldr	r3, [pc, #12]	; (2f848 <http_client_timer_callback+0x30>)
   2f83c:	4798      	blx	r3
   2f83e:	e000      	b.n	2f842 <http_client_timer_callback+0x2a>
		return;
   2f840:	46c0      	nop			; (mov r8, r8)
}
   2f842:	46bd      	mov	sp, r7
   2f844:	b006      	add	sp, #24
   2f846:	bd80      	pop	{r7, pc}
   2f848:	0002fbf1 	.word	0x0002fbf1

0002f84c <_is_ip>:

static int _is_ip(const char *host)
{
   2f84c:	b580      	push	{r7, lr}
   2f84e:	b084      	sub	sp, #16
   2f850:	af00      	add	r7, sp, #0
   2f852:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   2f854:	2300      	movs	r3, #0
   2f856:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   2f858:	e03a      	b.n	2f8d0 <_is_ip+0x84>
		ch = *host++;
   2f85a:	687b      	ldr	r3, [r7, #4]
   2f85c:	1c5a      	adds	r2, r3, #1
   2f85e:	607a      	str	r2, [r7, #4]
   2f860:	220b      	movs	r2, #11
   2f862:	18ba      	adds	r2, r7, r2
   2f864:	781b      	ldrb	r3, [r3, #0]
   2f866:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   2f868:	230b      	movs	r3, #11
   2f86a:	18fb      	adds	r3, r7, r3
   2f86c:	781b      	ldrb	r3, [r3, #0]
   2f86e:	2b60      	cmp	r3, #96	; 0x60
   2f870:	d904      	bls.n	2f87c <_is_ip+0x30>
   2f872:	230b      	movs	r3, #11
   2f874:	18fb      	adds	r3, r7, r3
   2f876:	781b      	ldrb	r3, [r3, #0]
   2f878:	2b66      	cmp	r3, #102	; 0x66
   2f87a:	d913      	bls.n	2f8a4 <_is_ip+0x58>
   2f87c:	230b      	movs	r3, #11
   2f87e:	18fb      	adds	r3, r7, r3
   2f880:	781b      	ldrb	r3, [r3, #0]
   2f882:	2b40      	cmp	r3, #64	; 0x40
   2f884:	d904      	bls.n	2f890 <_is_ip+0x44>
   2f886:	230b      	movs	r3, #11
   2f888:	18fb      	adds	r3, r7, r3
   2f88a:	781b      	ldrb	r3, [r3, #0]
   2f88c:	2b46      	cmp	r3, #70	; 0x46
   2f88e:	d909      	bls.n	2f8a4 <_is_ip+0x58>
   2f890:	230b      	movs	r3, #11
   2f892:	18fb      	adds	r3, r7, r3
   2f894:	781b      	ldrb	r3, [r3, #0]
   2f896:	2b3a      	cmp	r3, #58	; 0x3a
   2f898:	d004      	beq.n	2f8a4 <_is_ip+0x58>
   2f89a:	230b      	movs	r3, #11
   2f89c:	18fb      	adds	r3, r7, r3
   2f89e:	781b      	ldrb	r3, [r3, #0]
   2f8a0:	2b2f      	cmp	r3, #47	; 0x2f
   2f8a2:	d102      	bne.n	2f8aa <_is_ip+0x5e>
			isv6 = 1;
   2f8a4:	2301      	movs	r3, #1
   2f8a6:	60fb      	str	r3, [r7, #12]
   2f8a8:	e012      	b.n	2f8d0 <_is_ip+0x84>
		} else if (ch == '.') {
   2f8aa:	230b      	movs	r3, #11
   2f8ac:	18fb      	adds	r3, r7, r3
   2f8ae:	781b      	ldrb	r3, [r3, #0]
   2f8b0:	2b2e      	cmp	r3, #46	; 0x2e
   2f8b2:	d104      	bne.n	2f8be <_is_ip+0x72>
			if (isv6) {
   2f8b4:	68fb      	ldr	r3, [r7, #12]
   2f8b6:	2b00      	cmp	r3, #0
   2f8b8:	d00a      	beq.n	2f8d0 <_is_ip+0x84>
				return 0;
   2f8ba:	2300      	movs	r3, #0
   2f8bc:	e00d      	b.n	2f8da <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   2f8be:	230b      	movs	r3, #11
   2f8c0:	18fb      	adds	r3, r7, r3
   2f8c2:	781b      	ldrb	r3, [r3, #0]
   2f8c4:	2230      	movs	r2, #48	; 0x30
   2f8c6:	4013      	ands	r3, r2
   2f8c8:	2b30      	cmp	r3, #48	; 0x30
   2f8ca:	d001      	beq.n	2f8d0 <_is_ip+0x84>
			return 0;
   2f8cc:	2300      	movs	r3, #0
   2f8ce:	e004      	b.n	2f8da <_is_ip+0x8e>
	while (*host != '\0') {
   2f8d0:	687b      	ldr	r3, [r7, #4]
   2f8d2:	781b      	ldrb	r3, [r3, #0]
   2f8d4:	2b00      	cmp	r3, #0
   2f8d6:	d1c0      	bne.n	2f85a <_is_ip+0xe>
		}
	}
	return 1;
   2f8d8:	2301      	movs	r3, #1
}
   2f8da:	0018      	movs	r0, r3
   2f8dc:	46bd      	mov	sp, r7
   2f8de:	b004      	add	sp, #16
   2f8e0:	bd80      	pop	{r7, pc}
	...

0002f8e4 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   2f8e4:	b5b0      	push	{r4, r5, r7, lr}
   2f8e6:	b08e      	sub	sp, #56	; 0x38
   2f8e8:	af00      	add	r7, sp, #0
   2f8ea:	60f8      	str	r0, [r7, #12]
   2f8ec:	60b9      	str	r1, [r7, #8]
   2f8ee:	603b      	str	r3, [r7, #0]
   2f8f0:	1dfb      	adds	r3, r7, #7
   2f8f2:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   2f8f4:	2337      	movs	r3, #55	; 0x37
   2f8f6:	18fb      	adds	r3, r7, r3
   2f8f8:	2200      	movs	r2, #0
   2f8fa:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   2f8fc:	2300      	movs	r3, #0
   2f8fe:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   2f900:	2300      	movs	r3, #0
   2f902:	633b      	str	r3, [r7, #48]	; 0x30
   2f904:	2300      	movs	r3, #0
   2f906:	62fb      	str	r3, [r7, #44]	; 0x2c
   2f908:	2300      	movs	r3, #0
   2f90a:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   2f90c:	68fb      	ldr	r3, [r7, #12]
   2f90e:	2b00      	cmp	r3, #0
   2f910:	d102      	bne.n	2f918 <http_client_send_request+0x34>
		return -EINVAL;
   2f912:	2316      	movs	r3, #22
   2f914:	425b      	negs	r3, r3
   2f916:	e145      	b.n	2fba4 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   2f918:	68fb      	ldr	r3, [r7, #12]
   2f91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2f91c:	2b02      	cmp	r3, #2
   2f91e:	d902      	bls.n	2f926 <http_client_send_request+0x42>
		return -EBUSY;
   2f920:	2310      	movs	r3, #16
   2f922:	425b      	negs	r3, r3
   2f924:	e13e      	b.n	2fba4 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   2f926:	49a1      	ldr	r1, [pc, #644]	; (2fbac <http_client_send_request+0x2c8>)
   2f928:	68bb      	ldr	r3, [r7, #8]
   2f92a:	2207      	movs	r2, #7
   2f92c:	0018      	movs	r0, r3
   2f92e:	4ba0      	ldr	r3, [pc, #640]	; (2fbb0 <http_client_send_request+0x2cc>)
   2f930:	4798      	blx	r3
   2f932:	1e03      	subs	r3, r0, #0
   2f934:	d102      	bne.n	2f93c <http_client_send_request+0x58>
		i = 7;
   2f936:	2307      	movs	r3, #7
   2f938:	633b      	str	r3, [r7, #48]	; 0x30
   2f93a:	e009      	b.n	2f950 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   2f93c:	499d      	ldr	r1, [pc, #628]	; (2fbb4 <http_client_send_request+0x2d0>)
   2f93e:	68bb      	ldr	r3, [r7, #8]
   2f940:	2208      	movs	r2, #8
   2f942:	0018      	movs	r0, r3
   2f944:	4b9a      	ldr	r3, [pc, #616]	; (2fbb0 <http_client_send_request+0x2cc>)
   2f946:	4798      	blx	r3
   2f948:	1e03      	subs	r3, r0, #0
   2f94a:	d101      	bne.n	2f950 <http_client_send_request+0x6c>
		i = 8;
   2f94c:	2308      	movs	r3, #8
   2f94e:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   2f950:	68fb      	ldr	r3, [r7, #12]
   2f952:	1c5c      	adds	r4, r3, #1
   2f954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f956:	68ba      	ldr	r2, [r7, #8]
   2f958:	18d5      	adds	r5, r2, r3
   2f95a:	68fb      	ldr	r3, [r7, #12]
   2f95c:	3301      	adds	r3, #1
   2f95e:	0018      	movs	r0, r3
   2f960:	4b95      	ldr	r3, [pc, #596]	; (2fbb8 <http_client_send_request+0x2d4>)
   2f962:	4798      	blx	r3
   2f964:	0003      	movs	r3, r0
   2f966:	001a      	movs	r2, r3
   2f968:	0029      	movs	r1, r5
   2f96a:	0020      	movs	r0, r4
   2f96c:	4b90      	ldr	r3, [pc, #576]	; (2fbb0 <http_client_send_request+0x2cc>)
   2f96e:	4798      	blx	r3
   2f970:	0003      	movs	r3, r0
   2f972:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2f974:	e00d      	b.n	2f992 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   2f976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f978:	1c5a      	adds	r2, r3, #1
   2f97a:	62fa      	str	r2, [r7, #44]	; 0x2c
   2f97c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   2f97e:	68b9      	ldr	r1, [r7, #8]
   2f980:	188a      	adds	r2, r1, r2
   2f982:	7811      	ldrb	r1, [r2, #0]
   2f984:	68fa      	ldr	r2, [r7, #12]
   2f986:	18d3      	adds	r3, r2, r3
   2f988:	1c0a      	adds	r2, r1, #0
   2f98a:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   2f98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f98e:	3301      	adds	r3, #1
   2f990:	633b      	str	r3, [r7, #48]	; 0x30
   2f992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f994:	68ba      	ldr	r2, [r7, #8]
   2f996:	18d3      	adds	r3, r2, r3
   2f998:	781b      	ldrb	r3, [r3, #0]
   2f99a:	2b00      	cmp	r3, #0
   2f99c:	d005      	beq.n	2f9aa <http_client_send_request+0xc6>
   2f99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f9a0:	68ba      	ldr	r2, [r7, #8]
   2f9a2:	18d3      	adds	r3, r2, r3
   2f9a4:	781b      	ldrb	r3, [r3, #0]
   2f9a6:	2b2f      	cmp	r3, #47	; 0x2f
   2f9a8:	d1e5      	bne.n	2f976 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   2f9aa:	68fa      	ldr	r2, [r7, #12]
   2f9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2f9ae:	18d3      	adds	r3, r2, r3
   2f9b0:	3301      	adds	r3, #1
   2f9b2:	2200      	movs	r2, #0
   2f9b4:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   2f9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f9b8:	68ba      	ldr	r2, [r7, #8]
   2f9ba:	18d3      	adds	r3, r2, r3
   2f9bc:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   2f9be:	68fb      	ldr	r3, [r7, #12]
   2f9c0:	3301      	adds	r3, #1
   2f9c2:	781b      	ldrb	r3, [r3, #0]
   2f9c4:	2b00      	cmp	r3, #0
   2f9c6:	d102      	bne.n	2f9ce <http_client_send_request+0xea>
		return -EINVAL;
   2f9c8:	2316      	movs	r3, #22
   2f9ca:	425b      	negs	r3, r3
   2f9cc:	e0ea      	b.n	2fba4 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   2f9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2f9d0:	0018      	movs	r0, r3
   2f9d2:	4b79      	ldr	r3, [pc, #484]	; (2fbb8 <http_client_send_request+0x2d4>)
   2f9d4:	4798      	blx	r3
   2f9d6:	0003      	movs	r3, r0
   2f9d8:	2b3f      	cmp	r3, #63	; 0x3f
   2f9da:	d902      	bls.n	2f9e2 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   2f9dc:	235b      	movs	r3, #91	; 0x5b
   2f9de:	425b      	negs	r3, r3
   2f9e0:	e0e0      	b.n	2fba4 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   2f9e2:	68fb      	ldr	r3, [r7, #12]
   2f9e4:	22d4      	movs	r2, #212	; 0xd4
   2f9e6:	589b      	ldr	r3, [r3, r2]
   2f9e8:	2b00      	cmp	r3, #0
   2f9ea:	d005      	beq.n	2f9f8 <http_client_send_request+0x114>
		free(module->req.ext_header);
   2f9ec:	68fb      	ldr	r3, [r7, #12]
   2f9ee:	22d4      	movs	r2, #212	; 0xd4
   2f9f0:	589b      	ldr	r3, [r3, r2]
   2f9f2:	0018      	movs	r0, r3
   2f9f4:	4b71      	ldr	r3, [pc, #452]	; (2fbbc <http_client_send_request+0x2d8>)
   2f9f6:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   2f9f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2f9fa:	2b00      	cmp	r3, #0
   2f9fc:	d010      	beq.n	2fa20 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   2f9fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2fa00:	0018      	movs	r0, r3
   2fa02:	4b6f      	ldr	r3, [pc, #444]	; (2fbc0 <http_client_send_request+0x2dc>)
   2fa04:	4798      	blx	r3
   2fa06:	0003      	movs	r3, r0
   2fa08:	0019      	movs	r1, r3
   2fa0a:	68fb      	ldr	r3, [r7, #12]
   2fa0c:	22d4      	movs	r2, #212	; 0xd4
   2fa0e:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   2fa10:	68fb      	ldr	r3, [r7, #12]
   2fa12:	22d4      	movs	r2, #212	; 0xd4
   2fa14:	589b      	ldr	r3, [r3, r2]
   2fa16:	2b00      	cmp	r3, #0
   2fa18:	d106      	bne.n	2fa28 <http_client_send_request+0x144>
			return -ENOMEM;
   2fa1a:	230c      	movs	r3, #12
   2fa1c:	425b      	negs	r3, r3
   2fa1e:	e0c1      	b.n	2fba4 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   2fa20:	68fb      	ldr	r3, [r7, #12]
   2fa22:	22d4      	movs	r2, #212	; 0xd4
   2fa24:	2100      	movs	r1, #0
   2fa26:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   2fa28:	68fb      	ldr	r3, [r7, #12]
   2fa2a:	2241      	movs	r2, #65	; 0x41
   2fa2c:	5c99      	ldrb	r1, [r3, r2]
   2fa2e:	2001      	movs	r0, #1
   2fa30:	4381      	bics	r1, r0
   2fa32:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   2fa34:	68fb      	ldr	r3, [r7, #12]
   2fa36:	2200      	movs	r2, #0
   2fa38:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   2fa3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa3c:	781b      	ldrb	r3, [r3, #0]
   2fa3e:	2b2f      	cmp	r3, #47	; 0x2f
   2fa40:	d107      	bne.n	2fa52 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   2fa42:	68fb      	ldr	r3, [r7, #12]
   2fa44:	3370      	adds	r3, #112	; 0x70
   2fa46:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fa48:	0011      	movs	r1, r2
   2fa4a:	0018      	movs	r0, r3
   2fa4c:	4b5d      	ldr	r3, [pc, #372]	; (2fbc4 <http_client_send_request+0x2e0>)
   2fa4e:	4798      	blx	r3
   2fa50:	e00f      	b.n	2fa72 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   2fa52:	68fb      	ldr	r3, [r7, #12]
   2fa54:	2270      	movs	r2, #112	; 0x70
   2fa56:	212f      	movs	r1, #47	; 0x2f
   2fa58:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   2fa5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2fa5c:	781b      	ldrb	r3, [r3, #0]
   2fa5e:	2b00      	cmp	r3, #0
   2fa60:	d007      	beq.n	2fa72 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   2fa62:	68fb      	ldr	r3, [r7, #12]
   2fa64:	3370      	adds	r3, #112	; 0x70
   2fa66:	3301      	adds	r3, #1
   2fa68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2fa6a:	0011      	movs	r1, r2
   2fa6c:	0018      	movs	r0, r3
   2fa6e:	4b55      	ldr	r3, [pc, #340]	; (2fbc4 <http_client_send_request+0x2e0>)
   2fa70:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   2fa72:	683b      	ldr	r3, [r7, #0]
   2fa74:	2b00      	cmp	r3, #0
   2fa76:	d007      	beq.n	2fa88 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   2fa78:	68fb      	ldr	r3, [r7, #12]
   2fa7a:	33b0      	adds	r3, #176	; 0xb0
   2fa7c:	6839      	ldr	r1, [r7, #0]
   2fa7e:	2218      	movs	r2, #24
   2fa80:	0018      	movs	r0, r3
   2fa82:	4b51      	ldr	r3, [pc, #324]	; (2fbc8 <http_client_send_request+0x2e4>)
   2fa84:	4798      	blx	r3
   2fa86:	e006      	b.n	2fa96 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   2fa88:	68fb      	ldr	r3, [r7, #12]
   2fa8a:	33b0      	adds	r3, #176	; 0xb0
   2fa8c:	2218      	movs	r2, #24
   2fa8e:	2100      	movs	r1, #0
   2fa90:	0018      	movs	r0, r3
   2fa92:	4b4e      	ldr	r3, [pc, #312]	; (2fbcc <http_client_send_request+0x2e8>)
   2fa94:	4798      	blx	r3
	}

	module->req.method = method;
   2fa96:	68fb      	ldr	r3, [r7, #12]
   2fa98:	1dfa      	adds	r2, r7, #7
   2fa9a:	21c8      	movs	r1, #200	; 0xc8
   2fa9c:	7812      	ldrb	r2, [r2, #0]
   2fa9e:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   2faa0:	68fb      	ldr	r3, [r7, #12]
   2faa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2faa4:	2b01      	cmp	r3, #1
   2faa6:	d003      	beq.n	2fab0 <http_client_send_request+0x1cc>
   2faa8:	d316      	bcc.n	2fad8 <http_client_send_request+0x1f4>
   2faaa:	2b02      	cmp	r3, #2
   2faac:	d004      	beq.n	2fab8 <http_client_send_request+0x1d4>
   2faae:	e074      	b.n	2fb9a <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   2fab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2fab2:	2b00      	cmp	r3, #0
   2fab4:	d100      	bne.n	2fab8 <http_client_send_request+0x1d4>
   2fab6:	e073      	b.n	2fba0 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   2fab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2faba:	2b00      	cmp	r3, #0
   2fabc:	d107      	bne.n	2face <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   2fabe:	68fb      	ldr	r3, [r7, #12]
   2fac0:	2203      	movs	r2, #3
   2fac2:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   2fac4:	68fb      	ldr	r3, [r7, #12]
   2fac6:	0018      	movs	r0, r3
   2fac8:	4b41      	ldr	r3, [pc, #260]	; (2fbd0 <http_client_send_request+0x2ec>)
   2faca:	4798      	blx	r3
			break;
   2facc:	e069      	b.n	2fba2 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   2face:	68fb      	ldr	r3, [r7, #12]
   2fad0:	2100      	movs	r1, #0
   2fad2:	0018      	movs	r0, r3
   2fad4:	4b3f      	ldr	r3, [pc, #252]	; (2fbd4 <http_client_send_request+0x2f0>)
   2fad6:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   2fad8:	68fb      	ldr	r3, [r7, #12]
   2fada:	2252      	movs	r2, #82	; 0x52
   2fadc:	5c9b      	ldrb	r3, [r3, r2]
   2fade:	2b00      	cmp	r3, #0
   2fae0:	d007      	beq.n	2faf2 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   2fae2:	2337      	movs	r3, #55	; 0x37
   2fae4:	18fb      	adds	r3, r7, r3
   2fae6:	2237      	movs	r2, #55	; 0x37
   2fae8:	18ba      	adds	r2, r7, r2
   2faea:	7812      	ldrb	r2, [r2, #0]
   2faec:	2101      	movs	r1, #1
   2faee:	430a      	orrs	r2, r1
   2faf0:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   2faf2:	2337      	movs	r3, #55	; 0x37
   2faf4:	18fb      	adds	r3, r7, r3
   2faf6:	781b      	ldrb	r3, [r3, #0]
   2faf8:	001a      	movs	r2, r3
   2fafa:	2101      	movs	r1, #1
   2fafc:	2002      	movs	r0, #2
   2fafe:	4b36      	ldr	r3, [pc, #216]	; (2fbd8 <http_client_send_request+0x2f4>)
   2fb00:	4798      	blx	r3
   2fb02:	0003      	movs	r3, r0
   2fb04:	001a      	movs	r2, r3
   2fb06:	68fb      	ldr	r3, [r7, #12]
   2fb08:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   2fb0a:	68fb      	ldr	r3, [r7, #12]
   2fb0c:	781b      	ldrb	r3, [r3, #0]
   2fb0e:	b25b      	sxtb	r3, r3
   2fb10:	2b00      	cmp	r3, #0
   2fb12:	db3f      	blt.n	2fb94 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   2fb14:	68fb      	ldr	r3, [r7, #12]
   2fb16:	781b      	ldrb	r3, [r3, #0]
   2fb18:	b25b      	sxtb	r3, r3
   2fb1a:	001a      	movs	r2, r3
   2fb1c:	4b2f      	ldr	r3, [pc, #188]	; (2fbdc <http_client_send_request+0x2f8>)
   2fb1e:	0092      	lsls	r2, r2, #2
   2fb20:	68f9      	ldr	r1, [r7, #12]
   2fb22:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   2fb24:	68fb      	ldr	r3, [r7, #12]
   2fb26:	3301      	adds	r3, #1
   2fb28:	0018      	movs	r0, r3
   2fb2a:	4b2d      	ldr	r3, [pc, #180]	; (2fbe0 <http_client_send_request+0x2fc>)
   2fb2c:	4798      	blx	r3
   2fb2e:	1e03      	subs	r3, r0, #0
   2fb30:	d027      	beq.n	2fb82 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   2fb32:	2314      	movs	r3, #20
   2fb34:	18fb      	adds	r3, r7, r3
   2fb36:	2202      	movs	r2, #2
   2fb38:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   2fb3a:	68fb      	ldr	r3, [r7, #12]
   2fb3c:	2250      	movs	r2, #80	; 0x50
   2fb3e:	5a9b      	ldrh	r3, [r3, r2]
   2fb40:	021b      	lsls	r3, r3, #8
   2fb42:	b21a      	sxth	r2, r3
   2fb44:	68fb      	ldr	r3, [r7, #12]
   2fb46:	2150      	movs	r1, #80	; 0x50
   2fb48:	5a5b      	ldrh	r3, [r3, r1]
   2fb4a:	0a1b      	lsrs	r3, r3, #8
   2fb4c:	b29b      	uxth	r3, r3
   2fb4e:	b21b      	sxth	r3, r3
   2fb50:	4313      	orrs	r3, r2
   2fb52:	b21b      	sxth	r3, r3
   2fb54:	b29a      	uxth	r2, r3
   2fb56:	2314      	movs	r3, #20
   2fb58:	18fb      	adds	r3, r7, r3
   2fb5a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   2fb5c:	68fb      	ldr	r3, [r7, #12]
   2fb5e:	3301      	adds	r3, #1
   2fb60:	0018      	movs	r0, r3
   2fb62:	4b20      	ldr	r3, [pc, #128]	; (2fbe4 <http_client_send_request+0x300>)
   2fb64:	4798      	blx	r3
   2fb66:	0002      	movs	r2, r0
   2fb68:	2314      	movs	r3, #20
   2fb6a:	18fb      	adds	r3, r7, r3
   2fb6c:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   2fb6e:	68fb      	ldr	r3, [r7, #12]
   2fb70:	781b      	ldrb	r3, [r3, #0]
   2fb72:	b25b      	sxtb	r3, r3
   2fb74:	2214      	movs	r2, #20
   2fb76:	18b9      	adds	r1, r7, r2
   2fb78:	2210      	movs	r2, #16
   2fb7a:	0018      	movs	r0, r3
   2fb7c:	4b1a      	ldr	r3, [pc, #104]	; (2fbe8 <http_client_send_request+0x304>)
   2fb7e:	4798      	blx	r3
   2fb80:	e004      	b.n	2fb8c <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   2fb82:	68fb      	ldr	r3, [r7, #12]
   2fb84:	3301      	adds	r3, #1
   2fb86:	0018      	movs	r0, r3
   2fb88:	4b18      	ldr	r3, [pc, #96]	; (2fbec <http_client_send_request+0x308>)
   2fb8a:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   2fb8c:	68fb      	ldr	r3, [r7, #12]
   2fb8e:	2201      	movs	r2, #1
   2fb90:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   2fb92:	e006      	b.n	2fba2 <http_client_send_request+0x2be>
			return -ENOSPC;
   2fb94:	231c      	movs	r3, #28
   2fb96:	425b      	negs	r3, r3
   2fb98:	e004      	b.n	2fba4 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   2fb9a:	230b      	movs	r3, #11
   2fb9c:	425b      	negs	r3, r3
   2fb9e:	e001      	b.n	2fba4 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   2fba0:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   2fba2:	2300      	movs	r3, #0
}
   2fba4:	0018      	movs	r0, r3
   2fba6:	46bd      	mov	sp, r7
   2fba8:	b00e      	add	sp, #56	; 0x38
   2fbaa:	bdb0      	pop	{r4, r5, r7, pc}
   2fbac:	00038130 	.word	0x00038130
   2fbb0:	00033549 	.word	0x00033549
   2fbb4:	00038138 	.word	0x00038138
   2fbb8:	0003353b 	.word	0x0003353b
   2fbbc:	00033155 	.word	0x00033155
   2fbc0:	00033501 	.word	0x00033501
   2fbc4:	000334f1 	.word	0x000334f1
   2fbc8:	00033169 	.word	0x00033169
   2fbcc:	0003319f 	.word	0x0003319f
   2fbd0:	0002fd45 	.word	0x0002fd45
   2fbd4:	0002fbf1 	.word	0x0002fbf1
   2fbd8:	00023f01 	.word	0x00023f01
   2fbdc:	2000456c 	.word	0x2000456c
   2fbe0:	0002f84d 	.word	0x0002f84d
   2fbe4:	0002464d 	.word	0x0002464d
   2fbe8:	00024115 	.word	0x00024115
   2fbec:	00024755 	.word	0x00024755

0002fbf0 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   2fbf0:	b580      	push	{r7, lr}
   2fbf2:	b086      	sub	sp, #24
   2fbf4:	af00      	add	r7, sp, #0
   2fbf6:	6078      	str	r0, [r7, #4]
   2fbf8:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   2fbfa:	687b      	ldr	r3, [r7, #4]
   2fbfc:	22c0      	movs	r2, #192	; 0xc0
   2fbfe:	589b      	ldr	r3, [r3, r2]
   2fc00:	2b00      	cmp	r3, #0
   2fc02:	d007      	beq.n	2fc14 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   2fc04:	687b      	ldr	r3, [r7, #4]
   2fc06:	22c0      	movs	r2, #192	; 0xc0
   2fc08:	589b      	ldr	r3, [r3, r2]
   2fc0a:	687a      	ldr	r2, [r7, #4]
   2fc0c:	21c4      	movs	r1, #196	; 0xc4
   2fc0e:	5852      	ldr	r2, [r2, r1]
   2fc10:	0010      	movs	r0, r2
   2fc12:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   2fc14:	687b      	ldr	r3, [r7, #4]
   2fc16:	33b0      	adds	r3, #176	; 0xb0
   2fc18:	2218      	movs	r2, #24
   2fc1a:	2100      	movs	r1, #0
   2fc1c:	0018      	movs	r0, r3
   2fc1e:	4b24      	ldr	r3, [pc, #144]	; (2fcb0 <_http_client_clear_conn+0xc0>)
   2fc20:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   2fc22:	687b      	ldr	r3, [r7, #4]
   2fc24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2fc26:	2b00      	cmp	r3, #0
   2fc28:	d005      	beq.n	2fc36 <_http_client_clear_conn+0x46>
		close(module->sock);
   2fc2a:	687b      	ldr	r3, [r7, #4]
   2fc2c:	781b      	ldrb	r3, [r3, #0]
   2fc2e:	b25b      	sxtb	r3, r3
   2fc30:	0018      	movs	r0, r3
   2fc32:	4b20      	ldr	r3, [pc, #128]	; (2fcb4 <_http_client_clear_conn+0xc4>)
   2fc34:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   2fc36:	687b      	ldr	r3, [r7, #4]
   2fc38:	781b      	ldrb	r3, [r3, #0]
   2fc3a:	b25b      	sxtb	r3, r3
   2fc3c:	001a      	movs	r2, r3
   2fc3e:	4b1e      	ldr	r3, [pc, #120]	; (2fcb8 <_http_client_clear_conn+0xc8>)
   2fc40:	0092      	lsls	r2, r2, #2
   2fc42:	2100      	movs	r1, #0
   2fc44:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   2fc46:	687b      	ldr	r3, [r7, #4]
   2fc48:	336c      	adds	r3, #108	; 0x6c
   2fc4a:	226c      	movs	r2, #108	; 0x6c
   2fc4c:	2100      	movs	r1, #0
   2fc4e:	0018      	movs	r0, r3
   2fc50:	4b17      	ldr	r3, [pc, #92]	; (2fcb0 <_http_client_clear_conn+0xc0>)
   2fc52:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   2fc54:	687b      	ldr	r3, [r7, #4]
   2fc56:	33d8      	adds	r3, #216	; 0xd8
   2fc58:	2210      	movs	r2, #16
   2fc5a:	2100      	movs	r1, #0
   2fc5c:	0018      	movs	r0, r3
   2fc5e:	4b14      	ldr	r3, [pc, #80]	; (2fcb0 <_http_client_clear_conn+0xc0>)
   2fc60:	4798      	blx	r3
	module->req.state = STATE_INIT;
   2fc62:	687b      	ldr	r3, [r7, #4]
   2fc64:	2200      	movs	r2, #0
   2fc66:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   2fc68:	687b      	ldr	r3, [r7, #4]
   2fc6a:	22d8      	movs	r2, #216	; 0xd8
   2fc6c:	2100      	movs	r1, #0
   2fc6e:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   2fc70:	687b      	ldr	r3, [r7, #4]
   2fc72:	2241      	movs	r2, #65	; 0x41
   2fc74:	5c99      	ldrb	r1, [r3, r2]
   2fc76:	2001      	movs	r0, #1
   2fc78:	4381      	bics	r1, r0
   2fc7a:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   2fc7c:	687b      	ldr	r3, [r7, #4]
   2fc7e:	2241      	movs	r2, #65	; 0x41
   2fc80:	5c99      	ldrb	r1, [r3, r2]
   2fc82:	2002      	movs	r0, #2
   2fc84:	4381      	bics	r1, r0
   2fc86:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   2fc88:	230c      	movs	r3, #12
   2fc8a:	18fb      	adds	r3, r7, r3
   2fc8c:	683a      	ldr	r2, [r7, #0]
   2fc8e:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   2fc90:	687b      	ldr	r3, [r7, #4]
   2fc92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fc94:	2b00      	cmp	r3, #0
   2fc96:	d006      	beq.n	2fca6 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   2fc98:	687b      	ldr	r3, [r7, #4]
   2fc9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2fc9c:	220c      	movs	r2, #12
   2fc9e:	18ba      	adds	r2, r7, r2
   2fca0:	6878      	ldr	r0, [r7, #4]
   2fca2:	2104      	movs	r1, #4
   2fca4:	4798      	blx	r3
	}
}
   2fca6:	46c0      	nop			; (mov r8, r8)
   2fca8:	46bd      	mov	sp, r7
   2fcaa:	b006      	add	sp, #24
   2fcac:	bd80      	pop	{r7, pc}
   2fcae:	46c0      	nop			; (mov r8, r8)
   2fcb0:	0003319f 	.word	0x0003319f
   2fcb4:	0002450d 	.word	0x0002450d
   2fcb8:	2000456c 	.word	0x2000456c

0002fcbc <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   2fcbc:	b590      	push	{r4, r7, lr}
   2fcbe:	b087      	sub	sp, #28
   2fcc0:	af00      	add	r7, sp, #0
   2fcc2:	60f8      	str	r0, [r7, #12]
   2fcc4:	60b9      	str	r1, [r7, #8]
   2fcc6:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   2fcc8:	68fb      	ldr	r3, [r7, #12]
   2fcca:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   2fccc:	697b      	ldr	r3, [r7, #20]
   2fcce:	2241      	movs	r2, #65	; 0x41
   2fcd0:	5c99      	ldrb	r1, [r3, r2]
   2fcd2:	2001      	movs	r0, #1
   2fcd4:	4301      	orrs	r1, r0
   2fcd6:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   2fcd8:	697b      	ldr	r3, [r7, #20]
   2fcda:	2000      	movs	r0, #0
   2fcdc:	5618      	ldrsb	r0, [r3, r0]
   2fcde:	687b      	ldr	r3, [r7, #4]
   2fce0:	b29a      	uxth	r2, r3
   2fce2:	68b9      	ldr	r1, [r7, #8]
   2fce4:	2300      	movs	r3, #0
   2fce6:	4c14      	ldr	r4, [pc, #80]	; (2fd38 <_http_client_send_wait+0x7c>)
   2fce8:	47a0      	blx	r4
   2fcea:	0003      	movs	r3, r0
   2fcec:	613b      	str	r3, [r7, #16]
   2fcee:	693b      	ldr	r3, [r7, #16]
   2fcf0:	2b00      	cmp	r3, #0
   2fcf2:	da0f      	bge.n	2fd14 <_http_client_send_wait+0x58>
		module->sending = 0;
   2fcf4:	697b      	ldr	r3, [r7, #20]
   2fcf6:	2241      	movs	r2, #65	; 0x41
   2fcf8:	5c99      	ldrb	r1, [r3, r2]
   2fcfa:	2001      	movs	r0, #1
   2fcfc:	4381      	bics	r1, r0
   2fcfe:	5499      	strb	r1, [r3, r2]
		return result;
   2fd00:	693b      	ldr	r3, [r7, #16]
   2fd02:	e014      	b.n	2fd2e <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   2fd04:	2000      	movs	r0, #0
   2fd06:	4b0d      	ldr	r3, [pc, #52]	; (2fd3c <_http_client_send_wait+0x80>)
   2fd08:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   2fd0a:	697b      	ldr	r3, [r7, #20]
   2fd0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   2fd0e:	0018      	movs	r0, r3
   2fd10:	4b0b      	ldr	r3, [pc, #44]	; (2fd40 <_http_client_send_wait+0x84>)
   2fd12:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   2fd14:	697b      	ldr	r3, [r7, #20]
   2fd16:	2241      	movs	r2, #65	; 0x41
   2fd18:	5c9b      	ldrb	r3, [r3, r2]
   2fd1a:	2201      	movs	r2, #1
   2fd1c:	4013      	ands	r3, r2
   2fd1e:	b2db      	uxtb	r3, r3
   2fd20:	2b00      	cmp	r3, #0
   2fd22:	d003      	beq.n	2fd2c <_http_client_send_wait+0x70>
   2fd24:	697b      	ldr	r3, [r7, #20]
   2fd26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2fd28:	2b02      	cmp	r3, #2
   2fd2a:	d8eb      	bhi.n	2fd04 <_http_client_send_wait+0x48>
	}

	return 0;
   2fd2c:	2300      	movs	r3, #0
}
   2fd2e:	0018      	movs	r0, r3
   2fd30:	46bd      	mov	sp, r7
   2fd32:	b007      	add	sp, #28
   2fd34:	bd90      	pop	{r4, r7, pc}
   2fd36:	46c0      	nop			; (mov r8, r8)
   2fd38:	00024229 	.word	0x00024229
   2fd3c:	000208d5 	.word	0x000208d5
   2fd40:	00030fc9 	.word	0x00030fc9

0002fd44 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   2fd44:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fd46:	46c6      	mov	lr, r8
   2fd48:	b500      	push	{lr}
   2fd4a:	b0a0      	sub	sp, #128	; 0x80
   2fd4c:	af02      	add	r7, sp, #8
   2fd4e:	61f8      	str	r0, [r7, #28]
   2fd50:	4668      	mov	r0, sp
   2fd52:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   2fd54:	2318      	movs	r3, #24
   2fd56:	2218      	movs	r2, #24
   2fd58:	18ba      	adds	r2, r7, r2
   2fd5a:	18d0      	adds	r0, r2, r3
   2fd5c:	4bbd      	ldr	r3, [pc, #756]	; (30054 <_http_client_request+0x310>)
   2fd5e:	469c      	mov	ip, r3
   2fd60:	4663      	mov	r3, ip
   2fd62:	cb16      	ldmia	r3!, {r1, r2, r4}
   2fd64:	c016      	stmia	r0!, {r1, r2, r4}
   2fd66:	469c      	mov	ip, r3
   2fd68:	4663      	mov	r3, ip
   2fd6a:	681b      	ldr	r3, [r3, #0]
   2fd6c:	469c      	mov	ip, r3
   2fd6e:	4663      	mov	r3, ip
   2fd70:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   2fd72:	69f8      	ldr	r0, [r7, #28]
   2fd74:	6e40      	ldr	r0, [r0, #100]	; 0x64
   2fd76:	4684      	mov	ip, r0
   2fd78:	2301      	movs	r3, #1
   2fd7a:	425b      	negs	r3, r3
   2fd7c:	4698      	mov	r8, r3
   2fd7e:	44c4      	add	ip, r8
   2fd80:	4663      	mov	r3, ip
   2fd82:	66fb      	str	r3, [r7, #108]	; 0x6c
   2fd84:	6038      	str	r0, [r7, #0]
   2fd86:	2300      	movs	r3, #0
   2fd88:	607b      	str	r3, [r7, #4]
   2fd8a:	6839      	ldr	r1, [r7, #0]
   2fd8c:	687a      	ldr	r2, [r7, #4]
   2fd8e:	000b      	movs	r3, r1
   2fd90:	0f5b      	lsrs	r3, r3, #29
   2fd92:	469c      	mov	ip, r3
   2fd94:	0013      	movs	r3, r2
   2fd96:	00db      	lsls	r3, r3, #3
   2fd98:	617b      	str	r3, [r7, #20]
   2fd9a:	4663      	mov	r3, ip
   2fd9c:	697c      	ldr	r4, [r7, #20]
   2fd9e:	431c      	orrs	r4, r3
   2fda0:	617c      	str	r4, [r7, #20]
   2fda2:	000b      	movs	r3, r1
   2fda4:	00db      	lsls	r3, r3, #3
   2fda6:	613b      	str	r3, [r7, #16]
   2fda8:	0005      	movs	r5, r0
   2fdaa:	2200      	movs	r2, #0
   2fdac:	0016      	movs	r6, r2
   2fdae:	0f6a      	lsrs	r2, r5, #29
   2fdb0:	00f3      	lsls	r3, r6, #3
   2fdb2:	60fb      	str	r3, [r7, #12]
   2fdb4:	68fb      	ldr	r3, [r7, #12]
   2fdb6:	4313      	orrs	r3, r2
   2fdb8:	60fb      	str	r3, [r7, #12]
   2fdba:	00eb      	lsls	r3, r5, #3
   2fdbc:	60bb      	str	r3, [r7, #8]
   2fdbe:	1dc3      	adds	r3, r0, #7
   2fdc0:	08db      	lsrs	r3, r3, #3
   2fdc2:	00db      	lsls	r3, r3, #3
   2fdc4:	466a      	mov	r2, sp
   2fdc6:	1ad3      	subs	r3, r2, r3
   2fdc8:	469d      	mov	sp, r3
   2fdca:	ab02      	add	r3, sp, #8
   2fdcc:	3300      	adds	r3, #0
   2fdce:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   2fdd0:	69fb      	ldr	r3, [r7, #28]
   2fdd2:	2b00      	cmp	r3, #0
   2fdd4:	d100      	bne.n	2fdd8 <_http_client_request+0x94>
   2fdd6:	e346      	b.n	30466 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   2fdd8:	69fb      	ldr	r3, [r7, #28]
   2fdda:	2241      	movs	r2, #65	; 0x41
   2fddc:	5c9b      	ldrb	r3, [r3, r2]
   2fdde:	2201      	movs	r2, #1
   2fde0:	4013      	ands	r3, r2
   2fde2:	b2db      	uxtb	r3, r3
   2fde4:	2b00      	cmp	r3, #0
   2fde6:	d000      	beq.n	2fdea <_http_client_request+0xa6>
   2fde8:	e33f      	b.n	3046a <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   2fdea:	69fb      	ldr	r3, [r7, #28]
   2fdec:	33b0      	adds	r3, #176	; 0xb0
   2fdee:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   2fdf0:	69fb      	ldr	r3, [r7, #28]
   2fdf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2fdf4:	2b03      	cmp	r3, #3
   2fdf6:	d003      	beq.n	2fe00 <_http_client_request+0xbc>
   2fdf8:	2b04      	cmp	r3, #4
   2fdfa:	d100      	bne.n	2fdfe <_http_client_request+0xba>
   2fdfc:	e1b3      	b.n	30166 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   2fdfe:	e32f      	b.n	30460 <_http_client_request+0x71c>
		module->req.content_length = 0;
   2fe00:	69fb      	ldr	r3, [r7, #28]
   2fe02:	22cc      	movs	r2, #204	; 0xcc
   2fe04:	2100      	movs	r1, #0
   2fe06:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   2fe08:	69fb      	ldr	r3, [r7, #28]
   2fe0a:	22d0      	movs	r2, #208	; 0xd0
   2fe0c:	2100      	movs	r1, #0
   2fe0e:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   2fe10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   2fe12:	69fb      	ldr	r3, [r7, #28]
   2fe14:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   2fe16:	4c90      	ldr	r4, [pc, #576]	; (30058 <_http_client_request+0x314>)
   2fe18:	2334      	movs	r3, #52	; 0x34
   2fe1a:	2018      	movs	r0, #24
   2fe1c:	1838      	adds	r0, r7, r0
   2fe1e:	18c0      	adds	r0, r0, r3
   2fe20:	69fb      	ldr	r3, [r7, #28]
   2fe22:	9300      	str	r3, [sp, #0]
   2fe24:	0023      	movs	r3, r4
   2fe26:	4c8d      	ldr	r4, [pc, #564]	; (3005c <_http_client_request+0x318>)
   2fe28:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   2fe2a:	69fb      	ldr	r3, [r7, #28]
   2fe2c:	22c8      	movs	r2, #200	; 0xc8
   2fe2e:	5c9b      	ldrb	r3, [r3, r2]
   2fe30:	2b01      	cmp	r3, #1
   2fe32:	d10a      	bne.n	2fe4a <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   2fe34:	498a      	ldr	r1, [pc, #552]	; (30060 <_http_client_request+0x31c>)
   2fe36:	2334      	movs	r3, #52	; 0x34
   2fe38:	2218      	movs	r2, #24
   2fe3a:	4694      	mov	ip, r2
   2fe3c:	44bc      	add	ip, r7
   2fe3e:	4463      	add	r3, ip
   2fe40:	2204      	movs	r2, #4
   2fe42:	0018      	movs	r0, r3
   2fe44:	4b87      	ldr	r3, [pc, #540]	; (30064 <_http_client_request+0x320>)
   2fe46:	4798      	blx	r3
   2fe48:	e04e      	b.n	2fee8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   2fe4a:	69fb      	ldr	r3, [r7, #28]
   2fe4c:	22c8      	movs	r2, #200	; 0xc8
   2fe4e:	5c9b      	ldrb	r3, [r3, r2]
   2fe50:	2b02      	cmp	r3, #2
   2fe52:	d10a      	bne.n	2fe6a <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   2fe54:	4984      	ldr	r1, [pc, #528]	; (30068 <_http_client_request+0x324>)
   2fe56:	2334      	movs	r3, #52	; 0x34
   2fe58:	2218      	movs	r2, #24
   2fe5a:	4694      	mov	ip, r2
   2fe5c:	44bc      	add	ip, r7
   2fe5e:	4463      	add	r3, ip
   2fe60:	2205      	movs	r2, #5
   2fe62:	0018      	movs	r0, r3
   2fe64:	4b7f      	ldr	r3, [pc, #508]	; (30064 <_http_client_request+0x320>)
   2fe66:	4798      	blx	r3
   2fe68:	e03e      	b.n	2fee8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   2fe6a:	69fb      	ldr	r3, [r7, #28]
   2fe6c:	22c8      	movs	r2, #200	; 0xc8
   2fe6e:	5c9b      	ldrb	r3, [r3, r2]
   2fe70:	2b03      	cmp	r3, #3
   2fe72:	d10a      	bne.n	2fe8a <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   2fe74:	497d      	ldr	r1, [pc, #500]	; (3006c <_http_client_request+0x328>)
   2fe76:	2334      	movs	r3, #52	; 0x34
   2fe78:	2218      	movs	r2, #24
   2fe7a:	4694      	mov	ip, r2
   2fe7c:	44bc      	add	ip, r7
   2fe7e:	4463      	add	r3, ip
   2fe80:	2207      	movs	r2, #7
   2fe82:	0018      	movs	r0, r3
   2fe84:	4b77      	ldr	r3, [pc, #476]	; (30064 <_http_client_request+0x320>)
   2fe86:	4798      	blx	r3
   2fe88:	e02e      	b.n	2fee8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   2fe8a:	69fb      	ldr	r3, [r7, #28]
   2fe8c:	22c8      	movs	r2, #200	; 0xc8
   2fe8e:	5c9b      	ldrb	r3, [r3, r2]
   2fe90:	2b04      	cmp	r3, #4
   2fe92:	d10a      	bne.n	2feaa <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   2fe94:	4976      	ldr	r1, [pc, #472]	; (30070 <_http_client_request+0x32c>)
   2fe96:	2334      	movs	r3, #52	; 0x34
   2fe98:	2218      	movs	r2, #24
   2fe9a:	4694      	mov	ip, r2
   2fe9c:	44bc      	add	ip, r7
   2fe9e:	4463      	add	r3, ip
   2fea0:	2204      	movs	r2, #4
   2fea2:	0018      	movs	r0, r3
   2fea4:	4b6f      	ldr	r3, [pc, #444]	; (30064 <_http_client_request+0x320>)
   2fea6:	4798      	blx	r3
   2fea8:	e01e      	b.n	2fee8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   2feaa:	69fb      	ldr	r3, [r7, #28]
   2feac:	22c8      	movs	r2, #200	; 0xc8
   2feae:	5c9b      	ldrb	r3, [r3, r2]
   2feb0:	2b05      	cmp	r3, #5
   2feb2:	d10a      	bne.n	2feca <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   2feb4:	496f      	ldr	r1, [pc, #444]	; (30074 <_http_client_request+0x330>)
   2feb6:	2334      	movs	r3, #52	; 0x34
   2feb8:	2218      	movs	r2, #24
   2feba:	4694      	mov	ip, r2
   2febc:	44bc      	add	ip, r7
   2febe:	4463      	add	r3, ip
   2fec0:	2208      	movs	r2, #8
   2fec2:	0018      	movs	r0, r3
   2fec4:	4b67      	ldr	r3, [pc, #412]	; (30064 <_http_client_request+0x320>)
   2fec6:	4798      	blx	r3
   2fec8:	e00e      	b.n	2fee8 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   2feca:	69fb      	ldr	r3, [r7, #28]
   2fecc:	22c8      	movs	r2, #200	; 0xc8
   2fece:	5c9b      	ldrb	r3, [r3, r2]
   2fed0:	2b06      	cmp	r3, #6
   2fed2:	d109      	bne.n	2fee8 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   2fed4:	4968      	ldr	r1, [pc, #416]	; (30078 <_http_client_request+0x334>)
   2fed6:	2334      	movs	r3, #52	; 0x34
   2fed8:	2218      	movs	r2, #24
   2feda:	4694      	mov	ip, r2
   2fedc:	44bc      	add	ip, r7
   2fede:	4463      	add	r3, ip
   2fee0:	2205      	movs	r2, #5
   2fee2:	0018      	movs	r0, r3
   2fee4:	4b5f      	ldr	r3, [pc, #380]	; (30064 <_http_client_request+0x320>)
   2fee6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   2fee8:	69fb      	ldr	r3, [r7, #28]
   2feea:	3370      	adds	r3, #112	; 0x70
   2feec:	001c      	movs	r4, r3
   2feee:	69fb      	ldr	r3, [r7, #28]
   2fef0:	3370      	adds	r3, #112	; 0x70
   2fef2:	0018      	movs	r0, r3
   2fef4:	4b61      	ldr	r3, [pc, #388]	; (3007c <_http_client_request+0x338>)
   2fef6:	4798      	blx	r3
   2fef8:	0002      	movs	r2, r0
   2fefa:	2334      	movs	r3, #52	; 0x34
   2fefc:	2118      	movs	r1, #24
   2fefe:	468c      	mov	ip, r1
   2ff00:	44bc      	add	ip, r7
   2ff02:	4463      	add	r3, ip
   2ff04:	0021      	movs	r1, r4
   2ff06:	0018      	movs	r0, r3
   2ff08:	4b56      	ldr	r3, [pc, #344]	; (30064 <_http_client_request+0x320>)
   2ff0a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   2ff0c:	495c      	ldr	r1, [pc, #368]	; (30080 <_http_client_request+0x33c>)
   2ff0e:	2334      	movs	r3, #52	; 0x34
   2ff10:	2218      	movs	r2, #24
   2ff12:	4694      	mov	ip, r2
   2ff14:	44bc      	add	ip, r7
   2ff16:	4463      	add	r3, ip
   2ff18:	220b      	movs	r2, #11
   2ff1a:	0018      	movs	r0, r3
   2ff1c:	4b51      	ldr	r3, [pc, #324]	; (30064 <_http_client_request+0x320>)
   2ff1e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   2ff20:	4958      	ldr	r1, [pc, #352]	; (30084 <_http_client_request+0x340>)
   2ff22:	2334      	movs	r3, #52	; 0x34
   2ff24:	2218      	movs	r2, #24
   2ff26:	4694      	mov	ip, r2
   2ff28:	44bc      	add	ip, r7
   2ff2a:	4463      	add	r3, ip
   2ff2c:	220c      	movs	r2, #12
   2ff2e:	0018      	movs	r0, r3
   2ff30:	4b4c      	ldr	r3, [pc, #304]	; (30064 <_http_client_request+0x320>)
   2ff32:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   2ff34:	69fb      	ldr	r3, [r7, #28]
   2ff36:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   2ff38:	69fb      	ldr	r3, [r7, #28]
   2ff3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2ff3c:	0018      	movs	r0, r3
   2ff3e:	4b4f      	ldr	r3, [pc, #316]	; (3007c <_http_client_request+0x338>)
   2ff40:	4798      	blx	r3
   2ff42:	0002      	movs	r2, r0
   2ff44:	2334      	movs	r3, #52	; 0x34
   2ff46:	2118      	movs	r1, #24
   2ff48:	468c      	mov	ip, r1
   2ff4a:	44bc      	add	ip, r7
   2ff4c:	4463      	add	r3, ip
   2ff4e:	0021      	movs	r1, r4
   2ff50:	0018      	movs	r0, r3
   2ff52:	4b44      	ldr	r3, [pc, #272]	; (30064 <_http_client_request+0x320>)
   2ff54:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2ff56:	494c      	ldr	r1, [pc, #304]	; (30088 <_http_client_request+0x344>)
   2ff58:	2334      	movs	r3, #52	; 0x34
   2ff5a:	2218      	movs	r2, #24
   2ff5c:	4694      	mov	ip, r2
   2ff5e:	44bc      	add	ip, r7
   2ff60:	4463      	add	r3, ip
   2ff62:	2202      	movs	r2, #2
   2ff64:	0018      	movs	r0, r3
   2ff66:	4b3f      	ldr	r3, [pc, #252]	; (30064 <_http_client_request+0x320>)
   2ff68:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   2ff6a:	4948      	ldr	r1, [pc, #288]	; (3008c <_http_client_request+0x348>)
   2ff6c:	2334      	movs	r3, #52	; 0x34
   2ff6e:	2218      	movs	r2, #24
   2ff70:	4694      	mov	ip, r2
   2ff72:	44bc      	add	ip, r7
   2ff74:	4463      	add	r3, ip
   2ff76:	2206      	movs	r2, #6
   2ff78:	0018      	movs	r0, r3
   2ff7a:	4b3a      	ldr	r3, [pc, #232]	; (30064 <_http_client_request+0x320>)
   2ff7c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   2ff7e:	69fb      	ldr	r3, [r7, #28]
   2ff80:	1c5c      	adds	r4, r3, #1
   2ff82:	69fb      	ldr	r3, [r7, #28]
   2ff84:	3301      	adds	r3, #1
   2ff86:	0018      	movs	r0, r3
   2ff88:	4b3c      	ldr	r3, [pc, #240]	; (3007c <_http_client_request+0x338>)
   2ff8a:	4798      	blx	r3
   2ff8c:	0002      	movs	r2, r0
   2ff8e:	2334      	movs	r3, #52	; 0x34
   2ff90:	2118      	movs	r1, #24
   2ff92:	468c      	mov	ip, r1
   2ff94:	44bc      	add	ip, r7
   2ff96:	4463      	add	r3, ip
   2ff98:	0021      	movs	r1, r4
   2ff9a:	0018      	movs	r0, r3
   2ff9c:	4b31      	ldr	r3, [pc, #196]	; (30064 <_http_client_request+0x320>)
   2ff9e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   2ffa0:	4939      	ldr	r1, [pc, #228]	; (30088 <_http_client_request+0x344>)
   2ffa2:	2334      	movs	r3, #52	; 0x34
   2ffa4:	2218      	movs	r2, #24
   2ffa6:	4694      	mov	ip, r2
   2ffa8:	44bc      	add	ip, r7
   2ffaa:	4463      	add	r3, ip
   2ffac:	2202      	movs	r2, #2
   2ffae:	0018      	movs	r0, r3
   2ffb0:	4b2c      	ldr	r3, [pc, #176]	; (30064 <_http_client_request+0x320>)
   2ffb2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   2ffb4:	4936      	ldr	r1, [pc, #216]	; (30090 <_http_client_request+0x34c>)
   2ffb6:	2334      	movs	r3, #52	; 0x34
   2ffb8:	2218      	movs	r2, #24
   2ffba:	4694      	mov	ip, r2
   2ffbc:	44bc      	add	ip, r7
   2ffbe:	4463      	add	r3, ip
   2ffc0:	2218      	movs	r2, #24
   2ffc2:	0018      	movs	r0, r3
   2ffc4:	4b27      	ldr	r3, [pc, #156]	; (30064 <_http_client_request+0x320>)
   2ffc6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   2ffc8:	4932      	ldr	r1, [pc, #200]	; (30094 <_http_client_request+0x350>)
   2ffca:	2334      	movs	r3, #52	; 0x34
   2ffcc:	2218      	movs	r2, #24
   2ffce:	4694      	mov	ip, r2
   2ffd0:	44bc      	add	ip, r7
   2ffd2:	4463      	add	r3, ip
   2ffd4:	2213      	movs	r2, #19
   2ffd6:	0018      	movs	r0, r3
   2ffd8:	4b22      	ldr	r3, [pc, #136]	; (30064 <_http_client_request+0x320>)
   2ffda:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   2ffdc:	492e      	ldr	r1, [pc, #184]	; (30098 <_http_client_request+0x354>)
   2ffde:	2334      	movs	r3, #52	; 0x34
   2ffe0:	2218      	movs	r2, #24
   2ffe2:	4694      	mov	ip, r2
   2ffe4:	44bc      	add	ip, r7
   2ffe6:	4463      	add	r3, ip
   2ffe8:	2217      	movs	r2, #23
   2ffea:	0018      	movs	r0, r3
   2ffec:	4b1d      	ldr	r3, [pc, #116]	; (30064 <_http_client_request+0x320>)
   2ffee:	4798      	blx	r3
		if (entity->read != NULL) {
   2fff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2fff2:	68db      	ldr	r3, [r3, #12]
   2fff4:	2b00      	cmp	r3, #0
   2fff6:	d100      	bne.n	2fffa <_http_client_request+0x2b6>
   2fff8:	e088      	b.n	3010c <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   2fffa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2fffc:	781b      	ldrb	r3, [r3, #0]
   2fffe:	2b00      	cmp	r3, #0
   30000:	d00f      	beq.n	30022 <_http_client_request+0x2de>
				module->req.content_length = -1;
   30002:	69fb      	ldr	r3, [r7, #28]
   30004:	21cc      	movs	r1, #204	; 0xcc
   30006:	2201      	movs	r2, #1
   30008:	4252      	negs	r2, r2
   3000a:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   3000c:	4923      	ldr	r1, [pc, #140]	; (3009c <_http_client_request+0x358>)
   3000e:	2334      	movs	r3, #52	; 0x34
   30010:	2218      	movs	r2, #24
   30012:	4694      	mov	ip, r2
   30014:	44bc      	add	ip, r7
   30016:	4463      	add	r3, ip
   30018:	221c      	movs	r2, #28
   3001a:	0018      	movs	r0, r3
   3001c:	4b11      	ldr	r3, [pc, #68]	; (30064 <_http_client_request+0x320>)
   3001e:	4798      	blx	r3
   30020:	e074      	b.n	3010c <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   30022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30024:	689b      	ldr	r3, [r3, #8]
   30026:	2b00      	cmp	r3, #0
   30028:	d070      	beq.n	3010c <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   3002a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3002c:	689a      	ldr	r2, [r3, #8]
   3002e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30030:	695b      	ldr	r3, [r3, #20]
   30032:	0018      	movs	r0, r3
   30034:	4790      	blx	r2
   30036:	0001      	movs	r1, r0
   30038:	69fb      	ldr	r3, [r7, #28]
   3003a:	22cc      	movs	r2, #204	; 0xcc
   3003c:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3003e:	69fb      	ldr	r3, [r7, #28]
   30040:	22cc      	movs	r2, #204	; 0xcc
   30042:	589b      	ldr	r3, [r3, r2]
   30044:	2b00      	cmp	r3, #0
   30046:	da2b      	bge.n	300a0 <_http_client_request+0x35c>
					module->req.content_length = 0;
   30048:	69fb      	ldr	r3, [r7, #28]
   3004a:	22cc      	movs	r2, #204	; 0xcc
   3004c:	2100      	movs	r1, #0
   3004e:	5099      	str	r1, [r3, r2]
   30050:	e05c      	b.n	3010c <_http_client_request+0x3c8>
   30052:	46c0      	nop			; (mov r8, r8)
   30054:	00038220 	.word	0x00038220
   30058:	0002fcbd 	.word	0x0002fcbd
   3005c:	00030c25 	.word	0x00030c25
   30060:	00038144 	.word	0x00038144
   30064:	00030ca5 	.word	0x00030ca5
   30068:	0003814c 	.word	0x0003814c
   3006c:	00038154 	.word	0x00038154
   30070:	0003815c 	.word	0x0003815c
   30074:	00038164 	.word	0x00038164
   30078:	00038170 	.word	0x00038170
   3007c:	0003353b 	.word	0x0003353b
   30080:	00038178 	.word	0x00038178
   30084:	00038184 	.word	0x00038184
   30088:	00038194 	.word	0x00038194
   3008c:	00038198 	.word	0x00038198
   30090:	000381a0 	.word	0x000381a0
   30094:	000381bc 	.word	0x000381bc
   30098:	000381d0 	.word	0x000381d0
   3009c:	000381e8 	.word	0x000381e8
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   300a0:	69fb      	ldr	r3, [r7, #28]
   300a2:	22cc      	movs	r2, #204	; 0xcc
   300a4:	589b      	ldr	r3, [r3, r2]
   300a6:	001a      	movs	r2, r3
   300a8:	49e0      	ldr	r1, [pc, #896]	; (3042c <_http_client_request+0x6e8>)
   300aa:	2328      	movs	r3, #40	; 0x28
   300ac:	2018      	movs	r0, #24
   300ae:	4684      	mov	ip, r0
   300b0:	44bc      	add	ip, r7
   300b2:	4463      	add	r3, ip
   300b4:	0018      	movs	r0, r3
   300b6:	4bde      	ldr	r3, [pc, #888]	; (30430 <_http_client_request+0x6ec>)
   300b8:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   300ba:	49de      	ldr	r1, [pc, #888]	; (30434 <_http_client_request+0x6f0>)
   300bc:	2334      	movs	r3, #52	; 0x34
   300be:	2218      	movs	r2, #24
   300c0:	4694      	mov	ip, r2
   300c2:	44bc      	add	ip, r7
   300c4:	4463      	add	r3, ip
   300c6:	2210      	movs	r2, #16
   300c8:	0018      	movs	r0, r3
   300ca:	4bdb      	ldr	r3, [pc, #876]	; (30438 <_http_client_request+0x6f4>)
   300cc:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   300ce:	2328      	movs	r3, #40	; 0x28
   300d0:	2218      	movs	r2, #24
   300d2:	4694      	mov	ip, r2
   300d4:	44bc      	add	ip, r7
   300d6:	4463      	add	r3, ip
   300d8:	0018      	movs	r0, r3
   300da:	4bd8      	ldr	r3, [pc, #864]	; (3043c <_http_client_request+0x6f8>)
   300dc:	4798      	blx	r3
   300de:	0002      	movs	r2, r0
   300e0:	2328      	movs	r3, #40	; 0x28
   300e2:	2118      	movs	r1, #24
   300e4:	1879      	adds	r1, r7, r1
   300e6:	18c9      	adds	r1, r1, r3
   300e8:	2334      	movs	r3, #52	; 0x34
   300ea:	2018      	movs	r0, #24
   300ec:	4684      	mov	ip, r0
   300ee:	44bc      	add	ip, r7
   300f0:	4463      	add	r3, ip
   300f2:	0018      	movs	r0, r3
   300f4:	4bd0      	ldr	r3, [pc, #832]	; (30438 <_http_client_request+0x6f4>)
   300f6:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   300f8:	49d1      	ldr	r1, [pc, #836]	; (30440 <_http_client_request+0x6fc>)
   300fa:	2334      	movs	r3, #52	; 0x34
   300fc:	2218      	movs	r2, #24
   300fe:	4694      	mov	ip, r2
   30100:	44bc      	add	ip, r7
   30102:	4463      	add	r3, ip
   30104:	2202      	movs	r2, #2
   30106:	0018      	movs	r0, r3
   30108:	4bcb      	ldr	r3, [pc, #812]	; (30438 <_http_client_request+0x6f4>)
   3010a:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   3010c:	69fb      	ldr	r3, [r7, #28]
   3010e:	22d4      	movs	r2, #212	; 0xd4
   30110:	589b      	ldr	r3, [r3, r2]
   30112:	2b00      	cmp	r3, #0
   30114:	d012      	beq.n	3013c <_http_client_request+0x3f8>
				module->req.ext_header,
   30116:	69fb      	ldr	r3, [r7, #28]
   30118:	22d4      	movs	r2, #212	; 0xd4
   3011a:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   3011c:	69fb      	ldr	r3, [r7, #28]
   3011e:	22d4      	movs	r2, #212	; 0xd4
   30120:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   30122:	0018      	movs	r0, r3
   30124:	4bc5      	ldr	r3, [pc, #788]	; (3043c <_http_client_request+0x6f8>)
   30126:	4798      	blx	r3
   30128:	0002      	movs	r2, r0
   3012a:	2334      	movs	r3, #52	; 0x34
   3012c:	2118      	movs	r1, #24
   3012e:	468c      	mov	ip, r1
   30130:	44bc      	add	ip, r7
   30132:	4463      	add	r3, ip
   30134:	0021      	movs	r1, r4
   30136:	0018      	movs	r0, r3
   30138:	4bbf      	ldr	r3, [pc, #764]	; (30438 <_http_client_request+0x6f4>)
   3013a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3013c:	49c0      	ldr	r1, [pc, #768]	; (30440 <_http_client_request+0x6fc>)
   3013e:	2334      	movs	r3, #52	; 0x34
   30140:	2218      	movs	r2, #24
   30142:	4694      	mov	ip, r2
   30144:	44bc      	add	ip, r7
   30146:	4463      	add	r3, ip
   30148:	2202      	movs	r2, #2
   3014a:	0018      	movs	r0, r3
   3014c:	4bba      	ldr	r3, [pc, #744]	; (30438 <_http_client_request+0x6f4>)
   3014e:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   30150:	2334      	movs	r3, #52	; 0x34
   30152:	2218      	movs	r2, #24
   30154:	4694      	mov	ip, r2
   30156:	44bc      	add	ip, r7
   30158:	4463      	add	r3, ip
   3015a:	0018      	movs	r0, r3
   3015c:	4bb9      	ldr	r3, [pc, #740]	; (30444 <_http_client_request+0x700>)
   3015e:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   30160:	69fb      	ldr	r3, [r7, #28]
   30162:	2204      	movs	r2, #4
   30164:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   30166:	69fb      	ldr	r3, [r7, #28]
   30168:	22cc      	movs	r2, #204	; 0xcc
   3016a:	589b      	ldr	r3, [r3, r2]
   3016c:	2b00      	cmp	r3, #0
   3016e:	db00      	blt.n	30172 <_http_client_request+0x42e>
   30170:	e0c6      	b.n	30300 <_http_client_request+0x5bc>
   30172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30174:	68db      	ldr	r3, [r3, #12]
   30176:	2b00      	cmp	r3, #0
   30178:	d100      	bne.n	3017c <_http_client_request+0x438>
   3017a:	e0c1      	b.n	30300 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   3017c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3017e:	68dc      	ldr	r4, [r3, #12]
   30180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30182:	6958      	ldr	r0, [r3, #20]
   30184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30186:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   30188:	69fb      	ldr	r3, [r7, #28]
   3018a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   3018c:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3018e:	69fb      	ldr	r3, [r7, #28]
   30190:	22d0      	movs	r2, #208	; 0xd0
   30192:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   30194:	002a      	movs	r2, r5
   30196:	47a0      	blx	r4
   30198:	0003      	movs	r3, r0
   3019a:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3019c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3019e:	2b00      	cmp	r3, #0
   301a0:	da01      	bge.n	301a6 <_http_client_request+0x462>
				size = 0;
   301a2:	2300      	movs	r3, #0
   301a4:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   301a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   301a8:	220a      	movs	r2, #10
   301aa:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   301ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   301ae:	220d      	movs	r2, #13
   301b0:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   301b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   301b4:	3305      	adds	r3, #5
   301b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   301b8:	210d      	movs	r1, #13
   301ba:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   301bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   301be:	3306      	adds	r3, #6
   301c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   301c2:	210a      	movs	r1, #10
   301c4:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   301c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   301c8:	2b00      	cmp	r3, #0
   301ca:	db14      	blt.n	301f6 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   301cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   301ce:	3302      	adds	r3, #2
   301d0:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   301d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   301d4:	4a9c      	ldr	r2, [pc, #624]	; (30448 <_http_client_request+0x704>)
   301d6:	4013      	ands	r3, r2
   301d8:	d504      	bpl.n	301e4 <_http_client_request+0x4a0>
   301da:	3b01      	subs	r3, #1
   301dc:	2210      	movs	r2, #16
   301de:	4252      	negs	r2, r2
   301e0:	4313      	orrs	r3, r2
   301e2:	3301      	adds	r3, #1
   301e4:	001a      	movs	r2, r3
   301e6:	2318      	movs	r3, #24
   301e8:	2118      	movs	r1, #24
   301ea:	468c      	mov	ip, r1
   301ec:	44bc      	add	ip, r7
   301ee:	4463      	add	r3, ip
   301f0:	5c9a      	ldrb	r2, [r3, r2]
   301f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   301f4:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   301f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   301f8:	2b0f      	cmp	r3, #15
   301fa:	dd19      	ble.n	30230 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   301fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   301fe:	3301      	adds	r3, #1
   30200:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   30202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30204:	2b00      	cmp	r3, #0
   30206:	da00      	bge.n	3020a <_http_client_request+0x4c6>
   30208:	330f      	adds	r3, #15
   3020a:	111b      	asrs	r3, r3, #4
   3020c:	001a      	movs	r2, r3
   3020e:	4b8e      	ldr	r3, [pc, #568]	; (30448 <_http_client_request+0x704>)
   30210:	4013      	ands	r3, r2
   30212:	d504      	bpl.n	3021e <_http_client_request+0x4da>
   30214:	3b01      	subs	r3, #1
   30216:	2210      	movs	r2, #16
   30218:	4252      	negs	r2, r2
   3021a:	4313      	orrs	r3, r2
   3021c:	3301      	adds	r3, #1
   3021e:	001a      	movs	r2, r3
   30220:	2318      	movs	r3, #24
   30222:	2118      	movs	r1, #24
   30224:	468c      	mov	ip, r1
   30226:	44bc      	add	ip, r7
   30228:	4463      	add	r3, ip
   3022a:	5c9a      	ldrb	r2, [r3, r2]
   3022c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3022e:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   30230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30232:	2bff      	cmp	r3, #255	; 0xff
   30234:	dd18      	ble.n	30268 <_http_client_request+0x524>
				ptr = buffer;
   30236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30238:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   3023a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3023c:	2b00      	cmp	r3, #0
   3023e:	da00      	bge.n	30242 <_http_client_request+0x4fe>
   30240:	33ff      	adds	r3, #255	; 0xff
   30242:	121b      	asrs	r3, r3, #8
   30244:	001a      	movs	r2, r3
   30246:	4b80      	ldr	r3, [pc, #512]	; (30448 <_http_client_request+0x704>)
   30248:	4013      	ands	r3, r2
   3024a:	d504      	bpl.n	30256 <_http_client_request+0x512>
   3024c:	3b01      	subs	r3, #1
   3024e:	2210      	movs	r2, #16
   30250:	4252      	negs	r2, r2
   30252:	4313      	orrs	r3, r2
   30254:	3301      	adds	r3, #1
   30256:	001a      	movs	r2, r3
   30258:	2318      	movs	r3, #24
   3025a:	2118      	movs	r1, #24
   3025c:	468c      	mov	ip, r1
   3025e:	44bc      	add	ip, r7
   30260:	4463      	add	r3, ip
   30262:	5c9a      	ldrb	r2, [r3, r2]
   30264:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30266:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   30268:	69fb      	ldr	r3, [r7, #28]
   3026a:	2000      	movs	r0, #0
   3026c:	5618      	ldrsb	r0, [r3, r0]
   3026e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   30270:	3303      	adds	r3, #3
   30272:	001a      	movs	r2, r3
   30274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   30276:	1ad3      	subs	r3, r2, r3
   30278:	b29a      	uxth	r2, r3
   3027a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3027c:	b29b      	uxth	r3, r3
   3027e:	18d3      	adds	r3, r2, r3
   30280:	b29b      	uxth	r3, r3
   30282:	3304      	adds	r3, #4
   30284:	b29a      	uxth	r2, r3
   30286:	6f39      	ldr	r1, [r7, #112]	; 0x70
   30288:	2300      	movs	r3, #0
   3028a:	4c70      	ldr	r4, [pc, #448]	; (3044c <_http_client_request+0x708>)
   3028c:	47a0      	blx	r4
   3028e:	0003      	movs	r3, r0
   30290:	663b      	str	r3, [r7, #96]	; 0x60
   30292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   30294:	2b00      	cmp	r3, #0
   30296:	da07      	bge.n	302a8 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   30298:	2305      	movs	r3, #5
   3029a:	425a      	negs	r2, r3
   3029c:	69fb      	ldr	r3, [r7, #28]
   3029e:	0011      	movs	r1, r2
   302a0:	0018      	movs	r0, r3
   302a2:	4b6b      	ldr	r3, [pc, #428]	; (30450 <_http_client_request+0x70c>)
   302a4:	4798      	blx	r3
				return;
   302a6:	e0e1      	b.n	3046c <_http_client_request+0x728>
			module->req.sent_length += size;
   302a8:	69fb      	ldr	r3, [r7, #28]
   302aa:	22d0      	movs	r2, #208	; 0xd0
   302ac:	589a      	ldr	r2, [r3, r2]
   302ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   302b0:	18d2      	adds	r2, r2, r3
   302b2:	69fb      	ldr	r3, [r7, #28]
   302b4:	21d0      	movs	r1, #208	; 0xd0
   302b6:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   302b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   302ba:	2b00      	cmp	r3, #0
   302bc:	d000      	beq.n	302c0 <_http_client_request+0x57c>
   302be:	e0c9      	b.n	30454 <_http_client_request+0x710>
				if (module->req.entity.close) {
   302c0:	69fb      	ldr	r3, [r7, #28]
   302c2:	22c0      	movs	r2, #192	; 0xc0
   302c4:	589b      	ldr	r3, [r3, r2]
   302c6:	2b00      	cmp	r3, #0
   302c8:	d007      	beq.n	302da <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   302ca:	69fb      	ldr	r3, [r7, #28]
   302cc:	22c0      	movs	r2, #192	; 0xc0
   302ce:	589b      	ldr	r3, [r3, r2]
   302d0:	69fa      	ldr	r2, [r7, #28]
   302d2:	21c4      	movs	r1, #196	; 0xc4
   302d4:	5852      	ldr	r2, [r2, r1]
   302d6:	0010      	movs	r0, r2
   302d8:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   302da:	69fb      	ldr	r3, [r7, #28]
   302dc:	2202      	movs	r2, #2
   302de:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   302e0:	69fb      	ldr	r3, [r7, #28]
   302e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   302e4:	2b00      	cmp	r3, #0
   302e6:	d100      	bne.n	302ea <_http_client_request+0x5a6>
   302e8:	e0b5      	b.n	30456 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   302ea:	69fb      	ldr	r3, [r7, #28]
   302ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   302ee:	220c      	movs	r2, #12
   302f0:	2118      	movs	r1, #24
   302f2:	468c      	mov	ip, r1
   302f4:	44bc      	add	ip, r7
   302f6:	4462      	add	r2, ip
   302f8:	69f8      	ldr	r0, [r7, #28]
   302fa:	2101      	movs	r1, #1
   302fc:	4798      	blx	r3
				break;
   302fe:	e0aa      	b.n	30456 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   30300:	69fb      	ldr	r3, [r7, #28]
   30302:	22cc      	movs	r2, #204	; 0xcc
   30304:	589b      	ldr	r3, [r3, r2]
   30306:	2b00      	cmp	r3, #0
   30308:	dc00      	bgt.n	3030c <_http_client_request+0x5c8>
   3030a:	e07c      	b.n	30406 <_http_client_request+0x6c2>
   3030c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3030e:	68db      	ldr	r3, [r3, #12]
   30310:	2b00      	cmp	r3, #0
   30312:	d100      	bne.n	30316 <_http_client_request+0x5d2>
   30314:	e077      	b.n	30406 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   30316:	69fb      	ldr	r3, [r7, #28]
   30318:	22d0      	movs	r2, #208	; 0xd0
   3031a:	589a      	ldr	r2, [r3, r2]
   3031c:	69fb      	ldr	r3, [r7, #28]
   3031e:	21cc      	movs	r1, #204	; 0xcc
   30320:	585b      	ldr	r3, [r3, r1]
   30322:	429a      	cmp	r2, r3
   30324:	db1f      	blt.n	30366 <_http_client_request+0x622>
				if (module->req.entity.close) {
   30326:	69fb      	ldr	r3, [r7, #28]
   30328:	22c0      	movs	r2, #192	; 0xc0
   3032a:	589b      	ldr	r3, [r3, r2]
   3032c:	2b00      	cmp	r3, #0
   3032e:	d007      	beq.n	30340 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   30330:	69fb      	ldr	r3, [r7, #28]
   30332:	22c0      	movs	r2, #192	; 0xc0
   30334:	589b      	ldr	r3, [r3, r2]
   30336:	69fa      	ldr	r2, [r7, #28]
   30338:	21c4      	movs	r1, #196	; 0xc4
   3033a:	5852      	ldr	r2, [r2, r1]
   3033c:	0010      	movs	r0, r2
   3033e:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   30340:	69fb      	ldr	r3, [r7, #28]
   30342:	2202      	movs	r2, #2
   30344:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   30346:	69fb      	ldr	r3, [r7, #28]
   30348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3034a:	2b00      	cmp	r3, #0
   3034c:	d100      	bne.n	30350 <_http_client_request+0x60c>
   3034e:	e084      	b.n	3045a <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30350:	69fb      	ldr	r3, [r7, #28]
   30352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30354:	220c      	movs	r2, #12
   30356:	2118      	movs	r1, #24
   30358:	468c      	mov	ip, r1
   3035a:	44bc      	add	ip, r7
   3035c:	4462      	add	r2, ip
   3035e:	69f8      	ldr	r0, [r7, #28]
   30360:	2101      	movs	r1, #1
   30362:	4798      	blx	r3
				break;
   30364:	e079      	b.n	3045a <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   30366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   30368:	68dc      	ldr	r4, [r3, #12]
   3036a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3036c:	6958      	ldr	r0, [r3, #20]
   3036e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   30370:	69fb      	ldr	r3, [r7, #28]
   30372:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   30374:	69fb      	ldr	r3, [r7, #28]
   30376:	22d0      	movs	r2, #208	; 0xd0
   30378:	589b      	ldr	r3, [r3, r2]
   3037a:	002a      	movs	r2, r5
   3037c:	47a0      	blx	r4
   3037e:	0003      	movs	r3, r0
   30380:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   30382:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   30384:	2b00      	cmp	r3, #0
   30386:	da0d      	bge.n	303a4 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   30388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3038a:	2b00      	cmp	r3, #0
   3038c:	d102      	bne.n	30394 <_http_client_request+0x650>
   3038e:	234d      	movs	r3, #77	; 0x4d
   30390:	425b      	negs	r3, r3
   30392:	e001      	b.n	30398 <_http_client_request+0x654>
   30394:	2305      	movs	r3, #5
   30396:	425b      	negs	r3, r3
   30398:	69fa      	ldr	r2, [r7, #28]
   3039a:	0019      	movs	r1, r3
   3039c:	0010      	movs	r0, r2
   3039e:	4b2c      	ldr	r3, [pc, #176]	; (30450 <_http_client_request+0x70c>)
   303a0:	4798      	blx	r3
			if (size < 0) {
   303a2:	e057      	b.n	30454 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   303a4:	69fb      	ldr	r3, [r7, #28]
   303a6:	22cc      	movs	r2, #204	; 0xcc
   303a8:	589a      	ldr	r2, [r3, r2]
   303aa:	69fb      	ldr	r3, [r7, #28]
   303ac:	21d0      	movs	r1, #208	; 0xd0
   303ae:	585b      	ldr	r3, [r3, r1]
   303b0:	1ad2      	subs	r2, r2, r3
   303b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   303b4:	429a      	cmp	r2, r3
   303b6:	da07      	bge.n	303c8 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   303b8:	69fb      	ldr	r3, [r7, #28]
   303ba:	22cc      	movs	r2, #204	; 0xcc
   303bc:	589a      	ldr	r2, [r3, r2]
   303be:	69fb      	ldr	r3, [r7, #28]
   303c0:	21d0      	movs	r1, #208	; 0xd0
   303c2:	585b      	ldr	r3, [r3, r1]
   303c4:	1ad3      	subs	r3, r2, r3
   303c6:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   303c8:	69fb      	ldr	r3, [r7, #28]
   303ca:	2000      	movs	r0, #0
   303cc:	5618      	ldrsb	r0, [r3, r0]
   303ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   303d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   303d2:	b29a      	uxth	r2, r3
   303d4:	2300      	movs	r3, #0
   303d6:	4c1d      	ldr	r4, [pc, #116]	; (3044c <_http_client_request+0x708>)
   303d8:	47a0      	blx	r4
   303da:	0003      	movs	r3, r0
   303dc:	663b      	str	r3, [r7, #96]	; 0x60
   303de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   303e0:	2b00      	cmp	r3, #0
   303e2:	da07      	bge.n	303f4 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   303e4:	2305      	movs	r3, #5
   303e6:	425a      	negs	r2, r3
   303e8:	69fb      	ldr	r3, [r7, #28]
   303ea:	0011      	movs	r1, r2
   303ec:	0018      	movs	r0, r3
   303ee:	4b18      	ldr	r3, [pc, #96]	; (30450 <_http_client_request+0x70c>)
   303f0:	4798      	blx	r3
					return;
   303f2:	e03b      	b.n	3046c <_http_client_request+0x728>
				module->req.sent_length += size;
   303f4:	69fb      	ldr	r3, [r7, #28]
   303f6:	22d0      	movs	r2, #208	; 0xd0
   303f8:	589a      	ldr	r2, [r3, r2]
   303fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   303fc:	18d2      	adds	r2, r2, r3
   303fe:	69fb      	ldr	r3, [r7, #28]
   30400:	21d0      	movs	r1, #208	; 0xd0
   30402:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   30404:	e026      	b.n	30454 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   30406:	69fb      	ldr	r3, [r7, #28]
   30408:	2202      	movs	r2, #2
   3040a:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   3040c:	69fb      	ldr	r3, [r7, #28]
   3040e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30410:	2b00      	cmp	r3, #0
   30412:	d024      	beq.n	3045e <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   30414:	69fb      	ldr	r3, [r7, #28]
   30416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30418:	220c      	movs	r2, #12
   3041a:	2118      	movs	r1, #24
   3041c:	468c      	mov	ip, r1
   3041e:	44bc      	add	ip, r7
   30420:	4462      	add	r2, ip
   30422:	69f8      	ldr	r0, [r7, #28]
   30424:	2101      	movs	r1, #1
   30426:	4798      	blx	r3
			break;
   30428:	e019      	b.n	3045e <_http_client_request+0x71a>
   3042a:	46c0      	nop			; (mov r8, r8)
   3042c:	00038208 	.word	0x00038208
   30430:	0003345d 	.word	0x0003345d
   30434:	0003820c 	.word	0x0003820c
   30438:	00030ca5 	.word	0x00030ca5
   3043c:	0003353b 	.word	0x0003353b
   30440:	00038194 	.word	0x00038194
   30444:	00030ce1 	.word	0x00030ce1
   30448:	8000000f 	.word	0x8000000f
   3044c:	00024229 	.word	0x00024229
   30450:	0002fbf1 	.word	0x0002fbf1
		break;
   30454:	e004      	b.n	30460 <_http_client_request+0x71c>
				break;
   30456:	46c0      	nop			; (mov r8, r8)
   30458:	e002      	b.n	30460 <_http_client_request+0x71c>
				break;
   3045a:	46c0      	nop			; (mov r8, r8)
   3045c:	e000      	b.n	30460 <_http_client_request+0x71c>
			break;
   3045e:	46c0      	nop			; (mov r8, r8)
   30460:	69bb      	ldr	r3, [r7, #24]
   30462:	469d      	mov	sp, r3
   30464:	e004      	b.n	30470 <_http_client_request+0x72c>
		return;
   30466:	46c0      	nop			; (mov r8, r8)
   30468:	e000      	b.n	3046c <_http_client_request+0x728>
		return;
   3046a:	46c0      	nop			; (mov r8, r8)
   3046c:	69bb      	ldr	r3, [r7, #24]
   3046e:	469d      	mov	sp, r3
	}
}
   30470:	46bd      	mov	sp, r7
   30472:	b01e      	add	sp, #120	; 0x78
   30474:	bc04      	pop	{r2}
   30476:	4690      	mov	r8, r2
   30478:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3047a:	46c0      	nop			; (mov r8, r8)

0003047c <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   3047c:	b590      	push	{r4, r7, lr}
   3047e:	b083      	sub	sp, #12
   30480:	af00      	add	r7, sp, #0
   30482:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   30484:	687b      	ldr	r3, [r7, #4]
   30486:	2b00      	cmp	r3, #0
   30488:	d021      	beq.n	304ce <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   3048a:	687b      	ldr	r3, [r7, #4]
   3048c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3048e:	687b      	ldr	r3, [r7, #4]
   30490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30492:	429a      	cmp	r2, r3
   30494:	d307      	bcc.n	304a6 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   30496:	238b      	movs	r3, #139	; 0x8b
   30498:	425a      	negs	r2, r3
   3049a:	687b      	ldr	r3, [r7, #4]
   3049c:	0011      	movs	r1, r2
   3049e:	0018      	movs	r0, r3
   304a0:	4b0d      	ldr	r3, [pc, #52]	; (304d8 <_http_client_recv_packet+0x5c>)
   304a2:	4798      	blx	r3
		return;
   304a4:	e014      	b.n	304d0 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   304a6:	687b      	ldr	r3, [r7, #4]
   304a8:	2000      	movs	r0, #0
   304aa:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   304ac:	687b      	ldr	r3, [r7, #4]
   304ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   304b0:	687b      	ldr	r3, [r7, #4]
   304b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   304b4:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   304b6:	687b      	ldr	r3, [r7, #4]
   304b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   304ba:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   304bc:	687b      	ldr	r3, [r7, #4]
   304be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   304c0:	b29b      	uxth	r3, r3
   304c2:	1ad3      	subs	r3, r2, r3
   304c4:	b29a      	uxth	r2, r3
   304c6:	2300      	movs	r3, #0
   304c8:	4c04      	ldr	r4, [pc, #16]	; (304dc <_http_client_recv_packet+0x60>)
   304ca:	47a0      	blx	r4
   304cc:	e000      	b.n	304d0 <_http_client_recv_packet+0x54>
		return;
   304ce:	46c0      	nop			; (mov r8, r8)
}
   304d0:	46bd      	mov	sp, r7
   304d2:	b003      	add	sp, #12
   304d4:	bd90      	pop	{r4, r7, pc}
   304d6:	46c0      	nop			; (mov r8, r8)
   304d8:	0002fbf1 	.word	0x0002fbf1
   304dc:	0002438d 	.word	0x0002438d

000304e0 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   304e0:	b580      	push	{r7, lr}
   304e2:	b082      	sub	sp, #8
   304e4:	af00      	add	r7, sp, #0
   304e6:	6078      	str	r0, [r7, #4]
   304e8:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   304ea:	687b      	ldr	r3, [r7, #4]
   304ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   304ee:	683b      	ldr	r3, [r7, #0]
   304f0:	18d2      	adds	r2, r2, r3
   304f2:	687b      	ldr	r3, [r7, #4]
   304f4:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   304f6:	687b      	ldr	r3, [r7, #4]
   304f8:	2258      	movs	r2, #88	; 0x58
   304fa:	5a9b      	ldrh	r3, [r3, r2]
   304fc:	2b00      	cmp	r3, #0
   304fe:	d007      	beq.n	30510 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   30500:	687b      	ldr	r3, [r7, #4]
   30502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30504:	687b      	ldr	r3, [r7, #4]
   30506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30508:	0019      	movs	r1, r3
   3050a:	0010      	movs	r0, r2
   3050c:	4b06      	ldr	r3, [pc, #24]	; (30528 <_http_client_recved_packet+0x48>)
   3050e:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   30510:	46c0      	nop			; (mov r8, r8)
   30512:	687b      	ldr	r3, [r7, #4]
   30514:	0018      	movs	r0, r3
   30516:	4b05      	ldr	r3, [pc, #20]	; (3052c <_http_client_recved_packet+0x4c>)
   30518:	4798      	blx	r3
   3051a:	1e03      	subs	r3, r0, #0
   3051c:	d1f9      	bne.n	30512 <_http_client_recved_packet+0x32>
}
   3051e:	46c0      	nop			; (mov r8, r8)
   30520:	46bd      	mov	sp, r7
   30522:	b002      	add	sp, #8
   30524:	bd80      	pop	{r7, pc}
   30526:	46c0      	nop			; (mov r8, r8)
   30528:	00030f9d 	.word	0x00030f9d
   3052c:	00030531 	.word	0x00030531

00030530 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   30530:	b580      	push	{r7, lr}
   30532:	b082      	sub	sp, #8
   30534:	af00      	add	r7, sp, #0
   30536:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   30538:	687b      	ldr	r3, [r7, #4]
   3053a:	22d8      	movs	r2, #216	; 0xd8
   3053c:	589b      	ldr	r3, [r3, r2]
   3053e:	2b00      	cmp	r3, #0
   30540:	d002      	beq.n	30548 <_http_client_handle_response+0x18>
   30542:	2b01      	cmp	r3, #1
   30544:	d006      	beq.n	30554 <_http_client_handle_response+0x24>
   30546:	e00b      	b.n	30560 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   30548:	687b      	ldr	r3, [r7, #4]
   3054a:	0018      	movs	r0, r3
   3054c:	4b07      	ldr	r3, [pc, #28]	; (3056c <_http_client_handle_response+0x3c>)
   3054e:	4798      	blx	r3
   30550:	0003      	movs	r3, r0
   30552:	e006      	b.n	30562 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   30554:	687b      	ldr	r3, [r7, #4]
   30556:	0018      	movs	r0, r3
   30558:	4b05      	ldr	r3, [pc, #20]	; (30570 <_http_client_handle_response+0x40>)
   3055a:	4798      	blx	r3
   3055c:	0003      	movs	r3, r0
   3055e:	e000      	b.n	30562 <_http_client_handle_response+0x32>
	}
	return 0;
   30560:	2300      	movs	r3, #0
}
   30562:	0018      	movs	r0, r3
   30564:	46bd      	mov	sp, r7
   30566:	b002      	add	sp, #8
   30568:	bd80      	pop	{r7, pc}
   3056a:	46c0      	nop			; (mov r8, r8)
   3056c:	00030575 	.word	0x00030575
   30570:	00030a2d 	.word	0x00030a2d

00030574 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   30574:	b590      	push	{r4, r7, lr}
   30576:	b08b      	sub	sp, #44	; 0x2c
   30578:	af00      	add	r7, sp, #0
   3057a:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   3057c:	687b      	ldr	r3, [r7, #4]
   3057e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30580:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   30582:	4b9a      	ldr	r3, [pc, #616]	; (307ec <_http_client_handle_header+0x278>)
   30584:	681a      	ldr	r2, [r3, #0]
   30586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30588:	0011      	movs	r1, r2
   3058a:	0018      	movs	r0, r3
   3058c:	4b98      	ldr	r3, [pc, #608]	; (307f0 <_http_client_handle_header+0x27c>)
   3058e:	4798      	blx	r3
   30590:	0003      	movs	r3, r0
   30592:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   30594:	69bb      	ldr	r3, [r7, #24]
   30596:	2b00      	cmp	r3, #0
   30598:	d007      	beq.n	305aa <_http_client_handle_header+0x36>
   3059a:	687b      	ldr	r3, [r7, #4]
   3059c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3059e:	687b      	ldr	r3, [r7, #4]
   305a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   305a2:	18d2      	adds	r2, r2, r3
   305a4:	69bb      	ldr	r3, [r7, #24]
   305a6:	429a      	cmp	r2, r3
   305a8:	d807      	bhi.n	305ba <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   305aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   305ac:	687b      	ldr	r3, [r7, #4]
   305ae:	0011      	movs	r1, r2
   305b0:	0018      	movs	r0, r3
   305b2:	4b90      	ldr	r3, [pc, #576]	; (307f4 <_http_client_handle_header+0x280>)
   305b4:	4798      	blx	r3
			return 0;
   305b6:	2300      	movs	r3, #0
   305b8:	e114      	b.n	307e4 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   305ba:	4b8c      	ldr	r3, [pc, #560]	; (307ec <_http_client_handle_header+0x278>)
   305bc:	681c      	ldr	r4, [r3, #0]
   305be:	4b8b      	ldr	r3, [pc, #556]	; (307ec <_http_client_handle_header+0x278>)
   305c0:	681b      	ldr	r3, [r3, #0]
   305c2:	0018      	movs	r0, r3
   305c4:	4b8c      	ldr	r3, [pc, #560]	; (307f8 <_http_client_handle_header+0x284>)
   305c6:	4798      	blx	r3
   305c8:	0002      	movs	r2, r0
   305ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305cc:	0021      	movs	r1, r4
   305ce:	0018      	movs	r0, r3
   305d0:	4b8a      	ldr	r3, [pc, #552]	; (307fc <_http_client_handle_header+0x288>)
   305d2:	4798      	blx	r3
   305d4:	1e03      	subs	r3, r0, #0
   305d6:	d15d      	bne.n	30694 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   305d8:	4b84      	ldr	r3, [pc, #528]	; (307ec <_http_client_handle_header+0x278>)
   305da:	681b      	ldr	r3, [r3, #0]
   305dc:	0018      	movs	r0, r3
   305de:	4b86      	ldr	r3, [pc, #536]	; (307f8 <_http_client_handle_header+0x284>)
   305e0:	4798      	blx	r3
   305e2:	0002      	movs	r2, r0
   305e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   305e6:	189a      	adds	r2, r3, r2
   305e8:	687b      	ldr	r3, [r7, #4]
   305ea:	0011      	movs	r1, r2
   305ec:	0018      	movs	r0, r3
   305ee:	4b81      	ldr	r3, [pc, #516]	; (307f4 <_http_client_handle_header+0x280>)
   305f0:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   305f2:	687b      	ldr	r3, [r7, #4]
   305f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   305f6:	2b00      	cmp	r3, #0
   305f8:	d046      	beq.n	30688 <_http_client_handle_header+0x114>
   305fa:	687b      	ldr	r3, [r7, #4]
   305fc:	22e4      	movs	r2, #228	; 0xe4
   305fe:	5a9b      	ldrh	r3, [r3, r2]
   30600:	2b00      	cmp	r3, #0
   30602:	d041      	beq.n	30688 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   30604:	687b      	ldr	r3, [r7, #4]
   30606:	22dc      	movs	r2, #220	; 0xdc
   30608:	589b      	ldr	r3, [r3, r2]
   3060a:	2b00      	cmp	r3, #0
   3060c:	da19      	bge.n	30642 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   3060e:	687b      	ldr	r3, [r7, #4]
   30610:	22e4      	movs	r2, #228	; 0xe4
   30612:	5a9a      	ldrh	r2, [r3, r2]
   30614:	230c      	movs	r3, #12
   30616:	18fb      	adds	r3, r7, r3
   30618:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   3061a:	230c      	movs	r3, #12
   3061c:	18fb      	adds	r3, r7, r3
   3061e:	2201      	movs	r2, #1
   30620:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   30622:	687b      	ldr	r3, [r7, #4]
   30624:	22e0      	movs	r2, #224	; 0xe0
   30626:	2100      	movs	r1, #0
   30628:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   3062a:	230c      	movs	r3, #12
   3062c:	18fb      	adds	r3, r7, r3
   3062e:	2200      	movs	r2, #0
   30630:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30632:	687b      	ldr	r3, [r7, #4]
   30634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30636:	220c      	movs	r2, #12
   30638:	18ba      	adds	r2, r7, r2
   3063a:	6878      	ldr	r0, [r7, #4]
   3063c:	2102      	movs	r1, #2
   3063e:	4798      	blx	r3
   30640:	e022      	b.n	30688 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   30642:	687b      	ldr	r3, [r7, #4]
   30644:	22dc      	movs	r2, #220	; 0xdc
   30646:	589a      	ldr	r2, [r3, r2]
   30648:	687b      	ldr	r3, [r7, #4]
   3064a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3064c:	429a      	cmp	r2, r3
   3064e:	dd1b      	ble.n	30688 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   30650:	687b      	ldr	r3, [r7, #4]
   30652:	22e4      	movs	r2, #228	; 0xe4
   30654:	5a9a      	ldrh	r2, [r3, r2]
   30656:	230c      	movs	r3, #12
   30658:	18fb      	adds	r3, r7, r3
   3065a:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   3065c:	687b      	ldr	r3, [r7, #4]
   3065e:	22dc      	movs	r2, #220	; 0xdc
   30660:	589b      	ldr	r3, [r3, r2]
   30662:	001a      	movs	r2, r3
   30664:	230c      	movs	r3, #12
   30666:	18fb      	adds	r3, r7, r3
   30668:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3066a:	230c      	movs	r3, #12
   3066c:	18fb      	adds	r3, r7, r3
   3066e:	2200      	movs	r2, #0
   30670:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   30672:	687b      	ldr	r3, [r7, #4]
   30674:	22e0      	movs	r2, #224	; 0xe0
   30676:	2100      	movs	r1, #0
   30678:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3067a:	687b      	ldr	r3, [r7, #4]
   3067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3067e:	220c      	movs	r2, #12
   30680:	18ba      	adds	r2, r7, r2
   30682:	6878      	ldr	r0, [r7, #4]
   30684:	2102      	movs	r1, #2
   30686:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   30688:	687b      	ldr	r3, [r7, #4]
   3068a:	22d8      	movs	r2, #216	; 0xd8
   3068c:	2101      	movs	r1, #1
   3068e:	5099      	str	r1, [r3, r2]
			return 1;
   30690:	2301      	movs	r3, #1
   30692:	e0a7      	b.n	307e4 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   30694:	495a      	ldr	r1, [pc, #360]	; (30800 <_http_client_handle_header+0x28c>)
   30696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30698:	2210      	movs	r2, #16
   3069a:	0018      	movs	r0, r3
   3069c:	4b57      	ldr	r3, [pc, #348]	; (307fc <_http_client_handle_header+0x288>)
   3069e:	4798      	blx	r3
   306a0:	1e03      	subs	r3, r0, #0
   306a2:	d109      	bne.n	306b8 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   306a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306a6:	3310      	adds	r3, #16
   306a8:	0018      	movs	r0, r3
   306aa:	4b56      	ldr	r3, [pc, #344]	; (30804 <_http_client_handle_header+0x290>)
   306ac:	4798      	blx	r3
   306ae:	0001      	movs	r1, r0
   306b0:	687b      	ldr	r3, [r7, #4]
   306b2:	22dc      	movs	r2, #220	; 0xdc
   306b4:	5099      	str	r1, [r3, r2]
   306b6:	e08b      	b.n	307d0 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   306b8:	4953      	ldr	r1, [pc, #332]	; (30808 <_http_client_handle_header+0x294>)
   306ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306bc:	2213      	movs	r2, #19
   306be:	0018      	movs	r0, r3
   306c0:	4b4e      	ldr	r3, [pc, #312]	; (307fc <_http_client_handle_header+0x288>)
   306c2:	4798      	blx	r3
   306c4:	1e03      	subs	r3, r0, #0
   306c6:	d127      	bne.n	30718 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   306c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   306ca:	3313      	adds	r3, #19
   306cc:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   306ce:	e01e      	b.n	3070e <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   306d0:	6a3b      	ldr	r3, [r7, #32]
   306d2:	781b      	ldrb	r3, [r3, #0]
   306d4:	2b20      	cmp	r3, #32
   306d6:	d103      	bne.n	306e0 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   306d8:	6a3b      	ldr	r3, [r7, #32]
   306da:	3301      	adds	r3, #1
   306dc:	623b      	str	r3, [r7, #32]
   306de:	e016      	b.n	3070e <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   306e0:	6a3b      	ldr	r3, [r7, #32]
   306e2:	781b      	ldrb	r3, [r3, #0]
   306e4:	2b43      	cmp	r3, #67	; 0x43
   306e6:	d003      	beq.n	306f0 <_http_client_handle_header+0x17c>
   306e8:	6a3b      	ldr	r3, [r7, #32]
   306ea:	781b      	ldrb	r3, [r3, #0]
   306ec:	2b63      	cmp	r3, #99	; 0x63
   306ee:	d105      	bne.n	306fc <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   306f0:	687b      	ldr	r3, [r7, #4]
   306f2:	21cc      	movs	r1, #204	; 0xcc
   306f4:	2201      	movs	r2, #1
   306f6:	4252      	negs	r2, r2
   306f8:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   306fa:	e069      	b.n	307d0 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   306fc:	2386      	movs	r3, #134	; 0x86
   306fe:	425a      	negs	r2, r3
   30700:	687b      	ldr	r3, [r7, #4]
   30702:	0011      	movs	r1, r2
   30704:	0018      	movs	r0, r3
   30706:	4b41      	ldr	r3, [pc, #260]	; (3080c <_http_client_handle_header+0x298>)
   30708:	4798      	blx	r3
					return 0;
   3070a:	2300      	movs	r3, #0
   3070c:	e06a      	b.n	307e4 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3070e:	69ba      	ldr	r2, [r7, #24]
   30710:	6a3b      	ldr	r3, [r7, #32]
   30712:	429a      	cmp	r2, r3
   30714:	d8dc      	bhi.n	306d0 <_http_client_handle_header+0x15c>
   30716:	e05b      	b.n	307d0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   30718:	493d      	ldr	r1, [pc, #244]	; (30810 <_http_client_handle_header+0x29c>)
   3071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3071c:	220c      	movs	r2, #12
   3071e:	0018      	movs	r0, r3
   30720:	4b36      	ldr	r3, [pc, #216]	; (307fc <_http_client_handle_header+0x288>)
   30722:	4798      	blx	r3
   30724:	1e03      	subs	r3, r0, #0
   30726:	d126      	bne.n	30776 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   30728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3072a:	330c      	adds	r3, #12
   3072c:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3072e:	e01d      	b.n	3076c <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   30730:	69fb      	ldr	r3, [r7, #28]
   30732:	781b      	ldrb	r3, [r3, #0]
   30734:	2b20      	cmp	r3, #32
   30736:	d103      	bne.n	30740 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   30738:	69fb      	ldr	r3, [r7, #28]
   3073a:	3301      	adds	r3, #1
   3073c:	61fb      	str	r3, [r7, #28]
   3073e:	e015      	b.n	3076c <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   30740:	69fb      	ldr	r3, [r7, #28]
   30742:	781b      	ldrb	r3, [r3, #0]
   30744:	2b4b      	cmp	r3, #75	; 0x4b
   30746:	d003      	beq.n	30750 <_http_client_handle_header+0x1dc>
   30748:	69fb      	ldr	r3, [r7, #28]
   3074a:	781b      	ldrb	r3, [r3, #0]
   3074c:	2b6b      	cmp	r3, #107	; 0x6b
   3074e:	d106      	bne.n	3075e <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   30750:	687b      	ldr	r3, [r7, #4]
   30752:	2241      	movs	r2, #65	; 0x41
   30754:	5c99      	ldrb	r1, [r3, r2]
   30756:	2002      	movs	r0, #2
   30758:	4301      	orrs	r1, r0
   3075a:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   3075c:	e038      	b.n	307d0 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   3075e:	687b      	ldr	r3, [r7, #4]
   30760:	2241      	movs	r2, #65	; 0x41
   30762:	5c99      	ldrb	r1, [r3, r2]
   30764:	2002      	movs	r0, #2
   30766:	4381      	bics	r1, r0
   30768:	5499      	strb	r1, [r3, r2]
				break;
   3076a:	e031      	b.n	307d0 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3076c:	69ba      	ldr	r2, [r7, #24]
   3076e:	69fb      	ldr	r3, [r7, #28]
   30770:	429a      	cmp	r2, r3
   30772:	d8dd      	bhi.n	30730 <_http_client_handle_header+0x1bc>
   30774:	e02c      	b.n	307d0 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   30776:	4927      	ldr	r1, [pc, #156]	; (30814 <_http_client_handle_header+0x2a0>)
   30778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3077a:	2205      	movs	r2, #5
   3077c:	0018      	movs	r0, r3
   3077e:	4b1f      	ldr	r3, [pc, #124]	; (307fc <_http_client_handle_header+0x288>)
   30780:	4798      	blx	r3
   30782:	1e03      	subs	r3, r0, #0
   30784:	d124      	bne.n	307d0 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   30786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   30788:	3309      	adds	r3, #9
   3078a:	0018      	movs	r0, r3
   3078c:	4b1d      	ldr	r3, [pc, #116]	; (30804 <_http_client_handle_header+0x290>)
   3078e:	4798      	blx	r3
   30790:	0003      	movs	r3, r0
   30792:	b299      	uxth	r1, r3
   30794:	687b      	ldr	r3, [r7, #4]
   30796:	22e4      	movs	r2, #228	; 0xe4
   30798:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   3079a:	687b      	ldr	r3, [r7, #4]
   3079c:	22dc      	movs	r2, #220	; 0xdc
   3079e:	2100      	movs	r1, #0
   307a0:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   307a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   307a4:	3305      	adds	r3, #5
   307a6:	781b      	ldrb	r3, [r3, #0]
   307a8:	2b31      	cmp	r3, #49	; 0x31
   307aa:	d804      	bhi.n	307b6 <_http_client_handle_header+0x242>
   307ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   307ae:	3307      	adds	r3, #7
   307b0:	781b      	ldrb	r3, [r3, #0]
   307b2:	2b30      	cmp	r3, #48	; 0x30
   307b4:	d906      	bls.n	307c4 <_http_client_handle_header+0x250>
				module->permanent = 1;
   307b6:	687b      	ldr	r3, [r7, #4]
   307b8:	2241      	movs	r2, #65	; 0x41
   307ba:	5c99      	ldrb	r1, [r3, r2]
   307bc:	2002      	movs	r0, #2
   307be:	4301      	orrs	r1, r0
   307c0:	5499      	strb	r1, [r3, r2]
   307c2:	e005      	b.n	307d0 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   307c4:	687b      	ldr	r3, [r7, #4]
   307c6:	2241      	movs	r2, #65	; 0x41
   307c8:	5c99      	ldrb	r1, [r3, r2]
   307ca:	2002      	movs	r0, #2
   307cc:	4381      	bics	r1, r0
   307ce:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   307d0:	4b06      	ldr	r3, [pc, #24]	; (307ec <_http_client_handle_header+0x278>)
   307d2:	681b      	ldr	r3, [r3, #0]
   307d4:	0018      	movs	r0, r3
   307d6:	4b08      	ldr	r3, [pc, #32]	; (307f8 <_http_client_handle_header+0x284>)
   307d8:	4798      	blx	r3
   307da:	0002      	movs	r2, r0
   307dc:	69bb      	ldr	r3, [r7, #24]
   307de:	189b      	adds	r3, r3, r2
   307e0:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   307e2:	e6ce      	b.n	30582 <_http_client_handle_header+0xe>
	}
}
   307e4:	0018      	movs	r0, r3
   307e6:	46bd      	mov	sp, r7
   307e8:	b00b      	add	sp, #44	; 0x2c
   307ea:	bd90      	pop	{r4, r7, pc}
   307ec:	2000012c 	.word	0x2000012c
   307f0:	000335b9 	.word	0x000335b9
   307f4:	00030bd9 	.word	0x00030bd9
   307f8:	0003353b 	.word	0x0003353b
   307fc:	00033549 	.word	0x00033549
   30800:	0003820c 	.word	0x0003820c
   30804:	000330ed 	.word	0x000330ed
   30808:	00038230 	.word	0x00038230
   3080c:	0002fbf1 	.word	0x0002fbf1
   30810:	00038244 	.word	0x00038244
   30814:	00038254 	.word	0x00038254

00030818 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   30818:	b580      	push	{r7, lr}
   3081a:	b088      	sub	sp, #32
   3081c:	af00      	add	r7, sp, #0
   3081e:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   30820:	687b      	ldr	r3, [r7, #4]
   30822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30824:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   30826:	2300      	movs	r3, #0
   30828:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   3082a:	687b      	ldr	r3, [r7, #4]
   3082c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3082e:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   30830:	687b      	ldr	r3, [r7, #4]
   30832:	22e0      	movs	r2, #224	; 0xe0
   30834:	589b      	ldr	r3, [r3, r2]
   30836:	2b00      	cmp	r3, #0
   30838:	db71      	blt.n	3091e <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   3083a:	687b      	ldr	r3, [r7, #4]
   3083c:	22e0      	movs	r2, #224	; 0xe0
   3083e:	589b      	ldr	r3, [r3, r2]
   30840:	2b00      	cmp	r3, #0
   30842:	d134      	bne.n	308ae <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   30844:	687b      	ldr	r3, [r7, #4]
   30846:	22d8      	movs	r2, #216	; 0xd8
   30848:	2100      	movs	r1, #0
   3084a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   3084c:	687b      	ldr	r3, [r7, #4]
   3084e:	22e4      	movs	r2, #228	; 0xe4
   30850:	2100      	movs	r1, #0
   30852:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   30854:	2308      	movs	r3, #8
   30856:	18fb      	adds	r3, r7, r3
   30858:	2201      	movs	r2, #1
   3085a:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   3085c:	2308      	movs	r3, #8
   3085e:	18fb      	adds	r3, r7, r3
   30860:	2200      	movs	r2, #0
   30862:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   30864:	2308      	movs	r3, #8
   30866:	18fb      	adds	r3, r7, r3
   30868:	2200      	movs	r2, #0
   3086a:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   3086c:	687b      	ldr	r3, [r7, #4]
   3086e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30870:	2b00      	cmp	r3, #0
   30872:	d006      	beq.n	30882 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   30874:	687b      	ldr	r3, [r7, #4]
   30876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30878:	2208      	movs	r2, #8
   3087a:	18ba      	adds	r2, r7, r2
   3087c:	6878      	ldr	r0, [r7, #4]
   3087e:	2103      	movs	r1, #3
   30880:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   30882:	687b      	ldr	r3, [r7, #4]
   30884:	2241      	movs	r2, #65	; 0x41
   30886:	5c9b      	ldrb	r3, [r3, r2]
   30888:	2202      	movs	r2, #2
   3088a:	4013      	ands	r3, r2
   3088c:	b2db      	uxtb	r3, r3
   3088e:	2b00      	cmp	r3, #0
   30890:	d105      	bne.n	3089e <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   30892:	687b      	ldr	r3, [r7, #4]
   30894:	2100      	movs	r1, #0
   30896:	0018      	movs	r0, r3
   30898:	4b62      	ldr	r3, [pc, #392]	; (30a24 <_http_client_read_chuked_entity+0x20c>)
   3089a:	4798      	blx	r3
					return;
   3089c:	e0bf      	b.n	30a1e <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   3089e:	697b      	ldr	r3, [r7, #20]
   308a0:	1c9a      	adds	r2, r3, #2
   308a2:	687b      	ldr	r3, [r7, #4]
   308a4:	0011      	movs	r1, r2
   308a6:	0018      	movs	r0, r3
   308a8:	4b5f      	ldr	r3, [pc, #380]	; (30a28 <_http_client_read_chuked_entity+0x210>)
   308aa:	4798      	blx	r3
   308ac:	e0b2      	b.n	30a14 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   308ae:	687b      	ldr	r3, [r7, #4]
   308b0:	22e0      	movs	r2, #224	; 0xe0
   308b2:	589a      	ldr	r2, [r3, r2]
   308b4:	69fb      	ldr	r3, [r7, #28]
   308b6:	429a      	cmp	r2, r3
   308b8:	dd00      	ble.n	308bc <_http_client_read_chuked_entity+0xa4>
   308ba:	e0ab      	b.n	30a14 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   308bc:	687b      	ldr	r3, [r7, #4]
   308be:	22e0      	movs	r2, #224	; 0xe0
   308c0:	589b      	ldr	r3, [r3, r2]
   308c2:	001a      	movs	r2, r3
   308c4:	2308      	movs	r3, #8
   308c6:	18fb      	adds	r3, r7, r3
   308c8:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   308ca:	2308      	movs	r3, #8
   308cc:	18fb      	adds	r3, r7, r3
   308ce:	697a      	ldr	r2, [r7, #20]
   308d0:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   308d2:	2308      	movs	r3, #8
   308d4:	18fb      	adds	r3, r7, r3
   308d6:	2200      	movs	r2, #0
   308d8:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   308da:	687b      	ldr	r3, [r7, #4]
   308dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   308de:	2b00      	cmp	r3, #0
   308e0:	d006      	beq.n	308f0 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   308e2:	687b      	ldr	r3, [r7, #4]
   308e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   308e6:	2208      	movs	r2, #8
   308e8:	18ba      	adds	r2, r7, r2
   308ea:	6878      	ldr	r0, [r7, #4]
   308ec:	2103      	movs	r1, #3
   308ee:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   308f0:	687b      	ldr	r3, [r7, #4]
   308f2:	22e0      	movs	r2, #224	; 0xe0
   308f4:	589b      	ldr	r3, [r3, r2]
   308f6:	3302      	adds	r3, #2
   308f8:	697a      	ldr	r2, [r7, #20]
   308fa:	18d2      	adds	r2, r2, r3
   308fc:	687b      	ldr	r3, [r7, #4]
   308fe:	0011      	movs	r1, r2
   30900:	0018      	movs	r0, r3
   30902:	4b49      	ldr	r3, [pc, #292]	; (30a28 <_http_client_read_chuked_entity+0x210>)
   30904:	4798      	blx	r3
				length = (int)module->recved_size;
   30906:	687b      	ldr	r3, [r7, #4]
   30908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3090a:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   3090c:	687b      	ldr	r3, [r7, #4]
   3090e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30910:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   30912:	687b      	ldr	r3, [r7, #4]
   30914:	21e0      	movs	r1, #224	; 0xe0
   30916:	2201      	movs	r2, #1
   30918:	4252      	negs	r2, r2
   3091a:	505a      	str	r2, [r3, r1]
   3091c:	e07a      	b.n	30a14 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   3091e:	687b      	ldr	r3, [r7, #4]
   30920:	22e0      	movs	r2, #224	; 0xe0
   30922:	2100      	movs	r1, #0
   30924:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   30926:	e05a      	b.n	309de <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   30928:	697b      	ldr	r3, [r7, #20]
   3092a:	781b      	ldrb	r3, [r3, #0]
   3092c:	2b0a      	cmp	r3, #10
   3092e:	d106      	bne.n	3093e <_http_client_read_chuked_entity+0x126>
					buffer++;
   30930:	697b      	ldr	r3, [r7, #20]
   30932:	3301      	adds	r3, #1
   30934:	617b      	str	r3, [r7, #20]
					length--;
   30936:	69fb      	ldr	r3, [r7, #28]
   30938:	3b01      	subs	r3, #1
   3093a:	61fb      	str	r3, [r7, #28]
					break;
   3093c:	e052      	b.n	309e4 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   3093e:	69bb      	ldr	r3, [r7, #24]
   30940:	2b00      	cmp	r3, #0
   30942:	d145      	bne.n	309d0 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   30944:	697b      	ldr	r3, [r7, #20]
   30946:	781b      	ldrb	r3, [r3, #0]
   30948:	2b2f      	cmp	r3, #47	; 0x2f
   3094a:	d910      	bls.n	3096e <_http_client_read_chuked_entity+0x156>
   3094c:	697b      	ldr	r3, [r7, #20]
   3094e:	781b      	ldrb	r3, [r3, #0]
   30950:	2b39      	cmp	r3, #57	; 0x39
   30952:	d80c      	bhi.n	3096e <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   30954:	687b      	ldr	r3, [r7, #4]
   30956:	22e0      	movs	r2, #224	; 0xe0
   30958:	589b      	ldr	r3, [r3, r2]
   3095a:	011b      	lsls	r3, r3, #4
   3095c:	697a      	ldr	r2, [r7, #20]
   3095e:	7812      	ldrb	r2, [r2, #0]
   30960:	189b      	adds	r3, r3, r2
   30962:	3b30      	subs	r3, #48	; 0x30
   30964:	001a      	movs	r2, r3
   30966:	687b      	ldr	r3, [r7, #4]
   30968:	21e0      	movs	r1, #224	; 0xe0
   3096a:	505a      	str	r2, [r3, r1]
   3096c:	e031      	b.n	309d2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   3096e:	697b      	ldr	r3, [r7, #20]
   30970:	781b      	ldrb	r3, [r3, #0]
   30972:	2b60      	cmp	r3, #96	; 0x60
   30974:	d910      	bls.n	30998 <_http_client_read_chuked_entity+0x180>
   30976:	697b      	ldr	r3, [r7, #20]
   30978:	781b      	ldrb	r3, [r3, #0]
   3097a:	2b66      	cmp	r3, #102	; 0x66
   3097c:	d80c      	bhi.n	30998 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   3097e:	687b      	ldr	r3, [r7, #4]
   30980:	22e0      	movs	r2, #224	; 0xe0
   30982:	589b      	ldr	r3, [r3, r2]
   30984:	011b      	lsls	r3, r3, #4
   30986:	697a      	ldr	r2, [r7, #20]
   30988:	7812      	ldrb	r2, [r2, #0]
   3098a:	189b      	adds	r3, r3, r2
   3098c:	3b61      	subs	r3, #97	; 0x61
   3098e:	001a      	movs	r2, r3
   30990:	687b      	ldr	r3, [r7, #4]
   30992:	21e0      	movs	r1, #224	; 0xe0
   30994:	505a      	str	r2, [r3, r1]
   30996:	e01c      	b.n	309d2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   30998:	697b      	ldr	r3, [r7, #20]
   3099a:	781b      	ldrb	r3, [r3, #0]
   3099c:	2b40      	cmp	r3, #64	; 0x40
   3099e:	d910      	bls.n	309c2 <_http_client_read_chuked_entity+0x1aa>
   309a0:	697b      	ldr	r3, [r7, #20]
   309a2:	781b      	ldrb	r3, [r3, #0]
   309a4:	2b46      	cmp	r3, #70	; 0x46
   309a6:	d80c      	bhi.n	309c2 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   309a8:	687b      	ldr	r3, [r7, #4]
   309aa:	22e0      	movs	r2, #224	; 0xe0
   309ac:	589b      	ldr	r3, [r3, r2]
   309ae:	011b      	lsls	r3, r3, #4
   309b0:	697a      	ldr	r2, [r7, #20]
   309b2:	7812      	ldrb	r2, [r2, #0]
   309b4:	189b      	adds	r3, r3, r2
   309b6:	3b41      	subs	r3, #65	; 0x41
   309b8:	001a      	movs	r2, r3
   309ba:	687b      	ldr	r3, [r7, #4]
   309bc:	21e0      	movs	r1, #224	; 0xe0
   309be:	505a      	str	r2, [r3, r1]
   309c0:	e007      	b.n	309d2 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   309c2:	697b      	ldr	r3, [r7, #20]
   309c4:	781b      	ldrb	r3, [r3, #0]
   309c6:	2b3b      	cmp	r3, #59	; 0x3b
   309c8:	d103      	bne.n	309d2 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   309ca:	2301      	movs	r3, #1
   309cc:	61bb      	str	r3, [r7, #24]
   309ce:	e000      	b.n	309d2 <_http_client_read_chuked_entity+0x1ba>
					continue;
   309d0:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   309d2:	697b      	ldr	r3, [r7, #20]
   309d4:	3301      	adds	r3, #1
   309d6:	617b      	str	r3, [r7, #20]
   309d8:	69fb      	ldr	r3, [r7, #28]
   309da:	3b01      	subs	r3, #1
   309dc:	61fb      	str	r3, [r7, #28]
   309de:	69fb      	ldr	r3, [r7, #28]
   309e0:	2b00      	cmp	r3, #0
   309e2:	dca1      	bgt.n	30928 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   309e4:	687b      	ldr	r3, [r7, #4]
   309e6:	22e0      	movs	r2, #224	; 0xe0
   309e8:	589a      	ldr	r2, [r3, r2]
   309ea:	687b      	ldr	r3, [r7, #4]
   309ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   309ee:	429a      	cmp	r2, r3
   309f0:	dd07      	ble.n	30a02 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   309f2:	238b      	movs	r3, #139	; 0x8b
   309f4:	425a      	negs	r2, r3
   309f6:	687b      	ldr	r3, [r7, #4]
   309f8:	0011      	movs	r1, r2
   309fa:	0018      	movs	r0, r3
   309fc:	4b09      	ldr	r3, [pc, #36]	; (30a24 <_http_client_read_chuked_entity+0x20c>)
   309fe:	4798      	blx	r3
				return;
   30a00:	e00d      	b.n	30a1e <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   30a02:	69fb      	ldr	r3, [r7, #28]
   30a04:	2b00      	cmp	r3, #0
   30a06:	d105      	bne.n	30a14 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   30a08:	687b      	ldr	r3, [r7, #4]
   30a0a:	21e0      	movs	r1, #224	; 0xe0
   30a0c:	2201      	movs	r2, #1
   30a0e:	4252      	negs	r2, r2
   30a10:	505a      	str	r2, [r3, r1]
				return;
   30a12:	e004      	b.n	30a1e <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   30a14:	687b      	ldr	r3, [r7, #4]
   30a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30a18:	2b00      	cmp	r3, #0
   30a1a:	d000      	beq.n	30a1e <_http_client_read_chuked_entity+0x206>
   30a1c:	e708      	b.n	30830 <_http_client_read_chuked_entity+0x18>
}
   30a1e:	46bd      	mov	sp, r7
   30a20:	b008      	add	sp, #32
   30a22:	bd80      	pop	{r7, pc}
   30a24:	0002fbf1 	.word	0x0002fbf1
   30a28:	00030bd9 	.word	0x00030bd9

00030a2c <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   30a2c:	b580      	push	{r7, lr}
   30a2e:	b086      	sub	sp, #24
   30a30:	af00      	add	r7, sp, #0
   30a32:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   30a34:	687b      	ldr	r3, [r7, #4]
   30a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30a38:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   30a3a:	687b      	ldr	r3, [r7, #4]
   30a3c:	22dc      	movs	r2, #220	; 0xdc
   30a3e:	589b      	ldr	r3, [r3, r2]
   30a40:	2b00      	cmp	r3, #0
   30a42:	db58      	blt.n	30af6 <_http_client_handle_entity+0xca>
   30a44:	687b      	ldr	r3, [r7, #4]
   30a46:	22dc      	movs	r2, #220	; 0xdc
   30a48:	589a      	ldr	r2, [r3, r2]
   30a4a:	687b      	ldr	r3, [r7, #4]
   30a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   30a4e:	429a      	cmp	r2, r3
   30a50:	dc51      	bgt.n	30af6 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   30a52:	687b      	ldr	r3, [r7, #4]
   30a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30a56:	0019      	movs	r1, r3
   30a58:	687b      	ldr	r3, [r7, #4]
   30a5a:	22dc      	movs	r2, #220	; 0xdc
   30a5c:	589b      	ldr	r3, [r3, r2]
   30a5e:	4299      	cmp	r1, r3
   30a60:	da00      	bge.n	30a64 <_http_client_handle_entity+0x38>
   30a62:	e0a9      	b.n	30bb8 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   30a64:	687b      	ldr	r3, [r7, #4]
   30a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30a68:	2b00      	cmp	r3, #0
   30a6a:	d020      	beq.n	30aae <_http_client_handle_entity+0x82>
   30a6c:	687b      	ldr	r3, [r7, #4]
   30a6e:	22e4      	movs	r2, #228	; 0xe4
   30a70:	5a9b      	ldrh	r3, [r3, r2]
   30a72:	2b00      	cmp	r3, #0
   30a74:	d01b      	beq.n	30aae <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   30a76:	687b      	ldr	r3, [r7, #4]
   30a78:	22e4      	movs	r2, #228	; 0xe4
   30a7a:	5a9a      	ldrh	r2, [r3, r2]
   30a7c:	2308      	movs	r3, #8
   30a7e:	18fb      	adds	r3, r7, r3
   30a80:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   30a82:	2308      	movs	r3, #8
   30a84:	18fb      	adds	r3, r7, r3
   30a86:	2200      	movs	r2, #0
   30a88:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   30a8a:	687b      	ldr	r3, [r7, #4]
   30a8c:	22dc      	movs	r2, #220	; 0xdc
   30a8e:	589b      	ldr	r3, [r3, r2]
   30a90:	001a      	movs	r2, r3
   30a92:	2308      	movs	r3, #8
   30a94:	18fb      	adds	r3, r7, r3
   30a96:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   30a98:	2308      	movs	r3, #8
   30a9a:	18fb      	adds	r3, r7, r3
   30a9c:	697a      	ldr	r2, [r7, #20]
   30a9e:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   30aa0:	687b      	ldr	r3, [r7, #4]
   30aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30aa4:	2208      	movs	r2, #8
   30aa6:	18ba      	adds	r2, r7, r2
   30aa8:	6878      	ldr	r0, [r7, #4]
   30aaa:	2102      	movs	r1, #2
   30aac:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   30aae:	687b      	ldr	r3, [r7, #4]
   30ab0:	22d8      	movs	r2, #216	; 0xd8
   30ab2:	2100      	movs	r1, #0
   30ab4:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   30ab6:	687b      	ldr	r3, [r7, #4]
   30ab8:	22e4      	movs	r2, #228	; 0xe4
   30aba:	2100      	movs	r1, #0
   30abc:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   30abe:	687b      	ldr	r3, [r7, #4]
   30ac0:	2241      	movs	r2, #65	; 0x41
   30ac2:	5c9b      	ldrb	r3, [r3, r2]
   30ac4:	2202      	movs	r2, #2
   30ac6:	4013      	ands	r3, r2
   30ac8:	b2db      	uxtb	r3, r3
   30aca:	2b00      	cmp	r3, #0
   30acc:	d105      	bne.n	30ada <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   30ace:	687b      	ldr	r3, [r7, #4]
   30ad0:	2100      	movs	r1, #0
   30ad2:	0018      	movs	r0, r3
   30ad4:	4b3b      	ldr	r3, [pc, #236]	; (30bc4 <_http_client_handle_entity+0x198>)
   30ad6:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   30ad8:	e06e      	b.n	30bb8 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   30ada:	687b      	ldr	r3, [r7, #4]
   30adc:	22dc      	movs	r2, #220	; 0xdc
   30ade:	589b      	ldr	r3, [r3, r2]
   30ae0:	001a      	movs	r2, r3
   30ae2:	697b      	ldr	r3, [r7, #20]
   30ae4:	189a      	adds	r2, r3, r2
   30ae6:	687b      	ldr	r3, [r7, #4]
   30ae8:	0011      	movs	r1, r2
   30aea:	0018      	movs	r0, r3
   30aec:	4b36      	ldr	r3, [pc, #216]	; (30bc8 <_http_client_handle_entity+0x19c>)
   30aee:	4798      	blx	r3
				return module->recved_size;
   30af0:	687b      	ldr	r3, [r7, #4]
   30af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30af4:	e061      	b.n	30bba <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   30af6:	687b      	ldr	r3, [r7, #4]
   30af8:	22dc      	movs	r2, #220	; 0xdc
   30afa:	589b      	ldr	r3, [r3, r2]
   30afc:	2b00      	cmp	r3, #0
   30afe:	db57      	blt.n	30bb0 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   30b00:	687b      	ldr	r3, [r7, #4]
   30b02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30b04:	2308      	movs	r3, #8
   30b06:	18fb      	adds	r3, r7, r3
   30b08:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   30b0a:	2308      	movs	r3, #8
   30b0c:	18fb      	adds	r3, r7, r3
   30b0e:	697a      	ldr	r2, [r7, #20]
   30b10:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   30b12:	687b      	ldr	r3, [r7, #4]
   30b14:	22e0      	movs	r2, #224	; 0xe0
   30b16:	589a      	ldr	r2, [r3, r2]
   30b18:	687b      	ldr	r3, [r7, #4]
   30b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30b1c:	18d2      	adds	r2, r2, r3
   30b1e:	687b      	ldr	r3, [r7, #4]
   30b20:	21e0      	movs	r1, #224	; 0xe0
   30b22:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   30b24:	687b      	ldr	r3, [r7, #4]
   30b26:	22dc      	movs	r2, #220	; 0xdc
   30b28:	589a      	ldr	r2, [r3, r2]
   30b2a:	687b      	ldr	r3, [r7, #4]
   30b2c:	21e0      	movs	r1, #224	; 0xe0
   30b2e:	585b      	ldr	r3, [r3, r1]
   30b30:	429a      	cmp	r2, r3
   30b32:	dc0c      	bgt.n	30b4e <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   30b34:	687b      	ldr	r3, [r7, #4]
   30b36:	22d8      	movs	r2, #216	; 0xd8
   30b38:	2100      	movs	r1, #0
   30b3a:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   30b3c:	687b      	ldr	r3, [r7, #4]
   30b3e:	22e4      	movs	r2, #228	; 0xe4
   30b40:	2100      	movs	r1, #0
   30b42:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   30b44:	2308      	movs	r3, #8
   30b46:	18fb      	adds	r3, r7, r3
   30b48:	2201      	movs	r2, #1
   30b4a:	721a      	strb	r2, [r3, #8]
   30b4c:	e003      	b.n	30b56 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   30b4e:	2308      	movs	r3, #8
   30b50:	18fb      	adds	r3, r7, r3
   30b52:	2200      	movs	r2, #0
   30b54:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   30b56:	687b      	ldr	r3, [r7, #4]
   30b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b5a:	2b00      	cmp	r3, #0
   30b5c:	d006      	beq.n	30b6c <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   30b5e:	687b      	ldr	r3, [r7, #4]
   30b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b62:	2208      	movs	r2, #8
   30b64:	18ba      	adds	r2, r7, r2
   30b66:	6878      	ldr	r0, [r7, #4]
   30b68:	2103      	movs	r1, #3
   30b6a:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   30b6c:	2308      	movs	r3, #8
   30b6e:	18fb      	adds	r3, r7, r3
   30b70:	7a1b      	ldrb	r3, [r3, #8]
   30b72:	2b01      	cmp	r3, #1
   30b74:	d112      	bne.n	30b9c <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   30b76:	687b      	ldr	r3, [r7, #4]
   30b78:	2241      	movs	r2, #65	; 0x41
   30b7a:	5c9b      	ldrb	r3, [r3, r2]
   30b7c:	2202      	movs	r2, #2
   30b7e:	4013      	ands	r3, r2
   30b80:	b2db      	uxtb	r3, r3
   30b82:	2b00      	cmp	r3, #0
   30b84:	d10a      	bne.n	30b9c <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   30b86:	4b11      	ldr	r3, [pc, #68]	; (30bcc <_http_client_handle_entity+0x1a0>)
   30b88:	0018      	movs	r0, r3
   30b8a:	4b11      	ldr	r3, [pc, #68]	; (30bd0 <_http_client_handle_entity+0x1a4>)
   30b8c:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   30b8e:	687b      	ldr	r3, [r7, #4]
   30b90:	2100      	movs	r1, #0
   30b92:	0018      	movs	r0, r3
   30b94:	4b0b      	ldr	r3, [pc, #44]	; (30bc4 <_http_client_handle_entity+0x198>)
   30b96:	4798      	blx	r3
					return 0;
   30b98:	2300      	movs	r3, #0
   30b9a:	e00e      	b.n	30bba <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   30b9c:	687b      	ldr	r3, [r7, #4]
   30b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30ba0:	697a      	ldr	r2, [r7, #20]
   30ba2:	18d2      	adds	r2, r2, r3
   30ba4:	687b      	ldr	r3, [r7, #4]
   30ba6:	0011      	movs	r1, r2
   30ba8:	0018      	movs	r0, r3
   30baa:	4b07      	ldr	r3, [pc, #28]	; (30bc8 <_http_client_handle_entity+0x19c>)
   30bac:	4798      	blx	r3
   30bae:	e003      	b.n	30bb8 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   30bb0:	687b      	ldr	r3, [r7, #4]
   30bb2:	0018      	movs	r0, r3
   30bb4:	4b07      	ldr	r3, [pc, #28]	; (30bd4 <_http_client_handle_entity+0x1a8>)
   30bb6:	4798      	blx	r3
		}
	}

	return 0;
   30bb8:	2300      	movs	r3, #0
}
   30bba:	0018      	movs	r0, r3
   30bbc:	46bd      	mov	sp, r7
   30bbe:	b006      	add	sp, #24
   30bc0:	bd80      	pop	{r7, pc}
   30bc2:	46c0      	nop			; (mov r8, r8)
   30bc4:	0002fbf1 	.word	0x0002fbf1
   30bc8:	00030bd9 	.word	0x00030bd9
   30bcc:	0003825c 	.word	0x0003825c
   30bd0:	000333c1 	.word	0x000333c1
   30bd4:	00030819 	.word	0x00030819

00030bd8 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   30bd8:	b580      	push	{r7, lr}
   30bda:	b084      	sub	sp, #16
   30bdc:	af00      	add	r7, sp, #0
   30bde:	6078      	str	r0, [r7, #4]
   30be0:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   30be2:	687b      	ldr	r3, [r7, #4]
   30be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   30be6:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   30be8:	687b      	ldr	r3, [r7, #4]
   30bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   30bec:	001a      	movs	r2, r3
   30bee:	683b      	ldr	r3, [r7, #0]
   30bf0:	1ad2      	subs	r2, r2, r3
   30bf2:	68fb      	ldr	r3, [r7, #12]
   30bf4:	18d3      	adds	r3, r2, r3
   30bf6:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   30bf8:	68bb      	ldr	r3, [r7, #8]
   30bfa:	2b00      	cmp	r3, #0
   30bfc:	dd09      	ble.n	30c12 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   30bfe:	68ba      	ldr	r2, [r7, #8]
   30c00:	6839      	ldr	r1, [r7, #0]
   30c02:	68fb      	ldr	r3, [r7, #12]
   30c04:	0018      	movs	r0, r3
   30c06:	4b06      	ldr	r3, [pc, #24]	; (30c20 <_http_client_move_buffer+0x48>)
   30c08:	4798      	blx	r3
		module->recved_size = remain;
   30c0a:	68ba      	ldr	r2, [r7, #8]
   30c0c:	687b      	ldr	r3, [r7, #4]
   30c0e:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   30c10:	e002      	b.n	30c18 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   30c12:	687b      	ldr	r3, [r7, #4]
   30c14:	2200      	movs	r2, #0
   30c16:	645a      	str	r2, [r3, #68]	; 0x44
}
   30c18:	46c0      	nop			; (mov r8, r8)
   30c1a:	46bd      	mov	sp, r7
   30c1c:	b004      	add	sp, #16
   30c1e:	bd80      	pop	{r7, pc}
   30c20:	0003317b 	.word	0x0003317b

00030c24 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   30c24:	b580      	push	{r7, lr}
   30c26:	b084      	sub	sp, #16
   30c28:	af00      	add	r7, sp, #0
   30c2a:	60f8      	str	r0, [r7, #12]
   30c2c:	60b9      	str	r1, [r7, #8]
   30c2e:	607a      	str	r2, [r7, #4]
   30c30:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   30c32:	68fb      	ldr	r3, [r7, #12]
   30c34:	687a      	ldr	r2, [r7, #4]
   30c36:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   30c38:	68fb      	ldr	r3, [r7, #12]
   30c3a:	68ba      	ldr	r2, [r7, #8]
   30c3c:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   30c3e:	68fb      	ldr	r3, [r7, #12]
   30c40:	2200      	movs	r2, #0
   30c42:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   30c44:	68fb      	ldr	r3, [r7, #12]
   30c46:	683a      	ldr	r2, [r7, #0]
   30c48:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   30c4a:	68fb      	ldr	r3, [r7, #12]
   30c4c:	69ba      	ldr	r2, [r7, #24]
   30c4e:	60da      	str	r2, [r3, #12]
}
   30c50:	46c0      	nop			; (mov r8, r8)
   30c52:	46bd      	mov	sp, r7
   30c54:	b004      	add	sp, #16
   30c56:	bd80      	pop	{r7, pc}

00030c58 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   30c58:	b580      	push	{r7, lr}
   30c5a:	b084      	sub	sp, #16
   30c5c:	af00      	add	r7, sp, #0
   30c5e:	6078      	str	r0, [r7, #4]
   30c60:	000a      	movs	r2, r1
   30c62:	1cfb      	adds	r3, r7, #3
   30c64:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   30c66:	687b      	ldr	r3, [r7, #4]
   30c68:	681a      	ldr	r2, [r3, #0]
   30c6a:	687b      	ldr	r3, [r7, #4]
   30c6c:	685b      	ldr	r3, [r3, #4]
   30c6e:	1ad3      	subs	r3, r2, r3
   30c70:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   30c72:	68fb      	ldr	r3, [r7, #12]
   30c74:	2b00      	cmp	r3, #0
   30c76:	dc03      	bgt.n	30c80 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   30c78:	687b      	ldr	r3, [r7, #4]
   30c7a:	0018      	movs	r0, r3
   30c7c:	4b08      	ldr	r3, [pc, #32]	; (30ca0 <stream_writer_send_8+0x48>)
   30c7e:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   30c80:	687b      	ldr	r3, [r7, #4]
   30c82:	6919      	ldr	r1, [r3, #16]
   30c84:	687b      	ldr	r3, [r7, #4]
   30c86:	685b      	ldr	r3, [r3, #4]
   30c88:	1c58      	adds	r0, r3, #1
   30c8a:	687a      	ldr	r2, [r7, #4]
   30c8c:	6050      	str	r0, [r2, #4]
   30c8e:	18cb      	adds	r3, r1, r3
   30c90:	1cfa      	adds	r2, r7, #3
   30c92:	7812      	ldrb	r2, [r2, #0]
   30c94:	701a      	strb	r2, [r3, #0]
}
   30c96:	46c0      	nop			; (mov r8, r8)
   30c98:	46bd      	mov	sp, r7
   30c9a:	b004      	add	sp, #16
   30c9c:	bd80      	pop	{r7, pc}
   30c9e:	46c0      	nop			; (mov r8, r8)
   30ca0:	00030ce1 	.word	0x00030ce1

00030ca4 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   30ca4:	b580      	push	{r7, lr}
   30ca6:	b084      	sub	sp, #16
   30ca8:	af00      	add	r7, sp, #0
   30caa:	60f8      	str	r0, [r7, #12]
   30cac:	60b9      	str	r1, [r7, #8]
   30cae:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   30cb0:	e00d      	b.n	30cce <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   30cb2:	68bb      	ldr	r3, [r7, #8]
   30cb4:	781b      	ldrb	r3, [r3, #0]
   30cb6:	b25a      	sxtb	r2, r3
   30cb8:	68fb      	ldr	r3, [r7, #12]
   30cba:	0011      	movs	r1, r2
   30cbc:	0018      	movs	r0, r3
   30cbe:	4b07      	ldr	r3, [pc, #28]	; (30cdc <stream_writer_send_buffer+0x38>)
   30cc0:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   30cc2:	687b      	ldr	r3, [r7, #4]
   30cc4:	3b01      	subs	r3, #1
   30cc6:	607b      	str	r3, [r7, #4]
   30cc8:	68bb      	ldr	r3, [r7, #8]
   30cca:	3301      	adds	r3, #1
   30ccc:	60bb      	str	r3, [r7, #8]
   30cce:	687b      	ldr	r3, [r7, #4]
   30cd0:	2b00      	cmp	r3, #0
   30cd2:	d1ee      	bne.n	30cb2 <stream_writer_send_buffer+0xe>
	}
}
   30cd4:	46c0      	nop			; (mov r8, r8)
   30cd6:	46bd      	mov	sp, r7
   30cd8:	b004      	add	sp, #16
   30cda:	bd80      	pop	{r7, pc}
   30cdc:	00030c59 	.word	0x00030c59

00030ce0 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   30ce0:	b590      	push	{r4, r7, lr}
   30ce2:	b083      	sub	sp, #12
   30ce4:	af00      	add	r7, sp, #0
   30ce6:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   30ce8:	687b      	ldr	r3, [r7, #4]
   30cea:	685b      	ldr	r3, [r3, #4]
   30cec:	2b00      	cmp	r3, #0
   30cee:	d00c      	beq.n	30d0a <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   30cf0:	687b      	ldr	r3, [r7, #4]
   30cf2:	689c      	ldr	r4, [r3, #8]
   30cf4:	687b      	ldr	r3, [r7, #4]
   30cf6:	68d8      	ldr	r0, [r3, #12]
   30cf8:	687b      	ldr	r3, [r7, #4]
   30cfa:	6919      	ldr	r1, [r3, #16]
   30cfc:	687b      	ldr	r3, [r7, #4]
   30cfe:	685b      	ldr	r3, [r3, #4]
   30d00:	001a      	movs	r2, r3
   30d02:	47a0      	blx	r4
		writer->written = 0;
   30d04:	687b      	ldr	r3, [r7, #4]
   30d06:	2200      	movs	r2, #0
   30d08:	605a      	str	r2, [r3, #4]
	}
}
   30d0a:	46c0      	nop			; (mov r8, r8)
   30d0c:	46bd      	mov	sp, r7
   30d0e:	b003      	add	sp, #12
   30d10:	bd90      	pop	{r4, r7, pc}
	...

00030d14 <system_cpu_clock_get_hz>:
{
   30d14:	b580      	push	{r7, lr}
   30d16:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   30d18:	2000      	movs	r0, #0
   30d1a:	4b05      	ldr	r3, [pc, #20]	; (30d30 <system_cpu_clock_get_hz+0x1c>)
   30d1c:	4798      	blx	r3
   30d1e:	0002      	movs	r2, r0
   30d20:	4b04      	ldr	r3, [pc, #16]	; (30d34 <system_cpu_clock_get_hz+0x20>)
   30d22:	7a1b      	ldrb	r3, [r3, #8]
   30d24:	b2db      	uxtb	r3, r3
   30d26:	40da      	lsrs	r2, r3
   30d28:	0013      	movs	r3, r2
}
   30d2a:	0018      	movs	r0, r3
   30d2c:	46bd      	mov	sp, r7
   30d2e:	bd80      	pop	{r7, pc}
   30d30:	000286f5 	.word	0x000286f5
   30d34:	40000400 	.word	0x40000400

00030d38 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   30d38:	b580      	push	{r7, lr}
   30d3a:	b084      	sub	sp, #16
   30d3c:	af00      	add	r7, sp, #0
   30d3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   30d40:	687b      	ldr	r3, [r7, #4]
   30d42:	681b      	ldr	r3, [r3, #0]
   30d44:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   30d46:	46c0      	nop			; (mov r8, r8)
   30d48:	68fb      	ldr	r3, [r7, #12]
   30d4a:	689b      	ldr	r3, [r3, #8]
   30d4c:	2202      	movs	r2, #2
   30d4e:	4013      	ands	r3, r2
   30d50:	d1fa      	bne.n	30d48 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   30d52:	68fb      	ldr	r3, [r7, #12]
   30d54:	681b      	ldr	r3, [r3, #0]
   30d56:	2202      	movs	r2, #2
   30d58:	431a      	orrs	r2, r3
   30d5a:	68fb      	ldr	r3, [r7, #12]
   30d5c:	601a      	str	r2, [r3, #0]
}
   30d5e:	46c0      	nop			; (mov r8, r8)
   30d60:	46bd      	mov	sp, r7
   30d62:	b004      	add	sp, #16
   30d64:	bd80      	pop	{r7, pc}
	...

00030d68 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   30d68:	b580      	push	{r7, lr}
   30d6a:	b082      	sub	sp, #8
   30d6c:	af00      	add	r7, sp, #0
   30d6e:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   30d70:	4b04      	ldr	r3, [pc, #16]	; (30d84 <sw_timer_tcc_callback+0x1c>)
   30d72:	681b      	ldr	r3, [r3, #0]
   30d74:	1c5a      	adds	r2, r3, #1
   30d76:	4b03      	ldr	r3, [pc, #12]	; (30d84 <sw_timer_tcc_callback+0x1c>)
   30d78:	601a      	str	r2, [r3, #0]
}
   30d7a:	46c0      	nop			; (mov r8, r8)
   30d7c:	46bd      	mov	sp, r7
   30d7e:	b002      	add	sp, #8
   30d80:	bd80      	pop	{r7, pc}
   30d82:	46c0      	nop			; (mov r8, r8)
   30d84:	20004588 	.word	0x20004588

00030d88 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   30d88:	b580      	push	{r7, lr}
   30d8a:	b082      	sub	sp, #8
   30d8c:	af00      	add	r7, sp, #0
   30d8e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   30d90:	687b      	ldr	r3, [r7, #4]
   30d92:	2264      	movs	r2, #100	; 0x64
   30d94:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   30d96:	687b      	ldr	r3, [r7, #4]
   30d98:	2200      	movs	r2, #0
   30d9a:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   30d9c:	687b      	ldr	r3, [r7, #4]
   30d9e:	2200      	movs	r2, #0
   30da0:	705a      	strb	r2, [r3, #1]
}
   30da2:	46c0      	nop			; (mov r8, r8)
   30da4:	46bd      	mov	sp, r7
   30da6:	b002      	add	sp, #8
   30da8:	bd80      	pop	{r7, pc}
	...

00030dac <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   30dac:	b590      	push	{r4, r7, lr}
   30dae:	b0b1      	sub	sp, #196	; 0xc4
   30db0:	af00      	add	r7, sp, #0
   30db2:	6078      	str	r0, [r7, #4]
   30db4:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   30db6:	230c      	movs	r3, #12
   30db8:	18fb      	adds	r3, r7, r3
   30dba:	4a2e      	ldr	r2, [pc, #184]	; (30e74 <sw_timer_init+0xc8>)
   30dbc:	ca13      	ldmia	r2!, {r0, r1, r4}
   30dbe:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   30dc0:	683b      	ldr	r3, [r7, #0]
   30dc2:	885b      	ldrh	r3, [r3, #2]
   30dc4:	001a      	movs	r2, r3
   30dc6:	687b      	ldr	r3, [r7, #4]
   30dc8:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   30dca:	687b      	ldr	r3, [r7, #4]
   30dcc:	3314      	adds	r3, #20
   30dce:	22bc      	movs	r2, #188	; 0xbc
   30dd0:	18ba      	adds	r2, r7, r2
   30dd2:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   30dd4:	683b      	ldr	r3, [r7, #0]
   30dd6:	781b      	ldrb	r3, [r3, #0]
   30dd8:	001a      	movs	r2, r3
   30dda:	230c      	movs	r3, #12
   30ddc:	18fb      	adds	r3, r7, r3
   30dde:	0092      	lsls	r2, r2, #2
   30de0:	58d2      	ldr	r2, [r2, r3]
   30de2:	2318      	movs	r3, #24
   30de4:	18fb      	adds	r3, r7, r3
   30de6:	0011      	movs	r1, r2
   30de8:	0018      	movs	r0, r3
   30dea:	4b23      	ldr	r3, [pc, #140]	; (30e78 <sw_timer_init+0xcc>)
   30dec:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   30dee:	4b23      	ldr	r3, [pc, #140]	; (30e7c <sw_timer_init+0xd0>)
   30df0:	4798      	blx	r3
   30df2:	0004      	movs	r4, r0
   30df4:	683b      	ldr	r3, [r7, #0]
   30df6:	885b      	ldrh	r3, [r3, #2]
   30df8:	001a      	movs	r2, r3
   30dfa:	4b21      	ldr	r3, [pc, #132]	; (30e80 <sw_timer_init+0xd4>)
   30dfc:	0011      	movs	r1, r2
   30dfe:	22fa      	movs	r2, #250	; 0xfa
   30e00:	0210      	lsls	r0, r2, #8
   30e02:	4798      	blx	r3
   30e04:	0003      	movs	r3, r0
   30e06:	001a      	movs	r2, r3
   30e08:	4b1e      	ldr	r3, [pc, #120]	; (30e84 <sw_timer_init+0xd8>)
   30e0a:	0011      	movs	r1, r2
   30e0c:	0020      	movs	r0, r4
   30e0e:	4798      	blx	r3
   30e10:	0003      	movs	r3, r0
   30e12:	001a      	movs	r2, r3
   30e14:	2318      	movs	r3, #24
   30e16:	18fb      	adds	r3, r7, r3
   30e18:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   30e1a:	2318      	movs	r3, #24
   30e1c:	18fb      	adds	r3, r7, r3
   30e1e:	2205      	movs	r2, #5
   30e20:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   30e22:	683b      	ldr	r3, [r7, #0]
   30e24:	781b      	ldrb	r3, [r3, #0]
   30e26:	001a      	movs	r2, r3
   30e28:	230c      	movs	r3, #12
   30e2a:	18fb      	adds	r3, r7, r3
   30e2c:	0092      	lsls	r2, r2, #2
   30e2e:	58d1      	ldr	r1, [r2, r3]
   30e30:	2318      	movs	r3, #24
   30e32:	18fa      	adds	r2, r7, r3
   30e34:	23bc      	movs	r3, #188	; 0xbc
   30e36:	18fb      	adds	r3, r7, r3
   30e38:	681b      	ldr	r3, [r3, #0]
   30e3a:	0018      	movs	r0, r3
   30e3c:	4b12      	ldr	r3, [pc, #72]	; (30e88 <sw_timer_init+0xdc>)
   30e3e:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   30e40:	683b      	ldr	r3, [r7, #0]
   30e42:	785b      	ldrb	r3, [r3, #1]
   30e44:	3308      	adds	r3, #8
   30e46:	b2da      	uxtb	r2, r3
   30e48:	4910      	ldr	r1, [pc, #64]	; (30e8c <sw_timer_init+0xe0>)
   30e4a:	23bc      	movs	r3, #188	; 0xbc
   30e4c:	18fb      	adds	r3, r7, r3
   30e4e:	681b      	ldr	r3, [r3, #0]
   30e50:	0018      	movs	r0, r3
   30e52:	4b0f      	ldr	r3, [pc, #60]	; (30e90 <sw_timer_init+0xe4>)
   30e54:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   30e56:	683b      	ldr	r3, [r7, #0]
   30e58:	785b      	ldrb	r3, [r3, #1]
   30e5a:	3308      	adds	r3, #8
   30e5c:	b2da      	uxtb	r2, r3
   30e5e:	23bc      	movs	r3, #188	; 0xbc
   30e60:	18fb      	adds	r3, r7, r3
   30e62:	681b      	ldr	r3, [r3, #0]
   30e64:	0011      	movs	r1, r2
   30e66:	0018      	movs	r0, r3
   30e68:	4b0a      	ldr	r3, [pc, #40]	; (30e94 <sw_timer_init+0xe8>)
   30e6a:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   30e6c:	46c0      	nop			; (mov r8, r8)
   30e6e:	46bd      	mov	sp, r7
   30e70:	b031      	add	sp, #196	; 0xc4
   30e72:	bd90      	pop	{r4, r7, pc}
   30e74:	0003829c 	.word	0x0003829c
   30e78:	00028c8d 	.word	0x00028c8d
   30e7c:	00030d15 	.word	0x00030d15
   30e80:	00031421 	.word	0x00031421
   30e84:	0003130d 	.word	0x0003130d
   30e88:	000292e9 	.word	0x000292e9
   30e8c:	00030d69 	.word	0x00030d69
   30e90:	00029701 	.word	0x00029701
   30e94:	00029741 	.word	0x00029741

00030e98 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   30e98:	b580      	push	{r7, lr}
   30e9a:	b084      	sub	sp, #16
   30e9c:	af00      	add	r7, sp, #0
   30e9e:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   30ea0:	687b      	ldr	r3, [r7, #4]
   30ea2:	3314      	adds	r3, #20
   30ea4:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   30ea6:	68fb      	ldr	r3, [r7, #12]
   30ea8:	0018      	movs	r0, r3
   30eaa:	4b03      	ldr	r3, [pc, #12]	; (30eb8 <sw_timer_enable+0x20>)
   30eac:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   30eae:	46c0      	nop			; (mov r8, r8)
   30eb0:	46bd      	mov	sp, r7
   30eb2:	b004      	add	sp, #16
   30eb4:	bd80      	pop	{r7, pc}
   30eb6:	46c0      	nop			; (mov r8, r8)
   30eb8:	00030d39 	.word	0x00030d39

00030ebc <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   30ebc:	b580      	push	{r7, lr}
   30ebe:	b086      	sub	sp, #24
   30ec0:	af00      	add	r7, sp, #0
   30ec2:	60f8      	str	r0, [r7, #12]
   30ec4:	60b9      	str	r1, [r7, #8]
   30ec6:	607a      	str	r2, [r7, #4]
   30ec8:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30eca:	2300      	movs	r3, #0
   30ecc:	617b      	str	r3, [r7, #20]
   30ece:	e032      	b.n	30f36 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   30ed0:	68f9      	ldr	r1, [r7, #12]
   30ed2:	697a      	ldr	r2, [r7, #20]
   30ed4:	0013      	movs	r3, r2
   30ed6:	009b      	lsls	r3, r3, #2
   30ed8:	189b      	adds	r3, r3, r2
   30eda:	009b      	lsls	r3, r3, #2
   30edc:	5c5b      	ldrb	r3, [r3, r1]
   30ede:	07db      	lsls	r3, r3, #31
   30ee0:	0fdb      	lsrs	r3, r3, #31
   30ee2:	b2db      	uxtb	r3, r3
   30ee4:	2b00      	cmp	r3, #0
   30ee6:	d123      	bne.n	30f30 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   30ee8:	697a      	ldr	r2, [r7, #20]
   30eea:	0013      	movs	r3, r2
   30eec:	009b      	lsls	r3, r3, #2
   30eee:	189b      	adds	r3, r3, r2
   30ef0:	009b      	lsls	r3, r3, #2
   30ef2:	68fa      	ldr	r2, [r7, #12]
   30ef4:	18d3      	adds	r3, r2, r3
   30ef6:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   30ef8:	693b      	ldr	r3, [r7, #16]
   30efa:	68ba      	ldr	r2, [r7, #8]
   30efc:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   30efe:	693b      	ldr	r3, [r7, #16]
   30f00:	781a      	ldrb	r2, [r3, #0]
   30f02:	2102      	movs	r1, #2
   30f04:	438a      	bics	r2, r1
   30f06:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   30f08:	693b      	ldr	r3, [r7, #16]
   30f0a:	687a      	ldr	r2, [r7, #4]
   30f0c:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   30f0e:	68fb      	ldr	r3, [r7, #12]
   30f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30f12:	4b0d      	ldr	r3, [pc, #52]	; (30f48 <sw_timer_register_callback+0x8c>)
   30f14:	0011      	movs	r1, r2
   30f16:	6838      	ldr	r0, [r7, #0]
   30f18:	4798      	blx	r3
   30f1a:	0003      	movs	r3, r0
   30f1c:	001a      	movs	r2, r3
   30f1e:	693b      	ldr	r3, [r7, #16]
   30f20:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   30f22:	693b      	ldr	r3, [r7, #16]
   30f24:	781a      	ldrb	r2, [r3, #0]
   30f26:	2101      	movs	r1, #1
   30f28:	430a      	orrs	r2, r1
   30f2a:	701a      	strb	r2, [r3, #0]
			return index;
   30f2c:	697b      	ldr	r3, [r7, #20]
   30f2e:	e007      	b.n	30f40 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30f30:	697b      	ldr	r3, [r7, #20]
   30f32:	3301      	adds	r3, #1
   30f34:	617b      	str	r3, [r7, #20]
   30f36:	697b      	ldr	r3, [r7, #20]
   30f38:	2b00      	cmp	r3, #0
   30f3a:	ddc9      	ble.n	30ed0 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   30f3c:	2301      	movs	r3, #1
   30f3e:	425b      	negs	r3, r3
}
   30f40:	0018      	movs	r0, r3
   30f42:	46bd      	mov	sp, r7
   30f44:	b006      	add	sp, #24
   30f46:	bd80      	pop	{r7, pc}
   30f48:	0003130d 	.word	0x0003130d

00030f4c <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   30f4c:	b580      	push	{r7, lr}
   30f4e:	b086      	sub	sp, #24
   30f50:	af00      	add	r7, sp, #0
   30f52:	60f8      	str	r0, [r7, #12]
   30f54:	60b9      	str	r1, [r7, #8]
   30f56:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   30f58:	68ba      	ldr	r2, [r7, #8]
   30f5a:	0013      	movs	r3, r2
   30f5c:	009b      	lsls	r3, r3, #2
   30f5e:	189b      	adds	r3, r3, r2
   30f60:	009b      	lsls	r3, r3, #2
   30f62:	68fa      	ldr	r2, [r7, #12]
   30f64:	18d3      	adds	r3, r2, r3
   30f66:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   30f68:	697b      	ldr	r3, [r7, #20]
   30f6a:	781a      	ldrb	r2, [r3, #0]
   30f6c:	2102      	movs	r1, #2
   30f6e:	430a      	orrs	r2, r1
   30f70:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   30f72:	68fb      	ldr	r3, [r7, #12]
   30f74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30f76:	4b07      	ldr	r3, [pc, #28]	; (30f94 <sw_timer_enable_callback+0x48>)
   30f78:	0011      	movs	r1, r2
   30f7a:	6878      	ldr	r0, [r7, #4]
   30f7c:	4798      	blx	r3
   30f7e:	0003      	movs	r3, r0
   30f80:	001a      	movs	r2, r3
   30f82:	4b05      	ldr	r3, [pc, #20]	; (30f98 <sw_timer_enable_callback+0x4c>)
   30f84:	681b      	ldr	r3, [r3, #0]
   30f86:	18d2      	adds	r2, r2, r3
   30f88:	697b      	ldr	r3, [r7, #20]
   30f8a:	611a      	str	r2, [r3, #16]
}
   30f8c:	46c0      	nop			; (mov r8, r8)
   30f8e:	46bd      	mov	sp, r7
   30f90:	b006      	add	sp, #24
   30f92:	bd80      	pop	{r7, pc}
   30f94:	0003130d 	.word	0x0003130d
   30f98:	20004588 	.word	0x20004588

00030f9c <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   30f9c:	b580      	push	{r7, lr}
   30f9e:	b084      	sub	sp, #16
   30fa0:	af00      	add	r7, sp, #0
   30fa2:	6078      	str	r0, [r7, #4]
   30fa4:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   30fa6:	683a      	ldr	r2, [r7, #0]
   30fa8:	0013      	movs	r3, r2
   30faa:	009b      	lsls	r3, r3, #2
   30fac:	189b      	adds	r3, r3, r2
   30fae:	009b      	lsls	r3, r3, #2
   30fb0:	687a      	ldr	r2, [r7, #4]
   30fb2:	18d3      	adds	r3, r2, r3
   30fb4:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   30fb6:	68fb      	ldr	r3, [r7, #12]
   30fb8:	781a      	ldrb	r2, [r3, #0]
   30fba:	2102      	movs	r1, #2
   30fbc:	438a      	bics	r2, r1
   30fbe:	701a      	strb	r2, [r3, #0]
}
   30fc0:	46c0      	nop			; (mov r8, r8)
   30fc2:	46bd      	mov	sp, r7
   30fc4:	b004      	add	sp, #16
   30fc6:	bd80      	pop	{r7, pc}

00030fc8 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   30fc8:	b590      	push	{r4, r7, lr}
   30fca:	b085      	sub	sp, #20
   30fcc:	af00      	add	r7, sp, #0
   30fce:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   30fd0:	2300      	movs	r3, #0
   30fd2:	60fb      	str	r3, [r7, #12]
   30fd4:	e053      	b.n	3107e <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   30fd6:	6879      	ldr	r1, [r7, #4]
   30fd8:	68fa      	ldr	r2, [r7, #12]
   30fda:	0013      	movs	r3, r2
   30fdc:	009b      	lsls	r3, r3, #2
   30fde:	189b      	adds	r3, r3, r2
   30fe0:	009b      	lsls	r3, r3, #2
   30fe2:	5c5b      	ldrb	r3, [r3, r1]
   30fe4:	07db      	lsls	r3, r3, #31
   30fe6:	0fdb      	lsrs	r3, r3, #31
   30fe8:	b2db      	uxtb	r3, r3
   30fea:	2b00      	cmp	r3, #0
   30fec:	d044      	beq.n	31078 <sw_timer_task+0xb0>
   30fee:	6879      	ldr	r1, [r7, #4]
   30ff0:	68fa      	ldr	r2, [r7, #12]
   30ff2:	0013      	movs	r3, r2
   30ff4:	009b      	lsls	r3, r3, #2
   30ff6:	189b      	adds	r3, r3, r2
   30ff8:	009b      	lsls	r3, r3, #2
   30ffa:	5c5b      	ldrb	r3, [r3, r1]
   30ffc:	079b      	lsls	r3, r3, #30
   30ffe:	0fdb      	lsrs	r3, r3, #31
   31000:	b2db      	uxtb	r3, r3
   31002:	2b00      	cmp	r3, #0
   31004:	d038      	beq.n	31078 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   31006:	68fa      	ldr	r2, [r7, #12]
   31008:	0013      	movs	r3, r2
   3100a:	009b      	lsls	r3, r3, #2
   3100c:	189b      	adds	r3, r3, r2
   3100e:	009b      	lsls	r3, r3, #2
   31010:	687a      	ldr	r2, [r7, #4]
   31012:	18d3      	adds	r3, r2, r3
   31014:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   31016:	68bb      	ldr	r3, [r7, #8]
   31018:	691a      	ldr	r2, [r3, #16]
   3101a:	4b1c      	ldr	r3, [pc, #112]	; (3108c <sw_timer_task+0xc4>)
   3101c:	681b      	ldr	r3, [r3, #0]
   3101e:	1ad3      	subs	r3, r2, r3
   31020:	d52a      	bpl.n	31078 <sw_timer_task+0xb0>
   31022:	68bb      	ldr	r3, [r7, #8]
   31024:	781b      	ldrb	r3, [r3, #0]
   31026:	2204      	movs	r2, #4
   31028:	4013      	ands	r3, r2
   3102a:	b2db      	uxtb	r3, r3
   3102c:	2b00      	cmp	r3, #0
   3102e:	d123      	bne.n	31078 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   31030:	68bb      	ldr	r3, [r7, #8]
   31032:	781a      	ldrb	r2, [r3, #0]
   31034:	2104      	movs	r1, #4
   31036:	430a      	orrs	r2, r1
   31038:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   3103a:	68bb      	ldr	r3, [r7, #8]
   3103c:	68db      	ldr	r3, [r3, #12]
   3103e:	2b00      	cmp	r3, #0
   31040:	d007      	beq.n	31052 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   31042:	68bb      	ldr	r3, [r7, #8]
   31044:	68da      	ldr	r2, [r3, #12]
   31046:	4b11      	ldr	r3, [pc, #68]	; (3108c <sw_timer_task+0xc4>)
   31048:	681b      	ldr	r3, [r3, #0]
   3104a:	18d2      	adds	r2, r2, r3
   3104c:	68bb      	ldr	r3, [r7, #8]
   3104e:	611a      	str	r2, [r3, #16]
   31050:	e004      	b.n	3105c <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   31052:	68bb      	ldr	r3, [r7, #8]
   31054:	781a      	ldrb	r2, [r3, #0]
   31056:	2102      	movs	r1, #2
   31058:	438a      	bics	r2, r1
   3105a:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   3105c:	68bb      	ldr	r3, [r7, #8]
   3105e:	685c      	ldr	r4, [r3, #4]
   31060:	68bb      	ldr	r3, [r7, #8]
   31062:	689a      	ldr	r2, [r3, #8]
   31064:	68bb      	ldr	r3, [r7, #8]
   31066:	68db      	ldr	r3, [r3, #12]
   31068:	68f9      	ldr	r1, [r7, #12]
   3106a:	6878      	ldr	r0, [r7, #4]
   3106c:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3106e:	68bb      	ldr	r3, [r7, #8]
   31070:	781a      	ldrb	r2, [r3, #0]
   31072:	2104      	movs	r1, #4
   31074:	438a      	bics	r2, r1
   31076:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   31078:	68fb      	ldr	r3, [r7, #12]
   3107a:	3301      	adds	r3, #1
   3107c:	60fb      	str	r3, [r7, #12]
   3107e:	68fb      	ldr	r3, [r7, #12]
   31080:	2b00      	cmp	r3, #0
   31082:	dda8      	ble.n	30fd6 <sw_timer_task+0xe>
			}
		}
	}
}
   31084:	46c0      	nop			; (mov r8, r8)
   31086:	46bd      	mov	sp, r7
   31088:	b005      	add	sp, #20
   3108a:	bd90      	pop	{r4, r7, pc}
   3108c:	20004588 	.word	0x20004588

00031090 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   31090:	b580      	push	{r7, lr}
   31092:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   31094:	4b06      	ldr	r3, [pc, #24]	; (310b0 <main+0x20>)
   31096:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   31098:	4b06      	ldr	r3, [pc, #24]	; (310b4 <main+0x24>)
   3109a:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   3109c:	2001      	movs	r0, #1
   3109e:	4b06      	ldr	r3, [pc, #24]	; (310b8 <main+0x28>)
   310a0:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   310a2:	4b06      	ldr	r3, [pc, #24]	; (310bc <main+0x2c>)
   310a4:	4798      	blx	r3

    return 0;  // Will not get here
   310a6:	2300      	movs	r3, #0
}
   310a8:	0018      	movs	r0, r3
   310aa:	46bd      	mov	sp, r7
   310ac:	bd80      	pop	{r7, pc}
   310ae:	46c0      	nop			; (mov r8, r8)
   310b0:	00028b81 	.word	0x00028b81
   310b4:	0001c625 	.word	0x0001c625
   310b8:	00016cf1 	.word	0x00016cf1
   310bc:	0001ac7d 	.word	0x0001ac7d

000310c0 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   310c0:	b580      	push	{r7, lr}
   310c2:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   310c4:	4b17      	ldr	r3, [pc, #92]	; (31124 <vApplicationDaemonTaskStartupHook+0x64>)
   310c6:	0018      	movs	r0, r3
   310c8:	4b17      	ldr	r3, [pc, #92]	; (31128 <vApplicationDaemonTaskStartupHook+0x68>)
   310ca:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   310cc:	4b17      	ldr	r3, [pc, #92]	; (3112c <vApplicationDaemonTaskStartupHook+0x6c>)
   310ce:	0018      	movs	r0, r3
   310d0:	4b15      	ldr	r3, [pc, #84]	; (31128 <vApplicationDaemonTaskStartupHook+0x68>)
   310d2:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   310d4:	4b16      	ldr	r3, [pc, #88]	; (31130 <vApplicationDaemonTaskStartupHook+0x70>)
   310d6:	4798      	blx	r3
   310d8:	1e03      	subs	r3, r0, #0
   310da:	d004      	beq.n	310e6 <vApplicationDaemonTaskStartupHook+0x26>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   310dc:	4b15      	ldr	r3, [pc, #84]	; (31134 <vApplicationDaemonTaskStartupHook+0x74>)
   310de:	0018      	movs	r0, r3
   310e0:	4b11      	ldr	r3, [pc, #68]	; (31128 <vApplicationDaemonTaskStartupHook+0x68>)
   310e2:	4798      	blx	r3
   310e4:	e003      	b.n	310ee <vApplicationDaemonTaskStartupHook+0x2e>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   310e6:	4b14      	ldr	r3, [pc, #80]	; (31138 <vApplicationDaemonTaskStartupHook+0x78>)
   310e8:	0018      	movs	r0, r3
   310ea:	4b0f      	ldr	r3, [pc, #60]	; (31128 <vApplicationDaemonTaskStartupHook+0x68>)
   310ec:	4798      	blx	r3
    }
	
	if (alsInit() != STATUS_OK) {
   310ee:	4b13      	ldr	r3, [pc, #76]	; (3113c <vApplicationDaemonTaskStartupHook+0x7c>)
   310f0:	4798      	blx	r3
   310f2:	1e03      	subs	r3, r0, #0
   310f4:	d004      	beq.n	31100 <vApplicationDaemonTaskStartupHook+0x40>
		SerialConsoleWriteString("Error initializing VEML6030!\r\n");
   310f6:	4b12      	ldr	r3, [pc, #72]	; (31140 <vApplicationDaemonTaskStartupHook+0x80>)
   310f8:	0018      	movs	r0, r3
   310fa:	4b0b      	ldr	r3, [pc, #44]	; (31128 <vApplicationDaemonTaskStartupHook+0x68>)
   310fc:	4798      	blx	r3
   310fe:	e003      	b.n	31108 <vApplicationDaemonTaskStartupHook+0x48>
		} else {
		SerialConsoleWriteString("Initialized VEML6030!\r\n");
   31100:	4b10      	ldr	r3, [pc, #64]	; (31144 <vApplicationDaemonTaskStartupHook+0x84>)
   31102:	0018      	movs	r0, r3
   31104:	4b08      	ldr	r3, [pc, #32]	; (31128 <vApplicationDaemonTaskStartupHook+0x68>)
   31106:	4798      	blx	r3
	}
	PIR_init();
   31108:	4b0f      	ldr	r3, [pc, #60]	; (31148 <vApplicationDaemonTaskStartupHook+0x88>)
   3110a:	4798      	blx	r3
	led_init();
   3110c:	4b0f      	ldr	r3, [pc, #60]	; (3114c <vApplicationDaemonTaskStartupHook+0x8c>)
   3110e:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   31110:	4b0f      	ldr	r3, [pc, #60]	; (31150 <vApplicationDaemonTaskStartupHook+0x90>)
   31112:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   31114:	4b0f      	ldr	r3, [pc, #60]	; (31154 <vApplicationDaemonTaskStartupHook+0x94>)
   31116:	681b      	ldr	r3, [r3, #0]
   31118:	0018      	movs	r0, r3
   3111a:	4b0f      	ldr	r3, [pc, #60]	; (31158 <vApplicationDaemonTaskStartupHook+0x98>)
   3111c:	4798      	blx	r3
}
   3111e:	46c0      	nop			; (mov r8, r8)
   31120:	46bd      	mov	sp, r7
   31122:	bd80      	pop	{r7, pc}
   31124:	000382a8 	.word	0x000382a8
   31128:	0001c695 	.word	0x0001c695
   3112c:	000382cc 	.word	0x000382cc
   31130:	00013cdd 	.word	0x00013cdd
   31134:	000382e4 	.word	0x000382e4
   31138:	00038308 	.word	0x00038308
   3113c:	000146ad 	.word	0x000146ad
   31140:	00038324 	.word	0x00038324
   31144:	00038344 	.word	0x00038344
   31148:	00014449 	.word	0x00014449
   3114c:	00012255 	.word	0x00012255
   31150:	0003115d 	.word	0x0003115d
   31154:	20004590 	.word	0x20004590
   31158:	0001ab21 	.word	0x0001ab21

0003115c <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   3115c:	b590      	push	{r4, r7, lr}
   3115e:	b083      	sub	sp, #12
   31160:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   31162:	4b44      	ldr	r3, [pc, #272]	; (31274 <StartTasks+0x118>)
   31164:	4798      	blx	r3
   31166:	0003      	movs	r3, r0
   31168:	4a43      	ldr	r2, [pc, #268]	; (31278 <StartTasks+0x11c>)
   3116a:	4844      	ldr	r0, [pc, #272]	; (3127c <StartTasks+0x120>)
   3116c:	2140      	movs	r1, #64	; 0x40
   3116e:	4c44      	ldr	r4, [pc, #272]	; (31280 <StartTasks+0x124>)
   31170:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31172:	4b42      	ldr	r3, [pc, #264]	; (3127c <StartTasks+0x120>)
   31174:	0018      	movs	r0, r3
   31176:	4b43      	ldr	r3, [pc, #268]	; (31284 <StartTasks+0x128>)
   31178:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   3117a:	23c8      	movs	r3, #200	; 0xc8
   3117c:	005a      	lsls	r2, r3, #1
   3117e:	4942      	ldr	r1, [pc, #264]	; (31288 <StartTasks+0x12c>)
   31180:	4842      	ldr	r0, [pc, #264]	; (3128c <StartTasks+0x130>)
   31182:	4b43      	ldr	r3, [pc, #268]	; (31290 <StartTasks+0x134>)
   31184:	9301      	str	r3, [sp, #4]
   31186:	2304      	movs	r3, #4
   31188:	9300      	str	r3, [sp, #0]
   3118a:	2300      	movs	r3, #0
   3118c:	4c41      	ldr	r4, [pc, #260]	; (31294 <StartTasks+0x138>)
   3118e:	47a0      	blx	r4
   31190:	0003      	movs	r3, r0
   31192:	2b01      	cmp	r3, #1
   31194:	d003      	beq.n	3119e <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   31196:	4b40      	ldr	r3, [pc, #256]	; (31298 <StartTasks+0x13c>)
   31198:	0018      	movs	r0, r3
   3119a:	4b3a      	ldr	r3, [pc, #232]	; (31284 <StartTasks+0x128>)
   3119c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   3119e:	4b35      	ldr	r3, [pc, #212]	; (31274 <StartTasks+0x118>)
   311a0:	4798      	blx	r3
   311a2:	0003      	movs	r3, r0
   311a4:	4a3d      	ldr	r2, [pc, #244]	; (3129c <StartTasks+0x140>)
   311a6:	4835      	ldr	r0, [pc, #212]	; (3127c <StartTasks+0x120>)
   311a8:	2140      	movs	r1, #64	; 0x40
   311aa:	4c35      	ldr	r4, [pc, #212]	; (31280 <StartTasks+0x124>)
   311ac:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   311ae:	4b33      	ldr	r3, [pc, #204]	; (3127c <StartTasks+0x120>)
   311b0:	0018      	movs	r0, r3
   311b2:	4b34      	ldr	r3, [pc, #208]	; (31284 <StartTasks+0x128>)
   311b4:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   311b6:	23fa      	movs	r3, #250	; 0xfa
   311b8:	009a      	lsls	r2, r3, #2
   311ba:	4939      	ldr	r1, [pc, #228]	; (312a0 <StartTasks+0x144>)
   311bc:	4839      	ldr	r0, [pc, #228]	; (312a4 <StartTasks+0x148>)
   311be:	4b3a      	ldr	r3, [pc, #232]	; (312a8 <StartTasks+0x14c>)
   311c0:	9301      	str	r3, [sp, #4]
   311c2:	2303      	movs	r3, #3
   311c4:	9300      	str	r3, [sp, #0]
   311c6:	2300      	movs	r3, #0
   311c8:	4c32      	ldr	r4, [pc, #200]	; (31294 <StartTasks+0x138>)
   311ca:	47a0      	blx	r4
   311cc:	0003      	movs	r3, r0
   311ce:	2b01      	cmp	r3, #1
   311d0:	d003      	beq.n	311da <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   311d2:	4b36      	ldr	r3, [pc, #216]	; (312ac <StartTasks+0x150>)
   311d4:	0018      	movs	r0, r3
   311d6:	4b2b      	ldr	r3, [pc, #172]	; (31284 <StartTasks+0x128>)
   311d8:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   311da:	4b26      	ldr	r3, [pc, #152]	; (31274 <StartTasks+0x118>)
   311dc:	4798      	blx	r3
   311de:	0003      	movs	r3, r0
   311e0:	4a33      	ldr	r2, [pc, #204]	; (312b0 <StartTasks+0x154>)
   311e2:	4826      	ldr	r0, [pc, #152]	; (3127c <StartTasks+0x120>)
   311e4:	2140      	movs	r1, #64	; 0x40
   311e6:	4c26      	ldr	r4, [pc, #152]	; (31280 <StartTasks+0x124>)
   311e8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   311ea:	4b24      	ldr	r3, [pc, #144]	; (3127c <StartTasks+0x120>)
   311ec:	0018      	movs	r0, r3
   311ee:	4b25      	ldr	r3, [pc, #148]	; (31284 <StartTasks+0x128>)
   311f0:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   311f2:	23c8      	movs	r3, #200	; 0xc8
   311f4:	005a      	lsls	r2, r3, #1
   311f6:	492f      	ldr	r1, [pc, #188]	; (312b4 <StartTasks+0x158>)
   311f8:	482f      	ldr	r0, [pc, #188]	; (312b8 <StartTasks+0x15c>)
   311fa:	4b30      	ldr	r3, [pc, #192]	; (312bc <StartTasks+0x160>)
   311fc:	9301      	str	r3, [sp, #4]
   311fe:	2304      	movs	r3, #4
   31200:	9300      	str	r3, [sp, #0]
   31202:	2300      	movs	r3, #0
   31204:	4c23      	ldr	r4, [pc, #140]	; (31294 <StartTasks+0x138>)
   31206:	47a0      	blx	r4
   31208:	0003      	movs	r3, r0
   3120a:	2b01      	cmp	r3, #1
   3120c:	d003      	beq.n	31216 <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   3120e:	4b2c      	ldr	r3, [pc, #176]	; (312c0 <StartTasks+0x164>)
   31210:	0018      	movs	r0, r3
   31212:	4b1c      	ldr	r3, [pc, #112]	; (31284 <StartTasks+0x128>)
   31214:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   31216:	4b17      	ldr	r3, [pc, #92]	; (31274 <StartTasks+0x118>)
   31218:	4798      	blx	r3
   3121a:	0003      	movs	r3, r0
   3121c:	4a29      	ldr	r2, [pc, #164]	; (312c4 <StartTasks+0x168>)
   3121e:	4817      	ldr	r0, [pc, #92]	; (3127c <StartTasks+0x120>)
   31220:	2140      	movs	r1, #64	; 0x40
   31222:	4c17      	ldr	r4, [pc, #92]	; (31280 <StartTasks+0x124>)
   31224:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31226:	4b15      	ldr	r3, [pc, #84]	; (3127c <StartTasks+0x120>)
   31228:	0018      	movs	r0, r3
   3122a:	4b16      	ldr	r3, [pc, #88]	; (31284 <StartTasks+0x128>)
   3122c:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   3122e:	2380      	movs	r3, #128	; 0x80
   31230:	005a      	lsls	r2, r3, #1
   31232:	4925      	ldr	r1, [pc, #148]	; (312c8 <StartTasks+0x16c>)
   31234:	4825      	ldr	r0, [pc, #148]	; (312cc <StartTasks+0x170>)
   31236:	4b26      	ldr	r3, [pc, #152]	; (312d0 <StartTasks+0x174>)
   31238:	9301      	str	r3, [sp, #4]
   3123a:	2304      	movs	r3, #4
   3123c:	9300      	str	r3, [sp, #0]
   3123e:	2300      	movs	r3, #0
   31240:	4c14      	ldr	r4, [pc, #80]	; (31294 <StartTasks+0x138>)
   31242:	47a0      	blx	r4
   31244:	0003      	movs	r3, r0
   31246:	2b01      	cmp	r3, #1
   31248:	d003      	beq.n	31252 <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   3124a:	4b22      	ldr	r3, [pc, #136]	; (312d4 <StartTasks+0x178>)
   3124c:	0018      	movs	r0, r3
   3124e:	4b0d      	ldr	r3, [pc, #52]	; (31284 <StartTasks+0x128>)
   31250:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   31252:	4b08      	ldr	r3, [pc, #32]	; (31274 <StartTasks+0x118>)
   31254:	4798      	blx	r3
   31256:	0003      	movs	r3, r0
   31258:	4a1f      	ldr	r2, [pc, #124]	; (312d8 <StartTasks+0x17c>)
   3125a:	4808      	ldr	r0, [pc, #32]	; (3127c <StartTasks+0x120>)
   3125c:	2140      	movs	r1, #64	; 0x40
   3125e:	4c08      	ldr	r4, [pc, #32]	; (31280 <StartTasks+0x124>)
   31260:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   31262:	4b06      	ldr	r3, [pc, #24]	; (3127c <StartTasks+0x120>)
   31264:	0018      	movs	r0, r3
   31266:	4b07      	ldr	r3, [pc, #28]	; (31284 <StartTasks+0x128>)
   31268:	4798      	blx	r3
}
   3126a:	46c0      	nop			; (mov r8, r8)
   3126c:	46bd      	mov	sp, r7
   3126e:	b001      	add	sp, #4
   31270:	bd90      	pop	{r4, r7, pc}
   31272:	46c0      	nop			; (mov r8, r8)
   31274:	00018c61 	.word	0x00018c61
   31278:	0003835c 	.word	0x0003835c
   3127c:	20005a10 	.word	0x20005a10
   31280:	000333f9 	.word	0x000333f9
   31284:	0001c695 	.word	0x0001c695
   31288:	00038380 	.word	0x00038380
   3128c:	000130c1 	.word	0x000130c1
   31290:	2000458c 	.word	0x2000458c
   31294:	0001a6a5 	.word	0x0001a6a5
   31298:	0003838c 	.word	0x0003838c
   3129c:	000383b8 	.word	0x000383b8
   312a0:	000383d8 	.word	0x000383d8
   312a4:	00015b81 	.word	0x00015b81
   312a8:	20004594 	.word	0x20004594
   312ac:	000383e4 	.word	0x000383e4
   312b0:	00038410 	.word	0x00038410
   312b4:	00038430 	.word	0x00038430
   312b8:	0001465d 	.word	0x0001465d
   312bc:	20004598 	.word	0x20004598
   312c0:	00038438 	.word	0x00038438
   312c4:	00038464 	.word	0x00038464
   312c8:	00038488 	.word	0x00038488
   312cc:	00013885 	.word	0x00013885
   312d0:	2000459c 	.word	0x2000459c
   312d4:	00038498 	.word	0x00038498
   312d8:	000384c8 	.word	0x000384c8

000312dc <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   312dc:	b580      	push	{r7, lr}
   312de:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   312e0:	4b02      	ldr	r3, [pc, #8]	; (312ec <vApplicationMallocFailedHook+0x10>)
   312e2:	0018      	movs	r0, r3
   312e4:	4b02      	ldr	r3, [pc, #8]	; (312f0 <vApplicationMallocFailedHook+0x14>)
   312e6:	4798      	blx	r3
    while (1)
   312e8:	e7fe      	b.n	312e8 <vApplicationMallocFailedHook+0xc>
   312ea:	46c0      	nop			; (mov r8, r8)
   312ec:	000384f0 	.word	0x000384f0
   312f0:	0001c695 	.word	0x0001c695

000312f4 <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   312f4:	b580      	push	{r7, lr}
   312f6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   312f8:	4b02      	ldr	r3, [pc, #8]	; (31304 <vApplicationStackOverflowHook+0x10>)
   312fa:	0018      	movs	r0, r3
   312fc:	4b02      	ldr	r3, [pc, #8]	; (31308 <vApplicationStackOverflowHook+0x14>)
   312fe:	4798      	blx	r3
    while (1)
   31300:	e7fe      	b.n	31300 <vApplicationStackOverflowHook+0xc>
   31302:	46c0      	nop			; (mov r8, r8)
   31304:	0003851c 	.word	0x0003851c
   31308:	0001c695 	.word	0x0001c695

0003130c <__udivsi3>:
   3130c:	2200      	movs	r2, #0
   3130e:	0843      	lsrs	r3, r0, #1
   31310:	428b      	cmp	r3, r1
   31312:	d374      	bcc.n	313fe <__udivsi3+0xf2>
   31314:	0903      	lsrs	r3, r0, #4
   31316:	428b      	cmp	r3, r1
   31318:	d35f      	bcc.n	313da <__udivsi3+0xce>
   3131a:	0a03      	lsrs	r3, r0, #8
   3131c:	428b      	cmp	r3, r1
   3131e:	d344      	bcc.n	313aa <__udivsi3+0x9e>
   31320:	0b03      	lsrs	r3, r0, #12
   31322:	428b      	cmp	r3, r1
   31324:	d328      	bcc.n	31378 <__udivsi3+0x6c>
   31326:	0c03      	lsrs	r3, r0, #16
   31328:	428b      	cmp	r3, r1
   3132a:	d30d      	bcc.n	31348 <__udivsi3+0x3c>
   3132c:	22ff      	movs	r2, #255	; 0xff
   3132e:	0209      	lsls	r1, r1, #8
   31330:	ba12      	rev	r2, r2
   31332:	0c03      	lsrs	r3, r0, #16
   31334:	428b      	cmp	r3, r1
   31336:	d302      	bcc.n	3133e <__udivsi3+0x32>
   31338:	1212      	asrs	r2, r2, #8
   3133a:	0209      	lsls	r1, r1, #8
   3133c:	d065      	beq.n	3140a <__udivsi3+0xfe>
   3133e:	0b03      	lsrs	r3, r0, #12
   31340:	428b      	cmp	r3, r1
   31342:	d319      	bcc.n	31378 <__udivsi3+0x6c>
   31344:	e000      	b.n	31348 <__udivsi3+0x3c>
   31346:	0a09      	lsrs	r1, r1, #8
   31348:	0bc3      	lsrs	r3, r0, #15
   3134a:	428b      	cmp	r3, r1
   3134c:	d301      	bcc.n	31352 <__udivsi3+0x46>
   3134e:	03cb      	lsls	r3, r1, #15
   31350:	1ac0      	subs	r0, r0, r3
   31352:	4152      	adcs	r2, r2
   31354:	0b83      	lsrs	r3, r0, #14
   31356:	428b      	cmp	r3, r1
   31358:	d301      	bcc.n	3135e <__udivsi3+0x52>
   3135a:	038b      	lsls	r3, r1, #14
   3135c:	1ac0      	subs	r0, r0, r3
   3135e:	4152      	adcs	r2, r2
   31360:	0b43      	lsrs	r3, r0, #13
   31362:	428b      	cmp	r3, r1
   31364:	d301      	bcc.n	3136a <__udivsi3+0x5e>
   31366:	034b      	lsls	r3, r1, #13
   31368:	1ac0      	subs	r0, r0, r3
   3136a:	4152      	adcs	r2, r2
   3136c:	0b03      	lsrs	r3, r0, #12
   3136e:	428b      	cmp	r3, r1
   31370:	d301      	bcc.n	31376 <__udivsi3+0x6a>
   31372:	030b      	lsls	r3, r1, #12
   31374:	1ac0      	subs	r0, r0, r3
   31376:	4152      	adcs	r2, r2
   31378:	0ac3      	lsrs	r3, r0, #11
   3137a:	428b      	cmp	r3, r1
   3137c:	d301      	bcc.n	31382 <__udivsi3+0x76>
   3137e:	02cb      	lsls	r3, r1, #11
   31380:	1ac0      	subs	r0, r0, r3
   31382:	4152      	adcs	r2, r2
   31384:	0a83      	lsrs	r3, r0, #10
   31386:	428b      	cmp	r3, r1
   31388:	d301      	bcc.n	3138e <__udivsi3+0x82>
   3138a:	028b      	lsls	r3, r1, #10
   3138c:	1ac0      	subs	r0, r0, r3
   3138e:	4152      	adcs	r2, r2
   31390:	0a43      	lsrs	r3, r0, #9
   31392:	428b      	cmp	r3, r1
   31394:	d301      	bcc.n	3139a <__udivsi3+0x8e>
   31396:	024b      	lsls	r3, r1, #9
   31398:	1ac0      	subs	r0, r0, r3
   3139a:	4152      	adcs	r2, r2
   3139c:	0a03      	lsrs	r3, r0, #8
   3139e:	428b      	cmp	r3, r1
   313a0:	d301      	bcc.n	313a6 <__udivsi3+0x9a>
   313a2:	020b      	lsls	r3, r1, #8
   313a4:	1ac0      	subs	r0, r0, r3
   313a6:	4152      	adcs	r2, r2
   313a8:	d2cd      	bcs.n	31346 <__udivsi3+0x3a>
   313aa:	09c3      	lsrs	r3, r0, #7
   313ac:	428b      	cmp	r3, r1
   313ae:	d301      	bcc.n	313b4 <__udivsi3+0xa8>
   313b0:	01cb      	lsls	r3, r1, #7
   313b2:	1ac0      	subs	r0, r0, r3
   313b4:	4152      	adcs	r2, r2
   313b6:	0983      	lsrs	r3, r0, #6
   313b8:	428b      	cmp	r3, r1
   313ba:	d301      	bcc.n	313c0 <__udivsi3+0xb4>
   313bc:	018b      	lsls	r3, r1, #6
   313be:	1ac0      	subs	r0, r0, r3
   313c0:	4152      	adcs	r2, r2
   313c2:	0943      	lsrs	r3, r0, #5
   313c4:	428b      	cmp	r3, r1
   313c6:	d301      	bcc.n	313cc <__udivsi3+0xc0>
   313c8:	014b      	lsls	r3, r1, #5
   313ca:	1ac0      	subs	r0, r0, r3
   313cc:	4152      	adcs	r2, r2
   313ce:	0903      	lsrs	r3, r0, #4
   313d0:	428b      	cmp	r3, r1
   313d2:	d301      	bcc.n	313d8 <__udivsi3+0xcc>
   313d4:	010b      	lsls	r3, r1, #4
   313d6:	1ac0      	subs	r0, r0, r3
   313d8:	4152      	adcs	r2, r2
   313da:	08c3      	lsrs	r3, r0, #3
   313dc:	428b      	cmp	r3, r1
   313de:	d301      	bcc.n	313e4 <__udivsi3+0xd8>
   313e0:	00cb      	lsls	r3, r1, #3
   313e2:	1ac0      	subs	r0, r0, r3
   313e4:	4152      	adcs	r2, r2
   313e6:	0883      	lsrs	r3, r0, #2
   313e8:	428b      	cmp	r3, r1
   313ea:	d301      	bcc.n	313f0 <__udivsi3+0xe4>
   313ec:	008b      	lsls	r3, r1, #2
   313ee:	1ac0      	subs	r0, r0, r3
   313f0:	4152      	adcs	r2, r2
   313f2:	0843      	lsrs	r3, r0, #1
   313f4:	428b      	cmp	r3, r1
   313f6:	d301      	bcc.n	313fc <__udivsi3+0xf0>
   313f8:	004b      	lsls	r3, r1, #1
   313fa:	1ac0      	subs	r0, r0, r3
   313fc:	4152      	adcs	r2, r2
   313fe:	1a41      	subs	r1, r0, r1
   31400:	d200      	bcs.n	31404 <__udivsi3+0xf8>
   31402:	4601      	mov	r1, r0
   31404:	4152      	adcs	r2, r2
   31406:	4610      	mov	r0, r2
   31408:	4770      	bx	lr
   3140a:	e7ff      	b.n	3140c <__udivsi3+0x100>
   3140c:	b501      	push	{r0, lr}
   3140e:	2000      	movs	r0, #0
   31410:	f000 f8f0 	bl	315f4 <__aeabi_idiv0>
   31414:	bd02      	pop	{r1, pc}
   31416:	46c0      	nop			; (mov r8, r8)

00031418 <__aeabi_uidivmod>:
   31418:	2900      	cmp	r1, #0
   3141a:	d0f7      	beq.n	3140c <__udivsi3+0x100>
   3141c:	e776      	b.n	3130c <__udivsi3>
   3141e:	4770      	bx	lr

00031420 <__divsi3>:
   31420:	4603      	mov	r3, r0
   31422:	430b      	orrs	r3, r1
   31424:	d47f      	bmi.n	31526 <__divsi3+0x106>
   31426:	2200      	movs	r2, #0
   31428:	0843      	lsrs	r3, r0, #1
   3142a:	428b      	cmp	r3, r1
   3142c:	d374      	bcc.n	31518 <__divsi3+0xf8>
   3142e:	0903      	lsrs	r3, r0, #4
   31430:	428b      	cmp	r3, r1
   31432:	d35f      	bcc.n	314f4 <__divsi3+0xd4>
   31434:	0a03      	lsrs	r3, r0, #8
   31436:	428b      	cmp	r3, r1
   31438:	d344      	bcc.n	314c4 <__divsi3+0xa4>
   3143a:	0b03      	lsrs	r3, r0, #12
   3143c:	428b      	cmp	r3, r1
   3143e:	d328      	bcc.n	31492 <__divsi3+0x72>
   31440:	0c03      	lsrs	r3, r0, #16
   31442:	428b      	cmp	r3, r1
   31444:	d30d      	bcc.n	31462 <__divsi3+0x42>
   31446:	22ff      	movs	r2, #255	; 0xff
   31448:	0209      	lsls	r1, r1, #8
   3144a:	ba12      	rev	r2, r2
   3144c:	0c03      	lsrs	r3, r0, #16
   3144e:	428b      	cmp	r3, r1
   31450:	d302      	bcc.n	31458 <__divsi3+0x38>
   31452:	1212      	asrs	r2, r2, #8
   31454:	0209      	lsls	r1, r1, #8
   31456:	d065      	beq.n	31524 <__divsi3+0x104>
   31458:	0b03      	lsrs	r3, r0, #12
   3145a:	428b      	cmp	r3, r1
   3145c:	d319      	bcc.n	31492 <__divsi3+0x72>
   3145e:	e000      	b.n	31462 <__divsi3+0x42>
   31460:	0a09      	lsrs	r1, r1, #8
   31462:	0bc3      	lsrs	r3, r0, #15
   31464:	428b      	cmp	r3, r1
   31466:	d301      	bcc.n	3146c <__divsi3+0x4c>
   31468:	03cb      	lsls	r3, r1, #15
   3146a:	1ac0      	subs	r0, r0, r3
   3146c:	4152      	adcs	r2, r2
   3146e:	0b83      	lsrs	r3, r0, #14
   31470:	428b      	cmp	r3, r1
   31472:	d301      	bcc.n	31478 <__divsi3+0x58>
   31474:	038b      	lsls	r3, r1, #14
   31476:	1ac0      	subs	r0, r0, r3
   31478:	4152      	adcs	r2, r2
   3147a:	0b43      	lsrs	r3, r0, #13
   3147c:	428b      	cmp	r3, r1
   3147e:	d301      	bcc.n	31484 <__divsi3+0x64>
   31480:	034b      	lsls	r3, r1, #13
   31482:	1ac0      	subs	r0, r0, r3
   31484:	4152      	adcs	r2, r2
   31486:	0b03      	lsrs	r3, r0, #12
   31488:	428b      	cmp	r3, r1
   3148a:	d301      	bcc.n	31490 <__divsi3+0x70>
   3148c:	030b      	lsls	r3, r1, #12
   3148e:	1ac0      	subs	r0, r0, r3
   31490:	4152      	adcs	r2, r2
   31492:	0ac3      	lsrs	r3, r0, #11
   31494:	428b      	cmp	r3, r1
   31496:	d301      	bcc.n	3149c <__divsi3+0x7c>
   31498:	02cb      	lsls	r3, r1, #11
   3149a:	1ac0      	subs	r0, r0, r3
   3149c:	4152      	adcs	r2, r2
   3149e:	0a83      	lsrs	r3, r0, #10
   314a0:	428b      	cmp	r3, r1
   314a2:	d301      	bcc.n	314a8 <__divsi3+0x88>
   314a4:	028b      	lsls	r3, r1, #10
   314a6:	1ac0      	subs	r0, r0, r3
   314a8:	4152      	adcs	r2, r2
   314aa:	0a43      	lsrs	r3, r0, #9
   314ac:	428b      	cmp	r3, r1
   314ae:	d301      	bcc.n	314b4 <__divsi3+0x94>
   314b0:	024b      	lsls	r3, r1, #9
   314b2:	1ac0      	subs	r0, r0, r3
   314b4:	4152      	adcs	r2, r2
   314b6:	0a03      	lsrs	r3, r0, #8
   314b8:	428b      	cmp	r3, r1
   314ba:	d301      	bcc.n	314c0 <__divsi3+0xa0>
   314bc:	020b      	lsls	r3, r1, #8
   314be:	1ac0      	subs	r0, r0, r3
   314c0:	4152      	adcs	r2, r2
   314c2:	d2cd      	bcs.n	31460 <__divsi3+0x40>
   314c4:	09c3      	lsrs	r3, r0, #7
   314c6:	428b      	cmp	r3, r1
   314c8:	d301      	bcc.n	314ce <__divsi3+0xae>
   314ca:	01cb      	lsls	r3, r1, #7
   314cc:	1ac0      	subs	r0, r0, r3
   314ce:	4152      	adcs	r2, r2
   314d0:	0983      	lsrs	r3, r0, #6
   314d2:	428b      	cmp	r3, r1
   314d4:	d301      	bcc.n	314da <__divsi3+0xba>
   314d6:	018b      	lsls	r3, r1, #6
   314d8:	1ac0      	subs	r0, r0, r3
   314da:	4152      	adcs	r2, r2
   314dc:	0943      	lsrs	r3, r0, #5
   314de:	428b      	cmp	r3, r1
   314e0:	d301      	bcc.n	314e6 <__divsi3+0xc6>
   314e2:	014b      	lsls	r3, r1, #5
   314e4:	1ac0      	subs	r0, r0, r3
   314e6:	4152      	adcs	r2, r2
   314e8:	0903      	lsrs	r3, r0, #4
   314ea:	428b      	cmp	r3, r1
   314ec:	d301      	bcc.n	314f2 <__divsi3+0xd2>
   314ee:	010b      	lsls	r3, r1, #4
   314f0:	1ac0      	subs	r0, r0, r3
   314f2:	4152      	adcs	r2, r2
   314f4:	08c3      	lsrs	r3, r0, #3
   314f6:	428b      	cmp	r3, r1
   314f8:	d301      	bcc.n	314fe <__divsi3+0xde>
   314fa:	00cb      	lsls	r3, r1, #3
   314fc:	1ac0      	subs	r0, r0, r3
   314fe:	4152      	adcs	r2, r2
   31500:	0883      	lsrs	r3, r0, #2
   31502:	428b      	cmp	r3, r1
   31504:	d301      	bcc.n	3150a <__divsi3+0xea>
   31506:	008b      	lsls	r3, r1, #2
   31508:	1ac0      	subs	r0, r0, r3
   3150a:	4152      	adcs	r2, r2
   3150c:	0843      	lsrs	r3, r0, #1
   3150e:	428b      	cmp	r3, r1
   31510:	d301      	bcc.n	31516 <__divsi3+0xf6>
   31512:	004b      	lsls	r3, r1, #1
   31514:	1ac0      	subs	r0, r0, r3
   31516:	4152      	adcs	r2, r2
   31518:	1a41      	subs	r1, r0, r1
   3151a:	d200      	bcs.n	3151e <__divsi3+0xfe>
   3151c:	4601      	mov	r1, r0
   3151e:	4152      	adcs	r2, r2
   31520:	4610      	mov	r0, r2
   31522:	4770      	bx	lr
   31524:	e05d      	b.n	315e2 <__divsi3+0x1c2>
   31526:	0fca      	lsrs	r2, r1, #31
   31528:	d000      	beq.n	3152c <__divsi3+0x10c>
   3152a:	4249      	negs	r1, r1
   3152c:	1003      	asrs	r3, r0, #32
   3152e:	d300      	bcc.n	31532 <__divsi3+0x112>
   31530:	4240      	negs	r0, r0
   31532:	4053      	eors	r3, r2
   31534:	2200      	movs	r2, #0
   31536:	469c      	mov	ip, r3
   31538:	0903      	lsrs	r3, r0, #4
   3153a:	428b      	cmp	r3, r1
   3153c:	d32d      	bcc.n	3159a <__divsi3+0x17a>
   3153e:	0a03      	lsrs	r3, r0, #8
   31540:	428b      	cmp	r3, r1
   31542:	d312      	bcc.n	3156a <__divsi3+0x14a>
   31544:	22fc      	movs	r2, #252	; 0xfc
   31546:	0189      	lsls	r1, r1, #6
   31548:	ba12      	rev	r2, r2
   3154a:	0a03      	lsrs	r3, r0, #8
   3154c:	428b      	cmp	r3, r1
   3154e:	d30c      	bcc.n	3156a <__divsi3+0x14a>
   31550:	0189      	lsls	r1, r1, #6
   31552:	1192      	asrs	r2, r2, #6
   31554:	428b      	cmp	r3, r1
   31556:	d308      	bcc.n	3156a <__divsi3+0x14a>
   31558:	0189      	lsls	r1, r1, #6
   3155a:	1192      	asrs	r2, r2, #6
   3155c:	428b      	cmp	r3, r1
   3155e:	d304      	bcc.n	3156a <__divsi3+0x14a>
   31560:	0189      	lsls	r1, r1, #6
   31562:	d03a      	beq.n	315da <__divsi3+0x1ba>
   31564:	1192      	asrs	r2, r2, #6
   31566:	e000      	b.n	3156a <__divsi3+0x14a>
   31568:	0989      	lsrs	r1, r1, #6
   3156a:	09c3      	lsrs	r3, r0, #7
   3156c:	428b      	cmp	r3, r1
   3156e:	d301      	bcc.n	31574 <__divsi3+0x154>
   31570:	01cb      	lsls	r3, r1, #7
   31572:	1ac0      	subs	r0, r0, r3
   31574:	4152      	adcs	r2, r2
   31576:	0983      	lsrs	r3, r0, #6
   31578:	428b      	cmp	r3, r1
   3157a:	d301      	bcc.n	31580 <__divsi3+0x160>
   3157c:	018b      	lsls	r3, r1, #6
   3157e:	1ac0      	subs	r0, r0, r3
   31580:	4152      	adcs	r2, r2
   31582:	0943      	lsrs	r3, r0, #5
   31584:	428b      	cmp	r3, r1
   31586:	d301      	bcc.n	3158c <__divsi3+0x16c>
   31588:	014b      	lsls	r3, r1, #5
   3158a:	1ac0      	subs	r0, r0, r3
   3158c:	4152      	adcs	r2, r2
   3158e:	0903      	lsrs	r3, r0, #4
   31590:	428b      	cmp	r3, r1
   31592:	d301      	bcc.n	31598 <__divsi3+0x178>
   31594:	010b      	lsls	r3, r1, #4
   31596:	1ac0      	subs	r0, r0, r3
   31598:	4152      	adcs	r2, r2
   3159a:	08c3      	lsrs	r3, r0, #3
   3159c:	428b      	cmp	r3, r1
   3159e:	d301      	bcc.n	315a4 <__divsi3+0x184>
   315a0:	00cb      	lsls	r3, r1, #3
   315a2:	1ac0      	subs	r0, r0, r3
   315a4:	4152      	adcs	r2, r2
   315a6:	0883      	lsrs	r3, r0, #2
   315a8:	428b      	cmp	r3, r1
   315aa:	d301      	bcc.n	315b0 <__divsi3+0x190>
   315ac:	008b      	lsls	r3, r1, #2
   315ae:	1ac0      	subs	r0, r0, r3
   315b0:	4152      	adcs	r2, r2
   315b2:	d2d9      	bcs.n	31568 <__divsi3+0x148>
   315b4:	0843      	lsrs	r3, r0, #1
   315b6:	428b      	cmp	r3, r1
   315b8:	d301      	bcc.n	315be <__divsi3+0x19e>
   315ba:	004b      	lsls	r3, r1, #1
   315bc:	1ac0      	subs	r0, r0, r3
   315be:	4152      	adcs	r2, r2
   315c0:	1a41      	subs	r1, r0, r1
   315c2:	d200      	bcs.n	315c6 <__divsi3+0x1a6>
   315c4:	4601      	mov	r1, r0
   315c6:	4663      	mov	r3, ip
   315c8:	4152      	adcs	r2, r2
   315ca:	105b      	asrs	r3, r3, #1
   315cc:	4610      	mov	r0, r2
   315ce:	d301      	bcc.n	315d4 <__divsi3+0x1b4>
   315d0:	4240      	negs	r0, r0
   315d2:	2b00      	cmp	r3, #0
   315d4:	d500      	bpl.n	315d8 <__divsi3+0x1b8>
   315d6:	4249      	negs	r1, r1
   315d8:	4770      	bx	lr
   315da:	4663      	mov	r3, ip
   315dc:	105b      	asrs	r3, r3, #1
   315de:	d300      	bcc.n	315e2 <__divsi3+0x1c2>
   315e0:	4240      	negs	r0, r0
   315e2:	b501      	push	{r0, lr}
   315e4:	2000      	movs	r0, #0
   315e6:	f000 f805 	bl	315f4 <__aeabi_idiv0>
   315ea:	bd02      	pop	{r1, pc}

000315ec <__aeabi_idivmod>:
   315ec:	2900      	cmp	r1, #0
   315ee:	d0f8      	beq.n	315e2 <__divsi3+0x1c2>
   315f0:	e716      	b.n	31420 <__divsi3>
   315f2:	4770      	bx	lr

000315f4 <__aeabi_idiv0>:
   315f4:	4770      	bx	lr
   315f6:	46c0      	nop			; (mov r8, r8)

000315f8 <__aeabi_lmul>:
   315f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   315fa:	46ce      	mov	lr, r9
   315fc:	4647      	mov	r7, r8
   315fe:	0415      	lsls	r5, r2, #16
   31600:	0c2d      	lsrs	r5, r5, #16
   31602:	002e      	movs	r6, r5
   31604:	b580      	push	{r7, lr}
   31606:	0407      	lsls	r7, r0, #16
   31608:	0c14      	lsrs	r4, r2, #16
   3160a:	0c3f      	lsrs	r7, r7, #16
   3160c:	4699      	mov	r9, r3
   3160e:	0c03      	lsrs	r3, r0, #16
   31610:	437e      	muls	r6, r7
   31612:	435d      	muls	r5, r3
   31614:	4367      	muls	r7, r4
   31616:	4363      	muls	r3, r4
   31618:	197f      	adds	r7, r7, r5
   3161a:	0c34      	lsrs	r4, r6, #16
   3161c:	19e4      	adds	r4, r4, r7
   3161e:	469c      	mov	ip, r3
   31620:	42a5      	cmp	r5, r4
   31622:	d903      	bls.n	3162c <__aeabi_lmul+0x34>
   31624:	2380      	movs	r3, #128	; 0x80
   31626:	025b      	lsls	r3, r3, #9
   31628:	4698      	mov	r8, r3
   3162a:	44c4      	add	ip, r8
   3162c:	464b      	mov	r3, r9
   3162e:	4351      	muls	r1, r2
   31630:	4343      	muls	r3, r0
   31632:	0436      	lsls	r6, r6, #16
   31634:	0c36      	lsrs	r6, r6, #16
   31636:	0c25      	lsrs	r5, r4, #16
   31638:	0424      	lsls	r4, r4, #16
   3163a:	4465      	add	r5, ip
   3163c:	19a4      	adds	r4, r4, r6
   3163e:	1859      	adds	r1, r3, r1
   31640:	1949      	adds	r1, r1, r5
   31642:	0020      	movs	r0, r4
   31644:	bc0c      	pop	{r2, r3}
   31646:	4690      	mov	r8, r2
   31648:	4699      	mov	r9, r3
   3164a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0003164c <__aeabi_f2iz>:
   3164c:	0241      	lsls	r1, r0, #9
   3164e:	0043      	lsls	r3, r0, #1
   31650:	0fc2      	lsrs	r2, r0, #31
   31652:	0a49      	lsrs	r1, r1, #9
   31654:	0e1b      	lsrs	r3, r3, #24
   31656:	2000      	movs	r0, #0
   31658:	2b7e      	cmp	r3, #126	; 0x7e
   3165a:	dd0d      	ble.n	31678 <__aeabi_f2iz+0x2c>
   3165c:	2b9d      	cmp	r3, #157	; 0x9d
   3165e:	dc0c      	bgt.n	3167a <__aeabi_f2iz+0x2e>
   31660:	2080      	movs	r0, #128	; 0x80
   31662:	0400      	lsls	r0, r0, #16
   31664:	4301      	orrs	r1, r0
   31666:	2b95      	cmp	r3, #149	; 0x95
   31668:	dc0a      	bgt.n	31680 <__aeabi_f2iz+0x34>
   3166a:	2096      	movs	r0, #150	; 0x96
   3166c:	1ac3      	subs	r3, r0, r3
   3166e:	40d9      	lsrs	r1, r3
   31670:	4248      	negs	r0, r1
   31672:	2a00      	cmp	r2, #0
   31674:	d100      	bne.n	31678 <__aeabi_f2iz+0x2c>
   31676:	0008      	movs	r0, r1
   31678:	4770      	bx	lr
   3167a:	4b03      	ldr	r3, [pc, #12]	; (31688 <__aeabi_f2iz+0x3c>)
   3167c:	18d0      	adds	r0, r2, r3
   3167e:	e7fb      	b.n	31678 <__aeabi_f2iz+0x2c>
   31680:	3b96      	subs	r3, #150	; 0x96
   31682:	4099      	lsls	r1, r3
   31684:	e7f4      	b.n	31670 <__aeabi_f2iz+0x24>
   31686:	46c0      	nop			; (mov r8, r8)
   31688:	7fffffff 	.word	0x7fffffff

0003168c <__aeabi_dadd>:
   3168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3168e:	4645      	mov	r5, r8
   31690:	46de      	mov	lr, fp
   31692:	4657      	mov	r7, sl
   31694:	464e      	mov	r6, r9
   31696:	030c      	lsls	r4, r1, #12
   31698:	b5e0      	push	{r5, r6, r7, lr}
   3169a:	004e      	lsls	r6, r1, #1
   3169c:	0fc9      	lsrs	r1, r1, #31
   3169e:	4688      	mov	r8, r1
   316a0:	000d      	movs	r5, r1
   316a2:	0a61      	lsrs	r1, r4, #9
   316a4:	0f44      	lsrs	r4, r0, #29
   316a6:	430c      	orrs	r4, r1
   316a8:	00c7      	lsls	r7, r0, #3
   316aa:	0319      	lsls	r1, r3, #12
   316ac:	0058      	lsls	r0, r3, #1
   316ae:	0fdb      	lsrs	r3, r3, #31
   316b0:	469b      	mov	fp, r3
   316b2:	0a4b      	lsrs	r3, r1, #9
   316b4:	0f51      	lsrs	r1, r2, #29
   316b6:	430b      	orrs	r3, r1
   316b8:	0d76      	lsrs	r6, r6, #21
   316ba:	0d40      	lsrs	r0, r0, #21
   316bc:	0019      	movs	r1, r3
   316be:	00d2      	lsls	r2, r2, #3
   316c0:	45d8      	cmp	r8, fp
   316c2:	d100      	bne.n	316c6 <__aeabi_dadd+0x3a>
   316c4:	e0ae      	b.n	31824 <__aeabi_dadd+0x198>
   316c6:	1a35      	subs	r5, r6, r0
   316c8:	2d00      	cmp	r5, #0
   316ca:	dc00      	bgt.n	316ce <__aeabi_dadd+0x42>
   316cc:	e0f6      	b.n	318bc <__aeabi_dadd+0x230>
   316ce:	2800      	cmp	r0, #0
   316d0:	d10f      	bne.n	316f2 <__aeabi_dadd+0x66>
   316d2:	4313      	orrs	r3, r2
   316d4:	d100      	bne.n	316d8 <__aeabi_dadd+0x4c>
   316d6:	e0db      	b.n	31890 <__aeabi_dadd+0x204>
   316d8:	1e6b      	subs	r3, r5, #1
   316da:	2b00      	cmp	r3, #0
   316dc:	d000      	beq.n	316e0 <__aeabi_dadd+0x54>
   316de:	e137      	b.n	31950 <__aeabi_dadd+0x2c4>
   316e0:	1aba      	subs	r2, r7, r2
   316e2:	4297      	cmp	r7, r2
   316e4:	41bf      	sbcs	r7, r7
   316e6:	1a64      	subs	r4, r4, r1
   316e8:	427f      	negs	r7, r7
   316ea:	1be4      	subs	r4, r4, r7
   316ec:	2601      	movs	r6, #1
   316ee:	0017      	movs	r7, r2
   316f0:	e024      	b.n	3173c <__aeabi_dadd+0xb0>
   316f2:	4bc6      	ldr	r3, [pc, #792]	; (31a0c <__aeabi_dadd+0x380>)
   316f4:	429e      	cmp	r6, r3
   316f6:	d04d      	beq.n	31794 <__aeabi_dadd+0x108>
   316f8:	2380      	movs	r3, #128	; 0x80
   316fa:	041b      	lsls	r3, r3, #16
   316fc:	4319      	orrs	r1, r3
   316fe:	2d38      	cmp	r5, #56	; 0x38
   31700:	dd00      	ble.n	31704 <__aeabi_dadd+0x78>
   31702:	e107      	b.n	31914 <__aeabi_dadd+0x288>
   31704:	2d1f      	cmp	r5, #31
   31706:	dd00      	ble.n	3170a <__aeabi_dadd+0x7e>
   31708:	e138      	b.n	3197c <__aeabi_dadd+0x2f0>
   3170a:	2020      	movs	r0, #32
   3170c:	1b43      	subs	r3, r0, r5
   3170e:	469a      	mov	sl, r3
   31710:	000b      	movs	r3, r1
   31712:	4650      	mov	r0, sl
   31714:	4083      	lsls	r3, r0
   31716:	4699      	mov	r9, r3
   31718:	0013      	movs	r3, r2
   3171a:	4648      	mov	r0, r9
   3171c:	40eb      	lsrs	r3, r5
   3171e:	4318      	orrs	r0, r3
   31720:	0003      	movs	r3, r0
   31722:	4650      	mov	r0, sl
   31724:	4082      	lsls	r2, r0
   31726:	1e50      	subs	r0, r2, #1
   31728:	4182      	sbcs	r2, r0
   3172a:	40e9      	lsrs	r1, r5
   3172c:	431a      	orrs	r2, r3
   3172e:	1aba      	subs	r2, r7, r2
   31730:	1a61      	subs	r1, r4, r1
   31732:	4297      	cmp	r7, r2
   31734:	41a4      	sbcs	r4, r4
   31736:	0017      	movs	r7, r2
   31738:	4264      	negs	r4, r4
   3173a:	1b0c      	subs	r4, r1, r4
   3173c:	0223      	lsls	r3, r4, #8
   3173e:	d562      	bpl.n	31806 <__aeabi_dadd+0x17a>
   31740:	0264      	lsls	r4, r4, #9
   31742:	0a65      	lsrs	r5, r4, #9
   31744:	2d00      	cmp	r5, #0
   31746:	d100      	bne.n	3174a <__aeabi_dadd+0xbe>
   31748:	e0df      	b.n	3190a <__aeabi_dadd+0x27e>
   3174a:	0028      	movs	r0, r5
   3174c:	f001 fcb0 	bl	330b0 <__clzsi2>
   31750:	0003      	movs	r3, r0
   31752:	3b08      	subs	r3, #8
   31754:	2b1f      	cmp	r3, #31
   31756:	dd00      	ble.n	3175a <__aeabi_dadd+0xce>
   31758:	e0d2      	b.n	31900 <__aeabi_dadd+0x274>
   3175a:	2220      	movs	r2, #32
   3175c:	003c      	movs	r4, r7
   3175e:	1ad2      	subs	r2, r2, r3
   31760:	409d      	lsls	r5, r3
   31762:	40d4      	lsrs	r4, r2
   31764:	409f      	lsls	r7, r3
   31766:	4325      	orrs	r5, r4
   31768:	429e      	cmp	r6, r3
   3176a:	dd00      	ble.n	3176e <__aeabi_dadd+0xe2>
   3176c:	e0c4      	b.n	318f8 <__aeabi_dadd+0x26c>
   3176e:	1b9e      	subs	r6, r3, r6
   31770:	1c73      	adds	r3, r6, #1
   31772:	2b1f      	cmp	r3, #31
   31774:	dd00      	ble.n	31778 <__aeabi_dadd+0xec>
   31776:	e0f1      	b.n	3195c <__aeabi_dadd+0x2d0>
   31778:	2220      	movs	r2, #32
   3177a:	0038      	movs	r0, r7
   3177c:	0029      	movs	r1, r5
   3177e:	1ad2      	subs	r2, r2, r3
   31780:	40d8      	lsrs	r0, r3
   31782:	4091      	lsls	r1, r2
   31784:	4097      	lsls	r7, r2
   31786:	002c      	movs	r4, r5
   31788:	4301      	orrs	r1, r0
   3178a:	1e78      	subs	r0, r7, #1
   3178c:	4187      	sbcs	r7, r0
   3178e:	40dc      	lsrs	r4, r3
   31790:	2600      	movs	r6, #0
   31792:	430f      	orrs	r7, r1
   31794:	077b      	lsls	r3, r7, #29
   31796:	d009      	beq.n	317ac <__aeabi_dadd+0x120>
   31798:	230f      	movs	r3, #15
   3179a:	403b      	ands	r3, r7
   3179c:	2b04      	cmp	r3, #4
   3179e:	d005      	beq.n	317ac <__aeabi_dadd+0x120>
   317a0:	1d3b      	adds	r3, r7, #4
   317a2:	42bb      	cmp	r3, r7
   317a4:	41bf      	sbcs	r7, r7
   317a6:	427f      	negs	r7, r7
   317a8:	19e4      	adds	r4, r4, r7
   317aa:	001f      	movs	r7, r3
   317ac:	0223      	lsls	r3, r4, #8
   317ae:	d52c      	bpl.n	3180a <__aeabi_dadd+0x17e>
   317b0:	4b96      	ldr	r3, [pc, #600]	; (31a0c <__aeabi_dadd+0x380>)
   317b2:	3601      	adds	r6, #1
   317b4:	429e      	cmp	r6, r3
   317b6:	d100      	bne.n	317ba <__aeabi_dadd+0x12e>
   317b8:	e09a      	b.n	318f0 <__aeabi_dadd+0x264>
   317ba:	4645      	mov	r5, r8
   317bc:	4b94      	ldr	r3, [pc, #592]	; (31a10 <__aeabi_dadd+0x384>)
   317be:	08ff      	lsrs	r7, r7, #3
   317c0:	401c      	ands	r4, r3
   317c2:	0760      	lsls	r0, r4, #29
   317c4:	0576      	lsls	r6, r6, #21
   317c6:	0264      	lsls	r4, r4, #9
   317c8:	4307      	orrs	r7, r0
   317ca:	0b24      	lsrs	r4, r4, #12
   317cc:	0d76      	lsrs	r6, r6, #21
   317ce:	2100      	movs	r1, #0
   317d0:	0324      	lsls	r4, r4, #12
   317d2:	0b23      	lsrs	r3, r4, #12
   317d4:	0d0c      	lsrs	r4, r1, #20
   317d6:	4a8f      	ldr	r2, [pc, #572]	; (31a14 <__aeabi_dadd+0x388>)
   317d8:	0524      	lsls	r4, r4, #20
   317da:	431c      	orrs	r4, r3
   317dc:	4014      	ands	r4, r2
   317de:	0533      	lsls	r3, r6, #20
   317e0:	4323      	orrs	r3, r4
   317e2:	005b      	lsls	r3, r3, #1
   317e4:	07ed      	lsls	r5, r5, #31
   317e6:	085b      	lsrs	r3, r3, #1
   317e8:	432b      	orrs	r3, r5
   317ea:	0038      	movs	r0, r7
   317ec:	0019      	movs	r1, r3
   317ee:	bc3c      	pop	{r2, r3, r4, r5}
   317f0:	4690      	mov	r8, r2
   317f2:	4699      	mov	r9, r3
   317f4:	46a2      	mov	sl, r4
   317f6:	46ab      	mov	fp, r5
   317f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   317fa:	4664      	mov	r4, ip
   317fc:	4304      	orrs	r4, r0
   317fe:	d100      	bne.n	31802 <__aeabi_dadd+0x176>
   31800:	e211      	b.n	31c26 <__aeabi_dadd+0x59a>
   31802:	0004      	movs	r4, r0
   31804:	4667      	mov	r7, ip
   31806:	077b      	lsls	r3, r7, #29
   31808:	d1c6      	bne.n	31798 <__aeabi_dadd+0x10c>
   3180a:	4645      	mov	r5, r8
   3180c:	0760      	lsls	r0, r4, #29
   3180e:	08ff      	lsrs	r7, r7, #3
   31810:	4307      	orrs	r7, r0
   31812:	08e4      	lsrs	r4, r4, #3
   31814:	4b7d      	ldr	r3, [pc, #500]	; (31a0c <__aeabi_dadd+0x380>)
   31816:	429e      	cmp	r6, r3
   31818:	d030      	beq.n	3187c <__aeabi_dadd+0x1f0>
   3181a:	0324      	lsls	r4, r4, #12
   3181c:	0576      	lsls	r6, r6, #21
   3181e:	0b24      	lsrs	r4, r4, #12
   31820:	0d76      	lsrs	r6, r6, #21
   31822:	e7d4      	b.n	317ce <__aeabi_dadd+0x142>
   31824:	1a33      	subs	r3, r6, r0
   31826:	469a      	mov	sl, r3
   31828:	2b00      	cmp	r3, #0
   3182a:	dd78      	ble.n	3191e <__aeabi_dadd+0x292>
   3182c:	2800      	cmp	r0, #0
   3182e:	d031      	beq.n	31894 <__aeabi_dadd+0x208>
   31830:	4876      	ldr	r0, [pc, #472]	; (31a0c <__aeabi_dadd+0x380>)
   31832:	4286      	cmp	r6, r0
   31834:	d0ae      	beq.n	31794 <__aeabi_dadd+0x108>
   31836:	2080      	movs	r0, #128	; 0x80
   31838:	0400      	lsls	r0, r0, #16
   3183a:	4301      	orrs	r1, r0
   3183c:	4653      	mov	r3, sl
   3183e:	2b38      	cmp	r3, #56	; 0x38
   31840:	dc00      	bgt.n	31844 <__aeabi_dadd+0x1b8>
   31842:	e0e9      	b.n	31a18 <__aeabi_dadd+0x38c>
   31844:	430a      	orrs	r2, r1
   31846:	1e51      	subs	r1, r2, #1
   31848:	418a      	sbcs	r2, r1
   3184a:	2100      	movs	r1, #0
   3184c:	19d2      	adds	r2, r2, r7
   3184e:	42ba      	cmp	r2, r7
   31850:	41bf      	sbcs	r7, r7
   31852:	1909      	adds	r1, r1, r4
   31854:	427c      	negs	r4, r7
   31856:	0017      	movs	r7, r2
   31858:	190c      	adds	r4, r1, r4
   3185a:	0223      	lsls	r3, r4, #8
   3185c:	d5d3      	bpl.n	31806 <__aeabi_dadd+0x17a>
   3185e:	4b6b      	ldr	r3, [pc, #428]	; (31a0c <__aeabi_dadd+0x380>)
   31860:	3601      	adds	r6, #1
   31862:	429e      	cmp	r6, r3
   31864:	d100      	bne.n	31868 <__aeabi_dadd+0x1dc>
   31866:	e13a      	b.n	31ade <__aeabi_dadd+0x452>
   31868:	2001      	movs	r0, #1
   3186a:	4b69      	ldr	r3, [pc, #420]	; (31a10 <__aeabi_dadd+0x384>)
   3186c:	401c      	ands	r4, r3
   3186e:	087b      	lsrs	r3, r7, #1
   31870:	4007      	ands	r7, r0
   31872:	431f      	orrs	r7, r3
   31874:	07e0      	lsls	r0, r4, #31
   31876:	4307      	orrs	r7, r0
   31878:	0864      	lsrs	r4, r4, #1
   3187a:	e78b      	b.n	31794 <__aeabi_dadd+0x108>
   3187c:	0023      	movs	r3, r4
   3187e:	433b      	orrs	r3, r7
   31880:	d100      	bne.n	31884 <__aeabi_dadd+0x1f8>
   31882:	e1cb      	b.n	31c1c <__aeabi_dadd+0x590>
   31884:	2280      	movs	r2, #128	; 0x80
   31886:	0312      	lsls	r2, r2, #12
   31888:	4314      	orrs	r4, r2
   3188a:	0324      	lsls	r4, r4, #12
   3188c:	0b24      	lsrs	r4, r4, #12
   3188e:	e79e      	b.n	317ce <__aeabi_dadd+0x142>
   31890:	002e      	movs	r6, r5
   31892:	e77f      	b.n	31794 <__aeabi_dadd+0x108>
   31894:	0008      	movs	r0, r1
   31896:	4310      	orrs	r0, r2
   31898:	d100      	bne.n	3189c <__aeabi_dadd+0x210>
   3189a:	e0b4      	b.n	31a06 <__aeabi_dadd+0x37a>
   3189c:	1e58      	subs	r0, r3, #1
   3189e:	2800      	cmp	r0, #0
   318a0:	d000      	beq.n	318a4 <__aeabi_dadd+0x218>
   318a2:	e0de      	b.n	31a62 <__aeabi_dadd+0x3d6>
   318a4:	18ba      	adds	r2, r7, r2
   318a6:	42ba      	cmp	r2, r7
   318a8:	419b      	sbcs	r3, r3
   318aa:	1864      	adds	r4, r4, r1
   318ac:	425b      	negs	r3, r3
   318ae:	18e4      	adds	r4, r4, r3
   318b0:	0017      	movs	r7, r2
   318b2:	2601      	movs	r6, #1
   318b4:	0223      	lsls	r3, r4, #8
   318b6:	d5a6      	bpl.n	31806 <__aeabi_dadd+0x17a>
   318b8:	2602      	movs	r6, #2
   318ba:	e7d5      	b.n	31868 <__aeabi_dadd+0x1dc>
   318bc:	2d00      	cmp	r5, #0
   318be:	d16e      	bne.n	3199e <__aeabi_dadd+0x312>
   318c0:	1c70      	adds	r0, r6, #1
   318c2:	0540      	lsls	r0, r0, #21
   318c4:	0d40      	lsrs	r0, r0, #21
   318c6:	2801      	cmp	r0, #1
   318c8:	dc00      	bgt.n	318cc <__aeabi_dadd+0x240>
   318ca:	e0f9      	b.n	31ac0 <__aeabi_dadd+0x434>
   318cc:	1ab8      	subs	r0, r7, r2
   318ce:	4684      	mov	ip, r0
   318d0:	4287      	cmp	r7, r0
   318d2:	4180      	sbcs	r0, r0
   318d4:	1ae5      	subs	r5, r4, r3
   318d6:	4240      	negs	r0, r0
   318d8:	1a2d      	subs	r5, r5, r0
   318da:	0228      	lsls	r0, r5, #8
   318dc:	d400      	bmi.n	318e0 <__aeabi_dadd+0x254>
   318de:	e089      	b.n	319f4 <__aeabi_dadd+0x368>
   318e0:	1bd7      	subs	r7, r2, r7
   318e2:	42ba      	cmp	r2, r7
   318e4:	4192      	sbcs	r2, r2
   318e6:	1b1c      	subs	r4, r3, r4
   318e8:	4252      	negs	r2, r2
   318ea:	1aa5      	subs	r5, r4, r2
   318ec:	46d8      	mov	r8, fp
   318ee:	e729      	b.n	31744 <__aeabi_dadd+0xb8>
   318f0:	4645      	mov	r5, r8
   318f2:	2400      	movs	r4, #0
   318f4:	2700      	movs	r7, #0
   318f6:	e76a      	b.n	317ce <__aeabi_dadd+0x142>
   318f8:	4c45      	ldr	r4, [pc, #276]	; (31a10 <__aeabi_dadd+0x384>)
   318fa:	1af6      	subs	r6, r6, r3
   318fc:	402c      	ands	r4, r5
   318fe:	e749      	b.n	31794 <__aeabi_dadd+0x108>
   31900:	003d      	movs	r5, r7
   31902:	3828      	subs	r0, #40	; 0x28
   31904:	4085      	lsls	r5, r0
   31906:	2700      	movs	r7, #0
   31908:	e72e      	b.n	31768 <__aeabi_dadd+0xdc>
   3190a:	0038      	movs	r0, r7
   3190c:	f001 fbd0 	bl	330b0 <__clzsi2>
   31910:	3020      	adds	r0, #32
   31912:	e71d      	b.n	31750 <__aeabi_dadd+0xc4>
   31914:	430a      	orrs	r2, r1
   31916:	1e51      	subs	r1, r2, #1
   31918:	418a      	sbcs	r2, r1
   3191a:	2100      	movs	r1, #0
   3191c:	e707      	b.n	3172e <__aeabi_dadd+0xa2>
   3191e:	2b00      	cmp	r3, #0
   31920:	d000      	beq.n	31924 <__aeabi_dadd+0x298>
   31922:	e0f3      	b.n	31b0c <__aeabi_dadd+0x480>
   31924:	1c70      	adds	r0, r6, #1
   31926:	0543      	lsls	r3, r0, #21
   31928:	0d5b      	lsrs	r3, r3, #21
   3192a:	2b01      	cmp	r3, #1
   3192c:	dc00      	bgt.n	31930 <__aeabi_dadd+0x2a4>
   3192e:	e0ad      	b.n	31a8c <__aeabi_dadd+0x400>
   31930:	4b36      	ldr	r3, [pc, #216]	; (31a0c <__aeabi_dadd+0x380>)
   31932:	4298      	cmp	r0, r3
   31934:	d100      	bne.n	31938 <__aeabi_dadd+0x2ac>
   31936:	e0d1      	b.n	31adc <__aeabi_dadd+0x450>
   31938:	18ba      	adds	r2, r7, r2
   3193a:	42ba      	cmp	r2, r7
   3193c:	41bf      	sbcs	r7, r7
   3193e:	1864      	adds	r4, r4, r1
   31940:	427f      	negs	r7, r7
   31942:	19e4      	adds	r4, r4, r7
   31944:	07e7      	lsls	r7, r4, #31
   31946:	0852      	lsrs	r2, r2, #1
   31948:	4317      	orrs	r7, r2
   3194a:	0864      	lsrs	r4, r4, #1
   3194c:	0006      	movs	r6, r0
   3194e:	e721      	b.n	31794 <__aeabi_dadd+0x108>
   31950:	482e      	ldr	r0, [pc, #184]	; (31a0c <__aeabi_dadd+0x380>)
   31952:	4285      	cmp	r5, r0
   31954:	d100      	bne.n	31958 <__aeabi_dadd+0x2cc>
   31956:	e093      	b.n	31a80 <__aeabi_dadd+0x3f4>
   31958:	001d      	movs	r5, r3
   3195a:	e6d0      	b.n	316fe <__aeabi_dadd+0x72>
   3195c:	0029      	movs	r1, r5
   3195e:	3e1f      	subs	r6, #31
   31960:	40f1      	lsrs	r1, r6
   31962:	2b20      	cmp	r3, #32
   31964:	d100      	bne.n	31968 <__aeabi_dadd+0x2dc>
   31966:	e08d      	b.n	31a84 <__aeabi_dadd+0x3f8>
   31968:	2240      	movs	r2, #64	; 0x40
   3196a:	1ad3      	subs	r3, r2, r3
   3196c:	409d      	lsls	r5, r3
   3196e:	432f      	orrs	r7, r5
   31970:	1e7d      	subs	r5, r7, #1
   31972:	41af      	sbcs	r7, r5
   31974:	2400      	movs	r4, #0
   31976:	430f      	orrs	r7, r1
   31978:	2600      	movs	r6, #0
   3197a:	e744      	b.n	31806 <__aeabi_dadd+0x17a>
   3197c:	002b      	movs	r3, r5
   3197e:	0008      	movs	r0, r1
   31980:	3b20      	subs	r3, #32
   31982:	40d8      	lsrs	r0, r3
   31984:	0003      	movs	r3, r0
   31986:	2d20      	cmp	r5, #32
   31988:	d100      	bne.n	3198c <__aeabi_dadd+0x300>
   3198a:	e07d      	b.n	31a88 <__aeabi_dadd+0x3fc>
   3198c:	2040      	movs	r0, #64	; 0x40
   3198e:	1b45      	subs	r5, r0, r5
   31990:	40a9      	lsls	r1, r5
   31992:	430a      	orrs	r2, r1
   31994:	1e51      	subs	r1, r2, #1
   31996:	418a      	sbcs	r2, r1
   31998:	2100      	movs	r1, #0
   3199a:	431a      	orrs	r2, r3
   3199c:	e6c7      	b.n	3172e <__aeabi_dadd+0xa2>
   3199e:	2e00      	cmp	r6, #0
   319a0:	d050      	beq.n	31a44 <__aeabi_dadd+0x3b8>
   319a2:	4e1a      	ldr	r6, [pc, #104]	; (31a0c <__aeabi_dadd+0x380>)
   319a4:	42b0      	cmp	r0, r6
   319a6:	d057      	beq.n	31a58 <__aeabi_dadd+0x3cc>
   319a8:	2680      	movs	r6, #128	; 0x80
   319aa:	426b      	negs	r3, r5
   319ac:	4699      	mov	r9, r3
   319ae:	0436      	lsls	r6, r6, #16
   319b0:	4334      	orrs	r4, r6
   319b2:	464b      	mov	r3, r9
   319b4:	2b38      	cmp	r3, #56	; 0x38
   319b6:	dd00      	ble.n	319ba <__aeabi_dadd+0x32e>
   319b8:	e0d6      	b.n	31b68 <__aeabi_dadd+0x4dc>
   319ba:	2b1f      	cmp	r3, #31
   319bc:	dd00      	ble.n	319c0 <__aeabi_dadd+0x334>
   319be:	e135      	b.n	31c2c <__aeabi_dadd+0x5a0>
   319c0:	2620      	movs	r6, #32
   319c2:	1af5      	subs	r5, r6, r3
   319c4:	0026      	movs	r6, r4
   319c6:	40ae      	lsls	r6, r5
   319c8:	46b2      	mov	sl, r6
   319ca:	003e      	movs	r6, r7
   319cc:	40de      	lsrs	r6, r3
   319ce:	46ac      	mov	ip, r5
   319d0:	0035      	movs	r5, r6
   319d2:	4656      	mov	r6, sl
   319d4:	432e      	orrs	r6, r5
   319d6:	4665      	mov	r5, ip
   319d8:	40af      	lsls	r7, r5
   319da:	1e7d      	subs	r5, r7, #1
   319dc:	41af      	sbcs	r7, r5
   319de:	40dc      	lsrs	r4, r3
   319e0:	4337      	orrs	r7, r6
   319e2:	1bd7      	subs	r7, r2, r7
   319e4:	42ba      	cmp	r2, r7
   319e6:	4192      	sbcs	r2, r2
   319e8:	1b0c      	subs	r4, r1, r4
   319ea:	4252      	negs	r2, r2
   319ec:	1aa4      	subs	r4, r4, r2
   319ee:	0006      	movs	r6, r0
   319f0:	46d8      	mov	r8, fp
   319f2:	e6a3      	b.n	3173c <__aeabi_dadd+0xb0>
   319f4:	4664      	mov	r4, ip
   319f6:	4667      	mov	r7, ip
   319f8:	432c      	orrs	r4, r5
   319fa:	d000      	beq.n	319fe <__aeabi_dadd+0x372>
   319fc:	e6a2      	b.n	31744 <__aeabi_dadd+0xb8>
   319fe:	2500      	movs	r5, #0
   31a00:	2600      	movs	r6, #0
   31a02:	2700      	movs	r7, #0
   31a04:	e706      	b.n	31814 <__aeabi_dadd+0x188>
   31a06:	001e      	movs	r6, r3
   31a08:	e6c4      	b.n	31794 <__aeabi_dadd+0x108>
   31a0a:	46c0      	nop			; (mov r8, r8)
   31a0c:	000007ff 	.word	0x000007ff
   31a10:	ff7fffff 	.word	0xff7fffff
   31a14:	800fffff 	.word	0x800fffff
   31a18:	2b1f      	cmp	r3, #31
   31a1a:	dc63      	bgt.n	31ae4 <__aeabi_dadd+0x458>
   31a1c:	2020      	movs	r0, #32
   31a1e:	1ac3      	subs	r3, r0, r3
   31a20:	0008      	movs	r0, r1
   31a22:	4098      	lsls	r0, r3
   31a24:	469c      	mov	ip, r3
   31a26:	4683      	mov	fp, r0
   31a28:	4653      	mov	r3, sl
   31a2a:	0010      	movs	r0, r2
   31a2c:	40d8      	lsrs	r0, r3
   31a2e:	0003      	movs	r3, r0
   31a30:	4658      	mov	r0, fp
   31a32:	4318      	orrs	r0, r3
   31a34:	4663      	mov	r3, ip
   31a36:	409a      	lsls	r2, r3
   31a38:	1e53      	subs	r3, r2, #1
   31a3a:	419a      	sbcs	r2, r3
   31a3c:	4653      	mov	r3, sl
   31a3e:	4302      	orrs	r2, r0
   31a40:	40d9      	lsrs	r1, r3
   31a42:	e703      	b.n	3184c <__aeabi_dadd+0x1c0>
   31a44:	0026      	movs	r6, r4
   31a46:	433e      	orrs	r6, r7
   31a48:	d006      	beq.n	31a58 <__aeabi_dadd+0x3cc>
   31a4a:	43eb      	mvns	r3, r5
   31a4c:	4699      	mov	r9, r3
   31a4e:	2b00      	cmp	r3, #0
   31a50:	d0c7      	beq.n	319e2 <__aeabi_dadd+0x356>
   31a52:	4e94      	ldr	r6, [pc, #592]	; (31ca4 <__aeabi_dadd+0x618>)
   31a54:	42b0      	cmp	r0, r6
   31a56:	d1ac      	bne.n	319b2 <__aeabi_dadd+0x326>
   31a58:	000c      	movs	r4, r1
   31a5a:	0017      	movs	r7, r2
   31a5c:	0006      	movs	r6, r0
   31a5e:	46d8      	mov	r8, fp
   31a60:	e698      	b.n	31794 <__aeabi_dadd+0x108>
   31a62:	4b90      	ldr	r3, [pc, #576]	; (31ca4 <__aeabi_dadd+0x618>)
   31a64:	459a      	cmp	sl, r3
   31a66:	d00b      	beq.n	31a80 <__aeabi_dadd+0x3f4>
   31a68:	4682      	mov	sl, r0
   31a6a:	e6e7      	b.n	3183c <__aeabi_dadd+0x1b0>
   31a6c:	2800      	cmp	r0, #0
   31a6e:	d000      	beq.n	31a72 <__aeabi_dadd+0x3e6>
   31a70:	e09e      	b.n	31bb0 <__aeabi_dadd+0x524>
   31a72:	0018      	movs	r0, r3
   31a74:	4310      	orrs	r0, r2
   31a76:	d100      	bne.n	31a7a <__aeabi_dadd+0x3ee>
   31a78:	e0e9      	b.n	31c4e <__aeabi_dadd+0x5c2>
   31a7a:	001c      	movs	r4, r3
   31a7c:	0017      	movs	r7, r2
   31a7e:	46d8      	mov	r8, fp
   31a80:	4e88      	ldr	r6, [pc, #544]	; (31ca4 <__aeabi_dadd+0x618>)
   31a82:	e687      	b.n	31794 <__aeabi_dadd+0x108>
   31a84:	2500      	movs	r5, #0
   31a86:	e772      	b.n	3196e <__aeabi_dadd+0x2e2>
   31a88:	2100      	movs	r1, #0
   31a8a:	e782      	b.n	31992 <__aeabi_dadd+0x306>
   31a8c:	0023      	movs	r3, r4
   31a8e:	433b      	orrs	r3, r7
   31a90:	2e00      	cmp	r6, #0
   31a92:	d000      	beq.n	31a96 <__aeabi_dadd+0x40a>
   31a94:	e0ab      	b.n	31bee <__aeabi_dadd+0x562>
   31a96:	2b00      	cmp	r3, #0
   31a98:	d100      	bne.n	31a9c <__aeabi_dadd+0x410>
   31a9a:	e0e7      	b.n	31c6c <__aeabi_dadd+0x5e0>
   31a9c:	000b      	movs	r3, r1
   31a9e:	4313      	orrs	r3, r2
   31aa0:	d100      	bne.n	31aa4 <__aeabi_dadd+0x418>
   31aa2:	e677      	b.n	31794 <__aeabi_dadd+0x108>
   31aa4:	18ba      	adds	r2, r7, r2
   31aa6:	42ba      	cmp	r2, r7
   31aa8:	41bf      	sbcs	r7, r7
   31aaa:	1864      	adds	r4, r4, r1
   31aac:	427f      	negs	r7, r7
   31aae:	19e4      	adds	r4, r4, r7
   31ab0:	0223      	lsls	r3, r4, #8
   31ab2:	d400      	bmi.n	31ab6 <__aeabi_dadd+0x42a>
   31ab4:	e0f2      	b.n	31c9c <__aeabi_dadd+0x610>
   31ab6:	4b7c      	ldr	r3, [pc, #496]	; (31ca8 <__aeabi_dadd+0x61c>)
   31ab8:	0017      	movs	r7, r2
   31aba:	401c      	ands	r4, r3
   31abc:	0006      	movs	r6, r0
   31abe:	e669      	b.n	31794 <__aeabi_dadd+0x108>
   31ac0:	0020      	movs	r0, r4
   31ac2:	4338      	orrs	r0, r7
   31ac4:	2e00      	cmp	r6, #0
   31ac6:	d1d1      	bne.n	31a6c <__aeabi_dadd+0x3e0>
   31ac8:	2800      	cmp	r0, #0
   31aca:	d15b      	bne.n	31b84 <__aeabi_dadd+0x4f8>
   31acc:	001c      	movs	r4, r3
   31ace:	4314      	orrs	r4, r2
   31ad0:	d100      	bne.n	31ad4 <__aeabi_dadd+0x448>
   31ad2:	e0a8      	b.n	31c26 <__aeabi_dadd+0x59a>
   31ad4:	001c      	movs	r4, r3
   31ad6:	0017      	movs	r7, r2
   31ad8:	46d8      	mov	r8, fp
   31ada:	e65b      	b.n	31794 <__aeabi_dadd+0x108>
   31adc:	0006      	movs	r6, r0
   31ade:	2400      	movs	r4, #0
   31ae0:	2700      	movs	r7, #0
   31ae2:	e697      	b.n	31814 <__aeabi_dadd+0x188>
   31ae4:	4650      	mov	r0, sl
   31ae6:	000b      	movs	r3, r1
   31ae8:	3820      	subs	r0, #32
   31aea:	40c3      	lsrs	r3, r0
   31aec:	4699      	mov	r9, r3
   31aee:	4653      	mov	r3, sl
   31af0:	2b20      	cmp	r3, #32
   31af2:	d100      	bne.n	31af6 <__aeabi_dadd+0x46a>
   31af4:	e095      	b.n	31c22 <__aeabi_dadd+0x596>
   31af6:	2340      	movs	r3, #64	; 0x40
   31af8:	4650      	mov	r0, sl
   31afa:	1a1b      	subs	r3, r3, r0
   31afc:	4099      	lsls	r1, r3
   31afe:	430a      	orrs	r2, r1
   31b00:	1e51      	subs	r1, r2, #1
   31b02:	418a      	sbcs	r2, r1
   31b04:	464b      	mov	r3, r9
   31b06:	2100      	movs	r1, #0
   31b08:	431a      	orrs	r2, r3
   31b0a:	e69f      	b.n	3184c <__aeabi_dadd+0x1c0>
   31b0c:	2e00      	cmp	r6, #0
   31b0e:	d130      	bne.n	31b72 <__aeabi_dadd+0x4e6>
   31b10:	0026      	movs	r6, r4
   31b12:	433e      	orrs	r6, r7
   31b14:	d067      	beq.n	31be6 <__aeabi_dadd+0x55a>
   31b16:	43db      	mvns	r3, r3
   31b18:	469a      	mov	sl, r3
   31b1a:	2b00      	cmp	r3, #0
   31b1c:	d01c      	beq.n	31b58 <__aeabi_dadd+0x4cc>
   31b1e:	4e61      	ldr	r6, [pc, #388]	; (31ca4 <__aeabi_dadd+0x618>)
   31b20:	42b0      	cmp	r0, r6
   31b22:	d060      	beq.n	31be6 <__aeabi_dadd+0x55a>
   31b24:	4653      	mov	r3, sl
   31b26:	2b38      	cmp	r3, #56	; 0x38
   31b28:	dd00      	ble.n	31b2c <__aeabi_dadd+0x4a0>
   31b2a:	e096      	b.n	31c5a <__aeabi_dadd+0x5ce>
   31b2c:	2b1f      	cmp	r3, #31
   31b2e:	dd00      	ble.n	31b32 <__aeabi_dadd+0x4a6>
   31b30:	e09f      	b.n	31c72 <__aeabi_dadd+0x5e6>
   31b32:	2620      	movs	r6, #32
   31b34:	1af3      	subs	r3, r6, r3
   31b36:	0026      	movs	r6, r4
   31b38:	409e      	lsls	r6, r3
   31b3a:	469c      	mov	ip, r3
   31b3c:	46b3      	mov	fp, r6
   31b3e:	4653      	mov	r3, sl
   31b40:	003e      	movs	r6, r7
   31b42:	40de      	lsrs	r6, r3
   31b44:	0033      	movs	r3, r6
   31b46:	465e      	mov	r6, fp
   31b48:	431e      	orrs	r6, r3
   31b4a:	4663      	mov	r3, ip
   31b4c:	409f      	lsls	r7, r3
   31b4e:	1e7b      	subs	r3, r7, #1
   31b50:	419f      	sbcs	r7, r3
   31b52:	4653      	mov	r3, sl
   31b54:	40dc      	lsrs	r4, r3
   31b56:	4337      	orrs	r7, r6
   31b58:	18bf      	adds	r7, r7, r2
   31b5a:	4297      	cmp	r7, r2
   31b5c:	4192      	sbcs	r2, r2
   31b5e:	1864      	adds	r4, r4, r1
   31b60:	4252      	negs	r2, r2
   31b62:	18a4      	adds	r4, r4, r2
   31b64:	0006      	movs	r6, r0
   31b66:	e678      	b.n	3185a <__aeabi_dadd+0x1ce>
   31b68:	4327      	orrs	r7, r4
   31b6a:	1e7c      	subs	r4, r7, #1
   31b6c:	41a7      	sbcs	r7, r4
   31b6e:	2400      	movs	r4, #0
   31b70:	e737      	b.n	319e2 <__aeabi_dadd+0x356>
   31b72:	4e4c      	ldr	r6, [pc, #304]	; (31ca4 <__aeabi_dadd+0x618>)
   31b74:	42b0      	cmp	r0, r6
   31b76:	d036      	beq.n	31be6 <__aeabi_dadd+0x55a>
   31b78:	2680      	movs	r6, #128	; 0x80
   31b7a:	425b      	negs	r3, r3
   31b7c:	0436      	lsls	r6, r6, #16
   31b7e:	469a      	mov	sl, r3
   31b80:	4334      	orrs	r4, r6
   31b82:	e7cf      	b.n	31b24 <__aeabi_dadd+0x498>
   31b84:	0018      	movs	r0, r3
   31b86:	4310      	orrs	r0, r2
   31b88:	d100      	bne.n	31b8c <__aeabi_dadd+0x500>
   31b8a:	e603      	b.n	31794 <__aeabi_dadd+0x108>
   31b8c:	1ab8      	subs	r0, r7, r2
   31b8e:	4684      	mov	ip, r0
   31b90:	4567      	cmp	r7, ip
   31b92:	41ad      	sbcs	r5, r5
   31b94:	1ae0      	subs	r0, r4, r3
   31b96:	426d      	negs	r5, r5
   31b98:	1b40      	subs	r0, r0, r5
   31b9a:	0205      	lsls	r5, r0, #8
   31b9c:	d400      	bmi.n	31ba0 <__aeabi_dadd+0x514>
   31b9e:	e62c      	b.n	317fa <__aeabi_dadd+0x16e>
   31ba0:	1bd7      	subs	r7, r2, r7
   31ba2:	42ba      	cmp	r2, r7
   31ba4:	4192      	sbcs	r2, r2
   31ba6:	1b1c      	subs	r4, r3, r4
   31ba8:	4252      	negs	r2, r2
   31baa:	1aa4      	subs	r4, r4, r2
   31bac:	46d8      	mov	r8, fp
   31bae:	e5f1      	b.n	31794 <__aeabi_dadd+0x108>
   31bb0:	0018      	movs	r0, r3
   31bb2:	4310      	orrs	r0, r2
   31bb4:	d100      	bne.n	31bb8 <__aeabi_dadd+0x52c>
   31bb6:	e763      	b.n	31a80 <__aeabi_dadd+0x3f4>
   31bb8:	08f8      	lsrs	r0, r7, #3
   31bba:	0767      	lsls	r7, r4, #29
   31bbc:	4307      	orrs	r7, r0
   31bbe:	2080      	movs	r0, #128	; 0x80
   31bc0:	08e4      	lsrs	r4, r4, #3
   31bc2:	0300      	lsls	r0, r0, #12
   31bc4:	4204      	tst	r4, r0
   31bc6:	d008      	beq.n	31bda <__aeabi_dadd+0x54e>
   31bc8:	08dd      	lsrs	r5, r3, #3
   31bca:	4205      	tst	r5, r0
   31bcc:	d105      	bne.n	31bda <__aeabi_dadd+0x54e>
   31bce:	08d2      	lsrs	r2, r2, #3
   31bd0:	0759      	lsls	r1, r3, #29
   31bd2:	4311      	orrs	r1, r2
   31bd4:	000f      	movs	r7, r1
   31bd6:	002c      	movs	r4, r5
   31bd8:	46d8      	mov	r8, fp
   31bda:	0f7b      	lsrs	r3, r7, #29
   31bdc:	00e4      	lsls	r4, r4, #3
   31bde:	431c      	orrs	r4, r3
   31be0:	00ff      	lsls	r7, r7, #3
   31be2:	4e30      	ldr	r6, [pc, #192]	; (31ca4 <__aeabi_dadd+0x618>)
   31be4:	e5d6      	b.n	31794 <__aeabi_dadd+0x108>
   31be6:	000c      	movs	r4, r1
   31be8:	0017      	movs	r7, r2
   31bea:	0006      	movs	r6, r0
   31bec:	e5d2      	b.n	31794 <__aeabi_dadd+0x108>
   31bee:	2b00      	cmp	r3, #0
   31bf0:	d038      	beq.n	31c64 <__aeabi_dadd+0x5d8>
   31bf2:	000b      	movs	r3, r1
   31bf4:	4313      	orrs	r3, r2
   31bf6:	d100      	bne.n	31bfa <__aeabi_dadd+0x56e>
   31bf8:	e742      	b.n	31a80 <__aeabi_dadd+0x3f4>
   31bfa:	08f8      	lsrs	r0, r7, #3
   31bfc:	0767      	lsls	r7, r4, #29
   31bfe:	4307      	orrs	r7, r0
   31c00:	2080      	movs	r0, #128	; 0x80
   31c02:	08e4      	lsrs	r4, r4, #3
   31c04:	0300      	lsls	r0, r0, #12
   31c06:	4204      	tst	r4, r0
   31c08:	d0e7      	beq.n	31bda <__aeabi_dadd+0x54e>
   31c0a:	08cb      	lsrs	r3, r1, #3
   31c0c:	4203      	tst	r3, r0
   31c0e:	d1e4      	bne.n	31bda <__aeabi_dadd+0x54e>
   31c10:	08d2      	lsrs	r2, r2, #3
   31c12:	0749      	lsls	r1, r1, #29
   31c14:	4311      	orrs	r1, r2
   31c16:	000f      	movs	r7, r1
   31c18:	001c      	movs	r4, r3
   31c1a:	e7de      	b.n	31bda <__aeabi_dadd+0x54e>
   31c1c:	2700      	movs	r7, #0
   31c1e:	2400      	movs	r4, #0
   31c20:	e5d5      	b.n	317ce <__aeabi_dadd+0x142>
   31c22:	2100      	movs	r1, #0
   31c24:	e76b      	b.n	31afe <__aeabi_dadd+0x472>
   31c26:	2500      	movs	r5, #0
   31c28:	2700      	movs	r7, #0
   31c2a:	e5f3      	b.n	31814 <__aeabi_dadd+0x188>
   31c2c:	464e      	mov	r6, r9
   31c2e:	0025      	movs	r5, r4
   31c30:	3e20      	subs	r6, #32
   31c32:	40f5      	lsrs	r5, r6
   31c34:	464b      	mov	r3, r9
   31c36:	002e      	movs	r6, r5
   31c38:	2b20      	cmp	r3, #32
   31c3a:	d02d      	beq.n	31c98 <__aeabi_dadd+0x60c>
   31c3c:	2540      	movs	r5, #64	; 0x40
   31c3e:	1aed      	subs	r5, r5, r3
   31c40:	40ac      	lsls	r4, r5
   31c42:	4327      	orrs	r7, r4
   31c44:	1e7c      	subs	r4, r7, #1
   31c46:	41a7      	sbcs	r7, r4
   31c48:	2400      	movs	r4, #0
   31c4a:	4337      	orrs	r7, r6
   31c4c:	e6c9      	b.n	319e2 <__aeabi_dadd+0x356>
   31c4e:	2480      	movs	r4, #128	; 0x80
   31c50:	2500      	movs	r5, #0
   31c52:	0324      	lsls	r4, r4, #12
   31c54:	4e13      	ldr	r6, [pc, #76]	; (31ca4 <__aeabi_dadd+0x618>)
   31c56:	2700      	movs	r7, #0
   31c58:	e5dc      	b.n	31814 <__aeabi_dadd+0x188>
   31c5a:	4327      	orrs	r7, r4
   31c5c:	1e7c      	subs	r4, r7, #1
   31c5e:	41a7      	sbcs	r7, r4
   31c60:	2400      	movs	r4, #0
   31c62:	e779      	b.n	31b58 <__aeabi_dadd+0x4cc>
   31c64:	000c      	movs	r4, r1
   31c66:	0017      	movs	r7, r2
   31c68:	4e0e      	ldr	r6, [pc, #56]	; (31ca4 <__aeabi_dadd+0x618>)
   31c6a:	e593      	b.n	31794 <__aeabi_dadd+0x108>
   31c6c:	000c      	movs	r4, r1
   31c6e:	0017      	movs	r7, r2
   31c70:	e590      	b.n	31794 <__aeabi_dadd+0x108>
   31c72:	4656      	mov	r6, sl
   31c74:	0023      	movs	r3, r4
   31c76:	3e20      	subs	r6, #32
   31c78:	40f3      	lsrs	r3, r6
   31c7a:	4699      	mov	r9, r3
   31c7c:	4653      	mov	r3, sl
   31c7e:	2b20      	cmp	r3, #32
   31c80:	d00e      	beq.n	31ca0 <__aeabi_dadd+0x614>
   31c82:	2340      	movs	r3, #64	; 0x40
   31c84:	4656      	mov	r6, sl
   31c86:	1b9b      	subs	r3, r3, r6
   31c88:	409c      	lsls	r4, r3
   31c8a:	4327      	orrs	r7, r4
   31c8c:	1e7c      	subs	r4, r7, #1
   31c8e:	41a7      	sbcs	r7, r4
   31c90:	464b      	mov	r3, r9
   31c92:	2400      	movs	r4, #0
   31c94:	431f      	orrs	r7, r3
   31c96:	e75f      	b.n	31b58 <__aeabi_dadd+0x4cc>
   31c98:	2400      	movs	r4, #0
   31c9a:	e7d2      	b.n	31c42 <__aeabi_dadd+0x5b6>
   31c9c:	0017      	movs	r7, r2
   31c9e:	e5b2      	b.n	31806 <__aeabi_dadd+0x17a>
   31ca0:	2400      	movs	r4, #0
   31ca2:	e7f2      	b.n	31c8a <__aeabi_dadd+0x5fe>
   31ca4:	000007ff 	.word	0x000007ff
   31ca8:	ff7fffff 	.word	0xff7fffff

00031cac <__aeabi_ddiv>:
   31cac:	b5f0      	push	{r4, r5, r6, r7, lr}
   31cae:	4657      	mov	r7, sl
   31cb0:	4645      	mov	r5, r8
   31cb2:	46de      	mov	lr, fp
   31cb4:	464e      	mov	r6, r9
   31cb6:	b5e0      	push	{r5, r6, r7, lr}
   31cb8:	004c      	lsls	r4, r1, #1
   31cba:	030e      	lsls	r6, r1, #12
   31cbc:	b087      	sub	sp, #28
   31cbe:	4683      	mov	fp, r0
   31cc0:	4692      	mov	sl, r2
   31cc2:	001d      	movs	r5, r3
   31cc4:	4680      	mov	r8, r0
   31cc6:	0b36      	lsrs	r6, r6, #12
   31cc8:	0d64      	lsrs	r4, r4, #21
   31cca:	0fcf      	lsrs	r7, r1, #31
   31ccc:	2c00      	cmp	r4, #0
   31cce:	d04f      	beq.n	31d70 <__aeabi_ddiv+0xc4>
   31cd0:	4b6f      	ldr	r3, [pc, #444]	; (31e90 <__aeabi_ddiv+0x1e4>)
   31cd2:	429c      	cmp	r4, r3
   31cd4:	d035      	beq.n	31d42 <__aeabi_ddiv+0x96>
   31cd6:	2380      	movs	r3, #128	; 0x80
   31cd8:	0f42      	lsrs	r2, r0, #29
   31cda:	041b      	lsls	r3, r3, #16
   31cdc:	00f6      	lsls	r6, r6, #3
   31cde:	4313      	orrs	r3, r2
   31ce0:	4333      	orrs	r3, r6
   31ce2:	4699      	mov	r9, r3
   31ce4:	00c3      	lsls	r3, r0, #3
   31ce6:	4698      	mov	r8, r3
   31ce8:	4b6a      	ldr	r3, [pc, #424]	; (31e94 <__aeabi_ddiv+0x1e8>)
   31cea:	2600      	movs	r6, #0
   31cec:	469c      	mov	ip, r3
   31cee:	2300      	movs	r3, #0
   31cf0:	4464      	add	r4, ip
   31cf2:	9303      	str	r3, [sp, #12]
   31cf4:	032b      	lsls	r3, r5, #12
   31cf6:	0b1b      	lsrs	r3, r3, #12
   31cf8:	469b      	mov	fp, r3
   31cfa:	006b      	lsls	r3, r5, #1
   31cfc:	0fed      	lsrs	r5, r5, #31
   31cfe:	4650      	mov	r0, sl
   31d00:	0d5b      	lsrs	r3, r3, #21
   31d02:	9501      	str	r5, [sp, #4]
   31d04:	d05e      	beq.n	31dc4 <__aeabi_ddiv+0x118>
   31d06:	4a62      	ldr	r2, [pc, #392]	; (31e90 <__aeabi_ddiv+0x1e4>)
   31d08:	4293      	cmp	r3, r2
   31d0a:	d053      	beq.n	31db4 <__aeabi_ddiv+0x108>
   31d0c:	465a      	mov	r2, fp
   31d0e:	00d1      	lsls	r1, r2, #3
   31d10:	2280      	movs	r2, #128	; 0x80
   31d12:	0f40      	lsrs	r0, r0, #29
   31d14:	0412      	lsls	r2, r2, #16
   31d16:	4302      	orrs	r2, r0
   31d18:	430a      	orrs	r2, r1
   31d1a:	4693      	mov	fp, r2
   31d1c:	4652      	mov	r2, sl
   31d1e:	00d1      	lsls	r1, r2, #3
   31d20:	4a5c      	ldr	r2, [pc, #368]	; (31e94 <__aeabi_ddiv+0x1e8>)
   31d22:	4694      	mov	ip, r2
   31d24:	2200      	movs	r2, #0
   31d26:	4463      	add	r3, ip
   31d28:	0038      	movs	r0, r7
   31d2a:	4068      	eors	r0, r5
   31d2c:	4684      	mov	ip, r0
   31d2e:	9002      	str	r0, [sp, #8]
   31d30:	1ae4      	subs	r4, r4, r3
   31d32:	4316      	orrs	r6, r2
   31d34:	2e0f      	cmp	r6, #15
   31d36:	d900      	bls.n	31d3a <__aeabi_ddiv+0x8e>
   31d38:	e0b4      	b.n	31ea4 <__aeabi_ddiv+0x1f8>
   31d3a:	4b57      	ldr	r3, [pc, #348]	; (31e98 <__aeabi_ddiv+0x1ec>)
   31d3c:	00b6      	lsls	r6, r6, #2
   31d3e:	599b      	ldr	r3, [r3, r6]
   31d40:	469f      	mov	pc, r3
   31d42:	0003      	movs	r3, r0
   31d44:	4333      	orrs	r3, r6
   31d46:	4699      	mov	r9, r3
   31d48:	d16c      	bne.n	31e24 <__aeabi_ddiv+0x178>
   31d4a:	2300      	movs	r3, #0
   31d4c:	4698      	mov	r8, r3
   31d4e:	3302      	adds	r3, #2
   31d50:	2608      	movs	r6, #8
   31d52:	9303      	str	r3, [sp, #12]
   31d54:	e7ce      	b.n	31cf4 <__aeabi_ddiv+0x48>
   31d56:	46cb      	mov	fp, r9
   31d58:	4641      	mov	r1, r8
   31d5a:	9a03      	ldr	r2, [sp, #12]
   31d5c:	9701      	str	r7, [sp, #4]
   31d5e:	2a02      	cmp	r2, #2
   31d60:	d165      	bne.n	31e2e <__aeabi_ddiv+0x182>
   31d62:	9b01      	ldr	r3, [sp, #4]
   31d64:	4c4a      	ldr	r4, [pc, #296]	; (31e90 <__aeabi_ddiv+0x1e4>)
   31d66:	469c      	mov	ip, r3
   31d68:	2300      	movs	r3, #0
   31d6a:	2200      	movs	r2, #0
   31d6c:	4698      	mov	r8, r3
   31d6e:	e06b      	b.n	31e48 <__aeabi_ddiv+0x19c>
   31d70:	0003      	movs	r3, r0
   31d72:	4333      	orrs	r3, r6
   31d74:	4699      	mov	r9, r3
   31d76:	d04e      	beq.n	31e16 <__aeabi_ddiv+0x16a>
   31d78:	2e00      	cmp	r6, #0
   31d7a:	d100      	bne.n	31d7e <__aeabi_ddiv+0xd2>
   31d7c:	e1bc      	b.n	320f8 <__aeabi_ddiv+0x44c>
   31d7e:	0030      	movs	r0, r6
   31d80:	f001 f996 	bl	330b0 <__clzsi2>
   31d84:	0003      	movs	r3, r0
   31d86:	3b0b      	subs	r3, #11
   31d88:	2b1c      	cmp	r3, #28
   31d8a:	dd00      	ble.n	31d8e <__aeabi_ddiv+0xe2>
   31d8c:	e1ac      	b.n	320e8 <__aeabi_ddiv+0x43c>
   31d8e:	221d      	movs	r2, #29
   31d90:	1ad3      	subs	r3, r2, r3
   31d92:	465a      	mov	r2, fp
   31d94:	0001      	movs	r1, r0
   31d96:	40da      	lsrs	r2, r3
   31d98:	3908      	subs	r1, #8
   31d9a:	408e      	lsls	r6, r1
   31d9c:	0013      	movs	r3, r2
   31d9e:	4333      	orrs	r3, r6
   31da0:	4699      	mov	r9, r3
   31da2:	465b      	mov	r3, fp
   31da4:	408b      	lsls	r3, r1
   31da6:	4698      	mov	r8, r3
   31da8:	2300      	movs	r3, #0
   31daa:	4c3c      	ldr	r4, [pc, #240]	; (31e9c <__aeabi_ddiv+0x1f0>)
   31dac:	2600      	movs	r6, #0
   31dae:	1a24      	subs	r4, r4, r0
   31db0:	9303      	str	r3, [sp, #12]
   31db2:	e79f      	b.n	31cf4 <__aeabi_ddiv+0x48>
   31db4:	4651      	mov	r1, sl
   31db6:	465a      	mov	r2, fp
   31db8:	4311      	orrs	r1, r2
   31dba:	d129      	bne.n	31e10 <__aeabi_ddiv+0x164>
   31dbc:	2200      	movs	r2, #0
   31dbe:	4693      	mov	fp, r2
   31dc0:	3202      	adds	r2, #2
   31dc2:	e7b1      	b.n	31d28 <__aeabi_ddiv+0x7c>
   31dc4:	4659      	mov	r1, fp
   31dc6:	4301      	orrs	r1, r0
   31dc8:	d01e      	beq.n	31e08 <__aeabi_ddiv+0x15c>
   31dca:	465b      	mov	r3, fp
   31dcc:	2b00      	cmp	r3, #0
   31dce:	d100      	bne.n	31dd2 <__aeabi_ddiv+0x126>
   31dd0:	e19e      	b.n	32110 <__aeabi_ddiv+0x464>
   31dd2:	4658      	mov	r0, fp
   31dd4:	f001 f96c 	bl	330b0 <__clzsi2>
   31dd8:	0003      	movs	r3, r0
   31dda:	3b0b      	subs	r3, #11
   31ddc:	2b1c      	cmp	r3, #28
   31dde:	dd00      	ble.n	31de2 <__aeabi_ddiv+0x136>
   31de0:	e18f      	b.n	32102 <__aeabi_ddiv+0x456>
   31de2:	0002      	movs	r2, r0
   31de4:	4659      	mov	r1, fp
   31de6:	3a08      	subs	r2, #8
   31de8:	4091      	lsls	r1, r2
   31dea:	468b      	mov	fp, r1
   31dec:	211d      	movs	r1, #29
   31dee:	1acb      	subs	r3, r1, r3
   31df0:	4651      	mov	r1, sl
   31df2:	40d9      	lsrs	r1, r3
   31df4:	000b      	movs	r3, r1
   31df6:	4659      	mov	r1, fp
   31df8:	430b      	orrs	r3, r1
   31dfa:	4651      	mov	r1, sl
   31dfc:	469b      	mov	fp, r3
   31dfe:	4091      	lsls	r1, r2
   31e00:	4b26      	ldr	r3, [pc, #152]	; (31e9c <__aeabi_ddiv+0x1f0>)
   31e02:	2200      	movs	r2, #0
   31e04:	1a1b      	subs	r3, r3, r0
   31e06:	e78f      	b.n	31d28 <__aeabi_ddiv+0x7c>
   31e08:	2300      	movs	r3, #0
   31e0a:	2201      	movs	r2, #1
   31e0c:	469b      	mov	fp, r3
   31e0e:	e78b      	b.n	31d28 <__aeabi_ddiv+0x7c>
   31e10:	4651      	mov	r1, sl
   31e12:	2203      	movs	r2, #3
   31e14:	e788      	b.n	31d28 <__aeabi_ddiv+0x7c>
   31e16:	2300      	movs	r3, #0
   31e18:	4698      	mov	r8, r3
   31e1a:	3301      	adds	r3, #1
   31e1c:	2604      	movs	r6, #4
   31e1e:	2400      	movs	r4, #0
   31e20:	9303      	str	r3, [sp, #12]
   31e22:	e767      	b.n	31cf4 <__aeabi_ddiv+0x48>
   31e24:	2303      	movs	r3, #3
   31e26:	46b1      	mov	r9, r6
   31e28:	9303      	str	r3, [sp, #12]
   31e2a:	260c      	movs	r6, #12
   31e2c:	e762      	b.n	31cf4 <__aeabi_ddiv+0x48>
   31e2e:	2a03      	cmp	r2, #3
   31e30:	d100      	bne.n	31e34 <__aeabi_ddiv+0x188>
   31e32:	e25c      	b.n	322ee <__aeabi_ddiv+0x642>
   31e34:	9b01      	ldr	r3, [sp, #4]
   31e36:	2a01      	cmp	r2, #1
   31e38:	d000      	beq.n	31e3c <__aeabi_ddiv+0x190>
   31e3a:	e1e4      	b.n	32206 <__aeabi_ddiv+0x55a>
   31e3c:	4013      	ands	r3, r2
   31e3e:	469c      	mov	ip, r3
   31e40:	2300      	movs	r3, #0
   31e42:	2400      	movs	r4, #0
   31e44:	2200      	movs	r2, #0
   31e46:	4698      	mov	r8, r3
   31e48:	2100      	movs	r1, #0
   31e4a:	0312      	lsls	r2, r2, #12
   31e4c:	0b13      	lsrs	r3, r2, #12
   31e4e:	0d0a      	lsrs	r2, r1, #20
   31e50:	0512      	lsls	r2, r2, #20
   31e52:	431a      	orrs	r2, r3
   31e54:	0523      	lsls	r3, r4, #20
   31e56:	4c12      	ldr	r4, [pc, #72]	; (31ea0 <__aeabi_ddiv+0x1f4>)
   31e58:	4640      	mov	r0, r8
   31e5a:	4022      	ands	r2, r4
   31e5c:	4313      	orrs	r3, r2
   31e5e:	4662      	mov	r2, ip
   31e60:	005b      	lsls	r3, r3, #1
   31e62:	07d2      	lsls	r2, r2, #31
   31e64:	085b      	lsrs	r3, r3, #1
   31e66:	4313      	orrs	r3, r2
   31e68:	0019      	movs	r1, r3
   31e6a:	b007      	add	sp, #28
   31e6c:	bc3c      	pop	{r2, r3, r4, r5}
   31e6e:	4690      	mov	r8, r2
   31e70:	4699      	mov	r9, r3
   31e72:	46a2      	mov	sl, r4
   31e74:	46ab      	mov	fp, r5
   31e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   31e78:	2300      	movs	r3, #0
   31e7a:	2280      	movs	r2, #128	; 0x80
   31e7c:	469c      	mov	ip, r3
   31e7e:	0312      	lsls	r2, r2, #12
   31e80:	4698      	mov	r8, r3
   31e82:	4c03      	ldr	r4, [pc, #12]	; (31e90 <__aeabi_ddiv+0x1e4>)
   31e84:	e7e0      	b.n	31e48 <__aeabi_ddiv+0x19c>
   31e86:	2300      	movs	r3, #0
   31e88:	4c01      	ldr	r4, [pc, #4]	; (31e90 <__aeabi_ddiv+0x1e4>)
   31e8a:	2200      	movs	r2, #0
   31e8c:	4698      	mov	r8, r3
   31e8e:	e7db      	b.n	31e48 <__aeabi_ddiv+0x19c>
   31e90:	000007ff 	.word	0x000007ff
   31e94:	fffffc01 	.word	0xfffffc01
   31e98:	00038544 	.word	0x00038544
   31e9c:	fffffc0d 	.word	0xfffffc0d
   31ea0:	800fffff 	.word	0x800fffff
   31ea4:	45d9      	cmp	r9, fp
   31ea6:	d900      	bls.n	31eaa <__aeabi_ddiv+0x1fe>
   31ea8:	e139      	b.n	3211e <__aeabi_ddiv+0x472>
   31eaa:	d100      	bne.n	31eae <__aeabi_ddiv+0x202>
   31eac:	e134      	b.n	32118 <__aeabi_ddiv+0x46c>
   31eae:	2300      	movs	r3, #0
   31eb0:	4646      	mov	r6, r8
   31eb2:	464d      	mov	r5, r9
   31eb4:	469a      	mov	sl, r3
   31eb6:	3c01      	subs	r4, #1
   31eb8:	465b      	mov	r3, fp
   31eba:	0e0a      	lsrs	r2, r1, #24
   31ebc:	021b      	lsls	r3, r3, #8
   31ebe:	431a      	orrs	r2, r3
   31ec0:	020b      	lsls	r3, r1, #8
   31ec2:	0c17      	lsrs	r7, r2, #16
   31ec4:	9303      	str	r3, [sp, #12]
   31ec6:	0413      	lsls	r3, r2, #16
   31ec8:	0c1b      	lsrs	r3, r3, #16
   31eca:	0039      	movs	r1, r7
   31ecc:	0028      	movs	r0, r5
   31ece:	4690      	mov	r8, r2
   31ed0:	9301      	str	r3, [sp, #4]
   31ed2:	f7ff fa1b 	bl	3130c <__udivsi3>
   31ed6:	0002      	movs	r2, r0
   31ed8:	9b01      	ldr	r3, [sp, #4]
   31eda:	4683      	mov	fp, r0
   31edc:	435a      	muls	r2, r3
   31ede:	0028      	movs	r0, r5
   31ee0:	0039      	movs	r1, r7
   31ee2:	4691      	mov	r9, r2
   31ee4:	f7ff fa98 	bl	31418 <__aeabi_uidivmod>
   31ee8:	0c35      	lsrs	r5, r6, #16
   31eea:	0409      	lsls	r1, r1, #16
   31eec:	430d      	orrs	r5, r1
   31eee:	45a9      	cmp	r9, r5
   31ef0:	d90d      	bls.n	31f0e <__aeabi_ddiv+0x262>
   31ef2:	465b      	mov	r3, fp
   31ef4:	4445      	add	r5, r8
   31ef6:	3b01      	subs	r3, #1
   31ef8:	45a8      	cmp	r8, r5
   31efa:	d900      	bls.n	31efe <__aeabi_ddiv+0x252>
   31efc:	e13a      	b.n	32174 <__aeabi_ddiv+0x4c8>
   31efe:	45a9      	cmp	r9, r5
   31f00:	d800      	bhi.n	31f04 <__aeabi_ddiv+0x258>
   31f02:	e137      	b.n	32174 <__aeabi_ddiv+0x4c8>
   31f04:	2302      	movs	r3, #2
   31f06:	425b      	negs	r3, r3
   31f08:	469c      	mov	ip, r3
   31f0a:	4445      	add	r5, r8
   31f0c:	44e3      	add	fp, ip
   31f0e:	464b      	mov	r3, r9
   31f10:	1aeb      	subs	r3, r5, r3
   31f12:	0039      	movs	r1, r7
   31f14:	0018      	movs	r0, r3
   31f16:	9304      	str	r3, [sp, #16]
   31f18:	f7ff f9f8 	bl	3130c <__udivsi3>
   31f1c:	9b01      	ldr	r3, [sp, #4]
   31f1e:	0005      	movs	r5, r0
   31f20:	4343      	muls	r3, r0
   31f22:	0039      	movs	r1, r7
   31f24:	9804      	ldr	r0, [sp, #16]
   31f26:	4699      	mov	r9, r3
   31f28:	f7ff fa76 	bl	31418 <__aeabi_uidivmod>
   31f2c:	0433      	lsls	r3, r6, #16
   31f2e:	0409      	lsls	r1, r1, #16
   31f30:	0c1b      	lsrs	r3, r3, #16
   31f32:	430b      	orrs	r3, r1
   31f34:	4599      	cmp	r9, r3
   31f36:	d909      	bls.n	31f4c <__aeabi_ddiv+0x2a0>
   31f38:	4443      	add	r3, r8
   31f3a:	1e6a      	subs	r2, r5, #1
   31f3c:	4598      	cmp	r8, r3
   31f3e:	d900      	bls.n	31f42 <__aeabi_ddiv+0x296>
   31f40:	e11a      	b.n	32178 <__aeabi_ddiv+0x4cc>
   31f42:	4599      	cmp	r9, r3
   31f44:	d800      	bhi.n	31f48 <__aeabi_ddiv+0x29c>
   31f46:	e117      	b.n	32178 <__aeabi_ddiv+0x4cc>
   31f48:	3d02      	subs	r5, #2
   31f4a:	4443      	add	r3, r8
   31f4c:	464a      	mov	r2, r9
   31f4e:	1a9b      	subs	r3, r3, r2
   31f50:	465a      	mov	r2, fp
   31f52:	0412      	lsls	r2, r2, #16
   31f54:	432a      	orrs	r2, r5
   31f56:	9903      	ldr	r1, [sp, #12]
   31f58:	4693      	mov	fp, r2
   31f5a:	0c10      	lsrs	r0, r2, #16
   31f5c:	0c0a      	lsrs	r2, r1, #16
   31f5e:	4691      	mov	r9, r2
   31f60:	0409      	lsls	r1, r1, #16
   31f62:	465a      	mov	r2, fp
   31f64:	0c09      	lsrs	r1, r1, #16
   31f66:	464e      	mov	r6, r9
   31f68:	000d      	movs	r5, r1
   31f6a:	0412      	lsls	r2, r2, #16
   31f6c:	0c12      	lsrs	r2, r2, #16
   31f6e:	4345      	muls	r5, r0
   31f70:	9105      	str	r1, [sp, #20]
   31f72:	4351      	muls	r1, r2
   31f74:	4372      	muls	r2, r6
   31f76:	4370      	muls	r0, r6
   31f78:	1952      	adds	r2, r2, r5
   31f7a:	0c0e      	lsrs	r6, r1, #16
   31f7c:	18b2      	adds	r2, r6, r2
   31f7e:	4295      	cmp	r5, r2
   31f80:	d903      	bls.n	31f8a <__aeabi_ddiv+0x2de>
   31f82:	2580      	movs	r5, #128	; 0x80
   31f84:	026d      	lsls	r5, r5, #9
   31f86:	46ac      	mov	ip, r5
   31f88:	4460      	add	r0, ip
   31f8a:	0c15      	lsrs	r5, r2, #16
   31f8c:	0409      	lsls	r1, r1, #16
   31f8e:	0412      	lsls	r2, r2, #16
   31f90:	0c09      	lsrs	r1, r1, #16
   31f92:	1828      	adds	r0, r5, r0
   31f94:	1852      	adds	r2, r2, r1
   31f96:	4283      	cmp	r3, r0
   31f98:	d200      	bcs.n	31f9c <__aeabi_ddiv+0x2f0>
   31f9a:	e0ce      	b.n	3213a <__aeabi_ddiv+0x48e>
   31f9c:	d100      	bne.n	31fa0 <__aeabi_ddiv+0x2f4>
   31f9e:	e0c8      	b.n	32132 <__aeabi_ddiv+0x486>
   31fa0:	1a1d      	subs	r5, r3, r0
   31fa2:	4653      	mov	r3, sl
   31fa4:	1a9e      	subs	r6, r3, r2
   31fa6:	45b2      	cmp	sl, r6
   31fa8:	4192      	sbcs	r2, r2
   31faa:	4252      	negs	r2, r2
   31fac:	1aab      	subs	r3, r5, r2
   31fae:	469a      	mov	sl, r3
   31fb0:	4598      	cmp	r8, r3
   31fb2:	d100      	bne.n	31fb6 <__aeabi_ddiv+0x30a>
   31fb4:	e117      	b.n	321e6 <__aeabi_ddiv+0x53a>
   31fb6:	0039      	movs	r1, r7
   31fb8:	0018      	movs	r0, r3
   31fba:	f7ff f9a7 	bl	3130c <__udivsi3>
   31fbe:	9b01      	ldr	r3, [sp, #4]
   31fc0:	0005      	movs	r5, r0
   31fc2:	4343      	muls	r3, r0
   31fc4:	0039      	movs	r1, r7
   31fc6:	4650      	mov	r0, sl
   31fc8:	9304      	str	r3, [sp, #16]
   31fca:	f7ff fa25 	bl	31418 <__aeabi_uidivmod>
   31fce:	9804      	ldr	r0, [sp, #16]
   31fd0:	040b      	lsls	r3, r1, #16
   31fd2:	0c31      	lsrs	r1, r6, #16
   31fd4:	4319      	orrs	r1, r3
   31fd6:	4288      	cmp	r0, r1
   31fd8:	d909      	bls.n	31fee <__aeabi_ddiv+0x342>
   31fda:	4441      	add	r1, r8
   31fdc:	1e6b      	subs	r3, r5, #1
   31fde:	4588      	cmp	r8, r1
   31fe0:	d900      	bls.n	31fe4 <__aeabi_ddiv+0x338>
   31fe2:	e107      	b.n	321f4 <__aeabi_ddiv+0x548>
   31fe4:	4288      	cmp	r0, r1
   31fe6:	d800      	bhi.n	31fea <__aeabi_ddiv+0x33e>
   31fe8:	e104      	b.n	321f4 <__aeabi_ddiv+0x548>
   31fea:	3d02      	subs	r5, #2
   31fec:	4441      	add	r1, r8
   31fee:	9b04      	ldr	r3, [sp, #16]
   31ff0:	1acb      	subs	r3, r1, r3
   31ff2:	0018      	movs	r0, r3
   31ff4:	0039      	movs	r1, r7
   31ff6:	9304      	str	r3, [sp, #16]
   31ff8:	f7ff f988 	bl	3130c <__udivsi3>
   31ffc:	9b01      	ldr	r3, [sp, #4]
   31ffe:	4682      	mov	sl, r0
   32000:	4343      	muls	r3, r0
   32002:	0039      	movs	r1, r7
   32004:	9804      	ldr	r0, [sp, #16]
   32006:	9301      	str	r3, [sp, #4]
   32008:	f7ff fa06 	bl	31418 <__aeabi_uidivmod>
   3200c:	9801      	ldr	r0, [sp, #4]
   3200e:	040b      	lsls	r3, r1, #16
   32010:	0431      	lsls	r1, r6, #16
   32012:	0c09      	lsrs	r1, r1, #16
   32014:	4319      	orrs	r1, r3
   32016:	4288      	cmp	r0, r1
   32018:	d90d      	bls.n	32036 <__aeabi_ddiv+0x38a>
   3201a:	4653      	mov	r3, sl
   3201c:	4441      	add	r1, r8
   3201e:	3b01      	subs	r3, #1
   32020:	4588      	cmp	r8, r1
   32022:	d900      	bls.n	32026 <__aeabi_ddiv+0x37a>
   32024:	e0e8      	b.n	321f8 <__aeabi_ddiv+0x54c>
   32026:	4288      	cmp	r0, r1
   32028:	d800      	bhi.n	3202c <__aeabi_ddiv+0x380>
   3202a:	e0e5      	b.n	321f8 <__aeabi_ddiv+0x54c>
   3202c:	2302      	movs	r3, #2
   3202e:	425b      	negs	r3, r3
   32030:	469c      	mov	ip, r3
   32032:	4441      	add	r1, r8
   32034:	44e2      	add	sl, ip
   32036:	9b01      	ldr	r3, [sp, #4]
   32038:	042d      	lsls	r5, r5, #16
   3203a:	1ace      	subs	r6, r1, r3
   3203c:	4651      	mov	r1, sl
   3203e:	4329      	orrs	r1, r5
   32040:	9d05      	ldr	r5, [sp, #20]
   32042:	464f      	mov	r7, r9
   32044:	002a      	movs	r2, r5
   32046:	040b      	lsls	r3, r1, #16
   32048:	0c08      	lsrs	r0, r1, #16
   3204a:	0c1b      	lsrs	r3, r3, #16
   3204c:	435a      	muls	r2, r3
   3204e:	4345      	muls	r5, r0
   32050:	437b      	muls	r3, r7
   32052:	4378      	muls	r0, r7
   32054:	195b      	adds	r3, r3, r5
   32056:	0c17      	lsrs	r7, r2, #16
   32058:	18fb      	adds	r3, r7, r3
   3205a:	429d      	cmp	r5, r3
   3205c:	d903      	bls.n	32066 <__aeabi_ddiv+0x3ba>
   3205e:	2580      	movs	r5, #128	; 0x80
   32060:	026d      	lsls	r5, r5, #9
   32062:	46ac      	mov	ip, r5
   32064:	4460      	add	r0, ip
   32066:	0c1d      	lsrs	r5, r3, #16
   32068:	0412      	lsls	r2, r2, #16
   3206a:	041b      	lsls	r3, r3, #16
   3206c:	0c12      	lsrs	r2, r2, #16
   3206e:	1828      	adds	r0, r5, r0
   32070:	189b      	adds	r3, r3, r2
   32072:	4286      	cmp	r6, r0
   32074:	d200      	bcs.n	32078 <__aeabi_ddiv+0x3cc>
   32076:	e093      	b.n	321a0 <__aeabi_ddiv+0x4f4>
   32078:	d100      	bne.n	3207c <__aeabi_ddiv+0x3d0>
   3207a:	e08e      	b.n	3219a <__aeabi_ddiv+0x4ee>
   3207c:	2301      	movs	r3, #1
   3207e:	4319      	orrs	r1, r3
   32080:	4ba0      	ldr	r3, [pc, #640]	; (32304 <__aeabi_ddiv+0x658>)
   32082:	18e3      	adds	r3, r4, r3
   32084:	2b00      	cmp	r3, #0
   32086:	dc00      	bgt.n	3208a <__aeabi_ddiv+0x3de>
   32088:	e099      	b.n	321be <__aeabi_ddiv+0x512>
   3208a:	074a      	lsls	r2, r1, #29
   3208c:	d000      	beq.n	32090 <__aeabi_ddiv+0x3e4>
   3208e:	e09e      	b.n	321ce <__aeabi_ddiv+0x522>
   32090:	465a      	mov	r2, fp
   32092:	01d2      	lsls	r2, r2, #7
   32094:	d506      	bpl.n	320a4 <__aeabi_ddiv+0x3f8>
   32096:	465a      	mov	r2, fp
   32098:	4b9b      	ldr	r3, [pc, #620]	; (32308 <__aeabi_ddiv+0x65c>)
   3209a:	401a      	ands	r2, r3
   3209c:	2380      	movs	r3, #128	; 0x80
   3209e:	4693      	mov	fp, r2
   320a0:	00db      	lsls	r3, r3, #3
   320a2:	18e3      	adds	r3, r4, r3
   320a4:	4a99      	ldr	r2, [pc, #612]	; (3230c <__aeabi_ddiv+0x660>)
   320a6:	4293      	cmp	r3, r2
   320a8:	dd68      	ble.n	3217c <__aeabi_ddiv+0x4d0>
   320aa:	2301      	movs	r3, #1
   320ac:	9a02      	ldr	r2, [sp, #8]
   320ae:	4c98      	ldr	r4, [pc, #608]	; (32310 <__aeabi_ddiv+0x664>)
   320b0:	401a      	ands	r2, r3
   320b2:	2300      	movs	r3, #0
   320b4:	4694      	mov	ip, r2
   320b6:	4698      	mov	r8, r3
   320b8:	2200      	movs	r2, #0
   320ba:	e6c5      	b.n	31e48 <__aeabi_ddiv+0x19c>
   320bc:	2280      	movs	r2, #128	; 0x80
   320be:	464b      	mov	r3, r9
   320c0:	0312      	lsls	r2, r2, #12
   320c2:	4213      	tst	r3, r2
   320c4:	d00a      	beq.n	320dc <__aeabi_ddiv+0x430>
   320c6:	465b      	mov	r3, fp
   320c8:	4213      	tst	r3, r2
   320ca:	d106      	bne.n	320da <__aeabi_ddiv+0x42e>
   320cc:	431a      	orrs	r2, r3
   320ce:	0312      	lsls	r2, r2, #12
   320d0:	0b12      	lsrs	r2, r2, #12
   320d2:	46ac      	mov	ip, r5
   320d4:	4688      	mov	r8, r1
   320d6:	4c8e      	ldr	r4, [pc, #568]	; (32310 <__aeabi_ddiv+0x664>)
   320d8:	e6b6      	b.n	31e48 <__aeabi_ddiv+0x19c>
   320da:	464b      	mov	r3, r9
   320dc:	431a      	orrs	r2, r3
   320de:	0312      	lsls	r2, r2, #12
   320e0:	0b12      	lsrs	r2, r2, #12
   320e2:	46bc      	mov	ip, r7
   320e4:	4c8a      	ldr	r4, [pc, #552]	; (32310 <__aeabi_ddiv+0x664>)
   320e6:	e6af      	b.n	31e48 <__aeabi_ddiv+0x19c>
   320e8:	0003      	movs	r3, r0
   320ea:	465a      	mov	r2, fp
   320ec:	3b28      	subs	r3, #40	; 0x28
   320ee:	409a      	lsls	r2, r3
   320f0:	2300      	movs	r3, #0
   320f2:	4691      	mov	r9, r2
   320f4:	4698      	mov	r8, r3
   320f6:	e657      	b.n	31da8 <__aeabi_ddiv+0xfc>
   320f8:	4658      	mov	r0, fp
   320fa:	f000 ffd9 	bl	330b0 <__clzsi2>
   320fe:	3020      	adds	r0, #32
   32100:	e640      	b.n	31d84 <__aeabi_ddiv+0xd8>
   32102:	0003      	movs	r3, r0
   32104:	4652      	mov	r2, sl
   32106:	3b28      	subs	r3, #40	; 0x28
   32108:	409a      	lsls	r2, r3
   3210a:	2100      	movs	r1, #0
   3210c:	4693      	mov	fp, r2
   3210e:	e677      	b.n	31e00 <__aeabi_ddiv+0x154>
   32110:	f000 ffce 	bl	330b0 <__clzsi2>
   32114:	3020      	adds	r0, #32
   32116:	e65f      	b.n	31dd8 <__aeabi_ddiv+0x12c>
   32118:	4588      	cmp	r8, r1
   3211a:	d200      	bcs.n	3211e <__aeabi_ddiv+0x472>
   3211c:	e6c7      	b.n	31eae <__aeabi_ddiv+0x202>
   3211e:	464b      	mov	r3, r9
   32120:	07de      	lsls	r6, r3, #31
   32122:	085d      	lsrs	r5, r3, #1
   32124:	4643      	mov	r3, r8
   32126:	085b      	lsrs	r3, r3, #1
   32128:	431e      	orrs	r6, r3
   3212a:	4643      	mov	r3, r8
   3212c:	07db      	lsls	r3, r3, #31
   3212e:	469a      	mov	sl, r3
   32130:	e6c2      	b.n	31eb8 <__aeabi_ddiv+0x20c>
   32132:	2500      	movs	r5, #0
   32134:	4592      	cmp	sl, r2
   32136:	d300      	bcc.n	3213a <__aeabi_ddiv+0x48e>
   32138:	e733      	b.n	31fa2 <__aeabi_ddiv+0x2f6>
   3213a:	9e03      	ldr	r6, [sp, #12]
   3213c:	4659      	mov	r1, fp
   3213e:	46b4      	mov	ip, r6
   32140:	44e2      	add	sl, ip
   32142:	45b2      	cmp	sl, r6
   32144:	41ad      	sbcs	r5, r5
   32146:	426d      	negs	r5, r5
   32148:	4445      	add	r5, r8
   3214a:	18eb      	adds	r3, r5, r3
   3214c:	3901      	subs	r1, #1
   3214e:	4598      	cmp	r8, r3
   32150:	d207      	bcs.n	32162 <__aeabi_ddiv+0x4b6>
   32152:	4298      	cmp	r0, r3
   32154:	d900      	bls.n	32158 <__aeabi_ddiv+0x4ac>
   32156:	e07f      	b.n	32258 <__aeabi_ddiv+0x5ac>
   32158:	d100      	bne.n	3215c <__aeabi_ddiv+0x4b0>
   3215a:	e0bc      	b.n	322d6 <__aeabi_ddiv+0x62a>
   3215c:	1a1d      	subs	r5, r3, r0
   3215e:	468b      	mov	fp, r1
   32160:	e71f      	b.n	31fa2 <__aeabi_ddiv+0x2f6>
   32162:	4598      	cmp	r8, r3
   32164:	d1fa      	bne.n	3215c <__aeabi_ddiv+0x4b0>
   32166:	9d03      	ldr	r5, [sp, #12]
   32168:	4555      	cmp	r5, sl
   3216a:	d9f2      	bls.n	32152 <__aeabi_ddiv+0x4a6>
   3216c:	4643      	mov	r3, r8
   3216e:	468b      	mov	fp, r1
   32170:	1a1d      	subs	r5, r3, r0
   32172:	e716      	b.n	31fa2 <__aeabi_ddiv+0x2f6>
   32174:	469b      	mov	fp, r3
   32176:	e6ca      	b.n	31f0e <__aeabi_ddiv+0x262>
   32178:	0015      	movs	r5, r2
   3217a:	e6e7      	b.n	31f4c <__aeabi_ddiv+0x2a0>
   3217c:	465a      	mov	r2, fp
   3217e:	08c9      	lsrs	r1, r1, #3
   32180:	0752      	lsls	r2, r2, #29
   32182:	430a      	orrs	r2, r1
   32184:	055b      	lsls	r3, r3, #21
   32186:	4690      	mov	r8, r2
   32188:	0d5c      	lsrs	r4, r3, #21
   3218a:	465a      	mov	r2, fp
   3218c:	2301      	movs	r3, #1
   3218e:	9902      	ldr	r1, [sp, #8]
   32190:	0252      	lsls	r2, r2, #9
   32192:	4019      	ands	r1, r3
   32194:	0b12      	lsrs	r2, r2, #12
   32196:	468c      	mov	ip, r1
   32198:	e656      	b.n	31e48 <__aeabi_ddiv+0x19c>
   3219a:	2b00      	cmp	r3, #0
   3219c:	d100      	bne.n	321a0 <__aeabi_ddiv+0x4f4>
   3219e:	e76f      	b.n	32080 <__aeabi_ddiv+0x3d4>
   321a0:	4446      	add	r6, r8
   321a2:	1e4a      	subs	r2, r1, #1
   321a4:	45b0      	cmp	r8, r6
   321a6:	d929      	bls.n	321fc <__aeabi_ddiv+0x550>
   321a8:	0011      	movs	r1, r2
   321aa:	4286      	cmp	r6, r0
   321ac:	d000      	beq.n	321b0 <__aeabi_ddiv+0x504>
   321ae:	e765      	b.n	3207c <__aeabi_ddiv+0x3d0>
   321b0:	9a03      	ldr	r2, [sp, #12]
   321b2:	4293      	cmp	r3, r2
   321b4:	d000      	beq.n	321b8 <__aeabi_ddiv+0x50c>
   321b6:	e761      	b.n	3207c <__aeabi_ddiv+0x3d0>
   321b8:	e762      	b.n	32080 <__aeabi_ddiv+0x3d4>
   321ba:	2101      	movs	r1, #1
   321bc:	4249      	negs	r1, r1
   321be:	2001      	movs	r0, #1
   321c0:	1ac2      	subs	r2, r0, r3
   321c2:	2a38      	cmp	r2, #56	; 0x38
   321c4:	dd21      	ble.n	3220a <__aeabi_ddiv+0x55e>
   321c6:	9b02      	ldr	r3, [sp, #8]
   321c8:	4003      	ands	r3, r0
   321ca:	469c      	mov	ip, r3
   321cc:	e638      	b.n	31e40 <__aeabi_ddiv+0x194>
   321ce:	220f      	movs	r2, #15
   321d0:	400a      	ands	r2, r1
   321d2:	2a04      	cmp	r2, #4
   321d4:	d100      	bne.n	321d8 <__aeabi_ddiv+0x52c>
   321d6:	e75b      	b.n	32090 <__aeabi_ddiv+0x3e4>
   321d8:	000a      	movs	r2, r1
   321da:	1d11      	adds	r1, r2, #4
   321dc:	4291      	cmp	r1, r2
   321de:	4192      	sbcs	r2, r2
   321e0:	4252      	negs	r2, r2
   321e2:	4493      	add	fp, r2
   321e4:	e754      	b.n	32090 <__aeabi_ddiv+0x3e4>
   321e6:	4b47      	ldr	r3, [pc, #284]	; (32304 <__aeabi_ddiv+0x658>)
   321e8:	18e3      	adds	r3, r4, r3
   321ea:	2b00      	cmp	r3, #0
   321ec:	dde5      	ble.n	321ba <__aeabi_ddiv+0x50e>
   321ee:	2201      	movs	r2, #1
   321f0:	4252      	negs	r2, r2
   321f2:	e7f2      	b.n	321da <__aeabi_ddiv+0x52e>
   321f4:	001d      	movs	r5, r3
   321f6:	e6fa      	b.n	31fee <__aeabi_ddiv+0x342>
   321f8:	469a      	mov	sl, r3
   321fa:	e71c      	b.n	32036 <__aeabi_ddiv+0x38a>
   321fc:	42b0      	cmp	r0, r6
   321fe:	d839      	bhi.n	32274 <__aeabi_ddiv+0x5c8>
   32200:	d06e      	beq.n	322e0 <__aeabi_ddiv+0x634>
   32202:	0011      	movs	r1, r2
   32204:	e73a      	b.n	3207c <__aeabi_ddiv+0x3d0>
   32206:	9302      	str	r3, [sp, #8]
   32208:	e73a      	b.n	32080 <__aeabi_ddiv+0x3d4>
   3220a:	2a1f      	cmp	r2, #31
   3220c:	dc3c      	bgt.n	32288 <__aeabi_ddiv+0x5dc>
   3220e:	2320      	movs	r3, #32
   32210:	1a9b      	subs	r3, r3, r2
   32212:	000c      	movs	r4, r1
   32214:	4658      	mov	r0, fp
   32216:	4099      	lsls	r1, r3
   32218:	4098      	lsls	r0, r3
   3221a:	1e4b      	subs	r3, r1, #1
   3221c:	4199      	sbcs	r1, r3
   3221e:	465b      	mov	r3, fp
   32220:	40d4      	lsrs	r4, r2
   32222:	40d3      	lsrs	r3, r2
   32224:	4320      	orrs	r0, r4
   32226:	4308      	orrs	r0, r1
   32228:	001a      	movs	r2, r3
   3222a:	0743      	lsls	r3, r0, #29
   3222c:	d009      	beq.n	32242 <__aeabi_ddiv+0x596>
   3222e:	230f      	movs	r3, #15
   32230:	4003      	ands	r3, r0
   32232:	2b04      	cmp	r3, #4
   32234:	d005      	beq.n	32242 <__aeabi_ddiv+0x596>
   32236:	0001      	movs	r1, r0
   32238:	1d08      	adds	r0, r1, #4
   3223a:	4288      	cmp	r0, r1
   3223c:	419b      	sbcs	r3, r3
   3223e:	425b      	negs	r3, r3
   32240:	18d2      	adds	r2, r2, r3
   32242:	0213      	lsls	r3, r2, #8
   32244:	d53a      	bpl.n	322bc <__aeabi_ddiv+0x610>
   32246:	2301      	movs	r3, #1
   32248:	9a02      	ldr	r2, [sp, #8]
   3224a:	2401      	movs	r4, #1
   3224c:	401a      	ands	r2, r3
   3224e:	2300      	movs	r3, #0
   32250:	4694      	mov	ip, r2
   32252:	4698      	mov	r8, r3
   32254:	2200      	movs	r2, #0
   32256:	e5f7      	b.n	31e48 <__aeabi_ddiv+0x19c>
   32258:	2102      	movs	r1, #2
   3225a:	4249      	negs	r1, r1
   3225c:	468c      	mov	ip, r1
   3225e:	9d03      	ldr	r5, [sp, #12]
   32260:	44e3      	add	fp, ip
   32262:	46ac      	mov	ip, r5
   32264:	44e2      	add	sl, ip
   32266:	45aa      	cmp	sl, r5
   32268:	41ad      	sbcs	r5, r5
   3226a:	426d      	negs	r5, r5
   3226c:	4445      	add	r5, r8
   3226e:	18ed      	adds	r5, r5, r3
   32270:	1a2d      	subs	r5, r5, r0
   32272:	e696      	b.n	31fa2 <__aeabi_ddiv+0x2f6>
   32274:	1e8a      	subs	r2, r1, #2
   32276:	9903      	ldr	r1, [sp, #12]
   32278:	004d      	lsls	r5, r1, #1
   3227a:	428d      	cmp	r5, r1
   3227c:	4189      	sbcs	r1, r1
   3227e:	4249      	negs	r1, r1
   32280:	4441      	add	r1, r8
   32282:	1876      	adds	r6, r6, r1
   32284:	9503      	str	r5, [sp, #12]
   32286:	e78f      	b.n	321a8 <__aeabi_ddiv+0x4fc>
   32288:	201f      	movs	r0, #31
   3228a:	4240      	negs	r0, r0
   3228c:	1ac3      	subs	r3, r0, r3
   3228e:	4658      	mov	r0, fp
   32290:	40d8      	lsrs	r0, r3
   32292:	0003      	movs	r3, r0
   32294:	2a20      	cmp	r2, #32
   32296:	d028      	beq.n	322ea <__aeabi_ddiv+0x63e>
   32298:	2040      	movs	r0, #64	; 0x40
   3229a:	465d      	mov	r5, fp
   3229c:	1a82      	subs	r2, r0, r2
   3229e:	4095      	lsls	r5, r2
   322a0:	4329      	orrs	r1, r5
   322a2:	1e4a      	subs	r2, r1, #1
   322a4:	4191      	sbcs	r1, r2
   322a6:	4319      	orrs	r1, r3
   322a8:	2307      	movs	r3, #7
   322aa:	2200      	movs	r2, #0
   322ac:	400b      	ands	r3, r1
   322ae:	d009      	beq.n	322c4 <__aeabi_ddiv+0x618>
   322b0:	230f      	movs	r3, #15
   322b2:	2200      	movs	r2, #0
   322b4:	400b      	ands	r3, r1
   322b6:	0008      	movs	r0, r1
   322b8:	2b04      	cmp	r3, #4
   322ba:	d1bd      	bne.n	32238 <__aeabi_ddiv+0x58c>
   322bc:	0001      	movs	r1, r0
   322be:	0753      	lsls	r3, r2, #29
   322c0:	0252      	lsls	r2, r2, #9
   322c2:	0b12      	lsrs	r2, r2, #12
   322c4:	08c9      	lsrs	r1, r1, #3
   322c6:	4319      	orrs	r1, r3
   322c8:	2301      	movs	r3, #1
   322ca:	4688      	mov	r8, r1
   322cc:	9902      	ldr	r1, [sp, #8]
   322ce:	2400      	movs	r4, #0
   322d0:	4019      	ands	r1, r3
   322d2:	468c      	mov	ip, r1
   322d4:	e5b8      	b.n	31e48 <__aeabi_ddiv+0x19c>
   322d6:	4552      	cmp	r2, sl
   322d8:	d8be      	bhi.n	32258 <__aeabi_ddiv+0x5ac>
   322da:	468b      	mov	fp, r1
   322dc:	2500      	movs	r5, #0
   322de:	e660      	b.n	31fa2 <__aeabi_ddiv+0x2f6>
   322e0:	9d03      	ldr	r5, [sp, #12]
   322e2:	429d      	cmp	r5, r3
   322e4:	d3c6      	bcc.n	32274 <__aeabi_ddiv+0x5c8>
   322e6:	0011      	movs	r1, r2
   322e8:	e762      	b.n	321b0 <__aeabi_ddiv+0x504>
   322ea:	2500      	movs	r5, #0
   322ec:	e7d8      	b.n	322a0 <__aeabi_ddiv+0x5f4>
   322ee:	2280      	movs	r2, #128	; 0x80
   322f0:	465b      	mov	r3, fp
   322f2:	0312      	lsls	r2, r2, #12
   322f4:	431a      	orrs	r2, r3
   322f6:	9b01      	ldr	r3, [sp, #4]
   322f8:	0312      	lsls	r2, r2, #12
   322fa:	0b12      	lsrs	r2, r2, #12
   322fc:	469c      	mov	ip, r3
   322fe:	4688      	mov	r8, r1
   32300:	4c03      	ldr	r4, [pc, #12]	; (32310 <__aeabi_ddiv+0x664>)
   32302:	e5a1      	b.n	31e48 <__aeabi_ddiv+0x19c>
   32304:	000003ff 	.word	0x000003ff
   32308:	feffffff 	.word	0xfeffffff
   3230c:	000007fe 	.word	0x000007fe
   32310:	000007ff 	.word	0x000007ff

00032314 <__aeabi_dmul>:
   32314:	b5f0      	push	{r4, r5, r6, r7, lr}
   32316:	4657      	mov	r7, sl
   32318:	4645      	mov	r5, r8
   3231a:	46de      	mov	lr, fp
   3231c:	464e      	mov	r6, r9
   3231e:	b5e0      	push	{r5, r6, r7, lr}
   32320:	030c      	lsls	r4, r1, #12
   32322:	4698      	mov	r8, r3
   32324:	004e      	lsls	r6, r1, #1
   32326:	0b23      	lsrs	r3, r4, #12
   32328:	b087      	sub	sp, #28
   3232a:	0007      	movs	r7, r0
   3232c:	4692      	mov	sl, r2
   3232e:	469b      	mov	fp, r3
   32330:	0d76      	lsrs	r6, r6, #21
   32332:	0fcd      	lsrs	r5, r1, #31
   32334:	2e00      	cmp	r6, #0
   32336:	d06b      	beq.n	32410 <__aeabi_dmul+0xfc>
   32338:	4b6d      	ldr	r3, [pc, #436]	; (324f0 <__aeabi_dmul+0x1dc>)
   3233a:	429e      	cmp	r6, r3
   3233c:	d035      	beq.n	323aa <__aeabi_dmul+0x96>
   3233e:	2480      	movs	r4, #128	; 0x80
   32340:	465b      	mov	r3, fp
   32342:	0f42      	lsrs	r2, r0, #29
   32344:	0424      	lsls	r4, r4, #16
   32346:	00db      	lsls	r3, r3, #3
   32348:	4314      	orrs	r4, r2
   3234a:	431c      	orrs	r4, r3
   3234c:	00c3      	lsls	r3, r0, #3
   3234e:	4699      	mov	r9, r3
   32350:	4b68      	ldr	r3, [pc, #416]	; (324f4 <__aeabi_dmul+0x1e0>)
   32352:	46a3      	mov	fp, r4
   32354:	469c      	mov	ip, r3
   32356:	2300      	movs	r3, #0
   32358:	2700      	movs	r7, #0
   3235a:	4466      	add	r6, ip
   3235c:	9302      	str	r3, [sp, #8]
   3235e:	4643      	mov	r3, r8
   32360:	031c      	lsls	r4, r3, #12
   32362:	005a      	lsls	r2, r3, #1
   32364:	0fdb      	lsrs	r3, r3, #31
   32366:	4650      	mov	r0, sl
   32368:	0b24      	lsrs	r4, r4, #12
   3236a:	0d52      	lsrs	r2, r2, #21
   3236c:	4698      	mov	r8, r3
   3236e:	d100      	bne.n	32372 <__aeabi_dmul+0x5e>
   32370:	e076      	b.n	32460 <__aeabi_dmul+0x14c>
   32372:	4b5f      	ldr	r3, [pc, #380]	; (324f0 <__aeabi_dmul+0x1dc>)
   32374:	429a      	cmp	r2, r3
   32376:	d06d      	beq.n	32454 <__aeabi_dmul+0x140>
   32378:	2380      	movs	r3, #128	; 0x80
   3237a:	0f41      	lsrs	r1, r0, #29
   3237c:	041b      	lsls	r3, r3, #16
   3237e:	430b      	orrs	r3, r1
   32380:	495c      	ldr	r1, [pc, #368]	; (324f4 <__aeabi_dmul+0x1e0>)
   32382:	00e4      	lsls	r4, r4, #3
   32384:	468c      	mov	ip, r1
   32386:	431c      	orrs	r4, r3
   32388:	00c3      	lsls	r3, r0, #3
   3238a:	2000      	movs	r0, #0
   3238c:	4462      	add	r2, ip
   3238e:	4641      	mov	r1, r8
   32390:	18b6      	adds	r6, r6, r2
   32392:	4069      	eors	r1, r5
   32394:	1c72      	adds	r2, r6, #1
   32396:	9101      	str	r1, [sp, #4]
   32398:	4694      	mov	ip, r2
   3239a:	4307      	orrs	r7, r0
   3239c:	2f0f      	cmp	r7, #15
   3239e:	d900      	bls.n	323a2 <__aeabi_dmul+0x8e>
   323a0:	e0b0      	b.n	32504 <__aeabi_dmul+0x1f0>
   323a2:	4a55      	ldr	r2, [pc, #340]	; (324f8 <__aeabi_dmul+0x1e4>)
   323a4:	00bf      	lsls	r7, r7, #2
   323a6:	59d2      	ldr	r2, [r2, r7]
   323a8:	4697      	mov	pc, r2
   323aa:	465b      	mov	r3, fp
   323ac:	4303      	orrs	r3, r0
   323ae:	4699      	mov	r9, r3
   323b0:	d000      	beq.n	323b4 <__aeabi_dmul+0xa0>
   323b2:	e087      	b.n	324c4 <__aeabi_dmul+0x1b0>
   323b4:	2300      	movs	r3, #0
   323b6:	469b      	mov	fp, r3
   323b8:	3302      	adds	r3, #2
   323ba:	2708      	movs	r7, #8
   323bc:	9302      	str	r3, [sp, #8]
   323be:	e7ce      	b.n	3235e <__aeabi_dmul+0x4a>
   323c0:	4642      	mov	r2, r8
   323c2:	9201      	str	r2, [sp, #4]
   323c4:	2802      	cmp	r0, #2
   323c6:	d067      	beq.n	32498 <__aeabi_dmul+0x184>
   323c8:	2803      	cmp	r0, #3
   323ca:	d100      	bne.n	323ce <__aeabi_dmul+0xba>
   323cc:	e20e      	b.n	327ec <__aeabi_dmul+0x4d8>
   323ce:	2801      	cmp	r0, #1
   323d0:	d000      	beq.n	323d4 <__aeabi_dmul+0xc0>
   323d2:	e162      	b.n	3269a <__aeabi_dmul+0x386>
   323d4:	2300      	movs	r3, #0
   323d6:	2400      	movs	r4, #0
   323d8:	2200      	movs	r2, #0
   323da:	4699      	mov	r9, r3
   323dc:	9901      	ldr	r1, [sp, #4]
   323de:	4001      	ands	r1, r0
   323e0:	b2cd      	uxtb	r5, r1
   323e2:	2100      	movs	r1, #0
   323e4:	0312      	lsls	r2, r2, #12
   323e6:	0d0b      	lsrs	r3, r1, #20
   323e8:	0b12      	lsrs	r2, r2, #12
   323ea:	051b      	lsls	r3, r3, #20
   323ec:	4313      	orrs	r3, r2
   323ee:	4a43      	ldr	r2, [pc, #268]	; (324fc <__aeabi_dmul+0x1e8>)
   323f0:	0524      	lsls	r4, r4, #20
   323f2:	4013      	ands	r3, r2
   323f4:	431c      	orrs	r4, r3
   323f6:	0064      	lsls	r4, r4, #1
   323f8:	07ed      	lsls	r5, r5, #31
   323fa:	0864      	lsrs	r4, r4, #1
   323fc:	432c      	orrs	r4, r5
   323fe:	4648      	mov	r0, r9
   32400:	0021      	movs	r1, r4
   32402:	b007      	add	sp, #28
   32404:	bc3c      	pop	{r2, r3, r4, r5}
   32406:	4690      	mov	r8, r2
   32408:	4699      	mov	r9, r3
   3240a:	46a2      	mov	sl, r4
   3240c:	46ab      	mov	fp, r5
   3240e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32410:	4303      	orrs	r3, r0
   32412:	4699      	mov	r9, r3
   32414:	d04f      	beq.n	324b6 <__aeabi_dmul+0x1a2>
   32416:	465b      	mov	r3, fp
   32418:	2b00      	cmp	r3, #0
   3241a:	d100      	bne.n	3241e <__aeabi_dmul+0x10a>
   3241c:	e189      	b.n	32732 <__aeabi_dmul+0x41e>
   3241e:	4658      	mov	r0, fp
   32420:	f000 fe46 	bl	330b0 <__clzsi2>
   32424:	0003      	movs	r3, r0
   32426:	3b0b      	subs	r3, #11
   32428:	2b1c      	cmp	r3, #28
   3242a:	dd00      	ble.n	3242e <__aeabi_dmul+0x11a>
   3242c:	e17a      	b.n	32724 <__aeabi_dmul+0x410>
   3242e:	221d      	movs	r2, #29
   32430:	1ad3      	subs	r3, r2, r3
   32432:	003a      	movs	r2, r7
   32434:	0001      	movs	r1, r0
   32436:	465c      	mov	r4, fp
   32438:	40da      	lsrs	r2, r3
   3243a:	3908      	subs	r1, #8
   3243c:	408c      	lsls	r4, r1
   3243e:	0013      	movs	r3, r2
   32440:	408f      	lsls	r7, r1
   32442:	4323      	orrs	r3, r4
   32444:	469b      	mov	fp, r3
   32446:	46b9      	mov	r9, r7
   32448:	2300      	movs	r3, #0
   3244a:	4e2d      	ldr	r6, [pc, #180]	; (32500 <__aeabi_dmul+0x1ec>)
   3244c:	2700      	movs	r7, #0
   3244e:	1a36      	subs	r6, r6, r0
   32450:	9302      	str	r3, [sp, #8]
   32452:	e784      	b.n	3235e <__aeabi_dmul+0x4a>
   32454:	4653      	mov	r3, sl
   32456:	4323      	orrs	r3, r4
   32458:	d12a      	bne.n	324b0 <__aeabi_dmul+0x19c>
   3245a:	2400      	movs	r4, #0
   3245c:	2002      	movs	r0, #2
   3245e:	e796      	b.n	3238e <__aeabi_dmul+0x7a>
   32460:	4653      	mov	r3, sl
   32462:	4323      	orrs	r3, r4
   32464:	d020      	beq.n	324a8 <__aeabi_dmul+0x194>
   32466:	2c00      	cmp	r4, #0
   32468:	d100      	bne.n	3246c <__aeabi_dmul+0x158>
   3246a:	e157      	b.n	3271c <__aeabi_dmul+0x408>
   3246c:	0020      	movs	r0, r4
   3246e:	f000 fe1f 	bl	330b0 <__clzsi2>
   32472:	0003      	movs	r3, r0
   32474:	3b0b      	subs	r3, #11
   32476:	2b1c      	cmp	r3, #28
   32478:	dd00      	ble.n	3247c <__aeabi_dmul+0x168>
   3247a:	e149      	b.n	32710 <__aeabi_dmul+0x3fc>
   3247c:	211d      	movs	r1, #29
   3247e:	1acb      	subs	r3, r1, r3
   32480:	4651      	mov	r1, sl
   32482:	0002      	movs	r2, r0
   32484:	40d9      	lsrs	r1, r3
   32486:	4653      	mov	r3, sl
   32488:	3a08      	subs	r2, #8
   3248a:	4094      	lsls	r4, r2
   3248c:	4093      	lsls	r3, r2
   3248e:	430c      	orrs	r4, r1
   32490:	4a1b      	ldr	r2, [pc, #108]	; (32500 <__aeabi_dmul+0x1ec>)
   32492:	1a12      	subs	r2, r2, r0
   32494:	2000      	movs	r0, #0
   32496:	e77a      	b.n	3238e <__aeabi_dmul+0x7a>
   32498:	2501      	movs	r5, #1
   3249a:	9b01      	ldr	r3, [sp, #4]
   3249c:	4c14      	ldr	r4, [pc, #80]	; (324f0 <__aeabi_dmul+0x1dc>)
   3249e:	401d      	ands	r5, r3
   324a0:	2300      	movs	r3, #0
   324a2:	2200      	movs	r2, #0
   324a4:	4699      	mov	r9, r3
   324a6:	e79c      	b.n	323e2 <__aeabi_dmul+0xce>
   324a8:	2400      	movs	r4, #0
   324aa:	2200      	movs	r2, #0
   324ac:	2001      	movs	r0, #1
   324ae:	e76e      	b.n	3238e <__aeabi_dmul+0x7a>
   324b0:	4653      	mov	r3, sl
   324b2:	2003      	movs	r0, #3
   324b4:	e76b      	b.n	3238e <__aeabi_dmul+0x7a>
   324b6:	2300      	movs	r3, #0
   324b8:	469b      	mov	fp, r3
   324ba:	3301      	adds	r3, #1
   324bc:	2704      	movs	r7, #4
   324be:	2600      	movs	r6, #0
   324c0:	9302      	str	r3, [sp, #8]
   324c2:	e74c      	b.n	3235e <__aeabi_dmul+0x4a>
   324c4:	2303      	movs	r3, #3
   324c6:	4681      	mov	r9, r0
   324c8:	270c      	movs	r7, #12
   324ca:	9302      	str	r3, [sp, #8]
   324cc:	e747      	b.n	3235e <__aeabi_dmul+0x4a>
   324ce:	2280      	movs	r2, #128	; 0x80
   324d0:	2300      	movs	r3, #0
   324d2:	2500      	movs	r5, #0
   324d4:	0312      	lsls	r2, r2, #12
   324d6:	4699      	mov	r9, r3
   324d8:	4c05      	ldr	r4, [pc, #20]	; (324f0 <__aeabi_dmul+0x1dc>)
   324da:	e782      	b.n	323e2 <__aeabi_dmul+0xce>
   324dc:	465c      	mov	r4, fp
   324de:	464b      	mov	r3, r9
   324e0:	9802      	ldr	r0, [sp, #8]
   324e2:	e76f      	b.n	323c4 <__aeabi_dmul+0xb0>
   324e4:	465c      	mov	r4, fp
   324e6:	464b      	mov	r3, r9
   324e8:	9501      	str	r5, [sp, #4]
   324ea:	9802      	ldr	r0, [sp, #8]
   324ec:	e76a      	b.n	323c4 <__aeabi_dmul+0xb0>
   324ee:	46c0      	nop			; (mov r8, r8)
   324f0:	000007ff 	.word	0x000007ff
   324f4:	fffffc01 	.word	0xfffffc01
   324f8:	00038584 	.word	0x00038584
   324fc:	800fffff 	.word	0x800fffff
   32500:	fffffc0d 	.word	0xfffffc0d
   32504:	464a      	mov	r2, r9
   32506:	4649      	mov	r1, r9
   32508:	0c17      	lsrs	r7, r2, #16
   3250a:	0c1a      	lsrs	r2, r3, #16
   3250c:	041b      	lsls	r3, r3, #16
   3250e:	0c1b      	lsrs	r3, r3, #16
   32510:	0408      	lsls	r0, r1, #16
   32512:	0019      	movs	r1, r3
   32514:	0c00      	lsrs	r0, r0, #16
   32516:	4341      	muls	r1, r0
   32518:	0015      	movs	r5, r2
   3251a:	4688      	mov	r8, r1
   3251c:	0019      	movs	r1, r3
   3251e:	437d      	muls	r5, r7
   32520:	4379      	muls	r1, r7
   32522:	9503      	str	r5, [sp, #12]
   32524:	4689      	mov	r9, r1
   32526:	0029      	movs	r1, r5
   32528:	0015      	movs	r5, r2
   3252a:	4345      	muls	r5, r0
   3252c:	444d      	add	r5, r9
   3252e:	9502      	str	r5, [sp, #8]
   32530:	4645      	mov	r5, r8
   32532:	0c2d      	lsrs	r5, r5, #16
   32534:	46aa      	mov	sl, r5
   32536:	9d02      	ldr	r5, [sp, #8]
   32538:	4455      	add	r5, sl
   3253a:	45a9      	cmp	r9, r5
   3253c:	d906      	bls.n	3254c <__aeabi_dmul+0x238>
   3253e:	468a      	mov	sl, r1
   32540:	2180      	movs	r1, #128	; 0x80
   32542:	0249      	lsls	r1, r1, #9
   32544:	4689      	mov	r9, r1
   32546:	44ca      	add	sl, r9
   32548:	4651      	mov	r1, sl
   3254a:	9103      	str	r1, [sp, #12]
   3254c:	0c29      	lsrs	r1, r5, #16
   3254e:	9104      	str	r1, [sp, #16]
   32550:	4641      	mov	r1, r8
   32552:	0409      	lsls	r1, r1, #16
   32554:	042d      	lsls	r5, r5, #16
   32556:	0c09      	lsrs	r1, r1, #16
   32558:	4688      	mov	r8, r1
   3255a:	0029      	movs	r1, r5
   3255c:	0c25      	lsrs	r5, r4, #16
   3255e:	0424      	lsls	r4, r4, #16
   32560:	4441      	add	r1, r8
   32562:	0c24      	lsrs	r4, r4, #16
   32564:	9105      	str	r1, [sp, #20]
   32566:	0021      	movs	r1, r4
   32568:	4341      	muls	r1, r0
   3256a:	4688      	mov	r8, r1
   3256c:	0021      	movs	r1, r4
   3256e:	4379      	muls	r1, r7
   32570:	468a      	mov	sl, r1
   32572:	4368      	muls	r0, r5
   32574:	4641      	mov	r1, r8
   32576:	4450      	add	r0, sl
   32578:	4681      	mov	r9, r0
   3257a:	0c08      	lsrs	r0, r1, #16
   3257c:	4448      	add	r0, r9
   3257e:	436f      	muls	r7, r5
   32580:	4582      	cmp	sl, r0
   32582:	d903      	bls.n	3258c <__aeabi_dmul+0x278>
   32584:	2180      	movs	r1, #128	; 0x80
   32586:	0249      	lsls	r1, r1, #9
   32588:	4689      	mov	r9, r1
   3258a:	444f      	add	r7, r9
   3258c:	0c01      	lsrs	r1, r0, #16
   3258e:	4689      	mov	r9, r1
   32590:	0039      	movs	r1, r7
   32592:	4449      	add	r1, r9
   32594:	9102      	str	r1, [sp, #8]
   32596:	4641      	mov	r1, r8
   32598:	040f      	lsls	r7, r1, #16
   3259a:	9904      	ldr	r1, [sp, #16]
   3259c:	0c3f      	lsrs	r7, r7, #16
   3259e:	4688      	mov	r8, r1
   325a0:	0400      	lsls	r0, r0, #16
   325a2:	19c0      	adds	r0, r0, r7
   325a4:	4480      	add	r8, r0
   325a6:	4641      	mov	r1, r8
   325a8:	9104      	str	r1, [sp, #16]
   325aa:	4659      	mov	r1, fp
   325ac:	0c0f      	lsrs	r7, r1, #16
   325ae:	0409      	lsls	r1, r1, #16
   325b0:	0c09      	lsrs	r1, r1, #16
   325b2:	4688      	mov	r8, r1
   325b4:	4359      	muls	r1, r3
   325b6:	468a      	mov	sl, r1
   325b8:	0039      	movs	r1, r7
   325ba:	4351      	muls	r1, r2
   325bc:	4689      	mov	r9, r1
   325be:	4641      	mov	r1, r8
   325c0:	434a      	muls	r2, r1
   325c2:	4651      	mov	r1, sl
   325c4:	0c09      	lsrs	r1, r1, #16
   325c6:	468b      	mov	fp, r1
   325c8:	437b      	muls	r3, r7
   325ca:	18d2      	adds	r2, r2, r3
   325cc:	445a      	add	r2, fp
   325ce:	4293      	cmp	r3, r2
   325d0:	d903      	bls.n	325da <__aeabi_dmul+0x2c6>
   325d2:	2380      	movs	r3, #128	; 0x80
   325d4:	025b      	lsls	r3, r3, #9
   325d6:	469b      	mov	fp, r3
   325d8:	44d9      	add	r9, fp
   325da:	4651      	mov	r1, sl
   325dc:	0409      	lsls	r1, r1, #16
   325de:	0c09      	lsrs	r1, r1, #16
   325e0:	468a      	mov	sl, r1
   325e2:	4641      	mov	r1, r8
   325e4:	4361      	muls	r1, r4
   325e6:	437c      	muls	r4, r7
   325e8:	0c13      	lsrs	r3, r2, #16
   325ea:	0412      	lsls	r2, r2, #16
   325ec:	444b      	add	r3, r9
   325ee:	4452      	add	r2, sl
   325f0:	46a1      	mov	r9, r4
   325f2:	468a      	mov	sl, r1
   325f4:	003c      	movs	r4, r7
   325f6:	4641      	mov	r1, r8
   325f8:	436c      	muls	r4, r5
   325fa:	434d      	muls	r5, r1
   325fc:	4651      	mov	r1, sl
   325fe:	444d      	add	r5, r9
   32600:	0c0f      	lsrs	r7, r1, #16
   32602:	197d      	adds	r5, r7, r5
   32604:	45a9      	cmp	r9, r5
   32606:	d903      	bls.n	32610 <__aeabi_dmul+0x2fc>
   32608:	2180      	movs	r1, #128	; 0x80
   3260a:	0249      	lsls	r1, r1, #9
   3260c:	4688      	mov	r8, r1
   3260e:	4444      	add	r4, r8
   32610:	9f04      	ldr	r7, [sp, #16]
   32612:	9903      	ldr	r1, [sp, #12]
   32614:	46b8      	mov	r8, r7
   32616:	4441      	add	r1, r8
   32618:	468b      	mov	fp, r1
   3261a:	4583      	cmp	fp, r0
   3261c:	4180      	sbcs	r0, r0
   3261e:	4241      	negs	r1, r0
   32620:	4688      	mov	r8, r1
   32622:	4651      	mov	r1, sl
   32624:	0408      	lsls	r0, r1, #16
   32626:	042f      	lsls	r7, r5, #16
   32628:	0c00      	lsrs	r0, r0, #16
   3262a:	183f      	adds	r7, r7, r0
   3262c:	4658      	mov	r0, fp
   3262e:	9902      	ldr	r1, [sp, #8]
   32630:	1810      	adds	r0, r2, r0
   32632:	4689      	mov	r9, r1
   32634:	4290      	cmp	r0, r2
   32636:	4192      	sbcs	r2, r2
   32638:	444f      	add	r7, r9
   3263a:	46ba      	mov	sl, r7
   3263c:	4252      	negs	r2, r2
   3263e:	4699      	mov	r9, r3
   32640:	4693      	mov	fp, r2
   32642:	44c2      	add	sl, r8
   32644:	44d1      	add	r9, sl
   32646:	44cb      	add	fp, r9
   32648:	428f      	cmp	r7, r1
   3264a:	41bf      	sbcs	r7, r7
   3264c:	45c2      	cmp	sl, r8
   3264e:	4189      	sbcs	r1, r1
   32650:	4599      	cmp	r9, r3
   32652:	419b      	sbcs	r3, r3
   32654:	4593      	cmp	fp, r2
   32656:	4192      	sbcs	r2, r2
   32658:	427f      	negs	r7, r7
   3265a:	4249      	negs	r1, r1
   3265c:	0c2d      	lsrs	r5, r5, #16
   3265e:	4252      	negs	r2, r2
   32660:	430f      	orrs	r7, r1
   32662:	425b      	negs	r3, r3
   32664:	4313      	orrs	r3, r2
   32666:	197f      	adds	r7, r7, r5
   32668:	18ff      	adds	r7, r7, r3
   3266a:	465b      	mov	r3, fp
   3266c:	193c      	adds	r4, r7, r4
   3266e:	0ddb      	lsrs	r3, r3, #23
   32670:	9a05      	ldr	r2, [sp, #20]
   32672:	0264      	lsls	r4, r4, #9
   32674:	431c      	orrs	r4, r3
   32676:	0243      	lsls	r3, r0, #9
   32678:	4313      	orrs	r3, r2
   3267a:	1e5d      	subs	r5, r3, #1
   3267c:	41ab      	sbcs	r3, r5
   3267e:	465a      	mov	r2, fp
   32680:	0dc0      	lsrs	r0, r0, #23
   32682:	4303      	orrs	r3, r0
   32684:	0252      	lsls	r2, r2, #9
   32686:	4313      	orrs	r3, r2
   32688:	01e2      	lsls	r2, r4, #7
   3268a:	d556      	bpl.n	3273a <__aeabi_dmul+0x426>
   3268c:	2001      	movs	r0, #1
   3268e:	085a      	lsrs	r2, r3, #1
   32690:	4003      	ands	r3, r0
   32692:	4313      	orrs	r3, r2
   32694:	07e2      	lsls	r2, r4, #31
   32696:	4313      	orrs	r3, r2
   32698:	0864      	lsrs	r4, r4, #1
   3269a:	485a      	ldr	r0, [pc, #360]	; (32804 <__aeabi_dmul+0x4f0>)
   3269c:	4460      	add	r0, ip
   3269e:	2800      	cmp	r0, #0
   326a0:	dd4d      	ble.n	3273e <__aeabi_dmul+0x42a>
   326a2:	075a      	lsls	r2, r3, #29
   326a4:	d009      	beq.n	326ba <__aeabi_dmul+0x3a6>
   326a6:	220f      	movs	r2, #15
   326a8:	401a      	ands	r2, r3
   326aa:	2a04      	cmp	r2, #4
   326ac:	d005      	beq.n	326ba <__aeabi_dmul+0x3a6>
   326ae:	1d1a      	adds	r2, r3, #4
   326b0:	429a      	cmp	r2, r3
   326b2:	419b      	sbcs	r3, r3
   326b4:	425b      	negs	r3, r3
   326b6:	18e4      	adds	r4, r4, r3
   326b8:	0013      	movs	r3, r2
   326ba:	01e2      	lsls	r2, r4, #7
   326bc:	d504      	bpl.n	326c8 <__aeabi_dmul+0x3b4>
   326be:	2080      	movs	r0, #128	; 0x80
   326c0:	4a51      	ldr	r2, [pc, #324]	; (32808 <__aeabi_dmul+0x4f4>)
   326c2:	00c0      	lsls	r0, r0, #3
   326c4:	4014      	ands	r4, r2
   326c6:	4460      	add	r0, ip
   326c8:	4a50      	ldr	r2, [pc, #320]	; (3280c <__aeabi_dmul+0x4f8>)
   326ca:	4290      	cmp	r0, r2
   326cc:	dd00      	ble.n	326d0 <__aeabi_dmul+0x3bc>
   326ce:	e6e3      	b.n	32498 <__aeabi_dmul+0x184>
   326d0:	2501      	movs	r5, #1
   326d2:	08db      	lsrs	r3, r3, #3
   326d4:	0762      	lsls	r2, r4, #29
   326d6:	431a      	orrs	r2, r3
   326d8:	0264      	lsls	r4, r4, #9
   326da:	9b01      	ldr	r3, [sp, #4]
   326dc:	4691      	mov	r9, r2
   326de:	0b22      	lsrs	r2, r4, #12
   326e0:	0544      	lsls	r4, r0, #21
   326e2:	0d64      	lsrs	r4, r4, #21
   326e4:	401d      	ands	r5, r3
   326e6:	e67c      	b.n	323e2 <__aeabi_dmul+0xce>
   326e8:	2280      	movs	r2, #128	; 0x80
   326ea:	4659      	mov	r1, fp
   326ec:	0312      	lsls	r2, r2, #12
   326ee:	4211      	tst	r1, r2
   326f0:	d008      	beq.n	32704 <__aeabi_dmul+0x3f0>
   326f2:	4214      	tst	r4, r2
   326f4:	d106      	bne.n	32704 <__aeabi_dmul+0x3f0>
   326f6:	4322      	orrs	r2, r4
   326f8:	0312      	lsls	r2, r2, #12
   326fa:	0b12      	lsrs	r2, r2, #12
   326fc:	4645      	mov	r5, r8
   326fe:	4699      	mov	r9, r3
   32700:	4c43      	ldr	r4, [pc, #268]	; (32810 <__aeabi_dmul+0x4fc>)
   32702:	e66e      	b.n	323e2 <__aeabi_dmul+0xce>
   32704:	465b      	mov	r3, fp
   32706:	431a      	orrs	r2, r3
   32708:	0312      	lsls	r2, r2, #12
   3270a:	0b12      	lsrs	r2, r2, #12
   3270c:	4c40      	ldr	r4, [pc, #256]	; (32810 <__aeabi_dmul+0x4fc>)
   3270e:	e668      	b.n	323e2 <__aeabi_dmul+0xce>
   32710:	0003      	movs	r3, r0
   32712:	4654      	mov	r4, sl
   32714:	3b28      	subs	r3, #40	; 0x28
   32716:	409c      	lsls	r4, r3
   32718:	2300      	movs	r3, #0
   3271a:	e6b9      	b.n	32490 <__aeabi_dmul+0x17c>
   3271c:	f000 fcc8 	bl	330b0 <__clzsi2>
   32720:	3020      	adds	r0, #32
   32722:	e6a6      	b.n	32472 <__aeabi_dmul+0x15e>
   32724:	0003      	movs	r3, r0
   32726:	3b28      	subs	r3, #40	; 0x28
   32728:	409f      	lsls	r7, r3
   3272a:	2300      	movs	r3, #0
   3272c:	46bb      	mov	fp, r7
   3272e:	4699      	mov	r9, r3
   32730:	e68a      	b.n	32448 <__aeabi_dmul+0x134>
   32732:	f000 fcbd 	bl	330b0 <__clzsi2>
   32736:	3020      	adds	r0, #32
   32738:	e674      	b.n	32424 <__aeabi_dmul+0x110>
   3273a:	46b4      	mov	ip, r6
   3273c:	e7ad      	b.n	3269a <__aeabi_dmul+0x386>
   3273e:	2501      	movs	r5, #1
   32740:	1a2a      	subs	r2, r5, r0
   32742:	2a38      	cmp	r2, #56	; 0x38
   32744:	dd06      	ble.n	32754 <__aeabi_dmul+0x440>
   32746:	9b01      	ldr	r3, [sp, #4]
   32748:	2400      	movs	r4, #0
   3274a:	401d      	ands	r5, r3
   3274c:	2300      	movs	r3, #0
   3274e:	2200      	movs	r2, #0
   32750:	4699      	mov	r9, r3
   32752:	e646      	b.n	323e2 <__aeabi_dmul+0xce>
   32754:	2a1f      	cmp	r2, #31
   32756:	dc21      	bgt.n	3279c <__aeabi_dmul+0x488>
   32758:	2520      	movs	r5, #32
   3275a:	0020      	movs	r0, r4
   3275c:	1aad      	subs	r5, r5, r2
   3275e:	001e      	movs	r6, r3
   32760:	40ab      	lsls	r3, r5
   32762:	40a8      	lsls	r0, r5
   32764:	40d6      	lsrs	r6, r2
   32766:	1e5d      	subs	r5, r3, #1
   32768:	41ab      	sbcs	r3, r5
   3276a:	4330      	orrs	r0, r6
   3276c:	4318      	orrs	r0, r3
   3276e:	40d4      	lsrs	r4, r2
   32770:	0743      	lsls	r3, r0, #29
   32772:	d009      	beq.n	32788 <__aeabi_dmul+0x474>
   32774:	230f      	movs	r3, #15
   32776:	4003      	ands	r3, r0
   32778:	2b04      	cmp	r3, #4
   3277a:	d005      	beq.n	32788 <__aeabi_dmul+0x474>
   3277c:	0003      	movs	r3, r0
   3277e:	1d18      	adds	r0, r3, #4
   32780:	4298      	cmp	r0, r3
   32782:	419b      	sbcs	r3, r3
   32784:	425b      	negs	r3, r3
   32786:	18e4      	adds	r4, r4, r3
   32788:	0223      	lsls	r3, r4, #8
   3278a:	d521      	bpl.n	327d0 <__aeabi_dmul+0x4bc>
   3278c:	2501      	movs	r5, #1
   3278e:	9b01      	ldr	r3, [sp, #4]
   32790:	2401      	movs	r4, #1
   32792:	401d      	ands	r5, r3
   32794:	2300      	movs	r3, #0
   32796:	2200      	movs	r2, #0
   32798:	4699      	mov	r9, r3
   3279a:	e622      	b.n	323e2 <__aeabi_dmul+0xce>
   3279c:	251f      	movs	r5, #31
   3279e:	0021      	movs	r1, r4
   327a0:	426d      	negs	r5, r5
   327a2:	1a28      	subs	r0, r5, r0
   327a4:	40c1      	lsrs	r1, r0
   327a6:	0008      	movs	r0, r1
   327a8:	2a20      	cmp	r2, #32
   327aa:	d01d      	beq.n	327e8 <__aeabi_dmul+0x4d4>
   327ac:	355f      	adds	r5, #95	; 0x5f
   327ae:	1aaa      	subs	r2, r5, r2
   327b0:	4094      	lsls	r4, r2
   327b2:	4323      	orrs	r3, r4
   327b4:	1e5c      	subs	r4, r3, #1
   327b6:	41a3      	sbcs	r3, r4
   327b8:	2507      	movs	r5, #7
   327ba:	4303      	orrs	r3, r0
   327bc:	401d      	ands	r5, r3
   327be:	2200      	movs	r2, #0
   327c0:	2d00      	cmp	r5, #0
   327c2:	d009      	beq.n	327d8 <__aeabi_dmul+0x4c4>
   327c4:	220f      	movs	r2, #15
   327c6:	2400      	movs	r4, #0
   327c8:	401a      	ands	r2, r3
   327ca:	0018      	movs	r0, r3
   327cc:	2a04      	cmp	r2, #4
   327ce:	d1d6      	bne.n	3277e <__aeabi_dmul+0x46a>
   327d0:	0003      	movs	r3, r0
   327d2:	0765      	lsls	r5, r4, #29
   327d4:	0264      	lsls	r4, r4, #9
   327d6:	0b22      	lsrs	r2, r4, #12
   327d8:	08db      	lsrs	r3, r3, #3
   327da:	432b      	orrs	r3, r5
   327dc:	2501      	movs	r5, #1
   327de:	4699      	mov	r9, r3
   327e0:	9b01      	ldr	r3, [sp, #4]
   327e2:	2400      	movs	r4, #0
   327e4:	401d      	ands	r5, r3
   327e6:	e5fc      	b.n	323e2 <__aeabi_dmul+0xce>
   327e8:	2400      	movs	r4, #0
   327ea:	e7e2      	b.n	327b2 <__aeabi_dmul+0x49e>
   327ec:	2280      	movs	r2, #128	; 0x80
   327ee:	2501      	movs	r5, #1
   327f0:	0312      	lsls	r2, r2, #12
   327f2:	4322      	orrs	r2, r4
   327f4:	9901      	ldr	r1, [sp, #4]
   327f6:	0312      	lsls	r2, r2, #12
   327f8:	0b12      	lsrs	r2, r2, #12
   327fa:	400d      	ands	r5, r1
   327fc:	4699      	mov	r9, r3
   327fe:	4c04      	ldr	r4, [pc, #16]	; (32810 <__aeabi_dmul+0x4fc>)
   32800:	e5ef      	b.n	323e2 <__aeabi_dmul+0xce>
   32802:	46c0      	nop			; (mov r8, r8)
   32804:	000003ff 	.word	0x000003ff
   32808:	feffffff 	.word	0xfeffffff
   3280c:	000007fe 	.word	0x000007fe
   32810:	000007ff 	.word	0x000007ff

00032814 <__aeabi_dsub>:
   32814:	b5f0      	push	{r4, r5, r6, r7, lr}
   32816:	4646      	mov	r6, r8
   32818:	46d6      	mov	lr, sl
   3281a:	464f      	mov	r7, r9
   3281c:	030c      	lsls	r4, r1, #12
   3281e:	b5c0      	push	{r6, r7, lr}
   32820:	0fcd      	lsrs	r5, r1, #31
   32822:	004e      	lsls	r6, r1, #1
   32824:	0a61      	lsrs	r1, r4, #9
   32826:	0f44      	lsrs	r4, r0, #29
   32828:	430c      	orrs	r4, r1
   3282a:	00c1      	lsls	r1, r0, #3
   3282c:	0058      	lsls	r0, r3, #1
   3282e:	0d40      	lsrs	r0, r0, #21
   32830:	4684      	mov	ip, r0
   32832:	468a      	mov	sl, r1
   32834:	000f      	movs	r7, r1
   32836:	0319      	lsls	r1, r3, #12
   32838:	0f50      	lsrs	r0, r2, #29
   3283a:	0a49      	lsrs	r1, r1, #9
   3283c:	4301      	orrs	r1, r0
   3283e:	48c6      	ldr	r0, [pc, #792]	; (32b58 <__aeabi_dsub+0x344>)
   32840:	0d76      	lsrs	r6, r6, #21
   32842:	46a8      	mov	r8, r5
   32844:	0fdb      	lsrs	r3, r3, #31
   32846:	00d2      	lsls	r2, r2, #3
   32848:	4584      	cmp	ip, r0
   3284a:	d100      	bne.n	3284e <__aeabi_dsub+0x3a>
   3284c:	e0d8      	b.n	32a00 <__aeabi_dsub+0x1ec>
   3284e:	2001      	movs	r0, #1
   32850:	4043      	eors	r3, r0
   32852:	42ab      	cmp	r3, r5
   32854:	d100      	bne.n	32858 <__aeabi_dsub+0x44>
   32856:	e0a6      	b.n	329a6 <__aeabi_dsub+0x192>
   32858:	4660      	mov	r0, ip
   3285a:	1a35      	subs	r5, r6, r0
   3285c:	2d00      	cmp	r5, #0
   3285e:	dc00      	bgt.n	32862 <__aeabi_dsub+0x4e>
   32860:	e105      	b.n	32a6e <__aeabi_dsub+0x25a>
   32862:	2800      	cmp	r0, #0
   32864:	d110      	bne.n	32888 <__aeabi_dsub+0x74>
   32866:	000b      	movs	r3, r1
   32868:	4313      	orrs	r3, r2
   3286a:	d100      	bne.n	3286e <__aeabi_dsub+0x5a>
   3286c:	e0d7      	b.n	32a1e <__aeabi_dsub+0x20a>
   3286e:	1e6b      	subs	r3, r5, #1
   32870:	2b00      	cmp	r3, #0
   32872:	d000      	beq.n	32876 <__aeabi_dsub+0x62>
   32874:	e14b      	b.n	32b0e <__aeabi_dsub+0x2fa>
   32876:	4653      	mov	r3, sl
   32878:	1a9f      	subs	r7, r3, r2
   3287a:	45ba      	cmp	sl, r7
   3287c:	4180      	sbcs	r0, r0
   3287e:	1a64      	subs	r4, r4, r1
   32880:	4240      	negs	r0, r0
   32882:	1a24      	subs	r4, r4, r0
   32884:	2601      	movs	r6, #1
   32886:	e01e      	b.n	328c6 <__aeabi_dsub+0xb2>
   32888:	4bb3      	ldr	r3, [pc, #716]	; (32b58 <__aeabi_dsub+0x344>)
   3288a:	429e      	cmp	r6, r3
   3288c:	d048      	beq.n	32920 <__aeabi_dsub+0x10c>
   3288e:	2380      	movs	r3, #128	; 0x80
   32890:	041b      	lsls	r3, r3, #16
   32892:	4319      	orrs	r1, r3
   32894:	2d38      	cmp	r5, #56	; 0x38
   32896:	dd00      	ble.n	3289a <__aeabi_dsub+0x86>
   32898:	e119      	b.n	32ace <__aeabi_dsub+0x2ba>
   3289a:	2d1f      	cmp	r5, #31
   3289c:	dd00      	ble.n	328a0 <__aeabi_dsub+0x8c>
   3289e:	e14c      	b.n	32b3a <__aeabi_dsub+0x326>
   328a0:	2320      	movs	r3, #32
   328a2:	000f      	movs	r7, r1
   328a4:	1b5b      	subs	r3, r3, r5
   328a6:	0010      	movs	r0, r2
   328a8:	409a      	lsls	r2, r3
   328aa:	409f      	lsls	r7, r3
   328ac:	40e8      	lsrs	r0, r5
   328ae:	1e53      	subs	r3, r2, #1
   328b0:	419a      	sbcs	r2, r3
   328b2:	40e9      	lsrs	r1, r5
   328b4:	4307      	orrs	r7, r0
   328b6:	4317      	orrs	r7, r2
   328b8:	4653      	mov	r3, sl
   328ba:	1bdf      	subs	r7, r3, r7
   328bc:	1a61      	subs	r1, r4, r1
   328be:	45ba      	cmp	sl, r7
   328c0:	41a4      	sbcs	r4, r4
   328c2:	4264      	negs	r4, r4
   328c4:	1b0c      	subs	r4, r1, r4
   328c6:	0223      	lsls	r3, r4, #8
   328c8:	d400      	bmi.n	328cc <__aeabi_dsub+0xb8>
   328ca:	e0c5      	b.n	32a58 <__aeabi_dsub+0x244>
   328cc:	0264      	lsls	r4, r4, #9
   328ce:	0a65      	lsrs	r5, r4, #9
   328d0:	2d00      	cmp	r5, #0
   328d2:	d100      	bne.n	328d6 <__aeabi_dsub+0xc2>
   328d4:	e0f6      	b.n	32ac4 <__aeabi_dsub+0x2b0>
   328d6:	0028      	movs	r0, r5
   328d8:	f000 fbea 	bl	330b0 <__clzsi2>
   328dc:	0003      	movs	r3, r0
   328de:	3b08      	subs	r3, #8
   328e0:	2b1f      	cmp	r3, #31
   328e2:	dd00      	ble.n	328e6 <__aeabi_dsub+0xd2>
   328e4:	e0e9      	b.n	32aba <__aeabi_dsub+0x2a6>
   328e6:	2220      	movs	r2, #32
   328e8:	003c      	movs	r4, r7
   328ea:	1ad2      	subs	r2, r2, r3
   328ec:	409d      	lsls	r5, r3
   328ee:	40d4      	lsrs	r4, r2
   328f0:	409f      	lsls	r7, r3
   328f2:	4325      	orrs	r5, r4
   328f4:	429e      	cmp	r6, r3
   328f6:	dd00      	ble.n	328fa <__aeabi_dsub+0xe6>
   328f8:	e0db      	b.n	32ab2 <__aeabi_dsub+0x29e>
   328fa:	1b9e      	subs	r6, r3, r6
   328fc:	1c73      	adds	r3, r6, #1
   328fe:	2b1f      	cmp	r3, #31
   32900:	dd00      	ble.n	32904 <__aeabi_dsub+0xf0>
   32902:	e10a      	b.n	32b1a <__aeabi_dsub+0x306>
   32904:	2220      	movs	r2, #32
   32906:	0038      	movs	r0, r7
   32908:	1ad2      	subs	r2, r2, r3
   3290a:	0029      	movs	r1, r5
   3290c:	4097      	lsls	r7, r2
   3290e:	002c      	movs	r4, r5
   32910:	4091      	lsls	r1, r2
   32912:	40d8      	lsrs	r0, r3
   32914:	1e7a      	subs	r2, r7, #1
   32916:	4197      	sbcs	r7, r2
   32918:	40dc      	lsrs	r4, r3
   3291a:	2600      	movs	r6, #0
   3291c:	4301      	orrs	r1, r0
   3291e:	430f      	orrs	r7, r1
   32920:	077b      	lsls	r3, r7, #29
   32922:	d009      	beq.n	32938 <__aeabi_dsub+0x124>
   32924:	230f      	movs	r3, #15
   32926:	403b      	ands	r3, r7
   32928:	2b04      	cmp	r3, #4
   3292a:	d005      	beq.n	32938 <__aeabi_dsub+0x124>
   3292c:	1d3b      	adds	r3, r7, #4
   3292e:	42bb      	cmp	r3, r7
   32930:	41bf      	sbcs	r7, r7
   32932:	427f      	negs	r7, r7
   32934:	19e4      	adds	r4, r4, r7
   32936:	001f      	movs	r7, r3
   32938:	0223      	lsls	r3, r4, #8
   3293a:	d525      	bpl.n	32988 <__aeabi_dsub+0x174>
   3293c:	4b86      	ldr	r3, [pc, #536]	; (32b58 <__aeabi_dsub+0x344>)
   3293e:	3601      	adds	r6, #1
   32940:	429e      	cmp	r6, r3
   32942:	d100      	bne.n	32946 <__aeabi_dsub+0x132>
   32944:	e0af      	b.n	32aa6 <__aeabi_dsub+0x292>
   32946:	4b85      	ldr	r3, [pc, #532]	; (32b5c <__aeabi_dsub+0x348>)
   32948:	2501      	movs	r5, #1
   3294a:	401c      	ands	r4, r3
   3294c:	4643      	mov	r3, r8
   3294e:	0762      	lsls	r2, r4, #29
   32950:	08ff      	lsrs	r7, r7, #3
   32952:	0264      	lsls	r4, r4, #9
   32954:	0576      	lsls	r6, r6, #21
   32956:	4317      	orrs	r7, r2
   32958:	0b24      	lsrs	r4, r4, #12
   3295a:	0d76      	lsrs	r6, r6, #21
   3295c:	401d      	ands	r5, r3
   3295e:	2100      	movs	r1, #0
   32960:	0324      	lsls	r4, r4, #12
   32962:	0b23      	lsrs	r3, r4, #12
   32964:	0d0c      	lsrs	r4, r1, #20
   32966:	4a7e      	ldr	r2, [pc, #504]	; (32b60 <__aeabi_dsub+0x34c>)
   32968:	0524      	lsls	r4, r4, #20
   3296a:	431c      	orrs	r4, r3
   3296c:	4014      	ands	r4, r2
   3296e:	0533      	lsls	r3, r6, #20
   32970:	4323      	orrs	r3, r4
   32972:	005b      	lsls	r3, r3, #1
   32974:	07ed      	lsls	r5, r5, #31
   32976:	085b      	lsrs	r3, r3, #1
   32978:	432b      	orrs	r3, r5
   3297a:	0038      	movs	r0, r7
   3297c:	0019      	movs	r1, r3
   3297e:	bc1c      	pop	{r2, r3, r4}
   32980:	4690      	mov	r8, r2
   32982:	4699      	mov	r9, r3
   32984:	46a2      	mov	sl, r4
   32986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32988:	2501      	movs	r5, #1
   3298a:	4643      	mov	r3, r8
   3298c:	0762      	lsls	r2, r4, #29
   3298e:	08ff      	lsrs	r7, r7, #3
   32990:	4317      	orrs	r7, r2
   32992:	08e4      	lsrs	r4, r4, #3
   32994:	401d      	ands	r5, r3
   32996:	4b70      	ldr	r3, [pc, #448]	; (32b58 <__aeabi_dsub+0x344>)
   32998:	429e      	cmp	r6, r3
   3299a:	d036      	beq.n	32a0a <__aeabi_dsub+0x1f6>
   3299c:	0324      	lsls	r4, r4, #12
   3299e:	0576      	lsls	r6, r6, #21
   329a0:	0b24      	lsrs	r4, r4, #12
   329a2:	0d76      	lsrs	r6, r6, #21
   329a4:	e7db      	b.n	3295e <__aeabi_dsub+0x14a>
   329a6:	4663      	mov	r3, ip
   329a8:	1af3      	subs	r3, r6, r3
   329aa:	2b00      	cmp	r3, #0
   329ac:	dc00      	bgt.n	329b0 <__aeabi_dsub+0x19c>
   329ae:	e094      	b.n	32ada <__aeabi_dsub+0x2c6>
   329b0:	4660      	mov	r0, ip
   329b2:	2800      	cmp	r0, #0
   329b4:	d035      	beq.n	32a22 <__aeabi_dsub+0x20e>
   329b6:	4868      	ldr	r0, [pc, #416]	; (32b58 <__aeabi_dsub+0x344>)
   329b8:	4286      	cmp	r6, r0
   329ba:	d0b1      	beq.n	32920 <__aeabi_dsub+0x10c>
   329bc:	2780      	movs	r7, #128	; 0x80
   329be:	043f      	lsls	r7, r7, #16
   329c0:	4339      	orrs	r1, r7
   329c2:	2b38      	cmp	r3, #56	; 0x38
   329c4:	dc00      	bgt.n	329c8 <__aeabi_dsub+0x1b4>
   329c6:	e0fd      	b.n	32bc4 <__aeabi_dsub+0x3b0>
   329c8:	430a      	orrs	r2, r1
   329ca:	0017      	movs	r7, r2
   329cc:	2100      	movs	r1, #0
   329ce:	1e7a      	subs	r2, r7, #1
   329d0:	4197      	sbcs	r7, r2
   329d2:	4457      	add	r7, sl
   329d4:	4557      	cmp	r7, sl
   329d6:	4180      	sbcs	r0, r0
   329d8:	1909      	adds	r1, r1, r4
   329da:	4244      	negs	r4, r0
   329dc:	190c      	adds	r4, r1, r4
   329de:	0223      	lsls	r3, r4, #8
   329e0:	d53a      	bpl.n	32a58 <__aeabi_dsub+0x244>
   329e2:	4b5d      	ldr	r3, [pc, #372]	; (32b58 <__aeabi_dsub+0x344>)
   329e4:	3601      	adds	r6, #1
   329e6:	429e      	cmp	r6, r3
   329e8:	d100      	bne.n	329ec <__aeabi_dsub+0x1d8>
   329ea:	e14b      	b.n	32c84 <__aeabi_dsub+0x470>
   329ec:	2201      	movs	r2, #1
   329ee:	4b5b      	ldr	r3, [pc, #364]	; (32b5c <__aeabi_dsub+0x348>)
   329f0:	401c      	ands	r4, r3
   329f2:	087b      	lsrs	r3, r7, #1
   329f4:	4017      	ands	r7, r2
   329f6:	431f      	orrs	r7, r3
   329f8:	07e2      	lsls	r2, r4, #31
   329fa:	4317      	orrs	r7, r2
   329fc:	0864      	lsrs	r4, r4, #1
   329fe:	e78f      	b.n	32920 <__aeabi_dsub+0x10c>
   32a00:	0008      	movs	r0, r1
   32a02:	4310      	orrs	r0, r2
   32a04:	d000      	beq.n	32a08 <__aeabi_dsub+0x1f4>
   32a06:	e724      	b.n	32852 <__aeabi_dsub+0x3e>
   32a08:	e721      	b.n	3284e <__aeabi_dsub+0x3a>
   32a0a:	0023      	movs	r3, r4
   32a0c:	433b      	orrs	r3, r7
   32a0e:	d100      	bne.n	32a12 <__aeabi_dsub+0x1fe>
   32a10:	e1b9      	b.n	32d86 <__aeabi_dsub+0x572>
   32a12:	2280      	movs	r2, #128	; 0x80
   32a14:	0312      	lsls	r2, r2, #12
   32a16:	4314      	orrs	r4, r2
   32a18:	0324      	lsls	r4, r4, #12
   32a1a:	0b24      	lsrs	r4, r4, #12
   32a1c:	e79f      	b.n	3295e <__aeabi_dsub+0x14a>
   32a1e:	002e      	movs	r6, r5
   32a20:	e77e      	b.n	32920 <__aeabi_dsub+0x10c>
   32a22:	0008      	movs	r0, r1
   32a24:	4310      	orrs	r0, r2
   32a26:	d100      	bne.n	32a2a <__aeabi_dsub+0x216>
   32a28:	e0ca      	b.n	32bc0 <__aeabi_dsub+0x3ac>
   32a2a:	1e58      	subs	r0, r3, #1
   32a2c:	4684      	mov	ip, r0
   32a2e:	2800      	cmp	r0, #0
   32a30:	d000      	beq.n	32a34 <__aeabi_dsub+0x220>
   32a32:	e0e7      	b.n	32c04 <__aeabi_dsub+0x3f0>
   32a34:	4452      	add	r2, sl
   32a36:	4552      	cmp	r2, sl
   32a38:	4180      	sbcs	r0, r0
   32a3a:	1864      	adds	r4, r4, r1
   32a3c:	4240      	negs	r0, r0
   32a3e:	1824      	adds	r4, r4, r0
   32a40:	0017      	movs	r7, r2
   32a42:	2601      	movs	r6, #1
   32a44:	0223      	lsls	r3, r4, #8
   32a46:	d507      	bpl.n	32a58 <__aeabi_dsub+0x244>
   32a48:	2602      	movs	r6, #2
   32a4a:	e7cf      	b.n	329ec <__aeabi_dsub+0x1d8>
   32a4c:	4664      	mov	r4, ip
   32a4e:	432c      	orrs	r4, r5
   32a50:	d100      	bne.n	32a54 <__aeabi_dsub+0x240>
   32a52:	e1b3      	b.n	32dbc <__aeabi_dsub+0x5a8>
   32a54:	002c      	movs	r4, r5
   32a56:	4667      	mov	r7, ip
   32a58:	077b      	lsls	r3, r7, #29
   32a5a:	d000      	beq.n	32a5e <__aeabi_dsub+0x24a>
   32a5c:	e762      	b.n	32924 <__aeabi_dsub+0x110>
   32a5e:	0763      	lsls	r3, r4, #29
   32a60:	08ff      	lsrs	r7, r7, #3
   32a62:	431f      	orrs	r7, r3
   32a64:	2501      	movs	r5, #1
   32a66:	4643      	mov	r3, r8
   32a68:	08e4      	lsrs	r4, r4, #3
   32a6a:	401d      	ands	r5, r3
   32a6c:	e793      	b.n	32996 <__aeabi_dsub+0x182>
   32a6e:	2d00      	cmp	r5, #0
   32a70:	d178      	bne.n	32b64 <__aeabi_dsub+0x350>
   32a72:	1c75      	adds	r5, r6, #1
   32a74:	056d      	lsls	r5, r5, #21
   32a76:	0d6d      	lsrs	r5, r5, #21
   32a78:	2d01      	cmp	r5, #1
   32a7a:	dc00      	bgt.n	32a7e <__aeabi_dsub+0x26a>
   32a7c:	e0f2      	b.n	32c64 <__aeabi_dsub+0x450>
   32a7e:	4650      	mov	r0, sl
   32a80:	1a80      	subs	r0, r0, r2
   32a82:	4582      	cmp	sl, r0
   32a84:	41bf      	sbcs	r7, r7
   32a86:	1a65      	subs	r5, r4, r1
   32a88:	427f      	negs	r7, r7
   32a8a:	1bed      	subs	r5, r5, r7
   32a8c:	4684      	mov	ip, r0
   32a8e:	0228      	lsls	r0, r5, #8
   32a90:	d400      	bmi.n	32a94 <__aeabi_dsub+0x280>
   32a92:	e08c      	b.n	32bae <__aeabi_dsub+0x39a>
   32a94:	4650      	mov	r0, sl
   32a96:	1a17      	subs	r7, r2, r0
   32a98:	42ba      	cmp	r2, r7
   32a9a:	4192      	sbcs	r2, r2
   32a9c:	1b0c      	subs	r4, r1, r4
   32a9e:	4255      	negs	r5, r2
   32aa0:	1b65      	subs	r5, r4, r5
   32aa2:	4698      	mov	r8, r3
   32aa4:	e714      	b.n	328d0 <__aeabi_dsub+0xbc>
   32aa6:	2501      	movs	r5, #1
   32aa8:	4643      	mov	r3, r8
   32aaa:	2400      	movs	r4, #0
   32aac:	401d      	ands	r5, r3
   32aae:	2700      	movs	r7, #0
   32ab0:	e755      	b.n	3295e <__aeabi_dsub+0x14a>
   32ab2:	4c2a      	ldr	r4, [pc, #168]	; (32b5c <__aeabi_dsub+0x348>)
   32ab4:	1af6      	subs	r6, r6, r3
   32ab6:	402c      	ands	r4, r5
   32ab8:	e732      	b.n	32920 <__aeabi_dsub+0x10c>
   32aba:	003d      	movs	r5, r7
   32abc:	3828      	subs	r0, #40	; 0x28
   32abe:	4085      	lsls	r5, r0
   32ac0:	2700      	movs	r7, #0
   32ac2:	e717      	b.n	328f4 <__aeabi_dsub+0xe0>
   32ac4:	0038      	movs	r0, r7
   32ac6:	f000 faf3 	bl	330b0 <__clzsi2>
   32aca:	3020      	adds	r0, #32
   32acc:	e706      	b.n	328dc <__aeabi_dsub+0xc8>
   32ace:	430a      	orrs	r2, r1
   32ad0:	0017      	movs	r7, r2
   32ad2:	2100      	movs	r1, #0
   32ad4:	1e7a      	subs	r2, r7, #1
   32ad6:	4197      	sbcs	r7, r2
   32ad8:	e6ee      	b.n	328b8 <__aeabi_dsub+0xa4>
   32ada:	2b00      	cmp	r3, #0
   32adc:	d000      	beq.n	32ae0 <__aeabi_dsub+0x2cc>
   32ade:	e0e5      	b.n	32cac <__aeabi_dsub+0x498>
   32ae0:	1c73      	adds	r3, r6, #1
   32ae2:	469c      	mov	ip, r3
   32ae4:	055b      	lsls	r3, r3, #21
   32ae6:	0d5b      	lsrs	r3, r3, #21
   32ae8:	2b01      	cmp	r3, #1
   32aea:	dc00      	bgt.n	32aee <__aeabi_dsub+0x2da>
   32aec:	e09f      	b.n	32c2e <__aeabi_dsub+0x41a>
   32aee:	4b1a      	ldr	r3, [pc, #104]	; (32b58 <__aeabi_dsub+0x344>)
   32af0:	459c      	cmp	ip, r3
   32af2:	d100      	bne.n	32af6 <__aeabi_dsub+0x2e2>
   32af4:	e0c5      	b.n	32c82 <__aeabi_dsub+0x46e>
   32af6:	4452      	add	r2, sl
   32af8:	4552      	cmp	r2, sl
   32afa:	4180      	sbcs	r0, r0
   32afc:	1864      	adds	r4, r4, r1
   32afe:	4240      	negs	r0, r0
   32b00:	1824      	adds	r4, r4, r0
   32b02:	07e7      	lsls	r7, r4, #31
   32b04:	0852      	lsrs	r2, r2, #1
   32b06:	4317      	orrs	r7, r2
   32b08:	0864      	lsrs	r4, r4, #1
   32b0a:	4666      	mov	r6, ip
   32b0c:	e708      	b.n	32920 <__aeabi_dsub+0x10c>
   32b0e:	4812      	ldr	r0, [pc, #72]	; (32b58 <__aeabi_dsub+0x344>)
   32b10:	4285      	cmp	r5, r0
   32b12:	d100      	bne.n	32b16 <__aeabi_dsub+0x302>
   32b14:	e085      	b.n	32c22 <__aeabi_dsub+0x40e>
   32b16:	001d      	movs	r5, r3
   32b18:	e6bc      	b.n	32894 <__aeabi_dsub+0x80>
   32b1a:	0029      	movs	r1, r5
   32b1c:	3e1f      	subs	r6, #31
   32b1e:	40f1      	lsrs	r1, r6
   32b20:	2b20      	cmp	r3, #32
   32b22:	d100      	bne.n	32b26 <__aeabi_dsub+0x312>
   32b24:	e07f      	b.n	32c26 <__aeabi_dsub+0x412>
   32b26:	2240      	movs	r2, #64	; 0x40
   32b28:	1ad3      	subs	r3, r2, r3
   32b2a:	409d      	lsls	r5, r3
   32b2c:	432f      	orrs	r7, r5
   32b2e:	1e7d      	subs	r5, r7, #1
   32b30:	41af      	sbcs	r7, r5
   32b32:	2400      	movs	r4, #0
   32b34:	430f      	orrs	r7, r1
   32b36:	2600      	movs	r6, #0
   32b38:	e78e      	b.n	32a58 <__aeabi_dsub+0x244>
   32b3a:	002b      	movs	r3, r5
   32b3c:	000f      	movs	r7, r1
   32b3e:	3b20      	subs	r3, #32
   32b40:	40df      	lsrs	r7, r3
   32b42:	2d20      	cmp	r5, #32
   32b44:	d071      	beq.n	32c2a <__aeabi_dsub+0x416>
   32b46:	2340      	movs	r3, #64	; 0x40
   32b48:	1b5d      	subs	r5, r3, r5
   32b4a:	40a9      	lsls	r1, r5
   32b4c:	430a      	orrs	r2, r1
   32b4e:	1e51      	subs	r1, r2, #1
   32b50:	418a      	sbcs	r2, r1
   32b52:	2100      	movs	r1, #0
   32b54:	4317      	orrs	r7, r2
   32b56:	e6af      	b.n	328b8 <__aeabi_dsub+0xa4>
   32b58:	000007ff 	.word	0x000007ff
   32b5c:	ff7fffff 	.word	0xff7fffff
   32b60:	800fffff 	.word	0x800fffff
   32b64:	2e00      	cmp	r6, #0
   32b66:	d03e      	beq.n	32be6 <__aeabi_dsub+0x3d2>
   32b68:	4eb3      	ldr	r6, [pc, #716]	; (32e38 <__aeabi_dsub+0x624>)
   32b6a:	45b4      	cmp	ip, r6
   32b6c:	d045      	beq.n	32bfa <__aeabi_dsub+0x3e6>
   32b6e:	2680      	movs	r6, #128	; 0x80
   32b70:	0436      	lsls	r6, r6, #16
   32b72:	426d      	negs	r5, r5
   32b74:	4334      	orrs	r4, r6
   32b76:	2d38      	cmp	r5, #56	; 0x38
   32b78:	dd00      	ble.n	32b7c <__aeabi_dsub+0x368>
   32b7a:	e0a8      	b.n	32cce <__aeabi_dsub+0x4ba>
   32b7c:	2d1f      	cmp	r5, #31
   32b7e:	dd00      	ble.n	32b82 <__aeabi_dsub+0x36e>
   32b80:	e11f      	b.n	32dc2 <__aeabi_dsub+0x5ae>
   32b82:	2620      	movs	r6, #32
   32b84:	0027      	movs	r7, r4
   32b86:	4650      	mov	r0, sl
   32b88:	1b76      	subs	r6, r6, r5
   32b8a:	40b7      	lsls	r7, r6
   32b8c:	40e8      	lsrs	r0, r5
   32b8e:	4307      	orrs	r7, r0
   32b90:	4650      	mov	r0, sl
   32b92:	40b0      	lsls	r0, r6
   32b94:	1e46      	subs	r6, r0, #1
   32b96:	41b0      	sbcs	r0, r6
   32b98:	40ec      	lsrs	r4, r5
   32b9a:	4338      	orrs	r0, r7
   32b9c:	1a17      	subs	r7, r2, r0
   32b9e:	42ba      	cmp	r2, r7
   32ba0:	4192      	sbcs	r2, r2
   32ba2:	1b0c      	subs	r4, r1, r4
   32ba4:	4252      	negs	r2, r2
   32ba6:	1aa4      	subs	r4, r4, r2
   32ba8:	4666      	mov	r6, ip
   32baa:	4698      	mov	r8, r3
   32bac:	e68b      	b.n	328c6 <__aeabi_dsub+0xb2>
   32bae:	4664      	mov	r4, ip
   32bb0:	4667      	mov	r7, ip
   32bb2:	432c      	orrs	r4, r5
   32bb4:	d000      	beq.n	32bb8 <__aeabi_dsub+0x3a4>
   32bb6:	e68b      	b.n	328d0 <__aeabi_dsub+0xbc>
   32bb8:	2500      	movs	r5, #0
   32bba:	2600      	movs	r6, #0
   32bbc:	2700      	movs	r7, #0
   32bbe:	e6ea      	b.n	32996 <__aeabi_dsub+0x182>
   32bc0:	001e      	movs	r6, r3
   32bc2:	e6ad      	b.n	32920 <__aeabi_dsub+0x10c>
   32bc4:	2b1f      	cmp	r3, #31
   32bc6:	dc60      	bgt.n	32c8a <__aeabi_dsub+0x476>
   32bc8:	2720      	movs	r7, #32
   32bca:	1af8      	subs	r0, r7, r3
   32bcc:	000f      	movs	r7, r1
   32bce:	4684      	mov	ip, r0
   32bd0:	4087      	lsls	r7, r0
   32bd2:	0010      	movs	r0, r2
   32bd4:	40d8      	lsrs	r0, r3
   32bd6:	4307      	orrs	r7, r0
   32bd8:	4660      	mov	r0, ip
   32bda:	4082      	lsls	r2, r0
   32bdc:	1e50      	subs	r0, r2, #1
   32bde:	4182      	sbcs	r2, r0
   32be0:	40d9      	lsrs	r1, r3
   32be2:	4317      	orrs	r7, r2
   32be4:	e6f5      	b.n	329d2 <__aeabi_dsub+0x1be>
   32be6:	0026      	movs	r6, r4
   32be8:	4650      	mov	r0, sl
   32bea:	4306      	orrs	r6, r0
   32bec:	d005      	beq.n	32bfa <__aeabi_dsub+0x3e6>
   32bee:	43ed      	mvns	r5, r5
   32bf0:	2d00      	cmp	r5, #0
   32bf2:	d0d3      	beq.n	32b9c <__aeabi_dsub+0x388>
   32bf4:	4e90      	ldr	r6, [pc, #576]	; (32e38 <__aeabi_dsub+0x624>)
   32bf6:	45b4      	cmp	ip, r6
   32bf8:	d1bd      	bne.n	32b76 <__aeabi_dsub+0x362>
   32bfa:	000c      	movs	r4, r1
   32bfc:	0017      	movs	r7, r2
   32bfe:	4666      	mov	r6, ip
   32c00:	4698      	mov	r8, r3
   32c02:	e68d      	b.n	32920 <__aeabi_dsub+0x10c>
   32c04:	488c      	ldr	r0, [pc, #560]	; (32e38 <__aeabi_dsub+0x624>)
   32c06:	4283      	cmp	r3, r0
   32c08:	d00b      	beq.n	32c22 <__aeabi_dsub+0x40e>
   32c0a:	4663      	mov	r3, ip
   32c0c:	e6d9      	b.n	329c2 <__aeabi_dsub+0x1ae>
   32c0e:	2d00      	cmp	r5, #0
   32c10:	d000      	beq.n	32c14 <__aeabi_dsub+0x400>
   32c12:	e096      	b.n	32d42 <__aeabi_dsub+0x52e>
   32c14:	0008      	movs	r0, r1
   32c16:	4310      	orrs	r0, r2
   32c18:	d100      	bne.n	32c1c <__aeabi_dsub+0x408>
   32c1a:	e0e2      	b.n	32de2 <__aeabi_dsub+0x5ce>
   32c1c:	000c      	movs	r4, r1
   32c1e:	0017      	movs	r7, r2
   32c20:	4698      	mov	r8, r3
   32c22:	4e85      	ldr	r6, [pc, #532]	; (32e38 <__aeabi_dsub+0x624>)
   32c24:	e67c      	b.n	32920 <__aeabi_dsub+0x10c>
   32c26:	2500      	movs	r5, #0
   32c28:	e780      	b.n	32b2c <__aeabi_dsub+0x318>
   32c2a:	2100      	movs	r1, #0
   32c2c:	e78e      	b.n	32b4c <__aeabi_dsub+0x338>
   32c2e:	0023      	movs	r3, r4
   32c30:	4650      	mov	r0, sl
   32c32:	4303      	orrs	r3, r0
   32c34:	2e00      	cmp	r6, #0
   32c36:	d000      	beq.n	32c3a <__aeabi_dsub+0x426>
   32c38:	e0a8      	b.n	32d8c <__aeabi_dsub+0x578>
   32c3a:	2b00      	cmp	r3, #0
   32c3c:	d100      	bne.n	32c40 <__aeabi_dsub+0x42c>
   32c3e:	e0de      	b.n	32dfe <__aeabi_dsub+0x5ea>
   32c40:	000b      	movs	r3, r1
   32c42:	4313      	orrs	r3, r2
   32c44:	d100      	bne.n	32c48 <__aeabi_dsub+0x434>
   32c46:	e66b      	b.n	32920 <__aeabi_dsub+0x10c>
   32c48:	4452      	add	r2, sl
   32c4a:	4552      	cmp	r2, sl
   32c4c:	4180      	sbcs	r0, r0
   32c4e:	1864      	adds	r4, r4, r1
   32c50:	4240      	negs	r0, r0
   32c52:	1824      	adds	r4, r4, r0
   32c54:	0017      	movs	r7, r2
   32c56:	0223      	lsls	r3, r4, #8
   32c58:	d400      	bmi.n	32c5c <__aeabi_dsub+0x448>
   32c5a:	e6fd      	b.n	32a58 <__aeabi_dsub+0x244>
   32c5c:	4b77      	ldr	r3, [pc, #476]	; (32e3c <__aeabi_dsub+0x628>)
   32c5e:	4666      	mov	r6, ip
   32c60:	401c      	ands	r4, r3
   32c62:	e65d      	b.n	32920 <__aeabi_dsub+0x10c>
   32c64:	0025      	movs	r5, r4
   32c66:	4650      	mov	r0, sl
   32c68:	4305      	orrs	r5, r0
   32c6a:	2e00      	cmp	r6, #0
   32c6c:	d1cf      	bne.n	32c0e <__aeabi_dsub+0x3fa>
   32c6e:	2d00      	cmp	r5, #0
   32c70:	d14f      	bne.n	32d12 <__aeabi_dsub+0x4fe>
   32c72:	000c      	movs	r4, r1
   32c74:	4314      	orrs	r4, r2
   32c76:	d100      	bne.n	32c7a <__aeabi_dsub+0x466>
   32c78:	e0a0      	b.n	32dbc <__aeabi_dsub+0x5a8>
   32c7a:	000c      	movs	r4, r1
   32c7c:	0017      	movs	r7, r2
   32c7e:	4698      	mov	r8, r3
   32c80:	e64e      	b.n	32920 <__aeabi_dsub+0x10c>
   32c82:	4666      	mov	r6, ip
   32c84:	2400      	movs	r4, #0
   32c86:	2700      	movs	r7, #0
   32c88:	e685      	b.n	32996 <__aeabi_dsub+0x182>
   32c8a:	001f      	movs	r7, r3
   32c8c:	0008      	movs	r0, r1
   32c8e:	3f20      	subs	r7, #32
   32c90:	40f8      	lsrs	r0, r7
   32c92:	0007      	movs	r7, r0
   32c94:	2b20      	cmp	r3, #32
   32c96:	d100      	bne.n	32c9a <__aeabi_dsub+0x486>
   32c98:	e08e      	b.n	32db8 <__aeabi_dsub+0x5a4>
   32c9a:	2040      	movs	r0, #64	; 0x40
   32c9c:	1ac3      	subs	r3, r0, r3
   32c9e:	4099      	lsls	r1, r3
   32ca0:	430a      	orrs	r2, r1
   32ca2:	1e51      	subs	r1, r2, #1
   32ca4:	418a      	sbcs	r2, r1
   32ca6:	2100      	movs	r1, #0
   32ca8:	4317      	orrs	r7, r2
   32caa:	e692      	b.n	329d2 <__aeabi_dsub+0x1be>
   32cac:	2e00      	cmp	r6, #0
   32cae:	d114      	bne.n	32cda <__aeabi_dsub+0x4c6>
   32cb0:	0026      	movs	r6, r4
   32cb2:	4650      	mov	r0, sl
   32cb4:	4306      	orrs	r6, r0
   32cb6:	d062      	beq.n	32d7e <__aeabi_dsub+0x56a>
   32cb8:	43db      	mvns	r3, r3
   32cba:	2b00      	cmp	r3, #0
   32cbc:	d15c      	bne.n	32d78 <__aeabi_dsub+0x564>
   32cbe:	1887      	adds	r7, r0, r2
   32cc0:	4297      	cmp	r7, r2
   32cc2:	4192      	sbcs	r2, r2
   32cc4:	1864      	adds	r4, r4, r1
   32cc6:	4252      	negs	r2, r2
   32cc8:	18a4      	adds	r4, r4, r2
   32cca:	4666      	mov	r6, ip
   32ccc:	e687      	b.n	329de <__aeabi_dsub+0x1ca>
   32cce:	4650      	mov	r0, sl
   32cd0:	4320      	orrs	r0, r4
   32cd2:	1e44      	subs	r4, r0, #1
   32cd4:	41a0      	sbcs	r0, r4
   32cd6:	2400      	movs	r4, #0
   32cd8:	e760      	b.n	32b9c <__aeabi_dsub+0x388>
   32cda:	4e57      	ldr	r6, [pc, #348]	; (32e38 <__aeabi_dsub+0x624>)
   32cdc:	45b4      	cmp	ip, r6
   32cde:	d04e      	beq.n	32d7e <__aeabi_dsub+0x56a>
   32ce0:	2680      	movs	r6, #128	; 0x80
   32ce2:	0436      	lsls	r6, r6, #16
   32ce4:	425b      	negs	r3, r3
   32ce6:	4334      	orrs	r4, r6
   32ce8:	2b38      	cmp	r3, #56	; 0x38
   32cea:	dd00      	ble.n	32cee <__aeabi_dsub+0x4da>
   32cec:	e07f      	b.n	32dee <__aeabi_dsub+0x5da>
   32cee:	2b1f      	cmp	r3, #31
   32cf0:	dd00      	ble.n	32cf4 <__aeabi_dsub+0x4e0>
   32cf2:	e08b      	b.n	32e0c <__aeabi_dsub+0x5f8>
   32cf4:	2620      	movs	r6, #32
   32cf6:	0027      	movs	r7, r4
   32cf8:	4650      	mov	r0, sl
   32cfa:	1af6      	subs	r6, r6, r3
   32cfc:	40b7      	lsls	r7, r6
   32cfe:	40d8      	lsrs	r0, r3
   32d00:	4307      	orrs	r7, r0
   32d02:	4650      	mov	r0, sl
   32d04:	40b0      	lsls	r0, r6
   32d06:	1e46      	subs	r6, r0, #1
   32d08:	41b0      	sbcs	r0, r6
   32d0a:	4307      	orrs	r7, r0
   32d0c:	40dc      	lsrs	r4, r3
   32d0e:	18bf      	adds	r7, r7, r2
   32d10:	e7d6      	b.n	32cc0 <__aeabi_dsub+0x4ac>
   32d12:	000d      	movs	r5, r1
   32d14:	4315      	orrs	r5, r2
   32d16:	d100      	bne.n	32d1a <__aeabi_dsub+0x506>
   32d18:	e602      	b.n	32920 <__aeabi_dsub+0x10c>
   32d1a:	4650      	mov	r0, sl
   32d1c:	1a80      	subs	r0, r0, r2
   32d1e:	4582      	cmp	sl, r0
   32d20:	41bf      	sbcs	r7, r7
   32d22:	1a65      	subs	r5, r4, r1
   32d24:	427f      	negs	r7, r7
   32d26:	1bed      	subs	r5, r5, r7
   32d28:	4684      	mov	ip, r0
   32d2a:	0228      	lsls	r0, r5, #8
   32d2c:	d400      	bmi.n	32d30 <__aeabi_dsub+0x51c>
   32d2e:	e68d      	b.n	32a4c <__aeabi_dsub+0x238>
   32d30:	4650      	mov	r0, sl
   32d32:	1a17      	subs	r7, r2, r0
   32d34:	42ba      	cmp	r2, r7
   32d36:	4192      	sbcs	r2, r2
   32d38:	1b0c      	subs	r4, r1, r4
   32d3a:	4252      	negs	r2, r2
   32d3c:	1aa4      	subs	r4, r4, r2
   32d3e:	4698      	mov	r8, r3
   32d40:	e5ee      	b.n	32920 <__aeabi_dsub+0x10c>
   32d42:	000d      	movs	r5, r1
   32d44:	4315      	orrs	r5, r2
   32d46:	d100      	bne.n	32d4a <__aeabi_dsub+0x536>
   32d48:	e76b      	b.n	32c22 <__aeabi_dsub+0x40e>
   32d4a:	4650      	mov	r0, sl
   32d4c:	0767      	lsls	r7, r4, #29
   32d4e:	08c0      	lsrs	r0, r0, #3
   32d50:	4307      	orrs	r7, r0
   32d52:	2080      	movs	r0, #128	; 0x80
   32d54:	08e4      	lsrs	r4, r4, #3
   32d56:	0300      	lsls	r0, r0, #12
   32d58:	4204      	tst	r4, r0
   32d5a:	d007      	beq.n	32d6c <__aeabi_dsub+0x558>
   32d5c:	08cd      	lsrs	r5, r1, #3
   32d5e:	4205      	tst	r5, r0
   32d60:	d104      	bne.n	32d6c <__aeabi_dsub+0x558>
   32d62:	002c      	movs	r4, r5
   32d64:	4698      	mov	r8, r3
   32d66:	08d7      	lsrs	r7, r2, #3
   32d68:	0749      	lsls	r1, r1, #29
   32d6a:	430f      	orrs	r7, r1
   32d6c:	0f7b      	lsrs	r3, r7, #29
   32d6e:	00e4      	lsls	r4, r4, #3
   32d70:	431c      	orrs	r4, r3
   32d72:	00ff      	lsls	r7, r7, #3
   32d74:	4e30      	ldr	r6, [pc, #192]	; (32e38 <__aeabi_dsub+0x624>)
   32d76:	e5d3      	b.n	32920 <__aeabi_dsub+0x10c>
   32d78:	4e2f      	ldr	r6, [pc, #188]	; (32e38 <__aeabi_dsub+0x624>)
   32d7a:	45b4      	cmp	ip, r6
   32d7c:	d1b4      	bne.n	32ce8 <__aeabi_dsub+0x4d4>
   32d7e:	000c      	movs	r4, r1
   32d80:	0017      	movs	r7, r2
   32d82:	4666      	mov	r6, ip
   32d84:	e5cc      	b.n	32920 <__aeabi_dsub+0x10c>
   32d86:	2700      	movs	r7, #0
   32d88:	2400      	movs	r4, #0
   32d8a:	e5e8      	b.n	3295e <__aeabi_dsub+0x14a>
   32d8c:	2b00      	cmp	r3, #0
   32d8e:	d039      	beq.n	32e04 <__aeabi_dsub+0x5f0>
   32d90:	000b      	movs	r3, r1
   32d92:	4313      	orrs	r3, r2
   32d94:	d100      	bne.n	32d98 <__aeabi_dsub+0x584>
   32d96:	e744      	b.n	32c22 <__aeabi_dsub+0x40e>
   32d98:	08c0      	lsrs	r0, r0, #3
   32d9a:	0767      	lsls	r7, r4, #29
   32d9c:	4307      	orrs	r7, r0
   32d9e:	2080      	movs	r0, #128	; 0x80
   32da0:	08e4      	lsrs	r4, r4, #3
   32da2:	0300      	lsls	r0, r0, #12
   32da4:	4204      	tst	r4, r0
   32da6:	d0e1      	beq.n	32d6c <__aeabi_dsub+0x558>
   32da8:	08cb      	lsrs	r3, r1, #3
   32daa:	4203      	tst	r3, r0
   32dac:	d1de      	bne.n	32d6c <__aeabi_dsub+0x558>
   32dae:	08d7      	lsrs	r7, r2, #3
   32db0:	0749      	lsls	r1, r1, #29
   32db2:	430f      	orrs	r7, r1
   32db4:	001c      	movs	r4, r3
   32db6:	e7d9      	b.n	32d6c <__aeabi_dsub+0x558>
   32db8:	2100      	movs	r1, #0
   32dba:	e771      	b.n	32ca0 <__aeabi_dsub+0x48c>
   32dbc:	2500      	movs	r5, #0
   32dbe:	2700      	movs	r7, #0
   32dc0:	e5e9      	b.n	32996 <__aeabi_dsub+0x182>
   32dc2:	002e      	movs	r6, r5
   32dc4:	0027      	movs	r7, r4
   32dc6:	3e20      	subs	r6, #32
   32dc8:	40f7      	lsrs	r7, r6
   32dca:	2d20      	cmp	r5, #32
   32dcc:	d02f      	beq.n	32e2e <__aeabi_dsub+0x61a>
   32dce:	2640      	movs	r6, #64	; 0x40
   32dd0:	1b75      	subs	r5, r6, r5
   32dd2:	40ac      	lsls	r4, r5
   32dd4:	4650      	mov	r0, sl
   32dd6:	4320      	orrs	r0, r4
   32dd8:	1e44      	subs	r4, r0, #1
   32dda:	41a0      	sbcs	r0, r4
   32ddc:	2400      	movs	r4, #0
   32dde:	4338      	orrs	r0, r7
   32de0:	e6dc      	b.n	32b9c <__aeabi_dsub+0x388>
   32de2:	2480      	movs	r4, #128	; 0x80
   32de4:	2500      	movs	r5, #0
   32de6:	0324      	lsls	r4, r4, #12
   32de8:	4e13      	ldr	r6, [pc, #76]	; (32e38 <__aeabi_dsub+0x624>)
   32dea:	2700      	movs	r7, #0
   32dec:	e5d3      	b.n	32996 <__aeabi_dsub+0x182>
   32dee:	4650      	mov	r0, sl
   32df0:	4320      	orrs	r0, r4
   32df2:	0007      	movs	r7, r0
   32df4:	1e78      	subs	r0, r7, #1
   32df6:	4187      	sbcs	r7, r0
   32df8:	2400      	movs	r4, #0
   32dfa:	18bf      	adds	r7, r7, r2
   32dfc:	e760      	b.n	32cc0 <__aeabi_dsub+0x4ac>
   32dfe:	000c      	movs	r4, r1
   32e00:	0017      	movs	r7, r2
   32e02:	e58d      	b.n	32920 <__aeabi_dsub+0x10c>
   32e04:	000c      	movs	r4, r1
   32e06:	0017      	movs	r7, r2
   32e08:	4e0b      	ldr	r6, [pc, #44]	; (32e38 <__aeabi_dsub+0x624>)
   32e0a:	e589      	b.n	32920 <__aeabi_dsub+0x10c>
   32e0c:	001e      	movs	r6, r3
   32e0e:	0027      	movs	r7, r4
   32e10:	3e20      	subs	r6, #32
   32e12:	40f7      	lsrs	r7, r6
   32e14:	2b20      	cmp	r3, #32
   32e16:	d00c      	beq.n	32e32 <__aeabi_dsub+0x61e>
   32e18:	2640      	movs	r6, #64	; 0x40
   32e1a:	1af3      	subs	r3, r6, r3
   32e1c:	409c      	lsls	r4, r3
   32e1e:	4650      	mov	r0, sl
   32e20:	4320      	orrs	r0, r4
   32e22:	1e44      	subs	r4, r0, #1
   32e24:	41a0      	sbcs	r0, r4
   32e26:	4307      	orrs	r7, r0
   32e28:	2400      	movs	r4, #0
   32e2a:	18bf      	adds	r7, r7, r2
   32e2c:	e748      	b.n	32cc0 <__aeabi_dsub+0x4ac>
   32e2e:	2400      	movs	r4, #0
   32e30:	e7d0      	b.n	32dd4 <__aeabi_dsub+0x5c0>
   32e32:	2400      	movs	r4, #0
   32e34:	e7f3      	b.n	32e1e <__aeabi_dsub+0x60a>
   32e36:	46c0      	nop			; (mov r8, r8)
   32e38:	000007ff 	.word	0x000007ff
   32e3c:	ff7fffff 	.word	0xff7fffff

00032e40 <__aeabi_d2iz>:
   32e40:	b530      	push	{r4, r5, lr}
   32e42:	4d13      	ldr	r5, [pc, #76]	; (32e90 <__aeabi_d2iz+0x50>)
   32e44:	030a      	lsls	r2, r1, #12
   32e46:	004b      	lsls	r3, r1, #1
   32e48:	0b12      	lsrs	r2, r2, #12
   32e4a:	0d5b      	lsrs	r3, r3, #21
   32e4c:	0fc9      	lsrs	r1, r1, #31
   32e4e:	2400      	movs	r4, #0
   32e50:	42ab      	cmp	r3, r5
   32e52:	dd10      	ble.n	32e76 <__aeabi_d2iz+0x36>
   32e54:	4c0f      	ldr	r4, [pc, #60]	; (32e94 <__aeabi_d2iz+0x54>)
   32e56:	42a3      	cmp	r3, r4
   32e58:	dc0f      	bgt.n	32e7a <__aeabi_d2iz+0x3a>
   32e5a:	2480      	movs	r4, #128	; 0x80
   32e5c:	4d0e      	ldr	r5, [pc, #56]	; (32e98 <__aeabi_d2iz+0x58>)
   32e5e:	0364      	lsls	r4, r4, #13
   32e60:	4322      	orrs	r2, r4
   32e62:	1aed      	subs	r5, r5, r3
   32e64:	2d1f      	cmp	r5, #31
   32e66:	dd0b      	ble.n	32e80 <__aeabi_d2iz+0x40>
   32e68:	480c      	ldr	r0, [pc, #48]	; (32e9c <__aeabi_d2iz+0x5c>)
   32e6a:	1ac3      	subs	r3, r0, r3
   32e6c:	40da      	lsrs	r2, r3
   32e6e:	4254      	negs	r4, r2
   32e70:	2900      	cmp	r1, #0
   32e72:	d100      	bne.n	32e76 <__aeabi_d2iz+0x36>
   32e74:	0014      	movs	r4, r2
   32e76:	0020      	movs	r0, r4
   32e78:	bd30      	pop	{r4, r5, pc}
   32e7a:	4b09      	ldr	r3, [pc, #36]	; (32ea0 <__aeabi_d2iz+0x60>)
   32e7c:	18cc      	adds	r4, r1, r3
   32e7e:	e7fa      	b.n	32e76 <__aeabi_d2iz+0x36>
   32e80:	4c08      	ldr	r4, [pc, #32]	; (32ea4 <__aeabi_d2iz+0x64>)
   32e82:	40e8      	lsrs	r0, r5
   32e84:	46a4      	mov	ip, r4
   32e86:	4463      	add	r3, ip
   32e88:	409a      	lsls	r2, r3
   32e8a:	4302      	orrs	r2, r0
   32e8c:	e7ef      	b.n	32e6e <__aeabi_d2iz+0x2e>
   32e8e:	46c0      	nop			; (mov r8, r8)
   32e90:	000003fe 	.word	0x000003fe
   32e94:	0000041d 	.word	0x0000041d
   32e98:	00000433 	.word	0x00000433
   32e9c:	00000413 	.word	0x00000413
   32ea0:	7fffffff 	.word	0x7fffffff
   32ea4:	fffffbed 	.word	0xfffffbed

00032ea8 <__aeabi_i2d>:
   32ea8:	b570      	push	{r4, r5, r6, lr}
   32eaa:	2800      	cmp	r0, #0
   32eac:	d030      	beq.n	32f10 <__aeabi_i2d+0x68>
   32eae:	17c3      	asrs	r3, r0, #31
   32eb0:	18c4      	adds	r4, r0, r3
   32eb2:	405c      	eors	r4, r3
   32eb4:	0fc5      	lsrs	r5, r0, #31
   32eb6:	0020      	movs	r0, r4
   32eb8:	f000 f8fa 	bl	330b0 <__clzsi2>
   32ebc:	4b17      	ldr	r3, [pc, #92]	; (32f1c <__aeabi_i2d+0x74>)
   32ebe:	4a18      	ldr	r2, [pc, #96]	; (32f20 <__aeabi_i2d+0x78>)
   32ec0:	1a1b      	subs	r3, r3, r0
   32ec2:	1ad2      	subs	r2, r2, r3
   32ec4:	2a1f      	cmp	r2, #31
   32ec6:	dd18      	ble.n	32efa <__aeabi_i2d+0x52>
   32ec8:	4a16      	ldr	r2, [pc, #88]	; (32f24 <__aeabi_i2d+0x7c>)
   32eca:	1ad2      	subs	r2, r2, r3
   32ecc:	4094      	lsls	r4, r2
   32ece:	2200      	movs	r2, #0
   32ed0:	0324      	lsls	r4, r4, #12
   32ed2:	055b      	lsls	r3, r3, #21
   32ed4:	0b24      	lsrs	r4, r4, #12
   32ed6:	0d5b      	lsrs	r3, r3, #21
   32ed8:	2100      	movs	r1, #0
   32eda:	0010      	movs	r0, r2
   32edc:	0324      	lsls	r4, r4, #12
   32ede:	0d0a      	lsrs	r2, r1, #20
   32ee0:	0b24      	lsrs	r4, r4, #12
   32ee2:	0512      	lsls	r2, r2, #20
   32ee4:	4322      	orrs	r2, r4
   32ee6:	4c10      	ldr	r4, [pc, #64]	; (32f28 <__aeabi_i2d+0x80>)
   32ee8:	051b      	lsls	r3, r3, #20
   32eea:	4022      	ands	r2, r4
   32eec:	4313      	orrs	r3, r2
   32eee:	005b      	lsls	r3, r3, #1
   32ef0:	07ed      	lsls	r5, r5, #31
   32ef2:	085b      	lsrs	r3, r3, #1
   32ef4:	432b      	orrs	r3, r5
   32ef6:	0019      	movs	r1, r3
   32ef8:	bd70      	pop	{r4, r5, r6, pc}
   32efa:	0021      	movs	r1, r4
   32efc:	4091      	lsls	r1, r2
   32efe:	000a      	movs	r2, r1
   32f00:	210b      	movs	r1, #11
   32f02:	1a08      	subs	r0, r1, r0
   32f04:	40c4      	lsrs	r4, r0
   32f06:	055b      	lsls	r3, r3, #21
   32f08:	0324      	lsls	r4, r4, #12
   32f0a:	0b24      	lsrs	r4, r4, #12
   32f0c:	0d5b      	lsrs	r3, r3, #21
   32f0e:	e7e3      	b.n	32ed8 <__aeabi_i2d+0x30>
   32f10:	2500      	movs	r5, #0
   32f12:	2300      	movs	r3, #0
   32f14:	2400      	movs	r4, #0
   32f16:	2200      	movs	r2, #0
   32f18:	e7de      	b.n	32ed8 <__aeabi_i2d+0x30>
   32f1a:	46c0      	nop			; (mov r8, r8)
   32f1c:	0000041e 	.word	0x0000041e
   32f20:	00000433 	.word	0x00000433
   32f24:	00000413 	.word	0x00000413
   32f28:	800fffff 	.word	0x800fffff

00032f2c <__aeabi_ui2d>:
   32f2c:	b510      	push	{r4, lr}
   32f2e:	1e04      	subs	r4, r0, #0
   32f30:	d028      	beq.n	32f84 <__aeabi_ui2d+0x58>
   32f32:	f000 f8bd 	bl	330b0 <__clzsi2>
   32f36:	4b15      	ldr	r3, [pc, #84]	; (32f8c <__aeabi_ui2d+0x60>)
   32f38:	4a15      	ldr	r2, [pc, #84]	; (32f90 <__aeabi_ui2d+0x64>)
   32f3a:	1a1b      	subs	r3, r3, r0
   32f3c:	1ad2      	subs	r2, r2, r3
   32f3e:	2a1f      	cmp	r2, #31
   32f40:	dd15      	ble.n	32f6e <__aeabi_ui2d+0x42>
   32f42:	4a14      	ldr	r2, [pc, #80]	; (32f94 <__aeabi_ui2d+0x68>)
   32f44:	1ad2      	subs	r2, r2, r3
   32f46:	4094      	lsls	r4, r2
   32f48:	2200      	movs	r2, #0
   32f4a:	0324      	lsls	r4, r4, #12
   32f4c:	055b      	lsls	r3, r3, #21
   32f4e:	0b24      	lsrs	r4, r4, #12
   32f50:	0d5b      	lsrs	r3, r3, #21
   32f52:	2100      	movs	r1, #0
   32f54:	0010      	movs	r0, r2
   32f56:	0324      	lsls	r4, r4, #12
   32f58:	0d0a      	lsrs	r2, r1, #20
   32f5a:	0b24      	lsrs	r4, r4, #12
   32f5c:	0512      	lsls	r2, r2, #20
   32f5e:	4322      	orrs	r2, r4
   32f60:	4c0d      	ldr	r4, [pc, #52]	; (32f98 <__aeabi_ui2d+0x6c>)
   32f62:	051b      	lsls	r3, r3, #20
   32f64:	4022      	ands	r2, r4
   32f66:	4313      	orrs	r3, r2
   32f68:	005b      	lsls	r3, r3, #1
   32f6a:	0859      	lsrs	r1, r3, #1
   32f6c:	bd10      	pop	{r4, pc}
   32f6e:	0021      	movs	r1, r4
   32f70:	4091      	lsls	r1, r2
   32f72:	000a      	movs	r2, r1
   32f74:	210b      	movs	r1, #11
   32f76:	1a08      	subs	r0, r1, r0
   32f78:	40c4      	lsrs	r4, r0
   32f7a:	055b      	lsls	r3, r3, #21
   32f7c:	0324      	lsls	r4, r4, #12
   32f7e:	0b24      	lsrs	r4, r4, #12
   32f80:	0d5b      	lsrs	r3, r3, #21
   32f82:	e7e6      	b.n	32f52 <__aeabi_ui2d+0x26>
   32f84:	2300      	movs	r3, #0
   32f86:	2400      	movs	r4, #0
   32f88:	2200      	movs	r2, #0
   32f8a:	e7e2      	b.n	32f52 <__aeabi_ui2d+0x26>
   32f8c:	0000041e 	.word	0x0000041e
   32f90:	00000433 	.word	0x00000433
   32f94:	00000413 	.word	0x00000413
   32f98:	800fffff 	.word	0x800fffff

00032f9c <__aeabi_d2f>:
   32f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   32f9e:	004c      	lsls	r4, r1, #1
   32fa0:	0d64      	lsrs	r4, r4, #21
   32fa2:	030b      	lsls	r3, r1, #12
   32fa4:	1c62      	adds	r2, r4, #1
   32fa6:	0f45      	lsrs	r5, r0, #29
   32fa8:	0a5b      	lsrs	r3, r3, #9
   32faa:	0552      	lsls	r2, r2, #21
   32fac:	432b      	orrs	r3, r5
   32fae:	0fc9      	lsrs	r1, r1, #31
   32fb0:	00c5      	lsls	r5, r0, #3
   32fb2:	0d52      	lsrs	r2, r2, #21
   32fb4:	2a01      	cmp	r2, #1
   32fb6:	dd28      	ble.n	3300a <__aeabi_d2f+0x6e>
   32fb8:	4a3a      	ldr	r2, [pc, #232]	; (330a4 <__aeabi_d2f+0x108>)
   32fba:	18a6      	adds	r6, r4, r2
   32fbc:	2efe      	cmp	r6, #254	; 0xfe
   32fbe:	dc1b      	bgt.n	32ff8 <__aeabi_d2f+0x5c>
   32fc0:	2e00      	cmp	r6, #0
   32fc2:	dd3e      	ble.n	33042 <__aeabi_d2f+0xa6>
   32fc4:	0180      	lsls	r0, r0, #6
   32fc6:	0002      	movs	r2, r0
   32fc8:	1e50      	subs	r0, r2, #1
   32fca:	4182      	sbcs	r2, r0
   32fcc:	0f6d      	lsrs	r5, r5, #29
   32fce:	432a      	orrs	r2, r5
   32fd0:	00db      	lsls	r3, r3, #3
   32fd2:	4313      	orrs	r3, r2
   32fd4:	075a      	lsls	r2, r3, #29
   32fd6:	d004      	beq.n	32fe2 <__aeabi_d2f+0x46>
   32fd8:	220f      	movs	r2, #15
   32fda:	401a      	ands	r2, r3
   32fdc:	2a04      	cmp	r2, #4
   32fde:	d000      	beq.n	32fe2 <__aeabi_d2f+0x46>
   32fe0:	3304      	adds	r3, #4
   32fe2:	2280      	movs	r2, #128	; 0x80
   32fe4:	04d2      	lsls	r2, r2, #19
   32fe6:	401a      	ands	r2, r3
   32fe8:	d05a      	beq.n	330a0 <__aeabi_d2f+0x104>
   32fea:	3601      	adds	r6, #1
   32fec:	2eff      	cmp	r6, #255	; 0xff
   32fee:	d003      	beq.n	32ff8 <__aeabi_d2f+0x5c>
   32ff0:	019b      	lsls	r3, r3, #6
   32ff2:	0a5b      	lsrs	r3, r3, #9
   32ff4:	b2f4      	uxtb	r4, r6
   32ff6:	e001      	b.n	32ffc <__aeabi_d2f+0x60>
   32ff8:	24ff      	movs	r4, #255	; 0xff
   32ffa:	2300      	movs	r3, #0
   32ffc:	0258      	lsls	r0, r3, #9
   32ffe:	05e4      	lsls	r4, r4, #23
   33000:	0a40      	lsrs	r0, r0, #9
   33002:	07c9      	lsls	r1, r1, #31
   33004:	4320      	orrs	r0, r4
   33006:	4308      	orrs	r0, r1
   33008:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3300a:	2c00      	cmp	r4, #0
   3300c:	d007      	beq.n	3301e <__aeabi_d2f+0x82>
   3300e:	431d      	orrs	r5, r3
   33010:	d0f2      	beq.n	32ff8 <__aeabi_d2f+0x5c>
   33012:	2080      	movs	r0, #128	; 0x80
   33014:	00db      	lsls	r3, r3, #3
   33016:	0480      	lsls	r0, r0, #18
   33018:	4303      	orrs	r3, r0
   3301a:	26ff      	movs	r6, #255	; 0xff
   3301c:	e7da      	b.n	32fd4 <__aeabi_d2f+0x38>
   3301e:	432b      	orrs	r3, r5
   33020:	d003      	beq.n	3302a <__aeabi_d2f+0x8e>
   33022:	2305      	movs	r3, #5
   33024:	08db      	lsrs	r3, r3, #3
   33026:	2cff      	cmp	r4, #255	; 0xff
   33028:	d003      	beq.n	33032 <__aeabi_d2f+0x96>
   3302a:	025b      	lsls	r3, r3, #9
   3302c:	0a5b      	lsrs	r3, r3, #9
   3302e:	b2e4      	uxtb	r4, r4
   33030:	e7e4      	b.n	32ffc <__aeabi_d2f+0x60>
   33032:	2b00      	cmp	r3, #0
   33034:	d032      	beq.n	3309c <__aeabi_d2f+0x100>
   33036:	2080      	movs	r0, #128	; 0x80
   33038:	03c0      	lsls	r0, r0, #15
   3303a:	4303      	orrs	r3, r0
   3303c:	025b      	lsls	r3, r3, #9
   3303e:	0a5b      	lsrs	r3, r3, #9
   33040:	e7dc      	b.n	32ffc <__aeabi_d2f+0x60>
   33042:	0032      	movs	r2, r6
   33044:	3217      	adds	r2, #23
   33046:	db14      	blt.n	33072 <__aeabi_d2f+0xd6>
   33048:	2280      	movs	r2, #128	; 0x80
   3304a:	271e      	movs	r7, #30
   3304c:	0412      	lsls	r2, r2, #16
   3304e:	4313      	orrs	r3, r2
   33050:	1bbf      	subs	r7, r7, r6
   33052:	2f1f      	cmp	r7, #31
   33054:	dc0f      	bgt.n	33076 <__aeabi_d2f+0xda>
   33056:	4a14      	ldr	r2, [pc, #80]	; (330a8 <__aeabi_d2f+0x10c>)
   33058:	4694      	mov	ip, r2
   3305a:	4464      	add	r4, ip
   3305c:	002a      	movs	r2, r5
   3305e:	40a5      	lsls	r5, r4
   33060:	002e      	movs	r6, r5
   33062:	40a3      	lsls	r3, r4
   33064:	1e75      	subs	r5, r6, #1
   33066:	41ae      	sbcs	r6, r5
   33068:	40fa      	lsrs	r2, r7
   3306a:	4333      	orrs	r3, r6
   3306c:	4313      	orrs	r3, r2
   3306e:	2600      	movs	r6, #0
   33070:	e7b0      	b.n	32fd4 <__aeabi_d2f+0x38>
   33072:	2400      	movs	r4, #0
   33074:	e7d5      	b.n	33022 <__aeabi_d2f+0x86>
   33076:	2202      	movs	r2, #2
   33078:	4252      	negs	r2, r2
   3307a:	1b96      	subs	r6, r2, r6
   3307c:	001a      	movs	r2, r3
   3307e:	40f2      	lsrs	r2, r6
   33080:	2f20      	cmp	r7, #32
   33082:	d009      	beq.n	33098 <__aeabi_d2f+0xfc>
   33084:	4809      	ldr	r0, [pc, #36]	; (330ac <__aeabi_d2f+0x110>)
   33086:	4684      	mov	ip, r0
   33088:	4464      	add	r4, ip
   3308a:	40a3      	lsls	r3, r4
   3308c:	432b      	orrs	r3, r5
   3308e:	1e5d      	subs	r5, r3, #1
   33090:	41ab      	sbcs	r3, r5
   33092:	2600      	movs	r6, #0
   33094:	4313      	orrs	r3, r2
   33096:	e79d      	b.n	32fd4 <__aeabi_d2f+0x38>
   33098:	2300      	movs	r3, #0
   3309a:	e7f7      	b.n	3308c <__aeabi_d2f+0xf0>
   3309c:	2300      	movs	r3, #0
   3309e:	e7ad      	b.n	32ffc <__aeabi_d2f+0x60>
   330a0:	0034      	movs	r4, r6
   330a2:	e7bf      	b.n	33024 <__aeabi_d2f+0x88>
   330a4:	fffffc80 	.word	0xfffffc80
   330a8:	fffffc82 	.word	0xfffffc82
   330ac:	fffffca2 	.word	0xfffffca2

000330b0 <__clzsi2>:
   330b0:	211c      	movs	r1, #28
   330b2:	2301      	movs	r3, #1
   330b4:	041b      	lsls	r3, r3, #16
   330b6:	4298      	cmp	r0, r3
   330b8:	d301      	bcc.n	330be <__clzsi2+0xe>
   330ba:	0c00      	lsrs	r0, r0, #16
   330bc:	3910      	subs	r1, #16
   330be:	0a1b      	lsrs	r3, r3, #8
   330c0:	4298      	cmp	r0, r3
   330c2:	d301      	bcc.n	330c8 <__clzsi2+0x18>
   330c4:	0a00      	lsrs	r0, r0, #8
   330c6:	3908      	subs	r1, #8
   330c8:	091b      	lsrs	r3, r3, #4
   330ca:	4298      	cmp	r0, r3
   330cc:	d301      	bcc.n	330d2 <__clzsi2+0x22>
   330ce:	0900      	lsrs	r0, r0, #4
   330d0:	3904      	subs	r1, #4
   330d2:	a202      	add	r2, pc, #8	; (adr r2, 330dc <__clzsi2+0x2c>)
   330d4:	5c10      	ldrb	r0, [r2, r0]
   330d6:	1840      	adds	r0, r0, r1
   330d8:	4770      	bx	lr
   330da:	46c0      	nop			; (mov r8, r8)
   330dc:	02020304 	.word	0x02020304
   330e0:	01010101 	.word	0x01010101
	...

000330ec <atoi>:
   330ec:	b510      	push	{r4, lr}
   330ee:	220a      	movs	r2, #10
   330f0:	2100      	movs	r1, #0
   330f2:	f000 faff 	bl	336f4 <strtol>
   330f6:	bd10      	pop	{r4, pc}

000330f8 <__libc_init_array>:
   330f8:	b570      	push	{r4, r5, r6, lr}
   330fa:	2600      	movs	r6, #0
   330fc:	4d0c      	ldr	r5, [pc, #48]	; (33130 <__libc_init_array+0x38>)
   330fe:	4c0d      	ldr	r4, [pc, #52]	; (33134 <__libc_init_array+0x3c>)
   33100:	1b64      	subs	r4, r4, r5
   33102:	10a4      	asrs	r4, r4, #2
   33104:	42a6      	cmp	r6, r4
   33106:	d109      	bne.n	3311c <__libc_init_array+0x24>
   33108:	2600      	movs	r6, #0
   3310a:	f005 fb2d 	bl	38768 <_init>
   3310e:	4d0a      	ldr	r5, [pc, #40]	; (33138 <__libc_init_array+0x40>)
   33110:	4c0a      	ldr	r4, [pc, #40]	; (3313c <__libc_init_array+0x44>)
   33112:	1b64      	subs	r4, r4, r5
   33114:	10a4      	asrs	r4, r4, #2
   33116:	42a6      	cmp	r6, r4
   33118:	d105      	bne.n	33126 <__libc_init_array+0x2e>
   3311a:	bd70      	pop	{r4, r5, r6, pc}
   3311c:	00b3      	lsls	r3, r6, #2
   3311e:	58eb      	ldr	r3, [r5, r3]
   33120:	4798      	blx	r3
   33122:	3601      	adds	r6, #1
   33124:	e7ee      	b.n	33104 <__libc_init_array+0xc>
   33126:	00b3      	lsls	r3, r6, #2
   33128:	58eb      	ldr	r3, [r5, r3]
   3312a:	4798      	blx	r3
   3312c:	3601      	adds	r6, #1
   3312e:	e7f2      	b.n	33116 <__libc_init_array+0x1e>
   33130:	00038774 	.word	0x00038774
   33134:	00038774 	.word	0x00038774
   33138:	00038774 	.word	0x00038774
   3313c:	00038778 	.word	0x00038778

00033140 <malloc>:
   33140:	b510      	push	{r4, lr}
   33142:	4b03      	ldr	r3, [pc, #12]	; (33150 <malloc+0x10>)
   33144:	0001      	movs	r1, r0
   33146:	6818      	ldr	r0, [r3, #0]
   33148:	f000 f87c 	bl	33244 <_malloc_r>
   3314c:	bd10      	pop	{r4, pc}
   3314e:	46c0      	nop			; (mov r8, r8)
   33150:	20000130 	.word	0x20000130

00033154 <free>:
   33154:	b510      	push	{r4, lr}
   33156:	4b03      	ldr	r3, [pc, #12]	; (33164 <free+0x10>)
   33158:	0001      	movs	r1, r0
   3315a:	6818      	ldr	r0, [r3, #0]
   3315c:	f000 f828 	bl	331b0 <_free_r>
   33160:	bd10      	pop	{r4, pc}
   33162:	46c0      	nop			; (mov r8, r8)
   33164:	20000130 	.word	0x20000130

00033168 <memcpy>:
   33168:	2300      	movs	r3, #0
   3316a:	b510      	push	{r4, lr}
   3316c:	429a      	cmp	r2, r3
   3316e:	d100      	bne.n	33172 <memcpy+0xa>
   33170:	bd10      	pop	{r4, pc}
   33172:	5ccc      	ldrb	r4, [r1, r3]
   33174:	54c4      	strb	r4, [r0, r3]
   33176:	3301      	adds	r3, #1
   33178:	e7f8      	b.n	3316c <memcpy+0x4>

0003317a <memmove>:
   3317a:	b510      	push	{r4, lr}
   3317c:	4288      	cmp	r0, r1
   3317e:	d902      	bls.n	33186 <memmove+0xc>
   33180:	188b      	adds	r3, r1, r2
   33182:	4298      	cmp	r0, r3
   33184:	d308      	bcc.n	33198 <memmove+0x1e>
   33186:	2300      	movs	r3, #0
   33188:	429a      	cmp	r2, r3
   3318a:	d007      	beq.n	3319c <memmove+0x22>
   3318c:	5ccc      	ldrb	r4, [r1, r3]
   3318e:	54c4      	strb	r4, [r0, r3]
   33190:	3301      	adds	r3, #1
   33192:	e7f9      	b.n	33188 <memmove+0xe>
   33194:	5c8b      	ldrb	r3, [r1, r2]
   33196:	5483      	strb	r3, [r0, r2]
   33198:	3a01      	subs	r2, #1
   3319a:	d2fb      	bcs.n	33194 <memmove+0x1a>
   3319c:	bd10      	pop	{r4, pc}

0003319e <memset>:
   3319e:	0003      	movs	r3, r0
   331a0:	1882      	adds	r2, r0, r2
   331a2:	4293      	cmp	r3, r2
   331a4:	d100      	bne.n	331a8 <memset+0xa>
   331a6:	4770      	bx	lr
   331a8:	7019      	strb	r1, [r3, #0]
   331aa:	3301      	adds	r3, #1
   331ac:	e7f9      	b.n	331a2 <memset+0x4>
	...

000331b0 <_free_r>:
   331b0:	b570      	push	{r4, r5, r6, lr}
   331b2:	0005      	movs	r5, r0
   331b4:	2900      	cmp	r1, #0
   331b6:	d010      	beq.n	331da <_free_r+0x2a>
   331b8:	1f0c      	subs	r4, r1, #4
   331ba:	6823      	ldr	r3, [r4, #0]
   331bc:	2b00      	cmp	r3, #0
   331be:	da00      	bge.n	331c2 <_free_r+0x12>
   331c0:	18e4      	adds	r4, r4, r3
   331c2:	0028      	movs	r0, r5
   331c4:	f000 fdca 	bl	33d5c <__malloc_lock>
   331c8:	4a1d      	ldr	r2, [pc, #116]	; (33240 <_free_r+0x90>)
   331ca:	6813      	ldr	r3, [r2, #0]
   331cc:	2b00      	cmp	r3, #0
   331ce:	d105      	bne.n	331dc <_free_r+0x2c>
   331d0:	6063      	str	r3, [r4, #4]
   331d2:	6014      	str	r4, [r2, #0]
   331d4:	0028      	movs	r0, r5
   331d6:	f000 fdc2 	bl	33d5e <__malloc_unlock>
   331da:	bd70      	pop	{r4, r5, r6, pc}
   331dc:	42a3      	cmp	r3, r4
   331de:	d909      	bls.n	331f4 <_free_r+0x44>
   331e0:	6821      	ldr	r1, [r4, #0]
   331e2:	1860      	adds	r0, r4, r1
   331e4:	4283      	cmp	r3, r0
   331e6:	d1f3      	bne.n	331d0 <_free_r+0x20>
   331e8:	6818      	ldr	r0, [r3, #0]
   331ea:	685b      	ldr	r3, [r3, #4]
   331ec:	1841      	adds	r1, r0, r1
   331ee:	6021      	str	r1, [r4, #0]
   331f0:	e7ee      	b.n	331d0 <_free_r+0x20>
   331f2:	0013      	movs	r3, r2
   331f4:	685a      	ldr	r2, [r3, #4]
   331f6:	2a00      	cmp	r2, #0
   331f8:	d001      	beq.n	331fe <_free_r+0x4e>
   331fa:	42a2      	cmp	r2, r4
   331fc:	d9f9      	bls.n	331f2 <_free_r+0x42>
   331fe:	6819      	ldr	r1, [r3, #0]
   33200:	1858      	adds	r0, r3, r1
   33202:	42a0      	cmp	r0, r4
   33204:	d10b      	bne.n	3321e <_free_r+0x6e>
   33206:	6820      	ldr	r0, [r4, #0]
   33208:	1809      	adds	r1, r1, r0
   3320a:	1858      	adds	r0, r3, r1
   3320c:	6019      	str	r1, [r3, #0]
   3320e:	4282      	cmp	r2, r0
   33210:	d1e0      	bne.n	331d4 <_free_r+0x24>
   33212:	6810      	ldr	r0, [r2, #0]
   33214:	6852      	ldr	r2, [r2, #4]
   33216:	1841      	adds	r1, r0, r1
   33218:	6019      	str	r1, [r3, #0]
   3321a:	605a      	str	r2, [r3, #4]
   3321c:	e7da      	b.n	331d4 <_free_r+0x24>
   3321e:	42a0      	cmp	r0, r4
   33220:	d902      	bls.n	33228 <_free_r+0x78>
   33222:	230c      	movs	r3, #12
   33224:	602b      	str	r3, [r5, #0]
   33226:	e7d5      	b.n	331d4 <_free_r+0x24>
   33228:	6821      	ldr	r1, [r4, #0]
   3322a:	1860      	adds	r0, r4, r1
   3322c:	4282      	cmp	r2, r0
   3322e:	d103      	bne.n	33238 <_free_r+0x88>
   33230:	6810      	ldr	r0, [r2, #0]
   33232:	6852      	ldr	r2, [r2, #4]
   33234:	1841      	adds	r1, r0, r1
   33236:	6021      	str	r1, [r4, #0]
   33238:	6062      	str	r2, [r4, #4]
   3323a:	605c      	str	r4, [r3, #4]
   3323c:	e7ca      	b.n	331d4 <_free_r+0x24>
   3323e:	46c0      	nop			; (mov r8, r8)
   33240:	200045a0 	.word	0x200045a0

00033244 <_malloc_r>:
   33244:	2303      	movs	r3, #3
   33246:	b570      	push	{r4, r5, r6, lr}
   33248:	1ccd      	adds	r5, r1, #3
   3324a:	439d      	bics	r5, r3
   3324c:	3508      	adds	r5, #8
   3324e:	0006      	movs	r6, r0
   33250:	2d0c      	cmp	r5, #12
   33252:	d21e      	bcs.n	33292 <_malloc_r+0x4e>
   33254:	250c      	movs	r5, #12
   33256:	42a9      	cmp	r1, r5
   33258:	d81d      	bhi.n	33296 <_malloc_r+0x52>
   3325a:	0030      	movs	r0, r6
   3325c:	f000 fd7e 	bl	33d5c <__malloc_lock>
   33260:	4a25      	ldr	r2, [pc, #148]	; (332f8 <_malloc_r+0xb4>)
   33262:	6814      	ldr	r4, [r2, #0]
   33264:	0021      	movs	r1, r4
   33266:	2900      	cmp	r1, #0
   33268:	d119      	bne.n	3329e <_malloc_r+0x5a>
   3326a:	4c24      	ldr	r4, [pc, #144]	; (332fc <_malloc_r+0xb8>)
   3326c:	6823      	ldr	r3, [r4, #0]
   3326e:	2b00      	cmp	r3, #0
   33270:	d103      	bne.n	3327a <_malloc_r+0x36>
   33272:	0030      	movs	r0, r6
   33274:	f000 f8ae 	bl	333d4 <_sbrk_r>
   33278:	6020      	str	r0, [r4, #0]
   3327a:	0029      	movs	r1, r5
   3327c:	0030      	movs	r0, r6
   3327e:	f000 f8a9 	bl	333d4 <_sbrk_r>
   33282:	1c43      	adds	r3, r0, #1
   33284:	d12c      	bne.n	332e0 <_malloc_r+0x9c>
   33286:	230c      	movs	r3, #12
   33288:	0030      	movs	r0, r6
   3328a:	6033      	str	r3, [r6, #0]
   3328c:	f000 fd67 	bl	33d5e <__malloc_unlock>
   33290:	e003      	b.n	3329a <_malloc_r+0x56>
   33292:	2d00      	cmp	r5, #0
   33294:	dadf      	bge.n	33256 <_malloc_r+0x12>
   33296:	230c      	movs	r3, #12
   33298:	6033      	str	r3, [r6, #0]
   3329a:	2000      	movs	r0, #0
   3329c:	bd70      	pop	{r4, r5, r6, pc}
   3329e:	680b      	ldr	r3, [r1, #0]
   332a0:	1b5b      	subs	r3, r3, r5
   332a2:	d41a      	bmi.n	332da <_malloc_r+0x96>
   332a4:	2b0b      	cmp	r3, #11
   332a6:	d903      	bls.n	332b0 <_malloc_r+0x6c>
   332a8:	600b      	str	r3, [r1, #0]
   332aa:	18cc      	adds	r4, r1, r3
   332ac:	6025      	str	r5, [r4, #0]
   332ae:	e003      	b.n	332b8 <_malloc_r+0x74>
   332b0:	428c      	cmp	r4, r1
   332b2:	d10e      	bne.n	332d2 <_malloc_r+0x8e>
   332b4:	6863      	ldr	r3, [r4, #4]
   332b6:	6013      	str	r3, [r2, #0]
   332b8:	0030      	movs	r0, r6
   332ba:	f000 fd50 	bl	33d5e <__malloc_unlock>
   332be:	0020      	movs	r0, r4
   332c0:	2207      	movs	r2, #7
   332c2:	300b      	adds	r0, #11
   332c4:	1d23      	adds	r3, r4, #4
   332c6:	4390      	bics	r0, r2
   332c8:	1ac3      	subs	r3, r0, r3
   332ca:	d0e7      	beq.n	3329c <_malloc_r+0x58>
   332cc:	425a      	negs	r2, r3
   332ce:	50e2      	str	r2, [r4, r3]
   332d0:	e7e4      	b.n	3329c <_malloc_r+0x58>
   332d2:	684b      	ldr	r3, [r1, #4]
   332d4:	6063      	str	r3, [r4, #4]
   332d6:	000c      	movs	r4, r1
   332d8:	e7ee      	b.n	332b8 <_malloc_r+0x74>
   332da:	000c      	movs	r4, r1
   332dc:	6849      	ldr	r1, [r1, #4]
   332de:	e7c2      	b.n	33266 <_malloc_r+0x22>
   332e0:	2303      	movs	r3, #3
   332e2:	1cc4      	adds	r4, r0, #3
   332e4:	439c      	bics	r4, r3
   332e6:	42a0      	cmp	r0, r4
   332e8:	d0e0      	beq.n	332ac <_malloc_r+0x68>
   332ea:	1a21      	subs	r1, r4, r0
   332ec:	0030      	movs	r0, r6
   332ee:	f000 f871 	bl	333d4 <_sbrk_r>
   332f2:	1c43      	adds	r3, r0, #1
   332f4:	d1da      	bne.n	332ac <_malloc_r+0x68>
   332f6:	e7c6      	b.n	33286 <_malloc_r+0x42>
   332f8:	200045a0 	.word	0x200045a0
   332fc:	200045a4 	.word	0x200045a4

00033300 <_puts_r>:
   33300:	b570      	push	{r4, r5, r6, lr}
   33302:	0005      	movs	r5, r0
   33304:	000e      	movs	r6, r1
   33306:	2800      	cmp	r0, #0
   33308:	d004      	beq.n	33314 <_puts_r+0x14>
   3330a:	6983      	ldr	r3, [r0, #24]
   3330c:	2b00      	cmp	r3, #0
   3330e:	d101      	bne.n	33314 <_puts_r+0x14>
   33310:	f000 fc00 	bl	33b14 <__sinit>
   33314:	69ab      	ldr	r3, [r5, #24]
   33316:	68ac      	ldr	r4, [r5, #8]
   33318:	2b00      	cmp	r3, #0
   3331a:	d102      	bne.n	33322 <_puts_r+0x22>
   3331c:	0028      	movs	r0, r5
   3331e:	f000 fbf9 	bl	33b14 <__sinit>
   33322:	4b24      	ldr	r3, [pc, #144]	; (333b4 <_puts_r+0xb4>)
   33324:	429c      	cmp	r4, r3
   33326:	d10f      	bne.n	33348 <_puts_r+0x48>
   33328:	686c      	ldr	r4, [r5, #4]
   3332a:	89a3      	ldrh	r3, [r4, #12]
   3332c:	071b      	lsls	r3, r3, #28
   3332e:	d502      	bpl.n	33336 <_puts_r+0x36>
   33330:	6923      	ldr	r3, [r4, #16]
   33332:	2b00      	cmp	r3, #0
   33334:	d120      	bne.n	33378 <_puts_r+0x78>
   33336:	0021      	movs	r1, r4
   33338:	0028      	movs	r0, r5
   3333a:	f000 fa7d 	bl	33838 <__swsetup_r>
   3333e:	2800      	cmp	r0, #0
   33340:	d01a      	beq.n	33378 <_puts_r+0x78>
   33342:	2001      	movs	r0, #1
   33344:	4240      	negs	r0, r0
   33346:	bd70      	pop	{r4, r5, r6, pc}
   33348:	4b1b      	ldr	r3, [pc, #108]	; (333b8 <_puts_r+0xb8>)
   3334a:	429c      	cmp	r4, r3
   3334c:	d101      	bne.n	33352 <_puts_r+0x52>
   3334e:	68ac      	ldr	r4, [r5, #8]
   33350:	e7eb      	b.n	3332a <_puts_r+0x2a>
   33352:	4b1a      	ldr	r3, [pc, #104]	; (333bc <_puts_r+0xbc>)
   33354:	429c      	cmp	r4, r3
   33356:	d1e8      	bne.n	3332a <_puts_r+0x2a>
   33358:	68ec      	ldr	r4, [r5, #12]
   3335a:	e7e6      	b.n	3332a <_puts_r+0x2a>
   3335c:	3b01      	subs	r3, #1
   3335e:	3601      	adds	r6, #1
   33360:	60a3      	str	r3, [r4, #8]
   33362:	2b00      	cmp	r3, #0
   33364:	da04      	bge.n	33370 <_puts_r+0x70>
   33366:	69a2      	ldr	r2, [r4, #24]
   33368:	4293      	cmp	r3, r2
   3336a:	db16      	blt.n	3339a <_puts_r+0x9a>
   3336c:	290a      	cmp	r1, #10
   3336e:	d014      	beq.n	3339a <_puts_r+0x9a>
   33370:	6823      	ldr	r3, [r4, #0]
   33372:	1c5a      	adds	r2, r3, #1
   33374:	6022      	str	r2, [r4, #0]
   33376:	7019      	strb	r1, [r3, #0]
   33378:	7831      	ldrb	r1, [r6, #0]
   3337a:	68a3      	ldr	r3, [r4, #8]
   3337c:	2900      	cmp	r1, #0
   3337e:	d1ed      	bne.n	3335c <_puts_r+0x5c>
   33380:	3b01      	subs	r3, #1
   33382:	60a3      	str	r3, [r4, #8]
   33384:	2b00      	cmp	r3, #0
   33386:	da0f      	bge.n	333a8 <_puts_r+0xa8>
   33388:	0022      	movs	r2, r4
   3338a:	310a      	adds	r1, #10
   3338c:	0028      	movs	r0, r5
   3338e:	f000 f9fd 	bl	3378c <__swbuf_r>
   33392:	1c43      	adds	r3, r0, #1
   33394:	d0d5      	beq.n	33342 <_puts_r+0x42>
   33396:	200a      	movs	r0, #10
   33398:	e7d5      	b.n	33346 <_puts_r+0x46>
   3339a:	0022      	movs	r2, r4
   3339c:	0028      	movs	r0, r5
   3339e:	f000 f9f5 	bl	3378c <__swbuf_r>
   333a2:	1c43      	adds	r3, r0, #1
   333a4:	d1e8      	bne.n	33378 <_puts_r+0x78>
   333a6:	e7cc      	b.n	33342 <_puts_r+0x42>
   333a8:	200a      	movs	r0, #10
   333aa:	6823      	ldr	r3, [r4, #0]
   333ac:	1c5a      	adds	r2, r3, #1
   333ae:	6022      	str	r2, [r4, #0]
   333b0:	7018      	strb	r0, [r3, #0]
   333b2:	e7c8      	b.n	33346 <_puts_r+0x46>
   333b4:	000385e8 	.word	0x000385e8
   333b8:	00038608 	.word	0x00038608
   333bc:	000385c8 	.word	0x000385c8

000333c0 <puts>:
   333c0:	b510      	push	{r4, lr}
   333c2:	4b03      	ldr	r3, [pc, #12]	; (333d0 <puts+0x10>)
   333c4:	0001      	movs	r1, r0
   333c6:	6818      	ldr	r0, [r3, #0]
   333c8:	f7ff ff9a 	bl	33300 <_puts_r>
   333cc:	bd10      	pop	{r4, pc}
   333ce:	46c0      	nop			; (mov r8, r8)
   333d0:	20000130 	.word	0x20000130

000333d4 <_sbrk_r>:
   333d4:	2300      	movs	r3, #0
   333d6:	b570      	push	{r4, r5, r6, lr}
   333d8:	4c06      	ldr	r4, [pc, #24]	; (333f4 <_sbrk_r+0x20>)
   333da:	0005      	movs	r5, r0
   333dc:	0008      	movs	r0, r1
   333de:	6023      	str	r3, [r4, #0]
   333e0:	f7f6 fb6a 	bl	29ab8 <_sbrk>
   333e4:	1c43      	adds	r3, r0, #1
   333e6:	d103      	bne.n	333f0 <_sbrk_r+0x1c>
   333e8:	6823      	ldr	r3, [r4, #0]
   333ea:	2b00      	cmp	r3, #0
   333ec:	d000      	beq.n	333f0 <_sbrk_r+0x1c>
   333ee:	602b      	str	r3, [r5, #0]
   333f0:	bd70      	pop	{r4, r5, r6, pc}
   333f2:	46c0      	nop			; (mov r8, r8)
   333f4:	20005a50 	.word	0x20005a50

000333f8 <sniprintf>:
   333f8:	b40c      	push	{r2, r3}
   333fa:	b530      	push	{r4, r5, lr}
   333fc:	4b16      	ldr	r3, [pc, #88]	; (33458 <sniprintf+0x60>)
   333fe:	b09d      	sub	sp, #116	; 0x74
   33400:	1e0c      	subs	r4, r1, #0
   33402:	681d      	ldr	r5, [r3, #0]
   33404:	da08      	bge.n	33418 <sniprintf+0x20>
   33406:	238b      	movs	r3, #139	; 0x8b
   33408:	2001      	movs	r0, #1
   3340a:	602b      	str	r3, [r5, #0]
   3340c:	4240      	negs	r0, r0
   3340e:	b01d      	add	sp, #116	; 0x74
   33410:	bc30      	pop	{r4, r5}
   33412:	bc08      	pop	{r3}
   33414:	b002      	add	sp, #8
   33416:	4718      	bx	r3
   33418:	2382      	movs	r3, #130	; 0x82
   3341a:	a902      	add	r1, sp, #8
   3341c:	009b      	lsls	r3, r3, #2
   3341e:	818b      	strh	r3, [r1, #12]
   33420:	2300      	movs	r3, #0
   33422:	9002      	str	r0, [sp, #8]
   33424:	6108      	str	r0, [r1, #16]
   33426:	429c      	cmp	r4, r3
   33428:	d000      	beq.n	3342c <sniprintf+0x34>
   3342a:	1e63      	subs	r3, r4, #1
   3342c:	608b      	str	r3, [r1, #8]
   3342e:	614b      	str	r3, [r1, #20]
   33430:	2301      	movs	r3, #1
   33432:	425b      	negs	r3, r3
   33434:	81cb      	strh	r3, [r1, #14]
   33436:	9a20      	ldr	r2, [sp, #128]	; 0x80
   33438:	ab21      	add	r3, sp, #132	; 0x84
   3343a:	0028      	movs	r0, r5
   3343c:	9301      	str	r3, [sp, #4]
   3343e:	f000 fcf1 	bl	33e24 <_svfiprintf_r>
   33442:	1c43      	adds	r3, r0, #1
   33444:	da01      	bge.n	3344a <sniprintf+0x52>
   33446:	238b      	movs	r3, #139	; 0x8b
   33448:	602b      	str	r3, [r5, #0]
   3344a:	2c00      	cmp	r4, #0
   3344c:	d0df      	beq.n	3340e <sniprintf+0x16>
   3344e:	2300      	movs	r3, #0
   33450:	9a02      	ldr	r2, [sp, #8]
   33452:	7013      	strb	r3, [r2, #0]
   33454:	e7db      	b.n	3340e <sniprintf+0x16>
   33456:	46c0      	nop			; (mov r8, r8)
   33458:	20000130 	.word	0x20000130

0003345c <siprintf>:
   3345c:	b40e      	push	{r1, r2, r3}
   3345e:	b510      	push	{r4, lr}
   33460:	b09d      	sub	sp, #116	; 0x74
   33462:	a902      	add	r1, sp, #8
   33464:	9002      	str	r0, [sp, #8]
   33466:	6108      	str	r0, [r1, #16]
   33468:	480b      	ldr	r0, [pc, #44]	; (33498 <siprintf+0x3c>)
   3346a:	2482      	movs	r4, #130	; 0x82
   3346c:	6088      	str	r0, [r1, #8]
   3346e:	6148      	str	r0, [r1, #20]
   33470:	2001      	movs	r0, #1
   33472:	4240      	negs	r0, r0
   33474:	ab1f      	add	r3, sp, #124	; 0x7c
   33476:	81c8      	strh	r0, [r1, #14]
   33478:	4808      	ldr	r0, [pc, #32]	; (3349c <siprintf+0x40>)
   3347a:	cb04      	ldmia	r3!, {r2}
   3347c:	00a4      	lsls	r4, r4, #2
   3347e:	6800      	ldr	r0, [r0, #0]
   33480:	9301      	str	r3, [sp, #4]
   33482:	818c      	strh	r4, [r1, #12]
   33484:	f000 fcce 	bl	33e24 <_svfiprintf_r>
   33488:	2300      	movs	r3, #0
   3348a:	9a02      	ldr	r2, [sp, #8]
   3348c:	7013      	strb	r3, [r2, #0]
   3348e:	b01d      	add	sp, #116	; 0x74
   33490:	bc10      	pop	{r4}
   33492:	bc08      	pop	{r3}
   33494:	b003      	add	sp, #12
   33496:	4718      	bx	r3
   33498:	7fffffff 	.word	0x7fffffff
   3349c:	20000130 	.word	0x20000130

000334a0 <strcasecmp>:
   334a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   334a2:	0007      	movs	r7, r0
   334a4:	000e      	movs	r6, r1
   334a6:	783c      	ldrb	r4, [r7, #0]
   334a8:	f000 fbcc 	bl	33c44 <__locale_ctype_ptr>
   334ac:	2203      	movs	r2, #3
   334ae:	1900      	adds	r0, r0, r4
   334b0:	7843      	ldrb	r3, [r0, #1]
   334b2:	4013      	ands	r3, r2
   334b4:	2b01      	cmp	r3, #1
   334b6:	d100      	bne.n	334ba <strcasecmp+0x1a>
   334b8:	3420      	adds	r4, #32
   334ba:	7835      	ldrb	r5, [r6, #0]
   334bc:	f000 fbc2 	bl	33c44 <__locale_ctype_ptr>
   334c0:	2203      	movs	r2, #3
   334c2:	1940      	adds	r0, r0, r5
   334c4:	7843      	ldrb	r3, [r0, #1]
   334c6:	4013      	ands	r3, r2
   334c8:	2b01      	cmp	r3, #1
   334ca:	d100      	bne.n	334ce <strcasecmp+0x2e>
   334cc:	3520      	adds	r5, #32
   334ce:	1b60      	subs	r0, r4, r5
   334d0:	d103      	bne.n	334da <strcasecmp+0x3a>
   334d2:	3701      	adds	r7, #1
   334d4:	3601      	adds	r6, #1
   334d6:	2d00      	cmp	r5, #0
   334d8:	d1e5      	bne.n	334a6 <strcasecmp+0x6>
   334da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000334dc <strcmp>:
   334dc:	7802      	ldrb	r2, [r0, #0]
   334de:	780b      	ldrb	r3, [r1, #0]
   334e0:	2a00      	cmp	r2, #0
   334e2:	d003      	beq.n	334ec <strcmp+0x10>
   334e4:	3001      	adds	r0, #1
   334e6:	3101      	adds	r1, #1
   334e8:	429a      	cmp	r2, r3
   334ea:	d0f7      	beq.n	334dc <strcmp>
   334ec:	1ad0      	subs	r0, r2, r3
   334ee:	4770      	bx	lr

000334f0 <strcpy>:
   334f0:	1c03      	adds	r3, r0, #0
   334f2:	780a      	ldrb	r2, [r1, #0]
   334f4:	3101      	adds	r1, #1
   334f6:	701a      	strb	r2, [r3, #0]
   334f8:	3301      	adds	r3, #1
   334fa:	2a00      	cmp	r2, #0
   334fc:	d1f9      	bne.n	334f2 <strcpy+0x2>
   334fe:	4770      	bx	lr

00033500 <strdup>:
   33500:	b510      	push	{r4, lr}
   33502:	4b03      	ldr	r3, [pc, #12]	; (33510 <strdup+0x10>)
   33504:	0001      	movs	r1, r0
   33506:	6818      	ldr	r0, [r3, #0]
   33508:	f000 f804 	bl	33514 <_strdup_r>
   3350c:	bd10      	pop	{r4, pc}
   3350e:	46c0      	nop			; (mov r8, r8)
   33510:	20000130 	.word	0x20000130

00033514 <_strdup_r>:
   33514:	b570      	push	{r4, r5, r6, lr}
   33516:	0005      	movs	r5, r0
   33518:	0008      	movs	r0, r1
   3351a:	000e      	movs	r6, r1
   3351c:	f000 f80d 	bl	3353a <strlen>
   33520:	1c44      	adds	r4, r0, #1
   33522:	0021      	movs	r1, r4
   33524:	0028      	movs	r0, r5
   33526:	f7ff fe8d 	bl	33244 <_malloc_r>
   3352a:	1e05      	subs	r5, r0, #0
   3352c:	d003      	beq.n	33536 <_strdup_r+0x22>
   3352e:	0022      	movs	r2, r4
   33530:	0031      	movs	r1, r6
   33532:	f7ff fe19 	bl	33168 <memcpy>
   33536:	0028      	movs	r0, r5
   33538:	bd70      	pop	{r4, r5, r6, pc}

0003353a <strlen>:
   3353a:	2300      	movs	r3, #0
   3353c:	5cc2      	ldrb	r2, [r0, r3]
   3353e:	3301      	adds	r3, #1
   33540:	2a00      	cmp	r2, #0
   33542:	d1fb      	bne.n	3353c <strlen+0x2>
   33544:	1e58      	subs	r0, r3, #1
   33546:	4770      	bx	lr

00033548 <strncmp>:
   33548:	2300      	movs	r3, #0
   3354a:	b530      	push	{r4, r5, lr}
   3354c:	429a      	cmp	r2, r3
   3354e:	d00a      	beq.n	33566 <strncmp+0x1e>
   33550:	3a01      	subs	r2, #1
   33552:	5cc4      	ldrb	r4, [r0, r3]
   33554:	5ccd      	ldrb	r5, [r1, r3]
   33556:	42ac      	cmp	r4, r5
   33558:	d104      	bne.n	33564 <strncmp+0x1c>
   3355a:	429a      	cmp	r2, r3
   3355c:	d002      	beq.n	33564 <strncmp+0x1c>
   3355e:	3301      	adds	r3, #1
   33560:	2c00      	cmp	r4, #0
   33562:	d1f6      	bne.n	33552 <strncmp+0xa>
   33564:	1b63      	subs	r3, r4, r5
   33566:	0018      	movs	r0, r3
   33568:	bd30      	pop	{r4, r5, pc}

0003356a <strncpy>:
   3356a:	b570      	push	{r4, r5, r6, lr}
   3356c:	0004      	movs	r4, r0
   3356e:	2a00      	cmp	r2, #0
   33570:	d100      	bne.n	33574 <strncpy+0xa>
   33572:	bd70      	pop	{r4, r5, r6, pc}
   33574:	780d      	ldrb	r5, [r1, #0]
   33576:	1e56      	subs	r6, r2, #1
   33578:	1c63      	adds	r3, r4, #1
   3357a:	7025      	strb	r5, [r4, #0]
   3357c:	3101      	adds	r1, #1
   3357e:	2d00      	cmp	r5, #0
   33580:	d105      	bne.n	3358e <strncpy+0x24>
   33582:	18a4      	adds	r4, r4, r2
   33584:	429c      	cmp	r4, r3
   33586:	d0f4      	beq.n	33572 <strncpy+0x8>
   33588:	701d      	strb	r5, [r3, #0]
   3358a:	3301      	adds	r3, #1
   3358c:	e7fa      	b.n	33584 <strncpy+0x1a>
   3358e:	001c      	movs	r4, r3
   33590:	0032      	movs	r2, r6
   33592:	e7ec      	b.n	3356e <strncpy+0x4>

00033594 <strrchr>:
   33594:	b570      	push	{r4, r5, r6, lr}
   33596:	000d      	movs	r5, r1
   33598:	2400      	movs	r4, #0
   3359a:	2900      	cmp	r1, #0
   3359c:	d105      	bne.n	335aa <strrchr+0x16>
   3359e:	f000 ff19 	bl	343d4 <strchr>
   335a2:	0004      	movs	r4, r0
   335a4:	e006      	b.n	335b4 <strrchr+0x20>
   335a6:	001c      	movs	r4, r3
   335a8:	1c58      	adds	r0, r3, #1
   335aa:	0029      	movs	r1, r5
   335ac:	f000 ff12 	bl	343d4 <strchr>
   335b0:	1e03      	subs	r3, r0, #0
   335b2:	d1f8      	bne.n	335a6 <strrchr+0x12>
   335b4:	0020      	movs	r0, r4
   335b6:	bd70      	pop	{r4, r5, r6, pc}

000335b8 <strstr>:
   335b8:	b510      	push	{r4, lr}
   335ba:	0002      	movs	r2, r0
   335bc:	7800      	ldrb	r0, [r0, #0]
   335be:	2800      	cmp	r0, #0
   335c0:	d104      	bne.n	335cc <strstr+0x14>
   335c2:	7809      	ldrb	r1, [r1, #0]
   335c4:	2900      	cmp	r1, #0
   335c6:	d00d      	beq.n	335e4 <strstr+0x2c>
   335c8:	bd10      	pop	{r4, pc}
   335ca:	3201      	adds	r2, #1
   335cc:	7810      	ldrb	r0, [r2, #0]
   335ce:	2800      	cmp	r0, #0
   335d0:	d0fa      	beq.n	335c8 <strstr+0x10>
   335d2:	2300      	movs	r3, #0
   335d4:	5cc8      	ldrb	r0, [r1, r3]
   335d6:	2800      	cmp	r0, #0
   335d8:	d004      	beq.n	335e4 <strstr+0x2c>
   335da:	5cd4      	ldrb	r4, [r2, r3]
   335dc:	4284      	cmp	r4, r0
   335de:	d1f4      	bne.n	335ca <strstr+0x12>
   335e0:	3301      	adds	r3, #1
   335e2:	e7f7      	b.n	335d4 <strstr+0x1c>
   335e4:	0010      	movs	r0, r2
   335e6:	e7ef      	b.n	335c8 <strstr+0x10>

000335e8 <_strtol_l.isra.0>:
   335e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   335ea:	001f      	movs	r7, r3
   335ec:	000e      	movs	r6, r1
   335ee:	b087      	sub	sp, #28
   335f0:	9005      	str	r0, [sp, #20]
   335f2:	9103      	str	r1, [sp, #12]
   335f4:	9202      	str	r2, [sp, #8]
   335f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   335f8:	7834      	ldrb	r4, [r6, #0]
   335fa:	f000 fb20 	bl	33c3e <__locale_ctype_ptr_l>
   335fe:	2208      	movs	r2, #8
   33600:	1900      	adds	r0, r0, r4
   33602:	7843      	ldrb	r3, [r0, #1]
   33604:	1c75      	adds	r5, r6, #1
   33606:	4013      	ands	r3, r2
   33608:	d10c      	bne.n	33624 <_strtol_l.isra.0+0x3c>
   3360a:	2c2d      	cmp	r4, #45	; 0x2d
   3360c:	d10c      	bne.n	33628 <_strtol_l.isra.0+0x40>
   3360e:	3301      	adds	r3, #1
   33610:	782c      	ldrb	r4, [r5, #0]
   33612:	9301      	str	r3, [sp, #4]
   33614:	1cb5      	adds	r5, r6, #2
   33616:	2f00      	cmp	r7, #0
   33618:	d00c      	beq.n	33634 <_strtol_l.isra.0+0x4c>
   3361a:	2f10      	cmp	r7, #16
   3361c:	d114      	bne.n	33648 <_strtol_l.isra.0+0x60>
   3361e:	2c30      	cmp	r4, #48	; 0x30
   33620:	d00a      	beq.n	33638 <_strtol_l.isra.0+0x50>
   33622:	e011      	b.n	33648 <_strtol_l.isra.0+0x60>
   33624:	002e      	movs	r6, r5
   33626:	e7e6      	b.n	335f6 <_strtol_l.isra.0+0xe>
   33628:	9301      	str	r3, [sp, #4]
   3362a:	2c2b      	cmp	r4, #43	; 0x2b
   3362c:	d1f3      	bne.n	33616 <_strtol_l.isra.0+0x2e>
   3362e:	782c      	ldrb	r4, [r5, #0]
   33630:	1cb5      	adds	r5, r6, #2
   33632:	e7f0      	b.n	33616 <_strtol_l.isra.0+0x2e>
   33634:	2c30      	cmp	r4, #48	; 0x30
   33636:	d12f      	bne.n	33698 <_strtol_l.isra.0+0xb0>
   33638:	2220      	movs	r2, #32
   3363a:	782b      	ldrb	r3, [r5, #0]
   3363c:	4393      	bics	r3, r2
   3363e:	2b58      	cmp	r3, #88	; 0x58
   33640:	d151      	bne.n	336e6 <_strtol_l.isra.0+0xfe>
   33642:	2710      	movs	r7, #16
   33644:	786c      	ldrb	r4, [r5, #1]
   33646:	3502      	adds	r5, #2
   33648:	9b01      	ldr	r3, [sp, #4]
   3364a:	4a29      	ldr	r2, [pc, #164]	; (336f0 <_strtol_l.isra.0+0x108>)
   3364c:	0039      	movs	r1, r7
   3364e:	189e      	adds	r6, r3, r2
   33650:	0030      	movs	r0, r6
   33652:	f7fd fee1 	bl	31418 <__aeabi_uidivmod>
   33656:	0030      	movs	r0, r6
   33658:	9104      	str	r1, [sp, #16]
   3365a:	0039      	movs	r1, r7
   3365c:	f7fd fe56 	bl	3130c <__udivsi3>
   33660:	2101      	movs	r1, #1
   33662:	2300      	movs	r3, #0
   33664:	4249      	negs	r1, r1
   33666:	0002      	movs	r2, r0
   33668:	468c      	mov	ip, r1
   3366a:	0018      	movs	r0, r3
   3366c:	0021      	movs	r1, r4
   3366e:	3930      	subs	r1, #48	; 0x30
   33670:	2909      	cmp	r1, #9
   33672:	d813      	bhi.n	3369c <_strtol_l.isra.0+0xb4>
   33674:	000c      	movs	r4, r1
   33676:	42a7      	cmp	r7, r4
   33678:	dd1c      	ble.n	336b4 <_strtol_l.isra.0+0xcc>
   3367a:	1c59      	adds	r1, r3, #1
   3367c:	d009      	beq.n	33692 <_strtol_l.isra.0+0xaa>
   3367e:	4663      	mov	r3, ip
   33680:	4282      	cmp	r2, r0
   33682:	d306      	bcc.n	33692 <_strtol_l.isra.0+0xaa>
   33684:	d102      	bne.n	3368c <_strtol_l.isra.0+0xa4>
   33686:	9904      	ldr	r1, [sp, #16]
   33688:	42a1      	cmp	r1, r4
   3368a:	db02      	blt.n	33692 <_strtol_l.isra.0+0xaa>
   3368c:	2301      	movs	r3, #1
   3368e:	4378      	muls	r0, r7
   33690:	1820      	adds	r0, r4, r0
   33692:	782c      	ldrb	r4, [r5, #0]
   33694:	3501      	adds	r5, #1
   33696:	e7e9      	b.n	3366c <_strtol_l.isra.0+0x84>
   33698:	270a      	movs	r7, #10
   3369a:	e7d5      	b.n	33648 <_strtol_l.isra.0+0x60>
   3369c:	0021      	movs	r1, r4
   3369e:	3941      	subs	r1, #65	; 0x41
   336a0:	2919      	cmp	r1, #25
   336a2:	d801      	bhi.n	336a8 <_strtol_l.isra.0+0xc0>
   336a4:	3c37      	subs	r4, #55	; 0x37
   336a6:	e7e6      	b.n	33676 <_strtol_l.isra.0+0x8e>
   336a8:	0021      	movs	r1, r4
   336aa:	3961      	subs	r1, #97	; 0x61
   336ac:	2919      	cmp	r1, #25
   336ae:	d801      	bhi.n	336b4 <_strtol_l.isra.0+0xcc>
   336b0:	3c57      	subs	r4, #87	; 0x57
   336b2:	e7e0      	b.n	33676 <_strtol_l.isra.0+0x8e>
   336b4:	1c5a      	adds	r2, r3, #1
   336b6:	d108      	bne.n	336ca <_strtol_l.isra.0+0xe2>
   336b8:	9a05      	ldr	r2, [sp, #20]
   336ba:	3323      	adds	r3, #35	; 0x23
   336bc:	6013      	str	r3, [r2, #0]
   336be:	9b02      	ldr	r3, [sp, #8]
   336c0:	0030      	movs	r0, r6
   336c2:	2b00      	cmp	r3, #0
   336c4:	d10b      	bne.n	336de <_strtol_l.isra.0+0xf6>
   336c6:	b007      	add	sp, #28
   336c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   336ca:	9a01      	ldr	r2, [sp, #4]
   336cc:	2a00      	cmp	r2, #0
   336ce:	d000      	beq.n	336d2 <_strtol_l.isra.0+0xea>
   336d0:	4240      	negs	r0, r0
   336d2:	9a02      	ldr	r2, [sp, #8]
   336d4:	2a00      	cmp	r2, #0
   336d6:	d0f6      	beq.n	336c6 <_strtol_l.isra.0+0xde>
   336d8:	9a03      	ldr	r2, [sp, #12]
   336da:	2b00      	cmp	r3, #0
   336dc:	d000      	beq.n	336e0 <_strtol_l.isra.0+0xf8>
   336de:	1e6a      	subs	r2, r5, #1
   336e0:	9b02      	ldr	r3, [sp, #8]
   336e2:	601a      	str	r2, [r3, #0]
   336e4:	e7ef      	b.n	336c6 <_strtol_l.isra.0+0xde>
   336e6:	2430      	movs	r4, #48	; 0x30
   336e8:	2f00      	cmp	r7, #0
   336ea:	d1ad      	bne.n	33648 <_strtol_l.isra.0+0x60>
   336ec:	3708      	adds	r7, #8
   336ee:	e7ab      	b.n	33648 <_strtol_l.isra.0+0x60>
   336f0:	7fffffff 	.word	0x7fffffff

000336f4 <strtol>:
   336f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   336f6:	0013      	movs	r3, r2
   336f8:	4a06      	ldr	r2, [pc, #24]	; (33714 <strtol+0x20>)
   336fa:	0005      	movs	r5, r0
   336fc:	6810      	ldr	r0, [r2, #0]
   336fe:	6a04      	ldr	r4, [r0, #32]
   33700:	2c00      	cmp	r4, #0
   33702:	d100      	bne.n	33706 <strtol+0x12>
   33704:	4c04      	ldr	r4, [pc, #16]	; (33718 <strtol+0x24>)
   33706:	000a      	movs	r2, r1
   33708:	9400      	str	r4, [sp, #0]
   3370a:	0029      	movs	r1, r5
   3370c:	f7ff ff6c 	bl	335e8 <_strtol_l.isra.0>
   33710:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   33712:	46c0      	nop			; (mov r8, r8)
   33714:	20000130 	.word	0x20000130
   33718:	20000194 	.word	0x20000194

0003371c <_vsniprintf_r>:
   3371c:	b530      	push	{r4, r5, lr}
   3371e:	0014      	movs	r4, r2
   33720:	b09b      	sub	sp, #108	; 0x6c
   33722:	0005      	movs	r5, r0
   33724:	001a      	movs	r2, r3
   33726:	2c00      	cmp	r4, #0
   33728:	da05      	bge.n	33736 <_vsniprintf_r+0x1a>
   3372a:	238b      	movs	r3, #139	; 0x8b
   3372c:	6003      	str	r3, [r0, #0]
   3372e:	2001      	movs	r0, #1
   33730:	4240      	negs	r0, r0
   33732:	b01b      	add	sp, #108	; 0x6c
   33734:	bd30      	pop	{r4, r5, pc}
   33736:	2382      	movs	r3, #130	; 0x82
   33738:	4668      	mov	r0, sp
   3373a:	009b      	lsls	r3, r3, #2
   3373c:	8183      	strh	r3, [r0, #12]
   3373e:	2300      	movs	r3, #0
   33740:	9100      	str	r1, [sp, #0]
   33742:	9104      	str	r1, [sp, #16]
   33744:	429c      	cmp	r4, r3
   33746:	d000      	beq.n	3374a <_vsniprintf_r+0x2e>
   33748:	1e63      	subs	r3, r4, #1
   3374a:	9302      	str	r3, [sp, #8]
   3374c:	9305      	str	r3, [sp, #20]
   3374e:	2301      	movs	r3, #1
   33750:	4669      	mov	r1, sp
   33752:	425b      	negs	r3, r3
   33754:	81cb      	strh	r3, [r1, #14]
   33756:	0028      	movs	r0, r5
   33758:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   3375a:	f000 fb63 	bl	33e24 <_svfiprintf_r>
   3375e:	1c43      	adds	r3, r0, #1
   33760:	da01      	bge.n	33766 <_vsniprintf_r+0x4a>
   33762:	238b      	movs	r3, #139	; 0x8b
   33764:	602b      	str	r3, [r5, #0]
   33766:	2c00      	cmp	r4, #0
   33768:	d0e3      	beq.n	33732 <_vsniprintf_r+0x16>
   3376a:	2300      	movs	r3, #0
   3376c:	9a00      	ldr	r2, [sp, #0]
   3376e:	7013      	strb	r3, [r2, #0]
   33770:	e7df      	b.n	33732 <_vsniprintf_r+0x16>
	...

00033774 <vsniprintf>:
   33774:	b507      	push	{r0, r1, r2, lr}
   33776:	9300      	str	r3, [sp, #0]
   33778:	0013      	movs	r3, r2
   3377a:	000a      	movs	r2, r1
   3377c:	0001      	movs	r1, r0
   3377e:	4802      	ldr	r0, [pc, #8]	; (33788 <vsniprintf+0x14>)
   33780:	6800      	ldr	r0, [r0, #0]
   33782:	f7ff ffcb 	bl	3371c <_vsniprintf_r>
   33786:	bd0e      	pop	{r1, r2, r3, pc}
   33788:	20000130 	.word	0x20000130

0003378c <__swbuf_r>:
   3378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3378e:	0005      	movs	r5, r0
   33790:	000e      	movs	r6, r1
   33792:	0014      	movs	r4, r2
   33794:	2800      	cmp	r0, #0
   33796:	d004      	beq.n	337a2 <__swbuf_r+0x16>
   33798:	6983      	ldr	r3, [r0, #24]
   3379a:	2b00      	cmp	r3, #0
   3379c:	d101      	bne.n	337a2 <__swbuf_r+0x16>
   3379e:	f000 f9b9 	bl	33b14 <__sinit>
   337a2:	4b22      	ldr	r3, [pc, #136]	; (3382c <__swbuf_r+0xa0>)
   337a4:	429c      	cmp	r4, r3
   337a6:	d12d      	bne.n	33804 <__swbuf_r+0x78>
   337a8:	686c      	ldr	r4, [r5, #4]
   337aa:	69a3      	ldr	r3, [r4, #24]
   337ac:	60a3      	str	r3, [r4, #8]
   337ae:	89a3      	ldrh	r3, [r4, #12]
   337b0:	071b      	lsls	r3, r3, #28
   337b2:	d531      	bpl.n	33818 <__swbuf_r+0x8c>
   337b4:	6923      	ldr	r3, [r4, #16]
   337b6:	2b00      	cmp	r3, #0
   337b8:	d02e      	beq.n	33818 <__swbuf_r+0x8c>
   337ba:	6823      	ldr	r3, [r4, #0]
   337bc:	6922      	ldr	r2, [r4, #16]
   337be:	b2f7      	uxtb	r7, r6
   337c0:	1a98      	subs	r0, r3, r2
   337c2:	6963      	ldr	r3, [r4, #20]
   337c4:	b2f6      	uxtb	r6, r6
   337c6:	4298      	cmp	r0, r3
   337c8:	db05      	blt.n	337d6 <__swbuf_r+0x4a>
   337ca:	0021      	movs	r1, r4
   337cc:	0028      	movs	r0, r5
   337ce:	f000 f933 	bl	33a38 <_fflush_r>
   337d2:	2800      	cmp	r0, #0
   337d4:	d126      	bne.n	33824 <__swbuf_r+0x98>
   337d6:	68a3      	ldr	r3, [r4, #8]
   337d8:	3001      	adds	r0, #1
   337da:	3b01      	subs	r3, #1
   337dc:	60a3      	str	r3, [r4, #8]
   337de:	6823      	ldr	r3, [r4, #0]
   337e0:	1c5a      	adds	r2, r3, #1
   337e2:	6022      	str	r2, [r4, #0]
   337e4:	701f      	strb	r7, [r3, #0]
   337e6:	6963      	ldr	r3, [r4, #20]
   337e8:	4298      	cmp	r0, r3
   337ea:	d004      	beq.n	337f6 <__swbuf_r+0x6a>
   337ec:	89a3      	ldrh	r3, [r4, #12]
   337ee:	07db      	lsls	r3, r3, #31
   337f0:	d51a      	bpl.n	33828 <__swbuf_r+0x9c>
   337f2:	2e0a      	cmp	r6, #10
   337f4:	d118      	bne.n	33828 <__swbuf_r+0x9c>
   337f6:	0021      	movs	r1, r4
   337f8:	0028      	movs	r0, r5
   337fa:	f000 f91d 	bl	33a38 <_fflush_r>
   337fe:	2800      	cmp	r0, #0
   33800:	d012      	beq.n	33828 <__swbuf_r+0x9c>
   33802:	e00f      	b.n	33824 <__swbuf_r+0x98>
   33804:	4b0a      	ldr	r3, [pc, #40]	; (33830 <__swbuf_r+0xa4>)
   33806:	429c      	cmp	r4, r3
   33808:	d101      	bne.n	3380e <__swbuf_r+0x82>
   3380a:	68ac      	ldr	r4, [r5, #8]
   3380c:	e7cd      	b.n	337aa <__swbuf_r+0x1e>
   3380e:	4b09      	ldr	r3, [pc, #36]	; (33834 <__swbuf_r+0xa8>)
   33810:	429c      	cmp	r4, r3
   33812:	d1ca      	bne.n	337aa <__swbuf_r+0x1e>
   33814:	68ec      	ldr	r4, [r5, #12]
   33816:	e7c8      	b.n	337aa <__swbuf_r+0x1e>
   33818:	0021      	movs	r1, r4
   3381a:	0028      	movs	r0, r5
   3381c:	f000 f80c 	bl	33838 <__swsetup_r>
   33820:	2800      	cmp	r0, #0
   33822:	d0ca      	beq.n	337ba <__swbuf_r+0x2e>
   33824:	2601      	movs	r6, #1
   33826:	4276      	negs	r6, r6
   33828:	0030      	movs	r0, r6
   3382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3382c:	000385e8 	.word	0x000385e8
   33830:	00038608 	.word	0x00038608
   33834:	000385c8 	.word	0x000385c8

00033838 <__swsetup_r>:
   33838:	4b36      	ldr	r3, [pc, #216]	; (33914 <__swsetup_r+0xdc>)
   3383a:	b570      	push	{r4, r5, r6, lr}
   3383c:	681d      	ldr	r5, [r3, #0]
   3383e:	0006      	movs	r6, r0
   33840:	000c      	movs	r4, r1
   33842:	2d00      	cmp	r5, #0
   33844:	d005      	beq.n	33852 <__swsetup_r+0x1a>
   33846:	69ab      	ldr	r3, [r5, #24]
   33848:	2b00      	cmp	r3, #0
   3384a:	d102      	bne.n	33852 <__swsetup_r+0x1a>
   3384c:	0028      	movs	r0, r5
   3384e:	f000 f961 	bl	33b14 <__sinit>
   33852:	4b31      	ldr	r3, [pc, #196]	; (33918 <__swsetup_r+0xe0>)
   33854:	429c      	cmp	r4, r3
   33856:	d10f      	bne.n	33878 <__swsetup_r+0x40>
   33858:	686c      	ldr	r4, [r5, #4]
   3385a:	230c      	movs	r3, #12
   3385c:	5ee2      	ldrsh	r2, [r4, r3]
   3385e:	b293      	uxth	r3, r2
   33860:	0719      	lsls	r1, r3, #28
   33862:	d42d      	bmi.n	338c0 <__swsetup_r+0x88>
   33864:	06d9      	lsls	r1, r3, #27
   33866:	d411      	bmi.n	3388c <__swsetup_r+0x54>
   33868:	2309      	movs	r3, #9
   3386a:	2001      	movs	r0, #1
   3386c:	6033      	str	r3, [r6, #0]
   3386e:	3337      	adds	r3, #55	; 0x37
   33870:	4313      	orrs	r3, r2
   33872:	81a3      	strh	r3, [r4, #12]
   33874:	4240      	negs	r0, r0
   33876:	bd70      	pop	{r4, r5, r6, pc}
   33878:	4b28      	ldr	r3, [pc, #160]	; (3391c <__swsetup_r+0xe4>)
   3387a:	429c      	cmp	r4, r3
   3387c:	d101      	bne.n	33882 <__swsetup_r+0x4a>
   3387e:	68ac      	ldr	r4, [r5, #8]
   33880:	e7eb      	b.n	3385a <__swsetup_r+0x22>
   33882:	4b27      	ldr	r3, [pc, #156]	; (33920 <__swsetup_r+0xe8>)
   33884:	429c      	cmp	r4, r3
   33886:	d1e8      	bne.n	3385a <__swsetup_r+0x22>
   33888:	68ec      	ldr	r4, [r5, #12]
   3388a:	e7e6      	b.n	3385a <__swsetup_r+0x22>
   3388c:	075b      	lsls	r3, r3, #29
   3388e:	d513      	bpl.n	338b8 <__swsetup_r+0x80>
   33890:	6b61      	ldr	r1, [r4, #52]	; 0x34
   33892:	2900      	cmp	r1, #0
   33894:	d008      	beq.n	338a8 <__swsetup_r+0x70>
   33896:	0023      	movs	r3, r4
   33898:	3344      	adds	r3, #68	; 0x44
   3389a:	4299      	cmp	r1, r3
   3389c:	d002      	beq.n	338a4 <__swsetup_r+0x6c>
   3389e:	0030      	movs	r0, r6
   338a0:	f7ff fc86 	bl	331b0 <_free_r>
   338a4:	2300      	movs	r3, #0
   338a6:	6363      	str	r3, [r4, #52]	; 0x34
   338a8:	2224      	movs	r2, #36	; 0x24
   338aa:	89a3      	ldrh	r3, [r4, #12]
   338ac:	4393      	bics	r3, r2
   338ae:	81a3      	strh	r3, [r4, #12]
   338b0:	2300      	movs	r3, #0
   338b2:	6063      	str	r3, [r4, #4]
   338b4:	6923      	ldr	r3, [r4, #16]
   338b6:	6023      	str	r3, [r4, #0]
   338b8:	2308      	movs	r3, #8
   338ba:	89a2      	ldrh	r2, [r4, #12]
   338bc:	4313      	orrs	r3, r2
   338be:	81a3      	strh	r3, [r4, #12]
   338c0:	6923      	ldr	r3, [r4, #16]
   338c2:	2b00      	cmp	r3, #0
   338c4:	d10b      	bne.n	338de <__swsetup_r+0xa6>
   338c6:	21a0      	movs	r1, #160	; 0xa0
   338c8:	2280      	movs	r2, #128	; 0x80
   338ca:	89a3      	ldrh	r3, [r4, #12]
   338cc:	0089      	lsls	r1, r1, #2
   338ce:	0092      	lsls	r2, r2, #2
   338d0:	400b      	ands	r3, r1
   338d2:	4293      	cmp	r3, r2
   338d4:	d003      	beq.n	338de <__swsetup_r+0xa6>
   338d6:	0021      	movs	r1, r4
   338d8:	0030      	movs	r0, r6
   338da:	f000 f9e9 	bl	33cb0 <__smakebuf_r>
   338de:	2301      	movs	r3, #1
   338e0:	89a2      	ldrh	r2, [r4, #12]
   338e2:	4013      	ands	r3, r2
   338e4:	d011      	beq.n	3390a <__swsetup_r+0xd2>
   338e6:	2300      	movs	r3, #0
   338e8:	60a3      	str	r3, [r4, #8]
   338ea:	6963      	ldr	r3, [r4, #20]
   338ec:	425b      	negs	r3, r3
   338ee:	61a3      	str	r3, [r4, #24]
   338f0:	2000      	movs	r0, #0
   338f2:	6923      	ldr	r3, [r4, #16]
   338f4:	4283      	cmp	r3, r0
   338f6:	d1be      	bne.n	33876 <__swsetup_r+0x3e>
   338f8:	230c      	movs	r3, #12
   338fa:	5ee2      	ldrsh	r2, [r4, r3]
   338fc:	0613      	lsls	r3, r2, #24
   338fe:	d5ba      	bpl.n	33876 <__swsetup_r+0x3e>
   33900:	2340      	movs	r3, #64	; 0x40
   33902:	4313      	orrs	r3, r2
   33904:	81a3      	strh	r3, [r4, #12]
   33906:	3801      	subs	r0, #1
   33908:	e7b5      	b.n	33876 <__swsetup_r+0x3e>
   3390a:	0792      	lsls	r2, r2, #30
   3390c:	d400      	bmi.n	33910 <__swsetup_r+0xd8>
   3390e:	6963      	ldr	r3, [r4, #20]
   33910:	60a3      	str	r3, [r4, #8]
   33912:	e7ed      	b.n	338f0 <__swsetup_r+0xb8>
   33914:	20000130 	.word	0x20000130
   33918:	000385e8 	.word	0x000385e8
   3391c:	00038608 	.word	0x00038608
   33920:	000385c8 	.word	0x000385c8

00033924 <__sflush_r>:
   33924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33926:	898a      	ldrh	r2, [r1, #12]
   33928:	0005      	movs	r5, r0
   3392a:	000c      	movs	r4, r1
   3392c:	0713      	lsls	r3, r2, #28
   3392e:	d460      	bmi.n	339f2 <__sflush_r+0xce>
   33930:	684b      	ldr	r3, [r1, #4]
   33932:	2b00      	cmp	r3, #0
   33934:	dc04      	bgt.n	33940 <__sflush_r+0x1c>
   33936:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   33938:	2b00      	cmp	r3, #0
   3393a:	dc01      	bgt.n	33940 <__sflush_r+0x1c>
   3393c:	2000      	movs	r0, #0
   3393e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   33940:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   33942:	2f00      	cmp	r7, #0
   33944:	d0fa      	beq.n	3393c <__sflush_r+0x18>
   33946:	2300      	movs	r3, #0
   33948:	682e      	ldr	r6, [r5, #0]
   3394a:	602b      	str	r3, [r5, #0]
   3394c:	2380      	movs	r3, #128	; 0x80
   3394e:	015b      	lsls	r3, r3, #5
   33950:	401a      	ands	r2, r3
   33952:	d034      	beq.n	339be <__sflush_r+0x9a>
   33954:	6d60      	ldr	r0, [r4, #84]	; 0x54
   33956:	89a3      	ldrh	r3, [r4, #12]
   33958:	075b      	lsls	r3, r3, #29
   3395a:	d506      	bpl.n	3396a <__sflush_r+0x46>
   3395c:	6863      	ldr	r3, [r4, #4]
   3395e:	1ac0      	subs	r0, r0, r3
   33960:	6b63      	ldr	r3, [r4, #52]	; 0x34
   33962:	2b00      	cmp	r3, #0
   33964:	d001      	beq.n	3396a <__sflush_r+0x46>
   33966:	6c23      	ldr	r3, [r4, #64]	; 0x40
   33968:	1ac0      	subs	r0, r0, r3
   3396a:	0002      	movs	r2, r0
   3396c:	6a21      	ldr	r1, [r4, #32]
   3396e:	2300      	movs	r3, #0
   33970:	0028      	movs	r0, r5
   33972:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   33974:	47b8      	blx	r7
   33976:	89a1      	ldrh	r1, [r4, #12]
   33978:	1c43      	adds	r3, r0, #1
   3397a:	d106      	bne.n	3398a <__sflush_r+0x66>
   3397c:	682b      	ldr	r3, [r5, #0]
   3397e:	2b1d      	cmp	r3, #29
   33980:	d831      	bhi.n	339e6 <__sflush_r+0xc2>
   33982:	4a2c      	ldr	r2, [pc, #176]	; (33a34 <__sflush_r+0x110>)
   33984:	40da      	lsrs	r2, r3
   33986:	07d3      	lsls	r3, r2, #31
   33988:	d52d      	bpl.n	339e6 <__sflush_r+0xc2>
   3398a:	2300      	movs	r3, #0
   3398c:	6063      	str	r3, [r4, #4]
   3398e:	6923      	ldr	r3, [r4, #16]
   33990:	6023      	str	r3, [r4, #0]
   33992:	04cb      	lsls	r3, r1, #19
   33994:	d505      	bpl.n	339a2 <__sflush_r+0x7e>
   33996:	1c43      	adds	r3, r0, #1
   33998:	d102      	bne.n	339a0 <__sflush_r+0x7c>
   3399a:	682b      	ldr	r3, [r5, #0]
   3399c:	2b00      	cmp	r3, #0
   3399e:	d100      	bne.n	339a2 <__sflush_r+0x7e>
   339a0:	6560      	str	r0, [r4, #84]	; 0x54
   339a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   339a4:	602e      	str	r6, [r5, #0]
   339a6:	2900      	cmp	r1, #0
   339a8:	d0c8      	beq.n	3393c <__sflush_r+0x18>
   339aa:	0023      	movs	r3, r4
   339ac:	3344      	adds	r3, #68	; 0x44
   339ae:	4299      	cmp	r1, r3
   339b0:	d002      	beq.n	339b8 <__sflush_r+0x94>
   339b2:	0028      	movs	r0, r5
   339b4:	f7ff fbfc 	bl	331b0 <_free_r>
   339b8:	2000      	movs	r0, #0
   339ba:	6360      	str	r0, [r4, #52]	; 0x34
   339bc:	e7bf      	b.n	3393e <__sflush_r+0x1a>
   339be:	2301      	movs	r3, #1
   339c0:	6a21      	ldr	r1, [r4, #32]
   339c2:	0028      	movs	r0, r5
   339c4:	47b8      	blx	r7
   339c6:	1c43      	adds	r3, r0, #1
   339c8:	d1c5      	bne.n	33956 <__sflush_r+0x32>
   339ca:	682b      	ldr	r3, [r5, #0]
   339cc:	2b00      	cmp	r3, #0
   339ce:	d0c2      	beq.n	33956 <__sflush_r+0x32>
   339d0:	2b1d      	cmp	r3, #29
   339d2:	d001      	beq.n	339d8 <__sflush_r+0xb4>
   339d4:	2b16      	cmp	r3, #22
   339d6:	d101      	bne.n	339dc <__sflush_r+0xb8>
   339d8:	602e      	str	r6, [r5, #0]
   339da:	e7af      	b.n	3393c <__sflush_r+0x18>
   339dc:	2340      	movs	r3, #64	; 0x40
   339de:	89a2      	ldrh	r2, [r4, #12]
   339e0:	4313      	orrs	r3, r2
   339e2:	81a3      	strh	r3, [r4, #12]
   339e4:	e7ab      	b.n	3393e <__sflush_r+0x1a>
   339e6:	2340      	movs	r3, #64	; 0x40
   339e8:	430b      	orrs	r3, r1
   339ea:	2001      	movs	r0, #1
   339ec:	81a3      	strh	r3, [r4, #12]
   339ee:	4240      	negs	r0, r0
   339f0:	e7a5      	b.n	3393e <__sflush_r+0x1a>
   339f2:	690f      	ldr	r7, [r1, #16]
   339f4:	2f00      	cmp	r7, #0
   339f6:	d0a1      	beq.n	3393c <__sflush_r+0x18>
   339f8:	680b      	ldr	r3, [r1, #0]
   339fa:	600f      	str	r7, [r1, #0]
   339fc:	1bdb      	subs	r3, r3, r7
   339fe:	9301      	str	r3, [sp, #4]
   33a00:	2300      	movs	r3, #0
   33a02:	0792      	lsls	r2, r2, #30
   33a04:	d100      	bne.n	33a08 <__sflush_r+0xe4>
   33a06:	694b      	ldr	r3, [r1, #20]
   33a08:	60a3      	str	r3, [r4, #8]
   33a0a:	9b01      	ldr	r3, [sp, #4]
   33a0c:	2b00      	cmp	r3, #0
   33a0e:	dc00      	bgt.n	33a12 <__sflush_r+0xee>
   33a10:	e794      	b.n	3393c <__sflush_r+0x18>
   33a12:	9b01      	ldr	r3, [sp, #4]
   33a14:	003a      	movs	r2, r7
   33a16:	6a21      	ldr	r1, [r4, #32]
   33a18:	0028      	movs	r0, r5
   33a1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   33a1c:	47b0      	blx	r6
   33a1e:	2800      	cmp	r0, #0
   33a20:	dc03      	bgt.n	33a2a <__sflush_r+0x106>
   33a22:	2340      	movs	r3, #64	; 0x40
   33a24:	89a2      	ldrh	r2, [r4, #12]
   33a26:	4313      	orrs	r3, r2
   33a28:	e7df      	b.n	339ea <__sflush_r+0xc6>
   33a2a:	9b01      	ldr	r3, [sp, #4]
   33a2c:	183f      	adds	r7, r7, r0
   33a2e:	1a1b      	subs	r3, r3, r0
   33a30:	9301      	str	r3, [sp, #4]
   33a32:	e7ea      	b.n	33a0a <__sflush_r+0xe6>
   33a34:	20400001 	.word	0x20400001

00033a38 <_fflush_r>:
   33a38:	690b      	ldr	r3, [r1, #16]
   33a3a:	b570      	push	{r4, r5, r6, lr}
   33a3c:	0005      	movs	r5, r0
   33a3e:	000c      	movs	r4, r1
   33a40:	2b00      	cmp	r3, #0
   33a42:	d101      	bne.n	33a48 <_fflush_r+0x10>
   33a44:	2000      	movs	r0, #0
   33a46:	bd70      	pop	{r4, r5, r6, pc}
   33a48:	2800      	cmp	r0, #0
   33a4a:	d004      	beq.n	33a56 <_fflush_r+0x1e>
   33a4c:	6983      	ldr	r3, [r0, #24]
   33a4e:	2b00      	cmp	r3, #0
   33a50:	d101      	bne.n	33a56 <_fflush_r+0x1e>
   33a52:	f000 f85f 	bl	33b14 <__sinit>
   33a56:	4b0b      	ldr	r3, [pc, #44]	; (33a84 <_fflush_r+0x4c>)
   33a58:	429c      	cmp	r4, r3
   33a5a:	d109      	bne.n	33a70 <_fflush_r+0x38>
   33a5c:	686c      	ldr	r4, [r5, #4]
   33a5e:	220c      	movs	r2, #12
   33a60:	5ea3      	ldrsh	r3, [r4, r2]
   33a62:	2b00      	cmp	r3, #0
   33a64:	d0ee      	beq.n	33a44 <_fflush_r+0xc>
   33a66:	0021      	movs	r1, r4
   33a68:	0028      	movs	r0, r5
   33a6a:	f7ff ff5b 	bl	33924 <__sflush_r>
   33a6e:	e7ea      	b.n	33a46 <_fflush_r+0xe>
   33a70:	4b05      	ldr	r3, [pc, #20]	; (33a88 <_fflush_r+0x50>)
   33a72:	429c      	cmp	r4, r3
   33a74:	d101      	bne.n	33a7a <_fflush_r+0x42>
   33a76:	68ac      	ldr	r4, [r5, #8]
   33a78:	e7f1      	b.n	33a5e <_fflush_r+0x26>
   33a7a:	4b04      	ldr	r3, [pc, #16]	; (33a8c <_fflush_r+0x54>)
   33a7c:	429c      	cmp	r4, r3
   33a7e:	d1ee      	bne.n	33a5e <_fflush_r+0x26>
   33a80:	68ec      	ldr	r4, [r5, #12]
   33a82:	e7ec      	b.n	33a5e <_fflush_r+0x26>
   33a84:	000385e8 	.word	0x000385e8
   33a88:	00038608 	.word	0x00038608
   33a8c:	000385c8 	.word	0x000385c8

00033a90 <_cleanup_r>:
   33a90:	b510      	push	{r4, lr}
   33a92:	4902      	ldr	r1, [pc, #8]	; (33a9c <_cleanup_r+0xc>)
   33a94:	f000 f8b2 	bl	33bfc <_fwalk_reent>
   33a98:	bd10      	pop	{r4, pc}
   33a9a:	46c0      	nop			; (mov r8, r8)
   33a9c:	00033a39 	.word	0x00033a39

00033aa0 <std.isra.0>:
   33aa0:	2300      	movs	r3, #0
   33aa2:	b510      	push	{r4, lr}
   33aa4:	0004      	movs	r4, r0
   33aa6:	6003      	str	r3, [r0, #0]
   33aa8:	6043      	str	r3, [r0, #4]
   33aaa:	6083      	str	r3, [r0, #8]
   33aac:	8181      	strh	r1, [r0, #12]
   33aae:	6643      	str	r3, [r0, #100]	; 0x64
   33ab0:	81c2      	strh	r2, [r0, #14]
   33ab2:	6103      	str	r3, [r0, #16]
   33ab4:	6143      	str	r3, [r0, #20]
   33ab6:	6183      	str	r3, [r0, #24]
   33ab8:	0019      	movs	r1, r3
   33aba:	2208      	movs	r2, #8
   33abc:	305c      	adds	r0, #92	; 0x5c
   33abe:	f7ff fb6e 	bl	3319e <memset>
   33ac2:	4b05      	ldr	r3, [pc, #20]	; (33ad8 <std.isra.0+0x38>)
   33ac4:	6224      	str	r4, [r4, #32]
   33ac6:	6263      	str	r3, [r4, #36]	; 0x24
   33ac8:	4b04      	ldr	r3, [pc, #16]	; (33adc <std.isra.0+0x3c>)
   33aca:	62a3      	str	r3, [r4, #40]	; 0x28
   33acc:	4b04      	ldr	r3, [pc, #16]	; (33ae0 <std.isra.0+0x40>)
   33ace:	62e3      	str	r3, [r4, #44]	; 0x2c
   33ad0:	4b04      	ldr	r3, [pc, #16]	; (33ae4 <std.isra.0+0x44>)
   33ad2:	6323      	str	r3, [r4, #48]	; 0x30
   33ad4:	bd10      	pop	{r4, pc}
   33ad6:	46c0      	nop			; (mov r8, r8)
   33ad8:	0003433d 	.word	0x0003433d
   33adc:	00034365 	.word	0x00034365
   33ae0:	0003439d 	.word	0x0003439d
   33ae4:	000343c9 	.word	0x000343c9

00033ae8 <__sfmoreglue>:
   33ae8:	b570      	push	{r4, r5, r6, lr}
   33aea:	2568      	movs	r5, #104	; 0x68
   33aec:	1e4a      	subs	r2, r1, #1
   33aee:	4355      	muls	r5, r2
   33af0:	000e      	movs	r6, r1
   33af2:	0029      	movs	r1, r5
   33af4:	3174      	adds	r1, #116	; 0x74
   33af6:	f7ff fba5 	bl	33244 <_malloc_r>
   33afa:	1e04      	subs	r4, r0, #0
   33afc:	d008      	beq.n	33b10 <__sfmoreglue+0x28>
   33afe:	2100      	movs	r1, #0
   33b00:	002a      	movs	r2, r5
   33b02:	6001      	str	r1, [r0, #0]
   33b04:	6046      	str	r6, [r0, #4]
   33b06:	300c      	adds	r0, #12
   33b08:	60a0      	str	r0, [r4, #8]
   33b0a:	3268      	adds	r2, #104	; 0x68
   33b0c:	f7ff fb47 	bl	3319e <memset>
   33b10:	0020      	movs	r0, r4
   33b12:	bd70      	pop	{r4, r5, r6, pc}

00033b14 <__sinit>:
   33b14:	6983      	ldr	r3, [r0, #24]
   33b16:	b513      	push	{r0, r1, r4, lr}
   33b18:	0004      	movs	r4, r0
   33b1a:	2b00      	cmp	r3, #0
   33b1c:	d128      	bne.n	33b70 <__sinit+0x5c>
   33b1e:	6483      	str	r3, [r0, #72]	; 0x48
   33b20:	64c3      	str	r3, [r0, #76]	; 0x4c
   33b22:	6503      	str	r3, [r0, #80]	; 0x50
   33b24:	4b13      	ldr	r3, [pc, #76]	; (33b74 <__sinit+0x60>)
   33b26:	4a14      	ldr	r2, [pc, #80]	; (33b78 <__sinit+0x64>)
   33b28:	681b      	ldr	r3, [r3, #0]
   33b2a:	6282      	str	r2, [r0, #40]	; 0x28
   33b2c:	9301      	str	r3, [sp, #4]
   33b2e:	4298      	cmp	r0, r3
   33b30:	d101      	bne.n	33b36 <__sinit+0x22>
   33b32:	2301      	movs	r3, #1
   33b34:	6183      	str	r3, [r0, #24]
   33b36:	0020      	movs	r0, r4
   33b38:	f000 f820 	bl	33b7c <__sfp>
   33b3c:	6060      	str	r0, [r4, #4]
   33b3e:	0020      	movs	r0, r4
   33b40:	f000 f81c 	bl	33b7c <__sfp>
   33b44:	60a0      	str	r0, [r4, #8]
   33b46:	0020      	movs	r0, r4
   33b48:	f000 f818 	bl	33b7c <__sfp>
   33b4c:	2200      	movs	r2, #0
   33b4e:	60e0      	str	r0, [r4, #12]
   33b50:	2104      	movs	r1, #4
   33b52:	6860      	ldr	r0, [r4, #4]
   33b54:	f7ff ffa4 	bl	33aa0 <std.isra.0>
   33b58:	2201      	movs	r2, #1
   33b5a:	2109      	movs	r1, #9
   33b5c:	68a0      	ldr	r0, [r4, #8]
   33b5e:	f7ff ff9f 	bl	33aa0 <std.isra.0>
   33b62:	2202      	movs	r2, #2
   33b64:	2112      	movs	r1, #18
   33b66:	68e0      	ldr	r0, [r4, #12]
   33b68:	f7ff ff9a 	bl	33aa0 <std.isra.0>
   33b6c:	2301      	movs	r3, #1
   33b6e:	61a3      	str	r3, [r4, #24]
   33b70:	bd13      	pop	{r0, r1, r4, pc}
   33b72:	46c0      	nop			; (mov r8, r8)
   33b74:	000385c4 	.word	0x000385c4
   33b78:	00033a91 	.word	0x00033a91

00033b7c <__sfp>:
   33b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33b7e:	4b1e      	ldr	r3, [pc, #120]	; (33bf8 <__sfp+0x7c>)
   33b80:	0007      	movs	r7, r0
   33b82:	681e      	ldr	r6, [r3, #0]
   33b84:	69b3      	ldr	r3, [r6, #24]
   33b86:	2b00      	cmp	r3, #0
   33b88:	d102      	bne.n	33b90 <__sfp+0x14>
   33b8a:	0030      	movs	r0, r6
   33b8c:	f7ff ffc2 	bl	33b14 <__sinit>
   33b90:	3648      	adds	r6, #72	; 0x48
   33b92:	68b4      	ldr	r4, [r6, #8]
   33b94:	6873      	ldr	r3, [r6, #4]
   33b96:	3b01      	subs	r3, #1
   33b98:	d504      	bpl.n	33ba4 <__sfp+0x28>
   33b9a:	6833      	ldr	r3, [r6, #0]
   33b9c:	2b00      	cmp	r3, #0
   33b9e:	d007      	beq.n	33bb0 <__sfp+0x34>
   33ba0:	6836      	ldr	r6, [r6, #0]
   33ba2:	e7f6      	b.n	33b92 <__sfp+0x16>
   33ba4:	220c      	movs	r2, #12
   33ba6:	5ea5      	ldrsh	r5, [r4, r2]
   33ba8:	2d00      	cmp	r5, #0
   33baa:	d00d      	beq.n	33bc8 <__sfp+0x4c>
   33bac:	3468      	adds	r4, #104	; 0x68
   33bae:	e7f2      	b.n	33b96 <__sfp+0x1a>
   33bb0:	2104      	movs	r1, #4
   33bb2:	0038      	movs	r0, r7
   33bb4:	f7ff ff98 	bl	33ae8 <__sfmoreglue>
   33bb8:	6030      	str	r0, [r6, #0]
   33bba:	2800      	cmp	r0, #0
   33bbc:	d1f0      	bne.n	33ba0 <__sfp+0x24>
   33bbe:	230c      	movs	r3, #12
   33bc0:	0004      	movs	r4, r0
   33bc2:	603b      	str	r3, [r7, #0]
   33bc4:	0020      	movs	r0, r4
   33bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33bc8:	2301      	movs	r3, #1
   33bca:	0020      	movs	r0, r4
   33bcc:	425b      	negs	r3, r3
   33bce:	81e3      	strh	r3, [r4, #14]
   33bd0:	3302      	adds	r3, #2
   33bd2:	81a3      	strh	r3, [r4, #12]
   33bd4:	6665      	str	r5, [r4, #100]	; 0x64
   33bd6:	6025      	str	r5, [r4, #0]
   33bd8:	60a5      	str	r5, [r4, #8]
   33bda:	6065      	str	r5, [r4, #4]
   33bdc:	6125      	str	r5, [r4, #16]
   33bde:	6165      	str	r5, [r4, #20]
   33be0:	61a5      	str	r5, [r4, #24]
   33be2:	2208      	movs	r2, #8
   33be4:	0029      	movs	r1, r5
   33be6:	305c      	adds	r0, #92	; 0x5c
   33be8:	f7ff fad9 	bl	3319e <memset>
   33bec:	6365      	str	r5, [r4, #52]	; 0x34
   33bee:	63a5      	str	r5, [r4, #56]	; 0x38
   33bf0:	64a5      	str	r5, [r4, #72]	; 0x48
   33bf2:	64e5      	str	r5, [r4, #76]	; 0x4c
   33bf4:	e7e6      	b.n	33bc4 <__sfp+0x48>
   33bf6:	46c0      	nop			; (mov r8, r8)
   33bf8:	000385c4 	.word	0x000385c4

00033bfc <_fwalk_reent>:
   33bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33bfe:	0004      	movs	r4, r0
   33c00:	0007      	movs	r7, r0
   33c02:	2600      	movs	r6, #0
   33c04:	9101      	str	r1, [sp, #4]
   33c06:	3448      	adds	r4, #72	; 0x48
   33c08:	2c00      	cmp	r4, #0
   33c0a:	d101      	bne.n	33c10 <_fwalk_reent+0x14>
   33c0c:	0030      	movs	r0, r6
   33c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   33c10:	6863      	ldr	r3, [r4, #4]
   33c12:	68a5      	ldr	r5, [r4, #8]
   33c14:	9300      	str	r3, [sp, #0]
   33c16:	9b00      	ldr	r3, [sp, #0]
   33c18:	3b01      	subs	r3, #1
   33c1a:	9300      	str	r3, [sp, #0]
   33c1c:	d501      	bpl.n	33c22 <_fwalk_reent+0x26>
   33c1e:	6824      	ldr	r4, [r4, #0]
   33c20:	e7f2      	b.n	33c08 <_fwalk_reent+0xc>
   33c22:	89ab      	ldrh	r3, [r5, #12]
   33c24:	2b01      	cmp	r3, #1
   33c26:	d908      	bls.n	33c3a <_fwalk_reent+0x3e>
   33c28:	220e      	movs	r2, #14
   33c2a:	5eab      	ldrsh	r3, [r5, r2]
   33c2c:	3301      	adds	r3, #1
   33c2e:	d004      	beq.n	33c3a <_fwalk_reent+0x3e>
   33c30:	0029      	movs	r1, r5
   33c32:	0038      	movs	r0, r7
   33c34:	9b01      	ldr	r3, [sp, #4]
   33c36:	4798      	blx	r3
   33c38:	4306      	orrs	r6, r0
   33c3a:	3568      	adds	r5, #104	; 0x68
   33c3c:	e7eb      	b.n	33c16 <_fwalk_reent+0x1a>

00033c3e <__locale_ctype_ptr_l>:
   33c3e:	30ec      	adds	r0, #236	; 0xec
   33c40:	6800      	ldr	r0, [r0, #0]
   33c42:	4770      	bx	lr

00033c44 <__locale_ctype_ptr>:
   33c44:	4b04      	ldr	r3, [pc, #16]	; (33c58 <__locale_ctype_ptr+0x14>)
   33c46:	681b      	ldr	r3, [r3, #0]
   33c48:	6a1b      	ldr	r3, [r3, #32]
   33c4a:	2b00      	cmp	r3, #0
   33c4c:	d100      	bne.n	33c50 <__locale_ctype_ptr+0xc>
   33c4e:	4b03      	ldr	r3, [pc, #12]	; (33c5c <__locale_ctype_ptr+0x18>)
   33c50:	33ec      	adds	r3, #236	; 0xec
   33c52:	6818      	ldr	r0, [r3, #0]
   33c54:	4770      	bx	lr
   33c56:	46c0      	nop			; (mov r8, r8)
   33c58:	20000130 	.word	0x20000130
   33c5c:	20000194 	.word	0x20000194

00033c60 <__swhatbuf_r>:
   33c60:	b570      	push	{r4, r5, r6, lr}
   33c62:	000e      	movs	r6, r1
   33c64:	001d      	movs	r5, r3
   33c66:	230e      	movs	r3, #14
   33c68:	5ec9      	ldrsh	r1, [r1, r3]
   33c6a:	b090      	sub	sp, #64	; 0x40
   33c6c:	0014      	movs	r4, r2
   33c6e:	2900      	cmp	r1, #0
   33c70:	da07      	bge.n	33c82 <__swhatbuf_r+0x22>
   33c72:	2300      	movs	r3, #0
   33c74:	602b      	str	r3, [r5, #0]
   33c76:	89b3      	ldrh	r3, [r6, #12]
   33c78:	061b      	lsls	r3, r3, #24
   33c7a:	d411      	bmi.n	33ca0 <__swhatbuf_r+0x40>
   33c7c:	2380      	movs	r3, #128	; 0x80
   33c7e:	00db      	lsls	r3, r3, #3
   33c80:	e00f      	b.n	33ca2 <__swhatbuf_r+0x42>
   33c82:	aa01      	add	r2, sp, #4
   33c84:	f000 fbe6 	bl	34454 <_fstat_r>
   33c88:	2800      	cmp	r0, #0
   33c8a:	dbf2      	blt.n	33c72 <__swhatbuf_r+0x12>
   33c8c:	22f0      	movs	r2, #240	; 0xf0
   33c8e:	9b02      	ldr	r3, [sp, #8]
   33c90:	0212      	lsls	r2, r2, #8
   33c92:	4013      	ands	r3, r2
   33c94:	4a05      	ldr	r2, [pc, #20]	; (33cac <__swhatbuf_r+0x4c>)
   33c96:	189b      	adds	r3, r3, r2
   33c98:	425a      	negs	r2, r3
   33c9a:	4153      	adcs	r3, r2
   33c9c:	602b      	str	r3, [r5, #0]
   33c9e:	e7ed      	b.n	33c7c <__swhatbuf_r+0x1c>
   33ca0:	2340      	movs	r3, #64	; 0x40
   33ca2:	2000      	movs	r0, #0
   33ca4:	6023      	str	r3, [r4, #0]
   33ca6:	b010      	add	sp, #64	; 0x40
   33ca8:	bd70      	pop	{r4, r5, r6, pc}
   33caa:	46c0      	nop			; (mov r8, r8)
   33cac:	ffffe000 	.word	0xffffe000

00033cb0 <__smakebuf_r>:
   33cb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   33cb2:	2602      	movs	r6, #2
   33cb4:	898b      	ldrh	r3, [r1, #12]
   33cb6:	0005      	movs	r5, r0
   33cb8:	000c      	movs	r4, r1
   33cba:	4233      	tst	r3, r6
   33cbc:	d006      	beq.n	33ccc <__smakebuf_r+0x1c>
   33cbe:	0023      	movs	r3, r4
   33cc0:	3347      	adds	r3, #71	; 0x47
   33cc2:	6023      	str	r3, [r4, #0]
   33cc4:	6123      	str	r3, [r4, #16]
   33cc6:	2301      	movs	r3, #1
   33cc8:	6163      	str	r3, [r4, #20]
   33cca:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   33ccc:	ab01      	add	r3, sp, #4
   33cce:	466a      	mov	r2, sp
   33cd0:	f7ff ffc6 	bl	33c60 <__swhatbuf_r>
   33cd4:	9900      	ldr	r1, [sp, #0]
   33cd6:	0007      	movs	r7, r0
   33cd8:	0028      	movs	r0, r5
   33cda:	f7ff fab3 	bl	33244 <_malloc_r>
   33cde:	2800      	cmp	r0, #0
   33ce0:	d108      	bne.n	33cf4 <__smakebuf_r+0x44>
   33ce2:	220c      	movs	r2, #12
   33ce4:	5ea3      	ldrsh	r3, [r4, r2]
   33ce6:	059a      	lsls	r2, r3, #22
   33ce8:	d4ef      	bmi.n	33cca <__smakebuf_r+0x1a>
   33cea:	2203      	movs	r2, #3
   33cec:	4393      	bics	r3, r2
   33cee:	431e      	orrs	r6, r3
   33cf0:	81a6      	strh	r6, [r4, #12]
   33cf2:	e7e4      	b.n	33cbe <__smakebuf_r+0xe>
   33cf4:	4b0f      	ldr	r3, [pc, #60]	; (33d34 <__smakebuf_r+0x84>)
   33cf6:	62ab      	str	r3, [r5, #40]	; 0x28
   33cf8:	2380      	movs	r3, #128	; 0x80
   33cfa:	89a2      	ldrh	r2, [r4, #12]
   33cfc:	6020      	str	r0, [r4, #0]
   33cfe:	4313      	orrs	r3, r2
   33d00:	81a3      	strh	r3, [r4, #12]
   33d02:	9b00      	ldr	r3, [sp, #0]
   33d04:	6120      	str	r0, [r4, #16]
   33d06:	6163      	str	r3, [r4, #20]
   33d08:	9b01      	ldr	r3, [sp, #4]
   33d0a:	2b00      	cmp	r3, #0
   33d0c:	d00d      	beq.n	33d2a <__smakebuf_r+0x7a>
   33d0e:	230e      	movs	r3, #14
   33d10:	5ee1      	ldrsh	r1, [r4, r3]
   33d12:	0028      	movs	r0, r5
   33d14:	f000 fbb0 	bl	34478 <_isatty_r>
   33d18:	2800      	cmp	r0, #0
   33d1a:	d006      	beq.n	33d2a <__smakebuf_r+0x7a>
   33d1c:	2203      	movs	r2, #3
   33d1e:	89a3      	ldrh	r3, [r4, #12]
   33d20:	4393      	bics	r3, r2
   33d22:	001a      	movs	r2, r3
   33d24:	2301      	movs	r3, #1
   33d26:	4313      	orrs	r3, r2
   33d28:	81a3      	strh	r3, [r4, #12]
   33d2a:	89a0      	ldrh	r0, [r4, #12]
   33d2c:	4338      	orrs	r0, r7
   33d2e:	81a0      	strh	r0, [r4, #12]
   33d30:	e7cb      	b.n	33cca <__smakebuf_r+0x1a>
   33d32:	46c0      	nop			; (mov r8, r8)
   33d34:	00033a91 	.word	0x00033a91

00033d38 <__ascii_mbtowc>:
   33d38:	b082      	sub	sp, #8
   33d3a:	2900      	cmp	r1, #0
   33d3c:	d100      	bne.n	33d40 <__ascii_mbtowc+0x8>
   33d3e:	a901      	add	r1, sp, #4
   33d40:	1e10      	subs	r0, r2, #0
   33d42:	d006      	beq.n	33d52 <__ascii_mbtowc+0x1a>
   33d44:	2b00      	cmp	r3, #0
   33d46:	d006      	beq.n	33d56 <__ascii_mbtowc+0x1e>
   33d48:	7813      	ldrb	r3, [r2, #0]
   33d4a:	600b      	str	r3, [r1, #0]
   33d4c:	7810      	ldrb	r0, [r2, #0]
   33d4e:	1e43      	subs	r3, r0, #1
   33d50:	4198      	sbcs	r0, r3
   33d52:	b002      	add	sp, #8
   33d54:	4770      	bx	lr
   33d56:	2002      	movs	r0, #2
   33d58:	4240      	negs	r0, r0
   33d5a:	e7fa      	b.n	33d52 <__ascii_mbtowc+0x1a>

00033d5c <__malloc_lock>:
   33d5c:	4770      	bx	lr

00033d5e <__malloc_unlock>:
   33d5e:	4770      	bx	lr

00033d60 <__ssputs_r>:
   33d60:	b5f0      	push	{r4, r5, r6, r7, lr}
   33d62:	688e      	ldr	r6, [r1, #8]
   33d64:	b085      	sub	sp, #20
   33d66:	0007      	movs	r7, r0
   33d68:	000c      	movs	r4, r1
   33d6a:	9203      	str	r2, [sp, #12]
   33d6c:	9301      	str	r3, [sp, #4]
   33d6e:	429e      	cmp	r6, r3
   33d70:	d839      	bhi.n	33de6 <__ssputs_r+0x86>
   33d72:	2390      	movs	r3, #144	; 0x90
   33d74:	898a      	ldrh	r2, [r1, #12]
   33d76:	00db      	lsls	r3, r3, #3
   33d78:	421a      	tst	r2, r3
   33d7a:	d034      	beq.n	33de6 <__ssputs_r+0x86>
   33d7c:	2503      	movs	r5, #3
   33d7e:	6909      	ldr	r1, [r1, #16]
   33d80:	6823      	ldr	r3, [r4, #0]
   33d82:	1a5b      	subs	r3, r3, r1
   33d84:	9302      	str	r3, [sp, #8]
   33d86:	6963      	ldr	r3, [r4, #20]
   33d88:	9802      	ldr	r0, [sp, #8]
   33d8a:	435d      	muls	r5, r3
   33d8c:	0feb      	lsrs	r3, r5, #31
   33d8e:	195d      	adds	r5, r3, r5
   33d90:	9b01      	ldr	r3, [sp, #4]
   33d92:	106d      	asrs	r5, r5, #1
   33d94:	3301      	adds	r3, #1
   33d96:	181b      	adds	r3, r3, r0
   33d98:	42ab      	cmp	r3, r5
   33d9a:	d900      	bls.n	33d9e <__ssputs_r+0x3e>
   33d9c:	001d      	movs	r5, r3
   33d9e:	0553      	lsls	r3, r2, #21
   33da0:	d532      	bpl.n	33e08 <__ssputs_r+0xa8>
   33da2:	0029      	movs	r1, r5
   33da4:	0038      	movs	r0, r7
   33da6:	f7ff fa4d 	bl	33244 <_malloc_r>
   33daa:	1e06      	subs	r6, r0, #0
   33dac:	d109      	bne.n	33dc2 <__ssputs_r+0x62>
   33dae:	230c      	movs	r3, #12
   33db0:	603b      	str	r3, [r7, #0]
   33db2:	2340      	movs	r3, #64	; 0x40
   33db4:	2001      	movs	r0, #1
   33db6:	89a2      	ldrh	r2, [r4, #12]
   33db8:	4240      	negs	r0, r0
   33dba:	4313      	orrs	r3, r2
   33dbc:	81a3      	strh	r3, [r4, #12]
   33dbe:	b005      	add	sp, #20
   33dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33dc2:	9a02      	ldr	r2, [sp, #8]
   33dc4:	6921      	ldr	r1, [r4, #16]
   33dc6:	f7ff f9cf 	bl	33168 <memcpy>
   33dca:	89a3      	ldrh	r3, [r4, #12]
   33dcc:	4a14      	ldr	r2, [pc, #80]	; (33e20 <__ssputs_r+0xc0>)
   33dce:	401a      	ands	r2, r3
   33dd0:	2380      	movs	r3, #128	; 0x80
   33dd2:	4313      	orrs	r3, r2
   33dd4:	81a3      	strh	r3, [r4, #12]
   33dd6:	9b02      	ldr	r3, [sp, #8]
   33dd8:	6126      	str	r6, [r4, #16]
   33dda:	18f6      	adds	r6, r6, r3
   33ddc:	6026      	str	r6, [r4, #0]
   33dde:	6165      	str	r5, [r4, #20]
   33de0:	9e01      	ldr	r6, [sp, #4]
   33de2:	1aed      	subs	r5, r5, r3
   33de4:	60a5      	str	r5, [r4, #8]
   33de6:	9b01      	ldr	r3, [sp, #4]
   33de8:	42b3      	cmp	r3, r6
   33dea:	d200      	bcs.n	33dee <__ssputs_r+0x8e>
   33dec:	001e      	movs	r6, r3
   33dee:	0032      	movs	r2, r6
   33df0:	9903      	ldr	r1, [sp, #12]
   33df2:	6820      	ldr	r0, [r4, #0]
   33df4:	f7ff f9c1 	bl	3317a <memmove>
   33df8:	68a3      	ldr	r3, [r4, #8]
   33dfa:	2000      	movs	r0, #0
   33dfc:	1b9b      	subs	r3, r3, r6
   33dfe:	60a3      	str	r3, [r4, #8]
   33e00:	6823      	ldr	r3, [r4, #0]
   33e02:	199e      	adds	r6, r3, r6
   33e04:	6026      	str	r6, [r4, #0]
   33e06:	e7da      	b.n	33dbe <__ssputs_r+0x5e>
   33e08:	002a      	movs	r2, r5
   33e0a:	0038      	movs	r0, r7
   33e0c:	f000 fb65 	bl	344da <_realloc_r>
   33e10:	1e06      	subs	r6, r0, #0
   33e12:	d1e0      	bne.n	33dd6 <__ssputs_r+0x76>
   33e14:	6921      	ldr	r1, [r4, #16]
   33e16:	0038      	movs	r0, r7
   33e18:	f7ff f9ca 	bl	331b0 <_free_r>
   33e1c:	e7c7      	b.n	33dae <__ssputs_r+0x4e>
   33e1e:	46c0      	nop			; (mov r8, r8)
   33e20:	fffffb7f 	.word	0xfffffb7f

00033e24 <_svfiprintf_r>:
   33e24:	b5f0      	push	{r4, r5, r6, r7, lr}
   33e26:	b09f      	sub	sp, #124	; 0x7c
   33e28:	9002      	str	r0, [sp, #8]
   33e2a:	9305      	str	r3, [sp, #20]
   33e2c:	898b      	ldrh	r3, [r1, #12]
   33e2e:	000f      	movs	r7, r1
   33e30:	0016      	movs	r6, r2
   33e32:	061b      	lsls	r3, r3, #24
   33e34:	d511      	bpl.n	33e5a <_svfiprintf_r+0x36>
   33e36:	690b      	ldr	r3, [r1, #16]
   33e38:	2b00      	cmp	r3, #0
   33e3a:	d10e      	bne.n	33e5a <_svfiprintf_r+0x36>
   33e3c:	2140      	movs	r1, #64	; 0x40
   33e3e:	f7ff fa01 	bl	33244 <_malloc_r>
   33e42:	6038      	str	r0, [r7, #0]
   33e44:	6138      	str	r0, [r7, #16]
   33e46:	2800      	cmp	r0, #0
   33e48:	d105      	bne.n	33e56 <_svfiprintf_r+0x32>
   33e4a:	230c      	movs	r3, #12
   33e4c:	9a02      	ldr	r2, [sp, #8]
   33e4e:	3801      	subs	r0, #1
   33e50:	6013      	str	r3, [r2, #0]
   33e52:	b01f      	add	sp, #124	; 0x7c
   33e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
   33e56:	2340      	movs	r3, #64	; 0x40
   33e58:	617b      	str	r3, [r7, #20]
   33e5a:	2300      	movs	r3, #0
   33e5c:	ad06      	add	r5, sp, #24
   33e5e:	616b      	str	r3, [r5, #20]
   33e60:	3320      	adds	r3, #32
   33e62:	766b      	strb	r3, [r5, #25]
   33e64:	3310      	adds	r3, #16
   33e66:	76ab      	strb	r3, [r5, #26]
   33e68:	0034      	movs	r4, r6
   33e6a:	7823      	ldrb	r3, [r4, #0]
   33e6c:	2b00      	cmp	r3, #0
   33e6e:	d147      	bne.n	33f00 <_svfiprintf_r+0xdc>
   33e70:	1ba3      	subs	r3, r4, r6
   33e72:	9304      	str	r3, [sp, #16]
   33e74:	d00d      	beq.n	33e92 <_svfiprintf_r+0x6e>
   33e76:	1ba3      	subs	r3, r4, r6
   33e78:	0032      	movs	r2, r6
   33e7a:	0039      	movs	r1, r7
   33e7c:	9802      	ldr	r0, [sp, #8]
   33e7e:	f7ff ff6f 	bl	33d60 <__ssputs_r>
   33e82:	1c43      	adds	r3, r0, #1
   33e84:	d100      	bne.n	33e88 <_svfiprintf_r+0x64>
   33e86:	e0b5      	b.n	33ff4 <_svfiprintf_r+0x1d0>
   33e88:	696a      	ldr	r2, [r5, #20]
   33e8a:	9b04      	ldr	r3, [sp, #16]
   33e8c:	4694      	mov	ip, r2
   33e8e:	4463      	add	r3, ip
   33e90:	616b      	str	r3, [r5, #20]
   33e92:	7823      	ldrb	r3, [r4, #0]
   33e94:	2b00      	cmp	r3, #0
   33e96:	d100      	bne.n	33e9a <_svfiprintf_r+0x76>
   33e98:	e0ac      	b.n	33ff4 <_svfiprintf_r+0x1d0>
   33e9a:	2201      	movs	r2, #1
   33e9c:	2300      	movs	r3, #0
   33e9e:	4252      	negs	r2, r2
   33ea0:	606a      	str	r2, [r5, #4]
   33ea2:	a902      	add	r1, sp, #8
   33ea4:	3254      	adds	r2, #84	; 0x54
   33ea6:	1852      	adds	r2, r2, r1
   33ea8:	3401      	adds	r4, #1
   33eaa:	602b      	str	r3, [r5, #0]
   33eac:	60eb      	str	r3, [r5, #12]
   33eae:	60ab      	str	r3, [r5, #8]
   33eb0:	7013      	strb	r3, [r2, #0]
   33eb2:	65ab      	str	r3, [r5, #88]	; 0x58
   33eb4:	4e58      	ldr	r6, [pc, #352]	; (34018 <_svfiprintf_r+0x1f4>)
   33eb6:	2205      	movs	r2, #5
   33eb8:	7821      	ldrb	r1, [r4, #0]
   33eba:	0030      	movs	r0, r6
   33ebc:	f000 fb02 	bl	344c4 <memchr>
   33ec0:	1c62      	adds	r2, r4, #1
   33ec2:	2800      	cmp	r0, #0
   33ec4:	d120      	bne.n	33f08 <_svfiprintf_r+0xe4>
   33ec6:	6829      	ldr	r1, [r5, #0]
   33ec8:	06cb      	lsls	r3, r1, #27
   33eca:	d504      	bpl.n	33ed6 <_svfiprintf_r+0xb2>
   33ecc:	2353      	movs	r3, #83	; 0x53
   33ece:	ae02      	add	r6, sp, #8
   33ed0:	3020      	adds	r0, #32
   33ed2:	199b      	adds	r3, r3, r6
   33ed4:	7018      	strb	r0, [r3, #0]
   33ed6:	070b      	lsls	r3, r1, #28
   33ed8:	d504      	bpl.n	33ee4 <_svfiprintf_r+0xc0>
   33eda:	2353      	movs	r3, #83	; 0x53
   33edc:	202b      	movs	r0, #43	; 0x2b
   33ede:	ae02      	add	r6, sp, #8
   33ee0:	199b      	adds	r3, r3, r6
   33ee2:	7018      	strb	r0, [r3, #0]
   33ee4:	7823      	ldrb	r3, [r4, #0]
   33ee6:	2b2a      	cmp	r3, #42	; 0x2a
   33ee8:	d016      	beq.n	33f18 <_svfiprintf_r+0xf4>
   33eea:	2000      	movs	r0, #0
   33eec:	210a      	movs	r1, #10
   33eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   33ef0:	7822      	ldrb	r2, [r4, #0]
   33ef2:	3a30      	subs	r2, #48	; 0x30
   33ef4:	2a09      	cmp	r2, #9
   33ef6:	d955      	bls.n	33fa4 <_svfiprintf_r+0x180>
   33ef8:	2800      	cmp	r0, #0
   33efa:	d015      	beq.n	33f28 <_svfiprintf_r+0x104>
   33efc:	9309      	str	r3, [sp, #36]	; 0x24
   33efe:	e013      	b.n	33f28 <_svfiprintf_r+0x104>
   33f00:	2b25      	cmp	r3, #37	; 0x25
   33f02:	d0b5      	beq.n	33e70 <_svfiprintf_r+0x4c>
   33f04:	3401      	adds	r4, #1
   33f06:	e7b0      	b.n	33e6a <_svfiprintf_r+0x46>
   33f08:	2301      	movs	r3, #1
   33f0a:	1b80      	subs	r0, r0, r6
   33f0c:	4083      	lsls	r3, r0
   33f0e:	6829      	ldr	r1, [r5, #0]
   33f10:	0014      	movs	r4, r2
   33f12:	430b      	orrs	r3, r1
   33f14:	602b      	str	r3, [r5, #0]
   33f16:	e7cd      	b.n	33eb4 <_svfiprintf_r+0x90>
   33f18:	9b05      	ldr	r3, [sp, #20]
   33f1a:	1d18      	adds	r0, r3, #4
   33f1c:	681b      	ldr	r3, [r3, #0]
   33f1e:	9005      	str	r0, [sp, #20]
   33f20:	2b00      	cmp	r3, #0
   33f22:	db39      	blt.n	33f98 <_svfiprintf_r+0x174>
   33f24:	9309      	str	r3, [sp, #36]	; 0x24
   33f26:	0014      	movs	r4, r2
   33f28:	7823      	ldrb	r3, [r4, #0]
   33f2a:	2b2e      	cmp	r3, #46	; 0x2e
   33f2c:	d10b      	bne.n	33f46 <_svfiprintf_r+0x122>
   33f2e:	7863      	ldrb	r3, [r4, #1]
   33f30:	1c62      	adds	r2, r4, #1
   33f32:	2b2a      	cmp	r3, #42	; 0x2a
   33f34:	d13e      	bne.n	33fb4 <_svfiprintf_r+0x190>
   33f36:	9b05      	ldr	r3, [sp, #20]
   33f38:	3402      	adds	r4, #2
   33f3a:	1d1a      	adds	r2, r3, #4
   33f3c:	681b      	ldr	r3, [r3, #0]
   33f3e:	9205      	str	r2, [sp, #20]
   33f40:	2b00      	cmp	r3, #0
   33f42:	db34      	blt.n	33fae <_svfiprintf_r+0x18a>
   33f44:	9307      	str	r3, [sp, #28]
   33f46:	4e35      	ldr	r6, [pc, #212]	; (3401c <_svfiprintf_r+0x1f8>)
   33f48:	7821      	ldrb	r1, [r4, #0]
   33f4a:	2203      	movs	r2, #3
   33f4c:	0030      	movs	r0, r6
   33f4e:	f000 fab9 	bl	344c4 <memchr>
   33f52:	2800      	cmp	r0, #0
   33f54:	d006      	beq.n	33f64 <_svfiprintf_r+0x140>
   33f56:	2340      	movs	r3, #64	; 0x40
   33f58:	1b80      	subs	r0, r0, r6
   33f5a:	4083      	lsls	r3, r0
   33f5c:	682a      	ldr	r2, [r5, #0]
   33f5e:	3401      	adds	r4, #1
   33f60:	4313      	orrs	r3, r2
   33f62:	602b      	str	r3, [r5, #0]
   33f64:	7821      	ldrb	r1, [r4, #0]
   33f66:	2206      	movs	r2, #6
   33f68:	482d      	ldr	r0, [pc, #180]	; (34020 <_svfiprintf_r+0x1fc>)
   33f6a:	1c66      	adds	r6, r4, #1
   33f6c:	7629      	strb	r1, [r5, #24]
   33f6e:	f000 faa9 	bl	344c4 <memchr>
   33f72:	2800      	cmp	r0, #0
   33f74:	d046      	beq.n	34004 <_svfiprintf_r+0x1e0>
   33f76:	4b2b      	ldr	r3, [pc, #172]	; (34024 <_svfiprintf_r+0x200>)
   33f78:	2b00      	cmp	r3, #0
   33f7a:	d12f      	bne.n	33fdc <_svfiprintf_r+0x1b8>
   33f7c:	6829      	ldr	r1, [r5, #0]
   33f7e:	9b05      	ldr	r3, [sp, #20]
   33f80:	2207      	movs	r2, #7
   33f82:	05c9      	lsls	r1, r1, #23
   33f84:	d528      	bpl.n	33fd8 <_svfiprintf_r+0x1b4>
   33f86:	189b      	adds	r3, r3, r2
   33f88:	4393      	bics	r3, r2
   33f8a:	3308      	adds	r3, #8
   33f8c:	9305      	str	r3, [sp, #20]
   33f8e:	696b      	ldr	r3, [r5, #20]
   33f90:	9a03      	ldr	r2, [sp, #12]
   33f92:	189b      	adds	r3, r3, r2
   33f94:	616b      	str	r3, [r5, #20]
   33f96:	e767      	b.n	33e68 <_svfiprintf_r+0x44>
   33f98:	425b      	negs	r3, r3
   33f9a:	60eb      	str	r3, [r5, #12]
   33f9c:	2302      	movs	r3, #2
   33f9e:	430b      	orrs	r3, r1
   33fa0:	602b      	str	r3, [r5, #0]
   33fa2:	e7c0      	b.n	33f26 <_svfiprintf_r+0x102>
   33fa4:	434b      	muls	r3, r1
   33fa6:	3401      	adds	r4, #1
   33fa8:	189b      	adds	r3, r3, r2
   33faa:	2001      	movs	r0, #1
   33fac:	e7a0      	b.n	33ef0 <_svfiprintf_r+0xcc>
   33fae:	2301      	movs	r3, #1
   33fb0:	425b      	negs	r3, r3
   33fb2:	e7c7      	b.n	33f44 <_svfiprintf_r+0x120>
   33fb4:	2300      	movs	r3, #0
   33fb6:	0014      	movs	r4, r2
   33fb8:	200a      	movs	r0, #10
   33fba:	001a      	movs	r2, r3
   33fbc:	606b      	str	r3, [r5, #4]
   33fbe:	7821      	ldrb	r1, [r4, #0]
   33fc0:	3930      	subs	r1, #48	; 0x30
   33fc2:	2909      	cmp	r1, #9
   33fc4:	d903      	bls.n	33fce <_svfiprintf_r+0x1aa>
   33fc6:	2b00      	cmp	r3, #0
   33fc8:	d0bd      	beq.n	33f46 <_svfiprintf_r+0x122>
   33fca:	9207      	str	r2, [sp, #28]
   33fcc:	e7bb      	b.n	33f46 <_svfiprintf_r+0x122>
   33fce:	4342      	muls	r2, r0
   33fd0:	3401      	adds	r4, #1
   33fd2:	1852      	adds	r2, r2, r1
   33fd4:	2301      	movs	r3, #1
   33fd6:	e7f2      	b.n	33fbe <_svfiprintf_r+0x19a>
   33fd8:	3307      	adds	r3, #7
   33fda:	e7d5      	b.n	33f88 <_svfiprintf_r+0x164>
   33fdc:	ab05      	add	r3, sp, #20
   33fde:	9300      	str	r3, [sp, #0]
   33fe0:	003a      	movs	r2, r7
   33fe2:	4b11      	ldr	r3, [pc, #68]	; (34028 <_svfiprintf_r+0x204>)
   33fe4:	0029      	movs	r1, r5
   33fe6:	9802      	ldr	r0, [sp, #8]
   33fe8:	e000      	b.n	33fec <_svfiprintf_r+0x1c8>
   33fea:	bf00      	nop
   33fec:	9003      	str	r0, [sp, #12]
   33fee:	9b03      	ldr	r3, [sp, #12]
   33ff0:	3301      	adds	r3, #1
   33ff2:	d1cc      	bne.n	33f8e <_svfiprintf_r+0x16a>
   33ff4:	89bb      	ldrh	r3, [r7, #12]
   33ff6:	980b      	ldr	r0, [sp, #44]	; 0x2c
   33ff8:	065b      	lsls	r3, r3, #25
   33ffa:	d400      	bmi.n	33ffe <_svfiprintf_r+0x1da>
   33ffc:	e729      	b.n	33e52 <_svfiprintf_r+0x2e>
   33ffe:	2001      	movs	r0, #1
   34000:	4240      	negs	r0, r0
   34002:	e726      	b.n	33e52 <_svfiprintf_r+0x2e>
   34004:	ab05      	add	r3, sp, #20
   34006:	9300      	str	r3, [sp, #0]
   34008:	003a      	movs	r2, r7
   3400a:	4b07      	ldr	r3, [pc, #28]	; (34028 <_svfiprintf_r+0x204>)
   3400c:	0029      	movs	r1, r5
   3400e:	9802      	ldr	r0, [sp, #8]
   34010:	f000 f87a 	bl	34108 <_printf_i>
   34014:	e7ea      	b.n	33fec <_svfiprintf_r+0x1c8>
   34016:	46c0      	nop			; (mov r8, r8)
   34018:	00038632 	.word	0x00038632
   3401c:	00038638 	.word	0x00038638
   34020:	0003863c 	.word	0x0003863c
   34024:	00000000 	.word	0x00000000
   34028:	00033d61 	.word	0x00033d61

0003402c <_printf_common>:
   3402c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3402e:	0015      	movs	r5, r2
   34030:	9301      	str	r3, [sp, #4]
   34032:	688a      	ldr	r2, [r1, #8]
   34034:	690b      	ldr	r3, [r1, #16]
   34036:	9000      	str	r0, [sp, #0]
   34038:	000c      	movs	r4, r1
   3403a:	4293      	cmp	r3, r2
   3403c:	da00      	bge.n	34040 <_printf_common+0x14>
   3403e:	0013      	movs	r3, r2
   34040:	0022      	movs	r2, r4
   34042:	602b      	str	r3, [r5, #0]
   34044:	3243      	adds	r2, #67	; 0x43
   34046:	7812      	ldrb	r2, [r2, #0]
   34048:	2a00      	cmp	r2, #0
   3404a:	d001      	beq.n	34050 <_printf_common+0x24>
   3404c:	3301      	adds	r3, #1
   3404e:	602b      	str	r3, [r5, #0]
   34050:	6823      	ldr	r3, [r4, #0]
   34052:	069b      	lsls	r3, r3, #26
   34054:	d502      	bpl.n	3405c <_printf_common+0x30>
   34056:	682b      	ldr	r3, [r5, #0]
   34058:	3302      	adds	r3, #2
   3405a:	602b      	str	r3, [r5, #0]
   3405c:	2706      	movs	r7, #6
   3405e:	6823      	ldr	r3, [r4, #0]
   34060:	401f      	ands	r7, r3
   34062:	d027      	beq.n	340b4 <_printf_common+0x88>
   34064:	0023      	movs	r3, r4
   34066:	3343      	adds	r3, #67	; 0x43
   34068:	781b      	ldrb	r3, [r3, #0]
   3406a:	1e5a      	subs	r2, r3, #1
   3406c:	4193      	sbcs	r3, r2
   3406e:	6822      	ldr	r2, [r4, #0]
   34070:	0692      	lsls	r2, r2, #26
   34072:	d430      	bmi.n	340d6 <_printf_common+0xaa>
   34074:	0022      	movs	r2, r4
   34076:	9901      	ldr	r1, [sp, #4]
   34078:	3243      	adds	r2, #67	; 0x43
   3407a:	9800      	ldr	r0, [sp, #0]
   3407c:	9e08      	ldr	r6, [sp, #32]
   3407e:	47b0      	blx	r6
   34080:	1c43      	adds	r3, r0, #1
   34082:	d025      	beq.n	340d0 <_printf_common+0xa4>
   34084:	2306      	movs	r3, #6
   34086:	6820      	ldr	r0, [r4, #0]
   34088:	682a      	ldr	r2, [r5, #0]
   3408a:	68e1      	ldr	r1, [r4, #12]
   3408c:	4003      	ands	r3, r0
   3408e:	2500      	movs	r5, #0
   34090:	2b04      	cmp	r3, #4
   34092:	d103      	bne.n	3409c <_printf_common+0x70>
   34094:	1a8d      	subs	r5, r1, r2
   34096:	43eb      	mvns	r3, r5
   34098:	17db      	asrs	r3, r3, #31
   3409a:	401d      	ands	r5, r3
   3409c:	68a3      	ldr	r3, [r4, #8]
   3409e:	6922      	ldr	r2, [r4, #16]
   340a0:	4293      	cmp	r3, r2
   340a2:	dd01      	ble.n	340a8 <_printf_common+0x7c>
   340a4:	1a9b      	subs	r3, r3, r2
   340a6:	18ed      	adds	r5, r5, r3
   340a8:	2700      	movs	r7, #0
   340aa:	42bd      	cmp	r5, r7
   340ac:	d120      	bne.n	340f0 <_printf_common+0xc4>
   340ae:	2000      	movs	r0, #0
   340b0:	e010      	b.n	340d4 <_printf_common+0xa8>
   340b2:	3701      	adds	r7, #1
   340b4:	68e3      	ldr	r3, [r4, #12]
   340b6:	682a      	ldr	r2, [r5, #0]
   340b8:	1a9b      	subs	r3, r3, r2
   340ba:	429f      	cmp	r7, r3
   340bc:	dad2      	bge.n	34064 <_printf_common+0x38>
   340be:	0022      	movs	r2, r4
   340c0:	2301      	movs	r3, #1
   340c2:	3219      	adds	r2, #25
   340c4:	9901      	ldr	r1, [sp, #4]
   340c6:	9800      	ldr	r0, [sp, #0]
   340c8:	9e08      	ldr	r6, [sp, #32]
   340ca:	47b0      	blx	r6
   340cc:	1c43      	adds	r3, r0, #1
   340ce:	d1f0      	bne.n	340b2 <_printf_common+0x86>
   340d0:	2001      	movs	r0, #1
   340d2:	4240      	negs	r0, r0
   340d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   340d6:	2030      	movs	r0, #48	; 0x30
   340d8:	18e1      	adds	r1, r4, r3
   340da:	3143      	adds	r1, #67	; 0x43
   340dc:	7008      	strb	r0, [r1, #0]
   340de:	0021      	movs	r1, r4
   340e0:	1c5a      	adds	r2, r3, #1
   340e2:	3145      	adds	r1, #69	; 0x45
   340e4:	7809      	ldrb	r1, [r1, #0]
   340e6:	18a2      	adds	r2, r4, r2
   340e8:	3243      	adds	r2, #67	; 0x43
   340ea:	3302      	adds	r3, #2
   340ec:	7011      	strb	r1, [r2, #0]
   340ee:	e7c1      	b.n	34074 <_printf_common+0x48>
   340f0:	0022      	movs	r2, r4
   340f2:	2301      	movs	r3, #1
   340f4:	321a      	adds	r2, #26
   340f6:	9901      	ldr	r1, [sp, #4]
   340f8:	9800      	ldr	r0, [sp, #0]
   340fa:	9e08      	ldr	r6, [sp, #32]
   340fc:	47b0      	blx	r6
   340fe:	1c43      	adds	r3, r0, #1
   34100:	d0e6      	beq.n	340d0 <_printf_common+0xa4>
   34102:	3701      	adds	r7, #1
   34104:	e7d1      	b.n	340aa <_printf_common+0x7e>
	...

00034108 <_printf_i>:
   34108:	b5f0      	push	{r4, r5, r6, r7, lr}
   3410a:	b08b      	sub	sp, #44	; 0x2c
   3410c:	9206      	str	r2, [sp, #24]
   3410e:	000a      	movs	r2, r1
   34110:	3243      	adds	r2, #67	; 0x43
   34112:	9307      	str	r3, [sp, #28]
   34114:	9005      	str	r0, [sp, #20]
   34116:	9204      	str	r2, [sp, #16]
   34118:	7e0a      	ldrb	r2, [r1, #24]
   3411a:	000c      	movs	r4, r1
   3411c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3411e:	2a6e      	cmp	r2, #110	; 0x6e
   34120:	d100      	bne.n	34124 <_printf_i+0x1c>
   34122:	e08f      	b.n	34244 <_printf_i+0x13c>
   34124:	d817      	bhi.n	34156 <_printf_i+0x4e>
   34126:	2a63      	cmp	r2, #99	; 0x63
   34128:	d02c      	beq.n	34184 <_printf_i+0x7c>
   3412a:	d808      	bhi.n	3413e <_printf_i+0x36>
   3412c:	2a00      	cmp	r2, #0
   3412e:	d100      	bne.n	34132 <_printf_i+0x2a>
   34130:	e099      	b.n	34266 <_printf_i+0x15e>
   34132:	2a58      	cmp	r2, #88	; 0x58
   34134:	d054      	beq.n	341e0 <_printf_i+0xd8>
   34136:	0026      	movs	r6, r4
   34138:	3642      	adds	r6, #66	; 0x42
   3413a:	7032      	strb	r2, [r6, #0]
   3413c:	e029      	b.n	34192 <_printf_i+0x8a>
   3413e:	2a64      	cmp	r2, #100	; 0x64
   34140:	d001      	beq.n	34146 <_printf_i+0x3e>
   34142:	2a69      	cmp	r2, #105	; 0x69
   34144:	d1f7      	bne.n	34136 <_printf_i+0x2e>
   34146:	6821      	ldr	r1, [r4, #0]
   34148:	681a      	ldr	r2, [r3, #0]
   3414a:	0608      	lsls	r0, r1, #24
   3414c:	d523      	bpl.n	34196 <_printf_i+0x8e>
   3414e:	1d11      	adds	r1, r2, #4
   34150:	6019      	str	r1, [r3, #0]
   34152:	6815      	ldr	r5, [r2, #0]
   34154:	e025      	b.n	341a2 <_printf_i+0x9a>
   34156:	2a73      	cmp	r2, #115	; 0x73
   34158:	d100      	bne.n	3415c <_printf_i+0x54>
   3415a:	e088      	b.n	3426e <_printf_i+0x166>
   3415c:	d808      	bhi.n	34170 <_printf_i+0x68>
   3415e:	2a6f      	cmp	r2, #111	; 0x6f
   34160:	d029      	beq.n	341b6 <_printf_i+0xae>
   34162:	2a70      	cmp	r2, #112	; 0x70
   34164:	d1e7      	bne.n	34136 <_printf_i+0x2e>
   34166:	2220      	movs	r2, #32
   34168:	6809      	ldr	r1, [r1, #0]
   3416a:	430a      	orrs	r2, r1
   3416c:	6022      	str	r2, [r4, #0]
   3416e:	e003      	b.n	34178 <_printf_i+0x70>
   34170:	2a75      	cmp	r2, #117	; 0x75
   34172:	d020      	beq.n	341b6 <_printf_i+0xae>
   34174:	2a78      	cmp	r2, #120	; 0x78
   34176:	d1de      	bne.n	34136 <_printf_i+0x2e>
   34178:	0022      	movs	r2, r4
   3417a:	2178      	movs	r1, #120	; 0x78
   3417c:	3245      	adds	r2, #69	; 0x45
   3417e:	7011      	strb	r1, [r2, #0]
   34180:	4a6c      	ldr	r2, [pc, #432]	; (34334 <_printf_i+0x22c>)
   34182:	e030      	b.n	341e6 <_printf_i+0xde>
   34184:	000e      	movs	r6, r1
   34186:	681a      	ldr	r2, [r3, #0]
   34188:	3642      	adds	r6, #66	; 0x42
   3418a:	1d11      	adds	r1, r2, #4
   3418c:	6019      	str	r1, [r3, #0]
   3418e:	6813      	ldr	r3, [r2, #0]
   34190:	7033      	strb	r3, [r6, #0]
   34192:	2301      	movs	r3, #1
   34194:	e079      	b.n	3428a <_printf_i+0x182>
   34196:	0649      	lsls	r1, r1, #25
   34198:	d5d9      	bpl.n	3414e <_printf_i+0x46>
   3419a:	1d11      	adds	r1, r2, #4
   3419c:	6019      	str	r1, [r3, #0]
   3419e:	2300      	movs	r3, #0
   341a0:	5ed5      	ldrsh	r5, [r2, r3]
   341a2:	2d00      	cmp	r5, #0
   341a4:	da03      	bge.n	341ae <_printf_i+0xa6>
   341a6:	232d      	movs	r3, #45	; 0x2d
   341a8:	9a04      	ldr	r2, [sp, #16]
   341aa:	426d      	negs	r5, r5
   341ac:	7013      	strb	r3, [r2, #0]
   341ae:	4b62      	ldr	r3, [pc, #392]	; (34338 <_printf_i+0x230>)
   341b0:	270a      	movs	r7, #10
   341b2:	9303      	str	r3, [sp, #12]
   341b4:	e02f      	b.n	34216 <_printf_i+0x10e>
   341b6:	6820      	ldr	r0, [r4, #0]
   341b8:	6819      	ldr	r1, [r3, #0]
   341ba:	0605      	lsls	r5, r0, #24
   341bc:	d503      	bpl.n	341c6 <_printf_i+0xbe>
   341be:	1d08      	adds	r0, r1, #4
   341c0:	6018      	str	r0, [r3, #0]
   341c2:	680d      	ldr	r5, [r1, #0]
   341c4:	e005      	b.n	341d2 <_printf_i+0xca>
   341c6:	0640      	lsls	r0, r0, #25
   341c8:	d5f9      	bpl.n	341be <_printf_i+0xb6>
   341ca:	680d      	ldr	r5, [r1, #0]
   341cc:	1d08      	adds	r0, r1, #4
   341ce:	6018      	str	r0, [r3, #0]
   341d0:	b2ad      	uxth	r5, r5
   341d2:	4b59      	ldr	r3, [pc, #356]	; (34338 <_printf_i+0x230>)
   341d4:	2708      	movs	r7, #8
   341d6:	9303      	str	r3, [sp, #12]
   341d8:	2a6f      	cmp	r2, #111	; 0x6f
   341da:	d018      	beq.n	3420e <_printf_i+0x106>
   341dc:	270a      	movs	r7, #10
   341de:	e016      	b.n	3420e <_printf_i+0x106>
   341e0:	3145      	adds	r1, #69	; 0x45
   341e2:	700a      	strb	r2, [r1, #0]
   341e4:	4a54      	ldr	r2, [pc, #336]	; (34338 <_printf_i+0x230>)
   341e6:	9203      	str	r2, [sp, #12]
   341e8:	681a      	ldr	r2, [r3, #0]
   341ea:	6821      	ldr	r1, [r4, #0]
   341ec:	1d10      	adds	r0, r2, #4
   341ee:	6018      	str	r0, [r3, #0]
   341f0:	6815      	ldr	r5, [r2, #0]
   341f2:	0608      	lsls	r0, r1, #24
   341f4:	d522      	bpl.n	3423c <_printf_i+0x134>
   341f6:	07cb      	lsls	r3, r1, #31
   341f8:	d502      	bpl.n	34200 <_printf_i+0xf8>
   341fa:	2320      	movs	r3, #32
   341fc:	4319      	orrs	r1, r3
   341fe:	6021      	str	r1, [r4, #0]
   34200:	2710      	movs	r7, #16
   34202:	2d00      	cmp	r5, #0
   34204:	d103      	bne.n	3420e <_printf_i+0x106>
   34206:	2320      	movs	r3, #32
   34208:	6822      	ldr	r2, [r4, #0]
   3420a:	439a      	bics	r2, r3
   3420c:	6022      	str	r2, [r4, #0]
   3420e:	0023      	movs	r3, r4
   34210:	2200      	movs	r2, #0
   34212:	3343      	adds	r3, #67	; 0x43
   34214:	701a      	strb	r2, [r3, #0]
   34216:	6863      	ldr	r3, [r4, #4]
   34218:	60a3      	str	r3, [r4, #8]
   3421a:	2b00      	cmp	r3, #0
   3421c:	db5c      	blt.n	342d8 <_printf_i+0x1d0>
   3421e:	2204      	movs	r2, #4
   34220:	6821      	ldr	r1, [r4, #0]
   34222:	4391      	bics	r1, r2
   34224:	6021      	str	r1, [r4, #0]
   34226:	2d00      	cmp	r5, #0
   34228:	d158      	bne.n	342dc <_printf_i+0x1d4>
   3422a:	9e04      	ldr	r6, [sp, #16]
   3422c:	2b00      	cmp	r3, #0
   3422e:	d064      	beq.n	342fa <_printf_i+0x1f2>
   34230:	0026      	movs	r6, r4
   34232:	9b03      	ldr	r3, [sp, #12]
   34234:	3642      	adds	r6, #66	; 0x42
   34236:	781b      	ldrb	r3, [r3, #0]
   34238:	7033      	strb	r3, [r6, #0]
   3423a:	e05e      	b.n	342fa <_printf_i+0x1f2>
   3423c:	0648      	lsls	r0, r1, #25
   3423e:	d5da      	bpl.n	341f6 <_printf_i+0xee>
   34240:	b2ad      	uxth	r5, r5
   34242:	e7d8      	b.n	341f6 <_printf_i+0xee>
   34244:	6809      	ldr	r1, [r1, #0]
   34246:	681a      	ldr	r2, [r3, #0]
   34248:	0608      	lsls	r0, r1, #24
   3424a:	d505      	bpl.n	34258 <_printf_i+0x150>
   3424c:	1d11      	adds	r1, r2, #4
   3424e:	6019      	str	r1, [r3, #0]
   34250:	6813      	ldr	r3, [r2, #0]
   34252:	6962      	ldr	r2, [r4, #20]
   34254:	601a      	str	r2, [r3, #0]
   34256:	e006      	b.n	34266 <_printf_i+0x15e>
   34258:	0649      	lsls	r1, r1, #25
   3425a:	d5f7      	bpl.n	3424c <_printf_i+0x144>
   3425c:	1d11      	adds	r1, r2, #4
   3425e:	6019      	str	r1, [r3, #0]
   34260:	6813      	ldr	r3, [r2, #0]
   34262:	8aa2      	ldrh	r2, [r4, #20]
   34264:	801a      	strh	r2, [r3, #0]
   34266:	2300      	movs	r3, #0
   34268:	9e04      	ldr	r6, [sp, #16]
   3426a:	6123      	str	r3, [r4, #16]
   3426c:	e054      	b.n	34318 <_printf_i+0x210>
   3426e:	681a      	ldr	r2, [r3, #0]
   34270:	1d11      	adds	r1, r2, #4
   34272:	6019      	str	r1, [r3, #0]
   34274:	6816      	ldr	r6, [r2, #0]
   34276:	2100      	movs	r1, #0
   34278:	6862      	ldr	r2, [r4, #4]
   3427a:	0030      	movs	r0, r6
   3427c:	f000 f922 	bl	344c4 <memchr>
   34280:	2800      	cmp	r0, #0
   34282:	d001      	beq.n	34288 <_printf_i+0x180>
   34284:	1b80      	subs	r0, r0, r6
   34286:	6060      	str	r0, [r4, #4]
   34288:	6863      	ldr	r3, [r4, #4]
   3428a:	6123      	str	r3, [r4, #16]
   3428c:	2300      	movs	r3, #0
   3428e:	9a04      	ldr	r2, [sp, #16]
   34290:	7013      	strb	r3, [r2, #0]
   34292:	e041      	b.n	34318 <_printf_i+0x210>
   34294:	6923      	ldr	r3, [r4, #16]
   34296:	0032      	movs	r2, r6
   34298:	9906      	ldr	r1, [sp, #24]
   3429a:	9805      	ldr	r0, [sp, #20]
   3429c:	9d07      	ldr	r5, [sp, #28]
   3429e:	47a8      	blx	r5
   342a0:	1c43      	adds	r3, r0, #1
   342a2:	d043      	beq.n	3432c <_printf_i+0x224>
   342a4:	6823      	ldr	r3, [r4, #0]
   342a6:	2500      	movs	r5, #0
   342a8:	079b      	lsls	r3, r3, #30
   342aa:	d40f      	bmi.n	342cc <_printf_i+0x1c4>
   342ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   342ae:	68e0      	ldr	r0, [r4, #12]
   342b0:	4298      	cmp	r0, r3
   342b2:	da3d      	bge.n	34330 <_printf_i+0x228>
   342b4:	0018      	movs	r0, r3
   342b6:	e03b      	b.n	34330 <_printf_i+0x228>
   342b8:	0022      	movs	r2, r4
   342ba:	2301      	movs	r3, #1
   342bc:	3219      	adds	r2, #25
   342be:	9906      	ldr	r1, [sp, #24]
   342c0:	9805      	ldr	r0, [sp, #20]
   342c2:	9e07      	ldr	r6, [sp, #28]
   342c4:	47b0      	blx	r6
   342c6:	1c43      	adds	r3, r0, #1
   342c8:	d030      	beq.n	3432c <_printf_i+0x224>
   342ca:	3501      	adds	r5, #1
   342cc:	68e3      	ldr	r3, [r4, #12]
   342ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   342d0:	1a9b      	subs	r3, r3, r2
   342d2:	429d      	cmp	r5, r3
   342d4:	dbf0      	blt.n	342b8 <_printf_i+0x1b0>
   342d6:	e7e9      	b.n	342ac <_printf_i+0x1a4>
   342d8:	2d00      	cmp	r5, #0
   342da:	d0a9      	beq.n	34230 <_printf_i+0x128>
   342dc:	9e04      	ldr	r6, [sp, #16]
   342de:	0028      	movs	r0, r5
   342e0:	0039      	movs	r1, r7
   342e2:	f7fd f899 	bl	31418 <__aeabi_uidivmod>
   342e6:	9b03      	ldr	r3, [sp, #12]
   342e8:	3e01      	subs	r6, #1
   342ea:	5c5b      	ldrb	r3, [r3, r1]
   342ec:	0028      	movs	r0, r5
   342ee:	7033      	strb	r3, [r6, #0]
   342f0:	0039      	movs	r1, r7
   342f2:	f7fd f80b 	bl	3130c <__udivsi3>
   342f6:	1e05      	subs	r5, r0, #0
   342f8:	d1f1      	bne.n	342de <_printf_i+0x1d6>
   342fa:	2f08      	cmp	r7, #8
   342fc:	d109      	bne.n	34312 <_printf_i+0x20a>
   342fe:	6823      	ldr	r3, [r4, #0]
   34300:	07db      	lsls	r3, r3, #31
   34302:	d506      	bpl.n	34312 <_printf_i+0x20a>
   34304:	6863      	ldr	r3, [r4, #4]
   34306:	6922      	ldr	r2, [r4, #16]
   34308:	4293      	cmp	r3, r2
   3430a:	dc02      	bgt.n	34312 <_printf_i+0x20a>
   3430c:	2330      	movs	r3, #48	; 0x30
   3430e:	3e01      	subs	r6, #1
   34310:	7033      	strb	r3, [r6, #0]
   34312:	9b04      	ldr	r3, [sp, #16]
   34314:	1b9b      	subs	r3, r3, r6
   34316:	6123      	str	r3, [r4, #16]
   34318:	9b07      	ldr	r3, [sp, #28]
   3431a:	aa09      	add	r2, sp, #36	; 0x24
   3431c:	9300      	str	r3, [sp, #0]
   3431e:	0021      	movs	r1, r4
   34320:	9b06      	ldr	r3, [sp, #24]
   34322:	9805      	ldr	r0, [sp, #20]
   34324:	f7ff fe82 	bl	3402c <_printf_common>
   34328:	1c43      	adds	r3, r0, #1
   3432a:	d1b3      	bne.n	34294 <_printf_i+0x18c>
   3432c:	2001      	movs	r0, #1
   3432e:	4240      	negs	r0, r0
   34330:	b00b      	add	sp, #44	; 0x2c
   34332:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34334:	00038654 	.word	0x00038654
   34338:	00038643 	.word	0x00038643

0003433c <__sread>:
   3433c:	b570      	push	{r4, r5, r6, lr}
   3433e:	000c      	movs	r4, r1
   34340:	250e      	movs	r5, #14
   34342:	5f49      	ldrsh	r1, [r1, r5]
   34344:	f000 f8f0 	bl	34528 <_read_r>
   34348:	2800      	cmp	r0, #0
   3434a:	db03      	blt.n	34354 <__sread+0x18>
   3434c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   3434e:	181b      	adds	r3, r3, r0
   34350:	6563      	str	r3, [r4, #84]	; 0x54
   34352:	bd70      	pop	{r4, r5, r6, pc}
   34354:	89a3      	ldrh	r3, [r4, #12]
   34356:	4a02      	ldr	r2, [pc, #8]	; (34360 <__sread+0x24>)
   34358:	4013      	ands	r3, r2
   3435a:	81a3      	strh	r3, [r4, #12]
   3435c:	e7f9      	b.n	34352 <__sread+0x16>
   3435e:	46c0      	nop			; (mov r8, r8)
   34360:	ffffefff 	.word	0xffffefff

00034364 <__swrite>:
   34364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   34366:	001f      	movs	r7, r3
   34368:	898b      	ldrh	r3, [r1, #12]
   3436a:	0005      	movs	r5, r0
   3436c:	000c      	movs	r4, r1
   3436e:	0016      	movs	r6, r2
   34370:	05db      	lsls	r3, r3, #23
   34372:	d505      	bpl.n	34380 <__swrite+0x1c>
   34374:	230e      	movs	r3, #14
   34376:	5ec9      	ldrsh	r1, [r1, r3]
   34378:	2200      	movs	r2, #0
   3437a:	2302      	movs	r3, #2
   3437c:	f000 f88e 	bl	3449c <_lseek_r>
   34380:	89a3      	ldrh	r3, [r4, #12]
   34382:	4a05      	ldr	r2, [pc, #20]	; (34398 <__swrite+0x34>)
   34384:	0028      	movs	r0, r5
   34386:	4013      	ands	r3, r2
   34388:	81a3      	strh	r3, [r4, #12]
   3438a:	0032      	movs	r2, r6
   3438c:	230e      	movs	r3, #14
   3438e:	5ee1      	ldrsh	r1, [r4, r3]
   34390:	003b      	movs	r3, r7
   34392:	f000 f839 	bl	34408 <_write_r>
   34396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34398:	ffffefff 	.word	0xffffefff

0003439c <__sseek>:
   3439c:	b570      	push	{r4, r5, r6, lr}
   3439e:	000c      	movs	r4, r1
   343a0:	250e      	movs	r5, #14
   343a2:	5f49      	ldrsh	r1, [r1, r5]
   343a4:	f000 f87a 	bl	3449c <_lseek_r>
   343a8:	89a3      	ldrh	r3, [r4, #12]
   343aa:	1c42      	adds	r2, r0, #1
   343ac:	d103      	bne.n	343b6 <__sseek+0x1a>
   343ae:	4a05      	ldr	r2, [pc, #20]	; (343c4 <__sseek+0x28>)
   343b0:	4013      	ands	r3, r2
   343b2:	81a3      	strh	r3, [r4, #12]
   343b4:	bd70      	pop	{r4, r5, r6, pc}
   343b6:	2280      	movs	r2, #128	; 0x80
   343b8:	0152      	lsls	r2, r2, #5
   343ba:	4313      	orrs	r3, r2
   343bc:	81a3      	strh	r3, [r4, #12]
   343be:	6560      	str	r0, [r4, #84]	; 0x54
   343c0:	e7f8      	b.n	343b4 <__sseek+0x18>
   343c2:	46c0      	nop			; (mov r8, r8)
   343c4:	ffffefff 	.word	0xffffefff

000343c8 <__sclose>:
   343c8:	b510      	push	{r4, lr}
   343ca:	230e      	movs	r3, #14
   343cc:	5ec9      	ldrsh	r1, [r1, r3]
   343ce:	f000 f82f 	bl	34430 <_close_r>
   343d2:	bd10      	pop	{r4, pc}

000343d4 <strchr>:
   343d4:	b2c9      	uxtb	r1, r1
   343d6:	7803      	ldrb	r3, [r0, #0]
   343d8:	2b00      	cmp	r3, #0
   343da:	d004      	beq.n	343e6 <strchr+0x12>
   343dc:	4299      	cmp	r1, r3
   343de:	d100      	bne.n	343e2 <strchr+0xe>
   343e0:	4770      	bx	lr
   343e2:	3001      	adds	r0, #1
   343e4:	e7f7      	b.n	343d6 <strchr+0x2>
   343e6:	424b      	negs	r3, r1
   343e8:	4159      	adcs	r1, r3
   343ea:	4249      	negs	r1, r1
   343ec:	4008      	ands	r0, r1
   343ee:	e7f7      	b.n	343e0 <strchr+0xc>

000343f0 <__ascii_wctomb>:
   343f0:	1e0b      	subs	r3, r1, #0
   343f2:	d004      	beq.n	343fe <__ascii_wctomb+0xe>
   343f4:	2aff      	cmp	r2, #255	; 0xff
   343f6:	d904      	bls.n	34402 <__ascii_wctomb+0x12>
   343f8:	238a      	movs	r3, #138	; 0x8a
   343fa:	6003      	str	r3, [r0, #0]
   343fc:	3b8b      	subs	r3, #139	; 0x8b
   343fe:	0018      	movs	r0, r3
   34400:	4770      	bx	lr
   34402:	700a      	strb	r2, [r1, #0]
   34404:	2301      	movs	r3, #1
   34406:	e7fa      	b.n	343fe <__ascii_wctomb+0xe>

00034408 <_write_r>:
   34408:	b570      	push	{r4, r5, r6, lr}
   3440a:	0005      	movs	r5, r0
   3440c:	0008      	movs	r0, r1
   3440e:	0011      	movs	r1, r2
   34410:	2200      	movs	r2, #0
   34412:	4c06      	ldr	r4, [pc, #24]	; (3442c <_write_r+0x24>)
   34414:	6022      	str	r2, [r4, #0]
   34416:	001a      	movs	r2, r3
   34418:	f7f5 fb18 	bl	29a4c <_write>
   3441c:	1c43      	adds	r3, r0, #1
   3441e:	d103      	bne.n	34428 <_write_r+0x20>
   34420:	6823      	ldr	r3, [r4, #0]
   34422:	2b00      	cmp	r3, #0
   34424:	d000      	beq.n	34428 <_write_r+0x20>
   34426:	602b      	str	r3, [r5, #0]
   34428:	bd70      	pop	{r4, r5, r6, pc}
   3442a:	46c0      	nop			; (mov r8, r8)
   3442c:	20005a50 	.word	0x20005a50

00034430 <_close_r>:
   34430:	2300      	movs	r3, #0
   34432:	b570      	push	{r4, r5, r6, lr}
   34434:	4c06      	ldr	r4, [pc, #24]	; (34450 <_close_r+0x20>)
   34436:	0005      	movs	r5, r0
   34438:	0008      	movs	r0, r1
   3443a:	6023      	str	r3, [r4, #0]
   3443c:	f7f5 fb5a 	bl	29af4 <_close>
   34440:	1c43      	adds	r3, r0, #1
   34442:	d103      	bne.n	3444c <_close_r+0x1c>
   34444:	6823      	ldr	r3, [r4, #0]
   34446:	2b00      	cmp	r3, #0
   34448:	d000      	beq.n	3444c <_close_r+0x1c>
   3444a:	602b      	str	r3, [r5, #0]
   3444c:	bd70      	pop	{r4, r5, r6, pc}
   3444e:	46c0      	nop			; (mov r8, r8)
   34450:	20005a50 	.word	0x20005a50

00034454 <_fstat_r>:
   34454:	2300      	movs	r3, #0
   34456:	b570      	push	{r4, r5, r6, lr}
   34458:	4c06      	ldr	r4, [pc, #24]	; (34474 <_fstat_r+0x20>)
   3445a:	0005      	movs	r5, r0
   3445c:	0008      	movs	r0, r1
   3445e:	0011      	movs	r1, r2
   34460:	6023      	str	r3, [r4, #0]
   34462:	f7f5 fb51 	bl	29b08 <_fstat>
   34466:	1c43      	adds	r3, r0, #1
   34468:	d103      	bne.n	34472 <_fstat_r+0x1e>
   3446a:	6823      	ldr	r3, [r4, #0]
   3446c:	2b00      	cmp	r3, #0
   3446e:	d000      	beq.n	34472 <_fstat_r+0x1e>
   34470:	602b      	str	r3, [r5, #0]
   34472:	bd70      	pop	{r4, r5, r6, pc}
   34474:	20005a50 	.word	0x20005a50

00034478 <_isatty_r>:
   34478:	2300      	movs	r3, #0
   3447a:	b570      	push	{r4, r5, r6, lr}
   3447c:	4c06      	ldr	r4, [pc, #24]	; (34498 <_isatty_r+0x20>)
   3447e:	0005      	movs	r5, r0
   34480:	0008      	movs	r0, r1
   34482:	6023      	str	r3, [r4, #0]
   34484:	f7f5 fb4e 	bl	29b24 <_isatty>
   34488:	1c43      	adds	r3, r0, #1
   3448a:	d103      	bne.n	34494 <_isatty_r+0x1c>
   3448c:	6823      	ldr	r3, [r4, #0]
   3448e:	2b00      	cmp	r3, #0
   34490:	d000      	beq.n	34494 <_isatty_r+0x1c>
   34492:	602b      	str	r3, [r5, #0]
   34494:	bd70      	pop	{r4, r5, r6, pc}
   34496:	46c0      	nop			; (mov r8, r8)
   34498:	20005a50 	.word	0x20005a50

0003449c <_lseek_r>:
   3449c:	b570      	push	{r4, r5, r6, lr}
   3449e:	0005      	movs	r5, r0
   344a0:	0008      	movs	r0, r1
   344a2:	0011      	movs	r1, r2
   344a4:	2200      	movs	r2, #0
   344a6:	4c06      	ldr	r4, [pc, #24]	; (344c0 <_lseek_r+0x24>)
   344a8:	6022      	str	r2, [r4, #0]
   344aa:	001a      	movs	r2, r3
   344ac:	f7f5 fb43 	bl	29b36 <_lseek>
   344b0:	1c43      	adds	r3, r0, #1
   344b2:	d103      	bne.n	344bc <_lseek_r+0x20>
   344b4:	6823      	ldr	r3, [r4, #0]
   344b6:	2b00      	cmp	r3, #0
   344b8:	d000      	beq.n	344bc <_lseek_r+0x20>
   344ba:	602b      	str	r3, [r5, #0]
   344bc:	bd70      	pop	{r4, r5, r6, pc}
   344be:	46c0      	nop			; (mov r8, r8)
   344c0:	20005a50 	.word	0x20005a50

000344c4 <memchr>:
   344c4:	b2c9      	uxtb	r1, r1
   344c6:	1882      	adds	r2, r0, r2
   344c8:	4290      	cmp	r0, r2
   344ca:	d101      	bne.n	344d0 <memchr+0xc>
   344cc:	2000      	movs	r0, #0
   344ce:	4770      	bx	lr
   344d0:	7803      	ldrb	r3, [r0, #0]
   344d2:	428b      	cmp	r3, r1
   344d4:	d0fb      	beq.n	344ce <memchr+0xa>
   344d6:	3001      	adds	r0, #1
   344d8:	e7f6      	b.n	344c8 <memchr+0x4>

000344da <_realloc_r>:
   344da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   344dc:	0007      	movs	r7, r0
   344de:	000d      	movs	r5, r1
   344e0:	0016      	movs	r6, r2
   344e2:	2900      	cmp	r1, #0
   344e4:	d105      	bne.n	344f2 <_realloc_r+0x18>
   344e6:	0011      	movs	r1, r2
   344e8:	f7fe feac 	bl	33244 <_malloc_r>
   344ec:	0004      	movs	r4, r0
   344ee:	0020      	movs	r0, r4
   344f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   344f2:	2a00      	cmp	r2, #0
   344f4:	d103      	bne.n	344fe <_realloc_r+0x24>
   344f6:	f7fe fe5b 	bl	331b0 <_free_r>
   344fa:	0034      	movs	r4, r6
   344fc:	e7f7      	b.n	344ee <_realloc_r+0x14>
   344fe:	f000 f827 	bl	34550 <_malloc_usable_size_r>
   34502:	002c      	movs	r4, r5
   34504:	4286      	cmp	r6, r0
   34506:	d9f2      	bls.n	344ee <_realloc_r+0x14>
   34508:	0031      	movs	r1, r6
   3450a:	0038      	movs	r0, r7
   3450c:	f7fe fe9a 	bl	33244 <_malloc_r>
   34510:	1e04      	subs	r4, r0, #0
   34512:	d0ec      	beq.n	344ee <_realloc_r+0x14>
   34514:	0029      	movs	r1, r5
   34516:	0032      	movs	r2, r6
   34518:	f7fe fe26 	bl	33168 <memcpy>
   3451c:	0029      	movs	r1, r5
   3451e:	0038      	movs	r0, r7
   34520:	f7fe fe46 	bl	331b0 <_free_r>
   34524:	e7e3      	b.n	344ee <_realloc_r+0x14>
	...

00034528 <_read_r>:
   34528:	b570      	push	{r4, r5, r6, lr}
   3452a:	0005      	movs	r5, r0
   3452c:	0008      	movs	r0, r1
   3452e:	0011      	movs	r1, r2
   34530:	2200      	movs	r2, #0
   34532:	4c06      	ldr	r4, [pc, #24]	; (3454c <_read_r+0x24>)
   34534:	6022      	str	r2, [r4, #0]
   34536:	001a      	movs	r2, r3
   34538:	f7f5 fa5e 	bl	299f8 <_read>
   3453c:	1c43      	adds	r3, r0, #1
   3453e:	d103      	bne.n	34548 <_read_r+0x20>
   34540:	6823      	ldr	r3, [r4, #0]
   34542:	2b00      	cmp	r3, #0
   34544:	d000      	beq.n	34548 <_read_r+0x20>
   34546:	602b      	str	r3, [r5, #0]
   34548:	bd70      	pop	{r4, r5, r6, pc}
   3454a:	46c0      	nop			; (mov r8, r8)
   3454c:	20005a50 	.word	0x20005a50

00034550 <_malloc_usable_size_r>:
   34550:	1f0b      	subs	r3, r1, #4
   34552:	681b      	ldr	r3, [r3, #0]
   34554:	1f18      	subs	r0, r3, #4
   34556:	2b00      	cmp	r3, #0
   34558:	da01      	bge.n	3455e <_malloc_usable_size_r+0xe>
   3455a:	580b      	ldr	r3, [r1, r0]
   3455c:	18c0      	adds	r0, r0, r3
   3455e:	4770      	bx	lr

00034560 <pcWelcomeMessage>:
   34560:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   34570:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   34580:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   34590:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   345a0:	000a 0000 7766 0000 7766 203a 6f44 6e77     ....fw..fw: Down
   345b0:	6f6c 6461 6120 6620 6c69 2065 6e61 2064     load a file and 
   345c0:	6570 6672 726f 206d 6e61 4620 2057 7075     perform an FW up
   345d0:	6164 6574 0a0d 0000 6572 6573 0074 0000     date....reset...
   345e0:	6572 6573 3a74 5220 7365 7465 2073 6874     reset: Resets th
   345f0:	2065 6564 6976 6563 0a0d 0000 3269 0063     e device....i2c.
   34600:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   34610:	7375 0a0d 0000 0000 6574 706d 0000 0000     us......temp....
   34620:	6574 706d 203a 6552 7574 6e72 7420 6d65     temp: Return tem
   34630:	2070 7266 6d6f 5320 5448 3343 0a0d 0000     p from SHTC3....
   34640:	6573 646e 0000 0000 6573 646e 203a 6553     send....send: Se
   34650:	646e 4420 7461 2061 6f74 4e20 646f 2065     nd Data to Node 
   34660:	6552 0d64 000a 0000 6970 0072 6970 3a72     Red.....pir.pir:
   34670:	4320 6568 6b63 6620 726f 4d20 746f 6f69      Check for Motio
   34680:	0d6e 000a 656c 0064 656c 3a64 4320 6568     n...led.led: Che
   34690:	6b63 6620 726f 4d20 746f 6f69 0d6e 000a     ck for Motion...
   346a0:	6c61 0073 6c61 3a73 5220 7465 7275 736e     als.als: Returns
   346b0:	6c20 7875 7620 6c61 6575 2073 7266 6d6f      lux values from
   346c0:	4120 534c 0a0d 0000 6c63 0073 6c63 3a73      ALS....cls.cls:
   346d0:	4320 656c 7261 2073 6874 2065 6574 6d72      Clears the term
   346e0:	6e69 6c61 7320 7263 6565 0d6e 000a 0000     inal screen.....
   346f0:	6f43 6c75 2064 6f6e 2074 6c61 6f6c 6163     Could not alloca
   34700:	6574 7320 6d65 7061 6f68 6572 0a0d 0000     te semaphore....
   34710:	0a0d 0000 616f 0000 6325 325b 0d4b 003e     ....oa..%c[2K.>.
   34720:	2008 0008 6325 325b 004a 0000 6554 7473     . ..%c[2J...Test
   34730:	5020 6f72 7267 6d61 4120 2d20 4c20 4445      Program A - LED
   34740:	5420 676f 6c67 7365 6520 6576 7972 3520      Toggles every 5
   34750:	3030 736d 0a0d 0000 465b 4941 5d4c 7220     00ms....[FAIL] r
   34760:	7365 2520 0d64 000a 6c46 6761 2e41 7874     es %d...FlagA.tx
   34770:	2074 6461 6564 2164 4820 6c6f 2064 7562     t added! Hold bu
   34780:	7474 6e6f 7020 6572 7373 6465 7420 206f     tton pressed to 
   34790:	6572 6573 2074 6564 6976 6563 0d21 000a     reset device!...
   347a0:	3a30 6c46 6761 2e41 7874 0074 7453 6475     0:FlagA.txt.Stud
   347b0:	6e65 7374 7420 206f 6966 6c6c 6f20 7475     ents to fill out
   347c0:	0021 0000 2030 3120 2020 2032 3320 2020     !...0  1  2  3  
   347d0:	2034 3520 2020 2036 3720 2020 2038 3920     4  5  6  7  8  9
   347e0:	2020 2061 6220 2020 2063 6420 2020 2065       a  b  c  d  e 
   347f0:	6620 0a0d 0000 0000 3025 7832 203a 0000      f......%02x: ..
   34800:	3025 7832 0020 0000 0a0d 6554 706d 7265     %02x .....Temper
   34810:	7461 7275 3a65 2520 0964 7548 696d 6964     ature: %d.Humidi
   34820:	7974 203a 6425 0d20 000a 0000 0a0d 754c     ty: %d .......Lu
   34830:	2078 6156 756c 3a65 2520 0964 6857 7469     x Value: %d.Whit
   34840:	2065 6156 756c 3a65 2520 2064 0a0d 0000     e Value: %d ....
   34850:	0a0d 754c 2078 6156 756c 3a65 2520 0964     ..Lux Value: %d.
   34860:	6857 7469 2065 6156 756c 3a65 2520 0964     White Value: %d.
   34870:	6554 706d 7265 7461 7275 3a65 2520 0964     Temperature: %d.
   34880:	7548 696d 6964 7974 203a 6425 0d20 000a     Humidity: %d ...
   34890:	0a0d 6544 6574 7463 6465 0a0d 0000 0000     ..Detected......
   348a0:	0a0d 6f4e 2074 6544 6574 7463 6465 0a0d     ..Not Detected..
   348b0:	0000 0000                                   ....

000348b4 <xOTAUCommand>:
   348b4:	45a4 0003 45a8 0003 34a1 0001 0000 0000     .E...E...4......

000348c4 <xResetCommand>:
   348c4:	45d8 0003 45e0 0003 3561 0001 0000 0000     .E...E..a5......

000348d4 <xI2cScan>:
   348d4:	45fc 0003 4600 0003 3581 0001 0000 0000     .E...F...5......

000348e4 <xTemp>:
   348e4:	4618 0003 4620 0003 36a9 0001 0000 0000     .F.. F...6......

000348f4 <xCalcAndSend>:
   348f4:	4640 0003 4648 0003 374d 0001 0000 0000     @F..HF..M7......

00034904 <xPIR>:
   34904:	4668 0003 466c 0003 3809 0001 0000 0000     hF..lF...8......

00034914 <xLED>:
   34914:	4684 0003 4688 0003 3859 0001 0000 0000     .F...F..Y8......

00034924 <xAlsGetCommand>:
   34924:	46a0 0003 46a4 0003 36f1 0001 0000 0000     .F...F...6......

00034934 <xClearScreen>:
   34934:	46c8 0003 46cc 0003 3459 0001 0000 0000     .F...F..Y4......
   34944:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   34954:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   34964:	4955 5420 7361 206b 7453 7261 6574 2164     UI Task Started!
   34974:	0000 0000                                   ....

00034978 <main_mqtt_broker>:
   34978:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   34988:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   34998:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   349a8:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   349b8:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   349c8:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   349d8:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   349e8:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   349f8:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   34a08:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   34a18:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   34a28:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   34a38:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   34a48:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   34a58:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   34a68:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   34a78:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   34a88:	7564 7e2f 6167 616e 646e 542f 7365 4174     du/~ganand/TestA
   34a98:	622e 6e69 0000 0000 7473 726f 5f65 6966     .bin....store_fi
   34aa8:	656c 705f 6361 656b 3a74 6520 706d 7974     le_packet: empty
   34ab8:	6420 7461 2e61 0a0d 0000 0000 7473 726f      data.......stor
   34ac8:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   34ad8:	6c69 2065 616e 656d 6920 2073 6e69 6176     ile name is inva
   34ae8:	696c 2e64 4420 776f 6c6e 616f 2064 6163     lid. Download ca
   34af8:	636e 6c65 6465 0d2e 000a 0000 7473 726f     nceled......stor
   34b08:	5f65 6966 656c 705f 6361 656b 3a74 6320     e_file_packet: c
   34b18:	6572 7461 6e69 2067 6966 656c 5b20 7325     reating file [%s
   34b28:	0d5d 000a 7473 726f 5f65 6966 656c 705f     ]...store_file_p
   34b38:	6361 656b 3a74 6620 6c69 2065 7263 6165     acket: file crea
   34b48:	6974 6e6f 6520 7272 726f 2021 6572 3a74     tion error! ret:
   34b58:	6425 0a0d 0000 0000 7473 726f 5f65 6966     %d......store_fi
   34b68:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   34b78:	7277 7469 2065 7265 6f72 2c72 6420 776f     write error, dow
   34b88:	6c6e 616f 2064 6163 636e 6c65 6465 0d2e     nload canceled..
   34b98:	000a 0000 7473 726f 5f65 6966 656c 705f     ....store_file_p
   34ba8:	6361 656b 3a74 7220 6365 6965 6576 5b64     acket: received[
   34bb8:	6c25 5d75 202c 6966 656c 7320 7a69 5b65     %lu], file size[
   34bc8:	6c25 5d75 0a0d 0000 7473 726f 5f65 6966     %lu]....store_fi
   34bd8:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   34be8:	6f64 6e77 6f6c 6461 6465 7320 6375 6563     downloaded succe
   34bf8:	7373 7566 6c6c 2e79 0a0d 0000 7468 7074     ssfully.....http
   34c08:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   34c18:	203a 5448 5054 6320 696c 6e65 2074 6f73     : HTTP client so
   34c28:	6b63 7465 6320 6e6f 656e 7463 6465 0d2e     cket connected..
   34c38:	000a 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   34c48:	6163 6c6c 6162 6b63 203a 6572 7571 7365     callback: reques
   34c58:	2074 6f63 706d 656c 6574 2e64 0a0d 0000     t completed.....
   34c68:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   34c78:	6162 6b63 203a 6572 6563 7669 6465 7220     back: received r
   34c88:	7365 6f70 736e 2065 7525 6420 7461 2061     esponse %u data 
   34c98:	6973 657a 2520 0d75 000a 0000 7468 7074     size %u.....http
   34ca8:	635f 696c 6e65 5f74 6163 6c6c 6162 6b63     _client_callback
   34cb8:	203a 6964 6373 6e6f 656e 7463 6f69 206e     : disconnection 
   34cc8:	6572 7361 6e6f 253a 0d64 000a 6572 6f73     reason:%d...reso
   34cd8:	766c 5f65 6263 203a 7325 4920 2050 6461     lve_cb: %s IP ad
   34ce8:	7264 7365 2073 7369 2520 2e64 6425 252e     dress is %d.%d.%
   34cf8:	2e64 6425 0a0d 0a0d 0000 0000 6977 6966     d.%d........wifi
   34d08:	635f 3a62 4d20 4d32 575f 4649 5f49 4f43     _cb: M2M_WIFI_CO
   34d18:	4e4e 4345 4554 0d44 000a 0000 6977 6966     NNECTED.....wifi
   34d28:	635f 3a62 4d20 4d32 575f 4649 5f49 4944     _cb: M2M_WIFI_DI
   34d38:	4353 4e4f 454e 5443 4445 0a0d 0000 0000     SCONNECTED......
   34d48:	6164 6572 6f74 7264 6165 006d 6850 6c69     daretodream.Phil
   34d58:	4d6c 7861 0000 0000 6977 6966 635f 3a62     lMax....wifi_cb:
   34d68:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   34d78:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
   34d88:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
   34d98:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
   34da8:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   34db8:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   34dc8:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   34dd8:	6c73 746f 2e2e 0d2e 000a 0000 6e69 7469     slot........init
   34de8:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   34df8:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   34e08:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   34e18:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   34e28:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   34e38:	2e64 0a0d 0000 0000 6e69 7469 735f 6f74     d.......init_sto
   34e48:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   34e58:	2044 6163 6472 2e2e 0d2e 000a 6e69 7469     D card......init
   34e68:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   34e78:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   34e88:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   34e98:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   34ea8:	2064 6f6d 6e75 2074 4b4f 0d2e 000a 0000     d mount OK......
   34eb8:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   34ec8:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   34ed8:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   34ee8:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   34ef8:	2964 0a0d 0000 0000 0a0d 2520 2a2e 0073     d)........ %.*s.
   34f08:	3e20 203e 0000 0000 2e25 732a 0000 0000      >> ....%.*s....
   34f18:	6144 6174 754f 5f74 7453 6572 7465 694c     DataOut_StreetLi
   34f28:	6867 5f74 3254 0031 6166 736c 0065 0000     ght_T21.false...
   34f38:	7274 6575 0000 0000 6144 6174 754f 5f74     true....DataOut_
   34f48:	6552 6170 7269 694c 6867 5f74 3254 0031     RepairLight_T21.
   34f58:	0a0d 6553 736e 726f 4420 7461 2061 6572     ..Sensor Data re
   34f68:	6563 7669 6465 0d21 000a 0000 0a0d 6f43     ceived!.......Co
   34f78:	6e6e 6365 6974 676e 7420 206f 7242 6b6f     nnecting to Brok
   34f88:	7265 2e2e 002e 0000 7242 4a73 4e42 6f56     er......BrsJBNVo
   34f98:	4251 376c 0000 0000 7472 7974 626f 6a65     QBl7....rttyobej
   34fa8:	0000 0000 514d 5454 2020 7245 6f72 2072     ....MQTT  Error 
   34fb8:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   34fc8:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   34fd8:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   34fe8:	6b6f 7265 0a0d 0000 6f43 6e6e 6365 2074     oker....Connect 
   34ff8:	6166 6c69 7420 206f 6573 7672 7265 2528     fail to server(%
   35008:	2973 2021 6572 7274 2079 7469 6120 7475     s)! retry it aut
   35018:	6d6f 7461 6369 6c61 796c 0d2e 000a 0000     omatically......
   35028:	6144 6174 6e49 545f 3132 0000 514d 5454     DataIn_T21..MQTT
   35038:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   35048:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   35058:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   35068:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   35078:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   35088:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   35098:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   350a8:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   350b8:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   350c8:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   350d8:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   350e8:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   350f8:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   35108:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   35118:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   35128:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   35138:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   35148:	4d20 5451 2054 7242 6b6f 7265 0d21 000a      MQTT Broker!...
   35158:	227b 2264 7b3a 7422 6d65 2270 253a 2c64     {"d":{"temp":%d,
   35168:	2220 696c 6867 2274 203a 6425 202c 7022      "light": %d, "p
   35178:	7269 3a22 2520 7d64 007d 0000 5245 4f52     ir": %d}}...ERRO
   35188:	2052 6e49 7469 6169 696c 697a 676e 5720     R Initializing W
   35198:	6669 2069 6144 6174 7120 6575 6575 2173     ifi Data queues!
   351a8:	0a0d 0000 5345 3545 3631 2d20 5720 6669     ....ESE516 - Wif
   351b8:	2069 6e49 7469 4320 646f 0d65 000a 0000     i Init Code.....
   351c8:	616d 6e69 203a 326d 5f6d 6977 6966 695f     main: m2m_wifi_i
   351d8:	696e 2074 6163 6c6c 6520 7272 726f 2021     nit call error! 
   351e8:	7228 7365 2520 2964 0a0d 0000 616d 6e69     (res %d)....main
   351f8:	203a 6f63 6e6e 6365 6974 676e 7420 206f     : connecting to 
   35208:	6957 6946 4120 2050 7325 2e2e 0d2e 000a     WiFi AP %s......
   35218:	4fc0 0001 4fcc 0001 4fde 0001 5034 0001     .O...O...O..4P..
   35228:	5054 0001 6568 706c 0000 0000 0a0d 6568     TP..help......he
   35238:	706c 0d3a 200a 694c 7473 2073 6c61 206c     lp:.. Lists all 
   35248:	6874 2065 6572 6967 7473 7265 6465 6320     the registered c
   35258:	6d6f 616d 646e 0d73 0d0a 000a 6e49 6f63     ommands.....Inco
   35268:	7272 6365 2074 6f63 6d6d 6e61 2064 6170     rrect command pa
   35278:	6172 656d 6574 2872 2973 202e 4520 746e     rameter(s).  Ent
   35288:	7265 2220 6568 706c 2022 6f74 7620 6569     er "help" to vie
   35298:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   352a8:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   352b8:	0d0a 000a 6f43 6d6d 6e61 2064 6f6e 2074     ....Command not 
   352c8:	6572 6f63 6e67 7369 6465 202e 4520 746e     recognised.  Ent
   352d8:	7265 2720 6568 706c 2027 6f74 7620 6569     er 'help' to vie
   352e8:	2077 2061 696c 7473 6f20 2066 7661 6961     w a list of avai
   352f8:	616c 6c62 2065 6f63 6d6d 6e61 7364 0d2e     lable commands..
   35308:	0d0a 000a                                   ....

0003530c <xHelpCommand>:
   3530c:	522c 0003 5234 0003 6905 0001 0000 0000     ,R..4R...i......
   3531c:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   3532c:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   3533c:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   3534c:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   3535c:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   3536c:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   3537c:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   3538c:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   3539c:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   353ac:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   353bc:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   353cc:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   353dc:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   353ec:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   353fc:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   3540c:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   3541c:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   3542c:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   3543c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3544c:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   3545c:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   3546c:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   3547c:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   3548c:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   3549c:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   354ac:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   354bc:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   354cc:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   354dc:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   354ec:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   354fc:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   3550c:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   3551c:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   3552c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3553c:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   3554c:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   3555c:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   3556c:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   3557c:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   3558c:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   3559c:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   355ac:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   355bc:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   355cc:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   355dc:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   355ec:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   355fc:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   3560c:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   3561c:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   3562c:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   3563c:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   3564c:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   3565c:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   3566c:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   3567c:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   3568c:	6365 6374 616c 7373 0021 0000 702a 0001     ectclass!...*p..
   3569c:	7022 0001 7026 0001 701a 0001 701e 0001     "p..&p...p...p..
   356ac:	702e 0001 7032 0001 7036 0001 703a 0001     .p..2p..6p..:p..
   356bc:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   356cc:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   356dc:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   356ec:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   356fc:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   3570c:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   3571c:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   3572c:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   3573c:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   3574c:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   3575c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   3576c:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   3577c:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   3578c:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   3579c:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   357ac:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   357bc:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   357cc:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   357dc:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   357ec:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   357fc:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3580c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3581c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3582c:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   3583c:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   3584c:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   3585c:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   3586c:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   3587c:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   3588c:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   3589c:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   358ac:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   358bc:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   358cc:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   358dc:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   358ec:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   358fc:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   3590c:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   3591c:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   3592c:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   3593c:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   3594c:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   3595c:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   3596c:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   3597c:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   3598c:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   3599c:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   359ac:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   359bc:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   359cc:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   359dc:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   359ec:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   359fc:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   35a0c:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   35a1c:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   35a2c:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   35a3c:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   35a4c:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   35a5c:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   35a6c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35a7c:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   35a8c:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   35a9c:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   35aac:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   35abc:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   35acc:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   35adc:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   35aec:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   35afc:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   35b0c:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   35b1c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35b2c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35b3c:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   35b4c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   35b5c:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   35b6c:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   35b7c:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   35b8c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   35b9c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35bac:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35bbc:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   35bcc:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   35bdc:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   35bec:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   35bfc:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   35c0c:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   35c1c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35c2c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35c3c:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   35c4c:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   35c5c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35c6c:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35c7c:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   35c8c:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   35c9c:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   35cac:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35cbc:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   35ccc:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   35cdc:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   35cec:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   35cfc:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   35d0c:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   35d1c:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   35d2c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   35d3c:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   35d4c:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   35d5c:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   35d6c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35d7c:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   35d8c:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   35d9c:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   35dac:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   35dbc:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   35dcc:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   35ddc:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   35dec:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   35dfc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35e0c:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   35e1c:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   35e2c:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   35e3c:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   35e4c:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   35e5c:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   35e6c:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   35e7c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   35e8c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   35e9c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   35eac:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   35ebc:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   35ecc:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   35edc:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   35eec:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   35efc:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   35f0c:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   35f1c:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   35f2c:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   35f3c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35f4c:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   35f5c:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   35f6c:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   35f7c:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   35f8c:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   35f9c:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   35fac:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   35fbc:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   35fcc:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   35fdc:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   35fec:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   35ffc:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   3600c:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   3601c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3602c:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   3603c:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   3604c:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   3605c:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   3606c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3607c:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   3608c:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   3609c:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   360ac:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   360bc:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   360cc:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   360dc:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   360ec:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   360fc:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   3610c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3611c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   3612c:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   3613c:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   3614c:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   3615c:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   3616c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3617c:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   3618c:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   3619c:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   361ac:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   361bc:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   361cc:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   361dc:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   361ec:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   361fc:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   3620c:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   3621c:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   3622c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   3623c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3624c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3625c:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   3626c:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   3627c:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   3628c:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   3629c:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   362ac:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   362bc:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   362cc:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   362dc:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   362ec:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   362fc:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   3630c:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   3631c:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   3632c:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   3633c:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   3634c:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   3635c:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   3636c:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   3637c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3638c:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   3639c:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   363ac:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   363bc:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   363cc:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   363dc:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   363ec:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   363fc:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   3640c:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   3641c:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   3642c:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   3643c:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   3644c:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   3645c:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   3646c:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   3647c:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   3648c:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   3649c:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   364ac:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   364bc:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   364cc:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   364dc:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   364ec:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   364fc:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   3650c:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   3651c:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   3652c:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   3653c:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   3654c:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   3655c:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   3656c:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   3657c:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   3658c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3659c:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   365ac:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   365bc:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   365cc:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   365dc:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   365ec:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   365fc:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   3660c:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   3661c:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   3662c:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   3663c:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   3664c:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   3665c:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   3666c:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   3667c:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   3668c:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   3669c:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   366ac:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   366bc:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   366cc:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   366dc:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   366ec:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   366fc:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   3670c:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   3671c:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   3672c:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   3673c:	0000 0000 6d54 2072 7653 0063 c0c8 0001     ....Tmr Svc.....
   3674c:	c0c8 0001 c0c8 0001 c156 0001 c120 0001     ........V... ...
   3675c:	c14a 0001 c0c8 0001 c0c8 0001 c156 0001     J...........V...
   3676c:	c120 0001                                    ...

00036770 <sd_mmc_trans_units>:
   36770:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

0003678c <sd_trans_multipliers>:
   3678c:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   3679c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   367ac:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   367bc:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

000367cc <mmc_trans_multipliers>:
   367cc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   367dc:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   367ec:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   367fc:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   3680c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3681c:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   3682c:	746c 6320 646d 000a 000d 0000               lt cmd......

00036838 <__FUNCTION__.17099>:
   36838:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   36848:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   36858:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   36868:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   36878:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   36888:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   36898:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   368a8:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   368b8:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   368c8:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   368d8:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   368e8:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   368f8:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   36908:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   36918:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   36928:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   36938:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   36948:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   36958:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   36968:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   36978:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   36988:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   36998:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   369a8:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   369b8:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   369c8:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   369d8:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   369e8:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   369f8:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   36a08:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   36a18:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   36a28:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   36a38:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   36a48:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   36a58:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   36a68:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   36a78:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   36a88:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   36a98:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   36aa8:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   36ab8:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   36ac8:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   36ad8:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   36ae8:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   36af8:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   36b08:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   36b18:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   36b28:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   36b38:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   36b48:	203f 6425 000a 0000 02cc 0002 029c 0002     ? %d............
   36b58:	0294 0002 02ac 0002 02a4 0002 02c4 0002     ................
   36b68:	02b4 0002 02bc 0002                         ........

00036b70 <__FUNCTION__.17967>:
   36b70:	6968 5f66 6573 646e 0000 0000               hif_send....

00036b7c <__FUNCTION__.17977>:
   36b7c:	6968 5f66 7369 0072                         hif_isr.

00036b84 <__FUNCTION__.17986>:
   36b84:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

00036b94 <__FUNCTION__.17998>:
   36b94:	6968 5f66 6572 6563 7669 0065               hif_receive.

00036ba0 <__FUNCTION__.18014>:
   36ba0:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   36bb0:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   36bc0:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   36bd0:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   36be0:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   36bf0:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   36c00:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   36c10:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   36c20:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   36c30:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   36c40:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   36c50:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   36c60:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   36c70:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   36c80:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   36c90:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   36ca0:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   36cb0:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   36cc0:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   36cd0:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   36ce0:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   36cf0:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   36d00:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   36d10:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   36d20:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   36d30:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   36d40:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   36d50:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   36d60:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   36d70:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   36d80:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   36d90:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   36da0:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   36db0:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   36dc0:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   36dd0:	000a 0000 3032 313a 3a35 3930 0000 0000     ....20:15:09....
   36de0:	614d 2079 3820 3220 3230 0032 7244 7669     May  8 2022.Driv
   36df0:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   36e00:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   36e10:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   36e20:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   36e30:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   36e40:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   36e50:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   36e60:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   36e70:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   36e80:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   36e90:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   36ea0:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   36eb0:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   36ec0:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   36ed0:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   36ee0:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   36ef0:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   36f00:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   36f10:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   36f20:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   36f30:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   36f40:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   36f50:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   36f60:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   36f70:	4220 6675 6566 0a72 0000 0000                Buffer.....

00036f7c <__FUNCTION__.17949>:
   36f7c:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00036f88 <__FUNCTION__.17978>:
   36f88:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00036f98 <__FUNCTION__.18009>:
   36f98:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   36fa8:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   36fb8:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   36fc8:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   36fd8:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   36fe8:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   36ff8:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   37008:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   37018:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   37028:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00037038 <__FUNCTION__.17806>:
   37038:	6863 7069 775f 6b61 0065 0000               chip_wake...

00037044 <__FUNCTION__.17855>:
   37044:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   37054:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   37064:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   37074:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   37084:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   37094:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   370a4:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   370b4:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   370c4:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   370d4:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   370e4:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   370f4:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   37104:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   37114:	6920 696e 2074 7562 0a73 0000                init bus...

00037120 <__FUNCTION__.17853>:
   37120:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

0003712c <__FUNCTION__.17860>:
   3712c:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

0003713c <crc7_syndrome_table>:
   3713c:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   3714c:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   3715c:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   3716c:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   3717c:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   3718c:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   3719c:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   371ac:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   371bc:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   371cc:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   371dc:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   371ec:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   371fc:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   3720c:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   3721c:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   3722c:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   3723c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3724c:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   3725c:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   3726c:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   3727c:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3728c:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   3729c:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   372ac:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   372bc:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   372cc:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   372dc:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   372ec:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   372fc:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   3730c:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   3731c:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   3732c:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   3733c:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   3734c:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   3735c:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   3736c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3737c:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   3738c:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   3739c:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   373ac:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   373bc:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   373cc:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   373dc:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   373ec:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   373fc:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3740c:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3741c:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3742c:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3743c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3744c:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3745c:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3746c:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3747c:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3748c:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3749c:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   374ac:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   374bc:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   374cc:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   374dc:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   374ec:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   374fc:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3750c:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3751c:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3752c:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3753c:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3754c:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3755c:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3756c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3757c:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3758c:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3759c:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   375ac:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   375bc:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   375cc:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   375dc:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   375ec:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   375fc:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3760c:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3761c:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3762c:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3763c:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3764c:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3765c:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3766c:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3767c:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3768c:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3769c:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   376ac:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   376bc:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   376cc:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   376dc:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   376ec:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   376fc:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3770c:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3771c:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3772c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3773c:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3774c:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3775c:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3776c:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3777c:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3778c:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3779c:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   377ac:	2e2e 0a2e 0000 0000 1ef4 0002 1ef4 0002     ................
   377bc:	1f84 0002 1e48 0002 1e8e 0002 1eb0 0002     ....H...........
   377cc:	1f36 0002 1f36 0002 1ff0 0002 1e1c 0002     6...6...........
   377dc:	204a 0002 204a 0002 204a 0002 204a 0002     J ..J ..J ..J ..
   377ec:	1ed2 0002 2454 0002 2454 0002 24dc 0002     ....T$..T$...$..
   377fc:	23b8 0002 23fa 0002 2418 0002 2492 0002     .#...#...$...$..
   3780c:	2492 0002 253e 0002 2390 0002 258e 0002     .$..>%...#...%..
   3781c:	258e 0002 258e 0002 258e 0002 2436 0002     .%...%...%..6$..

0003782c <__FUNCTION__.17128>:
   3782c:	7073 5f69 6d63 0064                         spi_cmd.

00037834 <__FUNCTION__.17135>:
   37834:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

00037844 <__FUNCTION__.17144>:
   37844:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

00037850 <__FUNCTION__.17177>:
   37850:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   37860:	0000 0000                                   ....

00037864 <__FUNCTION__.17223>:
   37864:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

00037874 <__FUNCTION__.17235>:
   37874:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

00037884 <__FUNCTION__.17246>:
   37884:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

00037894 <__FUNCTION__.17258>:
   37894:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

000378a4 <__FUNCTION__.17269>:
   378a4:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

000378b0 <__FUNCTION__.17290>:
   378b0:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   378c0:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   378d0:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   378e0:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   378f0:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   37900:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   37910:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   37920:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   37930:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   37940:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   37950:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   37960:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   37970:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   37980:	2074 2230 0000 0000                         t 0"....

00037988 <lun_desc>:
   37988:	daed 0001 db45 0001 db91 0001 dbdd 0001     ....E...........
   37998:	dc0d 0001 dc91 0001 dd21 0001 7970 0003     ........!...py..
   379a8:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   379b8:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   379c8:	7e72 0002 7eec 0002 7eec 0002 7e90 0002     r~...~...~...~..
   379d8:	7e8a 0002 7e96 0002 7e78 0002 7e9c 0002     .~...~..x~...~..
   379e8:	7ed2 0002 80d4 0002 8124 0002 8124 0002     .~......$...$...
   379f8:	8120 0002 80c6 0002 80e6 0002 80b6 0002      ...............
   37a08:	80f8 0002 810a 0002 8172 0002 81a0 0002     ........r.......
   37a18:	81a0 0002 819c 0002 816c 0002 8178 0002     ........l...x...
   37a28:	8166 0002 817e 0002 8184 0002               f...~.......

00037a34 <tcc_modules>:
   37a34:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

00037a40 <_tcc_gclk_ids>:
   37a40:	1a1a 001b                                   ....

00037a44 <_tcc_apbcmasks>:
   37a44:	0100 0000 0200 0000 0400 0000               ............

00037a50 <_tcc_maxs>:
   37a50:	ffff 00ff ffff 00ff ffff 0000               ............

00037a5c <_tcc_cc_nums>:
   37a5c:	0204 0002                                   ....

00037a60 <_tcc_ow_nums>:
   37a60:	0408 0002                                   ....

00037a64 <_tcc_intflag>:
   37a64:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   37a74:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   37a84:	0000 0001 0000 0002 0000 0004 0000 0008     ................

00037a94 <LfnOfs>:
   37a94:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   37aa4:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   37ab4:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   37ac4:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   37ad4:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   37ae4:	5441 2020 2020 0020                         AT     .

00037aec <excvt.4558>:
   37aec:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   37afc:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   37b0c:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   37b1c:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   37b2c:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   37b3c:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   37b4c:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   37b5c:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

00037b6c <Tbl>:
   37b6c:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   37b7c:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   37b8c:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   37b9c:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   37bac:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   37bbc:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   37bcc:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   37bdc:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   37bec:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   37bfc:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   37c0c:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   37c1c:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   37c2c:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   37c3c:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   37c4c:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   37c5c:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

00037c6c <tbl_lower.4308>:
   37c6c:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   37c7c:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   37c8c:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   37c9c:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   37cac:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   37cbc:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   37ccc:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   37cdc:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   37cec:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   37cfc:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   37d0c:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   37d1c:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   37d2c:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   37d3c:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   37d4c:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   37d5c:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   37d6c:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   37d7c:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   37d8c:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   37d9c:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   37dac:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   37dbc:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   37dcc:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   37ddc:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   37dec:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   37dfc:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   37e0c:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   37e1c:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   37e2c:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   37e3c:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

00037e4c <tbl_upper.4309>:
   37e4c:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   37e5c:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   37e6c:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   37e7c:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   37e8c:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   37e9c:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   37eac:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   37ebc:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   37ecc:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   37edc:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   37eec:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   37efc:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   37f0c:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   37f1c:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   37f2c:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   37f3c:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   37f4c:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   37f5c:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   37f6c:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   37f7c:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   37f8c:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   37f9c:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   37fac:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   37fbc:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   37fcc:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   37fdc:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   37fec:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   37ffc:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3800c:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3801c:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3802c:	d4de 0002 d4de 0002 d4de 0002 d36c 0002     ............l...
   3803c:	d4de 0002 d456 0002 d4de 0002 d4de 0002     ....V...........
   3804c:	d4de 0002 d4de 0002 d4de 0002 d4de 0002     ................
   3805c:	d4de 0002 d4d0 0002 514d 4354 0000 0000     ........MQTC....
   3806c:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3807c:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   380bc:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   380d4:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   38114:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   38124:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   38134:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   38144:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   38154:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   38164:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   38174:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   38184:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   38194:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   381a4:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   381b4:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   381c4:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   381d4:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   381e4:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   381f4:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   38204:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   38214:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   38224:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   38234:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   38244:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   38254:	5448 5054 002f 0000 0d31 0000 f5d2 0002     HTTP/...1.......
   38264:	f5cc 0002 f5c6 0002 f5c0 0002 f5d8 0002     ................
   38274:	f5ba 0002 f5d8 0002 f5b4 0002 f5ae 0002     ................
   38284:	f5d8 0002 f5a8 0002 f5a8 0002 f5a2 0002     ................
   38294:	f59c 0002 f596 0002 2000 4200 2400 4200     ......... .B.$.B
   382a4:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   382b4:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   382c4:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   382d4:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   382e4:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   382f4:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   38304:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   38314:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   38324:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   38334:	676e 5620 4d45 364c 3330 2130 0a0d 0000     ng VEML6030!....
   38344:	6e49 7469 6169 696c 657a 2064 4556 4c4d     Initialized VEML
   38354:	3036 3033 0d21 000a 6548 7061 6220 6665     6030!...Heap bef
   38364:	726f 2065 7473 7261 6974 676e 7420 7361     ore starting tas
   38374:	736b 203a 6425 0a0d 0000 0000 4c43 5f49     ks: %d......CLI_
   38384:	4154 4b53 0000 0000 5245 3a52 4320 494c     TASK....ERR: CLI
   38394:	7420 7361 206b 6f63 6c75 2064 6f6e 2074      task could not 
   383a4:	6562 6920 696e 6974 6c61 7a69 6465 0d21     be initialized!.
   383b4:	000a 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   383c4:	6174 7472 6e69 2067 4c43 3a49 2520 0d64     tarting CLI: %d.
   383d4:	000a 0000 4957 4946 545f 5341 004b 0000     ....WIFI_TASK...
   383e4:	5245 3a52 5720 4649 2049 6174 6b73 6320     ERR: WIFI task c
   383f4:	756f 646c 6e20 746f 6220 2065 6e69 7469     ould not be init
   38404:	6169 696c 657a 2164 0a0d 0000 6548 7061     ialized!....Heap
   38414:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   38424:	4957 4946 203a 6425 0a0d 0000 4955 5420     WIFI: %d....UI T
   38434:	7361 006b 5245 3a52 5520 2049 6174 6b73     ask.ERR: UI task
   38444:	6320 756f 646c 6e20 746f 6220 2065 6e69      could not be in
   38454:	7469 6169 696c 657a 2164 0a0d 0000 0000     itialized!......
   38464:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   38474:	6e69 2067 4955 5420 7361 3a6b 2520 0d64     ing UI Task: %d.
   38484:	000a 0000 6f43 746e 6f72 206c 6154 6b73     ....Control Task
   38494:	0000 0000 5245 3a52 4320 6e6f 7274 6c6f     ....ERR: Control
   384a4:	7420 7361 206b 6f63 6c75 2064 6f6e 2074      task could not 
   384b4:	6562 6920 696e 6974 6c61 7a69 6465 0d21     be initialized!.
   384c4:	000a 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   384d4:	6174 7472 6e69 2067 6f43 746e 6f72 206c     tarting Control 
   384e4:	6154 6b73 203a 6425 0a0d 0000 7245 6f72     Task: %d....Erro
   384f4:	2072 6e6f 6d20 6d65 726f 2079 6c61 6f6c     r on memory allo
   38504:	6163 6974 6e6f 6f20 206e 5246 4545 5452     cation on FREERT
   38514:	534f 0d21 000a 0000 7245 6f72 2072 6e6f     OS!.....Error on
   38524:	7320 6174 6b63 6f20 6576 6672 6f6c 2077      stack overflow 
   38534:	6e6f 4620 4552 5245 4f54 2153 0a0d 0000     on FREERTOS!....
   38544:	1ea4 0003 1e86 0003 1e40 0003 1d5e 0003     ........@...^...
   38554:	1e40 0003 1e78 0003 1e40 0003 1d5e 0003     @...x...@...^...
   38564:	1e86 0003 1e86 0003 1e78 0003 1d5e 0003     ........x...^...
   38574:	1d56 0003 1d56 0003 1d56 0003 20bc 0003     V...V...V.... ..
   38584:	2504 0003 23c4 0003 23c4 0003 23c0 0003     .%...#...#...#..
   38594:	24dc 0003 24dc 0003 24ce 0003 23c0 0003     .$...$...$...#..
   385a4:	24dc 0003 24ce 0003 24dc 0003 23c0 0003     .$...$...$...#..
   385b4:	24e4 0003 24e4 0003 24e4 0003 26e8 0003     .$...$...$...&..

000385c4 <_global_impure_ptr>:
   385c4:	0134 2000                                   4.. 

000385c8 <__sf_fake_stderr>:
	...

000385e8 <__sf_fake_stdin>:
	...

00038608 <__sf_fake_stdout>:
	...
   38628:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   38638:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   38648:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   38658:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

00038665 <_ctype_>:
   38665:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   38675:	2020 2020 2020 2020 2020 2020 2020 2020                     
   38685:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   38695:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   386a5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   386b5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   386c5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   386d5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   386e5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00038768 <_init>:
   38768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3876a:	46c0      	nop			; (mov r8, r8)
   3876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3876e:	bc08      	pop	{r3}
   38770:	469e      	mov	lr, r3
   38772:	4770      	bx	lr

00038774 <__init_array_start>:
   38774:	000120dd 	.word	0x000120dd

00038778 <_fini>:
   38778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3877a:	46c0      	nop			; (mov r8, r8)
   3877c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3877e:	bc08      	pop	{r3}
   38780:	469e      	mov	lr, r3
   38782:	4770      	bx	lr

00038784 <__fini_array_start>:
   38784:	000120b5 	.word	0x000120b5

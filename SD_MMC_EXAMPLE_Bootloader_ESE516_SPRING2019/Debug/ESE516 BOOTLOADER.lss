
ESE516 BOOTLOADER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000b830  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000094  20000000  0000b830  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000c00  20000094  0000b8c4  00020094  2**2
                  ALLOC
  3 .stack        00002004  20000c94  0000c4c4  00020094  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004a862  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005cbc  00000000  00000000  0006a977  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005987  00000000  00000000  00070633  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00001040  00000000  00000000  00075fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e30  00000000  00000000  00076ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00020e2a  00000000  00000000  00077e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001850a  00000000  00000000  00098c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00093b96  00000000  00000000  000b115e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003c14  00000000  00000000  00144cf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	98 2c 00 20 bd 68 00 00 b5 69 00 00 b5 69 00 00     .,. .h...i...i..
	...
      2c:	b5 69 00 00 00 00 00 00 00 00 00 00 b5 69 00 00     .i...........i..
      3c:	e5 01 00 00 b5 69 00 00 b5 69 00 00 b5 69 00 00     .....i...i...i..
      4c:	b5 69 00 00 b5 69 00 00 b5 69 00 00 b5 69 00 00     .i...i...i...i..
      5c:	b5 69 00 00 b5 69 00 00 49 3b 00 00 61 3b 00 00     .i...i..I;..a;..
      6c:	79 3b 00 00 91 3b 00 00 a9 3b 00 00 c1 3b 00 00     y;...;...;...;..
      7c:	b5 69 00 00 b5 69 00 00 b5 69 00 00 b5 69 00 00     .i...i...i...i..
      8c:	b5 69 00 00 b5 69 00 00 00 00 00 00 00 00 00 00     .i...i..........
      9c:	b5 69 00 00 b5 69 00 00 b5 69 00 00 b5 69 00 00     .i...i...i...i..
      ac:	b5 69 00 00 00 00 00 00                             .i......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000094 	.word	0x20000094
      d4:	00000000 	.word	0x00000000
      d8:	0000b830 	.word	0x0000b830

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000098 	.word	0x20000098
     108:	0000b830 	.word	0x0000b830
     10c:	0000b830 	.word	0x0000b830
     110:	00000000 	.word	0x00000000

00000114 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
     114:	b580      	push	{r7, lr}
     116:	b082      	sub	sp, #8
     118:	af00      	add	r7, sp, #0
     11a:	6078      	str	r0, [r7, #4]
	if (n > 0) {
     11c:	687b      	ldr	r3, [r7, #4]
     11e:	2b00      	cmp	r3, #0
     120:	d00c      	beq.n	13c <delay_cycles+0x28>
		SysTick->LOAD = n;
     122:	4b08      	ldr	r3, [pc, #32]	; (144 <delay_cycles+0x30>)
     124:	687a      	ldr	r2, [r7, #4]
     126:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
     128:	4b06      	ldr	r3, [pc, #24]	; (144 <delay_cycles+0x30>)
     12a:	2200      	movs	r2, #0
     12c:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     12e:	46c0      	nop			; (mov r8, r8)
     130:	4b04      	ldr	r3, [pc, #16]	; (144 <delay_cycles+0x30>)
     132:	681a      	ldr	r2, [r3, #0]
     134:	2380      	movs	r3, #128	; 0x80
     136:	025b      	lsls	r3, r3, #9
     138:	4013      	ands	r3, r2
     13a:	d0f9      	beq.n	130 <delay_cycles+0x1c>
		};
	}
}
     13c:	46c0      	nop			; (mov r8, r8)
     13e:	46bd      	mov	sp, r7
     140:	b002      	add	sp, #8
     142:	bd80      	pop	{r7, pc}
     144:	e000e010 	.word	0xe000e010

00000148 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     148:	b580      	push	{r7, lr}
     14a:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
     14c:	2000      	movs	r0, #0
     14e:	4b0f      	ldr	r3, [pc, #60]	; (18c <delay_init+0x44>)
     150:	4798      	blx	r3
     152:	0002      	movs	r2, r0
     154:	4b0e      	ldr	r3, [pc, #56]	; (190 <delay_init+0x48>)
     156:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
     158:	4b0d      	ldr	r3, [pc, #52]	; (190 <delay_init+0x48>)
     15a:	6818      	ldr	r0, [r3, #0]
     15c:	4b0d      	ldr	r3, [pc, #52]	; (194 <delay_init+0x4c>)
     15e:	22fa      	movs	r2, #250	; 0xfa
     160:	0091      	lsls	r1, r2, #2
     162:	4798      	blx	r3
     164:	0003      	movs	r3, r0
     166:	001a      	movs	r2, r3
     168:	4b09      	ldr	r3, [pc, #36]	; (190 <delay_init+0x48>)
     16a:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     16c:	4b08      	ldr	r3, [pc, #32]	; (190 <delay_init+0x48>)
     16e:	6818      	ldr	r0, [r3, #0]
     170:	4b08      	ldr	r3, [pc, #32]	; (194 <delay_init+0x4c>)
     172:	22fa      	movs	r2, #250	; 0xfa
     174:	0091      	lsls	r1, r2, #2
     176:	4798      	blx	r3
     178:	0003      	movs	r3, r0
     17a:	001a      	movs	r2, r3
     17c:	4b06      	ldr	r3, [pc, #24]	; (198 <delay_init+0x50>)
     17e:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     180:	4b06      	ldr	r3, [pc, #24]	; (19c <delay_init+0x54>)
     182:	2205      	movs	r2, #5
     184:	601a      	str	r2, [r3, #0]
}
     186:	46c0      	nop			; (mov r8, r8)
     188:	46bd      	mov	sp, r7
     18a:	bd80      	pop	{r7, pc}
     18c:	00006471 	.word	0x00006471
     190:	20000000 	.word	0x20000000
     194:	0000a30d 	.word	0x0000a30d
     198:	20000004 	.word	0x20000004
     19c:	e000e010 	.word	0xe000e010

000001a0 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     1a0:	b580      	push	{r7, lr}
     1a2:	b082      	sub	sp, #8
     1a4:	af00      	add	r7, sp, #0
     1a6:	6078      	str	r0, [r7, #4]
	while (n--) {
     1a8:	e004      	b.n	1b4 <delay_cycles_ms+0x14>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     1aa:	4b07      	ldr	r3, [pc, #28]	; (1c8 <delay_cycles_ms+0x28>)
     1ac:	681b      	ldr	r3, [r3, #0]
     1ae:	0018      	movs	r0, r3
     1b0:	4b06      	ldr	r3, [pc, #24]	; (1cc <delay_cycles_ms+0x2c>)
     1b2:	4798      	blx	r3
	while (n--) {
     1b4:	687b      	ldr	r3, [r7, #4]
     1b6:	1e5a      	subs	r2, r3, #1
     1b8:	607a      	str	r2, [r7, #4]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d1f5      	bne.n	1aa <delay_cycles_ms+0xa>
	}
}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	46bd      	mov	sp, r7
     1c2:	b002      	add	sp, #8
     1c4:	bd80      	pop	{r7, pc}
     1c6:	46c0      	nop			; (mov r8, r8)
     1c8:	20000000 	.word	0x20000000
     1cc:	00000115 	.word	0x00000115

000001d0 <GetSystick>:

* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/
uint32_t GetSystick(void)
{
     1d0:	b580      	push	{r7, lr}
     1d2:	af00      	add	r7, sp, #0
	return ul_tickcount;
     1d4:	4b02      	ldr	r3, [pc, #8]	; (1e0 <GetSystick+0x10>)
     1d6:	681b      	ldr	r3, [r3, #0]
}
     1d8:	0018      	movs	r0, r3
     1da:	46bd      	mov	sp, r7
     1dc:	bd80      	pop	{r7, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	200000b0 	.word	0x200000b0

000001e4 <SysTick_Handler>:
 *
 * Note:
 *
 ******************************************************************************/
void SysTick_Handler(void)
{
     1e4:	b580      	push	{r7, lr}
     1e6:	af00      	add	r7, sp, #0
	
	ul_tickcount++;
     1e8:	4b03      	ldr	r3, [pc, #12]	; (1f8 <SysTick_Handler+0x14>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	1c5a      	adds	r2, r3, #1
     1ee:	4b02      	ldr	r3, [pc, #8]	; (1f8 <SysTick_Handler+0x14>)
     1f0:	601a      	str	r2, [r3, #0]
}
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46bd      	mov	sp, r7
     1f6:	bd80      	pop	{r7, pc}
     1f8:	200000b0 	.word	0x200000b0

000001fc <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     1fc:	b580      	push	{r7, lr}
     1fe:	b084      	sub	sp, #16
     200:	af00      	add	r7, sp, #0
     202:	0002      	movs	r2, r0
     204:	1dfb      	adds	r3, r7, #7
     206:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     208:	230f      	movs	r3, #15
     20a:	18fb      	adds	r3, r7, r3
     20c:	1dfa      	adds	r2, r7, #7
     20e:	7812      	ldrb	r2, [r2, #0]
     210:	09d2      	lsrs	r2, r2, #7
     212:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     214:	230e      	movs	r3, #14
     216:	18fb      	adds	r3, r7, r3
     218:	1dfa      	adds	r2, r7, #7
     21a:	7812      	ldrb	r2, [r2, #0]
     21c:	0952      	lsrs	r2, r2, #5
     21e:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     220:	4b0d      	ldr	r3, [pc, #52]	; (258 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     222:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     224:	230f      	movs	r3, #15
     226:	18fb      	adds	r3, r7, r3
     228:	781b      	ldrb	r3, [r3, #0]
     22a:	2b00      	cmp	r3, #0
     22c:	d10f      	bne.n	24e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     22e:	230f      	movs	r3, #15
     230:	18fb      	adds	r3, r7, r3
     232:	781b      	ldrb	r3, [r3, #0]
     234:	009b      	lsls	r3, r3, #2
     236:	2210      	movs	r2, #16
     238:	4694      	mov	ip, r2
     23a:	44bc      	add	ip, r7
     23c:	4463      	add	r3, ip
     23e:	3b08      	subs	r3, #8
     240:	681a      	ldr	r2, [r3, #0]
     242:	230e      	movs	r3, #14
     244:	18fb      	adds	r3, r7, r3
     246:	781b      	ldrb	r3, [r3, #0]
     248:	01db      	lsls	r3, r3, #7
     24a:	18d3      	adds	r3, r2, r3
     24c:	e000      	b.n	250 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     24e:	2300      	movs	r3, #0
	}
}
     250:	0018      	movs	r0, r3
     252:	46bd      	mov	sp, r7
     254:	b004      	add	sp, #16
     256:	bd80      	pop	{r7, pc}
     258:	41004400 	.word	0x41004400

0000025c <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     25c:	b580      	push	{r7, lr}
     25e:	b082      	sub	sp, #8
     260:	af00      	add	r7, sp, #0
     262:	0002      	movs	r2, r0
     264:	1dfb      	adds	r3, r7, #7
     266:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     268:	1dfb      	adds	r3, r7, #7
     26a:	781b      	ldrb	r3, [r3, #0]
     26c:	0018      	movs	r0, r3
     26e:	4b03      	ldr	r3, [pc, #12]	; (27c <port_get_group_from_gpio_pin+0x20>)
     270:	4798      	blx	r3
     272:	0003      	movs	r3, r0
}
     274:	0018      	movs	r0, r3
     276:	46bd      	mov	sp, r7
     278:	b002      	add	sp, #8
     27a:	bd80      	pop	{r7, pc}
     27c:	000001fd 	.word	0x000001fd

00000280 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     280:	b580      	push	{r7, lr}
     282:	b082      	sub	sp, #8
     284:	af00      	add	r7, sp, #0
     286:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     288:	687b      	ldr	r3, [r7, #4]
     28a:	2200      	movs	r2, #0
     28c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     28e:	687b      	ldr	r3, [r7, #4]
     290:	2201      	movs	r2, #1
     292:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     294:	687b      	ldr	r3, [r7, #4]
     296:	2200      	movs	r2, #0
     298:	709a      	strb	r2, [r3, #2]
}
     29a:	46c0      	nop			; (mov r8, r8)
     29c:	46bd      	mov	sp, r7
     29e:	b002      	add	sp, #8
     2a0:	bd80      	pop	{r7, pc}
	...

000002a4 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     2a4:	b580      	push	{r7, lr}
     2a6:	b084      	sub	sp, #16
     2a8:	af00      	add	r7, sp, #0
     2aa:	0002      	movs	r2, r0
     2ac:	1dfb      	adds	r3, r7, #7
     2ae:	701a      	strb	r2, [r3, #0]
     2b0:	1dbb      	adds	r3, r7, #6
     2b2:	1c0a      	adds	r2, r1, #0
     2b4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     2b6:	1dfb      	adds	r3, r7, #7
     2b8:	781b      	ldrb	r3, [r3, #0]
     2ba:	0018      	movs	r0, r3
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <port_pin_set_output_level+0x50>)
     2be:	4798      	blx	r3
     2c0:	0003      	movs	r3, r0
     2c2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     2c4:	1dfb      	adds	r3, r7, #7
     2c6:	781b      	ldrb	r3, [r3, #0]
     2c8:	221f      	movs	r2, #31
     2ca:	4013      	ands	r3, r2
     2cc:	2201      	movs	r2, #1
     2ce:	409a      	lsls	r2, r3
     2d0:	0013      	movs	r3, r2
     2d2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     2d4:	1dbb      	adds	r3, r7, #6
     2d6:	781b      	ldrb	r3, [r3, #0]
     2d8:	2b00      	cmp	r3, #0
     2da:	d003      	beq.n	2e4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
     2dc:	68fb      	ldr	r3, [r7, #12]
     2de:	68ba      	ldr	r2, [r7, #8]
     2e0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     2e2:	e002      	b.n	2ea <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
     2e4:	68fb      	ldr	r3, [r7, #12]
     2e6:	68ba      	ldr	r2, [r7, #8]
     2e8:	615a      	str	r2, [r3, #20]
}
     2ea:	46c0      	nop			; (mov r8, r8)
     2ec:	46bd      	mov	sp, r7
     2ee:	b004      	add	sp, #16
     2f0:	bd80      	pop	{r7, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	0000025d 	.word	0x0000025d

000002f8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     2f8:	b580      	push	{r7, lr}
     2fa:	b082      	sub	sp, #8
     2fc:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
     2fe:	1d3b      	adds	r3, r7, #4
     300:	0018      	movs	r0, r3
     302:	4b0e      	ldr	r3, [pc, #56]	; (33c <system_board_init+0x44>)
     304:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     306:	1d3b      	adds	r3, r7, #4
     308:	2201      	movs	r2, #1
     30a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     30c:	1d3b      	adds	r3, r7, #4
     30e:	0019      	movs	r1, r3
     310:	2017      	movs	r0, #23
     312:	4b0b      	ldr	r3, [pc, #44]	; (340 <system_board_init+0x48>)
     314:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
     316:	2101      	movs	r1, #1
     318:	2017      	movs	r0, #23
     31a:	4b0a      	ldr	r3, [pc, #40]	; (344 <system_board_init+0x4c>)
     31c:	4798      	blx	r3

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     31e:	1d3b      	adds	r3, r7, #4
     320:	2200      	movs	r2, #0
     322:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     324:	1d3b      	adds	r3, r7, #4
     326:	2201      	movs	r2, #1
     328:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     32a:	1d3b      	adds	r3, r7, #4
     32c:	0019      	movs	r1, r3
     32e:	2037      	movs	r0, #55	; 0x37
     330:	4b03      	ldr	r3, [pc, #12]	; (340 <system_board_init+0x48>)
     332:	4798      	blx	r3
}
     334:	46c0      	nop			; (mov r8, r8)
     336:	46bd      	mov	sp, r7
     338:	b002      	add	sp, #8
     33a:	bd80      	pop	{r7, pc}
     33c:	00000281 	.word	0x00000281
     340:	00002f79 	.word	0x00002f79
     344:	000002a5 	.word	0x000002a5

00000348 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
     348:	b580      	push	{r7, lr}
     34a:	b082      	sub	sp, #8
     34c:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     34e:	4b07      	ldr	r3, [pc, #28]	; (36c <nvm_is_ready+0x24>)
     350:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     352:	687b      	ldr	r3, [r7, #4]
     354:	7d1b      	ldrb	r3, [r3, #20]
     356:	b2db      	uxtb	r3, r3
     358:	001a      	movs	r2, r3
     35a:	2301      	movs	r3, #1
     35c:	4013      	ands	r3, r2
     35e:	1e5a      	subs	r2, r3, #1
     360:	4193      	sbcs	r3, r2
     362:	b2db      	uxtb	r3, r3
}
     364:	0018      	movs	r0, r3
     366:	46bd      	mov	sp, r7
     368:	b002      	add	sp, #8
     36a:	bd80      	pop	{r7, pc}
     36c:	41004000 	.word	0x41004000

00000370 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
     370:	b580      	push	{r7, lr}
     372:	b082      	sub	sp, #8
     374:	af00      	add	r7, sp, #0
     376:	0002      	movs	r2, r0
     378:	6039      	str	r1, [r7, #0]
     37a:	1dfb      	adds	r3, r7, #7
     37c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
     37e:	1dfb      	adds	r3, r7, #7
     380:	781b      	ldrb	r3, [r3, #0]
     382:	2b01      	cmp	r3, #1
     384:	d00a      	beq.n	39c <system_apb_clock_set_mask+0x2c>
     386:	2b02      	cmp	r3, #2
     388:	d00f      	beq.n	3aa <system_apb_clock_set_mask+0x3a>
     38a:	2b00      	cmp	r3, #0
     38c:	d114      	bne.n	3b8 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     38e:	4b0e      	ldr	r3, [pc, #56]	; (3c8 <system_apb_clock_set_mask+0x58>)
     390:	4a0d      	ldr	r2, [pc, #52]	; (3c8 <system_apb_clock_set_mask+0x58>)
     392:	6991      	ldr	r1, [r2, #24]
     394:	683a      	ldr	r2, [r7, #0]
     396:	430a      	orrs	r2, r1
     398:	619a      	str	r2, [r3, #24]
			break;
     39a:	e00f      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
     39c:	4b0a      	ldr	r3, [pc, #40]	; (3c8 <system_apb_clock_set_mask+0x58>)
     39e:	4a0a      	ldr	r2, [pc, #40]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3a0:	69d1      	ldr	r1, [r2, #28]
     3a2:	683a      	ldr	r2, [r7, #0]
     3a4:	430a      	orrs	r2, r1
     3a6:	61da      	str	r2, [r3, #28]
			break;
     3a8:	e008      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     3aa:	4b07      	ldr	r3, [pc, #28]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3ac:	4a06      	ldr	r2, [pc, #24]	; (3c8 <system_apb_clock_set_mask+0x58>)
     3ae:	6a11      	ldr	r1, [r2, #32]
     3b0:	683a      	ldr	r2, [r7, #0]
     3b2:	430a      	orrs	r2, r1
     3b4:	621a      	str	r2, [r3, #32]
			break;
     3b6:	e001      	b.n	3bc <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
     3b8:	2317      	movs	r3, #23
     3ba:	e000      	b.n	3be <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
     3bc:	2300      	movs	r3, #0
}
     3be:	0018      	movs	r0, r3
     3c0:	46bd      	mov	sp, r7
     3c2:	b002      	add	sp, #8
     3c4:	bd80      	pop	{r7, pc}
     3c6:	46c0      	nop			; (mov r8, r8)
     3c8:	40000400 	.word	0x40000400

000003cc <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b084      	sub	sp, #16
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
     3d4:	4b2f      	ldr	r3, [pc, #188]	; (494 <nvm_set_config+0xc8>)
     3d6:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
     3d8:	2104      	movs	r1, #4
     3da:	2001      	movs	r0, #1
     3dc:	4b2e      	ldr	r3, [pc, #184]	; (498 <nvm_set_config+0xcc>)
     3de:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     3e0:	68fb      	ldr	r3, [r7, #12]
     3e2:	2220      	movs	r2, #32
     3e4:	32ff      	adds	r2, #255	; 0xff
     3e6:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     3e8:	4b2c      	ldr	r3, [pc, #176]	; (49c <nvm_set_config+0xd0>)
     3ea:	4798      	blx	r3
     3ec:	0003      	movs	r3, r0
     3ee:	001a      	movs	r2, r3
     3f0:	2301      	movs	r3, #1
     3f2:	4053      	eors	r3, r2
     3f4:	b2db      	uxtb	r3, r3
     3f6:	2b00      	cmp	r3, #0
     3f8:	d001      	beq.n	3fe <nvm_set_config+0x32>
		return STATUS_BUSY;
     3fa:	2305      	movs	r3, #5
     3fc:	e045      	b.n	48a <nvm_set_config+0xbe>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     3fe:	687b      	ldr	r3, [r7, #4]
     400:	781b      	ldrb	r3, [r3, #0]
     402:	021b      	lsls	r3, r3, #8
     404:	001a      	movs	r2, r3
     406:	23c0      	movs	r3, #192	; 0xc0
     408:	009b      	lsls	r3, r3, #2
     40a:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     40c:	687b      	ldr	r3, [r7, #4]
     40e:	785b      	ldrb	r3, [r3, #1]
     410:	01db      	lsls	r3, r3, #7
     412:	0019      	movs	r1, r3
     414:	23ff      	movs	r3, #255	; 0xff
     416:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     418:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     41a:	687b      	ldr	r3, [r7, #4]
     41c:	789b      	ldrb	r3, [r3, #2]
     41e:	005b      	lsls	r3, r3, #1
     420:	0019      	movs	r1, r3
     422:	231e      	movs	r3, #30
     424:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     426:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     428:	687b      	ldr	r3, [r7, #4]
     42a:	78db      	ldrb	r3, [r3, #3]
     42c:	049b      	lsls	r3, r3, #18
     42e:	0019      	movs	r1, r3
     430:	2380      	movs	r3, #128	; 0x80
     432:	02db      	lsls	r3, r3, #11
     434:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     436:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     438:	687b      	ldr	r3, [r7, #4]
     43a:	791b      	ldrb	r3, [r3, #4]
     43c:	041b      	lsls	r3, r3, #16
     43e:	0019      	movs	r1, r3
     440:	23c0      	movs	r3, #192	; 0xc0
     442:	029b      	lsls	r3, r3, #10
     444:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     446:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
     448:	68fb      	ldr	r3, [r7, #12]
     44a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     44c:	68fb      	ldr	r3, [r7, #12]
     44e:	689b      	ldr	r3, [r3, #8]
     450:	035b      	lsls	r3, r3, #13
     452:	0f5b      	lsrs	r3, r3, #29
     454:	b2db      	uxtb	r3, r3
     456:	001a      	movs	r2, r3
     458:	2308      	movs	r3, #8
     45a:	4093      	lsls	r3, r2
     45c:	b29a      	uxth	r2, r3
     45e:	4b10      	ldr	r3, [pc, #64]	; (4a0 <nvm_set_config+0xd4>)
     460:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     462:	68fb      	ldr	r3, [r7, #12]
     464:	689b      	ldr	r3, [r3, #8]
     466:	b29a      	uxth	r2, r3
     468:	4b0d      	ldr	r3, [pc, #52]	; (4a0 <nvm_set_config+0xd4>)
     46a:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     46c:	687b      	ldr	r3, [r7, #4]
     46e:	785a      	ldrb	r2, [r3, #1]
     470:	4b0b      	ldr	r3, [pc, #44]	; (4a0 <nvm_set_config+0xd4>)
     472:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     474:	68fb      	ldr	r3, [r7, #12]
     476:	8b1b      	ldrh	r3, [r3, #24]
     478:	b29b      	uxth	r3, r3
     47a:	001a      	movs	r2, r3
     47c:	2380      	movs	r3, #128	; 0x80
     47e:	005b      	lsls	r3, r3, #1
     480:	4013      	ands	r3, r2
     482:	d001      	beq.n	488 <nvm_set_config+0xbc>
		return STATUS_ERR_IO;
     484:	2310      	movs	r3, #16
     486:	e000      	b.n	48a <nvm_set_config+0xbe>
	}

	return STATUS_OK;
     488:	2300      	movs	r3, #0
}
     48a:	0018      	movs	r0, r3
     48c:	46bd      	mov	sp, r7
     48e:	b004      	add	sp, #16
     490:	bd80      	pop	{r7, pc}
     492:	46c0      	nop			; (mov r8, r8)
     494:	41004000 	.word	0x41004000
     498:	00000371 	.word	0x00000371
     49c:	00000349 	.word	0x00000349
     4a0:	200000b4 	.word	0x200000b4

000004a4 <SdCard_Initiate>:
* @return		Returns CTRL_GOOD if the SDS card was mounted incorrectly - other status otherwise
* @note         
*****************************************************************************/

Ctrl_status SdCard_Initiate(void)
{
     4a4:	b590      	push	{r4, r7, lr}
     4a6:	b083      	sub	sp, #12
     4a8:	af00      	add	r7, sp, #0
	Ctrl_status status;
	uint32_t timeStart = GetSystick();
     4aa:	4b16      	ldr	r3, [pc, #88]	; (504 <SdCard_Initiate+0x60>)
     4ac:	4798      	blx	r3
     4ae:	0003      	movs	r3, r0
     4b0:	603b      	str	r3, [r7, #0]

/* Wait card present and ready */
do {
	status = sd_mmc_test_unit_ready(0);
     4b2:	1dfc      	adds	r4, r7, #7
     4b4:	2000      	movs	r0, #0
     4b6:	4b14      	ldr	r3, [pc, #80]	; (508 <SdCard_Initiate+0x64>)
     4b8:	4798      	blx	r3
     4ba:	0003      	movs	r3, r0
     4bc:	7023      	strb	r3, [r4, #0]
	if (CTRL_FAIL == status) {
     4be:	1dfb      	adds	r3, r7, #7
     4c0:	781b      	ldrb	r3, [r3, #0]
     4c2:	2b01      	cmp	r3, #1
     4c4:	d106      	bne.n	4d4 <SdCard_Initiate+0x30>
		while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
     4c6:	46c0      	nop			; (mov r8, r8)
     4c8:	2000      	movs	r0, #0
     4ca:	4b10      	ldr	r3, [pc, #64]	; (50c <SdCard_Initiate+0x68>)
     4cc:	4798      	blx	r3
     4ce:	0003      	movs	r3, r0
     4d0:	2b02      	cmp	r3, #2
     4d2:	d1f9      	bne.n	4c8 <SdCard_Initiate+0x24>
		}
	}

	if (GetSystick() - timeStart > SD_CARD_TIMEOUT)
     4d4:	4b0b      	ldr	r3, [pc, #44]	; (504 <SdCard_Initiate+0x60>)
     4d6:	4798      	blx	r3
     4d8:	0002      	movs	r2, r0
     4da:	683b      	ldr	r3, [r7, #0]
     4dc:	1ad2      	subs	r2, r2, r3
     4de:	23fa      	movs	r3, #250	; 0xfa
     4e0:	005b      	lsls	r3, r3, #1
     4e2:	429a      	cmp	r2, r3
     4e4:	d903      	bls.n	4ee <SdCard_Initiate+0x4a>
	{
		status = CTRL_FAIL;
     4e6:	1dfb      	adds	r3, r7, #7
     4e8:	2201      	movs	r2, #1
     4ea:	701a      	strb	r2, [r3, #0]
		break;
     4ec:	e003      	b.n	4f6 <SdCard_Initiate+0x52>
	}
} while (CTRL_GOOD != status );
     4ee:	1dfb      	adds	r3, r7, #7
     4f0:	781b      	ldrb	r3, [r3, #0]
     4f2:	2b00      	cmp	r3, #0
     4f4:	d1dd      	bne.n	4b2 <SdCard_Initiate+0xe>

return status;
     4f6:	1dfb      	adds	r3, r7, #7
     4f8:	781b      	ldrb	r3, [r3, #0]
}
     4fa:	0018      	movs	r0, r3
     4fc:	46bd      	mov	sp, r7
     4fe:	b003      	add	sp, #12
     500:	bd90      	pop	{r4, r7, pc}
     502:	46c0      	nop			; (mov r8, r8)
     504:	000001d1 	.word	0x000001d1
     508:	00001dad 	.word	0x00001dad
     50c:	00001921 	.word	0x00001921

00000510 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
     510:	b580      	push	{r7, lr}
     512:	b082      	sub	sp, #8
     514:	af00      	add	r7, sp, #0
     516:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
     518:	687b      	ldr	r3, [r7, #4]
     51a:	7c1b      	ldrb	r3, [r3, #16]
     51c:	2b00      	cmp	r3, #0
     51e:	d00b      	beq.n	538 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     520:	687b      	ldr	r3, [r7, #4]
     522:	689b      	ldr	r3, [r3, #8]
     524:	1c5a      	adds	r2, r3, #1
     526:	687b      	ldr	r3, [r7, #4]
     528:	68d9      	ldr	r1, [r3, #12]
     52a:	4b10      	ldr	r3, [pc, #64]	; (56c <advance_pointer+0x5c>)
     52c:	0010      	movs	r0, r2
     52e:	4798      	blx	r3
     530:	000b      	movs	r3, r1
     532:	001a      	movs	r2, r3
     534:	687b      	ldr	r3, [r7, #4]
     536:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
     538:	687b      	ldr	r3, [r7, #4]
     53a:	685b      	ldr	r3, [r3, #4]
     53c:	1c5a      	adds	r2, r3, #1
     53e:	687b      	ldr	r3, [r7, #4]
     540:	68d9      	ldr	r1, [r3, #12]
     542:	4b0a      	ldr	r3, [pc, #40]	; (56c <advance_pointer+0x5c>)
     544:	0010      	movs	r0, r2
     546:	4798      	blx	r3
     548:	000b      	movs	r3, r1
     54a:	001a      	movs	r2, r3
     54c:	687b      	ldr	r3, [r7, #4]
     54e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
     550:	687b      	ldr	r3, [r7, #4]
     552:	685a      	ldr	r2, [r3, #4]
     554:	687b      	ldr	r3, [r7, #4]
     556:	689b      	ldr	r3, [r3, #8]
     558:	1ad3      	subs	r3, r2, r3
     55a:	425a      	negs	r2, r3
     55c:	4153      	adcs	r3, r2
     55e:	b2da      	uxtb	r2, r3
     560:	687b      	ldr	r3, [r7, #4]
     562:	741a      	strb	r2, [r3, #16]
 }
     564:	46c0      	nop			; (mov r8, r8)
     566:	46bd      	mov	sp, r7
     568:	b002      	add	sp, #8
     56a:	bd80      	pop	{r7, pc}
     56c:	0000a419 	.word	0x0000a419

00000570 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
     570:	b580      	push	{r7, lr}
     572:	b082      	sub	sp, #8
     574:	af00      	add	r7, sp, #0
     576:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
     578:	687b      	ldr	r3, [r7, #4]
     57a:	2200      	movs	r2, #0
     57c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
     57e:	687b      	ldr	r3, [r7, #4]
     580:	689b      	ldr	r3, [r3, #8]
     582:	1c5a      	adds	r2, r3, #1
     584:	687b      	ldr	r3, [r7, #4]
     586:	68d9      	ldr	r1, [r3, #12]
     588:	4b05      	ldr	r3, [pc, #20]	; (5a0 <retreat_pointer+0x30>)
     58a:	0010      	movs	r0, r2
     58c:	4798      	blx	r3
     58e:	000b      	movs	r3, r1
     590:	001a      	movs	r2, r3
     592:	687b      	ldr	r3, [r7, #4]
     594:	609a      	str	r2, [r3, #8]
 }
     596:	46c0      	nop			; (mov r8, r8)
     598:	46bd      	mov	sp, r7
     59a:	b002      	add	sp, #8
     59c:	bd80      	pop	{r7, pc}
     59e:	46c0      	nop			; (mov r8, r8)
     5a0:	0000a419 	.word	0x0000a419

000005a4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
     5a4:	b580      	push	{r7, lr}
     5a6:	b084      	sub	sp, #16
     5a8:	af00      	add	r7, sp, #0
     5aa:	6078      	str	r0, [r7, #4]
     5ac:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
     5ae:	2014      	movs	r0, #20
     5b0:	4b09      	ldr	r3, [pc, #36]	; (5d8 <circular_buf_init+0x34>)
     5b2:	4798      	blx	r3
     5b4:	0003      	movs	r3, r0
     5b6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
     5b8:	68fb      	ldr	r3, [r7, #12]
     5ba:	687a      	ldr	r2, [r7, #4]
     5bc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
     5be:	68fb      	ldr	r3, [r7, #12]
     5c0:	683a      	ldr	r2, [r7, #0]
     5c2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
     5c4:	68fb      	ldr	r3, [r7, #12]
     5c6:	0018      	movs	r0, r3
     5c8:	4b04      	ldr	r3, [pc, #16]	; (5dc <circular_buf_init+0x38>)
     5ca:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
     5cc:	68fb      	ldr	r3, [r7, #12]
 }
     5ce:	0018      	movs	r0, r3
     5d0:	46bd      	mov	sp, r7
     5d2:	b004      	add	sp, #16
     5d4:	bd80      	pop	{r7, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	0000a695 	.word	0x0000a695
     5dc:	000005e1 	.word	0x000005e1

000005e0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
     5e0:	b580      	push	{r7, lr}
     5e2:	b082      	sub	sp, #8
     5e4:	af00      	add	r7, sp, #0
     5e6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
     5e8:	687b      	ldr	r3, [r7, #4]
     5ea:	2200      	movs	r2, #0
     5ec:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
     5ee:	687b      	ldr	r3, [r7, #4]
     5f0:	2200      	movs	r2, #0
     5f2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
     5f4:	687b      	ldr	r3, [r7, #4]
     5f6:	2200      	movs	r2, #0
     5f8:	741a      	strb	r2, [r3, #16]
 }
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	46bd      	mov	sp, r7
     5fe:	b002      	add	sp, #8
     600:	bd80      	pop	{r7, pc}
	...

00000604 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
     604:	b580      	push	{r7, lr}
     606:	b082      	sub	sp, #8
     608:	af00      	add	r7, sp, #0
     60a:	6078      	str	r0, [r7, #4]
     60c:	000a      	movs	r2, r1
     60e:	1cfb      	adds	r3, r7, #3
     610:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
     612:	687b      	ldr	r3, [r7, #4]
     614:	681a      	ldr	r2, [r3, #0]
     616:	687b      	ldr	r3, [r7, #4]
     618:	685b      	ldr	r3, [r3, #4]
     61a:	18d3      	adds	r3, r2, r3
     61c:	1cfa      	adds	r2, r7, #3
     61e:	7812      	ldrb	r2, [r2, #0]
     620:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
     622:	687b      	ldr	r3, [r7, #4]
     624:	0018      	movs	r0, r3
     626:	4b03      	ldr	r3, [pc, #12]	; (634 <circular_buf_put+0x30>)
     628:	4798      	blx	r3
 }
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	46bd      	mov	sp, r7
     62e:	b002      	add	sp, #8
     630:	bd80      	pop	{r7, pc}
     632:	46c0      	nop			; (mov r8, r8)
     634:	00000511 	.word	0x00000511

00000638 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
     638:	b580      	push	{r7, lr}
     63a:	b084      	sub	sp, #16
     63c:	af00      	add	r7, sp, #0
     63e:	6078      	str	r0, [r7, #4]
     640:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
     642:	2301      	movs	r3, #1
     644:	425b      	negs	r3, r3
     646:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
     648:	687b      	ldr	r3, [r7, #4]
     64a:	0018      	movs	r0, r3
     64c:	4b0d      	ldr	r3, [pc, #52]	; (684 <circular_buf_get+0x4c>)
     64e:	4798      	blx	r3
     650:	0003      	movs	r3, r0
     652:	001a      	movs	r2, r3
     654:	2301      	movs	r3, #1
     656:	4053      	eors	r3, r2
     658:	b2db      	uxtb	r3, r3
     65a:	2b00      	cmp	r3, #0
     65c:	d00d      	beq.n	67a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
     65e:	687b      	ldr	r3, [r7, #4]
     660:	681a      	ldr	r2, [r3, #0]
     662:	687b      	ldr	r3, [r7, #4]
     664:	689b      	ldr	r3, [r3, #8]
     666:	18d3      	adds	r3, r2, r3
     668:	781a      	ldrb	r2, [r3, #0]
     66a:	683b      	ldr	r3, [r7, #0]
     66c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
     66e:	687b      	ldr	r3, [r7, #4]
     670:	0018      	movs	r0, r3
     672:	4b05      	ldr	r3, [pc, #20]	; (688 <circular_buf_get+0x50>)
     674:	4798      	blx	r3

		 r = 0;
     676:	2300      	movs	r3, #0
     678:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
     67a:	68fb      	ldr	r3, [r7, #12]
 }
     67c:	0018      	movs	r0, r3
     67e:	46bd      	mov	sp, r7
     680:	b004      	add	sp, #16
     682:	bd80      	pop	{r7, pc}
     684:	0000068d 	.word	0x0000068d
     688:	00000571 	.word	0x00000571

0000068c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
     68c:	b580      	push	{r7, lr}
     68e:	b082      	sub	sp, #8
     690:	af00      	add	r7, sp, #0
     692:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
     694:	687b      	ldr	r3, [r7, #4]
     696:	7c1b      	ldrb	r3, [r3, #16]
     698:	2201      	movs	r2, #1
     69a:	4053      	eors	r3, r2
     69c:	b2db      	uxtb	r3, r3
     69e:	2b00      	cmp	r3, #0
     6a0:	d007      	beq.n	6b2 <circular_buf_empty+0x26>
     6a2:	687b      	ldr	r3, [r7, #4]
     6a4:	685a      	ldr	r2, [r3, #4]
     6a6:	687b      	ldr	r3, [r7, #4]
     6a8:	689b      	ldr	r3, [r3, #8]
     6aa:	429a      	cmp	r2, r3
     6ac:	d101      	bne.n	6b2 <circular_buf_empty+0x26>
     6ae:	2301      	movs	r3, #1
     6b0:	e000      	b.n	6b4 <circular_buf_empty+0x28>
     6b2:	2300      	movs	r3, #0
     6b4:	1c1a      	adds	r2, r3, #0
     6b6:	2301      	movs	r3, #1
     6b8:	4013      	ands	r3, r2
     6ba:	b2db      	uxtb	r3, r3
 }
     6bc:	0018      	movs	r0, r3
     6be:	46bd      	mov	sp, r7
     6c0:	b002      	add	sp, #8
     6c2:	bd80      	pop	{r7, pc}

000006c4 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     6c4:	b580      	push	{r7, lr}
     6c6:	b082      	sub	sp, #8
     6c8:	af00      	add	r7, sp, #0
     6ca:	0002      	movs	r2, r0
     6cc:	1dfb      	adds	r3, r7, #7
     6ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6d0:	4b06      	ldr	r3, [pc, #24]	; (6ec <system_interrupt_enable+0x28>)
     6d2:	1dfa      	adds	r2, r7, #7
     6d4:	7812      	ldrb	r2, [r2, #0]
     6d6:	0011      	movs	r1, r2
     6d8:	221f      	movs	r2, #31
     6da:	400a      	ands	r2, r1
     6dc:	2101      	movs	r1, #1
     6de:	4091      	lsls	r1, r2
     6e0:	000a      	movs	r2, r1
     6e2:	601a      	str	r2, [r3, #0]
}
     6e4:	46c0      	nop			; (mov r8, r8)
     6e6:	46bd      	mov	sp, r7
     6e8:	b002      	add	sp, #8
     6ea:	bd80      	pop	{r7, pc}
     6ec:	e000e100 	.word	0xe000e100

000006f0 <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b082      	sub	sp, #8
     6f4:	af00      	add	r7, sp, #0
     6f6:	0002      	movs	r2, r0
     6f8:	1dfb      	adds	r3, r7, #7
     6fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     6fc:	4a07      	ldr	r2, [pc, #28]	; (71c <system_interrupt_disable+0x2c>)
     6fe:	1dfb      	adds	r3, r7, #7
     700:	781b      	ldrb	r3, [r3, #0]
     702:	0019      	movs	r1, r3
     704:	231f      	movs	r3, #31
     706:	400b      	ands	r3, r1
     708:	2101      	movs	r1, #1
     70a:	4099      	lsls	r1, r3
     70c:	000b      	movs	r3, r1
     70e:	0019      	movs	r1, r3
     710:	2380      	movs	r3, #128	; 0x80
     712:	50d1      	str	r1, [r2, r3]
}
     714:	46c0      	nop			; (mov r8, r8)
     716:	46bd      	mov	sp, r7
     718:	b002      	add	sp, #8
     71a:	bd80      	pop	{r7, pc}
     71c:	e000e100 	.word	0xe000e100

00000720 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
     720:	b580      	push	{r7, lr}
     722:	b084      	sub	sp, #16
     724:	af00      	add	r7, sp, #0
     726:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     728:	687b      	ldr	r3, [r7, #4]
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     72e:	68fb      	ldr	r3, [r7, #12]
     730:	69db      	ldr	r3, [r3, #28]
     732:	1e5a      	subs	r2, r3, #1
     734:	4193      	sbcs	r3, r2
     736:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
     738:	0018      	movs	r0, r3
     73a:	46bd      	mov	sp, r7
     73c:	b004      	add	sp, #16
     73e:	bd80      	pop	{r7, pc}

00000740 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
     740:	b580      	push	{r7, lr}
     742:	b082      	sub	sp, #8
     744:	af00      	add	r7, sp, #0
     746:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     748:	46c0      	nop			; (mov r8, r8)
     74a:	687b      	ldr	r3, [r7, #4]
     74c:	0018      	movs	r0, r3
     74e:	4b04      	ldr	r3, [pc, #16]	; (760 <_usart_wait_for_sync+0x20>)
     750:	4798      	blx	r3
     752:	1e03      	subs	r3, r0, #0
     754:	d1f9      	bne.n	74a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
     756:	46c0      	nop			; (mov r8, r8)
     758:	46bd      	mov	sp, r7
     75a:	b002      	add	sp, #8
     75c:	bd80      	pop	{r7, pc}
     75e:	46c0      	nop			; (mov r8, r8)
     760:	00000721 	.word	0x00000721

00000764 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
     764:	b580      	push	{r7, lr}
     766:	b082      	sub	sp, #8
     768:	af00      	add	r7, sp, #0
     76a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     76c:	687b      	ldr	r3, [r7, #4]
     76e:	2280      	movs	r2, #128	; 0x80
     770:	05d2      	lsls	r2, r2, #23
     772:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     774:	687b      	ldr	r3, [r7, #4]
     776:	2200      	movs	r2, #0
     778:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
     77a:	687b      	ldr	r3, [r7, #4]
     77c:	22ff      	movs	r2, #255	; 0xff
     77e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
     780:	687b      	ldr	r3, [r7, #4]
     782:	2200      	movs	r2, #0
     784:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     786:	687b      	ldr	r3, [r7, #4]
     788:	2200      	movs	r2, #0
     78a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	2296      	movs	r2, #150	; 0x96
     790:	0192      	lsls	r2, r2, #6
     792:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
     794:	687b      	ldr	r3, [r7, #4]
     796:	2224      	movs	r2, #36	; 0x24
     798:	2101      	movs	r1, #1
     79a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
     79c:	687b      	ldr	r3, [r7, #4]
     79e:	2225      	movs	r2, #37	; 0x25
     7a0:	2101      	movs	r1, #1
     7a2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
     7a4:	687b      	ldr	r3, [r7, #4]
     7a6:	2226      	movs	r2, #38	; 0x26
     7a8:	2100      	movs	r1, #0
     7aa:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	2227      	movs	r2, #39	; 0x27
     7b0:	2100      	movs	r1, #0
     7b2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
     7b4:	687b      	ldr	r3, [r7, #4]
     7b6:	2200      	movs	r2, #0
     7b8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
     7ba:	687b      	ldr	r3, [r7, #4]
     7bc:	2288      	movs	r2, #136	; 0x88
     7be:	0352      	lsls	r2, r2, #13
     7c0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
     7c2:	687b      	ldr	r3, [r7, #4]
     7c4:	222c      	movs	r2, #44	; 0x2c
     7c6:	2100      	movs	r1, #0
     7c8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	222d      	movs	r2, #45	; 0x2d
     7ce:	2100      	movs	r1, #0
     7d0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
     7d2:	687b      	ldr	r3, [r7, #4]
     7d4:	2200      	movs	r2, #0
     7d6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
     7d8:	687b      	ldr	r3, [r7, #4]
     7da:	2200      	movs	r2, #0
     7dc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
     7de:	687b      	ldr	r3, [r7, #4]
     7e0:	2200      	movs	r2, #0
     7e2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
     7e4:	687b      	ldr	r3, [r7, #4]
     7e6:	2200      	movs	r2, #0
     7e8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
     7ea:	687b      	ldr	r3, [r7, #4]
     7ec:	2200      	movs	r2, #0
     7ee:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
     7f0:	687b      	ldr	r3, [r7, #4]
     7f2:	2200      	movs	r2, #0
     7f4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
     7f6:	687b      	ldr	r3, [r7, #4]
     7f8:	2200      	movs	r2, #0
     7fa:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	2200      	movs	r2, #0
     800:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
     802:	687b      	ldr	r3, [r7, #4]
     804:	2200      	movs	r2, #0
     806:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
     808:	687b      	ldr	r3, [r7, #4]
     80a:	2200      	movs	r2, #0
     80c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
     80e:	687b      	ldr	r3, [r7, #4]
     810:	2213      	movs	r2, #19
     812:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
     814:	687b      	ldr	r3, [r7, #4]
     816:	2200      	movs	r2, #0
     818:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
     81a:	46c0      	nop			; (mov r8, r8)
     81c:	46bd      	mov	sp, r7
     81e:	b002      	add	sp, #8
     820:	bd80      	pop	{r7, pc}
	...

00000824 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
     824:	b580      	push	{r7, lr}
     826:	b084      	sub	sp, #16
     828:	af00      	add	r7, sp, #0
     82a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     82c:	687b      	ldr	r3, [r7, #4]
     82e:	681b      	ldr	r3, [r3, #0]
     830:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     832:	687b      	ldr	r3, [r7, #4]
     834:	681b      	ldr	r3, [r3, #0]
     836:	0018      	movs	r0, r3
     838:	4b09      	ldr	r3, [pc, #36]	; (860 <usart_enable+0x3c>)
     83a:	4798      	blx	r3
     83c:	0003      	movs	r3, r0
     83e:	0018      	movs	r0, r3
     840:	4b08      	ldr	r3, [pc, #32]	; (864 <usart_enable+0x40>)
     842:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     844:	687b      	ldr	r3, [r7, #4]
     846:	0018      	movs	r0, r3
     848:	4b07      	ldr	r3, [pc, #28]	; (868 <usart_enable+0x44>)
     84a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     84c:	68fb      	ldr	r3, [r7, #12]
     84e:	681b      	ldr	r3, [r3, #0]
     850:	2202      	movs	r2, #2
     852:	431a      	orrs	r2, r3
     854:	68fb      	ldr	r3, [r7, #12]
     856:	601a      	str	r2, [r3, #0]
}
     858:	46c0      	nop			; (mov r8, r8)
     85a:	46bd      	mov	sp, r7
     85c:	b004      	add	sp, #16
     85e:	bd80      	pop	{r7, pc}
     860:	00003b05 	.word	0x00003b05
     864:	000006c5 	.word	0x000006c5
     868:	00000741 	.word	0x00000741

0000086c <usart_disable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_disable(
		const struct usart_module *const module)
{
     86c:	b580      	push	{r7, lr}
     86e:	b084      	sub	sp, #16
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     874:	687b      	ldr	r3, [r7, #4]
     876:	681b      	ldr	r3, [r3, #0]
     878:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Disable Global interrupt for module */
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
     87a:	687b      	ldr	r3, [r7, #4]
     87c:	681b      	ldr	r3, [r3, #0]
     87e:	0018      	movs	r0, r3
     880:	4b0a      	ldr	r3, [pc, #40]	; (8ac <usart_disable+0x40>)
     882:	4798      	blx	r3
     884:	0003      	movs	r3, r0
     886:	0018      	movs	r0, r3
     888:	4b09      	ldr	r3, [pc, #36]	; (8b0 <usart_disable+0x44>)
     88a:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
     88c:	687b      	ldr	r3, [r7, #4]
     88e:	0018      	movs	r0, r3
     890:	4b08      	ldr	r3, [pc, #32]	; (8b4 <usart_disable+0x48>)
     892:	4798      	blx	r3

	/* Disable USART module */
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     894:	68fb      	ldr	r3, [r7, #12]
     896:	681b      	ldr	r3, [r3, #0]
     898:	2202      	movs	r2, #2
     89a:	4393      	bics	r3, r2
     89c:	001a      	movs	r2, r3
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	601a      	str	r2, [r3, #0]
}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	46bd      	mov	sp, r7
     8a6:	b004      	add	sp, #16
     8a8:	bd80      	pop	{r7, pc}
     8aa:	46c0      	nop			; (mov r8, r8)
     8ac:	00003b05 	.word	0x00003b05
     8b0:	000006f1 	.word	0x000006f1
     8b4:	00000741 	.word	0x00000741

000008b8 <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
     8b8:	b580      	push	{r7, lr}
     8ba:	b082      	sub	sp, #8
     8bc:	af00      	add	r7, sp, #0
     8be:	6078      	str	r0, [r7, #4]
     8c0:	000a      	movs	r2, r1
     8c2:	1cfb      	adds	r3, r7, #3
     8c4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     8c6:	687b      	ldr	r3, [r7, #4]
     8c8:	2231      	movs	r2, #49	; 0x31
     8ca:	5c9b      	ldrb	r3, [r3, r2]
     8cc:	b25a      	sxtb	r2, r3
     8ce:	1cfb      	adds	r3, r7, #3
     8d0:	781b      	ldrb	r3, [r3, #0]
     8d2:	2101      	movs	r1, #1
     8d4:	4099      	lsls	r1, r3
     8d6:	000b      	movs	r3, r1
     8d8:	b25b      	sxtb	r3, r3
     8da:	4313      	orrs	r3, r2
     8dc:	b25b      	sxtb	r3, r3
     8de:	b2d9      	uxtb	r1, r3
     8e0:	687b      	ldr	r3, [r7, #4]
     8e2:	2231      	movs	r2, #49	; 0x31
     8e4:	5499      	strb	r1, [r3, r2]

}
     8e6:	46c0      	nop			; (mov r8, r8)
     8e8:	46bd      	mov	sp, r7
     8ea:	b002      	add	sp, #8
     8ec:	bd80      	pop	{r7, pc}
	...

000008f0 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct usart_module *const module,
		uint8_t c)
{
     8f0:	b580      	push	{r7, lr}
     8f2:	b082      	sub	sp, #8
     8f4:	af00      	add	r7, sp, #0
     8f6:	6078      	str	r0, [r7, #4]
     8f8:	000a      	movs	r2, r1
     8fa:	1cfb      	adds	r3, r7, #3
     8fc:	701a      	strb	r2, [r3, #0]
	while(STATUS_OK !=usart_write_wait(module, c));
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	1cfb      	adds	r3, r7, #3
     902:	781b      	ldrb	r3, [r3, #0]
     904:	b29a      	uxth	r2, r3
     906:	687b      	ldr	r3, [r7, #4]
     908:	0011      	movs	r1, r2
     90a:	0018      	movs	r0, r3
     90c:	4b04      	ldr	r3, [pc, #16]	; (920 <usart_serial_putchar+0x30>)
     90e:	4798      	blx	r3
     910:	1e03      	subs	r3, r0, #0
     912:	d1f5      	bne.n	900 <usart_serial_putchar+0x10>

	return STATUS_OK;
     914:	2300      	movs	r3, #0
}
     916:	0018      	movs	r0, r3
     918:	46bd      	mov	sp, r7
     91a:	b002      	add	sp, #8
     91c:	bd80      	pop	{r7, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	0000521d 	.word	0x0000521d

00000924 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
     924:	b580      	push	{r7, lr}
     926:	b084      	sub	sp, #16
     928:	af00      	add	r7, sp, #0
     92a:	6078      	str	r0, [r7, #4]
     92c:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
     92e:	230e      	movs	r3, #14
     930:	18fb      	adds	r3, r7, r3
     932:	2200      	movs	r2, #0
     934:	801a      	strh	r2, [r3, #0]

	while(STATUS_OK != usart_read_wait(module, &temp));
     936:	46c0      	nop			; (mov r8, r8)
     938:	230e      	movs	r3, #14
     93a:	18fa      	adds	r2, r7, r3
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	0011      	movs	r1, r2
     940:	0018      	movs	r0, r3
     942:	4b07      	ldr	r3, [pc, #28]	; (960 <usart_serial_getchar+0x3c>)
     944:	4798      	blx	r3
     946:	1e03      	subs	r3, r0, #0
     948:	d1f6      	bne.n	938 <usart_serial_getchar+0x14>

	*c = temp;
     94a:	230e      	movs	r3, #14
     94c:	18fb      	adds	r3, r7, r3
     94e:	881b      	ldrh	r3, [r3, #0]
     950:	b2da      	uxtb	r2, r3
     952:	683b      	ldr	r3, [r7, #0]
     954:	701a      	strb	r2, [r3, #0]
}
     956:	46c0      	nop			; (mov r8, r8)
     958:	46bd      	mov	sp, r7
     95a:	b004      	add	sp, #16
     95c:	bd80      	pop	{r7, pc}
     95e:	46c0      	nop			; (mov r8, r8)
     960:	00005281 	.word	0x00005281

00000964 <stdio_serial_init>:
 */
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
     964:	b580      	push	{r7, lr}
     966:	b084      	sub	sp, #16
     968:	af00      	add	r7, sp, #0
     96a:	60f8      	str	r0, [r7, #12]
     96c:	60b9      	str	r1, [r7, #8]
     96e:	607a      	str	r2, [r7, #4]
	stdio_base = (void *)module;
     970:	4b0d      	ldr	r3, [pc, #52]	; (9a8 <stdio_serial_init+0x44>)
     972:	68fa      	ldr	r2, [r7, #12]
     974:	601a      	str	r2, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     976:	4b0d      	ldr	r3, [pc, #52]	; (9ac <stdio_serial_init+0x48>)
     978:	4a0d      	ldr	r2, [pc, #52]	; (9b0 <stdio_serial_init+0x4c>)
     97a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     97c:	4b0d      	ldr	r3, [pc, #52]	; (9b4 <stdio_serial_init+0x50>)
     97e:	4a0e      	ldr	r2, [pc, #56]	; (9b8 <stdio_serial_init+0x54>)
     980:	601a      	str	r2, [r3, #0]

	//usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
     982:	4b0e      	ldr	r3, [pc, #56]	; (9bc <stdio_serial_init+0x58>)
     984:	681b      	ldr	r3, [r3, #0]
     986:	689b      	ldr	r3, [r3, #8]
     988:	2100      	movs	r1, #0
     98a:	0018      	movs	r0, r3
     98c:	4b0c      	ldr	r3, [pc, #48]	; (9c0 <stdio_serial_init+0x5c>)
     98e:	4798      	blx	r3
	setbuf(stdin, NULL);
     990:	4b0a      	ldr	r3, [pc, #40]	; (9bc <stdio_serial_init+0x58>)
     992:	681b      	ldr	r3, [r3, #0]
     994:	685b      	ldr	r3, [r3, #4]
     996:	2100      	movs	r1, #0
     998:	0018      	movs	r0, r3
     99a:	4b09      	ldr	r3, [pc, #36]	; (9c0 <stdio_serial_init+0x5c>)
     99c:	4798      	blx	r3
	// Note: Already the case in IAR's Normal DLIB default configuration
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
}
     99e:	46c0      	nop			; (mov r8, r8)
     9a0:	46bd      	mov	sp, r7
     9a2:	b004      	add	sp, #16
     9a4:	bd80      	pop	{r7, pc}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	200009f8 	.word	0x200009f8
     9ac:	200009f4 	.word	0x200009f4
     9b0:	000008f1 	.word	0x000008f1
     9b4:	200009f0 	.word	0x200009f0
     9b8:	00000925 	.word	0x00000925
     9bc:	20000030 	.word	0x20000030
     9c0:	0000a841 	.word	0x0000a841

000009c4 <InitializeSerialConsole>:
*				asynchronous reads and writes. 
* @note			Call from main once to initialize Hardware.
*****************************************************************************/

void InitializeSerialConsole()
{
     9c4:	b580      	push	{r7, lr}
     9c6:	af00      	add	r7, sp, #0

	//Initialize circular buffers for RX and TX
	cbufRx = circular_buf_init((uint8_t*)rxCharacterBuffer, RX_BUFFER_SIZE);
     9c8:	2380      	movs	r3, #128	; 0x80
     9ca:	00da      	lsls	r2, r3, #3
     9cc:	4b0f      	ldr	r3, [pc, #60]	; (a0c <InitializeSerialConsole+0x48>)
     9ce:	0011      	movs	r1, r2
     9d0:	0018      	movs	r0, r3
     9d2:	4b0f      	ldr	r3, [pc, #60]	; (a10 <InitializeSerialConsole+0x4c>)
     9d4:	4798      	blx	r3
     9d6:	0002      	movs	r2, r0
     9d8:	4b0e      	ldr	r3, [pc, #56]	; (a14 <InitializeSerialConsole+0x50>)
     9da:	601a      	str	r2, [r3, #0]
	cbufTx = circular_buf_init((uint8_t*)txCharacterBuffer, TX_BUFFER_SIZE);
     9dc:	2380      	movs	r3, #128	; 0x80
     9de:	00da      	lsls	r2, r3, #3
     9e0:	4b0d      	ldr	r3, [pc, #52]	; (a18 <InitializeSerialConsole+0x54>)
     9e2:	0011      	movs	r1, r2
     9e4:	0018      	movs	r0, r3
     9e6:	4b0a      	ldr	r3, [pc, #40]	; (a10 <InitializeSerialConsole+0x4c>)
     9e8:	4798      	blx	r3
     9ea:	0002      	movs	r2, r0
     9ec:	4b0b      	ldr	r3, [pc, #44]	; (a1c <InitializeSerialConsole+0x58>)
     9ee:	601a      	str	r2, [r3, #0]

	//Configure USART and Callbacks
	configure_usart();
     9f0:	4b0b      	ldr	r3, [pc, #44]	; (a20 <InitializeSerialConsole+0x5c>)
     9f2:	4798      	blx	r3
	configure_usart_callbacks();
     9f4:	4b0b      	ldr	r3, [pc, #44]	; (a24 <InitializeSerialConsole+0x60>)
     9f6:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Kicks off constant reading of characters
     9f8:	490b      	ldr	r1, [pc, #44]	; (a28 <InitializeSerialConsole+0x64>)
     9fa:	4b0c      	ldr	r3, [pc, #48]	; (a2c <InitializeSerialConsole+0x68>)
     9fc:	2201      	movs	r2, #1
     9fe:	0018      	movs	r0, r3
     a00:	4b0b      	ldr	r3, [pc, #44]	; (a30 <InitializeSerialConsole+0x6c>)
     a02:	4798      	blx	r3

	//Add any other calls you need to do to initialize your Serial Console
}
     a04:	46c0      	nop			; (mov r8, r8)
     a06:	46bd      	mov	sp, r7
     a08:	bd80      	pop	{r7, pc}
     a0a:	46c0      	nop			; (mov r8, r8)
     a0c:	200005c8 	.word	0x200005c8
     a10:	000005a5 	.word	0x000005a5
     a14:	200001c0 	.word	0x200001c0
     a18:	200001c8 	.word	0x200001c8
     a1c:	200009cc 	.word	0x200009cc
     a20:	00000af9 	.word	0x00000af9
     a24:	00000b81 	.word	0x00000b81
     a28:	200001c4 	.word	0x200001c4
     a2c:	2000018c 	.word	0x2000018c
     a30:	0000553d 	.word	0x0000553d

00000a34 <DeinitializeSerialConsole>:


void DeinitializeSerialConsole()
{
     a34:	b580      	push	{r7, lr}
     a36:	af00      	add	r7, sp, #0
	usart_disable(&usart_instance);
     a38:	4b03      	ldr	r3, [pc, #12]	; (a48 <DeinitializeSerialConsole+0x14>)
     a3a:	0018      	movs	r0, r3
     a3c:	4b03      	ldr	r3, [pc, #12]	; (a4c <DeinitializeSerialConsole+0x18>)
     a3e:	4798      	blx	r3
}
     a40:	46c0      	nop			; (mov r8, r8)
     a42:	46bd      	mov	sp, r7
     a44:	bd80      	pop	{r7, pc}
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	2000018c 	.word	0x2000018c
     a4c:	0000086d 	.word	0x0000086d

00000a50 <SerialConsoleWriteString>:
* @brief		Writes a string to be written to the uart. Copies the string to a ring buffer that is used to hold the text send to the uart
* @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'
* @note			Use to send a string of characters to the user via UART
*****************************************************************************/
void SerialConsoleWriteString(char * string)
{
     a50:	b580      	push	{r7, lr}
     a52:	b084      	sub	sp, #16
     a54:	af00      	add	r7, sp, #0
     a56:	6078      	str	r0, [r7, #4]
	if(string != NULL)
     a58:	687b      	ldr	r3, [r7, #4]
     a5a:	2b00      	cmp	r3, #0
     a5c:	d02a      	beq.n	ab4 <SerialConsoleWriteString+0x64>
	{
		for (size_t iter = 0; iter < strlen(string); iter++)
     a5e:	2300      	movs	r3, #0
     a60:	60fb      	str	r3, [r7, #12]
     a62:	e00b      	b.n	a7c <SerialConsoleWriteString+0x2c>
		{
			circular_buf_put(cbufTx, string[iter]);
     a64:	4b15      	ldr	r3, [pc, #84]	; (abc <SerialConsoleWriteString+0x6c>)
     a66:	6818      	ldr	r0, [r3, #0]
     a68:	687a      	ldr	r2, [r7, #4]
     a6a:	68fb      	ldr	r3, [r7, #12]
     a6c:	18d3      	adds	r3, r2, r3
     a6e:	781b      	ldrb	r3, [r3, #0]
     a70:	0019      	movs	r1, r3
     a72:	4b13      	ldr	r3, [pc, #76]	; (ac0 <SerialConsoleWriteString+0x70>)
     a74:	4798      	blx	r3
		for (size_t iter = 0; iter < strlen(string); iter++)
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	3301      	adds	r3, #1
     a7a:	60fb      	str	r3, [r7, #12]
     a7c:	687b      	ldr	r3, [r7, #4]
     a7e:	0018      	movs	r0, r3
     a80:	4b10      	ldr	r3, [pc, #64]	; (ac4 <SerialConsoleWriteString+0x74>)
     a82:	4798      	blx	r3
     a84:	0002      	movs	r2, r0
     a86:	68fb      	ldr	r3, [r7, #12]
     a88:	429a      	cmp	r2, r3
     a8a:	d8eb      	bhi.n	a64 <SerialConsoleWriteString+0x14>
		}
		
		if(usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK)
     a8c:	4b0e      	ldr	r3, [pc, #56]	; (ac8 <SerialConsoleWriteString+0x78>)
     a8e:	2101      	movs	r1, #1
     a90:	0018      	movs	r0, r3
     a92:	4b0e      	ldr	r3, [pc, #56]	; (acc <SerialConsoleWriteString+0x7c>)
     a94:	4798      	blx	r3
     a96:	1e03      	subs	r3, r0, #0
     a98:	d10c      	bne.n	ab4 <SerialConsoleWriteString+0x64>
		{
			circular_buf_get(cbufTx, (uint8_t*) &latestTx); //Perform only if the SERCOM TX is free (not busy)
     a9a:	4b08      	ldr	r3, [pc, #32]	; (abc <SerialConsoleWriteString+0x6c>)
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	4a0c      	ldr	r2, [pc, #48]	; (ad0 <SerialConsoleWriteString+0x80>)
     aa0:	0011      	movs	r1, r2
     aa2:	0018      	movs	r0, r3
     aa4:	4b0b      	ldr	r3, [pc, #44]	; (ad4 <SerialConsoleWriteString+0x84>)
     aa6:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     aa8:	4909      	ldr	r1, [pc, #36]	; (ad0 <SerialConsoleWriteString+0x80>)
     aaa:	4b07      	ldr	r3, [pc, #28]	; (ac8 <SerialConsoleWriteString+0x78>)
     aac:	2201      	movs	r2, #1
     aae:	0018      	movs	r0, r3
     ab0:	4b09      	ldr	r3, [pc, #36]	; (ad8 <SerialConsoleWriteString+0x88>)
     ab2:	4798      	blx	r3
		}
	}
}
     ab4:	46c0      	nop			; (mov r8, r8)
     ab6:	46bd      	mov	sp, r7
     ab8:	b004      	add	sp, #16
     aba:	bd80      	pop	{r7, pc}
     abc:	200009cc 	.word	0x200009cc
     ac0:	00000605 	.word	0x00000605
     ac4:	0000a9ad 	.word	0x0000a9ad
     ac8:	2000018c 	.word	0x2000018c
     acc:	00005585 	.word	0x00005585
     ad0:	200009c8 	.word	0x200009c8
     ad4:	00000639 	.word	0x00000639
     ad8:	000054f5 	.word	0x000054f5

00000adc <LogMessage>:
* @fn			LogMessage (Students to fill out this)
* @brief
* @note
*****************************************************************************/
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
     adc:	b40e      	push	{r1, r2, r3}
     ade:	b580      	push	{r7, lr}
     ae0:	b083      	sub	sp, #12
     ae2:	af00      	add	r7, sp, #0
     ae4:	0002      	movs	r2, r0
     ae6:	1dfb      	adds	r3, r7, #7
     ae8:	701a      	strb	r2, [r3, #0]


};
     aea:	46c0      	nop			; (mov r8, r8)
     aec:	46bd      	mov	sp, r7
     aee:	b003      	add	sp, #12
     af0:	bc80      	pop	{r7}
     af2:	bc08      	pop	{r3}
     af4:	b003      	add	sp, #12
     af6:	4718      	bx	r3

00000af8 <configure_usart>:
* @fn			static void configure_usart(void)
* @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
* @note			
*****************************************************************************/
static void configure_usart(void)
{
     af8:	b580      	push	{r7, lr}
     afa:	b090      	sub	sp, #64	; 0x40
     afc:	af00      	add	r7, sp, #0
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
     afe:	003b      	movs	r3, r7
     b00:	0018      	movs	r0, r3
     b02:	4b17      	ldr	r3, [pc, #92]	; (b60 <configure_usart+0x68>)
     b04:	4798      	blx	r3

	config_usart.baudrate    = 115200;
     b06:	003b      	movs	r3, r7
     b08:	22e1      	movs	r2, #225	; 0xe1
     b0a:	0252      	lsls	r2, r2, #9
     b0c:	621a      	str	r2, [r3, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
     b0e:	003b      	movs	r3, r7
     b10:	22c4      	movs	r2, #196	; 0xc4
     b12:	0392      	lsls	r2, r2, #14
     b14:	60da      	str	r2, [r3, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
     b16:	003b      	movs	r3, r7
     b18:	2201      	movs	r2, #1
     b1a:	4252      	negs	r2, r2
     b1c:	631a      	str	r2, [r3, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
     b1e:	003b      	movs	r3, r7
     b20:	2201      	movs	r2, #1
     b22:	4252      	negs	r2, r2
     b24:	635a      	str	r2, [r3, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
     b26:	003b      	movs	r3, r7
     b28:	4a0e      	ldr	r2, [pc, #56]	; (b64 <configure_usart+0x6c>)
     b2a:	639a      	str	r2, [r3, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
     b2c:	003b      	movs	r3, r7
     b2e:	4a0e      	ldr	r2, [pc, #56]	; (b68 <configure_usart+0x70>)
     b30:	63da      	str	r2, [r3, #60]	; 0x3c
	while (usart_init(&usart_instance,
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	003a      	movs	r2, r7
     b36:	490d      	ldr	r1, [pc, #52]	; (b6c <configure_usart+0x74>)
     b38:	4b0d      	ldr	r3, [pc, #52]	; (b70 <configure_usart+0x78>)
     b3a:	0018      	movs	r0, r3
     b3c:	4b0d      	ldr	r3, [pc, #52]	; (b74 <configure_usart+0x7c>)
     b3e:	4798      	blx	r3
     b40:	1e03      	subs	r3, r0, #0
     b42:	d1f7      	bne.n	b34 <configure_usart+0x3c>
					  EDBG_CDC_MODULE, 
					  &config_usart) != STATUS_OK) 
	{

	}
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &config_usart);
     b44:	003a      	movs	r2, r7
     b46:	4909      	ldr	r1, [pc, #36]	; (b6c <configure_usart+0x74>)
     b48:	4b09      	ldr	r3, [pc, #36]	; (b70 <configure_usart+0x78>)
     b4a:	0018      	movs	r0, r3
     b4c:	4b0a      	ldr	r3, [pc, #40]	; (b78 <configure_usart+0x80>)
     b4e:	4798      	blx	r3
	usart_enable(&usart_instance);
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <configure_usart+0x78>)
     b52:	0018      	movs	r0, r3
     b54:	4b09      	ldr	r3, [pc, #36]	; (b7c <configure_usart+0x84>)
     b56:	4798      	blx	r3
}
     b58:	46c0      	nop			; (mov r8, r8)
     b5a:	46bd      	mov	sp, r7
     b5c:	b010      	add	sp, #64	; 0x40
     b5e:	bd80      	pop	{r7, pc}
     b60:	00000765 	.word	0x00000765
     b64:	002a0003 	.word	0x002a0003
     b68:	002b0003 	.word	0x002b0003
     b6c:	42001800 	.word	0x42001800
     b70:	2000018c 	.word	0x2000018c
     b74:	00004fa9 	.word	0x00004fa9
     b78:	00000965 	.word	0x00000965
     b7c:	00000825 	.word	0x00000825

00000b80 <configure_usart_callbacks>:
* @fn			static void configure_usart_callbacks(void)
* @brief		Code to register callbacks
* @note
*****************************************************************************/
static void configure_usart_callbacks(void)
{
     b80:	b580      	push	{r7, lr}
     b82:	af00      	add	r7, sp, #0
	usart_register_callback(&usart_instance,
     b84:	490c      	ldr	r1, [pc, #48]	; (bb8 <configure_usart_callbacks+0x38>)
     b86:	4b0d      	ldr	r3, [pc, #52]	; (bbc <configure_usart_callbacks+0x3c>)
     b88:	2200      	movs	r2, #0
     b8a:	0018      	movs	r0, r3
     b8c:	4b0c      	ldr	r3, [pc, #48]	; (bc0 <configure_usart_callbacks+0x40>)
     b8e:	4798      	blx	r3
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
     b90:	490c      	ldr	r1, [pc, #48]	; (bc4 <configure_usart_callbacks+0x44>)
     b92:	4b0a      	ldr	r3, [pc, #40]	; (bbc <configure_usart_callbacks+0x3c>)
     b94:	2201      	movs	r2, #1
     b96:	0018      	movs	r0, r3
     b98:	4b09      	ldr	r3, [pc, #36]	; (bc0 <configure_usart_callbacks+0x40>)
     b9a:	4798      	blx	r3
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
     b9c:	4b07      	ldr	r3, [pc, #28]	; (bbc <configure_usart_callbacks+0x3c>)
     b9e:	2100      	movs	r1, #0
     ba0:	0018      	movs	r0, r3
     ba2:	4b09      	ldr	r3, [pc, #36]	; (bc8 <configure_usart_callbacks+0x48>)
     ba4:	4798      	blx	r3
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
     ba6:	4b05      	ldr	r3, [pc, #20]	; (bbc <configure_usart_callbacks+0x3c>)
     ba8:	2101      	movs	r1, #1
     baa:	0018      	movs	r0, r3
     bac:	4b06      	ldr	r3, [pc, #24]	; (bc8 <configure_usart_callbacks+0x48>)
     bae:	4798      	blx	r3
}
     bb0:	46c0      	nop			; (mov r8, r8)
     bb2:	46bd      	mov	sp, r7
     bb4:	bd80      	pop	{r7, pc}
     bb6:	46c0      	nop			; (mov r8, r8)
     bb8:	00000c3d 	.word	0x00000c3d
     bbc:	2000018c 	.word	0x2000018c
     bc0:	000054ad 	.word	0x000054ad
     bc4:	00000bcd 	.word	0x00000bcd
     bc8:	000008b9 	.word	0x000008b9

00000bcc <usart_read_callback>:
* @fn			void usart_read_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_read_callback(struct usart_module *const usart_module)
{
     bcc:	b580      	push	{r7, lr}
     bce:	b084      	sub	sp, #16
     bd0:	af00      	add	r7, sp, #0
     bd2:	6078      	str	r0, [r7, #4]
	//Order Echo
	SerialConsoleWriteString(&latestRx);
     bd4:	4b13      	ldr	r3, [pc, #76]	; (c24 <usart_read_callback+0x58>)
     bd6:	0018      	movs	r0, r3
     bd8:	4b13      	ldr	r3, [pc, #76]	; (c28 <usart_read_callback+0x5c>)
     bda:	4798      	blx	r3
	if(latestRx == 0x08)
     bdc:	4b11      	ldr	r3, [pc, #68]	; (c24 <usart_read_callback+0x58>)
     bde:	781b      	ldrb	r3, [r3, #0]
     be0:	2b08      	cmp	r3, #8
     be2:	d10c      	bne.n	bfe <usart_read_callback+0x32>
	{
	char a[3];
	a[0] = 0x20;
     be4:	230c      	movs	r3, #12
     be6:	18fb      	adds	r3, r7, r3
     be8:	2220      	movs	r2, #32
     bea:	701a      	strb	r2, [r3, #0]
	a[1]= 0x08;
     bec:	230c      	movs	r3, #12
     bee:	18fb      	adds	r3, r7, r3
     bf0:	2208      	movs	r2, #8
     bf2:	705a      	strb	r2, [r3, #1]
	SerialConsoleWriteString(&a);
     bf4:	230c      	movs	r3, #12
     bf6:	18fb      	adds	r3, r7, r3
     bf8:	0018      	movs	r0, r3
     bfa:	4b0b      	ldr	r3, [pc, #44]	; (c28 <usart_read_callback+0x5c>)
     bfc:	4798      	blx	r3
	}
	circular_buf_put(cbufRx, (uint8_t) latestRx); //Add the latest read character into the RX circular Buffer
     bfe:	4b0b      	ldr	r3, [pc, #44]	; (c2c <usart_read_callback+0x60>)
     c00:	681a      	ldr	r2, [r3, #0]
     c02:	4b08      	ldr	r3, [pc, #32]	; (c24 <usart_read_callback+0x58>)
     c04:	781b      	ldrb	r3, [r3, #0]
     c06:	0019      	movs	r1, r3
     c08:	0010      	movs	r0, r2
     c0a:	4b09      	ldr	r3, [pc, #36]	; (c30 <usart_read_callback+0x64>)
     c0c:	4798      	blx	r3

	usart_read_buffer_job(&usart_instance, (uint8_t*) &latestRx, 1);	//Order the MCU to keep reading
     c0e:	4905      	ldr	r1, [pc, #20]	; (c24 <usart_read_callback+0x58>)
     c10:	4b08      	ldr	r3, [pc, #32]	; (c34 <usart_read_callback+0x68>)
     c12:	2201      	movs	r2, #1
     c14:	0018      	movs	r0, r3
     c16:	4b08      	ldr	r3, [pc, #32]	; (c38 <usart_read_callback+0x6c>)
     c18:	4798      	blx	r3
}
     c1a:	46c0      	nop			; (mov r8, r8)
     c1c:	46bd      	mov	sp, r7
     c1e:	b004      	add	sp, #16
     c20:	bd80      	pop	{r7, pc}
     c22:	46c0      	nop			; (mov r8, r8)
     c24:	200001c4 	.word	0x200001c4
     c28:	00000a51 	.word	0x00000a51
     c2c:	200001c0 	.word	0x200001c0
     c30:	00000605 	.word	0x00000605
     c34:	2000018c 	.word	0x2000018c
     c38:	0000553d 	.word	0x0000553d

00000c3c <usart_write_callback>:
* @fn			void usart_write_callback(struct usart_module *const usart_module)
* @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
* @note
*****************************************************************************/
void usart_write_callback(struct usart_module *const usart_module)
{
     c3c:	b580      	push	{r7, lr}
     c3e:	b082      	sub	sp, #8
     c40:	af00      	add	r7, sp, #0
     c42:	6078      	str	r0, [r7, #4]
	if(circular_buf_get(cbufTx, (uint8_t*) &latestTx) != -1) //Only continue if there are more characters to send
     c44:	4b09      	ldr	r3, [pc, #36]	; (c6c <usart_write_callback+0x30>)
     c46:	681b      	ldr	r3, [r3, #0]
     c48:	4a09      	ldr	r2, [pc, #36]	; (c70 <usart_write_callback+0x34>)
     c4a:	0011      	movs	r1, r2
     c4c:	0018      	movs	r0, r3
     c4e:	4b09      	ldr	r3, [pc, #36]	; (c74 <usart_write_callback+0x38>)
     c50:	4798      	blx	r3
     c52:	0003      	movs	r3, r0
     c54:	3301      	adds	r3, #1
     c56:	d005      	beq.n	c64 <usart_write_callback+0x28>
	{
		usart_write_buffer_job(&usart_instance, (uint8_t*) &latestTx, 1);
     c58:	4905      	ldr	r1, [pc, #20]	; (c70 <usart_write_callback+0x34>)
     c5a:	4b07      	ldr	r3, [pc, #28]	; (c78 <usart_write_callback+0x3c>)
     c5c:	2201      	movs	r2, #1
     c5e:	0018      	movs	r0, r3
     c60:	4b06      	ldr	r3, [pc, #24]	; (c7c <usart_write_callback+0x40>)
     c62:	4798      	blx	r3
	}
	
}
     c64:	46c0      	nop			; (mov r8, r8)
     c66:	46bd      	mov	sp, r7
     c68:	b002      	add	sp, #8
     c6a:	bd80      	pop	{r7, pc}
     c6c:	200009cc 	.word	0x200009cc
     c70:	200009c8 	.word	0x200009c8
     c74:	00000639 	.word	0x00000639
     c78:	2000018c 	.word	0x2000018c
     c7c:	000054f5 	.word	0x000054f5

00000c80 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
     c80:	b590      	push	{r4, r7, lr}
     c82:	b087      	sub	sp, #28
     c84:	af00      	add	r7, sp, #0
     c86:	60f8      	str	r0, [r7, #12]
     c88:	000c      	movs	r4, r1
     c8a:	0010      	movs	r0, r2
     c8c:	0019      	movs	r1, r3
     c8e:	230a      	movs	r3, #10
     c90:	18fb      	adds	r3, r7, r3
     c92:	1c22      	adds	r2, r4, #0
     c94:	801a      	strh	r2, [r3, #0]
     c96:	2308      	movs	r3, #8
     c98:	18fb      	adds	r3, r7, r3
     c9a:	1c02      	adds	r2, r0, #0
     c9c:	801a      	strh	r2, [r3, #0]
     c9e:	1dfb      	adds	r3, r7, #7
     ca0:	1c0a      	adds	r2, r1, #0
     ca2:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     ca4:	230a      	movs	r3, #10
     ca6:	18fb      	adds	r3, r7, r3
     ca8:	881a      	ldrh	r2, [r3, #0]
     caa:	2308      	movs	r3, #8
     cac:	18fb      	adds	r3, r7, r3
     cae:	881b      	ldrh	r3, [r3, #0]
     cb0:	1ad3      	subs	r3, r2, r3
     cb2:	3307      	adds	r3, #7
     cb4:	2b00      	cmp	r3, #0
     cb6:	da00      	bge.n	cba <SDMMC_UNSTUFF_BITS+0x3a>
     cb8:	3307      	adds	r3, #7
     cba:	10db      	asrs	r3, r3, #3
     cbc:	3b01      	subs	r3, #1
     cbe:	68fa      	ldr	r2, [r7, #12]
     cc0:	18d3      	adds	r3, r2, r3
     cc2:	781b      	ldrb	r3, [r3, #0]
     cc4:	0019      	movs	r1, r3
     cc6:	2308      	movs	r3, #8
     cc8:	18fb      	adds	r3, r7, r3
     cca:	881b      	ldrh	r3, [r3, #0]
     ccc:	2207      	movs	r2, #7
     cce:	4013      	ands	r3, r2
     cd0:	4119      	asrs	r1, r3
     cd2:	000b      	movs	r3, r1
     cd4:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
     cd6:	2308      	movs	r3, #8
     cd8:	18fb      	adds	r3, r7, r3
     cda:	881b      	ldrh	r3, [r3, #0]
     cdc:	2207      	movs	r2, #7
     cde:	401a      	ands	r2, r3
     ce0:	1dfb      	adds	r3, r7, #7
     ce2:	781b      	ldrb	r3, [r3, #0]
     ce4:	18d3      	adds	r3, r2, r3
     ce6:	2b08      	cmp	r3, #8
     ce8:	dd1c      	ble.n	d24 <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     cea:	230a      	movs	r3, #10
     cec:	18fb      	adds	r3, r7, r3
     cee:	881a      	ldrh	r2, [r3, #0]
     cf0:	2308      	movs	r3, #8
     cf2:	18fb      	adds	r3, r7, r3
     cf4:	881b      	ldrh	r3, [r3, #0]
     cf6:	1ad3      	subs	r3, r2, r3
     cf8:	3307      	adds	r3, #7
     cfa:	2b00      	cmp	r3, #0
     cfc:	da00      	bge.n	d00 <SDMMC_UNSTUFF_BITS+0x80>
     cfe:	3307      	adds	r3, #7
     d00:	10db      	asrs	r3, r3, #3
     d02:	3b02      	subs	r3, #2
     d04:	68fa      	ldr	r2, [r7, #12]
     d06:	18d3      	adds	r3, r2, r3
     d08:	781b      	ldrb	r3, [r3, #0]
     d0a:	0019      	movs	r1, r3
     d0c:	2308      	movs	r3, #8
     d0e:	18fb      	adds	r3, r7, r3
     d10:	881b      	ldrh	r3, [r3, #0]
     d12:	2207      	movs	r2, #7
     d14:	4013      	ands	r3, r2
     d16:	2208      	movs	r2, #8
     d18:	1ad3      	subs	r3, r2, r3
     d1a:	4099      	lsls	r1, r3
     d1c:	000b      	movs	r3, r1
     d1e:	697a      	ldr	r2, [r7, #20]
     d20:	4313      	orrs	r3, r2
     d22:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     d24:	2308      	movs	r3, #8
     d26:	18fb      	adds	r3, r7, r3
     d28:	881b      	ldrh	r3, [r3, #0]
     d2a:	2207      	movs	r2, #7
     d2c:	401a      	ands	r2, r3
     d2e:	1dfb      	adds	r3, r7, #7
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	18d3      	adds	r3, r2, r3
     d34:	2b10      	cmp	r3, #16
     d36:	dd1c      	ble.n	d72 <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d38:	230a      	movs	r3, #10
     d3a:	18fb      	adds	r3, r7, r3
     d3c:	881a      	ldrh	r2, [r3, #0]
     d3e:	2308      	movs	r3, #8
     d40:	18fb      	adds	r3, r7, r3
     d42:	881b      	ldrh	r3, [r3, #0]
     d44:	1ad3      	subs	r3, r2, r3
     d46:	3307      	adds	r3, #7
     d48:	2b00      	cmp	r3, #0
     d4a:	da00      	bge.n	d4e <SDMMC_UNSTUFF_BITS+0xce>
     d4c:	3307      	adds	r3, #7
     d4e:	10db      	asrs	r3, r3, #3
     d50:	3b03      	subs	r3, #3
     d52:	68fa      	ldr	r2, [r7, #12]
     d54:	18d3      	adds	r3, r2, r3
     d56:	781b      	ldrb	r3, [r3, #0]
     d58:	0019      	movs	r1, r3
     d5a:	2308      	movs	r3, #8
     d5c:	18fb      	adds	r3, r7, r3
     d5e:	881b      	ldrh	r3, [r3, #0]
     d60:	2207      	movs	r2, #7
     d62:	4013      	ands	r3, r2
     d64:	2210      	movs	r2, #16
     d66:	1ad3      	subs	r3, r2, r3
     d68:	4099      	lsls	r1, r3
     d6a:	000b      	movs	r3, r1
     d6c:	697a      	ldr	r2, [r7, #20]
     d6e:	4313      	orrs	r3, r2
     d70:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
     d72:	2308      	movs	r3, #8
     d74:	18fb      	adds	r3, r7, r3
     d76:	881b      	ldrh	r3, [r3, #0]
     d78:	2207      	movs	r2, #7
     d7a:	401a      	ands	r2, r3
     d7c:	1dfb      	adds	r3, r7, #7
     d7e:	781b      	ldrb	r3, [r3, #0]
     d80:	18d3      	adds	r3, r2, r3
     d82:	2b10      	cmp	r3, #16
     d84:	dd1c      	ble.n	dc0 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     d86:	230a      	movs	r3, #10
     d88:	18fb      	adds	r3, r7, r3
     d8a:	881a      	ldrh	r2, [r3, #0]
     d8c:	2308      	movs	r3, #8
     d8e:	18fb      	adds	r3, r7, r3
     d90:	881b      	ldrh	r3, [r3, #0]
     d92:	1ad3      	subs	r3, r2, r3
     d94:	3307      	adds	r3, #7
     d96:	2b00      	cmp	r3, #0
     d98:	da00      	bge.n	d9c <SDMMC_UNSTUFF_BITS+0x11c>
     d9a:	3307      	adds	r3, #7
     d9c:	10db      	asrs	r3, r3, #3
     d9e:	3b03      	subs	r3, #3
     da0:	68fa      	ldr	r2, [r7, #12]
     da2:	18d3      	adds	r3, r2, r3
     da4:	781b      	ldrb	r3, [r3, #0]
     da6:	0019      	movs	r1, r3
     da8:	2308      	movs	r3, #8
     daa:	18fb      	adds	r3, r7, r3
     dac:	881b      	ldrh	r3, [r3, #0]
     dae:	2207      	movs	r2, #7
     db0:	4013      	ands	r3, r2
     db2:	2210      	movs	r2, #16
     db4:	1ad3      	subs	r3, r2, r3
     db6:	4099      	lsls	r1, r3
     db8:	000b      	movs	r3, r1
     dba:	697a      	ldr	r2, [r7, #20]
     dbc:	4313      	orrs	r3, r2
     dbe:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
     dc0:	1dfb      	adds	r3, r7, #7
     dc2:	781b      	ldrb	r3, [r3, #0]
     dc4:	2201      	movs	r2, #1
     dc6:	409a      	lsls	r2, r3
     dc8:	0013      	movs	r3, r2
     dca:	1e5a      	subs	r2, r3, #1
     dcc:	697b      	ldr	r3, [r7, #20]
     dce:	4013      	ands	r3, r2
     dd0:	617b      	str	r3, [r7, #20]
	return value;
     dd2:	697b      	ldr	r3, [r7, #20]
}
     dd4:	0018      	movs	r0, r3
     dd6:	46bd      	mov	sp, r7
     dd8:	b007      	add	sp, #28
     dda:	bd90      	pop	{r4, r7, pc}

00000ddc <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
     ddc:	b580      	push	{r7, lr}
     dde:	b082      	sub	sp, #8
     de0:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
     de2:	4b23      	ldr	r3, [pc, #140]	; (e70 <mmc_spi_op_cond+0x94>)
     de4:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     de6:	4b23      	ldr	r3, [pc, #140]	; (e74 <mmc_spi_op_cond+0x98>)
     de8:	2100      	movs	r1, #0
     dea:	0018      	movs	r0, r3
     dec:	4b22      	ldr	r3, [pc, #136]	; (e78 <mmc_spi_op_cond+0x9c>)
     dee:	4798      	blx	r3
     df0:	0003      	movs	r3, r0
     df2:	001a      	movs	r2, r3
     df4:	2301      	movs	r3, #1
     df6:	4053      	eors	r3, r2
     df8:	b2db      	uxtb	r3, r3
     dfa:	2b00      	cmp	r3, #0
     dfc:	d001      	beq.n	e02 <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
     dfe:	2300      	movs	r3, #0
     e00:	e031      	b.n	e66 <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
     e02:	4b1e      	ldr	r3, [pc, #120]	; (e7c <mmc_spi_op_cond+0xa0>)
     e04:	4798      	blx	r3
     e06:	0003      	movs	r3, r0
     e08:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
     e0a:	683b      	ldr	r3, [r7, #0]
     e0c:	2201      	movs	r2, #1
     e0e:	4013      	ands	r3, r2
     e10:	d006      	beq.n	e20 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	1e5a      	subs	r2, r3, #1
     e16:	607a      	str	r2, [r7, #4]
     e18:	2b00      	cmp	r3, #0
     e1a:	d1e4      	bne.n	de6 <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
     e1c:	2300      	movs	r3, #0
     e1e:	e022      	b.n	e66 <mmc_spi_op_cond+0x8a>
			break;
     e20:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     e22:	4b17      	ldr	r3, [pc, #92]	; (e80 <mmc_spi_op_cond+0xa4>)
     e24:	2100      	movs	r1, #0
     e26:	0018      	movs	r0, r3
     e28:	4b13      	ldr	r3, [pc, #76]	; (e78 <mmc_spi_op_cond+0x9c>)
     e2a:	4798      	blx	r3
     e2c:	0003      	movs	r3, r0
     e2e:	001a      	movs	r2, r3
     e30:	2301      	movs	r3, #1
     e32:	4053      	eors	r3, r2
     e34:	b2db      	uxtb	r3, r3
     e36:	2b00      	cmp	r3, #0
     e38:	d001      	beq.n	e3e <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
     e3a:	2300      	movs	r3, #0
     e3c:	e013      	b.n	e66 <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     e3e:	4b0f      	ldr	r3, [pc, #60]	; (e7c <mmc_spi_op_cond+0xa0>)
     e40:	4798      	blx	r3
     e42:	0002      	movs	r2, r0
     e44:	23c0      	movs	r3, #192	; 0xc0
     e46:	05db      	lsls	r3, r3, #23
     e48:	401a      	ands	r2, r3
     e4a:	2380      	movs	r3, #128	; 0x80
     e4c:	05db      	lsls	r3, r3, #23
     e4e:	429a      	cmp	r2, r3
     e50:	d108      	bne.n	e64 <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
     e52:	4b0c      	ldr	r3, [pc, #48]	; (e84 <mmc_spi_op_cond+0xa8>)
     e54:	681a      	ldr	r2, [r3, #0]
     e56:	4b0b      	ldr	r3, [pc, #44]	; (e84 <mmc_spi_op_cond+0xa8>)
     e58:	681b      	ldr	r3, [r3, #0]
     e5a:	7adb      	ldrb	r3, [r3, #11]
     e5c:	2108      	movs	r1, #8
     e5e:	430b      	orrs	r3, r1
     e60:	b2db      	uxtb	r3, r3
     e62:	72d3      	strb	r3, [r2, #11]
	}
	return true;
     e64:	2301      	movs	r3, #1
}
     e66:	0018      	movs	r0, r3
     e68:	46bd      	mov	sp, r7
     e6a:	b002      	add	sp, #8
     e6c:	bd80      	pop	{r7, pc}
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	00001bee 	.word	0x00001bee
     e74:	00001101 	.word	0x00001101
     e78:	00002875 	.word	0x00002875
     e7c:	00002ab5 	.word	0x00002ab5
     e80:	0000053a 	.word	0x0000053a
     e84:	200000e0 	.word	0x200000e0

00000e88 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
     e88:	b580      	push	{r7, lr}
     e8a:	b086      	sub	sp, #24
     e8c:	af00      	add	r7, sp, #0
     e8e:	0002      	movs	r2, r0
     e90:	1dfb      	adds	r3, r7, #7
     e92:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
     e94:	4b2e      	ldr	r3, [pc, #184]	; (f50 <sd_spi_op_cond+0xc8>)
     e96:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     e98:	4b2e      	ldr	r3, [pc, #184]	; (f54 <sd_spi_op_cond+0xcc>)
     e9a:	2100      	movs	r1, #0
     e9c:	0018      	movs	r0, r3
     e9e:	4b2e      	ldr	r3, [pc, #184]	; (f58 <sd_spi_op_cond+0xd0>)
     ea0:	4798      	blx	r3
     ea2:	0003      	movs	r3, r0
     ea4:	001a      	movs	r2, r3
     ea6:	2301      	movs	r3, #1
     ea8:	4053      	eors	r3, r2
     eaa:	b2db      	uxtb	r3, r3
     eac:	2b00      	cmp	r3, #0
     eae:	d001      	beq.n	eb4 <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
     eb0:	2300      	movs	r3, #0
     eb2:	e048      	b.n	f46 <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
     eb4:	2300      	movs	r3, #0
     eb6:	617b      	str	r3, [r7, #20]
		if (v2) {
     eb8:	1dfb      	adds	r3, r7, #7
     eba:	781b      	ldrb	r3, [r3, #0]
     ebc:	2b00      	cmp	r3, #0
     ebe:	d004      	beq.n	eca <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
     ec0:	697b      	ldr	r3, [r7, #20]
     ec2:	2280      	movs	r2, #128	; 0x80
     ec4:	05d2      	lsls	r2, r2, #23
     ec6:	4313      	orrs	r3, r2
     ec8:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     eca:	697b      	ldr	r3, [r7, #20]
     ecc:	4a23      	ldr	r2, [pc, #140]	; (f5c <sd_spi_op_cond+0xd4>)
     ece:	0019      	movs	r1, r3
     ed0:	0010      	movs	r0, r2
     ed2:	4b21      	ldr	r3, [pc, #132]	; (f58 <sd_spi_op_cond+0xd0>)
     ed4:	4798      	blx	r3
     ed6:	0003      	movs	r3, r0
     ed8:	001a      	movs	r2, r3
     eda:	2301      	movs	r3, #1
     edc:	4053      	eors	r3, r2
     ede:	b2db      	uxtb	r3, r3
     ee0:	2b00      	cmp	r3, #0
     ee2:	d001      	beq.n	ee8 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
     ee4:	2300      	movs	r3, #0
     ee6:	e02e      	b.n	f46 <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
     ee8:	4b1d      	ldr	r3, [pc, #116]	; (f60 <sd_spi_op_cond+0xd8>)
     eea:	4798      	blx	r3
     eec:	0003      	movs	r3, r0
     eee:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
     ef0:	68fb      	ldr	r3, [r7, #12]
     ef2:	2201      	movs	r2, #1
     ef4:	4013      	ands	r3, r2
     ef6:	d006      	beq.n	f06 <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
     ef8:	693b      	ldr	r3, [r7, #16]
     efa:	1e5a      	subs	r2, r3, #1
     efc:	613a      	str	r2, [r7, #16]
     efe:	2b00      	cmp	r3, #0
     f00:	d1ca      	bne.n	e98 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
     f02:	2300      	movs	r3, #0
     f04:	e01f      	b.n	f46 <sd_spi_op_cond+0xbe>
			break;
     f06:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     f08:	4b16      	ldr	r3, [pc, #88]	; (f64 <sd_spi_op_cond+0xdc>)
     f0a:	2100      	movs	r1, #0
     f0c:	0018      	movs	r0, r3
     f0e:	4b12      	ldr	r3, [pc, #72]	; (f58 <sd_spi_op_cond+0xd0>)
     f10:	4798      	blx	r3
     f12:	0003      	movs	r3, r0
     f14:	001a      	movs	r2, r3
     f16:	2301      	movs	r3, #1
     f18:	4053      	eors	r3, r2
     f1a:	b2db      	uxtb	r3, r3
     f1c:	2b00      	cmp	r3, #0
     f1e:	d001      	beq.n	f24 <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
     f20:	2300      	movs	r3, #0
     f22:	e010      	b.n	f46 <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
     f24:	4b0e      	ldr	r3, [pc, #56]	; (f60 <sd_spi_op_cond+0xd8>)
     f26:	4798      	blx	r3
     f28:	0002      	movs	r2, r0
     f2a:	2380      	movs	r3, #128	; 0x80
     f2c:	05db      	lsls	r3, r3, #23
     f2e:	4013      	ands	r3, r2
     f30:	d008      	beq.n	f44 <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
     f32:	4b0d      	ldr	r3, [pc, #52]	; (f68 <sd_spi_op_cond+0xe0>)
     f34:	681a      	ldr	r2, [r3, #0]
     f36:	4b0c      	ldr	r3, [pc, #48]	; (f68 <sd_spi_op_cond+0xe0>)
     f38:	681b      	ldr	r3, [r3, #0]
     f3a:	7adb      	ldrb	r3, [r3, #11]
     f3c:	2108      	movs	r1, #8
     f3e:	430b      	orrs	r3, r1
     f40:	b2db      	uxtb	r3, r3
     f42:	72d3      	strb	r3, [r2, #11]
	}
	return true;
     f44:	2301      	movs	r3, #1
}
     f46:	0018      	movs	r0, r3
     f48:	46bd      	mov	sp, r7
     f4a:	b006      	add	sp, #24
     f4c:	bd80      	pop	{r7, pc}
     f4e:	46c0      	nop			; (mov r8, r8)
     f50:	00001bee 	.word	0x00001bee
     f54:	00001137 	.word	0x00001137
     f58:	00002875 	.word	0x00002875
     f5c:	00001129 	.word	0x00001129
     f60:	00002ab5 	.word	0x00002ab5
     f64:	0000053a 	.word	0x0000053a
     f68:	200000e0 	.word	0x200000e0

00000f6c <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
     f6c:	b580      	push	{r7, lr}
     f6e:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
     f70:	2301      	movs	r3, #1
}
     f72:	0018      	movs	r0, r3
     f74:	46bd      	mov	sp, r7
     f76:	bd80      	pop	{r7, pc}

00000f78 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
     f78:	b580      	push	{r7, lr}
     f7a:	b084      	sub	sp, #16
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	2200      	movs	r2, #0
     f84:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     f86:	23d5      	movs	r3, #213	; 0xd5
     f88:	005b      	lsls	r3, r3, #1
     f8a:	4a14      	ldr	r2, [pc, #80]	; (fdc <sd_cmd8+0x64>)
     f8c:	0019      	movs	r1, r3
     f8e:	0010      	movs	r0, r2
     f90:	4b13      	ldr	r3, [pc, #76]	; (fe0 <sd_cmd8+0x68>)
     f92:	4798      	blx	r3
     f94:	0003      	movs	r3, r0
     f96:	001a      	movs	r2, r3
     f98:	2301      	movs	r3, #1
     f9a:	4053      	eors	r3, r2
     f9c:	b2db      	uxtb	r3, r3
     f9e:	2b00      	cmp	r3, #0
     fa0:	d001      	beq.n	fa6 <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
     fa2:	2301      	movs	r3, #1
     fa4:	e015      	b.n	fd2 <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
     fa6:	4b0f      	ldr	r3, [pc, #60]	; (fe4 <sd_cmd8+0x6c>)
     fa8:	4798      	blx	r3
     faa:	0003      	movs	r3, r0
     fac:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
     fae:	68fb      	ldr	r3, [r7, #12]
     fb0:	3301      	adds	r3, #1
     fb2:	d101      	bne.n	fb8 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
     fb4:	2301      	movs	r3, #1
     fb6:	e00c      	b.n	fd2 <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     fb8:	68fb      	ldr	r3, [r7, #12]
     fba:	051b      	lsls	r3, r3, #20
     fbc:	0d1a      	lsrs	r2, r3, #20
     fbe:	23d5      	movs	r3, #213	; 0xd5
     fc0:	005b      	lsls	r3, r3, #1
     fc2:	429a      	cmp	r2, r3
     fc4:	d001      	beq.n	fca <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
     fc6:	2300      	movs	r3, #0
     fc8:	e003      	b.n	fd2 <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	2201      	movs	r2, #1
     fce:	701a      	strb	r2, [r3, #0]
	return true;
     fd0:	2301      	movs	r3, #1
}
     fd2:	0018      	movs	r0, r3
     fd4:	46bd      	mov	sp, r7
     fd6:	b004      	add	sp, #16
     fd8:	bd80      	pop	{r7, pc}
     fda:	46c0      	nop			; (mov r8, r8)
     fdc:	00005508 	.word	0x00005508
     fe0:	00002875 	.word	0x00002875
     fe4:	00002ab5 	.word	0x00002ab5

00000fe8 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
     fe8:	b590      	push	{r4, r7, lr}
     fea:	b089      	sub	sp, #36	; 0x24
     fec:	af02      	add	r7, sp, #8
     fee:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     ff0:	2380      	movs	r3, #128	; 0x80
     ff2:	009a      	lsls	r2, r3, #2
     ff4:	4841      	ldr	r0, [pc, #260]	; (10fc <mmc_cmd8+0x114>)
     ff6:	2300      	movs	r3, #0
     ff8:	9300      	str	r3, [sp, #0]
     ffa:	2301      	movs	r3, #1
     ffc:	2100      	movs	r1, #0
     ffe:	4c40      	ldr	r4, [pc, #256]	; (1100 <mmc_cmd8+0x118>)
    1000:	47a0      	blx	r4
    1002:	0003      	movs	r3, r0
    1004:	001a      	movs	r2, r3
    1006:	2301      	movs	r3, #1
    1008:	4053      	eors	r3, r2
    100a:	b2db      	uxtb	r3, r3
    100c:	2b00      	cmp	r3, #0
    100e:	d001      	beq.n	1014 <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
    1010:	2300      	movs	r3, #0
    1012:	e06e      	b.n	10f2 <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    1014:	2316      	movs	r3, #22
    1016:	18fb      	adds	r3, r7, r3
    1018:	2200      	movs	r2, #0
    101a:	801a      	strh	r2, [r3, #0]
    101c:	e014      	b.n	1048 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
    101e:	2310      	movs	r3, #16
    1020:	18fb      	adds	r3, r7, r3
    1022:	0018      	movs	r0, r3
    1024:	4b37      	ldr	r3, [pc, #220]	; (1104 <mmc_cmd8+0x11c>)
    1026:	4798      	blx	r3
    1028:	0003      	movs	r3, r0
    102a:	001a      	movs	r2, r3
    102c:	2301      	movs	r3, #1
    102e:	4053      	eors	r3, r2
    1030:	b2db      	uxtb	r3, r3
    1032:	2b00      	cmp	r3, #0
    1034:	d001      	beq.n	103a <mmc_cmd8+0x52>
			return false;
    1036:	2300      	movs	r3, #0
    1038:	e05b      	b.n	10f2 <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
    103a:	2316      	movs	r3, #22
    103c:	18fb      	adds	r3, r7, r3
    103e:	881a      	ldrh	r2, [r3, #0]
    1040:	2316      	movs	r3, #22
    1042:	18fb      	adds	r3, r7, r3
    1044:	3201      	adds	r2, #1
    1046:	801a      	strh	r2, [r3, #0]
    1048:	2316      	movs	r3, #22
    104a:	18fb      	adds	r3, r7, r3
    104c:	881b      	ldrh	r3, [r3, #0]
    104e:	2b31      	cmp	r3, #49	; 0x31
    1050:	d9e5      	bls.n	101e <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
    1052:	693b      	ldr	r3, [r7, #16]
    1054:	b2db      	uxtb	r3, r3
    1056:	2202      	movs	r2, #2
    1058:	4013      	ands	r3, r2
    105a:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
    105c:	687b      	ldr	r3, [r7, #4]
    105e:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
    1060:	4b29      	ldr	r3, [pc, #164]	; (1108 <mmc_cmd8+0x120>)
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	330e      	adds	r3, #14
    1066:	0018      	movs	r0, r3
    1068:	230c      	movs	r3, #12
    106a:	223e      	movs	r2, #62	; 0x3e
    106c:	2180      	movs	r1, #128	; 0x80
    106e:	4c27      	ldr	r4, [pc, #156]	; (110c <mmc_cmd8+0x124>)
    1070:	47a0      	blx	r4
    1072:	0002      	movs	r2, r0
    1074:	4b26      	ldr	r3, [pc, #152]	; (1110 <mmc_cmd8+0x128>)
    1076:	429a      	cmp	r2, r3
    1078:	d135      	bne.n	10e6 <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    107a:	e014      	b.n	10a6 <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
    107c:	230c      	movs	r3, #12
    107e:	18fb      	adds	r3, r7, r3
    1080:	0018      	movs	r0, r3
    1082:	4b20      	ldr	r3, [pc, #128]	; (1104 <mmc_cmd8+0x11c>)
    1084:	4798      	blx	r3
    1086:	0003      	movs	r3, r0
    1088:	001a      	movs	r2, r3
    108a:	2301      	movs	r3, #1
    108c:	4053      	eors	r3, r2
    108e:	b2db      	uxtb	r3, r3
    1090:	2b00      	cmp	r3, #0
    1092:	d001      	beq.n	1098 <mmc_cmd8+0xb0>
				return false;
    1094:	2300      	movs	r3, #0
    1096:	e02c      	b.n	10f2 <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
    1098:	2316      	movs	r3, #22
    109a:	18fb      	adds	r3, r7, r3
    109c:	881a      	ldrh	r2, [r3, #0]
    109e:	2316      	movs	r3, #22
    10a0:	18fb      	adds	r3, r7, r3
    10a2:	3201      	adds	r2, #1
    10a4:	801a      	strh	r2, [r3, #0]
    10a6:	2316      	movs	r3, #22
    10a8:	18fb      	adds	r3, r7, r3
    10aa:	881b      	ldrh	r3, [r3, #0]
    10ac:	2b35      	cmp	r3, #53	; 0x35
    10ae:	d9e5      	bls.n	107c <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
    10b0:	4b15      	ldr	r3, [pc, #84]	; (1108 <mmc_cmd8+0x120>)
    10b2:	681b      	ldr	r3, [r3, #0]
    10b4:	68fa      	ldr	r2, [r7, #12]
    10b6:	0852      	lsrs	r2, r2, #1
    10b8:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    10ba:	e014      	b.n	10e6 <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
    10bc:	230c      	movs	r3, #12
    10be:	18fb      	adds	r3, r7, r3
    10c0:	0018      	movs	r0, r3
    10c2:	4b10      	ldr	r3, [pc, #64]	; (1104 <mmc_cmd8+0x11c>)
    10c4:	4798      	blx	r3
    10c6:	0003      	movs	r3, r0
    10c8:	001a      	movs	r2, r3
    10ca:	2301      	movs	r3, #1
    10cc:	4053      	eors	r3, r2
    10ce:	b2db      	uxtb	r3, r3
    10d0:	2b00      	cmp	r3, #0
    10d2:	d001      	beq.n	10d8 <mmc_cmd8+0xf0>
			return false;
    10d4:	2300      	movs	r3, #0
    10d6:	e00c      	b.n	10f2 <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
    10d8:	2316      	movs	r3, #22
    10da:	18fb      	adds	r3, r7, r3
    10dc:	881a      	ldrh	r2, [r3, #0]
    10de:	2316      	movs	r3, #22
    10e0:	18fb      	adds	r3, r7, r3
    10e2:	3201      	adds	r2, #1
    10e4:	801a      	strh	r2, [r3, #0]
    10e6:	2316      	movs	r3, #22
    10e8:	18fb      	adds	r3, r7, r3
    10ea:	881b      	ldrh	r3, [r3, #0]
    10ec:	2b7f      	cmp	r3, #127	; 0x7f
    10ee:	d9e5      	bls.n	10bc <mmc_cmd8+0xd4>
		}
	}
	return true;
    10f0:	2301      	movs	r3, #1
}
    10f2:	0018      	movs	r0, r3
    10f4:	46bd      	mov	sp, r7
    10f6:	b007      	add	sp, #28
    10f8:	bd90      	pop	{r4, r7, pc}
    10fa:	46c0      	nop			; (mov r8, r8)
    10fc:	00081108 	.word	0x00081108
    1100:	0000289d 	.word	0x0000289d
    1104:	00002ac9 	.word	0x00002ac9
    1108:	200000e0 	.word	0x200000e0
    110c:	00000c81 	.word	0x00000c81
    1110:	00000fff 	.word	0x00000fff

00001114 <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
    1114:	b590      	push	{r4, r7, lr}
    1116:	b083      	sub	sp, #12
    1118:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
    111a:	4b15      	ldr	r3, [pc, #84]	; (1170 <sd_mmc_cmd9_spi+0x5c>)
    111c:	681b      	ldr	r3, [r3, #0]
    111e:	891b      	ldrh	r3, [r3, #8]
    1120:	0419      	lsls	r1, r3, #16
    1122:	4814      	ldr	r0, [pc, #80]	; (1174 <sd_mmc_cmd9_spi+0x60>)
    1124:	2301      	movs	r3, #1
    1126:	9300      	str	r3, [sp, #0]
    1128:	2301      	movs	r3, #1
    112a:	2210      	movs	r2, #16
    112c:	4c12      	ldr	r4, [pc, #72]	; (1178 <sd_mmc_cmd9_spi+0x64>)
    112e:	47a0      	blx	r4
    1130:	0003      	movs	r3, r0
    1132:	001a      	movs	r2, r3
    1134:	2301      	movs	r3, #1
    1136:	4053      	eors	r3, r2
    1138:	b2db      	uxtb	r3, r3
    113a:	2b00      	cmp	r3, #0
    113c:	d001      	beq.n	1142 <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
    113e:	2300      	movs	r3, #0
    1140:	e012      	b.n	1168 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
    1142:	4b0b      	ldr	r3, [pc, #44]	; (1170 <sd_mmc_cmd9_spi+0x5c>)
    1144:	681b      	ldr	r3, [r3, #0]
    1146:	330e      	adds	r3, #14
    1148:	2101      	movs	r1, #1
    114a:	0018      	movs	r0, r3
    114c:	4b0b      	ldr	r3, [pc, #44]	; (117c <sd_mmc_cmd9_spi+0x68>)
    114e:	4798      	blx	r3
    1150:	0003      	movs	r3, r0
    1152:	001a      	movs	r2, r3
    1154:	2301      	movs	r3, #1
    1156:	4053      	eors	r3, r2
    1158:	b2db      	uxtb	r3, r3
    115a:	2b00      	cmp	r3, #0
    115c:	d001      	beq.n	1162 <sd_mmc_cmd9_spi+0x4e>
		return false;
    115e:	2300      	movs	r3, #0
    1160:	e002      	b.n	1168 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
    1162:	4b07      	ldr	r3, [pc, #28]	; (1180 <sd_mmc_cmd9_spi+0x6c>)
    1164:	4798      	blx	r3
    1166:	0003      	movs	r3, r0
}
    1168:	0018      	movs	r0, r3
    116a:	46bd      	mov	sp, r7
    116c:	b001      	add	sp, #4
    116e:	bd90      	pop	{r4, r7, pc}
    1170:	200000e0 	.word	0x200000e0
    1174:	00081109 	.word	0x00081109
    1178:	0000289d 	.word	0x0000289d
    117c:	00002b6d 	.word	0x00002b6d
    1180:	00002c11 	.word	0x00002c11

00001184 <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
    1184:	b5b0      	push	{r4, r5, r7, lr}
    1186:	b084      	sub	sp, #16
    1188:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
    118a:	4b45      	ldr	r3, [pc, #276]	; (12a0 <mmc_decode_csd+0x11c>)
    118c:	681b      	ldr	r3, [r3, #0]
    118e:	330e      	adds	r3, #14
    1190:	0018      	movs	r0, r3
    1192:	2304      	movs	r3, #4
    1194:	227a      	movs	r2, #122	; 0x7a
    1196:	2180      	movs	r1, #128	; 0x80
    1198:	4c42      	ldr	r4, [pc, #264]	; (12a4 <mmc_decode_csd+0x120>)
    119a:	47a0      	blx	r4
    119c:	0003      	movs	r3, r0
    119e:	2b02      	cmp	r3, #2
    11a0:	d011      	beq.n	11c6 <mmc_decode_csd+0x42>
    11a2:	d802      	bhi.n	11aa <mmc_decode_csd+0x26>
    11a4:	2b01      	cmp	r3, #1
    11a6:	d009      	beq.n	11bc <mmc_decode_csd+0x38>
    11a8:	e003      	b.n	11b2 <mmc_decode_csd+0x2e>
    11aa:	2b03      	cmp	r3, #3
    11ac:	d010      	beq.n	11d0 <mmc_decode_csd+0x4c>
    11ae:	2b04      	cmp	r3, #4
    11b0:	d013      	beq.n	11da <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
    11b2:	4b3b      	ldr	r3, [pc, #236]	; (12a0 <mmc_decode_csd+0x11c>)
    11b4:	681b      	ldr	r3, [r3, #0]
    11b6:	2212      	movs	r2, #18
    11b8:	731a      	strb	r2, [r3, #12]
		break;
    11ba:	e013      	b.n	11e4 <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
    11bc:	4b38      	ldr	r3, [pc, #224]	; (12a0 <mmc_decode_csd+0x11c>)
    11be:	681b      	ldr	r3, [r3, #0]
    11c0:	2214      	movs	r2, #20
    11c2:	731a      	strb	r2, [r3, #12]
		break;
    11c4:	e00e      	b.n	11e4 <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
    11c6:	4b36      	ldr	r3, [pc, #216]	; (12a0 <mmc_decode_csd+0x11c>)
    11c8:	681b      	ldr	r3, [r3, #0]
    11ca:	2222      	movs	r2, #34	; 0x22
    11cc:	731a      	strb	r2, [r3, #12]
		break;
    11ce:	e009      	b.n	11e4 <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
    11d0:	4b33      	ldr	r3, [pc, #204]	; (12a0 <mmc_decode_csd+0x11c>)
    11d2:	681b      	ldr	r3, [r3, #0]
    11d4:	2230      	movs	r2, #48	; 0x30
    11d6:	731a      	strb	r2, [r3, #12]
		break;
    11d8:	e004      	b.n	11e4 <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
    11da:	4b31      	ldr	r3, [pc, #196]	; (12a0 <mmc_decode_csd+0x11c>)
    11dc:	681b      	ldr	r3, [r3, #0]
    11de:	2240      	movs	r2, #64	; 0x40
    11e0:	731a      	strb	r2, [r3, #12]
		break;
    11e2:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    11e4:	4b2e      	ldr	r3, [pc, #184]	; (12a0 <mmc_decode_csd+0x11c>)
    11e6:	681b      	ldr	r3, [r3, #0]
    11e8:	330e      	adds	r3, #14
    11ea:	0018      	movs	r0, r3
    11ec:	2308      	movs	r3, #8
    11ee:	2260      	movs	r2, #96	; 0x60
    11f0:	2180      	movs	r1, #128	; 0x80
    11f2:	4c2c      	ldr	r4, [pc, #176]	; (12a4 <mmc_decode_csd+0x120>)
    11f4:	47a0      	blx	r4
    11f6:	0003      	movs	r3, r0
    11f8:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    11fa:	68fb      	ldr	r3, [r7, #12]
    11fc:	2207      	movs	r2, #7
    11fe:	401a      	ands	r2, r3
    1200:	4b29      	ldr	r3, [pc, #164]	; (12a8 <mmc_decode_csd+0x124>)
    1202:	0092      	lsls	r2, r2, #2
    1204:	58d3      	ldr	r3, [r2, r3]
    1206:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
    1208:	68fb      	ldr	r3, [r7, #12]
    120a:	08db      	lsrs	r3, r3, #3
    120c:	220f      	movs	r2, #15
    120e:	401a      	ands	r2, r3
    1210:	4b26      	ldr	r3, [pc, #152]	; (12ac <mmc_decode_csd+0x128>)
    1212:	0092      	lsls	r2, r2, #2
    1214:	58d3      	ldr	r3, [r2, r3]
    1216:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    1218:	4b21      	ldr	r3, [pc, #132]	; (12a0 <mmc_decode_csd+0x11c>)
    121a:	681b      	ldr	r3, [r3, #0]
    121c:	68ba      	ldr	r2, [r7, #8]
    121e:	6879      	ldr	r1, [r7, #4]
    1220:	434a      	muls	r2, r1
    1222:	21fa      	movs	r1, #250	; 0xfa
    1224:	0089      	lsls	r1, r1, #2
    1226:	434a      	muls	r2, r1
    1228:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
    122a:	4b1d      	ldr	r3, [pc, #116]	; (12a0 <mmc_decode_csd+0x11c>)
    122c:	681b      	ldr	r3, [r3, #0]
    122e:	330e      	adds	r3, #14
    1230:	0018      	movs	r0, r3
    1232:	230c      	movs	r3, #12
    1234:	223e      	movs	r2, #62	; 0x3e
    1236:	2180      	movs	r1, #128	; 0x80
    1238:	4c1a      	ldr	r4, [pc, #104]	; (12a4 <mmc_decode_csd+0x120>)
    123a:	47a0      	blx	r4
    123c:	0002      	movs	r2, r0
    123e:	4b1c      	ldr	r3, [pc, #112]	; (12b0 <mmc_decode_csd+0x12c>)
    1240:	429a      	cmp	r2, r3
    1242:	d028      	beq.n	1296 <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1244:	4b16      	ldr	r3, [pc, #88]	; (12a0 <mmc_decode_csd+0x11c>)
    1246:	681b      	ldr	r3, [r3, #0]
    1248:	330e      	adds	r3, #14
    124a:	0018      	movs	r0, r3
    124c:	230c      	movs	r3, #12
    124e:	223e      	movs	r2, #62	; 0x3e
    1250:	2180      	movs	r1, #128	; 0x80
    1252:	4c14      	ldr	r4, [pc, #80]	; (12a4 <mmc_decode_csd+0x120>)
    1254:	47a0      	blx	r4
    1256:	0003      	movs	r3, r0
    1258:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    125a:	4b11      	ldr	r3, [pc, #68]	; (12a0 <mmc_decode_csd+0x11c>)
    125c:	681b      	ldr	r3, [r3, #0]
    125e:	330e      	adds	r3, #14
    1260:	0018      	movs	r0, r3
    1262:	2303      	movs	r3, #3
    1264:	222f      	movs	r2, #47	; 0x2f
    1266:	2180      	movs	r1, #128	; 0x80
    1268:	4d0e      	ldr	r5, [pc, #56]	; (12a4 <mmc_decode_csd+0x120>)
    126a:	47a8      	blx	r5
    126c:	0003      	movs	r3, r0
    126e:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
    1270:	409c      	lsls	r4, r3
    1272:	0023      	movs	r3, r4
    1274:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1276:	4b0a      	ldr	r3, [pc, #40]	; (12a0 <mmc_decode_csd+0x11c>)
    1278:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    127a:	4b09      	ldr	r3, [pc, #36]	; (12a0 <mmc_decode_csd+0x11c>)
    127c:	681b      	ldr	r3, [r3, #0]
    127e:	330e      	adds	r3, #14
    1280:	0018      	movs	r0, r3
    1282:	2304      	movs	r3, #4
    1284:	2250      	movs	r2, #80	; 0x50
    1286:	2180      	movs	r1, #128	; 0x80
    1288:	4d06      	ldr	r5, [pc, #24]	; (12a4 <mmc_decode_csd+0x120>)
    128a:	47a8      	blx	r5
    128c:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    128e:	683b      	ldr	r3, [r7, #0]
    1290:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
    1292:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1294:	6063      	str	r3, [r4, #4]
	}
}
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	46bd      	mov	sp, r7
    129a:	b004      	add	sp, #16
    129c:	bdb0      	pop	{r4, r5, r7, pc}
    129e:	46c0      	nop			; (mov r8, r8)
    12a0:	200000e0 	.word	0x200000e0
    12a4:	00000c81 	.word	0x00000c81
    12a8:	0000ae84 	.word	0x0000ae84
    12ac:	0000aee0 	.word	0x0000aee0
    12b0:	00000fff 	.word	0x00000fff

000012b4 <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
    12b4:	b5b0      	push	{r4, r5, r7, lr}
    12b6:	b084      	sub	sp, #16
    12b8:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
    12ba:	4b35      	ldr	r3, [pc, #212]	; (1390 <sd_decode_csd+0xdc>)
    12bc:	681b      	ldr	r3, [r3, #0]
    12be:	330e      	adds	r3, #14
    12c0:	0018      	movs	r0, r3
    12c2:	2308      	movs	r3, #8
    12c4:	2260      	movs	r2, #96	; 0x60
    12c6:	2180      	movs	r1, #128	; 0x80
    12c8:	4c32      	ldr	r4, [pc, #200]	; (1394 <sd_decode_csd+0xe0>)
    12ca:	47a0      	blx	r4
    12cc:	0003      	movs	r3, r0
    12ce:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
    12d0:	68fb      	ldr	r3, [r7, #12]
    12d2:	2207      	movs	r2, #7
    12d4:	401a      	ands	r2, r3
    12d6:	4b30      	ldr	r3, [pc, #192]	; (1398 <sd_decode_csd+0xe4>)
    12d8:	0092      	lsls	r2, r2, #2
    12da:	58d3      	ldr	r3, [r2, r3]
    12dc:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
    12de:	68fb      	ldr	r3, [r7, #12]
    12e0:	08db      	lsrs	r3, r3, #3
    12e2:	220f      	movs	r2, #15
    12e4:	401a      	ands	r2, r3
    12e6:	4b2d      	ldr	r3, [pc, #180]	; (139c <sd_decode_csd+0xe8>)
    12e8:	0092      	lsls	r2, r2, #2
    12ea:	58d3      	ldr	r3, [r2, r3]
    12ec:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
    12ee:	4b28      	ldr	r3, [pc, #160]	; (1390 <sd_decode_csd+0xdc>)
    12f0:	681b      	ldr	r3, [r3, #0]
    12f2:	68ba      	ldr	r2, [r7, #8]
    12f4:	6879      	ldr	r1, [r7, #4]
    12f6:	434a      	muls	r2, r1
    12f8:	21fa      	movs	r1, #250	; 0xfa
    12fa:	0089      	lsls	r1, r1, #2
    12fc:	434a      	muls	r2, r1
    12fe:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
    1300:	4b23      	ldr	r3, [pc, #140]	; (1390 <sd_decode_csd+0xdc>)
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	330e      	adds	r3, #14
    1306:	0018      	movs	r0, r3
    1308:	2302      	movs	r3, #2
    130a:	227e      	movs	r2, #126	; 0x7e
    130c:	2180      	movs	r1, #128	; 0x80
    130e:	4c21      	ldr	r4, [pc, #132]	; (1394 <sd_decode_csd+0xe0>)
    1310:	47a0      	blx	r4
    1312:	1e03      	subs	r3, r0, #0
    1314:	d00f      	beq.n	1336 <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
    1316:	4b1e      	ldr	r3, [pc, #120]	; (1390 <sd_decode_csd+0xdc>)
    1318:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
    131a:	4b1d      	ldr	r3, [pc, #116]	; (1390 <sd_decode_csd+0xdc>)
    131c:	681b      	ldr	r3, [r3, #0]
    131e:	330e      	adds	r3, #14
    1320:	0018      	movs	r0, r3
    1322:	2316      	movs	r3, #22
    1324:	2230      	movs	r2, #48	; 0x30
    1326:	2180      	movs	r1, #128	; 0x80
    1328:	4d1a      	ldr	r5, [pc, #104]	; (1394 <sd_decode_csd+0xe0>)
    132a:	47a8      	blx	r5
    132c:	0003      	movs	r3, r0
				* 512;
    132e:	3301      	adds	r3, #1
    1330:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
    1332:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
    1334:	e028      	b.n	1388 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    1336:	4b16      	ldr	r3, [pc, #88]	; (1390 <sd_decode_csd+0xdc>)
    1338:	681b      	ldr	r3, [r3, #0]
    133a:	330e      	adds	r3, #14
    133c:	0018      	movs	r0, r3
    133e:	230c      	movs	r3, #12
    1340:	223e      	movs	r2, #62	; 0x3e
    1342:	2180      	movs	r1, #128	; 0x80
    1344:	4c13      	ldr	r4, [pc, #76]	; (1394 <sd_decode_csd+0xe0>)
    1346:	47a0      	blx	r4
    1348:	0003      	movs	r3, r0
    134a:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
    134c:	4b10      	ldr	r3, [pc, #64]	; (1390 <sd_decode_csd+0xdc>)
    134e:	681b      	ldr	r3, [r3, #0]
    1350:	330e      	adds	r3, #14
    1352:	0018      	movs	r0, r3
    1354:	2303      	movs	r3, #3
    1356:	222f      	movs	r2, #47	; 0x2f
    1358:	2180      	movs	r1, #128	; 0x80
    135a:	4d0e      	ldr	r5, [pc, #56]	; (1394 <sd_decode_csd+0xe0>)
    135c:	47a8      	blx	r5
    135e:	0003      	movs	r3, r0
    1360:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
    1362:	409c      	lsls	r4, r3
    1364:	0023      	movs	r3, r4
    1366:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
    1368:	4b09      	ldr	r3, [pc, #36]	; (1390 <sd_decode_csd+0xdc>)
    136a:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
    136c:	4b08      	ldr	r3, [pc, #32]	; (1390 <sd_decode_csd+0xdc>)
    136e:	681b      	ldr	r3, [r3, #0]
    1370:	330e      	adds	r3, #14
    1372:	0018      	movs	r0, r3
    1374:	2304      	movs	r3, #4
    1376:	2250      	movs	r2, #80	; 0x50
    1378:	2180      	movs	r1, #128	; 0x80
    137a:	4d06      	ldr	r5, [pc, #24]	; (1394 <sd_decode_csd+0xe0>)
    137c:	47a8      	blx	r5
    137e:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
    1380:	683b      	ldr	r3, [r7, #0]
    1382:	4093      	lsls	r3, r2
				/ 1024;
    1384:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
    1386:	6063      	str	r3, [r4, #4]
}
    1388:	46c0      	nop			; (mov r8, r8)
    138a:	46bd      	mov	sp, r7
    138c:	b004      	add	sp, #16
    138e:	bdb0      	pop	{r4, r5, r7, pc}
    1390:	200000e0 	.word	0x200000e0
    1394:	00000c81 	.word	0x00000c81
    1398:	0000ae84 	.word	0x0000ae84
    139c:	0000aea0 	.word	0x0000aea0

000013a0 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
    13a0:	b580      	push	{r7, lr}
    13a2:	b082      	sub	sp, #8
    13a4:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
    13a6:	4b11      	ldr	r3, [pc, #68]	; (13ec <sd_mmc_cmd13+0x4c>)
    13a8:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
    13aa:	4b11      	ldr	r3, [pc, #68]	; (13f0 <sd_mmc_cmd13+0x50>)
    13ac:	2100      	movs	r1, #0
    13ae:	0018      	movs	r0, r3
    13b0:	4b10      	ldr	r3, [pc, #64]	; (13f4 <sd_mmc_cmd13+0x54>)
    13b2:	4798      	blx	r3
    13b4:	0003      	movs	r3, r0
    13b6:	001a      	movs	r2, r3
    13b8:	2301      	movs	r3, #1
    13ba:	4053      	eors	r3, r2
    13bc:	b2db      	uxtb	r3, r3
    13be:	2b00      	cmp	r3, #0
    13c0:	d001      	beq.n	13c6 <sd_mmc_cmd13+0x26>
				return false;
    13c2:	2300      	movs	r3, #0
    13c4:	e00e      	b.n	13e4 <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
    13c6:	4b0c      	ldr	r3, [pc, #48]	; (13f8 <sd_mmc_cmd13+0x58>)
    13c8:	4798      	blx	r3
    13ca:	0002      	movs	r2, r0
    13cc:	23ff      	movs	r3, #255	; 0xff
    13ce:	4013      	ands	r3, r2
    13d0:	d006      	beq.n	13e0 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	1e5a      	subs	r2, r3, #1
    13d6:	607a      	str	r2, [r7, #4]
    13d8:	2b00      	cmp	r3, #0
    13da:	d1e6      	bne.n	13aa <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
    13dc:	2300      	movs	r3, #0
    13de:	e001      	b.n	13e4 <sd_mmc_cmd13+0x44>
				break;
    13e0:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
    13e2:	2301      	movs	r3, #1
}
    13e4:	0018      	movs	r0, r3
    13e6:	46bd      	mov	sp, r7
    13e8:	b002      	add	sp, #8
    13ea:	bd80      	pop	{r7, pc}
    13ec:	00030d40 	.word	0x00030d40
    13f0:	00001b0d 	.word	0x00001b0d
    13f4:	00002875 	.word	0x00002875
    13f8:	00002ab5 	.word	0x00002ab5

000013fc <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
    13fc:	b590      	push	{r4, r7, lr}
    13fe:	b085      	sub	sp, #20
    1400:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
    1402:	4b38      	ldr	r3, [pc, #224]	; (14e4 <sd_acmd51+0xe8>)
    1404:	681b      	ldr	r3, [r3, #0]
    1406:	891b      	ldrh	r3, [r3, #8]
    1408:	041b      	lsls	r3, r3, #16
    140a:	4a37      	ldr	r2, [pc, #220]	; (14e8 <sd_acmd51+0xec>)
    140c:	0019      	movs	r1, r3
    140e:	0010      	movs	r0, r2
    1410:	4b36      	ldr	r3, [pc, #216]	; (14ec <sd_acmd51+0xf0>)
    1412:	4798      	blx	r3
    1414:	0003      	movs	r3, r0
    1416:	001a      	movs	r2, r3
    1418:	2301      	movs	r3, #1
    141a:	4053      	eors	r3, r2
    141c:	b2db      	uxtb	r3, r3
    141e:	2b00      	cmp	r3, #0
    1420:	d001      	beq.n	1426 <sd_acmd51+0x2a>
		return false;
    1422:	2300      	movs	r3, #0
    1424:	e059      	b.n	14da <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
    1426:	4832      	ldr	r0, [pc, #200]	; (14f0 <sd_acmd51+0xf4>)
    1428:	2301      	movs	r3, #1
    142a:	9300      	str	r3, [sp, #0]
    142c:	2301      	movs	r3, #1
    142e:	2208      	movs	r2, #8
    1430:	2100      	movs	r1, #0
    1432:	4c30      	ldr	r4, [pc, #192]	; (14f4 <sd_acmd51+0xf8>)
    1434:	47a0      	blx	r4
    1436:	0003      	movs	r3, r0
    1438:	001a      	movs	r2, r3
    143a:	2301      	movs	r3, #1
    143c:	4053      	eors	r3, r2
    143e:	b2db      	uxtb	r3, r3
    1440:	2b00      	cmp	r3, #0
    1442:	d001      	beq.n	1448 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
    1444:	2300      	movs	r3, #0
    1446:	e048      	b.n	14da <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
    1448:	003b      	movs	r3, r7
    144a:	2101      	movs	r1, #1
    144c:	0018      	movs	r0, r3
    144e:	4b2a      	ldr	r3, [pc, #168]	; (14f8 <sd_acmd51+0xfc>)
    1450:	4798      	blx	r3
    1452:	0003      	movs	r3, r0
    1454:	001a      	movs	r2, r3
    1456:	2301      	movs	r3, #1
    1458:	4053      	eors	r3, r2
    145a:	b2db      	uxtb	r3, r3
    145c:	2b00      	cmp	r3, #0
    145e:	d001      	beq.n	1464 <sd_acmd51+0x68>
		return false;
    1460:	2300      	movs	r3, #0
    1462:	e03a      	b.n	14da <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
    1464:	4b25      	ldr	r3, [pc, #148]	; (14fc <sd_acmd51+0x100>)
    1466:	4798      	blx	r3
    1468:	0003      	movs	r3, r0
    146a:	001a      	movs	r2, r3
    146c:	2301      	movs	r3, #1
    146e:	4053      	eors	r3, r2
    1470:	b2db      	uxtb	r3, r3
    1472:	2b00      	cmp	r3, #0
    1474:	d001      	beq.n	147a <sd_acmd51+0x7e>
		return false;
    1476:	2300      	movs	r3, #0
    1478:	e02f      	b.n	14da <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
    147a:	0038      	movs	r0, r7
    147c:	2304      	movs	r3, #4
    147e:	2238      	movs	r2, #56	; 0x38
    1480:	2140      	movs	r1, #64	; 0x40
    1482:	4c1f      	ldr	r4, [pc, #124]	; (1500 <sd_acmd51+0x104>)
    1484:	47a0      	blx	r4
    1486:	0003      	movs	r3, r0
    1488:	2b01      	cmp	r3, #1
    148a:	d008      	beq.n	149e <sd_acmd51+0xa2>
    148c:	d302      	bcc.n	1494 <sd_acmd51+0x98>
    148e:	2b02      	cmp	r3, #2
    1490:	d00a      	beq.n	14a8 <sd_acmd51+0xac>
    1492:	e01c      	b.n	14ce <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    1494:	4b13      	ldr	r3, [pc, #76]	; (14e4 <sd_acmd51+0xe8>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	2210      	movs	r2, #16
    149a:	731a      	strb	r2, [r3, #12]
		break;
    149c:	e01c      	b.n	14d8 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
    149e:	4b11      	ldr	r3, [pc, #68]	; (14e4 <sd_acmd51+0xe8>)
    14a0:	681b      	ldr	r3, [r3, #0]
    14a2:	221a      	movs	r2, #26
    14a4:	731a      	strb	r2, [r3, #12]
		break;
    14a6:	e017      	b.n	14d8 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
    14a8:	0038      	movs	r0, r7
    14aa:	2301      	movs	r3, #1
    14ac:	222f      	movs	r2, #47	; 0x2f
    14ae:	2140      	movs	r1, #64	; 0x40
    14b0:	4c13      	ldr	r4, [pc, #76]	; (1500 <sd_acmd51+0x104>)
    14b2:	47a0      	blx	r4
    14b4:	0003      	movs	r3, r0
    14b6:	2b01      	cmp	r3, #1
    14b8:	d104      	bne.n	14c4 <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
    14ba:	4b0a      	ldr	r3, [pc, #40]	; (14e4 <sd_acmd51+0xe8>)
    14bc:	681b      	ldr	r3, [r3, #0]
    14be:	2230      	movs	r2, #48	; 0x30
    14c0:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
    14c2:	e009      	b.n	14d8 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
    14c4:	4b07      	ldr	r3, [pc, #28]	; (14e4 <sd_acmd51+0xe8>)
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	2220      	movs	r2, #32
    14ca:	731a      	strb	r2, [r3, #12]
		break;
    14cc:	e004      	b.n	14d8 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <sd_acmd51+0xe8>)
    14d0:	681b      	ldr	r3, [r3, #0]
    14d2:	2210      	movs	r2, #16
    14d4:	731a      	strb	r2, [r3, #12]
		break;
    14d6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    14d8:	2301      	movs	r3, #1
}
    14da:	0018      	movs	r0, r3
    14dc:	46bd      	mov	sp, r7
    14de:	b003      	add	sp, #12
    14e0:	bd90      	pop	{r4, r7, pc}
    14e2:	46c0      	nop			; (mov r8, r8)
    14e4:	200000e0 	.word	0x200000e0
    14e8:	00001137 	.word	0x00001137
    14ec:	00002875 	.word	0x00002875
    14f0:	00081133 	.word	0x00081133
    14f4:	0000289d 	.word	0x0000289d
    14f8:	00002b6d 	.word	0x00002b6d
    14fc:	00002c11 	.word	0x00002c11
    1500:	00000c81 	.word	0x00000c81

00001504 <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
    1504:	b580      	push	{r7, lr}
    1506:	b082      	sub	sp, #8
    1508:	af00      	add	r7, sp, #0
    150a:	0002      	movs	r2, r0
    150c:	1dfb      	adds	r3, r7, #7
    150e:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
    1510:	1dfb      	adds	r3, r7, #7
    1512:	781b      	ldrb	r3, [r3, #0]
    1514:	2b00      	cmp	r3, #0
    1516:	d001      	beq.n	151c <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
    1518:	2304      	movs	r3, #4
    151a:	e047      	b.n	15ac <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
    151c:	1dfb      	adds	r3, r7, #7
    151e:	781b      	ldrb	r3, [r3, #0]
    1520:	4a24      	ldr	r2, [pc, #144]	; (15b4 <sd_mmc_select_slot+0xb0>)
    1522:	015b      	lsls	r3, r3, #5
    1524:	18d3      	adds	r3, r2, r3
    1526:	330a      	adds	r3, #10
    1528:	781b      	ldrb	r3, [r3, #0]
    152a:	2b04      	cmp	r3, #4
    152c:	d008      	beq.n	1540 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
    152e:	1dfb      	adds	r3, r7, #7
    1530:	781b      	ldrb	r3, [r3, #0]
    1532:	4a20      	ldr	r2, [pc, #128]	; (15b4 <sd_mmc_select_slot+0xb0>)
    1534:	015b      	lsls	r3, r3, #5
    1536:	18d3      	adds	r3, r2, r3
    1538:	330a      	adds	r3, #10
    153a:	781b      	ldrb	r3, [r3, #0]
    153c:	2b03      	cmp	r3, #3
    153e:	d11d      	bne.n	157c <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
    1540:	1dfb      	adds	r3, r7, #7
    1542:	781b      	ldrb	r3, [r3, #0]
    1544:	4a1b      	ldr	r2, [pc, #108]	; (15b4 <sd_mmc_select_slot+0xb0>)
    1546:	015b      	lsls	r3, r3, #5
    1548:	18d3      	adds	r3, r2, r3
    154a:	330a      	adds	r3, #10
    154c:	2202      	movs	r2, #2
    154e:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
    1550:	1dfb      	adds	r3, r7, #7
    1552:	781a      	ldrb	r2, [r3, #0]
    1554:	4b17      	ldr	r3, [pc, #92]	; (15b4 <sd_mmc_select_slot+0xb0>)
    1556:	0152      	lsls	r2, r2, #5
    1558:	4917      	ldr	r1, [pc, #92]	; (15b8 <sd_mmc_select_slot+0xb4>)
    155a:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
    155c:	1dfb      	adds	r3, r7, #7
    155e:	781b      	ldrb	r3, [r3, #0]
    1560:	4a14      	ldr	r2, [pc, #80]	; (15b4 <sd_mmc_select_slot+0xb0>)
    1562:	015b      	lsls	r3, r3, #5
    1564:	18d3      	adds	r3, r2, r3
    1566:	330d      	adds	r3, #13
    1568:	2201      	movs	r2, #1
    156a:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
    156c:	1dfb      	adds	r3, r7, #7
    156e:	781b      	ldrb	r3, [r3, #0]
    1570:	4a10      	ldr	r2, [pc, #64]	; (15b4 <sd_mmc_select_slot+0xb0>)
    1572:	015b      	lsls	r3, r3, #5
    1574:	18d3      	adds	r3, r2, r3
    1576:	331e      	adds	r3, #30
    1578:	2200      	movs	r2, #0
    157a:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
    157c:	4b0f      	ldr	r3, [pc, #60]	; (15bc <sd_mmc_select_slot+0xb8>)
    157e:	1dfa      	adds	r2, r7, #7
    1580:	7812      	ldrb	r2, [r2, #0]
    1582:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
    1584:	1dfb      	adds	r3, r7, #7
    1586:	781b      	ldrb	r3, [r3, #0]
    1588:	015a      	lsls	r2, r3, #5
    158a:	4b0a      	ldr	r3, [pc, #40]	; (15b4 <sd_mmc_select_slot+0xb0>)
    158c:	18d2      	adds	r2, r2, r3
    158e:	4b0c      	ldr	r3, [pc, #48]	; (15c0 <sd_mmc_select_slot+0xbc>)
    1590:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
    1592:	4b0c      	ldr	r3, [pc, #48]	; (15c4 <sd_mmc_select_slot+0xc0>)
    1594:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
    1596:	1dfb      	adds	r3, r7, #7
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	4a06      	ldr	r2, [pc, #24]	; (15b4 <sd_mmc_select_slot+0xb0>)
    159c:	015b      	lsls	r3, r3, #5
    159e:	18d3      	adds	r3, r2, r3
    15a0:	330a      	adds	r3, #10
    15a2:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
    15a4:	3b02      	subs	r3, #2
    15a6:	425a      	negs	r2, r3
    15a8:	4153      	adcs	r3, r2
    15aa:	b2db      	uxtb	r3, r3
}
    15ac:	0018      	movs	r0, r3
    15ae:	46bd      	mov	sp, r7
    15b0:	b002      	add	sp, #8
    15b2:	bd80      	pop	{r7, pc}
    15b4:	200000bc 	.word	0x200000bc
    15b8:	00061a80 	.word	0x00061a80
    15bc:	200000dc 	.word	0x200000dc
    15c0:	200000e0 	.word	0x200000e0
    15c4:	000015c9 	.word	0x000015c9

000015c8 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
    15c8:	b5b0      	push	{r4, r5, r7, lr}
    15ca:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    15cc:	4b09      	ldr	r3, [pc, #36]	; (15f4 <sd_mmc_configure_slot+0x2c>)
    15ce:	7818      	ldrb	r0, [r3, #0]
    15d0:	4b09      	ldr	r3, [pc, #36]	; (15f8 <sd_mmc_configure_slot+0x30>)
    15d2:	681b      	ldr	r3, [r3, #0]
    15d4:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    15d6:	4b08      	ldr	r3, [pc, #32]	; (15f8 <sd_mmc_configure_slot+0x30>)
    15d8:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    15da:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
    15dc:	4b06      	ldr	r3, [pc, #24]	; (15f8 <sd_mmc_configure_slot+0x30>)
    15de:	681b      	ldr	r3, [r3, #0]
    15e0:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
    15e2:	1e5c      	subs	r4, r3, #1
    15e4:	41a3      	sbcs	r3, r4
    15e6:	b2db      	uxtb	r3, r3
    15e8:	4c04      	ldr	r4, [pc, #16]	; (15fc <sd_mmc_configure_slot+0x34>)
    15ea:	47a0      	blx	r4
}
    15ec:	46c0      	nop			; (mov r8, r8)
    15ee:	46bd      	mov	sp, r7
    15f0:	bdb0      	pop	{r4, r5, r7, pc}
    15f2:	46c0      	nop			; (mov r8, r8)
    15f4:	200000dc 	.word	0x200000dc
    15f8:	200000e0 	.word	0x200000e0
    15fc:	0000275d 	.word	0x0000275d

00001600 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
    1600:	b580      	push	{r7, lr}
    1602:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
    1604:	4b05      	ldr	r3, [pc, #20]	; (161c <sd_mmc_deselect_slot+0x1c>)
    1606:	781b      	ldrb	r3, [r3, #0]
    1608:	2b00      	cmp	r3, #0
    160a:	d104      	bne.n	1616 <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
    160c:	4b03      	ldr	r3, [pc, #12]	; (161c <sd_mmc_deselect_slot+0x1c>)
    160e:	781b      	ldrb	r3, [r3, #0]
    1610:	0018      	movs	r0, r3
    1612:	4b03      	ldr	r3, [pc, #12]	; (1620 <sd_mmc_deselect_slot+0x20>)
    1614:	4798      	blx	r3
	}
}
    1616:	46c0      	nop			; (mov r8, r8)
    1618:	46bd      	mov	sp, r7
    161a:	bd80      	pop	{r7, pc}
    161c:	200000dc 	.word	0x200000dc
    1620:	000027e5 	.word	0x000027e5

00001624 <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
    1624:	b580      	push	{r7, lr}
    1626:	b082      	sub	sp, #8
    1628:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
    162a:	1dfb      	adds	r3, r7, #7
    162c:	2200      	movs	r2, #0
    162e:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
    1630:	4b59      	ldr	r3, [pc, #356]	; (1798 <sd_mmc_spi_card_init+0x174>)
    1632:	681b      	ldr	r3, [r3, #0]
    1634:	2201      	movs	r2, #1
    1636:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
    1638:	4b57      	ldr	r3, [pc, #348]	; (1798 <sd_mmc_spi_card_init+0x174>)
    163a:	681b      	ldr	r3, [r3, #0]
    163c:	2200      	movs	r2, #0
    163e:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
    1640:	4b55      	ldr	r3, [pc, #340]	; (1798 <sd_mmc_spi_card_init+0x174>)
    1642:	681b      	ldr	r3, [r3, #0]
    1644:	2200      	movs	r2, #0
    1646:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
    1648:	4b54      	ldr	r3, [pc, #336]	; (179c <sd_mmc_spi_card_init+0x178>)
    164a:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    164c:	2388      	movs	r3, #136	; 0x88
    164e:	015b      	lsls	r3, r3, #5
    1650:	2100      	movs	r1, #0
    1652:	0018      	movs	r0, r3
    1654:	4b52      	ldr	r3, [pc, #328]	; (17a0 <sd_mmc_spi_card_init+0x17c>)
    1656:	4798      	blx	r3
    1658:	0003      	movs	r3, r0
    165a:	001a      	movs	r2, r3
    165c:	2301      	movs	r3, #1
    165e:	4053      	eors	r3, r2
    1660:	b2db      	uxtb	r3, r3
    1662:	2b00      	cmp	r3, #0
    1664:	d001      	beq.n	166a <sd_mmc_spi_card_init+0x46>
		return false;
    1666:	2300      	movs	r3, #0
    1668:	e092      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
    166a:	1dfb      	adds	r3, r7, #7
    166c:	0018      	movs	r0, r3
    166e:	4b4d      	ldr	r3, [pc, #308]	; (17a4 <sd_mmc_spi_card_init+0x180>)
    1670:	4798      	blx	r3
    1672:	0003      	movs	r3, r0
    1674:	001a      	movs	r2, r3
    1676:	2301      	movs	r3, #1
    1678:	4053      	eors	r3, r2
    167a:	b2db      	uxtb	r3, r3
    167c:	2b00      	cmp	r3, #0
    167e:	d001      	beq.n	1684 <sd_mmc_spi_card_init+0x60>
		return false;
    1680:	2300      	movs	r3, #0
    1682:	e085      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
    1684:	4b48      	ldr	r3, [pc, #288]	; (17a8 <sd_mmc_spi_card_init+0x184>)
    1686:	4798      	blx	r3
    1688:	0003      	movs	r3, r0
    168a:	001a      	movs	r2, r3
    168c:	2301      	movs	r3, #1
    168e:	4053      	eors	r3, r2
    1690:	b2db      	uxtb	r3, r3
    1692:	2b00      	cmp	r3, #0
    1694:	d001      	beq.n	169a <sd_mmc_spi_card_init+0x76>
		return false;
    1696:	2300      	movs	r3, #0
    1698:	e07a      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
    169a:	4b3f      	ldr	r3, [pc, #252]	; (1798 <sd_mmc_spi_card_init+0x174>)
    169c:	681b      	ldr	r3, [r3, #0]
    169e:	7adb      	ldrb	r3, [r3, #11]
    16a0:	001a      	movs	r2, r3
    16a2:	2301      	movs	r3, #1
    16a4:	4013      	ands	r3, r2
    16a6:	d021      	beq.n	16ec <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
    16a8:	1dfb      	adds	r3, r7, #7
    16aa:	781b      	ldrb	r3, [r3, #0]
    16ac:	0018      	movs	r0, r3
    16ae:	4b3f      	ldr	r3, [pc, #252]	; (17ac <sd_mmc_spi_card_init+0x188>)
    16b0:	4798      	blx	r3
    16b2:	0003      	movs	r3, r0
    16b4:	001a      	movs	r2, r3
    16b6:	2301      	movs	r3, #1
    16b8:	4053      	eors	r3, r2
    16ba:	b2db      	uxtb	r3, r3
    16bc:	2b00      	cmp	r3, #0
    16be:	d007      	beq.n	16d0 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
    16c0:	4b35      	ldr	r3, [pc, #212]	; (1798 <sd_mmc_spi_card_init+0x174>)
    16c2:	681b      	ldr	r3, [r3, #0]
    16c4:	2202      	movs	r2, #2
    16c6:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
    16c8:	4b39      	ldr	r3, [pc, #228]	; (17b0 <sd_mmc_spi_card_init+0x18c>)
    16ca:	4798      	blx	r3
    16cc:	0003      	movs	r3, r0
    16ce:	e05f      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    16d0:	4b38      	ldr	r3, [pc, #224]	; (17b4 <sd_mmc_spi_card_init+0x190>)
    16d2:	2100      	movs	r1, #0
    16d4:	0018      	movs	r0, r3
    16d6:	4b32      	ldr	r3, [pc, #200]	; (17a0 <sd_mmc_spi_card_init+0x17c>)
    16d8:	4798      	blx	r3
    16da:	0003      	movs	r3, r0
    16dc:	001a      	movs	r2, r3
    16de:	2301      	movs	r3, #1
    16e0:	4053      	eors	r3, r2
    16e2:	b2db      	uxtb	r3, r3
    16e4:	2b00      	cmp	r3, #0
    16e6:	d001      	beq.n	16ec <sd_mmc_spi_card_init+0xc8>
			return false;
    16e8:	2300      	movs	r3, #0
    16ea:	e051      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    16ec:	4b2a      	ldr	r3, [pc, #168]	; (1798 <sd_mmc_spi_card_init+0x174>)
    16ee:	681b      	ldr	r3, [r3, #0]
    16f0:	7adb      	ldrb	r3, [r3, #11]
    16f2:	001a      	movs	r2, r3
    16f4:	2301      	movs	r3, #1
    16f6:	4013      	ands	r3, r2
    16f8:	d017      	beq.n	172a <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
    16fa:	4b2f      	ldr	r3, [pc, #188]	; (17b8 <sd_mmc_spi_card_init+0x194>)
    16fc:	4798      	blx	r3
    16fe:	0003      	movs	r3, r0
    1700:	001a      	movs	r2, r3
    1702:	2301      	movs	r3, #1
    1704:	4053      	eors	r3, r2
    1706:	b2db      	uxtb	r3, r3
    1708:	2b00      	cmp	r3, #0
    170a:	d001      	beq.n	1710 <sd_mmc_spi_card_init+0xec>
			return false;
    170c:	2300      	movs	r3, #0
    170e:	e03f      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
    1710:	4b2a      	ldr	r3, [pc, #168]	; (17bc <sd_mmc_spi_card_init+0x198>)
    1712:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
    1714:	4b2a      	ldr	r3, [pc, #168]	; (17c0 <sd_mmc_spi_card_init+0x19c>)
    1716:	4798      	blx	r3
    1718:	0003      	movs	r3, r0
    171a:	001a      	movs	r2, r3
    171c:	2301      	movs	r3, #1
    171e:	4053      	eors	r3, r2
    1720:	b2db      	uxtb	r3, r3
    1722:	2b00      	cmp	r3, #0
    1724:	d001      	beq.n	172a <sd_mmc_spi_card_init+0x106>
			return false;
    1726:	2300      	movs	r3, #0
    1728:	e032      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    172a:	4b1b      	ldr	r3, [pc, #108]	; (1798 <sd_mmc_spi_card_init+0x174>)
    172c:	681b      	ldr	r3, [r3, #0]
    172e:	7adb      	ldrb	r3, [r3, #11]
    1730:	001a      	movs	r2, r3
    1732:	2301      	movs	r3, #1
    1734:	4013      	ands	r3, r2
    1736:	d016      	beq.n	1766 <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
    1738:	4b17      	ldr	r3, [pc, #92]	; (1798 <sd_mmc_spi_card_init+0x174>)
    173a:	681b      	ldr	r3, [r3, #0]
    173c:	7adb      	ldrb	r3, [r3, #11]
    173e:	001a      	movs	r2, r3
    1740:	2308      	movs	r3, #8
    1742:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
    1744:	d10f      	bne.n	1766 <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1746:	2380      	movs	r3, #128	; 0x80
    1748:	009b      	lsls	r3, r3, #2
    174a:	4a1e      	ldr	r2, [pc, #120]	; (17c4 <sd_mmc_spi_card_init+0x1a0>)
    174c:	0019      	movs	r1, r3
    174e:	0010      	movs	r0, r2
    1750:	4b13      	ldr	r3, [pc, #76]	; (17a0 <sd_mmc_spi_card_init+0x17c>)
    1752:	4798      	blx	r3
    1754:	0003      	movs	r3, r0
    1756:	001a      	movs	r2, r3
    1758:	2301      	movs	r3, #1
    175a:	4053      	eors	r3, r2
    175c:	b2db      	uxtb	r3, r3
    175e:	2b00      	cmp	r3, #0
    1760:	d001      	beq.n	1766 <sd_mmc_spi_card_init+0x142>
			return false;
    1762:	2300      	movs	r3, #0
    1764:	e014      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
    1766:	4b0c      	ldr	r3, [pc, #48]	; (1798 <sd_mmc_spi_card_init+0x174>)
    1768:	681b      	ldr	r3, [r3, #0]
    176a:	7adb      	ldrb	r3, [r3, #11]
    176c:	001a      	movs	r2, r3
    176e:	2301      	movs	r3, #1
    1770:	4013      	ands	r3, r2
    1772:	d00a      	beq.n	178a <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
    1774:	4b14      	ldr	r3, [pc, #80]	; (17c8 <sd_mmc_spi_card_init+0x1a4>)
    1776:	4798      	blx	r3
    1778:	0003      	movs	r3, r0
    177a:	001a      	movs	r2, r3
    177c:	2301      	movs	r3, #1
    177e:	4053      	eors	r3, r2
    1780:	b2db      	uxtb	r3, r3
    1782:	2b00      	cmp	r3, #0
    1784:	d001      	beq.n	178a <sd_mmc_spi_card_init+0x166>
			return false;
    1786:	2300      	movs	r3, #0
    1788:	e002      	b.n	1790 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    178a:	4b10      	ldr	r3, [pc, #64]	; (17cc <sd_mmc_spi_card_init+0x1a8>)
    178c:	4798      	blx	r3
	return true;
    178e:	2301      	movs	r3, #1
}
    1790:	0018      	movs	r0, r3
    1792:	46bd      	mov	sp, r7
    1794:	b002      	add	sp, #8
    1796:	bd80      	pop	{r7, pc}
    1798:	200000e0 	.word	0x200000e0
    179c:	00002829 	.word	0x00002829
    17a0:	00002875 	.word	0x00002875
    17a4:	00000f79 	.word	0x00000f79
    17a8:	00000f6d 	.word	0x00000f6d
    17ac:	00000e89 	.word	0x00000e89
    17b0:	000017d1 	.word	0x000017d1
    17b4:	0000113b 	.word	0x0000113b
    17b8:	00001115 	.word	0x00001115
    17bc:	000012b5 	.word	0x000012b5
    17c0:	000013fd 	.word	0x000013fd
    17c4:	00001110 	.word	0x00001110
    17c8:	000013a1 	.word	0x000013a1
    17cc:	000015c9 	.word	0x000015c9

000017d0 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
    17d0:	b580      	push	{r7, lr}
    17d2:	b082      	sub	sp, #8
    17d4:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
    17d6:	2388      	movs	r3, #136	; 0x88
    17d8:	015b      	lsls	r3, r3, #5
    17da:	2100      	movs	r1, #0
    17dc:	0018      	movs	r0, r3
    17de:	4b32      	ldr	r3, [pc, #200]	; (18a8 <sd_mmc_spi_install_mmc+0xd8>)
    17e0:	4798      	blx	r3
    17e2:	0003      	movs	r3, r0
    17e4:	001a      	movs	r2, r3
    17e6:	2301      	movs	r3, #1
    17e8:	4053      	eors	r3, r2
    17ea:	b2db      	uxtb	r3, r3
    17ec:	2b00      	cmp	r3, #0
    17ee:	d001      	beq.n	17f4 <sd_mmc_spi_install_mmc+0x24>
		return false;
    17f0:	2300      	movs	r3, #0
    17f2:	e055      	b.n	18a0 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
    17f4:	4b2d      	ldr	r3, [pc, #180]	; (18ac <sd_mmc_spi_install_mmc+0xdc>)
    17f6:	4798      	blx	r3
    17f8:	0003      	movs	r3, r0
    17fa:	001a      	movs	r2, r3
    17fc:	2301      	movs	r3, #1
    17fe:	4053      	eors	r3, r2
    1800:	b2db      	uxtb	r3, r3
    1802:	2b00      	cmp	r3, #0
    1804:	d001      	beq.n	180a <sd_mmc_spi_install_mmc+0x3a>
		return false;
    1806:	2300      	movs	r3, #0
    1808:	e04a      	b.n	18a0 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
    180a:	4b29      	ldr	r3, [pc, #164]	; (18b0 <sd_mmc_spi_install_mmc+0xe0>)
    180c:	2100      	movs	r1, #0
    180e:	0018      	movs	r0, r3
    1810:	4b25      	ldr	r3, [pc, #148]	; (18a8 <sd_mmc_spi_install_mmc+0xd8>)
    1812:	4798      	blx	r3
    1814:	0003      	movs	r3, r0
    1816:	001a      	movs	r2, r3
    1818:	2301      	movs	r3, #1
    181a:	4053      	eors	r3, r2
    181c:	b2db      	uxtb	r3, r3
    181e:	2b00      	cmp	r3, #0
    1820:	d001      	beq.n	1826 <sd_mmc_spi_install_mmc+0x56>
		return false;
    1822:	2300      	movs	r3, #0
    1824:	e03c      	b.n	18a0 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
    1826:	4b23      	ldr	r3, [pc, #140]	; (18b4 <sd_mmc_spi_install_mmc+0xe4>)
    1828:	4798      	blx	r3
    182a:	0003      	movs	r3, r0
    182c:	001a      	movs	r2, r3
    182e:	2301      	movs	r3, #1
    1830:	4053      	eors	r3, r2
    1832:	b2db      	uxtb	r3, r3
    1834:	2b00      	cmp	r3, #0
    1836:	d001      	beq.n	183c <sd_mmc_spi_install_mmc+0x6c>
		return false;
    1838:	2300      	movs	r3, #0
    183a:	e031      	b.n	18a0 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
    183c:	4b1e      	ldr	r3, [pc, #120]	; (18b8 <sd_mmc_spi_install_mmc+0xe8>)
    183e:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
    1840:	4b1e      	ldr	r3, [pc, #120]	; (18bc <sd_mmc_spi_install_mmc+0xec>)
    1842:	681b      	ldr	r3, [r3, #0]
    1844:	7b1b      	ldrb	r3, [r3, #12]
    1846:	2b3f      	cmp	r3, #63	; 0x3f
    1848:	d90c      	bls.n	1864 <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
    184a:	1dfb      	adds	r3, r7, #7
    184c:	0018      	movs	r0, r3
    184e:	4b1c      	ldr	r3, [pc, #112]	; (18c0 <sd_mmc_spi_install_mmc+0xf0>)
    1850:	4798      	blx	r3
    1852:	0003      	movs	r3, r0
    1854:	001a      	movs	r2, r3
    1856:	2301      	movs	r3, #1
    1858:	4053      	eors	r3, r2
    185a:	b2db      	uxtb	r3, r3
    185c:	2b00      	cmp	r3, #0
    185e:	d001      	beq.n	1864 <sd_mmc_spi_install_mmc+0x94>
			return false;
    1860:	2300      	movs	r3, #0
    1862:	e01d      	b.n	18a0 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
    1864:	2380      	movs	r3, #128	; 0x80
    1866:	009b      	lsls	r3, r3, #2
    1868:	4a16      	ldr	r2, [pc, #88]	; (18c4 <sd_mmc_spi_install_mmc+0xf4>)
    186a:	0019      	movs	r1, r3
    186c:	0010      	movs	r0, r2
    186e:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <sd_mmc_spi_install_mmc+0xd8>)
    1870:	4798      	blx	r3
    1872:	0003      	movs	r3, r0
    1874:	001a      	movs	r2, r3
    1876:	2301      	movs	r3, #1
    1878:	4053      	eors	r3, r2
    187a:	b2db      	uxtb	r3, r3
    187c:	2b00      	cmp	r3, #0
    187e:	d001      	beq.n	1884 <sd_mmc_spi_install_mmc+0xb4>
		return false;
    1880:	2300      	movs	r3, #0
    1882:	e00d      	b.n	18a0 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
    1884:	4b10      	ldr	r3, [pc, #64]	; (18c8 <sd_mmc_spi_install_mmc+0xf8>)
    1886:	4798      	blx	r3
    1888:	0003      	movs	r3, r0
    188a:	001a      	movs	r2, r3
    188c:	2301      	movs	r3, #1
    188e:	4053      	eors	r3, r2
    1890:	b2db      	uxtb	r3, r3
    1892:	2b00      	cmp	r3, #0
    1894:	d001      	beq.n	189a <sd_mmc_spi_install_mmc+0xca>
		return false;
    1896:	2300      	movs	r3, #0
    1898:	e002      	b.n	18a0 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
    189a:	4b0c      	ldr	r3, [pc, #48]	; (18cc <sd_mmc_spi_install_mmc+0xfc>)
    189c:	4798      	blx	r3
	return true;
    189e:	2301      	movs	r3, #1
}
    18a0:	0018      	movs	r0, r3
    18a2:	46bd      	mov	sp, r7
    18a4:	b002      	add	sp, #8
    18a6:	bd80      	pop	{r7, pc}
    18a8:	00002875 	.word	0x00002875
    18ac:	00000ddd 	.word	0x00000ddd
    18b0:	0000113b 	.word	0x0000113b
    18b4:	00001115 	.word	0x00001115
    18b8:	00001185 	.word	0x00001185
    18bc:	200000e0 	.word	0x200000e0
    18c0:	00000fe9 	.word	0x00000fe9
    18c4:	00001110 	.word	0x00001110
    18c8:	000013a1 	.word	0x000013a1
    18cc:	000015c9 	.word	0x000015c9

000018d0 <sd_mmc_init>:
//--------------------- PUBLIC FUNCTIONS ----------------------------



void sd_mmc_init(void)
{
    18d0:	b580      	push	{r7, lr}
    18d2:	b082      	sub	sp, #8
    18d4:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    18d6:	1dfb      	adds	r3, r7, #7
    18d8:	2200      	movs	r2, #0
    18da:	701a      	strb	r2, [r3, #0]
    18dc:	e00c      	b.n	18f8 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
    18de:	1dfb      	adds	r3, r7, #7
    18e0:	781b      	ldrb	r3, [r3, #0]
    18e2:	4a0c      	ldr	r2, [pc, #48]	; (1914 <sd_mmc_init+0x44>)
    18e4:	015b      	lsls	r3, r3, #5
    18e6:	18d3      	adds	r3, r2, r3
    18e8:	330a      	adds	r3, #10
    18ea:	2204      	movs	r2, #4
    18ec:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
    18ee:	1dfb      	adds	r3, r7, #7
    18f0:	781a      	ldrb	r2, [r3, #0]
    18f2:	1dfb      	adds	r3, r7, #7
    18f4:	3201      	adds	r2, #1
    18f6:	701a      	strb	r2, [r3, #0]
    18f8:	1dfb      	adds	r3, r7, #7
    18fa:	781b      	ldrb	r3, [r3, #0]
    18fc:	2b00      	cmp	r3, #0
    18fe:	d0ee      	beq.n	18de <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
    1900:	4b05      	ldr	r3, [pc, #20]	; (1918 <sd_mmc_init+0x48>)
    1902:	22ff      	movs	r2, #255	; 0xff
    1904:	701a      	strb	r2, [r3, #0]
	driver_init();
    1906:	4b05      	ldr	r3, [pc, #20]	; (191c <sd_mmc_init+0x4c>)
    1908:	4798      	blx	r3
}
    190a:	46c0      	nop			; (mov r8, r8)
    190c:	46bd      	mov	sp, r7
    190e:	b002      	add	sp, #8
    1910:	bd80      	pop	{r7, pc}
    1912:	46c0      	nop			; (mov r8, r8)
    1914:	200000bc 	.word	0x200000bc
    1918:	200000dc 	.word	0x200000dc
    191c:	00002695 	.word	0x00002695

00001920 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    1920:	b590      	push	{r4, r7, lr}
    1922:	b085      	sub	sp, #20
    1924:	af00      	add	r7, sp, #0
    1926:	0002      	movs	r2, r0
    1928:	1dfb      	adds	r3, r7, #7
    192a:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    192c:	230f      	movs	r3, #15
    192e:	18fc      	adds	r4, r7, r3
    1930:	1dfb      	adds	r3, r7, #7
    1932:	781b      	ldrb	r3, [r3, #0]
    1934:	0018      	movs	r0, r3
    1936:	4b13      	ldr	r3, [pc, #76]	; (1984 <sd_mmc_check+0x64>)
    1938:	4798      	blx	r3
    193a:	0003      	movs	r3, r0
    193c:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    193e:	230f      	movs	r3, #15
    1940:	18fb      	adds	r3, r7, r3
    1942:	781b      	ldrb	r3, [r3, #0]
    1944:	2b01      	cmp	r3, #1
    1946:	d005      	beq.n	1954 <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
    1948:	4b0f      	ldr	r3, [pc, #60]	; (1988 <sd_mmc_check+0x68>)
    194a:	4798      	blx	r3
		return sd_mmc_err;
    194c:	230f      	movs	r3, #15
    194e:	18fb      	adds	r3, r7, r3
    1950:	781b      	ldrb	r3, [r3, #0]
    1952:	e012      	b.n	197a <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1954:	4b0d      	ldr	r3, [pc, #52]	; (198c <sd_mmc_check+0x6c>)
    1956:	4798      	blx	r3
    1958:	1e03      	subs	r3, r0, #0
    195a:	d007      	beq.n	196c <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    195c:	4b0c      	ldr	r3, [pc, #48]	; (1990 <sd_mmc_check+0x70>)
    195e:	681b      	ldr	r3, [r3, #0]
    1960:	2200      	movs	r2, #0
    1962:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1964:	4b08      	ldr	r3, [pc, #32]	; (1988 <sd_mmc_check+0x68>)
    1966:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    1968:	2301      	movs	r3, #1
    196a:	e006      	b.n	197a <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    196c:	4b08      	ldr	r3, [pc, #32]	; (1990 <sd_mmc_check+0x70>)
    196e:	681b      	ldr	r3, [r3, #0]
    1970:	2203      	movs	r2, #3
    1972:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    1974:	4b04      	ldr	r3, [pc, #16]	; (1988 <sd_mmc_check+0x68>)
    1976:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1978:	2303      	movs	r3, #3
}
    197a:	0018      	movs	r0, r3
    197c:	46bd      	mov	sp, r7
    197e:	b005      	add	sp, #20
    1980:	bd90      	pop	{r4, r7, pc}
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	00001505 	.word	0x00001505
    1988:	00001601 	.word	0x00001601
    198c:	00001625 	.word	0x00001625
    1990:	200000e0 	.word	0x200000e0

00001994 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    1994:	b580      	push	{r7, lr}
    1996:	b082      	sub	sp, #8
    1998:	af00      	add	r7, sp, #0
    199a:	0002      	movs	r2, r0
    199c:	1dfb      	adds	r3, r7, #7
    199e:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    19a0:	1dfb      	adds	r3, r7, #7
    19a2:	781b      	ldrb	r3, [r3, #0]
    19a4:	0018      	movs	r0, r3
    19a6:	4b07      	ldr	r3, [pc, #28]	; (19c4 <sd_mmc_get_type+0x30>)
    19a8:	4798      	blx	r3
    19aa:	1e03      	subs	r3, r0, #0
    19ac:	d001      	beq.n	19b2 <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
    19ae:	2300      	movs	r3, #0
    19b0:	e004      	b.n	19bc <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
    19b2:	4b05      	ldr	r3, [pc, #20]	; (19c8 <sd_mmc_get_type+0x34>)
    19b4:	4798      	blx	r3
	return sd_mmc_card->type;
    19b6:	4b05      	ldr	r3, [pc, #20]	; (19cc <sd_mmc_get_type+0x38>)
    19b8:	681b      	ldr	r3, [r3, #0]
    19ba:	7adb      	ldrb	r3, [r3, #11]
}
    19bc:	0018      	movs	r0, r3
    19be:	46bd      	mov	sp, r7
    19c0:	b002      	add	sp, #8
    19c2:	bd80      	pop	{r7, pc}
    19c4:	00001505 	.word	0x00001505
    19c8:	00001601 	.word	0x00001601
    19cc:	200000e0 	.word	0x200000e0

000019d0 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    19d0:	b580      	push	{r7, lr}
    19d2:	b082      	sub	sp, #8
    19d4:	af00      	add	r7, sp, #0
    19d6:	0002      	movs	r2, r0
    19d8:	1dfb      	adds	r3, r7, #7
    19da:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    19dc:	1dfb      	adds	r3, r7, #7
    19de:	781b      	ldrb	r3, [r3, #0]
    19e0:	0018      	movs	r0, r3
    19e2:	4b07      	ldr	r3, [pc, #28]	; (1a00 <sd_mmc_get_capacity+0x30>)
    19e4:	4798      	blx	r3
    19e6:	1e03      	subs	r3, r0, #0
    19e8:	d001      	beq.n	19ee <sd_mmc_get_capacity+0x1e>
		return 0;
    19ea:	2300      	movs	r3, #0
    19ec:	e004      	b.n	19f8 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
    19ee:	4b05      	ldr	r3, [pc, #20]	; (1a04 <sd_mmc_get_capacity+0x34>)
    19f0:	4798      	blx	r3
	return sd_mmc_card->capacity;
    19f2:	4b05      	ldr	r3, [pc, #20]	; (1a08 <sd_mmc_get_capacity+0x38>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	685b      	ldr	r3, [r3, #4]
}
    19f8:	0018      	movs	r0, r3
    19fa:	46bd      	mov	sp, r7
    19fc:	b002      	add	sp, #8
    19fe:	bd80      	pop	{r7, pc}
    1a00:	00001505 	.word	0x00001505
    1a04:	00001601 	.word	0x00001601
    1a08:	200000e0 	.word	0x200000e0

00001a0c <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1a0c:	b580      	push	{r7, lr}
    1a0e:	b082      	sub	sp, #8
    1a10:	af00      	add	r7, sp, #0
    1a12:	0002      	movs	r2, r0
    1a14:	1dfb      	adds	r3, r7, #7
    1a16:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    1a18:	2300      	movs	r3, #0
}
    1a1a:	0018      	movs	r0, r3
    1a1c:	46bd      	mov	sp, r7
    1a1e:	b002      	add	sp, #8
    1a20:	bd80      	pop	{r7, pc}
	...

00001a24 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1a24:	b590      	push	{r4, r7, lr}
    1a26:	b089      	sub	sp, #36	; 0x24
    1a28:	af02      	add	r7, sp, #8
    1a2a:	6039      	str	r1, [r7, #0]
    1a2c:	0011      	movs	r1, r2
    1a2e:	1dfb      	adds	r3, r7, #7
    1a30:	1c02      	adds	r2, r0, #0
    1a32:	701a      	strb	r2, [r3, #0]
    1a34:	1d3b      	adds	r3, r7, #4
    1a36:	1c0a      	adds	r2, r1, #0
    1a38:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1a3a:	230f      	movs	r3, #15
    1a3c:	18fc      	adds	r4, r7, r3
    1a3e:	1dfb      	adds	r3, r7, #7
    1a40:	781b      	ldrb	r3, [r3, #0]
    1a42:	0018      	movs	r0, r3
    1a44:	4b29      	ldr	r3, [pc, #164]	; (1aec <sd_mmc_init_read_blocks+0xc8>)
    1a46:	4798      	blx	r3
    1a48:	0003      	movs	r3, r0
    1a4a:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1a4c:	230f      	movs	r3, #15
    1a4e:	18fb      	adds	r3, r7, r3
    1a50:	781b      	ldrb	r3, [r3, #0]
    1a52:	2b00      	cmp	r3, #0
    1a54:	d003      	beq.n	1a5e <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
    1a56:	230f      	movs	r3, #15
    1a58:	18fb      	adds	r3, r7, r3
    1a5a:	781b      	ldrb	r3, [r3, #0]
    1a5c:	e041      	b.n	1ae2 <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1a5e:	4b24      	ldr	r3, [pc, #144]	; (1af0 <sd_mmc_init_read_blocks+0xcc>)
    1a60:	4798      	blx	r3
    1a62:	0003      	movs	r3, r0
    1a64:	001a      	movs	r2, r3
    1a66:	2301      	movs	r3, #1
    1a68:	4053      	eors	r3, r2
    1a6a:	b2db      	uxtb	r3, r3
    1a6c:	2b00      	cmp	r3, #0
    1a6e:	d003      	beq.n	1a78 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
    1a70:	4b20      	ldr	r3, [pc, #128]	; (1af4 <sd_mmc_init_read_blocks+0xd0>)
    1a72:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1a74:	2305      	movs	r3, #5
    1a76:	e034      	b.n	1ae2 <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
    1a78:	1d3b      	adds	r3, r7, #4
    1a7a:	881b      	ldrh	r3, [r3, #0]
    1a7c:	2b01      	cmp	r3, #1
    1a7e:	d902      	bls.n	1a86 <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    1a80:	4b1d      	ldr	r3, [pc, #116]	; (1af8 <sd_mmc_init_read_blocks+0xd4>)
    1a82:	617b      	str	r3, [r7, #20]
    1a84:	e001      	b.n	1a8a <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    1a86:	4b1d      	ldr	r3, [pc, #116]	; (1afc <sd_mmc_init_read_blocks+0xd8>)
    1a88:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1a8a:	4b1d      	ldr	r3, [pc, #116]	; (1b00 <sd_mmc_init_read_blocks+0xdc>)
    1a8c:	681b      	ldr	r3, [r3, #0]
    1a8e:	7adb      	ldrb	r3, [r3, #11]
    1a90:	001a      	movs	r2, r3
    1a92:	2308      	movs	r3, #8
    1a94:	4013      	ands	r3, r2
    1a96:	d002      	beq.n	1a9e <sd_mmc_init_read_blocks+0x7a>
		arg = start;
    1a98:	683b      	ldr	r3, [r7, #0]
    1a9a:	613b      	str	r3, [r7, #16]
    1a9c:	e002      	b.n	1aa4 <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1a9e:	683b      	ldr	r3, [r7, #0]
    1aa0:	025b      	lsls	r3, r3, #9
    1aa2:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1aa4:	1d3b      	adds	r3, r7, #4
    1aa6:	881c      	ldrh	r4, [r3, #0]
    1aa8:	2380      	movs	r3, #128	; 0x80
    1aaa:	009a      	lsls	r2, r3, #2
    1aac:	6939      	ldr	r1, [r7, #16]
    1aae:	6978      	ldr	r0, [r7, #20]
    1ab0:	2301      	movs	r3, #1
    1ab2:	9300      	str	r3, [sp, #0]
    1ab4:	0023      	movs	r3, r4
    1ab6:	4c13      	ldr	r4, [pc, #76]	; (1b04 <sd_mmc_init_read_blocks+0xe0>)
    1ab8:	47a0      	blx	r4
    1aba:	0003      	movs	r3, r0
    1abc:	001a      	movs	r2, r3
    1abe:	2301      	movs	r3, #1
    1ac0:	4053      	eors	r3, r2
    1ac2:	b2db      	uxtb	r3, r3
    1ac4:	2b00      	cmp	r3, #0
    1ac6:	d003      	beq.n	1ad0 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
    1ac8:	4b0a      	ldr	r3, [pc, #40]	; (1af4 <sd_mmc_init_read_blocks+0xd0>)
    1aca:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1acc:	2305      	movs	r3, #5
    1ace:	e008      	b.n	1ae2 <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1ad0:	4b0d      	ldr	r3, [pc, #52]	; (1b08 <sd_mmc_init_read_blocks+0xe4>)
    1ad2:	1d3a      	adds	r2, r7, #4
    1ad4:	8812      	ldrh	r2, [r2, #0]
    1ad6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1ad8:	4b0c      	ldr	r3, [pc, #48]	; (1b0c <sd_mmc_init_read_blocks+0xe8>)
    1ada:	1d3a      	adds	r2, r7, #4
    1adc:	8812      	ldrh	r2, [r2, #0]
    1ade:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1ae0:	2300      	movs	r3, #0
}
    1ae2:	0018      	movs	r0, r3
    1ae4:	46bd      	mov	sp, r7
    1ae6:	b007      	add	sp, #28
    1ae8:	bd90      	pop	{r4, r7, pc}
    1aea:	46c0      	nop			; (mov r8, r8)
    1aec:	00001505 	.word	0x00001505
    1af0:	000013a1 	.word	0x000013a1
    1af4:	00001601 	.word	0x00001601
    1af8:	00101112 	.word	0x00101112
    1afc:	00081111 	.word	0x00081111
    1b00:	200000e0 	.word	0x200000e0
    1b04:	0000289d 	.word	0x0000289d
    1b08:	200000e6 	.word	0x200000e6
    1b0c:	200000e4 	.word	0x200000e4

00001b10 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1b10:	b580      	push	{r7, lr}
    1b12:	b082      	sub	sp, #8
    1b14:	af00      	add	r7, sp, #0
    1b16:	6078      	str	r0, [r7, #4]
    1b18:	000a      	movs	r2, r1
    1b1a:	1cbb      	adds	r3, r7, #2
    1b1c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1b1e:	1cbb      	adds	r3, r7, #2
    1b20:	881a      	ldrh	r2, [r3, #0]
    1b22:	687b      	ldr	r3, [r7, #4]
    1b24:	0011      	movs	r1, r2
    1b26:	0018      	movs	r0, r3
    1b28:	4b0d      	ldr	r3, [pc, #52]	; (1b60 <sd_mmc_start_read_blocks+0x50>)
    1b2a:	4798      	blx	r3
    1b2c:	0003      	movs	r3, r0
    1b2e:	001a      	movs	r2, r3
    1b30:	2301      	movs	r3, #1
    1b32:	4053      	eors	r3, r2
    1b34:	b2db      	uxtb	r3, r3
    1b36:	2b00      	cmp	r3, #0
    1b38:	d004      	beq.n	1b44 <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1b3a:	4b0a      	ldr	r3, [pc, #40]	; (1b64 <sd_mmc_start_read_blocks+0x54>)
    1b3c:	2200      	movs	r2, #0
    1b3e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1b40:	2305      	movs	r3, #5
    1b42:	e008      	b.n	1b56 <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1b44:	4b07      	ldr	r3, [pc, #28]	; (1b64 <sd_mmc_start_read_blocks+0x54>)
    1b46:	881a      	ldrh	r2, [r3, #0]
    1b48:	1cbb      	adds	r3, r7, #2
    1b4a:	881b      	ldrh	r3, [r3, #0]
    1b4c:	1ad3      	subs	r3, r2, r3
    1b4e:	b29a      	uxth	r2, r3
    1b50:	4b04      	ldr	r3, [pc, #16]	; (1b64 <sd_mmc_start_read_blocks+0x54>)
    1b52:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1b54:	2300      	movs	r3, #0
}
    1b56:	0018      	movs	r0, r3
    1b58:	46bd      	mov	sp, r7
    1b5a:	b002      	add	sp, #8
    1b5c:	bd80      	pop	{r7, pc}
    1b5e:	46c0      	nop			; (mov r8, r8)
    1b60:	00002b6d 	.word	0x00002b6d
    1b64:	200000e6 	.word	0x200000e6

00001b68 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    1b68:	b580      	push	{r7, lr}
    1b6a:	b082      	sub	sp, #8
    1b6c:	af00      	add	r7, sp, #0
    1b6e:	0002      	movs	r2, r0
    1b70:	1dfb      	adds	r3, r7, #7
    1b72:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
    1b74:	4b1c      	ldr	r3, [pc, #112]	; (1be8 <sd_mmc_wait_end_of_read_blocks+0x80>)
    1b76:	4798      	blx	r3
    1b78:	0003      	movs	r3, r0
    1b7a:	001a      	movs	r2, r3
    1b7c:	2301      	movs	r3, #1
    1b7e:	4053      	eors	r3, r2
    1b80:	b2db      	uxtb	r3, r3
    1b82:	2b00      	cmp	r3, #0
    1b84:	d001      	beq.n	1b8a <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1b86:	2305      	movs	r3, #5
    1b88:	e029      	b.n	1bde <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
    1b8a:	1dfb      	adds	r3, r7, #7
    1b8c:	781b      	ldrb	r3, [r3, #0]
    1b8e:	2b00      	cmp	r3, #0
    1b90:	d003      	beq.n	1b9a <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1b92:	4b16      	ldr	r3, [pc, #88]	; (1bec <sd_mmc_wait_end_of_read_blocks+0x84>)
    1b94:	2200      	movs	r2, #0
    1b96:	801a      	strh	r2, [r3, #0]
    1b98:	e005      	b.n	1ba6 <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1b9a:	4b14      	ldr	r3, [pc, #80]	; (1bec <sd_mmc_wait_end_of_read_blocks+0x84>)
    1b9c:	881b      	ldrh	r3, [r3, #0]
    1b9e:	2b00      	cmp	r3, #0
    1ba0:	d001      	beq.n	1ba6 <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
    1ba2:	2300      	movs	r3, #0
    1ba4:	e01b      	b.n	1bde <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1ba6:	4b12      	ldr	r3, [pc, #72]	; (1bf0 <sd_mmc_wait_end_of_read_blocks+0x88>)
    1ba8:	881b      	ldrh	r3, [r3, #0]
    1baa:	2b01      	cmp	r3, #1
    1bac:	d103      	bne.n	1bb6 <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1bae:	4b11      	ldr	r3, [pc, #68]	; (1bf4 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1bb0:	4798      	blx	r3
		return SD_MMC_OK;
    1bb2:	2300      	movs	r3, #0
    1bb4:	e013      	b.n	1bde <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1bb6:	4b10      	ldr	r3, [pc, #64]	; (1bf8 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1bb8:	2100      	movs	r1, #0
    1bba:	0018      	movs	r0, r3
    1bbc:	4b0f      	ldr	r3, [pc, #60]	; (1bfc <sd_mmc_wait_end_of_read_blocks+0x94>)
    1bbe:	4798      	blx	r3
    1bc0:	0003      	movs	r3, r0
    1bc2:	001a      	movs	r2, r3
    1bc4:	2301      	movs	r3, #1
    1bc6:	4053      	eors	r3, r2
    1bc8:	b2db      	uxtb	r3, r3
    1bca:	2b00      	cmp	r3, #0
    1bcc:	d004      	beq.n	1bd8 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1bce:	4b0a      	ldr	r3, [pc, #40]	; (1bf8 <sd_mmc_wait_end_of_read_blocks+0x90>)
    1bd0:	2100      	movs	r1, #0
    1bd2:	0018      	movs	r0, r3
    1bd4:	4b09      	ldr	r3, [pc, #36]	; (1bfc <sd_mmc_wait_end_of_read_blocks+0x94>)
    1bd6:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    1bd8:	4b06      	ldr	r3, [pc, #24]	; (1bf4 <sd_mmc_wait_end_of_read_blocks+0x8c>)
    1bda:	4798      	blx	r3
	return SD_MMC_OK;
    1bdc:	2300      	movs	r3, #0
}
    1bde:	0018      	movs	r0, r3
    1be0:	46bd      	mov	sp, r7
    1be2:	b002      	add	sp, #8
    1be4:	bd80      	pop	{r7, pc}
    1be6:	46c0      	nop			; (mov r8, r8)
    1be8:	00002c11 	.word	0x00002c11
    1bec:	200000e6 	.word	0x200000e6
    1bf0:	200000e4 	.word	0x200000e4
    1bf4:	00001601 	.word	0x00001601
    1bf8:	0000310c 	.word	0x0000310c
    1bfc:	00002875 	.word	0x00002875

00001c00 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1c00:	b590      	push	{r4, r7, lr}
    1c02:	b089      	sub	sp, #36	; 0x24
    1c04:	af02      	add	r7, sp, #8
    1c06:	6039      	str	r1, [r7, #0]
    1c08:	0011      	movs	r1, r2
    1c0a:	1dfb      	adds	r3, r7, #7
    1c0c:	1c02      	adds	r2, r0, #0
    1c0e:	701a      	strb	r2, [r3, #0]
    1c10:	1d3b      	adds	r3, r7, #4
    1c12:	1c0a      	adds	r2, r1, #0
    1c14:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1c16:	230f      	movs	r3, #15
    1c18:	18fc      	adds	r4, r7, r3
    1c1a:	1dfb      	adds	r3, r7, #7
    1c1c:	781b      	ldrb	r3, [r3, #0]
    1c1e:	0018      	movs	r0, r3
    1c20:	4b28      	ldr	r3, [pc, #160]	; (1cc4 <sd_mmc_init_write_blocks+0xc4>)
    1c22:	4798      	blx	r3
    1c24:	0003      	movs	r3, r0
    1c26:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1c28:	230f      	movs	r3, #15
    1c2a:	18fb      	adds	r3, r7, r3
    1c2c:	781b      	ldrb	r3, [r3, #0]
    1c2e:	2b00      	cmp	r3, #0
    1c30:	d003      	beq.n	1c3a <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
    1c32:	230f      	movs	r3, #15
    1c34:	18fb      	adds	r3, r7, r3
    1c36:	781b      	ldrb	r3, [r3, #0]
    1c38:	e03f      	b.n	1cba <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
    1c3a:	1dfb      	adds	r3, r7, #7
    1c3c:	781b      	ldrb	r3, [r3, #0]
    1c3e:	0018      	movs	r0, r3
    1c40:	4b21      	ldr	r3, [pc, #132]	; (1cc8 <sd_mmc_init_write_blocks+0xc8>)
    1c42:	4798      	blx	r3
    1c44:	1e03      	subs	r3, r0, #0
    1c46:	d003      	beq.n	1c50 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
    1c48:	4b20      	ldr	r3, [pc, #128]	; (1ccc <sd_mmc_init_write_blocks+0xcc>)
    1c4a:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    1c4c:	2307      	movs	r3, #7
    1c4e:	e034      	b.n	1cba <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
    1c50:	1d3b      	adds	r3, r7, #4
    1c52:	881b      	ldrh	r3, [r3, #0]
    1c54:	2b01      	cmp	r3, #1
    1c56:	d902      	bls.n	1c5e <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    1c58:	4b1d      	ldr	r3, [pc, #116]	; (1cd0 <sd_mmc_init_write_blocks+0xd0>)
    1c5a:	617b      	str	r3, [r7, #20]
    1c5c:	e001      	b.n	1c62 <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    1c5e:	4b1d      	ldr	r3, [pc, #116]	; (1cd4 <sd_mmc_init_write_blocks+0xd4>)
    1c60:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    1c62:	4b1d      	ldr	r3, [pc, #116]	; (1cd8 <sd_mmc_init_write_blocks+0xd8>)
    1c64:	681b      	ldr	r3, [r3, #0]
    1c66:	7adb      	ldrb	r3, [r3, #11]
    1c68:	001a      	movs	r2, r3
    1c6a:	2308      	movs	r3, #8
    1c6c:	4013      	ands	r3, r2
    1c6e:	d002      	beq.n	1c76 <sd_mmc_init_write_blocks+0x76>
		arg = start;
    1c70:	683b      	ldr	r3, [r7, #0]
    1c72:	613b      	str	r3, [r7, #16]
    1c74:	e002      	b.n	1c7c <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    1c76:	683b      	ldr	r3, [r7, #0]
    1c78:	025b      	lsls	r3, r3, #9
    1c7a:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    1c7c:	1d3b      	adds	r3, r7, #4
    1c7e:	881c      	ldrh	r4, [r3, #0]
    1c80:	2380      	movs	r3, #128	; 0x80
    1c82:	009a      	lsls	r2, r3, #2
    1c84:	6939      	ldr	r1, [r7, #16]
    1c86:	6978      	ldr	r0, [r7, #20]
    1c88:	2301      	movs	r3, #1
    1c8a:	9300      	str	r3, [sp, #0]
    1c8c:	0023      	movs	r3, r4
    1c8e:	4c13      	ldr	r4, [pc, #76]	; (1cdc <sd_mmc_init_write_blocks+0xdc>)
    1c90:	47a0      	blx	r4
    1c92:	0003      	movs	r3, r0
    1c94:	001a      	movs	r2, r3
    1c96:	2301      	movs	r3, #1
    1c98:	4053      	eors	r3, r2
    1c9a:	b2db      	uxtb	r3, r3
    1c9c:	2b00      	cmp	r3, #0
    1c9e:	d003      	beq.n	1ca8 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
    1ca0:	4b0a      	ldr	r3, [pc, #40]	; (1ccc <sd_mmc_init_write_blocks+0xcc>)
    1ca2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1ca4:	2305      	movs	r3, #5
    1ca6:	e008      	b.n	1cba <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1ca8:	4b0d      	ldr	r3, [pc, #52]	; (1ce0 <sd_mmc_init_write_blocks+0xe0>)
    1caa:	1d3a      	adds	r2, r7, #4
    1cac:	8812      	ldrh	r2, [r2, #0]
    1cae:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1cb0:	4b0c      	ldr	r3, [pc, #48]	; (1ce4 <sd_mmc_init_write_blocks+0xe4>)
    1cb2:	1d3a      	adds	r2, r7, #4
    1cb4:	8812      	ldrh	r2, [r2, #0]
    1cb6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1cb8:	2300      	movs	r3, #0
}
    1cba:	0018      	movs	r0, r3
    1cbc:	46bd      	mov	sp, r7
    1cbe:	b007      	add	sp, #28
    1cc0:	bd90      	pop	{r4, r7, pc}
    1cc2:	46c0      	nop			; (mov r8, r8)
    1cc4:	00001505 	.word	0x00001505
    1cc8:	00001a0d 	.word	0x00001a0d
    1ccc:	00001601 	.word	0x00001601
    1cd0:	00109119 	.word	0x00109119
    1cd4:	00089118 	.word	0x00089118
    1cd8:	200000e0 	.word	0x200000e0
    1cdc:	0000289d 	.word	0x0000289d
    1ce0:	200000e6 	.word	0x200000e6
    1ce4:	200000e4 	.word	0x200000e4

00001ce8 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1ce8:	b580      	push	{r7, lr}
    1cea:	b082      	sub	sp, #8
    1cec:	af00      	add	r7, sp, #0
    1cee:	6078      	str	r0, [r7, #4]
    1cf0:	000a      	movs	r2, r1
    1cf2:	1cbb      	adds	r3, r7, #2
    1cf4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    1cf6:	1cbb      	adds	r3, r7, #2
    1cf8:	881a      	ldrh	r2, [r3, #0]
    1cfa:	687b      	ldr	r3, [r7, #4]
    1cfc:	0011      	movs	r1, r2
    1cfe:	0018      	movs	r0, r3
    1d00:	4b0d      	ldr	r3, [pc, #52]	; (1d38 <sd_mmc_start_write_blocks+0x50>)
    1d02:	4798      	blx	r3
    1d04:	0003      	movs	r3, r0
    1d06:	001a      	movs	r2, r3
    1d08:	2301      	movs	r3, #1
    1d0a:	4053      	eors	r3, r2
    1d0c:	b2db      	uxtb	r3, r3
    1d0e:	2b00      	cmp	r3, #0
    1d10:	d004      	beq.n	1d1c <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
    1d12:	4b0a      	ldr	r3, [pc, #40]	; (1d3c <sd_mmc_start_write_blocks+0x54>)
    1d14:	2200      	movs	r2, #0
    1d16:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1d18:	2305      	movs	r3, #5
    1d1a:	e008      	b.n	1d2e <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    1d1c:	4b07      	ldr	r3, [pc, #28]	; (1d3c <sd_mmc_start_write_blocks+0x54>)
    1d1e:	881a      	ldrh	r2, [r3, #0]
    1d20:	1cbb      	adds	r3, r7, #2
    1d22:	881b      	ldrh	r3, [r3, #0]
    1d24:	1ad3      	subs	r3, r2, r3
    1d26:	b29a      	uxth	r2, r3
    1d28:	4b04      	ldr	r3, [pc, #16]	; (1d3c <sd_mmc_start_write_blocks+0x54>)
    1d2a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1d2c:	2300      	movs	r3, #0
}
    1d2e:	0018      	movs	r0, r3
    1d30:	46bd      	mov	sp, r7
    1d32:	b002      	add	sp, #8
    1d34:	bd80      	pop	{r7, pc}
    1d36:	46c0      	nop			; (mov r8, r8)
    1d38:	00002c1d 	.word	0x00002c1d
    1d3c:	200000e6 	.word	0x200000e6

00001d40 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    1d40:	b580      	push	{r7, lr}
    1d42:	b082      	sub	sp, #8
    1d44:	af00      	add	r7, sp, #0
    1d46:	0002      	movs	r2, r0
    1d48:	1dfb      	adds	r3, r7, #7
    1d4a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
    1d4c:	4b13      	ldr	r3, [pc, #76]	; (1d9c <sd_mmc_wait_end_of_write_blocks+0x5c>)
    1d4e:	4798      	blx	r3
    1d50:	0003      	movs	r3, r0
    1d52:	001a      	movs	r2, r3
    1d54:	2301      	movs	r3, #1
    1d56:	4053      	eors	r3, r2
    1d58:	b2db      	uxtb	r3, r3
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d001      	beq.n	1d62 <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
    1d5e:	2305      	movs	r3, #5
    1d60:	e018      	b.n	1d94 <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
    1d62:	1dfb      	adds	r3, r7, #7
    1d64:	781b      	ldrb	r3, [r3, #0]
    1d66:	2b00      	cmp	r3, #0
    1d68:	d003      	beq.n	1d72 <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
    1d6a:	4b0d      	ldr	r3, [pc, #52]	; (1da0 <sd_mmc_wait_end_of_write_blocks+0x60>)
    1d6c:	2200      	movs	r2, #0
    1d6e:	801a      	strh	r2, [r3, #0]
    1d70:	e005      	b.n	1d7e <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
    1d72:	4b0b      	ldr	r3, [pc, #44]	; (1da0 <sd_mmc_wait_end_of_write_blocks+0x60>)
    1d74:	881b      	ldrh	r3, [r3, #0]
    1d76:	2b00      	cmp	r3, #0
    1d78:	d001      	beq.n	1d7e <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
    1d7a:	2300      	movs	r3, #0
    1d7c:	e00a      	b.n	1d94 <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1d7e:	4b09      	ldr	r3, [pc, #36]	; (1da4 <sd_mmc_wait_end_of_write_blocks+0x64>)
    1d80:	881b      	ldrh	r3, [r3, #0]
    1d82:	2b01      	cmp	r3, #1
    1d84:	d103      	bne.n	1d8e <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1d86:	4b08      	ldr	r3, [pc, #32]	; (1da8 <sd_mmc_wait_end_of_write_blocks+0x68>)
    1d88:	4798      	blx	r3
		return SD_MMC_OK;
    1d8a:	2300      	movs	r3, #0
    1d8c:	e002      	b.n	1d94 <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    1d8e:	4b06      	ldr	r3, [pc, #24]	; (1da8 <sd_mmc_wait_end_of_write_blocks+0x68>)
    1d90:	4798      	blx	r3
	return SD_MMC_OK;
    1d92:	2300      	movs	r3, #0
}
    1d94:	0018      	movs	r0, r3
    1d96:	46bd      	mov	sp, r7
    1d98:	b002      	add	sp, #8
    1d9a:	bd80      	pop	{r7, pc}
    1d9c:	00002cdd 	.word	0x00002cdd
    1da0:	200000e6 	.word	0x200000e6
    1da4:	200000e4 	.word	0x200000e4
    1da8:	00001601 	.word	0x00001601

00001dac <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    1dac:	b580      	push	{r7, lr}
    1dae:	b082      	sub	sp, #8
    1db0:	af00      	add	r7, sp, #0
    1db2:	0002      	movs	r2, r0
    1db4:	1dfb      	adds	r3, r7, #7
    1db6:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
    1db8:	1dfb      	adds	r3, r7, #7
    1dba:	781b      	ldrb	r3, [r3, #0]
    1dbc:	0018      	movs	r0, r3
    1dbe:	4b16      	ldr	r3, [pc, #88]	; (1e18 <sd_mmc_test_unit_ready+0x6c>)
    1dc0:	4798      	blx	r3
    1dc2:	0003      	movs	r3, r0
    1dc4:	2b01      	cmp	r3, #1
    1dc6:	d019      	beq.n	1dfc <sd_mmc_test_unit_ready+0x50>
    1dc8:	2b02      	cmp	r3, #2
    1dca:	d019      	beq.n	1e00 <sd_mmc_test_unit_ready+0x54>
    1dcc:	2b00      	cmp	r3, #0
    1dce:	d11e      	bne.n	1e0e <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    1dd0:	1dfb      	adds	r3, r7, #7
    1dd2:	781b      	ldrb	r3, [r3, #0]
    1dd4:	4a11      	ldr	r2, [pc, #68]	; (1e1c <sd_mmc_test_unit_ready+0x70>)
    1dd6:	5cd3      	ldrb	r3, [r2, r3]
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d001      	beq.n	1de0 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
    1ddc:	2302      	movs	r3, #2
    1dde:	e017      	b.n	1e10 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    1de0:	1dfb      	adds	r3, r7, #7
    1de2:	781b      	ldrb	r3, [r3, #0]
    1de4:	0018      	movs	r0, r3
    1de6:	4b0e      	ldr	r3, [pc, #56]	; (1e20 <sd_mmc_test_unit_ready+0x74>)
    1de8:	4798      	blx	r3
    1dea:	0003      	movs	r3, r0
    1dec:	001a      	movs	r2, r3
    1dee:	2303      	movs	r3, #3
    1df0:	4013      	ands	r3, r2
    1df2:	d001      	beq.n	1df8 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
    1df4:	2300      	movs	r3, #0
    1df6:	e00b      	b.n	1e10 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    1df8:	2302      	movs	r3, #2
    1dfa:	e009      	b.n	1e10 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    1dfc:	2303      	movs	r3, #3
    1dfe:	e007      	b.n	1e10 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    1e00:	1dfb      	adds	r3, r7, #7
    1e02:	781b      	ldrb	r3, [r3, #0]
    1e04:	4a05      	ldr	r2, [pc, #20]	; (1e1c <sd_mmc_test_unit_ready+0x70>)
    1e06:	2100      	movs	r1, #0
    1e08:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    1e0a:	2302      	movs	r3, #2
    1e0c:	e000      	b.n	1e10 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
    1e0e:	2301      	movs	r3, #1
	}
}
    1e10:	0018      	movs	r0, r3
    1e12:	46bd      	mov	sp, r7
    1e14:	b002      	add	sp, #8
    1e16:	bd80      	pop	{r7, pc}
    1e18:	00001921 	.word	0x00001921
    1e1c:	200000e8 	.word	0x200000e8
    1e20:	00001995 	.word	0x00001995

00001e24 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    1e24:	b580      	push	{r7, lr}
    1e26:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
    1e28:	2000      	movs	r0, #0
    1e2a:	4b03      	ldr	r3, [pc, #12]	; (1e38 <sd_mmc_test_unit_ready_0+0x14>)
    1e2c:	4798      	blx	r3
    1e2e:	0003      	movs	r3, r0
}
    1e30:	0018      	movs	r0, r3
    1e32:	46bd      	mov	sp, r7
    1e34:	bd80      	pop	{r7, pc}
    1e36:	46c0      	nop			; (mov r8, r8)
    1e38:	00001dad 	.word	0x00001dad

00001e3c <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1e3c:	b580      	push	{r7, lr}
    1e3e:	b082      	sub	sp, #8
    1e40:	af00      	add	r7, sp, #0
    1e42:	0002      	movs	r2, r0
    1e44:	6039      	str	r1, [r7, #0]
    1e46:	1dfb      	adds	r3, r7, #7
    1e48:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    1e4a:	1dfb      	adds	r3, r7, #7
    1e4c:	781b      	ldrb	r3, [r3, #0]
    1e4e:	0018      	movs	r0, r3
    1e50:	4b08      	ldr	r3, [pc, #32]	; (1e74 <sd_mmc_read_capacity+0x38>)
    1e52:	4798      	blx	r3
    1e54:	0003      	movs	r3, r0
    1e56:	005b      	lsls	r3, r3, #1
    1e58:	1e5a      	subs	r2, r3, #1
    1e5a:	683b      	ldr	r3, [r7, #0]
    1e5c:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    1e5e:	1dfb      	adds	r3, r7, #7
    1e60:	781b      	ldrb	r3, [r3, #0]
    1e62:	0018      	movs	r0, r3
    1e64:	4b04      	ldr	r3, [pc, #16]	; (1e78 <sd_mmc_read_capacity+0x3c>)
    1e66:	4798      	blx	r3
    1e68:	0003      	movs	r3, r0
}
    1e6a:	0018      	movs	r0, r3
    1e6c:	46bd      	mov	sp, r7
    1e6e:	b002      	add	sp, #8
    1e70:	bd80      	pop	{r7, pc}
    1e72:	46c0      	nop			; (mov r8, r8)
    1e74:	000019d1 	.word	0x000019d1
    1e78:	00001dad 	.word	0x00001dad

00001e7c <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1e7c:	b580      	push	{r7, lr}
    1e7e:	b082      	sub	sp, #8
    1e80:	af00      	add	r7, sp, #0
    1e82:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
    1e84:	687b      	ldr	r3, [r7, #4]
    1e86:	0019      	movs	r1, r3
    1e88:	2000      	movs	r0, #0
    1e8a:	4b03      	ldr	r3, [pc, #12]	; (1e98 <sd_mmc_read_capacity_0+0x1c>)
    1e8c:	4798      	blx	r3
    1e8e:	0003      	movs	r3, r0
}
    1e90:	0018      	movs	r0, r3
    1e92:	46bd      	mov	sp, r7
    1e94:	b002      	add	sp, #8
    1e96:	bd80      	pop	{r7, pc}
    1e98:	00001e3d 	.word	0x00001e3d

00001e9c <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    1e9c:	b580      	push	{r7, lr}
    1e9e:	b082      	sub	sp, #8
    1ea0:	af00      	add	r7, sp, #0
    1ea2:	0002      	movs	r2, r0
    1ea4:	1dfb      	adds	r3, r7, #7
    1ea6:	701a      	strb	r2, [r3, #0]
    1ea8:	1dbb      	adds	r3, r7, #6
    1eaa:	1c0a      	adds	r2, r1, #0
    1eac:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    1eae:	1dfb      	adds	r3, r7, #7
    1eb0:	781b      	ldrb	r3, [r3, #0]
    1eb2:	4a04      	ldr	r2, [pc, #16]	; (1ec4 <sd_mmc_unload+0x28>)
    1eb4:	1db9      	adds	r1, r7, #6
    1eb6:	7809      	ldrb	r1, [r1, #0]
    1eb8:	54d1      	strb	r1, [r2, r3]
	return true;
    1eba:	2301      	movs	r3, #1
}
    1ebc:	0018      	movs	r0, r3
    1ebe:	46bd      	mov	sp, r7
    1ec0:	b002      	add	sp, #8
    1ec2:	bd80      	pop	{r7, pc}
    1ec4:	200000e8 	.word	0x200000e8

00001ec8 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    1ec8:	b580      	push	{r7, lr}
    1eca:	b082      	sub	sp, #8
    1ecc:	af00      	add	r7, sp, #0
    1ece:	0002      	movs	r2, r0
    1ed0:	1dfb      	adds	r3, r7, #7
    1ed2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
    1ed4:	1dfb      	adds	r3, r7, #7
    1ed6:	781b      	ldrb	r3, [r3, #0]
    1ed8:	0019      	movs	r1, r3
    1eda:	2000      	movs	r0, #0
    1edc:	4b03      	ldr	r3, [pc, #12]	; (1eec <sd_mmc_unload_0+0x24>)
    1ede:	4798      	blx	r3
    1ee0:	0003      	movs	r3, r0
}
    1ee2:	0018      	movs	r0, r3
    1ee4:	46bd      	mov	sp, r7
    1ee6:	b002      	add	sp, #8
    1ee8:	bd80      	pop	{r7, pc}
    1eea:	46c0      	nop			; (mov r8, r8)
    1eec:	00001e9d 	.word	0x00001e9d

00001ef0 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    1ef0:	b580      	push	{r7, lr}
    1ef2:	b082      	sub	sp, #8
    1ef4:	af00      	add	r7, sp, #0
    1ef6:	0002      	movs	r2, r0
    1ef8:	1dfb      	adds	r3, r7, #7
    1efa:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
    1efc:	1dfb      	adds	r3, r7, #7
    1efe:	781b      	ldrb	r3, [r3, #0]
    1f00:	0018      	movs	r0, r3
    1f02:	4b03      	ldr	r3, [pc, #12]	; (1f10 <sd_mmc_wr_protect+0x20>)
    1f04:	4798      	blx	r3
    1f06:	0003      	movs	r3, r0
}
    1f08:	0018      	movs	r0, r3
    1f0a:	46bd      	mov	sp, r7
    1f0c:	b002      	add	sp, #8
    1f0e:	bd80      	pop	{r7, pc}
    1f10:	00001a0d 	.word	0x00001a0d

00001f14 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
    1f18:	2000      	movs	r0, #0
    1f1a:	4b03      	ldr	r3, [pc, #12]	; (1f28 <sd_mmc_wr_protect_0+0x14>)
    1f1c:	4798      	blx	r3
    1f1e:	0003      	movs	r3, r0
}
    1f20:	0018      	movs	r0, r3
    1f22:	46bd      	mov	sp, r7
    1f24:	bd80      	pop	{r7, pc}
    1f26:	46c0      	nop			; (mov r8, r8)
    1f28:	00001ef1 	.word	0x00001ef1

00001f2c <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    1f2c:	b580      	push	{r7, lr}
    1f2e:	b082      	sub	sp, #8
    1f30:	af00      	add	r7, sp, #0
    1f32:	0002      	movs	r2, r0
    1f34:	1dfb      	adds	r3, r7, #7
    1f36:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    1f38:	2301      	movs	r3, #1
}
    1f3a:	0018      	movs	r0, r3
    1f3c:	46bd      	mov	sp, r7
    1f3e:	b002      	add	sp, #8
    1f40:	bd80      	pop	{r7, pc}
	...

00001f44 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    1f44:	b580      	push	{r7, lr}
    1f46:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
    1f48:	2000      	movs	r0, #0
    1f4a:	4b03      	ldr	r3, [pc, #12]	; (1f58 <sd_mmc_removal_0+0x14>)
    1f4c:	4798      	blx	r3
    1f4e:	0003      	movs	r3, r0
}
    1f50:	0018      	movs	r0, r3
    1f52:	46bd      	mov	sp, r7
    1f54:	bd80      	pop	{r7, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	00001f2d 	.word	0x00001f2d

00001f5c <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    1f5c:	b580      	push	{r7, lr}
    1f5e:	b084      	sub	sp, #16
    1f60:	af00      	add	r7, sp, #0
    1f62:	60b9      	str	r1, [r7, #8]
    1f64:	607a      	str	r2, [r7, #4]
    1f66:	230f      	movs	r3, #15
    1f68:	18fb      	adds	r3, r7, r3
    1f6a:	1c02      	adds	r2, r0, #0
    1f6c:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    1f6e:	68b9      	ldr	r1, [r7, #8]
    1f70:	230f      	movs	r3, #15
    1f72:	18fb      	adds	r3, r7, r3
    1f74:	781b      	ldrb	r3, [r3, #0]
    1f76:	2201      	movs	r2, #1
    1f78:	0018      	movs	r0, r3
    1f7a:	4b10      	ldr	r3, [pc, #64]	; (1fbc <sd_mmc_mem_2_ram+0x60>)
    1f7c:	4798      	blx	r3
    1f7e:	1e03      	subs	r3, r0, #0
    1f80:	d005      	beq.n	1f8e <sd_mmc_mem_2_ram+0x32>
    1f82:	2b02      	cmp	r3, #2
    1f84:	d101      	bne.n	1f8a <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1f86:	2302      	movs	r3, #2
    1f88:	e013      	b.n	1fb2 <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
    1f8a:	2301      	movs	r3, #1
    1f8c:	e011      	b.n	1fb2 <sd_mmc_mem_2_ram+0x56>
		break;
    1f8e:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    1f90:	687b      	ldr	r3, [r7, #4]
    1f92:	2101      	movs	r1, #1
    1f94:	0018      	movs	r0, r3
    1f96:	4b0a      	ldr	r3, [pc, #40]	; (1fc0 <sd_mmc_mem_2_ram+0x64>)
    1f98:	4798      	blx	r3
    1f9a:	1e03      	subs	r3, r0, #0
    1f9c:	d001      	beq.n	1fa2 <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
    1f9e:	2301      	movs	r3, #1
    1fa0:	e007      	b.n	1fb2 <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    1fa2:	2000      	movs	r0, #0
    1fa4:	4b07      	ldr	r3, [pc, #28]	; (1fc4 <sd_mmc_mem_2_ram+0x68>)
    1fa6:	4798      	blx	r3
    1fa8:	1e03      	subs	r3, r0, #0
    1faa:	d001      	beq.n	1fb0 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
    1fac:	2301      	movs	r3, #1
    1fae:	e000      	b.n	1fb2 <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
    1fb0:	2300      	movs	r3, #0
}
    1fb2:	0018      	movs	r0, r3
    1fb4:	46bd      	mov	sp, r7
    1fb6:	b004      	add	sp, #16
    1fb8:	bd80      	pop	{r7, pc}
    1fba:	46c0      	nop			; (mov r8, r8)
    1fbc:	00001a25 	.word	0x00001a25
    1fc0:	00001b11 	.word	0x00001b11
    1fc4:	00001b69 	.word	0x00001b69

00001fc8 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    1fc8:	b580      	push	{r7, lr}
    1fca:	b082      	sub	sp, #8
    1fcc:	af00      	add	r7, sp, #0
    1fce:	6078      	str	r0, [r7, #4]
    1fd0:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
    1fd2:	683a      	ldr	r2, [r7, #0]
    1fd4:	687b      	ldr	r3, [r7, #4]
    1fd6:	0019      	movs	r1, r3
    1fd8:	2000      	movs	r0, #0
    1fda:	4b03      	ldr	r3, [pc, #12]	; (1fe8 <sd_mmc_mem_2_ram_0+0x20>)
    1fdc:	4798      	blx	r3
    1fde:	0003      	movs	r3, r0
}
    1fe0:	0018      	movs	r0, r3
    1fe2:	46bd      	mov	sp, r7
    1fe4:	b002      	add	sp, #8
    1fe6:	bd80      	pop	{r7, pc}
    1fe8:	00001f5d 	.word	0x00001f5d

00001fec <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    1fec:	b580      	push	{r7, lr}
    1fee:	b084      	sub	sp, #16
    1ff0:	af00      	add	r7, sp, #0
    1ff2:	60b9      	str	r1, [r7, #8]
    1ff4:	607a      	str	r2, [r7, #4]
    1ff6:	230f      	movs	r3, #15
    1ff8:	18fb      	adds	r3, r7, r3
    1ffa:	1c02      	adds	r2, r0, #0
    1ffc:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    1ffe:	68b9      	ldr	r1, [r7, #8]
    2000:	230f      	movs	r3, #15
    2002:	18fb      	adds	r3, r7, r3
    2004:	781b      	ldrb	r3, [r3, #0]
    2006:	2201      	movs	r2, #1
    2008:	0018      	movs	r0, r3
    200a:	4b10      	ldr	r3, [pc, #64]	; (204c <STACK_SIZE+0x4c>)
    200c:	4798      	blx	r3
    200e:	1e03      	subs	r3, r0, #0
    2010:	d005      	beq.n	201e <STACK_SIZE+0x1e>
    2012:	2b02      	cmp	r3, #2
    2014:	d101      	bne.n	201a <STACK_SIZE+0x1a>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    2016:	2302      	movs	r3, #2
    2018:	e013      	b.n	2042 <STACK_SIZE+0x42>
	default:
		return CTRL_FAIL;
    201a:	2301      	movs	r3, #1
    201c:	e011      	b.n	2042 <STACK_SIZE+0x42>
		break;
    201e:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    2020:	687b      	ldr	r3, [r7, #4]
    2022:	2101      	movs	r1, #1
    2024:	0018      	movs	r0, r3
    2026:	4b0a      	ldr	r3, [pc, #40]	; (2050 <STACK_SIZE+0x50>)
    2028:	4798      	blx	r3
    202a:	1e03      	subs	r3, r0, #0
    202c:	d001      	beq.n	2032 <STACK_SIZE+0x32>
		return CTRL_FAIL;
    202e:	2301      	movs	r3, #1
    2030:	e007      	b.n	2042 <STACK_SIZE+0x42>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    2032:	2000      	movs	r0, #0
    2034:	4b07      	ldr	r3, [pc, #28]	; (2054 <STACK_SIZE+0x54>)
    2036:	4798      	blx	r3
    2038:	1e03      	subs	r3, r0, #0
    203a:	d001      	beq.n	2040 <STACK_SIZE+0x40>
		return CTRL_FAIL;
    203c:	2301      	movs	r3, #1
    203e:	e000      	b.n	2042 <STACK_SIZE+0x42>
	}
	return CTRL_GOOD;
    2040:	2300      	movs	r3, #0
}
    2042:	0018      	movs	r0, r3
    2044:	46bd      	mov	sp, r7
    2046:	b004      	add	sp, #16
    2048:	bd80      	pop	{r7, pc}
    204a:	46c0      	nop			; (mov r8, r8)
    204c:	00001c01 	.word	0x00001c01
    2050:	00001ce9 	.word	0x00001ce9
    2054:	00001d41 	.word	0x00001d41

00002058 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    2058:	b580      	push	{r7, lr}
    205a:	b082      	sub	sp, #8
    205c:	af00      	add	r7, sp, #0
    205e:	6078      	str	r0, [r7, #4]
    2060:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
    2062:	683a      	ldr	r2, [r7, #0]
    2064:	687b      	ldr	r3, [r7, #4]
    2066:	0019      	movs	r1, r3
    2068:	2000      	movs	r0, #0
    206a:	4b03      	ldr	r3, [pc, #12]	; (2078 <sd_mmc_ram_2_mem_0+0x20>)
    206c:	4798      	blx	r3
    206e:	0003      	movs	r3, r0
}
    2070:	0018      	movs	r0, r3
    2072:	46bd      	mov	sp, r7
    2074:	b002      	add	sp, #8
    2076:	bd80      	pop	{r7, pc}
    2078:	00001fed 	.word	0x00001fed

0000207c <system_pinmux_get_group_from_gpio_pin>:
{
    207c:	b580      	push	{r7, lr}
    207e:	b084      	sub	sp, #16
    2080:	af00      	add	r7, sp, #0
    2082:	0002      	movs	r2, r0
    2084:	1dfb      	adds	r3, r7, #7
    2086:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    2088:	230f      	movs	r3, #15
    208a:	18fb      	adds	r3, r7, r3
    208c:	1dfa      	adds	r2, r7, #7
    208e:	7812      	ldrb	r2, [r2, #0]
    2090:	09d2      	lsrs	r2, r2, #7
    2092:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    2094:	230e      	movs	r3, #14
    2096:	18fb      	adds	r3, r7, r3
    2098:	1dfa      	adds	r2, r7, #7
    209a:	7812      	ldrb	r2, [r2, #0]
    209c:	0952      	lsrs	r2, r2, #5
    209e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    20a0:	4b0d      	ldr	r3, [pc, #52]	; (20d8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    20a2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    20a4:	230f      	movs	r3, #15
    20a6:	18fb      	adds	r3, r7, r3
    20a8:	781b      	ldrb	r3, [r3, #0]
    20aa:	2b00      	cmp	r3, #0
    20ac:	d10f      	bne.n	20ce <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    20ae:	230f      	movs	r3, #15
    20b0:	18fb      	adds	r3, r7, r3
    20b2:	781b      	ldrb	r3, [r3, #0]
    20b4:	009b      	lsls	r3, r3, #2
    20b6:	2210      	movs	r2, #16
    20b8:	4694      	mov	ip, r2
    20ba:	44bc      	add	ip, r7
    20bc:	4463      	add	r3, ip
    20be:	3b08      	subs	r3, #8
    20c0:	681a      	ldr	r2, [r3, #0]
    20c2:	230e      	movs	r3, #14
    20c4:	18fb      	adds	r3, r7, r3
    20c6:	781b      	ldrb	r3, [r3, #0]
    20c8:	01db      	lsls	r3, r3, #7
    20ca:	18d3      	adds	r3, r2, r3
    20cc:	e000      	b.n	20d0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    20ce:	2300      	movs	r3, #0
}
    20d0:	0018      	movs	r0, r3
    20d2:	46bd      	mov	sp, r7
    20d4:	b004      	add	sp, #16
    20d6:	bd80      	pop	{r7, pc}
    20d8:	41004400 	.word	0x41004400

000020dc <port_get_group_from_gpio_pin>:
{
    20dc:	b580      	push	{r7, lr}
    20de:	b082      	sub	sp, #8
    20e0:	af00      	add	r7, sp, #0
    20e2:	0002      	movs	r2, r0
    20e4:	1dfb      	adds	r3, r7, #7
    20e6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    20e8:	1dfb      	adds	r3, r7, #7
    20ea:	781b      	ldrb	r3, [r3, #0]
    20ec:	0018      	movs	r0, r3
    20ee:	4b03      	ldr	r3, [pc, #12]	; (20fc <port_get_group_from_gpio_pin+0x20>)
    20f0:	4798      	blx	r3
    20f2:	0003      	movs	r3, r0
}
    20f4:	0018      	movs	r0, r3
    20f6:	46bd      	mov	sp, r7
    20f8:	b002      	add	sp, #8
    20fa:	bd80      	pop	{r7, pc}
    20fc:	0000207d 	.word	0x0000207d

00002100 <port_get_config_defaults>:
{
    2100:	b580      	push	{r7, lr}
    2102:	b082      	sub	sp, #8
    2104:	af00      	add	r7, sp, #0
    2106:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    2108:	687b      	ldr	r3, [r7, #4]
    210a:	2200      	movs	r2, #0
    210c:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    210e:	687b      	ldr	r3, [r7, #4]
    2110:	2201      	movs	r2, #1
    2112:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2114:	687b      	ldr	r3, [r7, #4]
    2116:	2200      	movs	r2, #0
    2118:	709a      	strb	r2, [r3, #2]
}
    211a:	46c0      	nop			; (mov r8, r8)
    211c:	46bd      	mov	sp, r7
    211e:	b002      	add	sp, #8
    2120:	bd80      	pop	{r7, pc}
	...

00002124 <port_pin_set_output_level>:
{
    2124:	b580      	push	{r7, lr}
    2126:	b084      	sub	sp, #16
    2128:	af00      	add	r7, sp, #0
    212a:	0002      	movs	r2, r0
    212c:	1dfb      	adds	r3, r7, #7
    212e:	701a      	strb	r2, [r3, #0]
    2130:	1dbb      	adds	r3, r7, #6
    2132:	1c0a      	adds	r2, r1, #0
    2134:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2136:	1dfb      	adds	r3, r7, #7
    2138:	781b      	ldrb	r3, [r3, #0]
    213a:	0018      	movs	r0, r3
    213c:	4b0d      	ldr	r3, [pc, #52]	; (2174 <port_pin_set_output_level+0x50>)
    213e:	4798      	blx	r3
    2140:	0003      	movs	r3, r0
    2142:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2144:	1dfb      	adds	r3, r7, #7
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	221f      	movs	r2, #31
    214a:	4013      	ands	r3, r2
    214c:	2201      	movs	r2, #1
    214e:	409a      	lsls	r2, r3
    2150:	0013      	movs	r3, r2
    2152:	60bb      	str	r3, [r7, #8]
	if (level) {
    2154:	1dbb      	adds	r3, r7, #6
    2156:	781b      	ldrb	r3, [r3, #0]
    2158:	2b00      	cmp	r3, #0
    215a:	d003      	beq.n	2164 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    215c:	68fb      	ldr	r3, [r7, #12]
    215e:	68ba      	ldr	r2, [r7, #8]
    2160:	619a      	str	r2, [r3, #24]
}
    2162:	e002      	b.n	216a <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    2164:	68fb      	ldr	r3, [r7, #12]
    2166:	68ba      	ldr	r2, [r7, #8]
    2168:	615a      	str	r2, [r3, #20]
}
    216a:	46c0      	nop			; (mov r8, r8)
    216c:	46bd      	mov	sp, r7
    216e:	b004      	add	sp, #16
    2170:	bd80      	pop	{r7, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	000020dd 	.word	0x000020dd

00002178 <system_interrupt_enable>:
{
    2178:	b580      	push	{r7, lr}
    217a:	b082      	sub	sp, #8
    217c:	af00      	add	r7, sp, #0
    217e:	0002      	movs	r2, r0
    2180:	1dfb      	adds	r3, r7, #7
    2182:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2184:	4b06      	ldr	r3, [pc, #24]	; (21a0 <system_interrupt_enable+0x28>)
    2186:	1dfa      	adds	r2, r7, #7
    2188:	7812      	ldrb	r2, [r2, #0]
    218a:	0011      	movs	r1, r2
    218c:	221f      	movs	r2, #31
    218e:	400a      	ands	r2, r1
    2190:	2101      	movs	r1, #1
    2192:	4091      	lsls	r1, r2
    2194:	000a      	movs	r2, r1
    2196:	601a      	str	r2, [r3, #0]
}
    2198:	46c0      	nop			; (mov r8, r8)
    219a:	46bd      	mov	sp, r7
    219c:	b002      	add	sp, #8
    219e:	bd80      	pop	{r7, pc}
    21a0:	e000e100 	.word	0xe000e100

000021a4 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    21a4:	b580      	push	{r7, lr}
    21a6:	b084      	sub	sp, #16
    21a8:	af00      	add	r7, sp, #0
    21aa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    21ac:	687b      	ldr	r3, [r7, #4]
    21ae:	681b      	ldr	r3, [r3, #0]
    21b0:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    21b2:	68fb      	ldr	r3, [r7, #12]
    21b4:	69db      	ldr	r3, [r3, #28]
    21b6:	1e5a      	subs	r2, r3, #1
    21b8:	4193      	sbcs	r3, r2
    21ba:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    21bc:	0018      	movs	r0, r3
    21be:	46bd      	mov	sp, r7
    21c0:	b004      	add	sp, #16
    21c2:	bd80      	pop	{r7, pc}

000021c4 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
    21c4:	b580      	push	{r7, lr}
    21c6:	b082      	sub	sp, #8
    21c8:	af00      	add	r7, sp, #0
    21ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
    21cc:	687b      	ldr	r3, [r7, #4]
    21ce:	2201      	movs	r2, #1
    21d0:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    21d2:	687b      	ldr	r3, [r7, #4]
    21d4:	2200      	movs	r2, #0
    21d6:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    21d8:	687b      	ldr	r3, [r7, #4]
    21da:	2200      	movs	r2, #0
    21dc:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    21de:	687b      	ldr	r3, [r7, #4]
    21e0:	22c0      	movs	r2, #192	; 0xc0
    21e2:	0392      	lsls	r2, r2, #14
    21e4:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    21e6:	687b      	ldr	r3, [r7, #4]
    21e8:	2200      	movs	r2, #0
    21ea:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    21ec:	687b      	ldr	r3, [r7, #4]
    21ee:	2200      	movs	r2, #0
    21f0:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    21f2:	687b      	ldr	r3, [r7, #4]
    21f4:	2201      	movs	r2, #1
    21f6:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
    21f8:	687b      	ldr	r3, [r7, #4]
    21fa:	2201      	movs	r2, #1
    21fc:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
    21fe:	687b      	ldr	r3, [r7, #4]
    2200:	2200      	movs	r2, #0
    2202:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
    2204:	687b      	ldr	r3, [r7, #4]
    2206:	2224      	movs	r2, #36	; 0x24
    2208:	2100      	movs	r1, #0
    220a:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    220c:	687b      	ldr	r3, [r7, #4]
    220e:	3318      	adds	r3, #24
    2210:	220c      	movs	r2, #12
    2212:	2100      	movs	r1, #0
    2214:	0018      	movs	r0, r3
    2216:	4b0a      	ldr	r3, [pc, #40]	; (2240 <spi_get_config_defaults+0x7c>)
    2218:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
    221a:	687b      	ldr	r3, [r7, #4]
    221c:	4a09      	ldr	r2, [pc, #36]	; (2244 <spi_get_config_defaults+0x80>)
    221e:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2220:	687b      	ldr	r3, [r7, #4]
    2222:	2200      	movs	r2, #0
    2224:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    2226:	687b      	ldr	r3, [r7, #4]
    2228:	2200      	movs	r2, #0
    222a:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	2200      	movs	r2, #0
    2230:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2232:	687b      	ldr	r3, [r7, #4]
    2234:	2200      	movs	r2, #0
    2236:	635a      	str	r2, [r3, #52]	; 0x34

};
    2238:	46c0      	nop			; (mov r8, r8)
    223a:	46bd      	mov	sp, r7
    223c:	b002      	add	sp, #8
    223e:	bd80      	pop	{r7, pc}
    2240:	0000a6bb 	.word	0x0000a6bb
    2244:	000186a0 	.word	0x000186a0

00002248 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
    2248:	b580      	push	{r7, lr}
    224a:	b082      	sub	sp, #8
    224c:	af00      	add	r7, sp, #0
    224e:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
    2250:	687b      	ldr	r3, [r7, #4]
    2252:	220a      	movs	r2, #10
    2254:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    2256:	687b      	ldr	r3, [r7, #4]
    2258:	2200      	movs	r2, #0
    225a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    225c:	687b      	ldr	r3, [r7, #4]
    225e:	2200      	movs	r2, #0
    2260:	709a      	strb	r2, [r3, #2]
}
    2262:	46c0      	nop			; (mov r8, r8)
    2264:	46bd      	mov	sp, r7
    2266:	b002      	add	sp, #8
    2268:	bd80      	pop	{r7, pc}
	...

0000226c <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
    226c:	b580      	push	{r7, lr}
    226e:	b084      	sub	sp, #16
    2270:	af00      	add	r7, sp, #0
    2272:	6078      	str	r0, [r7, #4]
    2274:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
    2276:	683b      	ldr	r3, [r7, #0]
    2278:	781a      	ldrb	r2, [r3, #0]
    227a:	687b      	ldr	r3, [r7, #4]
    227c:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    227e:	683b      	ldr	r3, [r7, #0]
    2280:	785a      	ldrb	r2, [r3, #1]
    2282:	687b      	ldr	r3, [r7, #4]
    2284:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    2286:	683b      	ldr	r3, [r7, #0]
    2288:	789a      	ldrb	r2, [r3, #2]
    228a:	687b      	ldr	r3, [r7, #4]
    228c:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    228e:	230c      	movs	r3, #12
    2290:	18fb      	adds	r3, r7, r3
    2292:	0018      	movs	r0, r3
    2294:	4b0b      	ldr	r3, [pc, #44]	; (22c4 <spi_attach_slave+0x58>)
    2296:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    2298:	230c      	movs	r3, #12
    229a:	18fb      	adds	r3, r7, r3
    229c:	2201      	movs	r2, #1
    229e:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	781b      	ldrb	r3, [r3, #0]
    22a4:	220c      	movs	r2, #12
    22a6:	18ba      	adds	r2, r7, r2
    22a8:	0011      	movs	r1, r2
    22aa:	0018      	movs	r0, r3
    22ac:	4b06      	ldr	r3, [pc, #24]	; (22c8 <spi_attach_slave+0x5c>)
    22ae:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    22b0:	687b      	ldr	r3, [r7, #4]
    22b2:	781b      	ldrb	r3, [r3, #0]
    22b4:	2101      	movs	r1, #1
    22b6:	0018      	movs	r0, r3
    22b8:	4b04      	ldr	r3, [pc, #16]	; (22cc <spi_attach_slave+0x60>)
    22ba:	4798      	blx	r3
}
    22bc:	46c0      	nop			; (mov r8, r8)
    22be:	46bd      	mov	sp, r7
    22c0:	b004      	add	sp, #16
    22c2:	bd80      	pop	{r7, pc}
    22c4:	00002101 	.word	0x00002101
    22c8:	00002f79 	.word	0x00002f79
    22cc:	00002125 	.word	0x00002125

000022d0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
    22d0:	b580      	push	{r7, lr}
    22d2:	b084      	sub	sp, #16
    22d4:	af00      	add	r7, sp, #0
    22d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    22d8:	687b      	ldr	r3, [r7, #4]
    22da:	681b      	ldr	r3, [r3, #0]
    22dc:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    22de:	687b      	ldr	r3, [r7, #4]
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	0018      	movs	r0, r3
    22e4:	4b0b      	ldr	r3, [pc, #44]	; (2314 <spi_enable+0x44>)
    22e6:	4798      	blx	r3
    22e8:	0003      	movs	r3, r0
    22ea:	0018      	movs	r0, r3
    22ec:	4b0a      	ldr	r3, [pc, #40]	; (2318 <spi_enable+0x48>)
    22ee:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    22f0:	46c0      	nop			; (mov r8, r8)
    22f2:	687b      	ldr	r3, [r7, #4]
    22f4:	0018      	movs	r0, r3
    22f6:	4b09      	ldr	r3, [pc, #36]	; (231c <spi_enable+0x4c>)
    22f8:	4798      	blx	r3
    22fa:	1e03      	subs	r3, r0, #0
    22fc:	d1f9      	bne.n	22f2 <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    22fe:	68fb      	ldr	r3, [r7, #12]
    2300:	681b      	ldr	r3, [r3, #0]
    2302:	2202      	movs	r2, #2
    2304:	431a      	orrs	r2, r3
    2306:	68fb      	ldr	r3, [r7, #12]
    2308:	601a      	str	r2, [r3, #0]
}
    230a:	46c0      	nop			; (mov r8, r8)
    230c:	46bd      	mov	sp, r7
    230e:	b004      	add	sp, #16
    2310:	bd80      	pop	{r7, pc}
    2312:	46c0      	nop			; (mov r8, r8)
    2314:	00003b05 	.word	0x00003b05
    2318:	00002179 	.word	0x00002179
    231c:	000021a5 	.word	0x000021a5

00002320 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    2320:	b580      	push	{r7, lr}
    2322:	b084      	sub	sp, #16
    2324:	af00      	add	r7, sp, #0
    2326:	6078      	str	r0, [r7, #4]
    2328:	000a      	movs	r2, r1
    232a:	1cfb      	adds	r3, r7, #3
    232c:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    232e:	230f      	movs	r3, #15
    2330:	18fb      	adds	r3, r7, r3
    2332:	2200      	movs	r2, #0
    2334:	701a      	strb	r2, [r3, #0]
	while (size--) {
    2336:	e038      	b.n	23aa <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    2338:	687b      	ldr	r3, [r7, #4]
    233a:	1c5a      	adds	r2, r3, #1
    233c:	607a      	str	r2, [r7, #4]
    233e:	220e      	movs	r2, #14
    2340:	18ba      	adds	r2, r7, r2
    2342:	781b      	ldrb	r3, [r3, #0]
    2344:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    2346:	230d      	movs	r3, #13
    2348:	18fb      	adds	r3, r7, r3
    234a:	2200      	movs	r2, #0
    234c:	701a      	strb	r2, [r3, #0]
    234e:	e027      	b.n	23a0 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    2350:	230f      	movs	r3, #15
    2352:	18fa      	adds	r2, r7, r3
    2354:	230f      	movs	r3, #15
    2356:	18fb      	adds	r3, r7, r3
    2358:	781b      	ldrb	r3, [r3, #0]
    235a:	18db      	adds	r3, r3, r3
    235c:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    235e:	230e      	movs	r3, #14
    2360:	18fa      	adds	r2, r7, r3
    2362:	230f      	movs	r3, #15
    2364:	18fb      	adds	r3, r7, r3
    2366:	7812      	ldrb	r2, [r2, #0]
    2368:	781b      	ldrb	r3, [r3, #0]
    236a:	4053      	eors	r3, r2
    236c:	b2db      	uxtb	r3, r3
    236e:	b25b      	sxtb	r3, r3
    2370:	2b00      	cmp	r3, #0
    2372:	da07      	bge.n	2384 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    2374:	230f      	movs	r3, #15
    2376:	18fb      	adds	r3, r7, r3
    2378:	220f      	movs	r2, #15
    237a:	18ba      	adds	r2, r7, r2
    237c:	7812      	ldrb	r2, [r2, #0]
    237e:	2109      	movs	r1, #9
    2380:	404a      	eors	r2, r1
    2382:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    2384:	230e      	movs	r3, #14
    2386:	18fa      	adds	r2, r7, r3
    2388:	230e      	movs	r3, #14
    238a:	18fb      	adds	r3, r7, r3
    238c:	781b      	ldrb	r3, [r3, #0]
    238e:	18db      	adds	r3, r3, r3
    2390:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    2392:	230d      	movs	r3, #13
    2394:	18fb      	adds	r3, r7, r3
    2396:	781a      	ldrb	r2, [r3, #0]
    2398:	230d      	movs	r3, #13
    239a:	18fb      	adds	r3, r7, r3
    239c:	3201      	adds	r2, #1
    239e:	701a      	strb	r2, [r3, #0]
    23a0:	230d      	movs	r3, #13
    23a2:	18fb      	adds	r3, r7, r3
    23a4:	781b      	ldrb	r3, [r3, #0]
    23a6:	2b07      	cmp	r3, #7
    23a8:	d9d2      	bls.n	2350 <sd_mmc_spi_crc7+0x30>
	while (size--) {
    23aa:	1cfb      	adds	r3, r7, #3
    23ac:	781b      	ldrb	r3, [r3, #0]
    23ae:	1cfa      	adds	r2, r7, #3
    23b0:	1e59      	subs	r1, r3, #1
    23b2:	7011      	strb	r1, [r2, #0]
    23b4:	2b00      	cmp	r3, #0
    23b6:	d1bf      	bne.n	2338 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    23b8:	230f      	movs	r3, #15
    23ba:	18fb      	adds	r3, r7, r3
    23bc:	781b      	ldrb	r3, [r3, #0]
    23be:	005b      	lsls	r3, r3, #1
    23c0:	b25b      	sxtb	r3, r3
    23c2:	2201      	movs	r2, #1
    23c4:	4313      	orrs	r3, r2
    23c6:	b25a      	sxtb	r2, r3
    23c8:	230f      	movs	r3, #15
    23ca:	18fb      	adds	r3, r7, r3
    23cc:	701a      	strb	r2, [r3, #0]
	return crc;
    23ce:	230f      	movs	r3, #15
    23d0:	18fb      	adds	r3, r7, r3
    23d2:	781b      	ldrb	r3, [r3, #0]
}
    23d4:	0018      	movs	r0, r3
    23d6:	46bd      	mov	sp, r7
    23d8:	b004      	add	sp, #16
    23da:	bd80      	pop	{r7, pc}

000023dc <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    23dc:	b590      	push	{r4, r7, lr}
    23de:	b083      	sub	sp, #12
    23e0:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
    23e2:	1c7b      	adds	r3, r7, #1
    23e4:	22ff      	movs	r2, #255	; 0xff
    23e6:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    23e8:	1cbb      	adds	r3, r7, #2
    23ea:	22ff      	movs	r2, #255	; 0xff
    23ec:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    23ee:	1cbb      	adds	r3, r7, #2
    23f0:	881b      	ldrh	r3, [r3, #0]
    23f2:	1c79      	adds	r1, r7, #1
    23f4:	4811      	ldr	r0, [pc, #68]	; (243c <sd_mmc_spi_wait_busy+0x60>)
    23f6:	2201      	movs	r2, #1
    23f8:	4c11      	ldr	r4, [pc, #68]	; (2440 <sd_mmc_spi_wait_busy+0x64>)
    23fa:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    23fc:	4b11      	ldr	r3, [pc, #68]	; (2444 <sd_mmc_spi_wait_busy+0x68>)
    23fe:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    2400:	1cbb      	adds	r3, r7, #2
    2402:	881b      	ldrh	r3, [r3, #0]
    2404:	1c79      	adds	r1, r7, #1
    2406:	480d      	ldr	r0, [pc, #52]	; (243c <sd_mmc_spi_wait_busy+0x60>)
    2408:	2201      	movs	r2, #1
    240a:	4c0d      	ldr	r4, [pc, #52]	; (2440 <sd_mmc_spi_wait_busy+0x64>)
    240c:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    240e:	1cbb      	adds	r3, r7, #2
    2410:	881b      	ldrh	r3, [r3, #0]
    2412:	1c79      	adds	r1, r7, #1
    2414:	4809      	ldr	r0, [pc, #36]	; (243c <sd_mmc_spi_wait_busy+0x60>)
    2416:	2201      	movs	r2, #1
    2418:	4c09      	ldr	r4, [pc, #36]	; (2440 <sd_mmc_spi_wait_busy+0x64>)
    241a:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	1e5a      	subs	r2, r3, #1
    2420:	607a      	str	r2, [r7, #4]
    2422:	2b00      	cmp	r3, #0
    2424:	d101      	bne.n	242a <sd_mmc_spi_wait_busy+0x4e>
			return false;
    2426:	2300      	movs	r3, #0
    2428:	e004      	b.n	2434 <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
    242a:	1c7b      	adds	r3, r7, #1
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	2bff      	cmp	r3, #255	; 0xff
    2430:	d1ed      	bne.n	240e <sd_mmc_spi_wait_busy+0x32>
	return true;
    2432:	2301      	movs	r3, #1
}
    2434:	0018      	movs	r0, r3
    2436:	46bd      	mov	sp, r7
    2438:	b003      	add	sp, #12
    243a:	bd90      	pop	{r4, r7, pc}
    243c:	200000ec 	.word	0x200000ec
    2440:	00004485 	.word	0x00004485
    2444:	00030d40 	.word	0x00030d40

00002448 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    2448:	b590      	push	{r4, r7, lr}
    244a:	b083      	sub	sp, #12
    244c:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    244e:	1cbb      	adds	r3, r7, #2
    2450:	22ff      	movs	r2, #255	; 0xff
    2452:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    2454:	1c7b      	adds	r3, r7, #1
    2456:	2200      	movs	r2, #0
    2458:	701a      	strb	r2, [r3, #0]
	i = 500000;
    245a:	4b18      	ldr	r3, [pc, #96]	; (24bc <sd_mmc_spi_start_read_block+0x74>)
    245c:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    245e:	687b      	ldr	r3, [r7, #4]
    2460:	1e5a      	subs	r2, r3, #1
    2462:	607a      	str	r2, [r7, #4]
    2464:	2b00      	cmp	r3, #0
    2466:	d104      	bne.n	2472 <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    2468:	4b15      	ldr	r3, [pc, #84]	; (24c0 <sd_mmc_spi_start_read_block+0x78>)
    246a:	2204      	movs	r2, #4
    246c:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    246e:	2300      	movs	r3, #0
    2470:	e020      	b.n	24b4 <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    2472:	1cbb      	adds	r3, r7, #2
    2474:	881b      	ldrh	r3, [r3, #0]
    2476:	1c79      	adds	r1, r7, #1
    2478:	4812      	ldr	r0, [pc, #72]	; (24c4 <sd_mmc_spi_start_read_block+0x7c>)
    247a:	2201      	movs	r2, #1
    247c:	4c12      	ldr	r4, [pc, #72]	; (24c8 <sd_mmc_spi_start_read_block+0x80>)
    247e:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    2480:	1c7b      	adds	r3, r7, #1
    2482:	781b      	ldrb	r3, [r3, #0]
    2484:	001a      	movs	r2, r3
    2486:	23f0      	movs	r3, #240	; 0xf0
    2488:	4013      	ands	r3, r2
    248a:	d10e      	bne.n	24aa <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    248c:	1c7b      	adds	r3, r7, #1
    248e:	781b      	ldrb	r3, [r3, #0]
    2490:	001a      	movs	r2, r3
    2492:	2307      	movs	r3, #7
    2494:	4013      	ands	r3, r2
    2496:	d003      	beq.n	24a0 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    2498:	4b09      	ldr	r3, [pc, #36]	; (24c0 <sd_mmc_spi_start_read_block+0x78>)
    249a:	2207      	movs	r2, #7
    249c:	701a      	strb	r2, [r3, #0]
    249e:	e002      	b.n	24a6 <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    24a0:	4b07      	ldr	r3, [pc, #28]	; (24c0 <sd_mmc_spi_start_read_block+0x78>)
    24a2:	220b      	movs	r2, #11
    24a4:	701a      	strb	r2, [r3, #0]
			}
			return false;
    24a6:	2300      	movs	r3, #0
    24a8:	e004      	b.n	24b4 <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    24aa:	1c7b      	adds	r3, r7, #1
    24ac:	781b      	ldrb	r3, [r3, #0]
    24ae:	2bfe      	cmp	r3, #254	; 0xfe
    24b0:	d1d5      	bne.n	245e <sd_mmc_spi_start_read_block+0x16>

	return true;
    24b2:	2301      	movs	r3, #1
}
    24b4:	0018      	movs	r0, r3
    24b6:	46bd      	mov	sp, r7
    24b8:	b003      	add	sp, #12
    24ba:	bd90      	pop	{r4, r7, pc}
    24bc:	0007a120 	.word	0x0007a120
    24c0:	2000012f 	.word	0x2000012f
    24c4:	200000ec 	.word	0x200000ec
    24c8:	00004485 	.word	0x00004485

000024cc <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    24cc:	b590      	push	{r4, r7, lr}
    24ce:	b083      	sub	sp, #12
    24d0:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    24d2:	1dbb      	adds	r3, r7, #6
    24d4:	22ff      	movs	r2, #255	; 0xff
    24d6:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    24d8:	1dbb      	adds	r3, r7, #6
    24da:	881b      	ldrh	r3, [r3, #0]
    24dc:	1d39      	adds	r1, r7, #4
    24de:	4804      	ldr	r0, [pc, #16]	; (24f0 <sd_mmc_spi_stop_read_block+0x24>)
    24e0:	2202      	movs	r2, #2
    24e2:	4c04      	ldr	r4, [pc, #16]	; (24f4 <sd_mmc_spi_stop_read_block+0x28>)
    24e4:	47a0      	blx	r4
			dummy);
}
    24e6:	46c0      	nop			; (mov r8, r8)
    24e8:	46bd      	mov	sp, r7
    24ea:	b003      	add	sp, #12
    24ec:	bd90      	pop	{r4, r7, pc}
    24ee:	46c0      	nop			; (mov r8, r8)
    24f0:	200000ec 	.word	0x200000ec
    24f4:	00004485 	.word	0x00004485

000024f8 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    24f8:	b580      	push	{r7, lr}
    24fa:	b082      	sub	sp, #8
    24fc:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
    24fe:	1dfb      	adds	r3, r7, #7
    2500:	22ff      	movs	r2, #255	; 0xff
    2502:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    2504:	1df9      	adds	r1, r7, #7
    2506:	4b0d      	ldr	r3, [pc, #52]	; (253c <sd_mmc_spi_start_write_block+0x44>)
    2508:	2201      	movs	r2, #1
    250a:	0018      	movs	r0, r3
    250c:	4b0c      	ldr	r3, [pc, #48]	; (2540 <sd_mmc_spi_start_write_block+0x48>)
    250e:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    2510:	4b0c      	ldr	r3, [pc, #48]	; (2544 <sd_mmc_spi_start_write_block+0x4c>)
    2512:	881b      	ldrh	r3, [r3, #0]
    2514:	2b01      	cmp	r3, #1
    2516:	d103      	bne.n	2520 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
    2518:	1dbb      	adds	r3, r7, #6
    251a:	22fe      	movs	r2, #254	; 0xfe
    251c:	701a      	strb	r2, [r3, #0]
    251e:	e002      	b.n	2526 <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    2520:	1dbb      	adds	r3, r7, #6
    2522:	22fc      	movs	r2, #252	; 0xfc
    2524:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    2526:	1db9      	adds	r1, r7, #6
    2528:	4b04      	ldr	r3, [pc, #16]	; (253c <sd_mmc_spi_start_write_block+0x44>)
    252a:	2201      	movs	r2, #1
    252c:	0018      	movs	r0, r3
    252e:	4b04      	ldr	r3, [pc, #16]	; (2540 <sd_mmc_spi_start_write_block+0x48>)
    2530:	4798      	blx	r3
}
    2532:	46c0      	nop			; (mov r8, r8)
    2534:	46bd      	mov	sp, r7
    2536:	b002      	add	sp, #8
    2538:	bd80      	pop	{r7, pc}
    253a:	46c0      	nop			; (mov r8, r8)
    253c:	200000ec 	.word	0x200000ec
    2540:	000046a9 	.word	0x000046a9
    2544:	2000013a 	.word	0x2000013a

00002548 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    2548:	b590      	push	{r4, r7, lr}
    254a:	b083      	sub	sp, #12
    254c:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    254e:	1dbb      	adds	r3, r7, #6
    2550:	22ff      	movs	r2, #255	; 0xff
    2552:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    2554:	1cbb      	adds	r3, r7, #2
    2556:	2201      	movs	r2, #1
    2558:	4252      	negs	r2, r2
    255a:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    255c:	1cb9      	adds	r1, r7, #2
    255e:	4b1b      	ldr	r3, [pc, #108]	; (25cc <sd_mmc_spi_stop_write_block+0x84>)
    2560:	2202      	movs	r2, #2
    2562:	0018      	movs	r0, r3
    2564:	4b1a      	ldr	r3, [pc, #104]	; (25d0 <sd_mmc_spi_stop_write_block+0x88>)
    2566:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    2568:	1dbb      	adds	r3, r7, #6
    256a:	881b      	ldrh	r3, [r3, #0]
    256c:	1d79      	adds	r1, r7, #5
    256e:	4817      	ldr	r0, [pc, #92]	; (25cc <sd_mmc_spi_stop_write_block+0x84>)
    2570:	2201      	movs	r2, #1
    2572:	4c18      	ldr	r4, [pc, #96]	; (25d4 <sd_mmc_spi_stop_write_block+0x8c>)
    2574:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    2576:	1d7b      	adds	r3, r7, #5
    2578:	781b      	ldrb	r3, [r3, #0]
    257a:	001a      	movs	r2, r3
    257c:	2310      	movs	r3, #16
    257e:	4013      	ands	r3, r2
    2580:	d105      	bne.n	258e <sd_mmc_spi_stop_write_block+0x46>
    2582:	1d7b      	adds	r3, r7, #5
    2584:	781b      	ldrb	r3, [r3, #0]
    2586:	001a      	movs	r2, r3
    2588:	2301      	movs	r3, #1
    258a:	4013      	ands	r3, r2
    258c:	d104      	bne.n	2598 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    258e:	4b12      	ldr	r3, [pc, #72]	; (25d8 <sd_mmc_spi_stop_write_block+0x90>)
    2590:	2201      	movs	r2, #1
    2592:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    2594:	2300      	movs	r3, #0
    2596:	e014      	b.n	25c2 <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    2598:	1d7b      	adds	r3, r7, #5
    259a:	781b      	ldrb	r3, [r3, #0]
    259c:	001a      	movs	r2, r3
    259e:	231e      	movs	r3, #30
    25a0:	4013      	ands	r3, r2
    25a2:	2b04      	cmp	r3, #4
    25a4:	d00b      	beq.n	25be <sd_mmc_spi_stop_write_block+0x76>
    25a6:	2b0a      	cmp	r3, #10
    25a8:	d104      	bne.n	25b4 <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    25aa:	4b0b      	ldr	r3, [pc, #44]	; (25d8 <sd_mmc_spi_stop_write_block+0x90>)
    25ac:	2208      	movs	r2, #8
    25ae:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    25b0:	2300      	movs	r3, #0
    25b2:	e006      	b.n	25c2 <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    25b4:	4b08      	ldr	r3, [pc, #32]	; (25d8 <sd_mmc_spi_stop_write_block+0x90>)
    25b6:	220a      	movs	r2, #10
    25b8:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    25ba:	2300      	movs	r3, #0
    25bc:	e001      	b.n	25c2 <sd_mmc_spi_stop_write_block+0x7a>
		break;
    25be:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    25c0:	2301      	movs	r3, #1
}
    25c2:	0018      	movs	r0, r3
    25c4:	46bd      	mov	sp, r7
    25c6:	b003      	add	sp, #12
    25c8:	bd90      	pop	{r4, r7, pc}
    25ca:	46c0      	nop			; (mov r8, r8)
    25cc:	200000ec 	.word	0x200000ec
    25d0:	000046a9 	.word	0x000046a9
    25d4:	00004485 	.word	0x00004485
    25d8:	2000012f 	.word	0x2000012f

000025dc <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    25dc:	b590      	push	{r4, r7, lr}
    25de:	b083      	sub	sp, #12
    25e0:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    25e2:	4b1d      	ldr	r3, [pc, #116]	; (2658 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    25e4:	881b      	ldrh	r3, [r3, #0]
    25e6:	2b01      	cmp	r3, #1
    25e8:	d101      	bne.n	25ee <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
    25ea:	2301      	movs	r3, #1
    25ec:	e030      	b.n	2650 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
    25ee:	4b1a      	ldr	r3, [pc, #104]	; (2658 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
    25f0:	881b      	ldrh	r3, [r3, #0]
    25f2:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    25f4:	4b19      	ldr	r3, [pc, #100]	; (265c <sd_mmc_spi_stop_multiwrite_block+0x80>)
    25f6:	681a      	ldr	r2, [r3, #0]
    25f8:	4b19      	ldr	r3, [pc, #100]	; (2660 <sd_mmc_spi_stop_multiwrite_block+0x84>)
    25fa:	881b      	ldrh	r3, [r3, #0]
    25fc:	0019      	movs	r1, r3
    25fe:	4b19      	ldr	r3, [pc, #100]	; (2664 <sd_mmc_spi_stop_multiwrite_block+0x88>)
    2600:	0010      	movs	r0, r2
    2602:	4798      	blx	r3
    2604:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    2606:	429c      	cmp	r4, r3
    2608:	d901      	bls.n	260e <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
    260a:	2301      	movs	r3, #1
    260c:	e020      	b.n	2650 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    260e:	1dfb      	adds	r3, r7, #7
    2610:	22ff      	movs	r2, #255	; 0xff
    2612:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2614:	1df9      	adds	r1, r7, #7
    2616:	4b14      	ldr	r3, [pc, #80]	; (2668 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    2618:	2201      	movs	r2, #1
    261a:	0018      	movs	r0, r3
    261c:	4b13      	ldr	r3, [pc, #76]	; (266c <sd_mmc_spi_stop_multiwrite_block+0x90>)
    261e:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    2620:	1dfb      	adds	r3, r7, #7
    2622:	22fd      	movs	r2, #253	; 0xfd
    2624:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    2626:	1df9      	adds	r1, r7, #7
    2628:	4b0f      	ldr	r3, [pc, #60]	; (2668 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
    262a:	2201      	movs	r2, #1
    262c:	0018      	movs	r0, r3
    262e:	4b0f      	ldr	r3, [pc, #60]	; (266c <sd_mmc_spi_stop_multiwrite_block+0x90>)
    2630:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    2632:	4b0f      	ldr	r3, [pc, #60]	; (2670 <sd_mmc_spi_stop_multiwrite_block+0x94>)
    2634:	4798      	blx	r3
    2636:	0003      	movs	r3, r0
    2638:	001a      	movs	r2, r3
    263a:	2301      	movs	r3, #1
    263c:	4053      	eors	r3, r2
    263e:	b2db      	uxtb	r3, r3
    2640:	2b00      	cmp	r3, #0
    2642:	d004      	beq.n	264e <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2644:	4b0b      	ldr	r3, [pc, #44]	; (2674 <sd_mmc_spi_stop_multiwrite_block+0x98>)
    2646:	2205      	movs	r2, #5
    2648:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    264a:	2300      	movs	r3, #0
    264c:	e000      	b.n	2650 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
    264e:	2301      	movs	r3, #1
}
    2650:	0018      	movs	r0, r3
    2652:	46bd      	mov	sp, r7
    2654:	b003      	add	sp, #12
    2656:	bd90      	pop	{r4, r7, pc}
    2658:	2000013a 	.word	0x2000013a
    265c:	20000134 	.word	0x20000134
    2660:	20000138 	.word	0x20000138
    2664:	0000a30d 	.word	0x0000a30d
    2668:	200000ec 	.word	0x200000ec
    266c:	000046a9 	.word	0x000046a9
    2670:	000023dd 	.word	0x000023dd
    2674:	2000012f 	.word	0x2000012f

00002678 <sd_mmc_deinit>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_deinit(void)
{
    2678:	b580      	push	{r7, lr}
    267a:	af00      	add	r7, sp, #0
	spi_reset(&sd_mmc_master);
    267c:	4b03      	ldr	r3, [pc, #12]	; (268c <sd_mmc_deinit+0x14>)
    267e:	0018      	movs	r0, r3
    2680:	4b03      	ldr	r3, [pc, #12]	; (2690 <sd_mmc_deinit+0x18>)
    2682:	4798      	blx	r3
}
    2684:	46c0      	nop			; (mov r8, r8)
    2686:	46bd      	mov	sp, r7
    2688:	bd80      	pop	{r7, pc}
    268a:	46c0      	nop			; (mov r8, r8)
    268c:	200000ec 	.word	0x200000ec
    2690:	00003fdd 	.word	0x00003fdd

00002694 <sd_mmc_spi_init>:


void sd_mmc_spi_init(void)
{
    2694:	b580      	push	{r7, lr}
    2696:	b090      	sub	sp, #64	; 0x40
    2698:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    269a:	4b1f      	ldr	r3, [pc, #124]	; (2718 <sd_mmc_spi_init+0x84>)
    269c:	2200      	movs	r2, #0
    269e:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    26a0:	233c      	movs	r3, #60	; 0x3c
    26a2:	18fb      	adds	r3, r7, r3
    26a4:	0018      	movs	r0, r3
    26a6:	4b1d      	ldr	r3, [pc, #116]	; (271c <sd_mmc_spi_init+0x88>)
    26a8:	4798      	blx	r3
	//pin_conf.input_pull = PORT_PIN_PULL_UP;
	//port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    26aa:	1d3b      	adds	r3, r7, #4
    26ac:	0018      	movs	r0, r3
    26ae:	4b1c      	ldr	r3, [pc, #112]	; (2720 <sd_mmc_spi_init+0x8c>)
    26b0:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    26b2:	1d3b      	adds	r3, r7, #4
    26b4:	2280      	movs	r2, #128	; 0x80
    26b6:	0252      	lsls	r2, r2, #9
    26b8:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    26ba:	1d3b      	adds	r3, r7, #4
    26bc:	4a19      	ldr	r2, [pc, #100]	; (2724 <sd_mmc_spi_init+0x90>)
    26be:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    26c0:	1d3b      	adds	r3, r7, #4
    26c2:	4a19      	ldr	r2, [pc, #100]	; (2728 <sd_mmc_spi_init+0x94>)
    26c4:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    26c6:	1d3b      	adds	r3, r7, #4
    26c8:	4a18      	ldr	r2, [pc, #96]	; (272c <sd_mmc_spi_init+0x98>)
    26ca:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    26cc:	1d3b      	adds	r3, r7, #4
    26ce:	4a18      	ldr	r2, [pc, #96]	; (2730 <sd_mmc_spi_init+0x9c>)
    26d0:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    26d2:	1d3b      	adds	r3, r7, #4
    26d4:	2224      	movs	r2, #36	; 0x24
    26d6:	2100      	movs	r1, #0
    26d8:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    26da:	1d3b      	adds	r3, r7, #4
    26dc:	4a15      	ldr	r2, [pc, #84]	; (2734 <sd_mmc_spi_init+0xa0>)
    26de:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    26e0:	1d3a      	adds	r2, r7, #4
    26e2:	4915      	ldr	r1, [pc, #84]	; (2738 <sd_mmc_spi_init+0xa4>)
    26e4:	4b15      	ldr	r3, [pc, #84]	; (273c <sd_mmc_spi_init+0xa8>)
    26e6:	0018      	movs	r0, r3
    26e8:	4b15      	ldr	r3, [pc, #84]	; (2740 <sd_mmc_spi_init+0xac>)
    26ea:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    26ec:	4b13      	ldr	r3, [pc, #76]	; (273c <sd_mmc_spi_init+0xa8>)
    26ee:	0018      	movs	r0, r3
    26f0:	4b14      	ldr	r3, [pc, #80]	; (2744 <sd_mmc_spi_init+0xb0>)
    26f2:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    26f4:	4b14      	ldr	r3, [pc, #80]	; (2748 <sd_mmc_spi_init+0xb4>)
    26f6:	0018      	movs	r0, r3
    26f8:	4b14      	ldr	r3, [pc, #80]	; (274c <sd_mmc_spi_init+0xb8>)
    26fa:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    26fc:	4b14      	ldr	r3, [pc, #80]	; (2750 <sd_mmc_spi_init+0xbc>)
    26fe:	781a      	ldrb	r2, [r3, #0]
    2700:	4b11      	ldr	r3, [pc, #68]	; (2748 <sd_mmc_spi_init+0xb4>)
    2702:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    2704:	4a10      	ldr	r2, [pc, #64]	; (2748 <sd_mmc_spi_init+0xb4>)
    2706:	4b13      	ldr	r3, [pc, #76]	; (2754 <sd_mmc_spi_init+0xc0>)
    2708:	0011      	movs	r1, r2
    270a:	0018      	movs	r0, r3
    270c:	4b12      	ldr	r3, [pc, #72]	; (2758 <sd_mmc_spi_init+0xc4>)
    270e:	4798      	blx	r3
}
    2710:	46c0      	nop			; (mov r8, r8)
    2712:	46bd      	mov	sp, r7
    2714:	b010      	add	sp, #64	; 0x40
    2716:	bd80      	pop	{r7, pc}
    2718:	2000012f 	.word	0x2000012f
    271c:	00002101 	.word	0x00002101
    2720:	000021c5 	.word	0x000021c5
    2724:	00100002 	.word	0x00100002
    2728:	00110002 	.word	0x00110002
    272c:	00120002 	.word	0x00120002
    2730:	00130002 	.word	0x00130002
    2734:	00061a80 	.word	0x00061a80
    2738:	42000c00 	.word	0x42000c00
    273c:	200000ec 	.word	0x200000ec
    2740:	000042f5 	.word	0x000042f5
    2744:	000022d1 	.word	0x000022d1
    2748:	2000012c 	.word	0x2000012c
    274c:	00002249 	.word	0x00002249
    2750:	20000008 	.word	0x20000008
    2754:	20000128 	.word	0x20000128
    2758:	0000226d 	.word	0x0000226d

0000275c <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    275c:	b590      	push	{r4, r7, lr}
    275e:	b083      	sub	sp, #12
    2760:	af00      	add	r7, sp, #0
    2762:	0004      	movs	r4, r0
    2764:	6039      	str	r1, [r7, #0]
    2766:	0010      	movs	r0, r2
    2768:	0019      	movs	r1, r3
    276a:	1dfb      	adds	r3, r7, #7
    276c:	1c22      	adds	r2, r4, #0
    276e:	701a      	strb	r2, [r3, #0]
    2770:	1dbb      	adds	r3, r7, #6
    2772:	1c02      	adds	r2, r0, #0
    2774:	701a      	strb	r2, [r3, #0]
    2776:	1d7b      	adds	r3, r7, #5
    2778:	1c0a      	adds	r2, r1, #0
    277a:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    277c:	4b13      	ldr	r3, [pc, #76]	; (27cc <sd_mmc_spi_select_device+0x70>)
    277e:	2200      	movs	r2, #0
    2780:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    2782:	683b      	ldr	r3, [r7, #0]
    2784:	4a12      	ldr	r2, [pc, #72]	; (27d0 <sd_mmc_spi_select_device+0x74>)
    2786:	4293      	cmp	r3, r2
    2788:	d907      	bls.n	279a <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
    278a:	4b11      	ldr	r3, [pc, #68]	; (27d0 <sd_mmc_spi_select_device+0x74>)
    278c:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    278e:	e004      	b.n	279a <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
    2790:	683b      	ldr	r3, [r7, #0]
    2792:	08db      	lsrs	r3, r3, #3
    2794:	683a      	ldr	r2, [r7, #0]
    2796:	1ad3      	subs	r3, r2, r3
    2798:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    279a:	683a      	ldr	r2, [r7, #0]
    279c:	4b0d      	ldr	r3, [pc, #52]	; (27d4 <sd_mmc_spi_select_device+0x78>)
    279e:	0011      	movs	r1, r2
    27a0:	0018      	movs	r0, r3
    27a2:	4b0d      	ldr	r3, [pc, #52]	; (27d8 <sd_mmc_spi_select_device+0x7c>)
    27a4:	4798      	blx	r3
    27a6:	0003      	movs	r3, r0
    27a8:	2b17      	cmp	r3, #23
    27aa:	d0f1      	beq.n	2790 <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    27ac:	1dfb      	adds	r3, r7, #7
    27ae:	781a      	ldrb	r2, [r3, #0]
    27b0:	0013      	movs	r3, r2
    27b2:	005b      	lsls	r3, r3, #1
    27b4:	189b      	adds	r3, r3, r2
    27b6:	4a09      	ldr	r2, [pc, #36]	; (27dc <sd_mmc_spi_select_device+0x80>)
    27b8:	1899      	adds	r1, r3, r2
    27ba:	4b06      	ldr	r3, [pc, #24]	; (27d4 <sd_mmc_spi_select_device+0x78>)
    27bc:	2201      	movs	r2, #1
    27be:	0018      	movs	r0, r3
    27c0:	4b07      	ldr	r3, [pc, #28]	; (27e0 <sd_mmc_spi_select_device+0x84>)
    27c2:	4798      	blx	r3
}
    27c4:	46c0      	nop			; (mov r8, r8)
    27c6:	46bd      	mov	sp, r7
    27c8:	b003      	add	sp, #12
    27ca:	bd90      	pop	{r4, r7, pc}
    27cc:	2000012f 	.word	0x2000012f
    27d0:	00989680 	.word	0x00989680
    27d4:	200000ec 	.word	0x200000ec
    27d8:	0000401d 	.word	0x0000401d
    27dc:	20000128 	.word	0x20000128
    27e0:	000045b9 	.word	0x000045b9

000027e4 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    27e4:	b580      	push	{r7, lr}
    27e6:	b082      	sub	sp, #8
    27e8:	af00      	add	r7, sp, #0
    27ea:	0002      	movs	r2, r0
    27ec:	1dfb      	adds	r3, r7, #7
    27ee:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    27f0:	4b09      	ldr	r3, [pc, #36]	; (2818 <sd_mmc_spi_deselect_device+0x34>)
    27f2:	2200      	movs	r2, #0
    27f4:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    27f6:	1dfb      	adds	r3, r7, #7
    27f8:	781a      	ldrb	r2, [r3, #0]
    27fa:	0013      	movs	r3, r2
    27fc:	005b      	lsls	r3, r3, #1
    27fe:	189b      	adds	r3, r3, r2
    2800:	4a06      	ldr	r2, [pc, #24]	; (281c <sd_mmc_spi_deselect_device+0x38>)
    2802:	1899      	adds	r1, r3, r2
    2804:	4b06      	ldr	r3, [pc, #24]	; (2820 <sd_mmc_spi_deselect_device+0x3c>)
    2806:	2200      	movs	r2, #0
    2808:	0018      	movs	r0, r3
    280a:	4b06      	ldr	r3, [pc, #24]	; (2824 <sd_mmc_spi_deselect_device+0x40>)
    280c:	4798      	blx	r3
}
    280e:	46c0      	nop			; (mov r8, r8)
    2810:	46bd      	mov	sp, r7
    2812:	b002      	add	sp, #8
    2814:	bd80      	pop	{r7, pc}
    2816:	46c0      	nop			; (mov r8, r8)
    2818:	2000012f 	.word	0x2000012f
    281c:	20000128 	.word	0x20000128
    2820:	200000ec 	.word	0x200000ec
    2824:	000045b9 	.word	0x000045b9

00002828 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    2828:	b580      	push	{r7, lr}
    282a:	b082      	sub	sp, #8
    282c:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
    282e:	1dbb      	adds	r3, r7, #6
    2830:	22ff      	movs	r2, #255	; 0xff
    2832:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2834:	4b0c      	ldr	r3, [pc, #48]	; (2868 <sd_mmc_spi_send_clock+0x40>)
    2836:	2200      	movs	r2, #0
    2838:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    283a:	1dfb      	adds	r3, r7, #7
    283c:	2200      	movs	r2, #0
    283e:	701a      	strb	r2, [r3, #0]
    2840:	e00a      	b.n	2858 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    2842:	1db9      	adds	r1, r7, #6
    2844:	4b09      	ldr	r3, [pc, #36]	; (286c <sd_mmc_spi_send_clock+0x44>)
    2846:	2201      	movs	r2, #1
    2848:	0018      	movs	r0, r3
    284a:	4b09      	ldr	r3, [pc, #36]	; (2870 <sd_mmc_spi_send_clock+0x48>)
    284c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    284e:	1dfb      	adds	r3, r7, #7
    2850:	781a      	ldrb	r2, [r3, #0]
    2852:	1dfb      	adds	r3, r7, #7
    2854:	3201      	adds	r2, #1
    2856:	701a      	strb	r2, [r3, #0]
    2858:	1dfb      	adds	r3, r7, #7
    285a:	781b      	ldrb	r3, [r3, #0]
    285c:	2b09      	cmp	r3, #9
    285e:	d9f0      	bls.n	2842 <sd_mmc_spi_send_clock+0x1a>
	}
}
    2860:	46c0      	nop			; (mov r8, r8)
    2862:	46bd      	mov	sp, r7
    2864:	b002      	add	sp, #8
    2866:	bd80      	pop	{r7, pc}
    2868:	2000012f 	.word	0x2000012f
    286c:	200000ec 	.word	0x200000ec
    2870:	000046a9 	.word	0x000046a9

00002874 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    2874:	b590      	push	{r4, r7, lr}
    2876:	b085      	sub	sp, #20
    2878:	af02      	add	r7, sp, #8
    287a:	6078      	str	r0, [r7, #4]
    287c:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    287e:	6839      	ldr	r1, [r7, #0]
    2880:	6878      	ldr	r0, [r7, #4]
    2882:	2300      	movs	r3, #0
    2884:	9300      	str	r3, [sp, #0]
    2886:	2300      	movs	r3, #0
    2888:	2200      	movs	r2, #0
    288a:	4c03      	ldr	r4, [pc, #12]	; (2898 <sd_mmc_spi_send_cmd+0x24>)
    288c:	47a0      	blx	r4
    288e:	0003      	movs	r3, r0
}
    2890:	0018      	movs	r0, r3
    2892:	46bd      	mov	sp, r7
    2894:	b003      	add	sp, #12
    2896:	bd90      	pop	{r4, r7, pc}
    2898:	0000289d 	.word	0x0000289d

0000289c <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    289c:	b590      	push	{r4, r7, lr}
    289e:	b089      	sub	sp, #36	; 0x24
    28a0:	af00      	add	r7, sp, #0
    28a2:	60f8      	str	r0, [r7, #12]
    28a4:	60b9      	str	r1, [r7, #8]
    28a6:	0019      	movs	r1, r3
    28a8:	1dbb      	adds	r3, r7, #6
    28aa:	801a      	strh	r2, [r3, #0]
    28ac:	1d3b      	adds	r3, r7, #4
    28ae:	1c0a      	adds	r2, r1, #0
    28b0:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
    28b2:	231b      	movs	r3, #27
    28b4:	18fb      	adds	r3, r7, r3
    28b6:	22ff      	movs	r2, #255	; 0xff
    28b8:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    28ba:	231c      	movs	r3, #28
    28bc:	18fb      	adds	r3, r7, r3
    28be:	22ff      	movs	r2, #255	; 0xff
    28c0:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    28c2:	4b72      	ldr	r3, [pc, #456]	; (2a8c <sd_mmc_spi_adtc_start+0x1f0>)
    28c4:	2200      	movs	r2, #0
    28c6:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    28c8:	68fb      	ldr	r3, [r7, #12]
    28ca:	b2db      	uxtb	r3, r3
    28cc:	223f      	movs	r2, #63	; 0x3f
    28ce:	4013      	ands	r3, r2
    28d0:	b2db      	uxtb	r3, r3
    28d2:	2240      	movs	r2, #64	; 0x40
    28d4:	4313      	orrs	r3, r2
    28d6:	b2da      	uxtb	r2, r3
    28d8:	2314      	movs	r3, #20
    28da:	18fb      	adds	r3, r7, r3
    28dc:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    28de:	68bb      	ldr	r3, [r7, #8]
    28e0:	0e1b      	lsrs	r3, r3, #24
    28e2:	b2da      	uxtb	r2, r3
    28e4:	2314      	movs	r3, #20
    28e6:	18fb      	adds	r3, r7, r3
    28e8:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    28ea:	68bb      	ldr	r3, [r7, #8]
    28ec:	0c1b      	lsrs	r3, r3, #16
    28ee:	b2da      	uxtb	r2, r3
    28f0:	2314      	movs	r3, #20
    28f2:	18fb      	adds	r3, r7, r3
    28f4:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    28f6:	68bb      	ldr	r3, [r7, #8]
    28f8:	0a1b      	lsrs	r3, r3, #8
    28fa:	b2da      	uxtb	r2, r3
    28fc:	2314      	movs	r3, #20
    28fe:	18fb      	adds	r3, r7, r3
    2900:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    2902:	68bb      	ldr	r3, [r7, #8]
    2904:	b2da      	uxtb	r2, r3
    2906:	2314      	movs	r3, #20
    2908:	18fb      	adds	r3, r7, r3
    290a:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    290c:	2314      	movs	r3, #20
    290e:	18fb      	adds	r3, r7, r3
    2910:	2105      	movs	r1, #5
    2912:	0018      	movs	r0, r3
    2914:	4b5e      	ldr	r3, [pc, #376]	; (2a90 <sd_mmc_spi_adtc_start+0x1f4>)
    2916:	4798      	blx	r3
    2918:	0003      	movs	r3, r0
    291a:	001a      	movs	r2, r3
    291c:	2314      	movs	r3, #20
    291e:	18fb      	adds	r3, r7, r3
    2920:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    2922:	231b      	movs	r3, #27
    2924:	18f9      	adds	r1, r7, r3
    2926:	4b5b      	ldr	r3, [pc, #364]	; (2a94 <sd_mmc_spi_adtc_start+0x1f8>)
    2928:	2201      	movs	r2, #1
    292a:	0018      	movs	r0, r3
    292c:	4b5a      	ldr	r3, [pc, #360]	; (2a98 <sd_mmc_spi_adtc_start+0x1fc>)
    292e:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    2930:	2314      	movs	r3, #20
    2932:	18f9      	adds	r1, r7, r3
    2934:	4b57      	ldr	r3, [pc, #348]	; (2a94 <sd_mmc_spi_adtc_start+0x1f8>)
    2936:	2206      	movs	r2, #6
    2938:	0018      	movs	r0, r3
    293a:	4b57      	ldr	r3, [pc, #348]	; (2a98 <sd_mmc_spi_adtc_start+0x1fc>)
    293c:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    293e:	2313      	movs	r3, #19
    2940:	18fb      	adds	r3, r7, r3
    2942:	22ff      	movs	r2, #255	; 0xff
    2944:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2946:	231c      	movs	r3, #28
    2948:	18fb      	adds	r3, r7, r3
    294a:	881b      	ldrh	r3, [r3, #0]
    294c:	2213      	movs	r2, #19
    294e:	18b9      	adds	r1, r7, r2
    2950:	4850      	ldr	r0, [pc, #320]	; (2a94 <sd_mmc_spi_adtc_start+0x1f8>)
    2952:	2201      	movs	r2, #1
    2954:	4c51      	ldr	r4, [pc, #324]	; (2a9c <sd_mmc_spi_adtc_start+0x200>)
    2956:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
    2958:	231f      	movs	r3, #31
    295a:	18fb      	adds	r3, r7, r3
    295c:	2207      	movs	r2, #7
    295e:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    2960:	231c      	movs	r3, #28
    2962:	18fb      	adds	r3, r7, r3
    2964:	881b      	ldrh	r3, [r3, #0]
    2966:	2213      	movs	r2, #19
    2968:	18b9      	adds	r1, r7, r2
    296a:	484a      	ldr	r0, [pc, #296]	; (2a94 <sd_mmc_spi_adtc_start+0x1f8>)
    296c:	2201      	movs	r2, #1
    296e:	4c4b      	ldr	r4, [pc, #300]	; (2a9c <sd_mmc_spi_adtc_start+0x200>)
    2970:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    2972:	2313      	movs	r3, #19
    2974:	18fb      	adds	r3, r7, r3
    2976:	781b      	ldrb	r3, [r3, #0]
    2978:	b25b      	sxtb	r3, r3
    297a:	2b00      	cmp	r3, #0
    297c:	da10      	bge.n	29a0 <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    297e:	231f      	movs	r3, #31
    2980:	18fb      	adds	r3, r7, r3
    2982:	221f      	movs	r2, #31
    2984:	18ba      	adds	r2, r7, r2
    2986:	7812      	ldrb	r2, [r2, #0]
    2988:	3a01      	subs	r2, #1
    298a:	701a      	strb	r2, [r3, #0]
    298c:	231f      	movs	r3, #31
    298e:	18fb      	adds	r3, r7, r3
    2990:	781b      	ldrb	r3, [r3, #0]
    2992:	2b00      	cmp	r3, #0
    2994:	d1e4      	bne.n	2960 <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    2996:	4b3d      	ldr	r3, [pc, #244]	; (2a8c <sd_mmc_spi_adtc_start+0x1f0>)
    2998:	2202      	movs	r2, #2
    299a:	701a      	strb	r2, [r3, #0]
			return false;
    299c:	2300      	movs	r3, #0
    299e:	e070      	b.n	2a82 <sd_mmc_spi_adtc_start+0x1e6>
			break;
    29a0:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    29a2:	2313      	movs	r3, #19
    29a4:	18fb      	adds	r3, r7, r3
    29a6:	781b      	ldrb	r3, [r3, #0]
    29a8:	001a      	movs	r2, r3
    29aa:	4b3d      	ldr	r3, [pc, #244]	; (2aa0 <sd_mmc_spi_adtc_start+0x204>)
    29ac:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    29ae:	2313      	movs	r3, #19
    29b0:	18fb      	adds	r3, r7, r3
    29b2:	781b      	ldrb	r3, [r3, #0]
    29b4:	001a      	movs	r2, r3
    29b6:	2308      	movs	r3, #8
    29b8:	4013      	ands	r3, r2
    29ba:	d004      	beq.n	29c6 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    29bc:	4b33      	ldr	r3, [pc, #204]	; (2a8c <sd_mmc_spi_adtc_start+0x1f0>)
    29be:	2206      	movs	r2, #6
    29c0:	701a      	strb	r2, [r3, #0]
		return false;
    29c2:	2300      	movs	r3, #0
    29c4:	e05d      	b.n	2a82 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    29c6:	2313      	movs	r3, #19
    29c8:	18fb      	adds	r3, r7, r3
    29ca:	781b      	ldrb	r3, [r3, #0]
    29cc:	001a      	movs	r2, r3
    29ce:	2304      	movs	r3, #4
    29d0:	4013      	ands	r3, r2
    29d2:	d004      	beq.n	29de <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    29d4:	4b2d      	ldr	r3, [pc, #180]	; (2a8c <sd_mmc_spi_adtc_start+0x1f0>)
    29d6:	2209      	movs	r2, #9
    29d8:	701a      	strb	r2, [r3, #0]
		return false;
    29da:	2300      	movs	r3, #0
    29dc:	e051      	b.n	2a82 <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
    29de:	2313      	movs	r3, #19
    29e0:	18fb      	adds	r3, r7, r3
    29e2:	781b      	ldrb	r3, [r3, #0]
    29e4:	001a      	movs	r2, r3
    29e6:	2301      	movs	r3, #1
    29e8:	439a      	bics	r2, r3
    29ea:	1e13      	subs	r3, r2, #0
    29ec:	d004      	beq.n	29f8 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    29ee:	4b27      	ldr	r3, [pc, #156]	; (2a8c <sd_mmc_spi_adtc_start+0x1f0>)
    29f0:	2201      	movs	r2, #1
    29f2:	701a      	strb	r2, [r3, #0]
		return false;
    29f4:	2300      	movs	r3, #0
    29f6:	e044      	b.n	2a82 <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    29f8:	68fa      	ldr	r2, [r7, #12]
    29fa:	2380      	movs	r3, #128	; 0x80
    29fc:	019b      	lsls	r3, r3, #6
    29fe:	4013      	ands	r3, r2
    2a00:	d00d      	beq.n	2a1e <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
    2a02:	4b28      	ldr	r3, [pc, #160]	; (2aa4 <sd_mmc_spi_adtc_start+0x208>)
    2a04:	4798      	blx	r3
    2a06:	0003      	movs	r3, r0
    2a08:	001a      	movs	r2, r3
    2a0a:	2301      	movs	r3, #1
    2a0c:	4053      	eors	r3, r2
    2a0e:	b2db      	uxtb	r3, r3
    2a10:	2b00      	cmp	r3, #0
    2a12:	d004      	beq.n	2a1e <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    2a14:	4b1d      	ldr	r3, [pc, #116]	; (2a8c <sd_mmc_spi_adtc_start+0x1f0>)
    2a16:	2203      	movs	r2, #3
    2a18:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    2a1a:	2300      	movs	r3, #0
    2a1c:	e031      	b.n	2a82 <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    2a1e:	68fa      	ldr	r2, [r7, #12]
    2a20:	2380      	movs	r3, #128	; 0x80
    2a22:	009b      	lsls	r3, r3, #2
    2a24:	4013      	ands	r3, r2
    2a26:	d00e      	beq.n	2a46 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
    2a28:	4b1d      	ldr	r3, [pc, #116]	; (2aa0 <sd_mmc_spi_adtc_start+0x204>)
    2a2a:	2200      	movs	r2, #0
    2a2c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    2a2e:	231c      	movs	r3, #28
    2a30:	18fb      	adds	r3, r7, r3
    2a32:	881b      	ldrh	r3, [r3, #0]
    2a34:	491a      	ldr	r1, [pc, #104]	; (2aa0 <sd_mmc_spi_adtc_start+0x204>)
    2a36:	4817      	ldr	r0, [pc, #92]	; (2a94 <sd_mmc_spi_adtc_start+0x1f8>)
    2a38:	2201      	movs	r2, #1
    2a3a:	4c18      	ldr	r4, [pc, #96]	; (2a9c <sd_mmc_spi_adtc_start+0x200>)
    2a3c:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    2a3e:	4b18      	ldr	r3, [pc, #96]	; (2aa0 <sd_mmc_spi_adtc_start+0x204>)
    2a40:	681a      	ldr	r2, [r3, #0]
    2a42:	4b17      	ldr	r3, [pc, #92]	; (2aa0 <sd_mmc_spi_adtc_start+0x204>)
    2a44:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    2a46:	68fa      	ldr	r2, [r7, #12]
    2a48:	2380      	movs	r3, #128	; 0x80
    2a4a:	00db      	lsls	r3, r3, #3
    2a4c:	4013      	ands	r3, r2
    2a4e:	d00c      	beq.n	2a6a <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    2a50:	231c      	movs	r3, #28
    2a52:	18fb      	adds	r3, r7, r3
    2a54:	881b      	ldrh	r3, [r3, #0]
    2a56:	4912      	ldr	r1, [pc, #72]	; (2aa0 <sd_mmc_spi_adtc_start+0x204>)
    2a58:	480e      	ldr	r0, [pc, #56]	; (2a94 <sd_mmc_spi_adtc_start+0x1f8>)
    2a5a:	2204      	movs	r2, #4
    2a5c:	4c0f      	ldr	r4, [pc, #60]	; (2a9c <sd_mmc_spi_adtc_start+0x200>)
    2a5e:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    2a60:	4b0f      	ldr	r3, [pc, #60]	; (2aa0 <sd_mmc_spi_adtc_start+0x204>)
    2a62:	681b      	ldr	r3, [r3, #0]
    2a64:	ba1a      	rev	r2, r3
    2a66:	4b0e      	ldr	r3, [pc, #56]	; (2aa0 <sd_mmc_spi_adtc_start+0x204>)
    2a68:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    2a6a:	4b0f      	ldr	r3, [pc, #60]	; (2aa8 <sd_mmc_spi_adtc_start+0x20c>)
    2a6c:	1dba      	adds	r2, r7, #6
    2a6e:	8812      	ldrh	r2, [r2, #0]
    2a70:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    2a72:	4b0e      	ldr	r3, [pc, #56]	; (2aac <sd_mmc_spi_adtc_start+0x210>)
    2a74:	1d3a      	adds	r2, r7, #4
    2a76:	8812      	ldrh	r2, [r2, #0]
    2a78:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    2a7a:	4b0d      	ldr	r3, [pc, #52]	; (2ab0 <sd_mmc_spi_adtc_start+0x214>)
    2a7c:	2200      	movs	r2, #0
    2a7e:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    2a80:	2301      	movs	r3, #1
}
    2a82:	0018      	movs	r0, r3
    2a84:	46bd      	mov	sp, r7
    2a86:	b009      	add	sp, #36	; 0x24
    2a88:	bd90      	pop	{r4, r7, pc}
    2a8a:	46c0      	nop			; (mov r8, r8)
    2a8c:	2000012f 	.word	0x2000012f
    2a90:	00002321 	.word	0x00002321
    2a94:	200000ec 	.word	0x200000ec
    2a98:	000046a9 	.word	0x000046a9
    2a9c:	00004485 	.word	0x00004485
    2aa0:	20000130 	.word	0x20000130
    2aa4:	000023dd 	.word	0x000023dd
    2aa8:	20000138 	.word	0x20000138
    2aac:	2000013a 	.word	0x2000013a
    2ab0:	20000134 	.word	0x20000134

00002ab4 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    2ab4:	b580      	push	{r7, lr}
    2ab6:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    2ab8:	4b02      	ldr	r3, [pc, #8]	; (2ac4 <sd_mmc_spi_get_response+0x10>)
    2aba:	681b      	ldr	r3, [r3, #0]
}
    2abc:	0018      	movs	r0, r3
    2abe:	46bd      	mov	sp, r7
    2ac0:	bd80      	pop	{r7, pc}
    2ac2:	46c0      	nop			; (mov r8, r8)
    2ac4:	20000130 	.word	0x20000130

00002ac8 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    2ac8:	b590      	push	{r4, r7, lr}
    2aca:	b085      	sub	sp, #20
    2acc:	af00      	add	r7, sp, #0
    2ace:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
    2ad0:	230e      	movs	r3, #14
    2ad2:	18fb      	adds	r3, r7, r3
    2ad4:	22ff      	movs	r2, #255	; 0xff
    2ad6:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2ad8:	4b1c      	ldr	r3, [pc, #112]	; (2b4c <sd_mmc_spi_read_word+0x84>)
    2ada:	2200      	movs	r2, #0
    2adc:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2ade:	4b1c      	ldr	r3, [pc, #112]	; (2b50 <sd_mmc_spi_read_word+0x88>)
    2ae0:	681a      	ldr	r2, [r3, #0]
    2ae2:	4b1c      	ldr	r3, [pc, #112]	; (2b54 <sd_mmc_spi_read_word+0x8c>)
    2ae4:	881b      	ldrh	r3, [r3, #0]
    2ae6:	0019      	movs	r1, r3
    2ae8:	4b1b      	ldr	r3, [pc, #108]	; (2b58 <sd_mmc_spi_read_word+0x90>)
    2aea:	0010      	movs	r0, r2
    2aec:	4798      	blx	r3
    2aee:	1e0b      	subs	r3, r1, #0
    2af0:	d10a      	bne.n	2b08 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    2af2:	4b1a      	ldr	r3, [pc, #104]	; (2b5c <sd_mmc_spi_read_word+0x94>)
    2af4:	4798      	blx	r3
    2af6:	0003      	movs	r3, r0
    2af8:	001a      	movs	r2, r3
    2afa:	2301      	movs	r3, #1
    2afc:	4053      	eors	r3, r2
    2afe:	b2db      	uxtb	r3, r3
    2b00:	2b00      	cmp	r3, #0
    2b02:	d001      	beq.n	2b08 <sd_mmc_spi_read_word+0x40>
			return false;
    2b04:	2300      	movs	r3, #0
    2b06:	e01d      	b.n	2b44 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    2b08:	230e      	movs	r3, #14
    2b0a:	18fb      	adds	r3, r7, r3
    2b0c:	881b      	ldrh	r3, [r3, #0]
    2b0e:	1d39      	adds	r1, r7, #4
    2b10:	4813      	ldr	r0, [pc, #76]	; (2b60 <sd_mmc_spi_read_word+0x98>)
    2b12:	2204      	movs	r2, #4
    2b14:	4c13      	ldr	r4, [pc, #76]	; (2b64 <sd_mmc_spi_read_word+0x9c>)
    2b16:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
    2b18:	687b      	ldr	r3, [r7, #4]
    2b1a:	687a      	ldr	r2, [r7, #4]
    2b1c:	6812      	ldr	r2, [r2, #0]
    2b1e:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    2b20:	4b0b      	ldr	r3, [pc, #44]	; (2b50 <sd_mmc_spi_read_word+0x88>)
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	1d1a      	adds	r2, r3, #4
    2b26:	4b0a      	ldr	r3, [pc, #40]	; (2b50 <sd_mmc_spi_read_word+0x88>)
    2b28:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    2b2a:	4b09      	ldr	r3, [pc, #36]	; (2b50 <sd_mmc_spi_read_word+0x88>)
    2b2c:	681a      	ldr	r2, [r3, #0]
    2b2e:	4b09      	ldr	r3, [pc, #36]	; (2b54 <sd_mmc_spi_read_word+0x8c>)
    2b30:	881b      	ldrh	r3, [r3, #0]
    2b32:	0019      	movs	r1, r3
    2b34:	4b08      	ldr	r3, [pc, #32]	; (2b58 <sd_mmc_spi_read_word+0x90>)
    2b36:	0010      	movs	r0, r2
    2b38:	4798      	blx	r3
    2b3a:	1e0b      	subs	r3, r1, #0
    2b3c:	d101      	bne.n	2b42 <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
    2b3e:	4b0a      	ldr	r3, [pc, #40]	; (2b68 <sd_mmc_spi_read_word+0xa0>)
    2b40:	4798      	blx	r3
	}
	return true;
    2b42:	2301      	movs	r3, #1
}
    2b44:	0018      	movs	r0, r3
    2b46:	46bd      	mov	sp, r7
    2b48:	b005      	add	sp, #20
    2b4a:	bd90      	pop	{r4, r7, pc}
    2b4c:	2000012f 	.word	0x2000012f
    2b50:	20000134 	.word	0x20000134
    2b54:	20000138 	.word	0x20000138
    2b58:	0000a419 	.word	0x0000a419
    2b5c:	00002449 	.word	0x00002449
    2b60:	200000ec 	.word	0x200000ec
    2b64:	00004485 	.word	0x00004485
    2b68:	000024cd 	.word	0x000024cd

00002b6c <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    2b6c:	b590      	push	{r4, r7, lr}
    2b6e:	b085      	sub	sp, #20
    2b70:	af00      	add	r7, sp, #0
    2b72:	6078      	str	r0, [r7, #4]
    2b74:	000a      	movs	r2, r1
    2b76:	1cbb      	adds	r3, r7, #2
    2b78:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
    2b7a:	230a      	movs	r3, #10
    2b7c:	18fb      	adds	r3, r7, r3
    2b7e:	22ff      	movs	r2, #255	; 0xff
    2b80:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2b82:	4b1c      	ldr	r3, [pc, #112]	; (2bf4 <sd_mmc_spi_start_read_blocks+0x88>)
    2b84:	2200      	movs	r2, #0
    2b86:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2b88:	2300      	movs	r3, #0
    2b8a:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2b8c:	e025      	b.n	2bda <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    2b8e:	4b1a      	ldr	r3, [pc, #104]	; (2bf8 <sd_mmc_spi_start_read_blocks+0x8c>)
    2b90:	4798      	blx	r3
    2b92:	0003      	movs	r3, r0
    2b94:	001a      	movs	r2, r3
    2b96:	2301      	movs	r3, #1
    2b98:	4053      	eors	r3, r2
    2b9a:	b2db      	uxtb	r3, r3
    2b9c:	2b00      	cmp	r3, #0
    2b9e:	d001      	beq.n	2ba4 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
    2ba0:	2300      	movs	r3, #0
    2ba2:	e022      	b.n	2bea <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    2ba4:	687a      	ldr	r2, [r7, #4]
    2ba6:	68fb      	ldr	r3, [r7, #12]
    2ba8:	18d1      	adds	r1, r2, r3
    2baa:	4b14      	ldr	r3, [pc, #80]	; (2bfc <sd_mmc_spi_start_read_blocks+0x90>)
    2bac:	881a      	ldrh	r2, [r3, #0]
    2bae:	230a      	movs	r3, #10
    2bb0:	18fb      	adds	r3, r7, r3
    2bb2:	881b      	ldrh	r3, [r3, #0]
    2bb4:	4812      	ldr	r0, [pc, #72]	; (2c00 <sd_mmc_spi_start_read_blocks+0x94>)
    2bb6:	4c13      	ldr	r4, [pc, #76]	; (2c04 <sd_mmc_spi_start_read_blocks+0x98>)
    2bb8:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    2bba:	4b10      	ldr	r3, [pc, #64]	; (2bfc <sd_mmc_spi_start_read_blocks+0x90>)
    2bbc:	881b      	ldrh	r3, [r3, #0]
    2bbe:	001a      	movs	r2, r3
    2bc0:	68fb      	ldr	r3, [r7, #12]
    2bc2:	189b      	adds	r3, r3, r2
    2bc4:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2bc6:	4b0d      	ldr	r3, [pc, #52]	; (2bfc <sd_mmc_spi_start_read_blocks+0x90>)
    2bc8:	881b      	ldrh	r3, [r3, #0]
    2bca:	001a      	movs	r2, r3
    2bcc:	4b0e      	ldr	r3, [pc, #56]	; (2c08 <sd_mmc_spi_start_read_blocks+0x9c>)
    2bce:	681b      	ldr	r3, [r3, #0]
    2bd0:	18d2      	adds	r2, r2, r3
    2bd2:	4b0d      	ldr	r3, [pc, #52]	; (2c08 <sd_mmc_spi_start_read_blocks+0x9c>)
    2bd4:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    2bd6:	4b0d      	ldr	r3, [pc, #52]	; (2c0c <sd_mmc_spi_start_read_blocks+0xa0>)
    2bd8:	4798      	blx	r3
	while (nb_block--) {
    2bda:	1cbb      	adds	r3, r7, #2
    2bdc:	881b      	ldrh	r3, [r3, #0]
    2bde:	1cba      	adds	r2, r7, #2
    2be0:	1e59      	subs	r1, r3, #1
    2be2:	8011      	strh	r1, [r2, #0]
    2be4:	2b00      	cmp	r3, #0
    2be6:	d1d2      	bne.n	2b8e <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
    2be8:	2301      	movs	r3, #1
}
    2bea:	0018      	movs	r0, r3
    2bec:	46bd      	mov	sp, r7
    2bee:	b005      	add	sp, #20
    2bf0:	bd90      	pop	{r4, r7, pc}
    2bf2:	46c0      	nop			; (mov r8, r8)
    2bf4:	2000012f 	.word	0x2000012f
    2bf8:	00002449 	.word	0x00002449
    2bfc:	20000138 	.word	0x20000138
    2c00:	200000ec 	.word	0x200000ec
    2c04:	00004485 	.word	0x00004485
    2c08:	20000134 	.word	0x20000134
    2c0c:	000024cd 	.word	0x000024cd

00002c10 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    2c10:	b580      	push	{r7, lr}
    2c12:	af00      	add	r7, sp, #0
	return true;
    2c14:	2301      	movs	r3, #1
}
    2c16:	0018      	movs	r0, r3
    2c18:	46bd      	mov	sp, r7
    2c1a:	bd80      	pop	{r7, pc}

00002c1c <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    2c1c:	b580      	push	{r7, lr}
    2c1e:	b084      	sub	sp, #16
    2c20:	af00      	add	r7, sp, #0
    2c22:	6078      	str	r0, [r7, #4]
    2c24:	000a      	movs	r2, r1
    2c26:	1cbb      	adds	r3, r7, #2
    2c28:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    2c2a:	4b24      	ldr	r3, [pc, #144]	; (2cbc <sd_mmc_spi_start_write_blocks+0xa0>)
    2c2c:	2200      	movs	r2, #0
    2c2e:	701a      	strb	r2, [r3, #0]
	pos = 0;
    2c30:	2300      	movs	r3, #0
    2c32:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    2c34:	e035      	b.n	2ca2 <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    2c36:	4b22      	ldr	r3, [pc, #136]	; (2cc0 <sd_mmc_spi_start_write_blocks+0xa4>)
    2c38:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    2c3a:	687a      	ldr	r2, [r7, #4]
    2c3c:	68fb      	ldr	r3, [r7, #12]
    2c3e:	18d1      	adds	r1, r2, r3
    2c40:	4b20      	ldr	r3, [pc, #128]	; (2cc4 <sd_mmc_spi_start_write_blocks+0xa8>)
    2c42:	881a      	ldrh	r2, [r3, #0]
    2c44:	4b20      	ldr	r3, [pc, #128]	; (2cc8 <sd_mmc_spi_start_write_blocks+0xac>)
    2c46:	0018      	movs	r0, r3
    2c48:	4b20      	ldr	r3, [pc, #128]	; (2ccc <sd_mmc_spi_start_write_blocks+0xb0>)
    2c4a:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    2c4c:	4b1d      	ldr	r3, [pc, #116]	; (2cc4 <sd_mmc_spi_start_write_blocks+0xa8>)
    2c4e:	881b      	ldrh	r3, [r3, #0]
    2c50:	001a      	movs	r2, r3
    2c52:	68fb      	ldr	r3, [r7, #12]
    2c54:	189b      	adds	r3, r3, r2
    2c56:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    2c58:	4b1a      	ldr	r3, [pc, #104]	; (2cc4 <sd_mmc_spi_start_write_blocks+0xa8>)
    2c5a:	881b      	ldrh	r3, [r3, #0]
    2c5c:	001a      	movs	r2, r3
    2c5e:	4b1c      	ldr	r3, [pc, #112]	; (2cd0 <sd_mmc_spi_start_write_blocks+0xb4>)
    2c60:	681b      	ldr	r3, [r3, #0]
    2c62:	18d2      	adds	r2, r2, r3
    2c64:	4b1a      	ldr	r3, [pc, #104]	; (2cd0 <sd_mmc_spi_start_write_blocks+0xb4>)
    2c66:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    2c68:	4b1a      	ldr	r3, [pc, #104]	; (2cd4 <sd_mmc_spi_start_write_blocks+0xb8>)
    2c6a:	4798      	blx	r3
    2c6c:	0003      	movs	r3, r0
    2c6e:	001a      	movs	r2, r3
    2c70:	2301      	movs	r3, #1
    2c72:	4053      	eors	r3, r2
    2c74:	b2db      	uxtb	r3, r3
    2c76:	2b00      	cmp	r3, #0
    2c78:	d001      	beq.n	2c7e <sd_mmc_spi_start_write_blocks+0x62>
			return false;
    2c7a:	2300      	movs	r3, #0
    2c7c:	e019      	b.n	2cb2 <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    2c7e:	1cbb      	adds	r3, r7, #2
    2c80:	881b      	ldrh	r3, [r3, #0]
    2c82:	2b00      	cmp	r3, #0
    2c84:	d00d      	beq.n	2ca2 <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    2c86:	4b14      	ldr	r3, [pc, #80]	; (2cd8 <sd_mmc_spi_start_write_blocks+0xbc>)
    2c88:	4798      	blx	r3
    2c8a:	0003      	movs	r3, r0
    2c8c:	001a      	movs	r2, r3
    2c8e:	2301      	movs	r3, #1
    2c90:	4053      	eors	r3, r2
    2c92:	b2db      	uxtb	r3, r3
    2c94:	2b00      	cmp	r3, #0
    2c96:	d004      	beq.n	2ca2 <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2c98:	4b08      	ldr	r3, [pc, #32]	; (2cbc <sd_mmc_spi_start_write_blocks+0xa0>)
    2c9a:	2205      	movs	r2, #5
    2c9c:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    2c9e:	2300      	movs	r3, #0
    2ca0:	e007      	b.n	2cb2 <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
    2ca2:	1cbb      	adds	r3, r7, #2
    2ca4:	881b      	ldrh	r3, [r3, #0]
    2ca6:	1cba      	adds	r2, r7, #2
    2ca8:	1e59      	subs	r1, r3, #1
    2caa:	8011      	strh	r1, [r2, #0]
    2cac:	2b00      	cmp	r3, #0
    2cae:	d1c2      	bne.n	2c36 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
    2cb0:	2301      	movs	r3, #1
}
    2cb2:	0018      	movs	r0, r3
    2cb4:	46bd      	mov	sp, r7
    2cb6:	b004      	add	sp, #16
    2cb8:	bd80      	pop	{r7, pc}
    2cba:	46c0      	nop			; (mov r8, r8)
    2cbc:	2000012f 	.word	0x2000012f
    2cc0:	000024f9 	.word	0x000024f9
    2cc4:	20000138 	.word	0x20000138
    2cc8:	200000ec 	.word	0x200000ec
    2ccc:	000046a9 	.word	0x000046a9
    2cd0:	20000134 	.word	0x20000134
    2cd4:	00002549 	.word	0x00002549
    2cd8:	000023dd 	.word	0x000023dd

00002cdc <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    2cdc:	b580      	push	{r7, lr}
    2cde:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    2ce0:	4b09      	ldr	r3, [pc, #36]	; (2d08 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
    2ce2:	4798      	blx	r3
    2ce4:	0003      	movs	r3, r0
    2ce6:	001a      	movs	r2, r3
    2ce8:	2301      	movs	r3, #1
    2cea:	4053      	eors	r3, r2
    2cec:	b2db      	uxtb	r3, r3
    2cee:	2b00      	cmp	r3, #0
    2cf0:	d004      	beq.n	2cfc <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    2cf2:	4b06      	ldr	r3, [pc, #24]	; (2d0c <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
    2cf4:	2205      	movs	r2, #5
    2cf6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    2cf8:	2300      	movs	r3, #0
    2cfa:	e002      	b.n	2d02 <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    2cfc:	4b04      	ldr	r3, [pc, #16]	; (2d10 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    2cfe:	4798      	blx	r3
    2d00:	0003      	movs	r3, r0
}
    2d02:	0018      	movs	r0, r3
    2d04:	46bd      	mov	sp, r7
    2d06:	bd80      	pop	{r7, pc}
    2d08:	000023dd 	.word	0x000023dd
    2d0c:	2000012f 	.word	0x2000012f
    2d10:	000025dd 	.word	0x000025dd

00002d14 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    2d14:	b580      	push	{r7, lr}
    2d16:	b084      	sub	sp, #16
    2d18:	af00      	add	r7, sp, #0
    2d1a:	0002      	movs	r2, r0
    2d1c:	1dfb      	adds	r3, r7, #7
    2d1e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    2d20:	1dfb      	adds	r3, r7, #7
    2d22:	781b      	ldrb	r3, [r3, #0]
    2d24:	2b00      	cmp	r3, #0
    2d26:	d108      	bne.n	2d3a <mem_test_unit_ready+0x26>
    2d28:	1dfb      	adds	r3, r7, #7
    2d2a:	781a      	ldrb	r2, [r3, #0]
    2d2c:	4b08      	ldr	r3, [pc, #32]	; (2d50 <mem_test_unit_ready+0x3c>)
    2d2e:	0152      	lsls	r2, r2, #5
    2d30:	58d3      	ldr	r3, [r2, r3]
    2d32:	4798      	blx	r3
    2d34:	0003      	movs	r3, r0
    2d36:	001a      	movs	r2, r3
    2d38:	e000      	b.n	2d3c <mem_test_unit_ready+0x28>
    2d3a:	2201      	movs	r2, #1
  status =
    2d3c:	230f      	movs	r3, #15
    2d3e:	18fb      	adds	r3, r7, r3
    2d40:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    2d42:	230f      	movs	r3, #15
    2d44:	18fb      	adds	r3, r7, r3
    2d46:	781b      	ldrb	r3, [r3, #0]
}
    2d48:	0018      	movs	r0, r3
    2d4a:	46bd      	mov	sp, r7
    2d4c:	b004      	add	sp, #16
    2d4e:	bd80      	pop	{r7, pc}
    2d50:	0000af38 	.word	0x0000af38

00002d54 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    2d54:	b580      	push	{r7, lr}
    2d56:	b084      	sub	sp, #16
    2d58:	af00      	add	r7, sp, #0
    2d5a:	0002      	movs	r2, r0
    2d5c:	6039      	str	r1, [r7, #0]
    2d5e:	1dfb      	adds	r3, r7, #7
    2d60:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    2d62:	1dfb      	adds	r3, r7, #7
    2d64:	781b      	ldrb	r3, [r3, #0]
    2d66:	2b00      	cmp	r3, #0
    2d68:	d10c      	bne.n	2d84 <mem_read_capacity+0x30>
    2d6a:	1dfb      	adds	r3, r7, #7
    2d6c:	781b      	ldrb	r3, [r3, #0]
    2d6e:	4a0b      	ldr	r2, [pc, #44]	; (2d9c <mem_read_capacity+0x48>)
    2d70:	015b      	lsls	r3, r3, #5
    2d72:	18d3      	adds	r3, r2, r3
    2d74:	3304      	adds	r3, #4
    2d76:	681b      	ldr	r3, [r3, #0]
    2d78:	683a      	ldr	r2, [r7, #0]
    2d7a:	0010      	movs	r0, r2
    2d7c:	4798      	blx	r3
    2d7e:	0003      	movs	r3, r0
    2d80:	001a      	movs	r2, r3
    2d82:	e000      	b.n	2d86 <mem_read_capacity+0x32>
    2d84:	2201      	movs	r2, #1
  status =
    2d86:	230f      	movs	r3, #15
    2d88:	18fb      	adds	r3, r7, r3
    2d8a:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    2d8c:	230f      	movs	r3, #15
    2d8e:	18fb      	adds	r3, r7, r3
    2d90:	781b      	ldrb	r3, [r3, #0]
}
    2d92:	0018      	movs	r0, r3
    2d94:	46bd      	mov	sp, r7
    2d96:	b004      	add	sp, #16
    2d98:	bd80      	pop	{r7, pc}
    2d9a:	46c0      	nop			; (mov r8, r8)
    2d9c:	0000af38 	.word	0x0000af38

00002da0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    2da0:	b580      	push	{r7, lr}
    2da2:	b084      	sub	sp, #16
    2da4:	af00      	add	r7, sp, #0
    2da6:	0002      	movs	r2, r0
    2da8:	1dfb      	adds	r3, r7, #7
    2daa:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    2dac:	1dfb      	adds	r3, r7, #7
    2dae:	781b      	ldrb	r3, [r3, #0]
    2db0:	425a      	negs	r2, r3
    2db2:	4153      	adcs	r3, r2
    2db4:	b2da      	uxtb	r2, r3
  sector_size =
    2db6:	230f      	movs	r3, #15
    2db8:	18fb      	adds	r3, r7, r3
    2dba:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    2dbc:	230f      	movs	r3, #15
    2dbe:	18fb      	adds	r3, r7, r3
    2dc0:	781b      	ldrb	r3, [r3, #0]
}
    2dc2:	0018      	movs	r0, r3
    2dc4:	46bd      	mov	sp, r7
    2dc6:	b004      	add	sp, #16
    2dc8:	bd80      	pop	{r7, pc}
	...

00002dcc <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    2dcc:	b580      	push	{r7, lr}
    2dce:	b084      	sub	sp, #16
    2dd0:	af00      	add	r7, sp, #0
    2dd2:	0002      	movs	r2, r0
    2dd4:	1dfb      	adds	r3, r7, #7
    2dd6:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    2dd8:	1dfb      	adds	r3, r7, #7
    2dda:	781b      	ldrb	r3, [r3, #0]
    2ddc:	2b00      	cmp	r3, #0
    2dde:	d109      	bne.n	2df4 <mem_wr_protect+0x28>
    2de0:	1dfb      	adds	r3, r7, #7
    2de2:	781b      	ldrb	r3, [r3, #0]
    2de4:	4a0a      	ldr	r2, [pc, #40]	; (2e10 <mem_wr_protect+0x44>)
    2de6:	015b      	lsls	r3, r3, #5
    2de8:	18d3      	adds	r3, r2, r3
    2dea:	330c      	adds	r3, #12
    2dec:	681b      	ldr	r3, [r3, #0]
    2dee:	4798      	blx	r3
    2df0:	1e03      	subs	r3, r0, #0
    2df2:	d001      	beq.n	2df8 <mem_wr_protect+0x2c>
    2df4:	2201      	movs	r2, #1
    2df6:	e000      	b.n	2dfa <mem_wr_protect+0x2e>
    2df8:	2200      	movs	r2, #0
  wr_protect =
    2dfa:	230f      	movs	r3, #15
    2dfc:	18fb      	adds	r3, r7, r3
    2dfe:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    2e00:	230f      	movs	r3, #15
    2e02:	18fb      	adds	r3, r7, r3
    2e04:	781b      	ldrb	r3, [r3, #0]
}
    2e06:	0018      	movs	r0, r3
    2e08:	46bd      	mov	sp, r7
    2e0a:	b004      	add	sp, #16
    2e0c:	bd80      	pop	{r7, pc}
    2e0e:	46c0      	nop			; (mov r8, r8)
    2e10:	0000af38 	.word	0x0000af38

00002e14 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    2e14:	b580      	push	{r7, lr}
    2e16:	b086      	sub	sp, #24
    2e18:	af00      	add	r7, sp, #0
    2e1a:	60b9      	str	r1, [r7, #8]
    2e1c:	607a      	str	r2, [r7, #4]
    2e1e:	230f      	movs	r3, #15
    2e20:	18fb      	adds	r3, r7, r3
    2e22:	1c02      	adds	r2, r0, #0
    2e24:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    2e26:	230f      	movs	r3, #15
    2e28:	18fb      	adds	r3, r7, r3
    2e2a:	781b      	ldrb	r3, [r3, #0]
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d10e      	bne.n	2e4e <memory_2_ram+0x3a>
    2e30:	230f      	movs	r3, #15
    2e32:	18fb      	adds	r3, r7, r3
    2e34:	781b      	ldrb	r3, [r3, #0]
    2e36:	4a0b      	ldr	r2, [pc, #44]	; (2e64 <memory_2_ram+0x50>)
    2e38:	015b      	lsls	r3, r3, #5
    2e3a:	18d3      	adds	r3, r2, r3
    2e3c:	3314      	adds	r3, #20
    2e3e:	681b      	ldr	r3, [r3, #0]
    2e40:	6879      	ldr	r1, [r7, #4]
    2e42:	68ba      	ldr	r2, [r7, #8]
    2e44:	0010      	movs	r0, r2
    2e46:	4798      	blx	r3
    2e48:	0003      	movs	r3, r0
    2e4a:	001a      	movs	r2, r3
    2e4c:	e000      	b.n	2e50 <memory_2_ram+0x3c>
    2e4e:	2201      	movs	r2, #1
  status =
    2e50:	2317      	movs	r3, #23
    2e52:	18fb      	adds	r3, r7, r3
    2e54:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    2e56:	2317      	movs	r3, #23
    2e58:	18fb      	adds	r3, r7, r3
    2e5a:	781b      	ldrb	r3, [r3, #0]
}
    2e5c:	0018      	movs	r0, r3
    2e5e:	46bd      	mov	sp, r7
    2e60:	b006      	add	sp, #24
    2e62:	bd80      	pop	{r7, pc}
    2e64:	0000af38 	.word	0x0000af38

00002e68 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    2e68:	b580      	push	{r7, lr}
    2e6a:	b086      	sub	sp, #24
    2e6c:	af00      	add	r7, sp, #0
    2e6e:	60b9      	str	r1, [r7, #8]
    2e70:	607a      	str	r2, [r7, #4]
    2e72:	230f      	movs	r3, #15
    2e74:	18fb      	adds	r3, r7, r3
    2e76:	1c02      	adds	r2, r0, #0
    2e78:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    2e7a:	230f      	movs	r3, #15
    2e7c:	18fb      	adds	r3, r7, r3
    2e7e:	781b      	ldrb	r3, [r3, #0]
    2e80:	2b00      	cmp	r3, #0
    2e82:	d10e      	bne.n	2ea2 <ram_2_memory+0x3a>
    2e84:	230f      	movs	r3, #15
    2e86:	18fb      	adds	r3, r7, r3
    2e88:	781b      	ldrb	r3, [r3, #0]
    2e8a:	4a0b      	ldr	r2, [pc, #44]	; (2eb8 <ram_2_memory+0x50>)
    2e8c:	015b      	lsls	r3, r3, #5
    2e8e:	18d3      	adds	r3, r2, r3
    2e90:	3318      	adds	r3, #24
    2e92:	681b      	ldr	r3, [r3, #0]
    2e94:	6879      	ldr	r1, [r7, #4]
    2e96:	68ba      	ldr	r2, [r7, #8]
    2e98:	0010      	movs	r0, r2
    2e9a:	4798      	blx	r3
    2e9c:	0003      	movs	r3, r0
    2e9e:	001a      	movs	r2, r3
    2ea0:	e000      	b.n	2ea4 <ram_2_memory+0x3c>
    2ea2:	2201      	movs	r2, #1
  status =
    2ea4:	2317      	movs	r3, #23
    2ea6:	18fb      	adds	r3, r7, r3
    2ea8:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    2eaa:	2317      	movs	r3, #23
    2eac:	18fb      	adds	r3, r7, r3
    2eae:	781b      	ldrb	r3, [r3, #0]
}
    2eb0:	0018      	movs	r0, r3
    2eb2:	46bd      	mov	sp, r7
    2eb4:	b006      	add	sp, #24
    2eb6:	bd80      	pop	{r7, pc}
    2eb8:	0000af38 	.word	0x0000af38

00002ebc <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    2ebc:	b580      	push	{r7, lr}
    2ebe:	b082      	sub	sp, #8
    2ec0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
    2ec2:	4b10      	ldr	r3, [pc, #64]	; (2f04 <cpu_irq_enter_critical+0x48>)
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	2b00      	cmp	r3, #0
    2ec8:	d112      	bne.n	2ef0 <cpu_irq_enter_critical+0x34>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2eca:	f3ef 8310 	mrs	r3, PRIMASK
    2ece:	607b      	str	r3, [r7, #4]
  return(result);
    2ed0:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d109      	bne.n	2eea <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
    2ed6:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2ed8:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    2edc:	4b0a      	ldr	r3, [pc, #40]	; (2f08 <cpu_irq_enter_critical+0x4c>)
    2ede:	2200      	movs	r2, #0
    2ee0:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    2ee2:	4b0a      	ldr	r3, [pc, #40]	; (2f0c <cpu_irq_enter_critical+0x50>)
    2ee4:	2201      	movs	r2, #1
    2ee6:	701a      	strb	r2, [r3, #0]
    2ee8:	e002      	b.n	2ef0 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    2eea:	4b08      	ldr	r3, [pc, #32]	; (2f0c <cpu_irq_enter_critical+0x50>)
    2eec:	2200      	movs	r2, #0
    2eee:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    2ef0:	4b04      	ldr	r3, [pc, #16]	; (2f04 <cpu_irq_enter_critical+0x48>)
    2ef2:	681b      	ldr	r3, [r3, #0]
    2ef4:	1c5a      	adds	r2, r3, #1
    2ef6:	4b03      	ldr	r3, [pc, #12]	; (2f04 <cpu_irq_enter_critical+0x48>)
    2ef8:	601a      	str	r2, [r3, #0]
}
    2efa:	46c0      	nop			; (mov r8, r8)
    2efc:	46bd      	mov	sp, r7
    2efe:	b002      	add	sp, #8
    2f00:	bd80      	pop	{r7, pc}
    2f02:	46c0      	nop			; (mov r8, r8)
    2f04:	2000013c 	.word	0x2000013c
    2f08:	20000009 	.word	0x20000009
    2f0c:	20000140 	.word	0x20000140

00002f10 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    2f10:	b580      	push	{r7, lr}
    2f12:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    2f14:	4b0b      	ldr	r3, [pc, #44]	; (2f44 <cpu_irq_leave_critical+0x34>)
    2f16:	681b      	ldr	r3, [r3, #0]
    2f18:	1e5a      	subs	r2, r3, #1
    2f1a:	4b0a      	ldr	r3, [pc, #40]	; (2f44 <cpu_irq_leave_critical+0x34>)
    2f1c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    2f1e:	4b09      	ldr	r3, [pc, #36]	; (2f44 <cpu_irq_leave_critical+0x34>)
    2f20:	681b      	ldr	r3, [r3, #0]
    2f22:	2b00      	cmp	r3, #0
    2f24:	d10a      	bne.n	2f3c <cpu_irq_leave_critical+0x2c>
    2f26:	4b08      	ldr	r3, [pc, #32]	; (2f48 <cpu_irq_leave_critical+0x38>)
    2f28:	781b      	ldrb	r3, [r3, #0]
    2f2a:	b2db      	uxtb	r3, r3
    2f2c:	2b00      	cmp	r3, #0
    2f2e:	d005      	beq.n	2f3c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
    2f30:	4b06      	ldr	r3, [pc, #24]	; (2f4c <cpu_irq_leave_critical+0x3c>)
    2f32:	2201      	movs	r2, #1
    2f34:	701a      	strb	r2, [r3, #0]
    2f36:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2f3a:	b662      	cpsie	i
	}
}
    2f3c:	46c0      	nop			; (mov r8, r8)
    2f3e:	46bd      	mov	sp, r7
    2f40:	bd80      	pop	{r7, pc}
    2f42:	46c0      	nop			; (mov r8, r8)
    2f44:	2000013c 	.word	0x2000013c
    2f48:	20000140 	.word	0x20000140
    2f4c:	20000009 	.word	0x20000009

00002f50 <system_pinmux_get_config_defaults>:
{
    2f50:	b580      	push	{r7, lr}
    2f52:	b082      	sub	sp, #8
    2f54:	af00      	add	r7, sp, #0
    2f56:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	2280      	movs	r2, #128	; 0x80
    2f5c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2f5e:	687b      	ldr	r3, [r7, #4]
    2f60:	2200      	movs	r2, #0
    2f62:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	2201      	movs	r2, #1
    2f68:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	2200      	movs	r2, #0
    2f6e:	70da      	strb	r2, [r3, #3]
}
    2f70:	46c0      	nop			; (mov r8, r8)
    2f72:	46bd      	mov	sp, r7
    2f74:	b002      	add	sp, #8
    2f76:	bd80      	pop	{r7, pc}

00002f78 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    2f78:	b580      	push	{r7, lr}
    2f7a:	b084      	sub	sp, #16
    2f7c:	af00      	add	r7, sp, #0
    2f7e:	0002      	movs	r2, r0
    2f80:	6039      	str	r1, [r7, #0]
    2f82:	1dfb      	adds	r3, r7, #7
    2f84:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    2f86:	230c      	movs	r3, #12
    2f88:	18fb      	adds	r3, r7, r3
    2f8a:	0018      	movs	r0, r3
    2f8c:	4b10      	ldr	r3, [pc, #64]	; (2fd0 <port_pin_set_config+0x58>)
    2f8e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    2f90:	230c      	movs	r3, #12
    2f92:	18fb      	adds	r3, r7, r3
    2f94:	2280      	movs	r2, #128	; 0x80
    2f96:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    2f98:	683b      	ldr	r3, [r7, #0]
    2f9a:	781a      	ldrb	r2, [r3, #0]
    2f9c:	230c      	movs	r3, #12
    2f9e:	18fb      	adds	r3, r7, r3
    2fa0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    2fa2:	683b      	ldr	r3, [r7, #0]
    2fa4:	785a      	ldrb	r2, [r3, #1]
    2fa6:	230c      	movs	r3, #12
    2fa8:	18fb      	adds	r3, r7, r3
    2faa:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    2fac:	683b      	ldr	r3, [r7, #0]
    2fae:	789a      	ldrb	r2, [r3, #2]
    2fb0:	230c      	movs	r3, #12
    2fb2:	18fb      	adds	r3, r7, r3
    2fb4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    2fb6:	230c      	movs	r3, #12
    2fb8:	18fa      	adds	r2, r7, r3
    2fba:	1dfb      	adds	r3, r7, #7
    2fbc:	781b      	ldrb	r3, [r3, #0]
    2fbe:	0011      	movs	r1, r2
    2fc0:	0018      	movs	r0, r3
    2fc2:	4b04      	ldr	r3, [pc, #16]	; (2fd4 <port_pin_set_config+0x5c>)
    2fc4:	4798      	blx	r3
}
    2fc6:	46c0      	nop			; (mov r8, r8)
    2fc8:	46bd      	mov	sp, r7
    2fca:	b004      	add	sp, #16
    2fcc:	bd80      	pop	{r7, pc}
    2fce:	46c0      	nop			; (mov r8, r8)
    2fd0:	00002f51 	.word	0x00002f51
    2fd4:	00006835 	.word	0x00006835

00002fd8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    2fd8:	b580      	push	{r7, lr}
    2fda:	b082      	sub	sp, #8
    2fdc:	af00      	add	r7, sp, #0
    2fde:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    2fe0:	687b      	ldr	r3, [r7, #4]
    2fe2:	2200      	movs	r2, #0
    2fe4:	701a      	strb	r2, [r3, #0]
}
    2fe6:	46c0      	nop			; (mov r8, r8)
    2fe8:	46bd      	mov	sp, r7
    2fea:	b002      	add	sp, #8
    2fec:	bd80      	pop	{r7, pc}
	...

00002ff0 <system_apb_clock_set_mask>:
{
    2ff0:	b580      	push	{r7, lr}
    2ff2:	b082      	sub	sp, #8
    2ff4:	af00      	add	r7, sp, #0
    2ff6:	0002      	movs	r2, r0
    2ff8:	6039      	str	r1, [r7, #0]
    2ffa:	1dfb      	adds	r3, r7, #7
    2ffc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    2ffe:	1dfb      	adds	r3, r7, #7
    3000:	781b      	ldrb	r3, [r3, #0]
    3002:	2b01      	cmp	r3, #1
    3004:	d00a      	beq.n	301c <system_apb_clock_set_mask+0x2c>
    3006:	2b02      	cmp	r3, #2
    3008:	d00f      	beq.n	302a <system_apb_clock_set_mask+0x3a>
    300a:	2b00      	cmp	r3, #0
    300c:	d114      	bne.n	3038 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    300e:	4b0e      	ldr	r3, [pc, #56]	; (3048 <system_apb_clock_set_mask+0x58>)
    3010:	4a0d      	ldr	r2, [pc, #52]	; (3048 <system_apb_clock_set_mask+0x58>)
    3012:	6991      	ldr	r1, [r2, #24]
    3014:	683a      	ldr	r2, [r7, #0]
    3016:	430a      	orrs	r2, r1
    3018:	619a      	str	r2, [r3, #24]
			break;
    301a:	e00f      	b.n	303c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    301c:	4b0a      	ldr	r3, [pc, #40]	; (3048 <system_apb_clock_set_mask+0x58>)
    301e:	4a0a      	ldr	r2, [pc, #40]	; (3048 <system_apb_clock_set_mask+0x58>)
    3020:	69d1      	ldr	r1, [r2, #28]
    3022:	683a      	ldr	r2, [r7, #0]
    3024:	430a      	orrs	r2, r1
    3026:	61da      	str	r2, [r3, #28]
			break;
    3028:	e008      	b.n	303c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    302a:	4b07      	ldr	r3, [pc, #28]	; (3048 <system_apb_clock_set_mask+0x58>)
    302c:	4a06      	ldr	r2, [pc, #24]	; (3048 <system_apb_clock_set_mask+0x58>)
    302e:	6a11      	ldr	r1, [r2, #32]
    3030:	683a      	ldr	r2, [r7, #0]
    3032:	430a      	orrs	r2, r1
    3034:	621a      	str	r2, [r3, #32]
			break;
    3036:	e001      	b.n	303c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3038:	2317      	movs	r3, #23
    303a:	e000      	b.n	303e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    303c:	2300      	movs	r3, #0
}
    303e:	0018      	movs	r0, r3
    3040:	46bd      	mov	sp, r7
    3042:	b002      	add	sp, #8
    3044:	bd80      	pop	{r7, pc}
    3046:	46c0      	nop			; (mov r8, r8)
    3048:	40000400 	.word	0x40000400

0000304c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    304c:	b580      	push	{r7, lr}
    304e:	b084      	sub	sp, #16
    3050:	af00      	add	r7, sp, #0
    3052:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3054:	687b      	ldr	r3, [r7, #4]
    3056:	681b      	ldr	r3, [r3, #0]
    3058:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    305a:	68fb      	ldr	r3, [r7, #12]
    305c:	7a9b      	ldrb	r3, [r3, #10]
    305e:	b2db      	uxtb	r3, r3
    3060:	b25b      	sxtb	r3, r3
    3062:	2b00      	cmp	r3, #0
    3064:	da01      	bge.n	306a <rtc_calendar_is_syncing+0x1e>
                return true;
    3066:	2301      	movs	r3, #1
    3068:	e000      	b.n	306c <rtc_calendar_is_syncing+0x20>
        }

        return false;
    306a:	2300      	movs	r3, #0
}
    306c:	0018      	movs	r0, r3
    306e:	46bd      	mov	sp, r7
    3070:	b004      	add	sp, #16
    3072:	bd80      	pop	{r7, pc}

00003074 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    3074:	b580      	push	{r7, lr}
    3076:	b084      	sub	sp, #16
    3078:	af00      	add	r7, sp, #0
    307a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    307c:	687b      	ldr	r3, [r7, #4]
    307e:	681b      	ldr	r3, [r3, #0]
    3080:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    3082:	46c0      	nop			; (mov r8, r8)
    3084:	687b      	ldr	r3, [r7, #4]
    3086:	0018      	movs	r0, r3
    3088:	4b07      	ldr	r3, [pc, #28]	; (30a8 <rtc_calendar_enable+0x34>)
    308a:	4798      	blx	r3
    308c:	1e03      	subs	r3, r0, #0
    308e:	d1f9      	bne.n	3084 <rtc_calendar_enable+0x10>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    3090:	68fb      	ldr	r3, [r7, #12]
    3092:	881b      	ldrh	r3, [r3, #0]
    3094:	b29b      	uxth	r3, r3
    3096:	2202      	movs	r2, #2
    3098:	4313      	orrs	r3, r2
    309a:	b29a      	uxth	r2, r3
    309c:	68fb      	ldr	r3, [r7, #12]
    309e:	801a      	strh	r2, [r3, #0]
}
    30a0:	46c0      	nop			; (mov r8, r8)
    30a2:	46bd      	mov	sp, r7
    30a4:	b004      	add	sp, #16
    30a6:	bd80      	pop	{r7, pc}
    30a8:	0000304d 	.word	0x0000304d

000030ac <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    30ac:	b580      	push	{r7, lr}
    30ae:	b084      	sub	sp, #16
    30b0:	af00      	add	r7, sp, #0
    30b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    30b4:	687b      	ldr	r3, [r7, #4]
    30b6:	681b      	ldr	r3, [r3, #0]
    30b8:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
    30ba:	46c0      	nop			; (mov r8, r8)
    30bc:	687b      	ldr	r3, [r7, #4]
    30be:	0018      	movs	r0, r3
    30c0:	4b0a      	ldr	r3, [pc, #40]	; (30ec <rtc_calendar_disable+0x40>)
    30c2:	4798      	blx	r3
    30c4:	1e03      	subs	r3, r0, #0
    30c6:	d1f9      	bne.n	30bc <rtc_calendar_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    30c8:	68fb      	ldr	r3, [r7, #12]
    30ca:	22c1      	movs	r2, #193	; 0xc1
    30cc:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    30ce:	68fb      	ldr	r3, [r7, #12]
    30d0:	22c1      	movs	r2, #193	; 0xc1
    30d2:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    30d4:	68fb      	ldr	r3, [r7, #12]
    30d6:	881b      	ldrh	r3, [r3, #0]
    30d8:	b29b      	uxth	r3, r3
    30da:	2202      	movs	r2, #2
    30dc:	4393      	bics	r3, r2
    30de:	b29a      	uxth	r2, r3
    30e0:	68fb      	ldr	r3, [r7, #12]
    30e2:	801a      	strh	r2, [r3, #0]
}
    30e4:	46c0      	nop			; (mov r8, r8)
    30e6:	46bd      	mov	sp, r7
    30e8:	b004      	add	sp, #16
    30ea:	bd80      	pop	{r7, pc}
    30ec:	0000304d 	.word	0x0000304d

000030f0 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    30f0:	b580      	push	{r7, lr}
    30f2:	b084      	sub	sp, #16
    30f4:	af00      	add	r7, sp, #0
    30f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	681b      	ldr	r3, [r3, #0]
    30fc:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    30fe:	687b      	ldr	r3, [r7, #4]
    3100:	0018      	movs	r0, r3
    3102:	4b0a      	ldr	r3, [pc, #40]	; (312c <rtc_calendar_reset+0x3c>)
    3104:	4798      	blx	r3
#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
	module->enabled_callback    = 0;
#endif

	while (rtc_calendar_is_syncing(module)) {
    3106:	46c0      	nop			; (mov r8, r8)
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	0018      	movs	r0, r3
    310c:	4b08      	ldr	r3, [pc, #32]	; (3130 <rtc_calendar_reset+0x40>)
    310e:	4798      	blx	r3
    3110:	1e03      	subs	r3, r0, #0
    3112:	d1f9      	bne.n	3108 <rtc_calendar_reset+0x18>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    3114:	68fb      	ldr	r3, [r7, #12]
    3116:	881b      	ldrh	r3, [r3, #0]
    3118:	b29b      	uxth	r3, r3
    311a:	2201      	movs	r2, #1
    311c:	4313      	orrs	r3, r2
    311e:	b29a      	uxth	r2, r3
    3120:	68fb      	ldr	r3, [r7, #12]
    3122:	801a      	strh	r2, [r3, #0]
}
    3124:	46c0      	nop			; (mov r8, r8)
    3126:	46bd      	mov	sp, r7
    3128:	b004      	add	sp, #16
    312a:	bd80      	pop	{r7, pc}
    312c:	000030ad 	.word	0x000030ad
    3130:	0000304d 	.word	0x0000304d

00003134 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    3134:	b580      	push	{r7, lr}
    3136:	b084      	sub	sp, #16
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    313e:	683b      	ldr	r3, [r7, #0]
    3140:	88db      	ldrh	r3, [r3, #6]
    3142:	001a      	movs	r2, r3
    3144:	687b      	ldr	r3, [r7, #4]
    3146:	88db      	ldrh	r3, [r3, #6]
    3148:	1ad3      	subs	r3, r2, r3
    314a:	069b      	lsls	r3, r3, #26
    314c:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    314e:	683b      	ldr	r3, [r7, #0]
    3150:	795b      	ldrb	r3, [r3, #5]
    3152:	059b      	lsls	r3, r3, #22
    3154:	001a      	movs	r2, r3
    3156:	68fb      	ldr	r3, [r7, #12]
    3158:	4313      	orrs	r3, r2
    315a:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    315c:	683b      	ldr	r3, [r7, #0]
    315e:	791b      	ldrb	r3, [r3, #4]
    3160:	045b      	lsls	r3, r3, #17
    3162:	001a      	movs	r2, r3
    3164:	68fb      	ldr	r3, [r7, #12]
    3166:	4313      	orrs	r3, r2
    3168:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    316a:	683b      	ldr	r3, [r7, #0]
    316c:	789b      	ldrb	r3, [r3, #2]
    316e:	031b      	lsls	r3, r3, #12
    3170:	001a      	movs	r2, r3
    3172:	68fb      	ldr	r3, [r7, #12]
    3174:	4313      	orrs	r3, r2
    3176:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    3178:	687b      	ldr	r3, [r7, #4]
    317a:	791b      	ldrb	r3, [r3, #4]
    317c:	2201      	movs	r2, #1
    317e:	4053      	eors	r3, r2
    3180:	b2db      	uxtb	r3, r3
    3182:	2b00      	cmp	r3, #0
    3184:	d008      	beq.n	3198 <rtc_calendar_time_to_register_value+0x64>
    3186:	683b      	ldr	r3, [r7, #0]
    3188:	78db      	ldrb	r3, [r3, #3]
    318a:	2b00      	cmp	r3, #0
    318c:	d004      	beq.n	3198 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    318e:	68fb      	ldr	r3, [r7, #12]
    3190:	2280      	movs	r2, #128	; 0x80
    3192:	0252      	lsls	r2, r2, #9
    3194:	4313      	orrs	r3, r2
    3196:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    3198:	683b      	ldr	r3, [r7, #0]
    319a:	785b      	ldrb	r3, [r3, #1]
    319c:	019b      	lsls	r3, r3, #6
    319e:	001a      	movs	r2, r3
    31a0:	68fb      	ldr	r3, [r7, #12]
    31a2:	4313      	orrs	r3, r2
    31a4:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    31a6:	683b      	ldr	r3, [r7, #0]
    31a8:	781b      	ldrb	r3, [r3, #0]
    31aa:	001a      	movs	r2, r3
    31ac:	68fb      	ldr	r3, [r7, #12]
    31ae:	4313      	orrs	r3, r2
    31b0:	60fb      	str	r3, [r7, #12]

	return register_value;
    31b2:	68fb      	ldr	r3, [r7, #12]
}
    31b4:	0018      	movs	r0, r3
    31b6:	46bd      	mov	sp, r7
    31b8:	b004      	add	sp, #16
    31ba:	bd80      	pop	{r7, pc}

000031bc <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    31bc:	b580      	push	{r7, lr}
    31be:	b084      	sub	sp, #16
    31c0:	af00      	add	r7, sp, #0
    31c2:	60f8      	str	r0, [r7, #12]
    31c4:	60b9      	str	r1, [r7, #8]
    31c6:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    31c8:	68bb      	ldr	r3, [r7, #8]
    31ca:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    31cc:	b29a      	uxth	r2, r3
    31ce:	68fb      	ldr	r3, [r7, #12]
    31d0:	88db      	ldrh	r3, [r3, #6]
    31d2:	18d3      	adds	r3, r2, r3
    31d4:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    31da:	68bb      	ldr	r3, [r7, #8]
    31dc:	0d9b      	lsrs	r3, r3, #22
    31de:	b2db      	uxtb	r3, r3
    31e0:	220f      	movs	r2, #15
    31e2:	4013      	ands	r3, r2
    31e4:	b2da      	uxtb	r2, r3
    31e6:	687b      	ldr	r3, [r7, #4]
    31e8:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    31ea:	68bb      	ldr	r3, [r7, #8]
    31ec:	0c5b      	lsrs	r3, r3, #17
    31ee:	b2db      	uxtb	r3, r3
    31f0:	221f      	movs	r2, #31
    31f2:	4013      	ands	r3, r2
    31f4:	b2da      	uxtb	r2, r3
    31f6:	687b      	ldr	r3, [r7, #4]
    31f8:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    31fa:	68fb      	ldr	r3, [r7, #12]
    31fc:	791b      	ldrb	r3, [r3, #4]
    31fe:	2b00      	cmp	r3, #0
    3200:	d008      	beq.n	3214 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    3202:	68bb      	ldr	r3, [r7, #8]
    3204:	0b1b      	lsrs	r3, r3, #12
    3206:	b2db      	uxtb	r3, r3
    3208:	221f      	movs	r2, #31
    320a:	4013      	ands	r3, r2
    320c:	b2da      	uxtb	r2, r3
    320e:	687b      	ldr	r3, [r7, #4]
    3210:	709a      	strb	r2, [r3, #2]
    3212:	e010      	b.n	3236 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    3214:	68bb      	ldr	r3, [r7, #8]
    3216:	0b1b      	lsrs	r3, r3, #12
    3218:	b2db      	uxtb	r3, r3
    321a:	220f      	movs	r2, #15
    321c:	4013      	ands	r3, r2
    321e:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    3220:	687b      	ldr	r3, [r7, #4]
    3222:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    3224:	68ba      	ldr	r2, [r7, #8]
    3226:	2380      	movs	r3, #128	; 0x80
    3228:	025b      	lsls	r3, r3, #9
    322a:	4013      	ands	r3, r2
    322c:	1e5a      	subs	r2, r3, #1
    322e:	4193      	sbcs	r3, r2
    3230:	b2da      	uxtb	r2, r3
    3232:	687b      	ldr	r3, [r7, #4]
    3234:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    3236:	68bb      	ldr	r3, [r7, #8]
    3238:	099b      	lsrs	r3, r3, #6
    323a:	b2db      	uxtb	r3, r3
    323c:	223f      	movs	r2, #63	; 0x3f
    323e:	4013      	ands	r3, r2
    3240:	b2da      	uxtb	r2, r3
    3242:	687b      	ldr	r3, [r7, #4]
    3244:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    3246:	68bb      	ldr	r3, [r7, #8]
    3248:	b2db      	uxtb	r3, r3
    324a:	223f      	movs	r2, #63	; 0x3f
    324c:	4013      	ands	r3, r2
    324e:	b2da      	uxtb	r2, r3
    3250:	687b      	ldr	r3, [r7, #4]
    3252:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    3254:	46c0      	nop			; (mov r8, r8)
    3256:	46bd      	mov	sp, r7
    3258:	b004      	add	sp, #16
    325a:	bd80      	pop	{r7, pc}

0000325c <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    325c:	b580      	push	{r7, lr}
    325e:	b084      	sub	sp, #16
    3260:	af00      	add	r7, sp, #0
    3262:	6078      	str	r0, [r7, #4]
    3264:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3266:	687b      	ldr	r3, [r7, #4]
    3268:	681b      	ldr	r3, [r3, #0]
    326a:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    326c:	683b      	ldr	r3, [r7, #0]
    326e:	881a      	ldrh	r2, [r3, #0]
    3270:	230e      	movs	r3, #14
    3272:	18fb      	adds	r3, r7, r3
    3274:	2108      	movs	r1, #8
    3276:	430a      	orrs	r2, r1
    3278:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    327a:	683b      	ldr	r3, [r7, #0]
    327c:	791b      	ldrb	r3, [r3, #4]
    327e:	2201      	movs	r2, #1
    3280:	4053      	eors	r3, r2
    3282:	b2db      	uxtb	r3, r3
    3284:	2b00      	cmp	r3, #0
    3286:	d007      	beq.n	3298 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    3288:	230e      	movs	r3, #14
    328a:	18fb      	adds	r3, r7, r3
    328c:	220e      	movs	r2, #14
    328e:	18ba      	adds	r2, r7, r2
    3290:	8812      	ldrh	r2, [r2, #0]
    3292:	2140      	movs	r1, #64	; 0x40
    3294:	430a      	orrs	r2, r1
    3296:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    3298:	683b      	ldr	r3, [r7, #0]
    329a:	789b      	ldrb	r3, [r3, #2]
    329c:	2b00      	cmp	r3, #0
    329e:	d007      	beq.n	32b0 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    32a0:	230e      	movs	r3, #14
    32a2:	18fb      	adds	r3, r7, r3
    32a4:	220e      	movs	r2, #14
    32a6:	18ba      	adds	r2, r7, r2
    32a8:	8812      	ldrh	r2, [r2, #0]
    32aa:	2180      	movs	r1, #128	; 0x80
    32ac:	430a      	orrs	r2, r1
    32ae:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    32b0:	68bb      	ldr	r3, [r7, #8]
    32b2:	220e      	movs	r2, #14
    32b4:	18ba      	adds	r2, r7, r2
    32b6:	8812      	ldrh	r2, [r2, #0]
    32b8:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    32ba:	683b      	ldr	r3, [r7, #0]
    32bc:	78db      	ldrb	r3, [r3, #3]
    32be:	2b00      	cmp	r3, #0
    32c0:	d008      	beq.n	32d4 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    32c2:	68bb      	ldr	r3, [r7, #8]
    32c4:	885b      	ldrh	r3, [r3, #2]
    32c6:	b29b      	uxth	r3, r3
    32c8:	2280      	movs	r2, #128	; 0x80
    32ca:	01d2      	lsls	r2, r2, #7
    32cc:	4313      	orrs	r3, r2
    32ce:	b29a      	uxth	r2, r3
    32d0:	68bb      	ldr	r3, [r7, #8]
    32d2:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    32d4:	230d      	movs	r3, #13
    32d6:	18fb      	adds	r3, r7, r3
    32d8:	2200      	movs	r2, #0
    32da:	701a      	strb	r2, [r3, #0]
    32dc:	e017      	b.n	330e <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    32de:	230d      	movs	r3, #13
    32e0:	18fb      	adds	r3, r7, r3
    32e2:	781a      	ldrb	r2, [r3, #0]
    32e4:	0013      	movs	r3, r2
    32e6:	009b      	lsls	r3, r3, #2
    32e8:	189b      	adds	r3, r3, r2
    32ea:	005b      	lsls	r3, r3, #1
    32ec:	3308      	adds	r3, #8
    32ee:	683a      	ldr	r2, [r7, #0]
    32f0:	18d1      	adds	r1, r2, r3
    32f2:	230d      	movs	r3, #13
    32f4:	18fb      	adds	r3, r7, r3
    32f6:	781a      	ldrb	r2, [r3, #0]
    32f8:	687b      	ldr	r3, [r7, #4]
    32fa:	0018      	movs	r0, r3
    32fc:	4b08      	ldr	r3, [pc, #32]	; (3320 <_rtc_calendar_set_config+0xc4>)
    32fe:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    3300:	230d      	movs	r3, #13
    3302:	18fb      	adds	r3, r7, r3
    3304:	781a      	ldrb	r2, [r3, #0]
    3306:	230d      	movs	r3, #13
    3308:	18fb      	adds	r3, r7, r3
    330a:	3201      	adds	r2, #1
    330c:	701a      	strb	r2, [r3, #0]
    330e:	230d      	movs	r3, #13
    3310:	18fb      	adds	r3, r7, r3
    3312:	781b      	ldrb	r3, [r3, #0]
    3314:	2b00      	cmp	r3, #0
    3316:	d0e2      	beq.n	32de <_rtc_calendar_set_config+0x82>
	}
}
    3318:	46c0      	nop			; (mov r8, r8)
    331a:	46bd      	mov	sp, r7
    331c:	b004      	add	sp, #16
    331e:	bd80      	pop	{r7, pc}
    3320:	00003445 	.word	0x00003445

00003324 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    3324:	b580      	push	{r7, lr}
    3326:	b086      	sub	sp, #24
    3328:	af00      	add	r7, sp, #0
    332a:	60f8      	str	r0, [r7, #12]
    332c:	60b9      	str	r1, [r7, #8]
    332e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    3330:	68fb      	ldr	r3, [r7, #12]
    3332:	68ba      	ldr	r2, [r7, #8]
    3334:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    3336:	2120      	movs	r1, #32
    3338:	2000      	movs	r0, #0
    333a:	4b18      	ldr	r3, [pc, #96]	; (339c <rtc_calendar_init+0x78>)
    333c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    333e:	2314      	movs	r3, #20
    3340:	18fb      	adds	r3, r7, r3
    3342:	0018      	movs	r0, r3
    3344:	4b16      	ldr	r3, [pc, #88]	; (33a0 <rtc_calendar_init+0x7c>)
    3346:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    3348:	2314      	movs	r3, #20
    334a:	18fb      	adds	r3, r7, r3
    334c:	2202      	movs	r2, #2
    334e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3350:	2314      	movs	r3, #20
    3352:	18fb      	adds	r3, r7, r3
    3354:	0019      	movs	r1, r3
    3356:	2004      	movs	r0, #4
    3358:	4b12      	ldr	r3, [pc, #72]	; (33a4 <rtc_calendar_init+0x80>)
    335a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    335c:	2004      	movs	r0, #4
    335e:	4b12      	ldr	r3, [pc, #72]	; (33a8 <rtc_calendar_init+0x84>)
    3360:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    3362:	68fb      	ldr	r3, [r7, #12]
    3364:	0018      	movs	r0, r3
    3366:	4b11      	ldr	r3, [pc, #68]	; (33ac <rtc_calendar_init+0x88>)
    3368:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    336a:	687b      	ldr	r3, [r7, #4]
    336c:	791a      	ldrb	r2, [r3, #4]
    336e:	68fb      	ldr	r3, [r7, #12]
    3370:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    3372:	687b      	ldr	r3, [r7, #4]
    3374:	78da      	ldrb	r2, [r3, #3]
    3376:	68fb      	ldr	r3, [r7, #12]
    3378:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    337a:	687b      	ldr	r3, [r7, #4]
    337c:	88da      	ldrh	r2, [r3, #6]
    337e:	68fb      	ldr	r3, [r7, #12]
    3380:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    3382:	4b0b      	ldr	r3, [pc, #44]	; (33b0 <rtc_calendar_init+0x8c>)
    3384:	68fa      	ldr	r2, [r7, #12]
    3386:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    3388:	687a      	ldr	r2, [r7, #4]
    338a:	68fb      	ldr	r3, [r7, #12]
    338c:	0011      	movs	r1, r2
    338e:	0018      	movs	r0, r3
    3390:	4b08      	ldr	r3, [pc, #32]	; (33b4 <rtc_calendar_init+0x90>)
    3392:	4798      	blx	r3
}
    3394:	46c0      	nop			; (mov r8, r8)
    3396:	46bd      	mov	sp, r7
    3398:	b006      	add	sp, #24
    339a:	bd80      	pop	{r7, pc}
    339c:	00002ff1 	.word	0x00002ff1
    33a0:	00002fd9 	.word	0x00002fd9
    33a4:	00006549 	.word	0x00006549
    33a8:	0000658d 	.word	0x0000658d
    33ac:	000030f1 	.word	0x000030f1
    33b0:	200009d0 	.word	0x200009d0
    33b4:	0000325d 	.word	0x0000325d

000033b8 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    33b8:	b580      	push	{r7, lr}
    33ba:	b084      	sub	sp, #16
    33bc:	af00      	add	r7, sp, #0
    33be:	6078      	str	r0, [r7, #4]
    33c0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    33c2:	687b      	ldr	r3, [r7, #4]
    33c4:	681b      	ldr	r3, [r3, #0]
    33c6:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    33c8:	687b      	ldr	r3, [r7, #4]
    33ca:	795b      	ldrb	r3, [r3, #5]
    33cc:	2201      	movs	r2, #1
    33ce:	4053      	eors	r3, r2
    33d0:	b2db      	uxtb	r3, r3
    33d2:	2b00      	cmp	r3, #0
    33d4:	d00a      	beq.n	33ec <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    33d6:	68fb      	ldr	r3, [r7, #12]
    33d8:	4a16      	ldr	r2, [pc, #88]	; (3434 <rtc_calendar_get_time+0x7c>)
    33da:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    33dc:	46c0      	nop			; (mov r8, r8)
    33de:	687b      	ldr	r3, [r7, #4]
    33e0:	0018      	movs	r0, r3
    33e2:	4b15      	ldr	r3, [pc, #84]	; (3438 <rtc_calendar_get_time+0x80>)
    33e4:	4798      	blx	r3
    33e6:	1e03      	subs	r3, r0, #0
    33e8:	d1f9      	bne.n	33de <rtc_calendar_get_time+0x26>
    33ea:	e016      	b.n	341a <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    33ec:	68fb      	ldr	r3, [r7, #12]
    33ee:	885b      	ldrh	r3, [r3, #2]
    33f0:	b29b      	uxth	r3, r3
    33f2:	001a      	movs	r2, r3
    33f4:	2380      	movs	r3, #128	; 0x80
    33f6:	01db      	lsls	r3, r3, #7
    33f8:	4013      	ands	r3, r2
    33fa:	d10e      	bne.n	341a <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    33fc:	68fb      	ldr	r3, [r7, #12]
    33fe:	885b      	ldrh	r3, [r3, #2]
    3400:	b29b      	uxth	r3, r3
    3402:	4a0e      	ldr	r2, [pc, #56]	; (343c <rtc_calendar_get_time+0x84>)
    3404:	4313      	orrs	r3, r2
    3406:	b29a      	uxth	r2, r3
    3408:	68fb      	ldr	r3, [r7, #12]
    340a:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    340c:	46c0      	nop			; (mov r8, r8)
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	0018      	movs	r0, r3
    3412:	4b09      	ldr	r3, [pc, #36]	; (3438 <rtc_calendar_get_time+0x80>)
    3414:	4798      	blx	r3
    3416:	1e03      	subs	r3, r0, #0
    3418:	d1f9      	bne.n	340e <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    341a:	68fb      	ldr	r3, [r7, #12]
    341c:	691b      	ldr	r3, [r3, #16]
    341e:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    3420:	683a      	ldr	r2, [r7, #0]
    3422:	68b9      	ldr	r1, [r7, #8]
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	0018      	movs	r0, r3
    3428:	4b05      	ldr	r3, [pc, #20]	; (3440 <rtc_calendar_get_time+0x88>)
    342a:	4798      	blx	r3
}
    342c:	46c0      	nop			; (mov r8, r8)
    342e:	46bd      	mov	sp, r7
    3430:	b004      	add	sp, #16
    3432:	bd80      	pop	{r7, pc}
    3434:	ffff8000 	.word	0xffff8000
    3438:	0000304d 	.word	0x0000304d
    343c:	ffffc000 	.word	0xffffc000
    3440:	000031bd 	.word	0x000031bd

00003444 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    3444:	b580      	push	{r7, lr}
    3446:	b086      	sub	sp, #24
    3448:	af00      	add	r7, sp, #0
    344a:	60f8      	str	r0, [r7, #12]
    344c:	60b9      	str	r1, [r7, #8]
    344e:	1dfb      	adds	r3, r7, #7
    3450:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    3452:	68fb      	ldr	r3, [r7, #12]
    3454:	681b      	ldr	r3, [r3, #0]
    3456:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    3458:	1dfb      	adds	r3, r7, #7
    345a:	781b      	ldrb	r3, [r3, #0]
    345c:	2b01      	cmp	r3, #1
    345e:	d901      	bls.n	3464 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
    3460:	2317      	movs	r3, #23
    3462:	e021      	b.n	34a8 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    3464:	68ba      	ldr	r2, [r7, #8]
    3466:	68fb      	ldr	r3, [r7, #12]
    3468:	0011      	movs	r1, r2
    346a:	0018      	movs	r0, r3
    346c:	4b10      	ldr	r3, [pc, #64]	; (34b0 <rtc_calendar_set_alarm+0x6c>)
    346e:	4798      	blx	r3
    3470:	0003      	movs	r3, r0
    3472:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    3474:	46c0      	nop			; (mov r8, r8)
    3476:	68fb      	ldr	r3, [r7, #12]
    3478:	0018      	movs	r0, r3
    347a:	4b0e      	ldr	r3, [pc, #56]	; (34b4 <rtc_calendar_set_alarm+0x70>)
    347c:	4798      	blx	r3
    347e:	1e03      	subs	r3, r0, #0
    3480:	d1f9      	bne.n	3476 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    3482:	1dfb      	adds	r3, r7, #7
    3484:	781a      	ldrb	r2, [r3, #0]
    3486:	697b      	ldr	r3, [r7, #20]
    3488:	3203      	adds	r2, #3
    348a:	00d2      	lsls	r2, r2, #3
    348c:	6939      	ldr	r1, [r7, #16]
    348e:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    3490:	1dfb      	adds	r3, r7, #7
    3492:	781b      	ldrb	r3, [r3, #0]
    3494:	68ba      	ldr	r2, [r7, #8]
    3496:	7a11      	ldrb	r1, [r2, #8]
    3498:	697a      	ldr	r2, [r7, #20]
    349a:	3303      	adds	r3, #3
    349c:	00db      	lsls	r3, r3, #3
    349e:	18d3      	adds	r3, r2, r3
    34a0:	3304      	adds	r3, #4
    34a2:	1c0a      	adds	r2, r1, #0
    34a4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    34a6:	2300      	movs	r3, #0
}
    34a8:	0018      	movs	r0, r3
    34aa:	46bd      	mov	sp, r7
    34ac:	b006      	add	sp, #24
    34ae:	bd80      	pop	{r7, pc}
    34b0:	00003135 	.word	0x00003135
    34b4:	0000304d 	.word	0x0000304d

000034b8 <system_gclk_chan_get_config_defaults>:
{
    34b8:	b580      	push	{r7, lr}
    34ba:	b082      	sub	sp, #8
    34bc:	af00      	add	r7, sp, #0
    34be:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    34c0:	687b      	ldr	r3, [r7, #4]
    34c2:	2200      	movs	r2, #0
    34c4:	701a      	strb	r2, [r3, #0]
}
    34c6:	46c0      	nop			; (mov r8, r8)
    34c8:	46bd      	mov	sp, r7
    34ca:	b002      	add	sp, #8
    34cc:	bd80      	pop	{r7, pc}

000034ce <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    34ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    34d0:	b08d      	sub	sp, #52	; 0x34
    34d2:	af00      	add	r7, sp, #0
    34d4:	60b8      	str	r0, [r7, #8]
    34d6:	60f9      	str	r1, [r7, #12]
    34d8:	603a      	str	r2, [r7, #0]
    34da:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    34dc:	2300      	movs	r3, #0
    34de:	2400      	movs	r4, #0
    34e0:	623b      	str	r3, [r7, #32]
    34e2:	627c      	str	r4, [r7, #36]	; 0x24
    34e4:	2300      	movs	r3, #0
    34e6:	2400      	movs	r4, #0
    34e8:	61bb      	str	r3, [r7, #24]
    34ea:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
    34ec:	233f      	movs	r3, #63	; 0x3f
    34ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    34f0:	e053      	b.n	359a <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
    34f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    34f4:	3b20      	subs	r3, #32
    34f6:	2b00      	cmp	r3, #0
    34f8:	db04      	blt.n	3504 <long_division+0x36>
    34fa:	2201      	movs	r2, #1
    34fc:	409a      	lsls	r2, r3
    34fe:	0013      	movs	r3, r2
    3500:	617b      	str	r3, [r7, #20]
    3502:	e00b      	b.n	351c <long_division+0x4e>
    3504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3506:	2220      	movs	r2, #32
    3508:	1ad3      	subs	r3, r2, r3
    350a:	2201      	movs	r2, #1
    350c:	40da      	lsrs	r2, r3
    350e:	0013      	movs	r3, r2
    3510:	2100      	movs	r1, #0
    3512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    3514:	4091      	lsls	r1, r2
    3516:	000a      	movs	r2, r1
    3518:	4313      	orrs	r3, r2
    351a:	617b      	str	r3, [r7, #20]
    351c:	2201      	movs	r2, #1
    351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3520:	409a      	lsls	r2, r3
    3522:	0013      	movs	r3, r2
    3524:	613b      	str	r3, [r7, #16]

		r = r << 1;
    3526:	69bb      	ldr	r3, [r7, #24]
    3528:	69fc      	ldr	r4, [r7, #28]
    352a:	18db      	adds	r3, r3, r3
    352c:	4164      	adcs	r4, r4
    352e:	61bb      	str	r3, [r7, #24]
    3530:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
    3532:	68bb      	ldr	r3, [r7, #8]
    3534:	693a      	ldr	r2, [r7, #16]
    3536:	401a      	ands	r2, r3
    3538:	0015      	movs	r5, r2
    353a:	68fb      	ldr	r3, [r7, #12]
    353c:	697a      	ldr	r2, [r7, #20]
    353e:	401a      	ands	r2, r3
    3540:	0016      	movs	r6, r2
    3542:	002b      	movs	r3, r5
    3544:	4333      	orrs	r3, r6
    3546:	d007      	beq.n	3558 <long_division+0x8a>
			r |= 0x01;
    3548:	69bb      	ldr	r3, [r7, #24]
    354a:	2201      	movs	r2, #1
    354c:	4313      	orrs	r3, r2
    354e:	61bb      	str	r3, [r7, #24]
    3550:	69fb      	ldr	r3, [r7, #28]
    3552:	2200      	movs	r2, #0
    3554:	4313      	orrs	r3, r2
    3556:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
    3558:	687a      	ldr	r2, [r7, #4]
    355a:	69fb      	ldr	r3, [r7, #28]
    355c:	429a      	cmp	r2, r3
    355e:	d819      	bhi.n	3594 <long_division+0xc6>
    3560:	687a      	ldr	r2, [r7, #4]
    3562:	69fb      	ldr	r3, [r7, #28]
    3564:	429a      	cmp	r2, r3
    3566:	d103      	bne.n	3570 <long_division+0xa2>
    3568:	683a      	ldr	r2, [r7, #0]
    356a:	69bb      	ldr	r3, [r7, #24]
    356c:	429a      	cmp	r2, r3
    356e:	d811      	bhi.n	3594 <long_division+0xc6>
			r = r - d;
    3570:	69b9      	ldr	r1, [r7, #24]
    3572:	69fa      	ldr	r2, [r7, #28]
    3574:	683b      	ldr	r3, [r7, #0]
    3576:	687c      	ldr	r4, [r7, #4]
    3578:	1ac9      	subs	r1, r1, r3
    357a:	41a2      	sbcs	r2, r4
    357c:	000b      	movs	r3, r1
    357e:	0014      	movs	r4, r2
    3580:	61bb      	str	r3, [r7, #24]
    3582:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
    3584:	6a3a      	ldr	r2, [r7, #32]
    3586:	693b      	ldr	r3, [r7, #16]
    3588:	4313      	orrs	r3, r2
    358a:	623b      	str	r3, [r7, #32]
    358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    358e:	697b      	ldr	r3, [r7, #20]
    3590:	4313      	orrs	r3, r2
    3592:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
    3594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3596:	3b01      	subs	r3, #1
    3598:	62fb      	str	r3, [r7, #44]	; 0x2c
    359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    359c:	2b00      	cmp	r3, #0
    359e:	daa8      	bge.n	34f2 <long_division+0x24>
		}
	}

	return q;
    35a0:	6a3b      	ldr	r3, [r7, #32]
    35a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
    35a4:	0018      	movs	r0, r3
    35a6:	0021      	movs	r1, r4
    35a8:	46bd      	mov	sp, r7
    35aa:	b00d      	add	sp, #52	; 0x34
    35ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

000035ae <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    35ae:	b580      	push	{r7, lr}
    35b0:	b086      	sub	sp, #24
    35b2:	af00      	add	r7, sp, #0
    35b4:	60f8      	str	r0, [r7, #12]
    35b6:	60b9      	str	r1, [r7, #8]
    35b8:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    35ba:	2316      	movs	r3, #22
    35bc:	18fb      	adds	r3, r7, r3
    35be:	2200      	movs	r2, #0
    35c0:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    35c2:	68bb      	ldr	r3, [r7, #8]
    35c4:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    35c6:	68bb      	ldr	r3, [r7, #8]
    35c8:	085a      	lsrs	r2, r3, #1
    35ca:	68fb      	ldr	r3, [r7, #12]
    35cc:	429a      	cmp	r2, r3
    35ce:	d201      	bcs.n	35d4 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    35d0:	2340      	movs	r3, #64	; 0x40
    35d2:	e026      	b.n	3622 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    35d4:	68bb      	ldr	r3, [r7, #8]
    35d6:	085b      	lsrs	r3, r3, #1
    35d8:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    35da:	e00a      	b.n	35f2 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    35dc:	693a      	ldr	r2, [r7, #16]
    35de:	68fb      	ldr	r3, [r7, #12]
    35e0:	1ad3      	subs	r3, r2, r3
    35e2:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    35e4:	2316      	movs	r3, #22
    35e6:	18fb      	adds	r3, r7, r3
    35e8:	881a      	ldrh	r2, [r3, #0]
    35ea:	2316      	movs	r3, #22
    35ec:	18fb      	adds	r3, r7, r3
    35ee:	3201      	adds	r2, #1
    35f0:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    35f2:	693a      	ldr	r2, [r7, #16]
    35f4:	68fb      	ldr	r3, [r7, #12]
    35f6:	429a      	cmp	r2, r3
    35f8:	d2f0      	bcs.n	35dc <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    35fa:	2316      	movs	r3, #22
    35fc:	18fb      	adds	r3, r7, r3
    35fe:	2216      	movs	r2, #22
    3600:	18ba      	adds	r2, r7, r2
    3602:	8812      	ldrh	r2, [r2, #0]
    3604:	3a01      	subs	r2, #1
    3606:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    3608:	2316      	movs	r3, #22
    360a:	18fb      	adds	r3, r7, r3
    360c:	881b      	ldrh	r3, [r3, #0]
    360e:	2bff      	cmp	r3, #255	; 0xff
    3610:	d901      	bls.n	3616 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3612:	2340      	movs	r3, #64	; 0x40
    3614:	e005      	b.n	3622 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    3616:	687b      	ldr	r3, [r7, #4]
    3618:	2216      	movs	r2, #22
    361a:	18ba      	adds	r2, r7, r2
    361c:	8812      	ldrh	r2, [r2, #0]
    361e:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    3620:	2300      	movs	r3, #0
	}
}
    3622:	0018      	movs	r0, r3
    3624:	46bd      	mov	sp, r7
    3626:	b006      	add	sp, #24
    3628:	bd80      	pop	{r7, pc}
	...

0000362c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    362c:	b5f0      	push	{r4, r5, r6, r7, lr}
    362e:	b0a1      	sub	sp, #132	; 0x84
    3630:	af00      	add	r7, sp, #0
    3632:	64f8      	str	r0, [r7, #76]	; 0x4c
    3634:	64b9      	str	r1, [r7, #72]	; 0x48
    3636:	647a      	str	r2, [r7, #68]	; 0x44
    3638:	2243      	movs	r2, #67	; 0x43
    363a:	18ba      	adds	r2, r7, r2
    363c:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
    363e:	2300      	movs	r3, #0
    3640:	2400      	movs	r4, #0
    3642:	673b      	str	r3, [r7, #112]	; 0x70
    3644:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
    3646:	2300      	movs	r3, #0
    3648:	2400      	movs	r4, #0
    364a:	66bb      	str	r3, [r7, #104]	; 0x68
    364c:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
    364e:	2300      	movs	r3, #0
    3650:	2400      	movs	r4, #0
    3652:	67bb      	str	r3, [r7, #120]	; 0x78
    3654:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
    3656:	2300      	movs	r3, #0
    3658:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    365a:	2358      	movs	r3, #88	; 0x58
    365c:	2240      	movs	r2, #64	; 0x40
    365e:	4694      	mov	ip, r2
    3660:	44bc      	add	ip, r7
    3662:	4463      	add	r3, ip
    3664:	781a      	ldrb	r2, [r3, #0]
    3666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3668:	435a      	muls	r2, r3
    366a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    366c:	429a      	cmp	r2, r3
    366e:	d901      	bls.n	3674 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    3670:	2340      	movs	r3, #64	; 0x40
    3672:	e0b3      	b.n	37dc <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    3674:	2343      	movs	r3, #67	; 0x43
    3676:	18fb      	adds	r3, r7, r3
    3678:	781b      	ldrb	r3, [r3, #0]
    367a:	2b00      	cmp	r3, #0
    367c:	d13d      	bne.n	36fa <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    367e:	2358      	movs	r3, #88	; 0x58
    3680:	2240      	movs	r2, #64	; 0x40
    3682:	4694      	mov	ip, r2
    3684:	44bc      	add	ip, r7
    3686:	4463      	add	r3, ip
    3688:	781b      	ldrb	r3, [r3, #0]
    368a:	b2db      	uxtb	r3, r3
    368c:	613b      	str	r3, [r7, #16]
    368e:	2300      	movs	r3, #0
    3690:	617b      	str	r3, [r7, #20]
    3692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3694:	60bb      	str	r3, [r7, #8]
    3696:	2300      	movs	r3, #0
    3698:	60fb      	str	r3, [r7, #12]
    369a:	4c52      	ldr	r4, [pc, #328]	; (37e4 <_sercom_get_async_baud_val+0x1b8>)
    369c:	68ba      	ldr	r2, [r7, #8]
    369e:	68fb      	ldr	r3, [r7, #12]
    36a0:	6938      	ldr	r0, [r7, #16]
    36a2:	6979      	ldr	r1, [r7, #20]
    36a4:	47a0      	blx	r4
    36a6:	0003      	movs	r3, r0
    36a8:	000c      	movs	r4, r1
    36aa:	001b      	movs	r3, r3
    36ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    36ae:	2300      	movs	r3, #0
    36b0:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
    36b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    36b4:	603b      	str	r3, [r7, #0]
    36b6:	2300      	movs	r3, #0
    36b8:	607b      	str	r3, [r7, #4]
    36ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
    36bc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    36be:	683a      	ldr	r2, [r7, #0]
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	4c49      	ldr	r4, [pc, #292]	; (37e8 <_sercom_get_async_baud_val+0x1bc>)
    36c4:	47a0      	blx	r4
    36c6:	0003      	movs	r3, r0
    36c8:	000c      	movs	r4, r1
    36ca:	673b      	str	r3, [r7, #112]	; 0x70
    36cc:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
    36ce:	2100      	movs	r1, #0
    36d0:	2201      	movs	r2, #1
    36d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    36d4:	6f7c      	ldr	r4, [r7, #116]	; 0x74
    36d6:	1ac9      	subs	r1, r1, r3
    36d8:	41a2      	sbcs	r2, r4
    36da:	000b      	movs	r3, r1
    36dc:	0014      	movs	r4, r2
    36de:	66bb      	str	r3, [r7, #104]	; 0x68
    36e0:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
    36e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    36e4:	0c1b      	lsrs	r3, r3, #16
    36e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    36e8:	0416      	lsls	r6, r2, #16
    36ea:	431e      	orrs	r6, r3
    36ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    36ee:	041d      	lsls	r5, r3, #16
    36f0:	0033      	movs	r3, r6
    36f2:	67bb      	str	r3, [r7, #120]	; 0x78
    36f4:	2300      	movs	r3, #0
    36f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    36f8:	e06a      	b.n	37d0 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    36fa:	2343      	movs	r3, #67	; 0x43
    36fc:	18fb      	adds	r3, r7, r3
    36fe:	781b      	ldrb	r3, [r3, #0]
    3700:	2b01      	cmp	r3, #1
    3702:	d165      	bne.n	37d0 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
    3704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    3706:	633b      	str	r3, [r7, #48]	; 0x30
    3708:	2300      	movs	r3, #0
    370a:	637b      	str	r3, [r7, #52]	; 0x34
    370c:	2358      	movs	r3, #88	; 0x58
    370e:	2240      	movs	r2, #64	; 0x40
    3710:	4694      	mov	ip, r2
    3712:	44bc      	add	ip, r7
    3714:	4463      	add	r3, ip
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	b2db      	uxtb	r3, r3
    371a:	62bb      	str	r3, [r7, #40]	; 0x28
    371c:	2300      	movs	r3, #0
    371e:	62fb      	str	r3, [r7, #44]	; 0x2c
    3720:	4c30      	ldr	r4, [pc, #192]	; (37e4 <_sercom_get_async_baud_val+0x1b8>)
    3722:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3726:	6b38      	ldr	r0, [r7, #48]	; 0x30
    3728:	6b79      	ldr	r1, [r7, #52]	; 0x34
    372a:	47a0      	blx	r4
    372c:	0003      	movs	r3, r0
    372e:	000c      	movs	r4, r1
    3730:	65bb      	str	r3, [r7, #88]	; 0x58
    3732:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
    3734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3736:	623b      	str	r3, [r7, #32]
    3738:	2300      	movs	r3, #0
    373a:	627b      	str	r3, [r7, #36]	; 0x24
    373c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    373e:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3740:	001a      	movs	r2, r3
    3742:	0023      	movs	r3, r4
    3744:	6a38      	ldr	r0, [r7, #32]
    3746:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3748:	4c27      	ldr	r4, [pc, #156]	; (37e8 <_sercom_get_async_baud_val+0x1bc>)
    374a:	47a0      	blx	r4
    374c:	0003      	movs	r3, r0
    374e:	000c      	movs	r4, r1
    3750:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
    3752:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    3754:	2380      	movs	r3, #128	; 0x80
    3756:	019b      	lsls	r3, r3, #6
    3758:	429a      	cmp	r2, r3
    375a:	d901      	bls.n	3760 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    375c:	2340      	movs	r3, #64	; 0x40
    375e:	e03d      	b.n	37dc <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    3760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    3762:	61bb      	str	r3, [r7, #24]
    3764:	2300      	movs	r3, #0
    3766:	61fb      	str	r3, [r7, #28]
    3768:	69b9      	ldr	r1, [r7, #24]
    376a:	69fa      	ldr	r2, [r7, #28]
    376c:	000b      	movs	r3, r1
    376e:	0f5b      	lsrs	r3, r3, #29
    3770:	0010      	movs	r0, r2
    3772:	00c0      	lsls	r0, r0, #3
    3774:	63f8      	str	r0, [r7, #60]	; 0x3c
    3776:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    3778:	4318      	orrs	r0, r3
    377a:	63f8      	str	r0, [r7, #60]	; 0x3c
    377c:	000b      	movs	r3, r1
    377e:	00db      	lsls	r3, r3, #3
    3780:	63bb      	str	r3, [r7, #56]	; 0x38
    3782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    3784:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    3786:	001a      	movs	r2, r3
    3788:	0023      	movs	r3, r4
    378a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    378c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    378e:	4c16      	ldr	r4, [pc, #88]	; (37e8 <_sercom_get_async_baud_val+0x1bc>)
    3790:	47a0      	blx	r4
    3792:	0003      	movs	r3, r0
    3794:	000c      	movs	r4, r1
    3796:	65bb      	str	r3, [r7, #88]	; 0x58
    3798:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
    379a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    379c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
    379e:	b2d9      	uxtb	r1, r3
    37a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    37a2:	b2db      	uxtb	r3, r3
    37a4:	00db      	lsls	r3, r3, #3
    37a6:	b2da      	uxtb	r2, r3
    37a8:	2317      	movs	r3, #23
    37aa:	2040      	movs	r0, #64	; 0x40
    37ac:	4684      	mov	ip, r0
    37ae:	44bc      	add	ip, r7
    37b0:	4463      	add	r3, ip
    37b2:	1a8a      	subs	r2, r1, r2
    37b4:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
    37b6:	2317      	movs	r3, #23
    37b8:	2240      	movs	r2, #64	; 0x40
    37ba:	4694      	mov	ip, r2
    37bc:	44bc      	add	ip, r7
    37be:	4463      	add	r3, ip
    37c0:	781b      	ldrb	r3, [r3, #0]
    37c2:	035b      	lsls	r3, r3, #13
    37c4:	001a      	movs	r2, r3
    37c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    37c8:	4313      	orrs	r3, r2
    37ca:	67bb      	str	r3, [r7, #120]	; 0x78
    37cc:	2300      	movs	r3, #0
    37ce:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
    37d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    37d2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
    37d4:	b29a      	uxth	r2, r3
    37d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    37d8:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
    37da:	2300      	movs	r3, #0
}
    37dc:	0018      	movs	r0, r3
    37de:	46bd      	mov	sp, r7
    37e0:	b021      	add	sp, #132	; 0x84
    37e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    37e4:	0000a5f9 	.word	0x0000a5f9
    37e8:	000034cf 	.word	0x000034cf

000037ec <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    37ec:	b580      	push	{r7, lr}
    37ee:	b084      	sub	sp, #16
    37f0:	af00      	add	r7, sp, #0
    37f2:	0002      	movs	r2, r0
    37f4:	1dfb      	adds	r3, r7, #7
    37f6:	701a      	strb	r2, [r3, #0]
    37f8:	1dbb      	adds	r3, r7, #6
    37fa:	1c0a      	adds	r2, r1, #0
    37fc:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    37fe:	4b1a      	ldr	r3, [pc, #104]	; (3868 <sercom_set_gclk_generator+0x7c>)
    3800:	781b      	ldrb	r3, [r3, #0]
    3802:	2201      	movs	r2, #1
    3804:	4053      	eors	r3, r2
    3806:	b2db      	uxtb	r3, r3
    3808:	2b00      	cmp	r3, #0
    380a:	d103      	bne.n	3814 <sercom_set_gclk_generator+0x28>
    380c:	1dbb      	adds	r3, r7, #6
    380e:	781b      	ldrb	r3, [r3, #0]
    3810:	2b00      	cmp	r3, #0
    3812:	d01b      	beq.n	384c <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3814:	230c      	movs	r3, #12
    3816:	18fb      	adds	r3, r7, r3
    3818:	0018      	movs	r0, r3
    381a:	4b14      	ldr	r3, [pc, #80]	; (386c <sercom_set_gclk_generator+0x80>)
    381c:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    381e:	230c      	movs	r3, #12
    3820:	18fb      	adds	r3, r7, r3
    3822:	1dfa      	adds	r2, r7, #7
    3824:	7812      	ldrb	r2, [r2, #0]
    3826:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    3828:	230c      	movs	r3, #12
    382a:	18fb      	adds	r3, r7, r3
    382c:	0019      	movs	r1, r3
    382e:	2013      	movs	r0, #19
    3830:	4b0f      	ldr	r3, [pc, #60]	; (3870 <sercom_set_gclk_generator+0x84>)
    3832:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    3834:	2013      	movs	r0, #19
    3836:	4b0f      	ldr	r3, [pc, #60]	; (3874 <sercom_set_gclk_generator+0x88>)
    3838:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    383a:	4b0b      	ldr	r3, [pc, #44]	; (3868 <sercom_set_gclk_generator+0x7c>)
    383c:	1dfa      	adds	r2, r7, #7
    383e:	7812      	ldrb	r2, [r2, #0]
    3840:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    3842:	4b09      	ldr	r3, [pc, #36]	; (3868 <sercom_set_gclk_generator+0x7c>)
    3844:	2201      	movs	r2, #1
    3846:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    3848:	2300      	movs	r3, #0
    384a:	e008      	b.n	385e <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
    384c:	4b06      	ldr	r3, [pc, #24]	; (3868 <sercom_set_gclk_generator+0x7c>)
    384e:	785b      	ldrb	r3, [r3, #1]
    3850:	1dfa      	adds	r2, r7, #7
    3852:	7812      	ldrb	r2, [r2, #0]
    3854:	429a      	cmp	r2, r3
    3856:	d101      	bne.n	385c <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
    3858:	2300      	movs	r3, #0
    385a:	e000      	b.n	385e <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    385c:	231d      	movs	r3, #29
}
    385e:	0018      	movs	r0, r3
    3860:	46bd      	mov	sp, r7
    3862:	b004      	add	sp, #16
    3864:	bd80      	pop	{r7, pc}
    3866:	46c0      	nop			; (mov r8, r8)
    3868:	20000144 	.word	0x20000144
    386c:	000034b9 	.word	0x000034b9
    3870:	00006549 	.word	0x00006549
    3874:	0000658d 	.word	0x0000658d

00003878 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    3878:	b580      	push	{r7, lr}
    387a:	b082      	sub	sp, #8
    387c:	af00      	add	r7, sp, #0
    387e:	6078      	str	r0, [r7, #4]
    3880:	000a      	movs	r2, r1
    3882:	1cfb      	adds	r3, r7, #3
    3884:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    3886:	687b      	ldr	r3, [r7, #4]
    3888:	4a4d      	ldr	r2, [pc, #308]	; (39c0 <_sercom_get_default_pad+0x148>)
    388a:	4293      	cmp	r3, r2
    388c:	d03f      	beq.n	390e <_sercom_get_default_pad+0x96>
    388e:	4a4c      	ldr	r2, [pc, #304]	; (39c0 <_sercom_get_default_pad+0x148>)
    3890:	4293      	cmp	r3, r2
    3892:	d806      	bhi.n	38a2 <_sercom_get_default_pad+0x2a>
    3894:	4a4b      	ldr	r2, [pc, #300]	; (39c4 <_sercom_get_default_pad+0x14c>)
    3896:	4293      	cmp	r3, r2
    3898:	d00f      	beq.n	38ba <_sercom_get_default_pad+0x42>
    389a:	4a4b      	ldr	r2, [pc, #300]	; (39c8 <_sercom_get_default_pad+0x150>)
    389c:	4293      	cmp	r3, r2
    389e:	d021      	beq.n	38e4 <_sercom_get_default_pad+0x6c>
    38a0:	e089      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    38a2:	4a4a      	ldr	r2, [pc, #296]	; (39cc <_sercom_get_default_pad+0x154>)
    38a4:	4293      	cmp	r3, r2
    38a6:	d100      	bne.n	38aa <_sercom_get_default_pad+0x32>
    38a8:	e05b      	b.n	3962 <_sercom_get_default_pad+0xea>
    38aa:	4a49      	ldr	r2, [pc, #292]	; (39d0 <_sercom_get_default_pad+0x158>)
    38ac:	4293      	cmp	r3, r2
    38ae:	d100      	bne.n	38b2 <_sercom_get_default_pad+0x3a>
    38b0:	e06c      	b.n	398c <_sercom_get_default_pad+0x114>
    38b2:	4a48      	ldr	r2, [pc, #288]	; (39d4 <_sercom_get_default_pad+0x15c>)
    38b4:	4293      	cmp	r3, r2
    38b6:	d03f      	beq.n	3938 <_sercom_get_default_pad+0xc0>
    38b8:	e07d      	b.n	39b6 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    38ba:	1cfb      	adds	r3, r7, #3
    38bc:	781b      	ldrb	r3, [r3, #0]
    38be:	2b01      	cmp	r3, #1
    38c0:	d00a      	beq.n	38d8 <_sercom_get_default_pad+0x60>
    38c2:	dc02      	bgt.n	38ca <_sercom_get_default_pad+0x52>
    38c4:	2b00      	cmp	r3, #0
    38c6:	d005      	beq.n	38d4 <_sercom_get_default_pad+0x5c>
    38c8:	e075      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    38ca:	2b02      	cmp	r3, #2
    38cc:	d006      	beq.n	38dc <_sercom_get_default_pad+0x64>
    38ce:	2b03      	cmp	r3, #3
    38d0:	d006      	beq.n	38e0 <_sercom_get_default_pad+0x68>
    38d2:	e070      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    38d4:	4b40      	ldr	r3, [pc, #256]	; (39d8 <_sercom_get_default_pad+0x160>)
    38d6:	e06f      	b.n	39b8 <_sercom_get_default_pad+0x140>
    38d8:	4b40      	ldr	r3, [pc, #256]	; (39dc <_sercom_get_default_pad+0x164>)
    38da:	e06d      	b.n	39b8 <_sercom_get_default_pad+0x140>
    38dc:	4b40      	ldr	r3, [pc, #256]	; (39e0 <_sercom_get_default_pad+0x168>)
    38de:	e06b      	b.n	39b8 <_sercom_get_default_pad+0x140>
    38e0:	4b40      	ldr	r3, [pc, #256]	; (39e4 <_sercom_get_default_pad+0x16c>)
    38e2:	e069      	b.n	39b8 <_sercom_get_default_pad+0x140>
    38e4:	1cfb      	adds	r3, r7, #3
    38e6:	781b      	ldrb	r3, [r3, #0]
    38e8:	2b01      	cmp	r3, #1
    38ea:	d00a      	beq.n	3902 <_sercom_get_default_pad+0x8a>
    38ec:	dc02      	bgt.n	38f4 <_sercom_get_default_pad+0x7c>
    38ee:	2b00      	cmp	r3, #0
    38f0:	d005      	beq.n	38fe <_sercom_get_default_pad+0x86>
    38f2:	e060      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    38f4:	2b02      	cmp	r3, #2
    38f6:	d006      	beq.n	3906 <_sercom_get_default_pad+0x8e>
    38f8:	2b03      	cmp	r3, #3
    38fa:	d006      	beq.n	390a <_sercom_get_default_pad+0x92>
    38fc:	e05b      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    38fe:	2303      	movs	r3, #3
    3900:	e05a      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3902:	4b39      	ldr	r3, [pc, #228]	; (39e8 <_sercom_get_default_pad+0x170>)
    3904:	e058      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3906:	4b39      	ldr	r3, [pc, #228]	; (39ec <_sercom_get_default_pad+0x174>)
    3908:	e056      	b.n	39b8 <_sercom_get_default_pad+0x140>
    390a:	4b39      	ldr	r3, [pc, #228]	; (39f0 <_sercom_get_default_pad+0x178>)
    390c:	e054      	b.n	39b8 <_sercom_get_default_pad+0x140>
    390e:	1cfb      	adds	r3, r7, #3
    3910:	781b      	ldrb	r3, [r3, #0]
    3912:	2b01      	cmp	r3, #1
    3914:	d00a      	beq.n	392c <_sercom_get_default_pad+0xb4>
    3916:	dc02      	bgt.n	391e <_sercom_get_default_pad+0xa6>
    3918:	2b00      	cmp	r3, #0
    391a:	d005      	beq.n	3928 <_sercom_get_default_pad+0xb0>
    391c:	e04b      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    391e:	2b02      	cmp	r3, #2
    3920:	d006      	beq.n	3930 <_sercom_get_default_pad+0xb8>
    3922:	2b03      	cmp	r3, #3
    3924:	d006      	beq.n	3934 <_sercom_get_default_pad+0xbc>
    3926:	e046      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    3928:	4b32      	ldr	r3, [pc, #200]	; (39f4 <_sercom_get_default_pad+0x17c>)
    392a:	e045      	b.n	39b8 <_sercom_get_default_pad+0x140>
    392c:	4b32      	ldr	r3, [pc, #200]	; (39f8 <_sercom_get_default_pad+0x180>)
    392e:	e043      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3930:	4b32      	ldr	r3, [pc, #200]	; (39fc <_sercom_get_default_pad+0x184>)
    3932:	e041      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3934:	4b32      	ldr	r3, [pc, #200]	; (3a00 <_sercom_get_default_pad+0x188>)
    3936:	e03f      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3938:	1cfb      	adds	r3, r7, #3
    393a:	781b      	ldrb	r3, [r3, #0]
    393c:	2b01      	cmp	r3, #1
    393e:	d00a      	beq.n	3956 <_sercom_get_default_pad+0xde>
    3940:	dc02      	bgt.n	3948 <_sercom_get_default_pad+0xd0>
    3942:	2b00      	cmp	r3, #0
    3944:	d005      	beq.n	3952 <_sercom_get_default_pad+0xda>
    3946:	e036      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    3948:	2b02      	cmp	r3, #2
    394a:	d006      	beq.n	395a <_sercom_get_default_pad+0xe2>
    394c:	2b03      	cmp	r3, #3
    394e:	d006      	beq.n	395e <_sercom_get_default_pad+0xe6>
    3950:	e031      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    3952:	4b2c      	ldr	r3, [pc, #176]	; (3a04 <_sercom_get_default_pad+0x18c>)
    3954:	e030      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3956:	4b2c      	ldr	r3, [pc, #176]	; (3a08 <_sercom_get_default_pad+0x190>)
    3958:	e02e      	b.n	39b8 <_sercom_get_default_pad+0x140>
    395a:	4b2c      	ldr	r3, [pc, #176]	; (3a0c <_sercom_get_default_pad+0x194>)
    395c:	e02c      	b.n	39b8 <_sercom_get_default_pad+0x140>
    395e:	4b2c      	ldr	r3, [pc, #176]	; (3a10 <_sercom_get_default_pad+0x198>)
    3960:	e02a      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3962:	1cfb      	adds	r3, r7, #3
    3964:	781b      	ldrb	r3, [r3, #0]
    3966:	2b01      	cmp	r3, #1
    3968:	d00a      	beq.n	3980 <_sercom_get_default_pad+0x108>
    396a:	dc02      	bgt.n	3972 <_sercom_get_default_pad+0xfa>
    396c:	2b00      	cmp	r3, #0
    396e:	d005      	beq.n	397c <_sercom_get_default_pad+0x104>
    3970:	e021      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    3972:	2b02      	cmp	r3, #2
    3974:	d006      	beq.n	3984 <_sercom_get_default_pad+0x10c>
    3976:	2b03      	cmp	r3, #3
    3978:	d006      	beq.n	3988 <_sercom_get_default_pad+0x110>
    397a:	e01c      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    397c:	4b25      	ldr	r3, [pc, #148]	; (3a14 <_sercom_get_default_pad+0x19c>)
    397e:	e01b      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3980:	4b25      	ldr	r3, [pc, #148]	; (3a18 <_sercom_get_default_pad+0x1a0>)
    3982:	e019      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3984:	4b25      	ldr	r3, [pc, #148]	; (3a1c <_sercom_get_default_pad+0x1a4>)
    3986:	e017      	b.n	39b8 <_sercom_get_default_pad+0x140>
    3988:	4b25      	ldr	r3, [pc, #148]	; (3a20 <_sercom_get_default_pad+0x1a8>)
    398a:	e015      	b.n	39b8 <_sercom_get_default_pad+0x140>
    398c:	1cfb      	adds	r3, r7, #3
    398e:	781b      	ldrb	r3, [r3, #0]
    3990:	2b01      	cmp	r3, #1
    3992:	d00a      	beq.n	39aa <_sercom_get_default_pad+0x132>
    3994:	dc02      	bgt.n	399c <_sercom_get_default_pad+0x124>
    3996:	2b00      	cmp	r3, #0
    3998:	d005      	beq.n	39a6 <_sercom_get_default_pad+0x12e>
    399a:	e00c      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    399c:	2b02      	cmp	r3, #2
    399e:	d006      	beq.n	39ae <_sercom_get_default_pad+0x136>
    39a0:	2b03      	cmp	r3, #3
    39a2:	d006      	beq.n	39b2 <_sercom_get_default_pad+0x13a>
    39a4:	e007      	b.n	39b6 <_sercom_get_default_pad+0x13e>
    39a6:	4b1f      	ldr	r3, [pc, #124]	; (3a24 <_sercom_get_default_pad+0x1ac>)
    39a8:	e006      	b.n	39b8 <_sercom_get_default_pad+0x140>
    39aa:	4b1f      	ldr	r3, [pc, #124]	; (3a28 <_sercom_get_default_pad+0x1b0>)
    39ac:	e004      	b.n	39b8 <_sercom_get_default_pad+0x140>
    39ae:	4b1f      	ldr	r3, [pc, #124]	; (3a2c <_sercom_get_default_pad+0x1b4>)
    39b0:	e002      	b.n	39b8 <_sercom_get_default_pad+0x140>
    39b2:	4b1f      	ldr	r3, [pc, #124]	; (3a30 <_sercom_get_default_pad+0x1b8>)
    39b4:	e000      	b.n	39b8 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
    39b6:	2300      	movs	r3, #0
}
    39b8:	0018      	movs	r0, r3
    39ba:	46bd      	mov	sp, r7
    39bc:	b002      	add	sp, #8
    39be:	bd80      	pop	{r7, pc}
    39c0:	42001000 	.word	0x42001000
    39c4:	42000800 	.word	0x42000800
    39c8:	42000c00 	.word	0x42000c00
    39cc:	42001800 	.word	0x42001800
    39d0:	42001c00 	.word	0x42001c00
    39d4:	42001400 	.word	0x42001400
    39d8:	00040003 	.word	0x00040003
    39dc:	00050003 	.word	0x00050003
    39e0:	00060003 	.word	0x00060003
    39e4:	00070003 	.word	0x00070003
    39e8:	00010003 	.word	0x00010003
    39ec:	001e0003 	.word	0x001e0003
    39f0:	001f0003 	.word	0x001f0003
    39f4:	00080003 	.word	0x00080003
    39f8:	00090003 	.word	0x00090003
    39fc:	000a0003 	.word	0x000a0003
    3a00:	000b0003 	.word	0x000b0003
    3a04:	00100003 	.word	0x00100003
    3a08:	00110003 	.word	0x00110003
    3a0c:	00120003 	.word	0x00120003
    3a10:	00130003 	.word	0x00130003
    3a14:	000c0003 	.word	0x000c0003
    3a18:	000d0003 	.word	0x000d0003
    3a1c:	000e0003 	.word	0x000e0003
    3a20:	000f0003 	.word	0x000f0003
    3a24:	00160003 	.word	0x00160003
    3a28:	00170003 	.word	0x00170003
    3a2c:	00180003 	.word	0x00180003
    3a30:	00190003 	.word	0x00190003

00003a34 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    3a34:	b590      	push	{r4, r7, lr}
    3a36:	b08b      	sub	sp, #44	; 0x2c
    3a38:	af00      	add	r7, sp, #0
    3a3a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    3a3c:	230c      	movs	r3, #12
    3a3e:	18fb      	adds	r3, r7, r3
    3a40:	4a0f      	ldr	r2, [pc, #60]	; (3a80 <_sercom_get_sercom_inst_index+0x4c>)
    3a42:	ca13      	ldmia	r2!, {r0, r1, r4}
    3a44:	c313      	stmia	r3!, {r0, r1, r4}
    3a46:	ca13      	ldmia	r2!, {r0, r1, r4}
    3a48:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a4a:	2300      	movs	r3, #0
    3a4c:	627b      	str	r3, [r7, #36]	; 0x24
    3a4e:	e00e      	b.n	3a6e <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    3a50:	230c      	movs	r3, #12
    3a52:	18fb      	adds	r3, r7, r3
    3a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a56:	0092      	lsls	r2, r2, #2
    3a58:	58d3      	ldr	r3, [r2, r3]
    3a5a:	001a      	movs	r2, r3
    3a5c:	687b      	ldr	r3, [r7, #4]
    3a5e:	429a      	cmp	r2, r3
    3a60:	d102      	bne.n	3a68 <_sercom_get_sercom_inst_index+0x34>
			return i;
    3a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a64:	b2db      	uxtb	r3, r3
    3a66:	e006      	b.n	3a76 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a6a:	3301      	adds	r3, #1
    3a6c:	627b      	str	r3, [r7, #36]	; 0x24
    3a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3a70:	2b05      	cmp	r3, #5
    3a72:	d9ed      	bls.n	3a50 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    3a74:	2300      	movs	r3, #0
}
    3a76:	0018      	movs	r0, r3
    3a78:	46bd      	mov	sp, r7
    3a7a:	b00b      	add	sp, #44	; 0x2c
    3a7c:	bd90      	pop	{r4, r7, pc}
    3a7e:	46c0      	nop			; (mov r8, r8)
    3a80:	0000af58 	.word	0x0000af58

00003a84 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    3a84:	b580      	push	{r7, lr}
    3a86:	b082      	sub	sp, #8
    3a88:	af00      	add	r7, sp, #0
    3a8a:	0002      	movs	r2, r0
    3a8c:	1dfb      	adds	r3, r7, #7
    3a8e:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    3a90:	46c0      	nop			; (mov r8, r8)
    3a92:	46bd      	mov	sp, r7
    3a94:	b002      	add	sp, #8
    3a96:	bd80      	pop	{r7, pc}

00003a98 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    3a98:	b580      	push	{r7, lr}
    3a9a:	b084      	sub	sp, #16
    3a9c:	af00      	add	r7, sp, #0
    3a9e:	0002      	movs	r2, r0
    3aa0:	6039      	str	r1, [r7, #0]
    3aa2:	1dfb      	adds	r3, r7, #7
    3aa4:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    3aa6:	4b13      	ldr	r3, [pc, #76]	; (3af4 <_sercom_set_handler+0x5c>)
    3aa8:	781b      	ldrb	r3, [r3, #0]
    3aaa:	2201      	movs	r2, #1
    3aac:	4053      	eors	r3, r2
    3aae:	b2db      	uxtb	r3, r3
    3ab0:	2b00      	cmp	r3, #0
    3ab2:	d015      	beq.n	3ae0 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3ab4:	2300      	movs	r3, #0
    3ab6:	60fb      	str	r3, [r7, #12]
    3ab8:	e00c      	b.n	3ad4 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    3aba:	4b0f      	ldr	r3, [pc, #60]	; (3af8 <_sercom_set_handler+0x60>)
    3abc:	68fa      	ldr	r2, [r7, #12]
    3abe:	0092      	lsls	r2, r2, #2
    3ac0:	490e      	ldr	r1, [pc, #56]	; (3afc <_sercom_set_handler+0x64>)
    3ac2:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
    3ac4:	4b0e      	ldr	r3, [pc, #56]	; (3b00 <_sercom_set_handler+0x68>)
    3ac6:	68fa      	ldr	r2, [r7, #12]
    3ac8:	0092      	lsls	r2, r2, #2
    3aca:	2100      	movs	r1, #0
    3acc:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    3ace:	68fb      	ldr	r3, [r7, #12]
    3ad0:	3301      	adds	r3, #1
    3ad2:	60fb      	str	r3, [r7, #12]
    3ad4:	68fb      	ldr	r3, [r7, #12]
    3ad6:	2b05      	cmp	r3, #5
    3ad8:	d9ef      	bls.n	3aba <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
    3ada:	4b06      	ldr	r3, [pc, #24]	; (3af4 <_sercom_set_handler+0x5c>)
    3adc:	2201      	movs	r2, #1
    3ade:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    3ae0:	1dfb      	adds	r3, r7, #7
    3ae2:	781a      	ldrb	r2, [r3, #0]
    3ae4:	4b04      	ldr	r3, [pc, #16]	; (3af8 <_sercom_set_handler+0x60>)
    3ae6:	0092      	lsls	r2, r2, #2
    3ae8:	6839      	ldr	r1, [r7, #0]
    3aea:	50d1      	str	r1, [r2, r3]
}
    3aec:	46c0      	nop			; (mov r8, r8)
    3aee:	46bd      	mov	sp, r7
    3af0:	b004      	add	sp, #16
    3af2:	bd80      	pop	{r7, pc}
    3af4:	20000146 	.word	0x20000146
    3af8:	20000148 	.word	0x20000148
    3afc:	00003a85 	.word	0x00003a85
    3b00:	200009d4 	.word	0x200009d4

00003b04 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    3b04:	b590      	push	{r4, r7, lr}
    3b06:	b085      	sub	sp, #20
    3b08:	af00      	add	r7, sp, #0
    3b0a:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    3b0c:	2308      	movs	r3, #8
    3b0e:	18fb      	adds	r3, r7, r3
    3b10:	4a0b      	ldr	r2, [pc, #44]	; (3b40 <_sercom_get_interrupt_vector+0x3c>)
    3b12:	6811      	ldr	r1, [r2, #0]
    3b14:	6019      	str	r1, [r3, #0]
    3b16:	8892      	ldrh	r2, [r2, #4]
    3b18:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    3b1a:	230f      	movs	r3, #15
    3b1c:	18fc      	adds	r4, r7, r3
    3b1e:	687b      	ldr	r3, [r7, #4]
    3b20:	0018      	movs	r0, r3
    3b22:	4b08      	ldr	r3, [pc, #32]	; (3b44 <_sercom_get_interrupt_vector+0x40>)
    3b24:	4798      	blx	r3
    3b26:	0003      	movs	r3, r0
    3b28:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    3b2a:	230f      	movs	r3, #15
    3b2c:	18fb      	adds	r3, r7, r3
    3b2e:	781b      	ldrb	r3, [r3, #0]
    3b30:	2208      	movs	r2, #8
    3b32:	18ba      	adds	r2, r7, r2
    3b34:	5cd3      	ldrb	r3, [r2, r3]
    3b36:	b25b      	sxtb	r3, r3
}
    3b38:	0018      	movs	r0, r3
    3b3a:	46bd      	mov	sp, r7
    3b3c:	b005      	add	sp, #20
    3b3e:	bd90      	pop	{r4, r7, pc}
    3b40:	0000af70 	.word	0x0000af70
    3b44:	00003a35 	.word	0x00003a35

00003b48 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    3b48:	b580      	push	{r7, lr}
    3b4a:	af00      	add	r7, sp, #0
    3b4c:	4b03      	ldr	r3, [pc, #12]	; (3b5c <SERCOM0_Handler+0x14>)
    3b4e:	681b      	ldr	r3, [r3, #0]
    3b50:	2000      	movs	r0, #0
    3b52:	4798      	blx	r3
    3b54:	46c0      	nop			; (mov r8, r8)
    3b56:	46bd      	mov	sp, r7
    3b58:	bd80      	pop	{r7, pc}
    3b5a:	46c0      	nop			; (mov r8, r8)
    3b5c:	20000148 	.word	0x20000148

00003b60 <SERCOM1_Handler>:
    3b60:	b580      	push	{r7, lr}
    3b62:	af00      	add	r7, sp, #0
    3b64:	4b03      	ldr	r3, [pc, #12]	; (3b74 <SERCOM1_Handler+0x14>)
    3b66:	685b      	ldr	r3, [r3, #4]
    3b68:	2001      	movs	r0, #1
    3b6a:	4798      	blx	r3
    3b6c:	46c0      	nop			; (mov r8, r8)
    3b6e:	46bd      	mov	sp, r7
    3b70:	bd80      	pop	{r7, pc}
    3b72:	46c0      	nop			; (mov r8, r8)
    3b74:	20000148 	.word	0x20000148

00003b78 <SERCOM2_Handler>:
    3b78:	b580      	push	{r7, lr}
    3b7a:	af00      	add	r7, sp, #0
    3b7c:	4b03      	ldr	r3, [pc, #12]	; (3b8c <SERCOM2_Handler+0x14>)
    3b7e:	689b      	ldr	r3, [r3, #8]
    3b80:	2002      	movs	r0, #2
    3b82:	4798      	blx	r3
    3b84:	46c0      	nop			; (mov r8, r8)
    3b86:	46bd      	mov	sp, r7
    3b88:	bd80      	pop	{r7, pc}
    3b8a:	46c0      	nop			; (mov r8, r8)
    3b8c:	20000148 	.word	0x20000148

00003b90 <SERCOM3_Handler>:
    3b90:	b580      	push	{r7, lr}
    3b92:	af00      	add	r7, sp, #0
    3b94:	4b03      	ldr	r3, [pc, #12]	; (3ba4 <SERCOM3_Handler+0x14>)
    3b96:	68db      	ldr	r3, [r3, #12]
    3b98:	2003      	movs	r0, #3
    3b9a:	4798      	blx	r3
    3b9c:	46c0      	nop			; (mov r8, r8)
    3b9e:	46bd      	mov	sp, r7
    3ba0:	bd80      	pop	{r7, pc}
    3ba2:	46c0      	nop			; (mov r8, r8)
    3ba4:	20000148 	.word	0x20000148

00003ba8 <SERCOM4_Handler>:
    3ba8:	b580      	push	{r7, lr}
    3baa:	af00      	add	r7, sp, #0
    3bac:	4b03      	ldr	r3, [pc, #12]	; (3bbc <SERCOM4_Handler+0x14>)
    3bae:	691b      	ldr	r3, [r3, #16]
    3bb0:	2004      	movs	r0, #4
    3bb2:	4798      	blx	r3
    3bb4:	46c0      	nop			; (mov r8, r8)
    3bb6:	46bd      	mov	sp, r7
    3bb8:	bd80      	pop	{r7, pc}
    3bba:	46c0      	nop			; (mov r8, r8)
    3bbc:	20000148 	.word	0x20000148

00003bc0 <SERCOM5_Handler>:
    3bc0:	b580      	push	{r7, lr}
    3bc2:	af00      	add	r7, sp, #0
    3bc4:	4b03      	ldr	r3, [pc, #12]	; (3bd4 <SERCOM5_Handler+0x14>)
    3bc6:	695b      	ldr	r3, [r3, #20]
    3bc8:	2005      	movs	r0, #5
    3bca:	4798      	blx	r3
    3bcc:	46c0      	nop			; (mov r8, r8)
    3bce:	46bd      	mov	sp, r7
    3bd0:	bd80      	pop	{r7, pc}
    3bd2:	46c0      	nop			; (mov r8, r8)
    3bd4:	20000148 	.word	0x20000148

00003bd8 <system_pinmux_get_config_defaults>:
{
    3bd8:	b580      	push	{r7, lr}
    3bda:	b082      	sub	sp, #8
    3bdc:	af00      	add	r7, sp, #0
    3bde:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3be0:	687b      	ldr	r3, [r7, #4]
    3be2:	2280      	movs	r2, #128	; 0x80
    3be4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    3be6:	687b      	ldr	r3, [r7, #4]
    3be8:	2200      	movs	r2, #0
    3bea:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3bec:	687b      	ldr	r3, [r7, #4]
    3bee:	2201      	movs	r2, #1
    3bf0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    3bf2:	687b      	ldr	r3, [r7, #4]
    3bf4:	2200      	movs	r2, #0
    3bf6:	70da      	strb	r2, [r3, #3]
}
    3bf8:	46c0      	nop			; (mov r8, r8)
    3bfa:	46bd      	mov	sp, r7
    3bfc:	b002      	add	sp, #8
    3bfe:	bd80      	pop	{r7, pc}

00003c00 <system_pinmux_get_group_from_gpio_pin>:
{
    3c00:	b580      	push	{r7, lr}
    3c02:	b084      	sub	sp, #16
    3c04:	af00      	add	r7, sp, #0
    3c06:	0002      	movs	r2, r0
    3c08:	1dfb      	adds	r3, r7, #7
    3c0a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3c0c:	230f      	movs	r3, #15
    3c0e:	18fb      	adds	r3, r7, r3
    3c10:	1dfa      	adds	r2, r7, #7
    3c12:	7812      	ldrb	r2, [r2, #0]
    3c14:	09d2      	lsrs	r2, r2, #7
    3c16:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3c18:	230e      	movs	r3, #14
    3c1a:	18fb      	adds	r3, r7, r3
    3c1c:	1dfa      	adds	r2, r7, #7
    3c1e:	7812      	ldrb	r2, [r2, #0]
    3c20:	0952      	lsrs	r2, r2, #5
    3c22:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3c24:	4b0d      	ldr	r3, [pc, #52]	; (3c5c <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3c26:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3c28:	230f      	movs	r3, #15
    3c2a:	18fb      	adds	r3, r7, r3
    3c2c:	781b      	ldrb	r3, [r3, #0]
    3c2e:	2b00      	cmp	r3, #0
    3c30:	d10f      	bne.n	3c52 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3c32:	230f      	movs	r3, #15
    3c34:	18fb      	adds	r3, r7, r3
    3c36:	781b      	ldrb	r3, [r3, #0]
    3c38:	009b      	lsls	r3, r3, #2
    3c3a:	2210      	movs	r2, #16
    3c3c:	4694      	mov	ip, r2
    3c3e:	44bc      	add	ip, r7
    3c40:	4463      	add	r3, ip
    3c42:	3b08      	subs	r3, #8
    3c44:	681a      	ldr	r2, [r3, #0]
    3c46:	230e      	movs	r3, #14
    3c48:	18fb      	adds	r3, r7, r3
    3c4a:	781b      	ldrb	r3, [r3, #0]
    3c4c:	01db      	lsls	r3, r3, #7
    3c4e:	18d3      	adds	r3, r2, r3
    3c50:	e000      	b.n	3c54 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3c52:	2300      	movs	r3, #0
}
    3c54:	0018      	movs	r0, r3
    3c56:	46bd      	mov	sp, r7
    3c58:	b004      	add	sp, #16
    3c5a:	bd80      	pop	{r7, pc}
    3c5c:	41004400 	.word	0x41004400

00003c60 <port_get_group_from_gpio_pin>:
{
    3c60:	b580      	push	{r7, lr}
    3c62:	b082      	sub	sp, #8
    3c64:	af00      	add	r7, sp, #0
    3c66:	0002      	movs	r2, r0
    3c68:	1dfb      	adds	r3, r7, #7
    3c6a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3c6c:	1dfb      	adds	r3, r7, #7
    3c6e:	781b      	ldrb	r3, [r3, #0]
    3c70:	0018      	movs	r0, r3
    3c72:	4b03      	ldr	r3, [pc, #12]	; (3c80 <port_get_group_from_gpio_pin+0x20>)
    3c74:	4798      	blx	r3
    3c76:	0003      	movs	r3, r0
}
    3c78:	0018      	movs	r0, r3
    3c7a:	46bd      	mov	sp, r7
    3c7c:	b002      	add	sp, #8
    3c7e:	bd80      	pop	{r7, pc}
    3c80:	00003c01 	.word	0x00003c01

00003c84 <port_pin_set_output_level>:
{
    3c84:	b580      	push	{r7, lr}
    3c86:	b084      	sub	sp, #16
    3c88:	af00      	add	r7, sp, #0
    3c8a:	0002      	movs	r2, r0
    3c8c:	1dfb      	adds	r3, r7, #7
    3c8e:	701a      	strb	r2, [r3, #0]
    3c90:	1dbb      	adds	r3, r7, #6
    3c92:	1c0a      	adds	r2, r1, #0
    3c94:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3c96:	1dfb      	adds	r3, r7, #7
    3c98:	781b      	ldrb	r3, [r3, #0]
    3c9a:	0018      	movs	r0, r3
    3c9c:	4b0d      	ldr	r3, [pc, #52]	; (3cd4 <port_pin_set_output_level+0x50>)
    3c9e:	4798      	blx	r3
    3ca0:	0003      	movs	r3, r0
    3ca2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3ca4:	1dfb      	adds	r3, r7, #7
    3ca6:	781b      	ldrb	r3, [r3, #0]
    3ca8:	221f      	movs	r2, #31
    3caa:	4013      	ands	r3, r2
    3cac:	2201      	movs	r2, #1
    3cae:	409a      	lsls	r2, r3
    3cb0:	0013      	movs	r3, r2
    3cb2:	60bb      	str	r3, [r7, #8]
	if (level) {
    3cb4:	1dbb      	adds	r3, r7, #6
    3cb6:	781b      	ldrb	r3, [r3, #0]
    3cb8:	2b00      	cmp	r3, #0
    3cba:	d003      	beq.n	3cc4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
    3cbc:	68fb      	ldr	r3, [r7, #12]
    3cbe:	68ba      	ldr	r2, [r7, #8]
    3cc0:	619a      	str	r2, [r3, #24]
}
    3cc2:	e002      	b.n	3cca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
    3cc4:	68fb      	ldr	r3, [r7, #12]
    3cc6:	68ba      	ldr	r2, [r7, #8]
    3cc8:	615a      	str	r2, [r3, #20]
}
    3cca:	46c0      	nop			; (mov r8, r8)
    3ccc:	46bd      	mov	sp, r7
    3cce:	b004      	add	sp, #16
    3cd0:	bd80      	pop	{r7, pc}
    3cd2:	46c0      	nop			; (mov r8, r8)
    3cd4:	00003c61 	.word	0x00003c61

00003cd8 <system_gclk_chan_get_config_defaults>:
{
    3cd8:	b580      	push	{r7, lr}
    3cda:	b082      	sub	sp, #8
    3cdc:	af00      	add	r7, sp, #0
    3cde:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    3ce0:	687b      	ldr	r3, [r7, #4]
    3ce2:	2200      	movs	r2, #0
    3ce4:	701a      	strb	r2, [r3, #0]
}
    3ce6:	46c0      	nop			; (mov r8, r8)
    3ce8:	46bd      	mov	sp, r7
    3cea:	b002      	add	sp, #8
    3cec:	bd80      	pop	{r7, pc}
	...

00003cf0 <system_apb_clock_set_mask>:
{
    3cf0:	b580      	push	{r7, lr}
    3cf2:	b082      	sub	sp, #8
    3cf4:	af00      	add	r7, sp, #0
    3cf6:	0002      	movs	r2, r0
    3cf8:	6039      	str	r1, [r7, #0]
    3cfa:	1dfb      	adds	r3, r7, #7
    3cfc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    3cfe:	1dfb      	adds	r3, r7, #7
    3d00:	781b      	ldrb	r3, [r3, #0]
    3d02:	2b01      	cmp	r3, #1
    3d04:	d00a      	beq.n	3d1c <system_apb_clock_set_mask+0x2c>
    3d06:	2b02      	cmp	r3, #2
    3d08:	d00f      	beq.n	3d2a <system_apb_clock_set_mask+0x3a>
    3d0a:	2b00      	cmp	r3, #0
    3d0c:	d114      	bne.n	3d38 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    3d0e:	4b0e      	ldr	r3, [pc, #56]	; (3d48 <system_apb_clock_set_mask+0x58>)
    3d10:	4a0d      	ldr	r2, [pc, #52]	; (3d48 <system_apb_clock_set_mask+0x58>)
    3d12:	6991      	ldr	r1, [r2, #24]
    3d14:	683a      	ldr	r2, [r7, #0]
    3d16:	430a      	orrs	r2, r1
    3d18:	619a      	str	r2, [r3, #24]
			break;
    3d1a:	e00f      	b.n	3d3c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    3d1c:	4b0a      	ldr	r3, [pc, #40]	; (3d48 <system_apb_clock_set_mask+0x58>)
    3d1e:	4a0a      	ldr	r2, [pc, #40]	; (3d48 <system_apb_clock_set_mask+0x58>)
    3d20:	69d1      	ldr	r1, [r2, #28]
    3d22:	683a      	ldr	r2, [r7, #0]
    3d24:	430a      	orrs	r2, r1
    3d26:	61da      	str	r2, [r3, #28]
			break;
    3d28:	e008      	b.n	3d3c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    3d2a:	4b07      	ldr	r3, [pc, #28]	; (3d48 <system_apb_clock_set_mask+0x58>)
    3d2c:	4a06      	ldr	r2, [pc, #24]	; (3d48 <system_apb_clock_set_mask+0x58>)
    3d2e:	6a11      	ldr	r1, [r2, #32]
    3d30:	683a      	ldr	r2, [r7, #0]
    3d32:	430a      	orrs	r2, r1
    3d34:	621a      	str	r2, [r3, #32]
			break;
    3d36:	e001      	b.n	3d3c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    3d38:	2317      	movs	r3, #23
    3d3a:	e000      	b.n	3d3e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    3d3c:	2300      	movs	r3, #0
}
    3d3e:	0018      	movs	r0, r3
    3d40:	46bd      	mov	sp, r7
    3d42:	b002      	add	sp, #8
    3d44:	bd80      	pop	{r7, pc}
    3d46:	46c0      	nop			; (mov r8, r8)
    3d48:	40000400 	.word	0x40000400

00003d4c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    3d4c:	b580      	push	{r7, lr}
    3d4e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    3d50:	4b05      	ldr	r3, [pc, #20]	; (3d68 <system_is_debugger_present+0x1c>)
    3d52:	789b      	ldrb	r3, [r3, #2]
    3d54:	b2db      	uxtb	r3, r3
    3d56:	001a      	movs	r2, r3
    3d58:	2302      	movs	r3, #2
    3d5a:	4013      	ands	r3, r2
    3d5c:	1e5a      	subs	r2, r3, #1
    3d5e:	4193      	sbcs	r3, r2
    3d60:	b2db      	uxtb	r3, r3
}
    3d62:	0018      	movs	r0, r3
    3d64:	46bd      	mov	sp, r7
    3d66:	bd80      	pop	{r7, pc}
    3d68:	41002000 	.word	0x41002000

00003d6c <system_interrupt_enable>:
{
    3d6c:	b580      	push	{r7, lr}
    3d6e:	b082      	sub	sp, #8
    3d70:	af00      	add	r7, sp, #0
    3d72:	0002      	movs	r2, r0
    3d74:	1dfb      	adds	r3, r7, #7
    3d76:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3d78:	4b06      	ldr	r3, [pc, #24]	; (3d94 <system_interrupt_enable+0x28>)
    3d7a:	1dfa      	adds	r2, r7, #7
    3d7c:	7812      	ldrb	r2, [r2, #0]
    3d7e:	0011      	movs	r1, r2
    3d80:	221f      	movs	r2, #31
    3d82:	400a      	ands	r2, r1
    3d84:	2101      	movs	r1, #1
    3d86:	4091      	lsls	r1, r2
    3d88:	000a      	movs	r2, r1
    3d8a:	601a      	str	r2, [r3, #0]
}
    3d8c:	46c0      	nop			; (mov r8, r8)
    3d8e:	46bd      	mov	sp, r7
    3d90:	b002      	add	sp, #8
    3d92:	bd80      	pop	{r7, pc}
    3d94:	e000e100 	.word	0xe000e100

00003d98 <system_interrupt_disable>:
{
    3d98:	b580      	push	{r7, lr}
    3d9a:	b082      	sub	sp, #8
    3d9c:	af00      	add	r7, sp, #0
    3d9e:	0002      	movs	r2, r0
    3da0:	1dfb      	adds	r3, r7, #7
    3da2:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3da4:	4a07      	ldr	r2, [pc, #28]	; (3dc4 <system_interrupt_disable+0x2c>)
    3da6:	1dfb      	adds	r3, r7, #7
    3da8:	781b      	ldrb	r3, [r3, #0]
    3daa:	0019      	movs	r1, r3
    3dac:	231f      	movs	r3, #31
    3dae:	400b      	ands	r3, r1
    3db0:	2101      	movs	r1, #1
    3db2:	4099      	lsls	r1, r3
    3db4:	000b      	movs	r3, r1
    3db6:	0019      	movs	r1, r3
    3db8:	2380      	movs	r3, #128	; 0x80
    3dba:	50d1      	str	r1, [r2, r3]
}
    3dbc:	46c0      	nop			; (mov r8, r8)
    3dbe:	46bd      	mov	sp, r7
    3dc0:	b002      	add	sp, #8
    3dc2:	bd80      	pop	{r7, pc}
    3dc4:	e000e100 	.word	0xe000e100

00003dc8 <spi_is_syncing>:
{
    3dc8:	b580      	push	{r7, lr}
    3dca:	b084      	sub	sp, #16
    3dcc:	af00      	add	r7, sp, #0
    3dce:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3dd0:	687b      	ldr	r3, [r7, #4]
    3dd2:	681b      	ldr	r3, [r3, #0]
    3dd4:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    3dd6:	68fb      	ldr	r3, [r7, #12]
    3dd8:	69db      	ldr	r3, [r3, #28]
    3dda:	1e5a      	subs	r2, r3, #1
    3ddc:	4193      	sbcs	r3, r2
    3dde:	b2db      	uxtb	r3, r3
}
    3de0:	0018      	movs	r0, r3
    3de2:	46bd      	mov	sp, r7
    3de4:	b004      	add	sp, #16
    3de6:	bd80      	pop	{r7, pc}

00003de8 <spi_enable>:
{
    3de8:	b580      	push	{r7, lr}
    3dea:	b084      	sub	sp, #16
    3dec:	af00      	add	r7, sp, #0
    3dee:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3df0:	687b      	ldr	r3, [r7, #4]
    3df2:	681b      	ldr	r3, [r3, #0]
    3df4:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3df6:	687b      	ldr	r3, [r7, #4]
    3df8:	681b      	ldr	r3, [r3, #0]
    3dfa:	0018      	movs	r0, r3
    3dfc:	4b0b      	ldr	r3, [pc, #44]	; (3e2c <spi_enable+0x44>)
    3dfe:	4798      	blx	r3
    3e00:	0003      	movs	r3, r0
    3e02:	0018      	movs	r0, r3
    3e04:	4b0a      	ldr	r3, [pc, #40]	; (3e30 <spi_enable+0x48>)
    3e06:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    3e08:	46c0      	nop			; (mov r8, r8)
    3e0a:	687b      	ldr	r3, [r7, #4]
    3e0c:	0018      	movs	r0, r3
    3e0e:	4b09      	ldr	r3, [pc, #36]	; (3e34 <spi_enable+0x4c>)
    3e10:	4798      	blx	r3
    3e12:	1e03      	subs	r3, r0, #0
    3e14:	d1f9      	bne.n	3e0a <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3e16:	68fb      	ldr	r3, [r7, #12]
    3e18:	681b      	ldr	r3, [r3, #0]
    3e1a:	2202      	movs	r2, #2
    3e1c:	431a      	orrs	r2, r3
    3e1e:	68fb      	ldr	r3, [r7, #12]
    3e20:	601a      	str	r2, [r3, #0]
}
    3e22:	46c0      	nop			; (mov r8, r8)
    3e24:	46bd      	mov	sp, r7
    3e26:	b004      	add	sp, #16
    3e28:	bd80      	pop	{r7, pc}
    3e2a:	46c0      	nop			; (mov r8, r8)
    3e2c:	00003b05 	.word	0x00003b05
    3e30:	00003d6d 	.word	0x00003d6d
    3e34:	00003dc9 	.word	0x00003dc9

00003e38 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    3e38:	b580      	push	{r7, lr}
    3e3a:	b084      	sub	sp, #16
    3e3c:	af00      	add	r7, sp, #0
    3e3e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e40:	687b      	ldr	r3, [r7, #4]
    3e42:	681b      	ldr	r3, [r3, #0]
    3e44:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3e46:	687b      	ldr	r3, [r7, #4]
    3e48:	681b      	ldr	r3, [r3, #0]
    3e4a:	0018      	movs	r0, r3
    3e4c:	4b0e      	ldr	r3, [pc, #56]	; (3e88 <spi_disable+0x50>)
    3e4e:	4798      	blx	r3
    3e50:	0003      	movs	r3, r0
    3e52:	0018      	movs	r0, r3
    3e54:	4b0d      	ldr	r3, [pc, #52]	; (3e8c <spi_disable+0x54>)
    3e56:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    3e58:	46c0      	nop			; (mov r8, r8)
    3e5a:	687b      	ldr	r3, [r7, #4]
    3e5c:	0018      	movs	r0, r3
    3e5e:	4b0c      	ldr	r3, [pc, #48]	; (3e90 <spi_disable+0x58>)
    3e60:	4798      	blx	r3
    3e62:	1e03      	subs	r3, r0, #0
    3e64:	d1f9      	bne.n	3e5a <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    3e66:	68fb      	ldr	r3, [r7, #12]
    3e68:	228f      	movs	r2, #143	; 0x8f
    3e6a:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    3e6c:	68fb      	ldr	r3, [r7, #12]
    3e6e:	228f      	movs	r2, #143	; 0x8f
    3e70:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    3e72:	68fb      	ldr	r3, [r7, #12]
    3e74:	681b      	ldr	r3, [r3, #0]
    3e76:	2202      	movs	r2, #2
    3e78:	4393      	bics	r3, r2
    3e7a:	001a      	movs	r2, r3
    3e7c:	68fb      	ldr	r3, [r7, #12]
    3e7e:	601a      	str	r2, [r3, #0]
}
    3e80:	46c0      	nop			; (mov r8, r8)
    3e82:	46bd      	mov	sp, r7
    3e84:	b004      	add	sp, #16
    3e86:	bd80      	pop	{r7, pc}
    3e88:	00003b05 	.word	0x00003b05
    3e8c:	00003d99 	.word	0x00003d99
    3e90:	00003dc9 	.word	0x00003dc9

00003e94 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    3e94:	b580      	push	{r7, lr}
    3e96:	b084      	sub	sp, #16
    3e98:	af00      	add	r7, sp, #0
    3e9a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3e9c:	687b      	ldr	r3, [r7, #4]
    3e9e:	681b      	ldr	r3, [r3, #0]
    3ea0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    3ea2:	68fb      	ldr	r3, [r7, #12]
    3ea4:	7e1b      	ldrb	r3, [r3, #24]
    3ea6:	b2db      	uxtb	r3, r3
    3ea8:	001a      	movs	r2, r3
    3eaa:	2302      	movs	r3, #2
    3eac:	4013      	ands	r3, r2
    3eae:	1e5a      	subs	r2, r3, #1
    3eb0:	4193      	sbcs	r3, r2
    3eb2:	b2db      	uxtb	r3, r3
}
    3eb4:	0018      	movs	r0, r3
    3eb6:	46bd      	mov	sp, r7
    3eb8:	b004      	add	sp, #16
    3eba:	bd80      	pop	{r7, pc}

00003ebc <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    3ebc:	b580      	push	{r7, lr}
    3ebe:	b084      	sub	sp, #16
    3ec0:	af00      	add	r7, sp, #0
    3ec2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3ec4:	687b      	ldr	r3, [r7, #4]
    3ec6:	681b      	ldr	r3, [r3, #0]
    3ec8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    3eca:	68fb      	ldr	r3, [r7, #12]
    3ecc:	7e1b      	ldrb	r3, [r3, #24]
    3ece:	b2db      	uxtb	r3, r3
    3ed0:	001a      	movs	r2, r3
    3ed2:	2301      	movs	r3, #1
    3ed4:	4013      	ands	r3, r2
    3ed6:	1e5a      	subs	r2, r3, #1
    3ed8:	4193      	sbcs	r3, r2
    3eda:	b2db      	uxtb	r3, r3
}
    3edc:	0018      	movs	r0, r3
    3ede:	46bd      	mov	sp, r7
    3ee0:	b004      	add	sp, #16
    3ee2:	bd80      	pop	{r7, pc}

00003ee4 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    3ee4:	b580      	push	{r7, lr}
    3ee6:	b084      	sub	sp, #16
    3ee8:	af00      	add	r7, sp, #0
    3eea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3eec:	687b      	ldr	r3, [r7, #4]
    3eee:	681b      	ldr	r3, [r3, #0]
    3ef0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    3ef2:	68fb      	ldr	r3, [r7, #12]
    3ef4:	7e1b      	ldrb	r3, [r3, #24]
    3ef6:	b2db      	uxtb	r3, r3
    3ef8:	001a      	movs	r2, r3
    3efa:	2304      	movs	r3, #4
    3efc:	4013      	ands	r3, r2
    3efe:	1e5a      	subs	r2, r3, #1
    3f00:	4193      	sbcs	r3, r2
    3f02:	b2db      	uxtb	r3, r3
}
    3f04:	0018      	movs	r0, r3
    3f06:	46bd      	mov	sp, r7
    3f08:	b004      	add	sp, #16
    3f0a:	bd80      	pop	{r7, pc}

00003f0c <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    3f0c:	b580      	push	{r7, lr}
    3f0e:	b084      	sub	sp, #16
    3f10:	af00      	add	r7, sp, #0
    3f12:	6078      	str	r0, [r7, #4]
    3f14:	000a      	movs	r2, r1
    3f16:	1cbb      	adds	r3, r7, #2
    3f18:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3f1a:	687b      	ldr	r3, [r7, #4]
    3f1c:	681b      	ldr	r3, [r3, #0]
    3f1e:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    3f20:	687b      	ldr	r3, [r7, #4]
    3f22:	0018      	movs	r0, r3
    3f24:	4b0a      	ldr	r3, [pc, #40]	; (3f50 <spi_write+0x44>)
    3f26:	4798      	blx	r3
    3f28:	0003      	movs	r3, r0
    3f2a:	001a      	movs	r2, r3
    3f2c:	2301      	movs	r3, #1
    3f2e:	4053      	eors	r3, r2
    3f30:	b2db      	uxtb	r3, r3
    3f32:	2b00      	cmp	r3, #0
    3f34:	d001      	beq.n	3f3a <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    3f36:	2305      	movs	r3, #5
    3f38:	e006      	b.n	3f48 <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    3f3a:	1cbb      	adds	r3, r7, #2
    3f3c:	881b      	ldrh	r3, [r3, #0]
    3f3e:	05db      	lsls	r3, r3, #23
    3f40:	0dda      	lsrs	r2, r3, #23
    3f42:	68fb      	ldr	r3, [r7, #12]
    3f44:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    3f46:	2300      	movs	r3, #0
}
    3f48:	0018      	movs	r0, r3
    3f4a:	46bd      	mov	sp, r7
    3f4c:	b004      	add	sp, #16
    3f4e:	bd80      	pop	{r7, pc}
    3f50:	00003ebd 	.word	0x00003ebd

00003f54 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    3f54:	b580      	push	{r7, lr}
    3f56:	b084      	sub	sp, #16
    3f58:	af00      	add	r7, sp, #0
    3f5a:	6078      	str	r0, [r7, #4]
    3f5c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3f5e:	687b      	ldr	r3, [r7, #4]
    3f60:	681b      	ldr	r3, [r3, #0]
    3f62:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	0018      	movs	r0, r3
    3f68:	4b1b      	ldr	r3, [pc, #108]	; (3fd8 <spi_read+0x84>)
    3f6a:	4798      	blx	r3
    3f6c:	0003      	movs	r3, r0
    3f6e:	001a      	movs	r2, r3
    3f70:	2301      	movs	r3, #1
    3f72:	4053      	eors	r3, r2
    3f74:	b2db      	uxtb	r3, r3
    3f76:	2b00      	cmp	r3, #0
    3f78:	d001      	beq.n	3f7e <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    3f7a:	2310      	movs	r3, #16
    3f7c:	e027      	b.n	3fce <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    3f7e:	230f      	movs	r3, #15
    3f80:	18fb      	adds	r3, r7, r3
    3f82:	2200      	movs	r2, #0
    3f84:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    3f86:	68bb      	ldr	r3, [r7, #8]
    3f88:	8b5b      	ldrh	r3, [r3, #26]
    3f8a:	b29b      	uxth	r3, r3
    3f8c:	001a      	movs	r2, r3
    3f8e:	2304      	movs	r3, #4
    3f90:	4013      	ands	r3, r2
    3f92:	d006      	beq.n	3fa2 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
    3f94:	230f      	movs	r3, #15
    3f96:	18fb      	adds	r3, r7, r3
    3f98:	221e      	movs	r2, #30
    3f9a:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    3f9c:	68bb      	ldr	r3, [r7, #8]
    3f9e:	2204      	movs	r2, #4
    3fa0:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    3fa2:	687b      	ldr	r3, [r7, #4]
    3fa4:	799b      	ldrb	r3, [r3, #6]
    3fa6:	2b01      	cmp	r3, #1
    3fa8:	d108      	bne.n	3fbc <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    3faa:	68bb      	ldr	r3, [r7, #8]
    3fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fae:	b29b      	uxth	r3, r3
    3fb0:	05db      	lsls	r3, r3, #23
    3fb2:	0ddb      	lsrs	r3, r3, #23
    3fb4:	b29a      	uxth	r2, r3
    3fb6:	683b      	ldr	r3, [r7, #0]
    3fb8:	801a      	strh	r2, [r3, #0]
    3fba:	e005      	b.n	3fc8 <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    3fbc:	68bb      	ldr	r3, [r7, #8]
    3fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fc0:	b2db      	uxtb	r3, r3
    3fc2:	b29a      	uxth	r2, r3
    3fc4:	683b      	ldr	r3, [r7, #0]
    3fc6:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    3fc8:	230f      	movs	r3, #15
    3fca:	18fb      	adds	r3, r7, r3
    3fcc:	781b      	ldrb	r3, [r3, #0]
}
    3fce:	0018      	movs	r0, r3
    3fd0:	46bd      	mov	sp, r7
    3fd2:	b004      	add	sp, #16
    3fd4:	bd80      	pop	{r7, pc}
    3fd6:	46c0      	nop			; (mov r8, r8)
    3fd8:	00003ee5 	.word	0x00003ee5

00003fdc <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    3fdc:	b580      	push	{r7, lr}
    3fde:	b084      	sub	sp, #16
    3fe0:	af00      	add	r7, sp, #0
    3fe2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    3fe4:	687b      	ldr	r3, [r7, #4]
    3fe6:	681b      	ldr	r3, [r3, #0]
    3fe8:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    3fea:	687b      	ldr	r3, [r7, #4]
    3fec:	0018      	movs	r0, r3
    3fee:	4b09      	ldr	r3, [pc, #36]	; (4014 <spi_reset+0x38>)
    3ff0:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    3ff2:	46c0      	nop			; (mov r8, r8)
    3ff4:	687b      	ldr	r3, [r7, #4]
    3ff6:	0018      	movs	r0, r3
    3ff8:	4b07      	ldr	r3, [pc, #28]	; (4018 <spi_reset+0x3c>)
    3ffa:	4798      	blx	r3
    3ffc:	1e03      	subs	r3, r0, #0
    3ffe:	d1f9      	bne.n	3ff4 <spi_reset+0x18>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    4000:	68fb      	ldr	r3, [r7, #12]
    4002:	681b      	ldr	r3, [r3, #0]
    4004:	2201      	movs	r2, #1
    4006:	431a      	orrs	r2, r3
    4008:	68fb      	ldr	r3, [r7, #12]
    400a:	601a      	str	r2, [r3, #0]
}
    400c:	46c0      	nop			; (mov r8, r8)
    400e:	46bd      	mov	sp, r7
    4010:	b004      	add	sp, #16
    4012:	bd80      	pop	{r7, pc}
    4014:	00003e39 	.word	0x00003e39
    4018:	00003dc9 	.word	0x00003dc9

0000401c <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    401c:	b590      	push	{r4, r7, lr}
    401e:	b089      	sub	sp, #36	; 0x24
    4020:	af00      	add	r7, sp, #0
    4022:	6078      	str	r0, [r7, #4]
    4024:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    4026:	230c      	movs	r3, #12
    4028:	18fb      	adds	r3, r7, r3
    402a:	2200      	movs	r2, #0
    402c:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    402e:	687b      	ldr	r3, [r7, #4]
    4030:	681b      	ldr	r3, [r3, #0]
    4032:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    4034:	687b      	ldr	r3, [r7, #4]
    4036:	0018      	movs	r0, r3
    4038:	4b24      	ldr	r3, [pc, #144]	; (40cc <spi_set_baudrate+0xb0>)
    403a:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    403c:	46c0      	nop			; (mov r8, r8)
    403e:	687b      	ldr	r3, [r7, #4]
    4040:	0018      	movs	r0, r3
    4042:	4b23      	ldr	r3, [pc, #140]	; (40d0 <spi_set_baudrate+0xb4>)
    4044:	4798      	blx	r3
    4046:	1e03      	subs	r3, r0, #0
    4048:	d1f9      	bne.n	403e <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    404a:	687b      	ldr	r3, [r7, #4]
    404c:	681b      	ldr	r3, [r3, #0]
    404e:	0018      	movs	r0, r3
    4050:	4b20      	ldr	r3, [pc, #128]	; (40d4 <spi_set_baudrate+0xb8>)
    4052:	4798      	blx	r3
    4054:	0003      	movs	r3, r0
    4056:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4058:	69bb      	ldr	r3, [r7, #24]
    405a:	3314      	adds	r3, #20
    405c:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    405e:	697b      	ldr	r3, [r7, #20]
    4060:	b2db      	uxtb	r3, r3
    4062:	0018      	movs	r0, r3
    4064:	4b1c      	ldr	r3, [pc, #112]	; (40d8 <spi_set_baudrate+0xbc>)
    4066:	4798      	blx	r3
    4068:	0003      	movs	r3, r0
    406a:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    406c:	230f      	movs	r3, #15
    406e:	18fc      	adds	r4, r7, r3
    4070:	230c      	movs	r3, #12
    4072:	18fa      	adds	r2, r7, r3
    4074:	6939      	ldr	r1, [r7, #16]
    4076:	683b      	ldr	r3, [r7, #0]
    4078:	0018      	movs	r0, r3
    407a:	4b18      	ldr	r3, [pc, #96]	; (40dc <spi_set_baudrate+0xc0>)
    407c:	4798      	blx	r3
    407e:	0003      	movs	r3, r0
    4080:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    4082:	230f      	movs	r3, #15
    4084:	18fb      	adds	r3, r7, r3
    4086:	781b      	ldrb	r3, [r3, #0]
    4088:	2b00      	cmp	r3, #0
    408a:	d001      	beq.n	4090 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    408c:	2317      	movs	r3, #23
    408e:	e018      	b.n	40c2 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    4090:	230c      	movs	r3, #12
    4092:	18fb      	adds	r3, r7, r3
    4094:	881b      	ldrh	r3, [r3, #0]
    4096:	b2da      	uxtb	r2, r3
    4098:	69fb      	ldr	r3, [r7, #28]
    409a:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    409c:	46c0      	nop			; (mov r8, r8)
    409e:	687b      	ldr	r3, [r7, #4]
    40a0:	0018      	movs	r0, r3
    40a2:	4b0b      	ldr	r3, [pc, #44]	; (40d0 <spi_set_baudrate+0xb4>)
    40a4:	4798      	blx	r3
    40a6:	1e03      	subs	r3, r0, #0
    40a8:	d1f9      	bne.n	409e <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    40aa:	687b      	ldr	r3, [r7, #4]
    40ac:	0018      	movs	r0, r3
    40ae:	4b0c      	ldr	r3, [pc, #48]	; (40e0 <spi_set_baudrate+0xc4>)
    40b0:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    40b2:	46c0      	nop			; (mov r8, r8)
    40b4:	687b      	ldr	r3, [r7, #4]
    40b6:	0018      	movs	r0, r3
    40b8:	4b05      	ldr	r3, [pc, #20]	; (40d0 <spi_set_baudrate+0xb4>)
    40ba:	4798      	blx	r3
    40bc:	1e03      	subs	r3, r0, #0
    40be:	d1f9      	bne.n	40b4 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    40c0:	2300      	movs	r3, #0
}
    40c2:	0018      	movs	r0, r3
    40c4:	46bd      	mov	sp, r7
    40c6:	b009      	add	sp, #36	; 0x24
    40c8:	bd90      	pop	{r4, r7, pc}
    40ca:	46c0      	nop			; (mov r8, r8)
    40cc:	00003e39 	.word	0x00003e39
    40d0:	00003dc9 	.word	0x00003dc9
    40d4:	00003a35 	.word	0x00003a35
    40d8:	0000666d 	.word	0x0000666d
    40dc:	000035af 	.word	0x000035af
    40e0:	00003de9 	.word	0x00003de9

000040e4 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    40e4:	b590      	push	{r4, r7, lr}
    40e6:	b093      	sub	sp, #76	; 0x4c
    40e8:	af00      	add	r7, sp, #0
    40ea:	6078      	str	r0, [r7, #4]
    40ec:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	681b      	ldr	r3, [r3, #0]
    40f2:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    40f4:	687b      	ldr	r3, [r7, #4]
    40f6:	681b      	ldr	r3, [r3, #0]
    40f8:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    40fa:	231c      	movs	r3, #28
    40fc:	18fb      	adds	r3, r7, r3
    40fe:	0018      	movs	r0, r3
    4100:	4b75      	ldr	r3, [pc, #468]	; (42d8 <_spi_set_config+0x1f4>)
    4102:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4104:	231c      	movs	r3, #28
    4106:	18fb      	adds	r3, r7, r3
    4108:	2200      	movs	r2, #0
    410a:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    410c:	683b      	ldr	r3, [r7, #0]
    410e:	781b      	ldrb	r3, [r3, #0]
    4110:	2b00      	cmp	r3, #0
    4112:	d103      	bne.n	411c <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    4114:	231c      	movs	r3, #28
    4116:	18fb      	adds	r3, r7, r3
    4118:	2200      	movs	r2, #0
    411a:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    411c:	683b      	ldr	r3, [r7, #0]
    411e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    4120:	230c      	movs	r3, #12
    4122:	18fb      	adds	r3, r7, r3
    4124:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    4126:	683b      	ldr	r3, [r7, #0]
    4128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    412a:	230c      	movs	r3, #12
    412c:	18fb      	adds	r3, r7, r3
    412e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    4130:	683b      	ldr	r3, [r7, #0]
    4132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    4134:	230c      	movs	r3, #12
    4136:	18fb      	adds	r3, r7, r3
    4138:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    413a:	683b      	ldr	r3, [r7, #0]
    413c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    413e:	230c      	movs	r3, #12
    4140:	18fb      	adds	r3, r7, r3
    4142:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    4144:	2347      	movs	r3, #71	; 0x47
    4146:	18fb      	adds	r3, r7, r3
    4148:	2200      	movs	r2, #0
    414a:	701a      	strb	r2, [r3, #0]
    414c:	e02c      	b.n	41a8 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    414e:	2347      	movs	r3, #71	; 0x47
    4150:	18fb      	adds	r3, r7, r3
    4152:	781a      	ldrb	r2, [r3, #0]
    4154:	230c      	movs	r3, #12
    4156:	18fb      	adds	r3, r7, r3
    4158:	0092      	lsls	r2, r2, #2
    415a:	58d3      	ldr	r3, [r2, r3]
    415c:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    415e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4160:	2b00      	cmp	r3, #0
    4162:	d109      	bne.n	4178 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    4164:	2347      	movs	r3, #71	; 0x47
    4166:	18fb      	adds	r3, r7, r3
    4168:	781a      	ldrb	r2, [r3, #0]
    416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    416c:	0011      	movs	r1, r2
    416e:	0018      	movs	r0, r3
    4170:	4b5a      	ldr	r3, [pc, #360]	; (42dc <_spi_set_config+0x1f8>)
    4172:	4798      	blx	r3
    4174:	0003      	movs	r3, r0
    4176:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    4178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    417a:	3301      	adds	r3, #1
    417c:	d00d      	beq.n	419a <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    417e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4180:	b2da      	uxtb	r2, r3
    4182:	231c      	movs	r3, #28
    4184:	18fb      	adds	r3, r7, r3
    4186:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    4188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    418a:	0c1b      	lsrs	r3, r3, #16
    418c:	b2db      	uxtb	r3, r3
    418e:	221c      	movs	r2, #28
    4190:	18ba      	adds	r2, r7, r2
    4192:	0011      	movs	r1, r2
    4194:	0018      	movs	r0, r3
    4196:	4b52      	ldr	r3, [pc, #328]	; (42e0 <_spi_set_config+0x1fc>)
    4198:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    419a:	2347      	movs	r3, #71	; 0x47
    419c:	18fb      	adds	r3, r7, r3
    419e:	781a      	ldrb	r2, [r3, #0]
    41a0:	2347      	movs	r3, #71	; 0x47
    41a2:	18fb      	adds	r3, r7, r3
    41a4:	3201      	adds	r2, #1
    41a6:	701a      	strb	r2, [r3, #0]
    41a8:	2347      	movs	r3, #71	; 0x47
    41aa:	18fb      	adds	r3, r7, r3
    41ac:	781b      	ldrb	r3, [r3, #0]
    41ae:	2b03      	cmp	r3, #3
    41b0:	d9cd      	bls.n	414e <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
    41b2:	683b      	ldr	r3, [r7, #0]
    41b4:	781a      	ldrb	r2, [r3, #0]
    41b6:	687b      	ldr	r3, [r7, #4]
    41b8:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    41ba:	683b      	ldr	r3, [r7, #0]
    41bc:	7c1a      	ldrb	r2, [r3, #16]
    41be:	687b      	ldr	r3, [r7, #4]
    41c0:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    41c2:	683b      	ldr	r3, [r7, #0]
    41c4:	7c9a      	ldrb	r2, [r3, #18]
    41c6:	687b      	ldr	r3, [r7, #4]
    41c8:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    41ca:	683b      	ldr	r3, [r7, #0]
    41cc:	7d1a      	ldrb	r2, [r3, #20]
    41ce:	687b      	ldr	r3, [r7, #4]
    41d0:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    41d2:	230a      	movs	r3, #10
    41d4:	18fb      	adds	r3, r7, r3
    41d6:	2200      	movs	r2, #0
    41d8:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    41da:	2300      	movs	r3, #0
    41dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    41de:	2300      	movs	r3, #0
    41e0:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    41e2:	683b      	ldr	r3, [r7, #0]
    41e4:	781b      	ldrb	r3, [r3, #0]
    41e6:	2b01      	cmp	r3, #1
    41e8:	d129      	bne.n	423e <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    41ea:	687b      	ldr	r3, [r7, #4]
    41ec:	681b      	ldr	r3, [r3, #0]
    41ee:	0018      	movs	r0, r3
    41f0:	4b3c      	ldr	r3, [pc, #240]	; (42e4 <_spi_set_config+0x200>)
    41f2:	4798      	blx	r3
    41f4:	0003      	movs	r3, r0
    41f6:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    41f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    41fa:	3314      	adds	r3, #20
    41fc:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    41fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4200:	b2db      	uxtb	r3, r3
    4202:	0018      	movs	r0, r3
    4204:	4b38      	ldr	r3, [pc, #224]	; (42e8 <_spi_set_config+0x204>)
    4206:	4798      	blx	r3
    4208:	0003      	movs	r3, r0
    420a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    420c:	683b      	ldr	r3, [r7, #0]
    420e:	699b      	ldr	r3, [r3, #24]
    4210:	2223      	movs	r2, #35	; 0x23
    4212:	18bc      	adds	r4, r7, r2
    4214:	220a      	movs	r2, #10
    4216:	18ba      	adds	r2, r7, r2
    4218:	6a79      	ldr	r1, [r7, #36]	; 0x24
    421a:	0018      	movs	r0, r3
    421c:	4b33      	ldr	r3, [pc, #204]	; (42ec <_spi_set_config+0x208>)
    421e:	4798      	blx	r3
    4220:	0003      	movs	r3, r0
    4222:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    4224:	2323      	movs	r3, #35	; 0x23
    4226:	18fb      	adds	r3, r7, r3
    4228:	781b      	ldrb	r3, [r3, #0]
    422a:	2b00      	cmp	r3, #0
    422c:	d001      	beq.n	4232 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    422e:	2317      	movs	r3, #23
    4230:	e04e      	b.n	42d0 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    4232:	230a      	movs	r3, #10
    4234:	18fb      	adds	r3, r7, r3
    4236:	881b      	ldrh	r3, [r3, #0]
    4238:	b2da      	uxtb	r2, r3
    423a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    423c:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    423e:	683b      	ldr	r3, [r7, #0]
    4240:	685b      	ldr	r3, [r3, #4]
    4242:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4244:	4313      	orrs	r3, r2
    4246:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    4248:	683b      	ldr	r3, [r7, #0]
    424a:	689b      	ldr	r3, [r3, #8]
    424c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    424e:	4313      	orrs	r3, r2
    4250:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    4252:	683b      	ldr	r3, [r7, #0]
    4254:	68db      	ldr	r3, [r3, #12]
    4256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4258:	4313      	orrs	r3, r2
    425a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    425c:	683b      	ldr	r3, [r7, #0]
    425e:	7c1b      	ldrb	r3, [r3, #16]
    4260:	001a      	movs	r2, r3
    4262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4264:	4313      	orrs	r3, r2
    4266:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4268:	683b      	ldr	r3, [r7, #0]
    426a:	7c5b      	ldrb	r3, [r3, #17]
    426c:	2b00      	cmp	r3, #0
    426e:	d103      	bne.n	4278 <_spi_set_config+0x194>
    4270:	4b1f      	ldr	r3, [pc, #124]	; (42f0 <_spi_set_config+0x20c>)
    4272:	4798      	blx	r3
    4274:	1e03      	subs	r3, r0, #0
    4276:	d003      	beq.n	4280 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    4278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    427a:	2280      	movs	r2, #128	; 0x80
    427c:	4313      	orrs	r3, r2
    427e:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    4280:	683b      	ldr	r3, [r7, #0]
    4282:	7c9b      	ldrb	r3, [r3, #18]
    4284:	2b00      	cmp	r3, #0
    4286:	d004      	beq.n	4292 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    4288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    428a:	2280      	movs	r2, #128	; 0x80
    428c:	0292      	lsls	r2, r2, #10
    428e:	4313      	orrs	r3, r2
    4290:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    4292:	683b      	ldr	r3, [r7, #0]
    4294:	7cdb      	ldrb	r3, [r3, #19]
    4296:	2b00      	cmp	r3, #0
    4298:	d004      	beq.n	42a4 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    429c:	2280      	movs	r2, #128	; 0x80
    429e:	0092      	lsls	r2, r2, #2
    42a0:	4313      	orrs	r3, r2
    42a2:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    42a4:	683b      	ldr	r3, [r7, #0]
    42a6:	7d1b      	ldrb	r3, [r3, #20]
    42a8:	2b00      	cmp	r3, #0
    42aa:	d004      	beq.n	42b6 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    42ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    42ae:	2280      	movs	r2, #128	; 0x80
    42b0:	0192      	lsls	r2, r2, #6
    42b2:	4313      	orrs	r3, r2
    42b4:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    42b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42b8:	681a      	ldr	r2, [r3, #0]
    42ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    42bc:	431a      	orrs	r2, r3
    42be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42c0:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    42c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42c4:	685a      	ldr	r2, [r3, #4]
    42c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    42c8:	431a      	orrs	r2, r3
    42ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    42cc:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    42ce:	2300      	movs	r3, #0
}
    42d0:	0018      	movs	r0, r3
    42d2:	46bd      	mov	sp, r7
    42d4:	b013      	add	sp, #76	; 0x4c
    42d6:	bd90      	pop	{r4, r7, pc}
    42d8:	00003bd9 	.word	0x00003bd9
    42dc:	00003879 	.word	0x00003879
    42e0:	00006835 	.word	0x00006835
    42e4:	00003a35 	.word	0x00003a35
    42e8:	0000666d 	.word	0x0000666d
    42ec:	000035af 	.word	0x000035af
    42f0:	00003d4d 	.word	0x00003d4d

000042f4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    42f4:	b590      	push	{r4, r7, lr}
    42f6:	b08b      	sub	sp, #44	; 0x2c
    42f8:	af00      	add	r7, sp, #0
    42fa:	60f8      	str	r0, [r7, #12]
    42fc:	60b9      	str	r1, [r7, #8]
    42fe:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    4300:	68fb      	ldr	r3, [r7, #12]
    4302:	68ba      	ldr	r2, [r7, #8]
    4304:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    4306:	68fb      	ldr	r3, [r7, #12]
    4308:	681b      	ldr	r3, [r3, #0]
    430a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    430c:	6a3b      	ldr	r3, [r7, #32]
    430e:	681b      	ldr	r3, [r3, #0]
    4310:	2202      	movs	r2, #2
    4312:	4013      	ands	r3, r2
    4314:	d001      	beq.n	431a <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    4316:	231c      	movs	r3, #28
    4318:	e09c      	b.n	4454 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    431a:	6a3b      	ldr	r3, [r7, #32]
    431c:	681b      	ldr	r3, [r3, #0]
    431e:	2201      	movs	r2, #1
    4320:	4013      	ands	r3, r2
    4322:	d001      	beq.n	4328 <spi_init+0x34>
		return STATUS_BUSY;
    4324:	2305      	movs	r3, #5
    4326:	e095      	b.n	4454 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4328:	68fb      	ldr	r3, [r7, #12]
    432a:	681b      	ldr	r3, [r3, #0]
    432c:	0018      	movs	r0, r3
    432e:	4b4b      	ldr	r3, [pc, #300]	; (445c <spi_init+0x168>)
    4330:	4798      	blx	r3
    4332:	0003      	movs	r3, r0
    4334:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4336:	69fb      	ldr	r3, [r7, #28]
    4338:	3302      	adds	r3, #2
    433a:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    433c:	69fb      	ldr	r3, [r7, #28]
    433e:	3314      	adds	r3, #20
    4340:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4342:	2201      	movs	r2, #1
    4344:	69bb      	ldr	r3, [r7, #24]
    4346:	409a      	lsls	r2, r3
    4348:	0013      	movs	r3, r2
    434a:	0019      	movs	r1, r3
    434c:	2002      	movs	r0, #2
    434e:	4b44      	ldr	r3, [pc, #272]	; (4460 <spi_init+0x16c>)
    4350:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4352:	2310      	movs	r3, #16
    4354:	18fb      	adds	r3, r7, r3
    4356:	0018      	movs	r0, r3
    4358:	4b42      	ldr	r3, [pc, #264]	; (4464 <spi_init+0x170>)
    435a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    435c:	687b      	ldr	r3, [r7, #4]
    435e:	2224      	movs	r2, #36	; 0x24
    4360:	5c9a      	ldrb	r2, [r3, r2]
    4362:	2310      	movs	r3, #16
    4364:	18fb      	adds	r3, r7, r3
    4366:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    4368:	697b      	ldr	r3, [r7, #20]
    436a:	b2db      	uxtb	r3, r3
    436c:	2210      	movs	r2, #16
    436e:	18ba      	adds	r2, r7, r2
    4370:	0011      	movs	r1, r2
    4372:	0018      	movs	r0, r3
    4374:	4b3c      	ldr	r3, [pc, #240]	; (4468 <spi_init+0x174>)
    4376:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    4378:	697b      	ldr	r3, [r7, #20]
    437a:	b2db      	uxtb	r3, r3
    437c:	0018      	movs	r0, r3
    437e:	4b3b      	ldr	r3, [pc, #236]	; (446c <spi_init+0x178>)
    4380:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	2224      	movs	r2, #36	; 0x24
    4386:	5c9b      	ldrb	r3, [r3, r2]
    4388:	2100      	movs	r1, #0
    438a:	0018      	movs	r0, r3
    438c:	4b38      	ldr	r3, [pc, #224]	; (4470 <spi_init+0x17c>)
    438e:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    4390:	687b      	ldr	r3, [r7, #4]
    4392:	781b      	ldrb	r3, [r3, #0]
    4394:	2b01      	cmp	r3, #1
    4396:	d105      	bne.n	43a4 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    4398:	6a3b      	ldr	r3, [r7, #32]
    439a:	681b      	ldr	r3, [r3, #0]
    439c:	220c      	movs	r2, #12
    439e:	431a      	orrs	r2, r3
    43a0:	6a3b      	ldr	r3, [r7, #32]
    43a2:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    43a4:	2327      	movs	r3, #39	; 0x27
    43a6:	18fb      	adds	r3, r7, r3
    43a8:	2200      	movs	r2, #0
    43aa:	701a      	strb	r2, [r3, #0]
    43ac:	e010      	b.n	43d0 <spi_init+0xdc>
		module->callback[i]        = NULL;
    43ae:	2327      	movs	r3, #39	; 0x27
    43b0:	18fb      	adds	r3, r7, r3
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	68fa      	ldr	r2, [r7, #12]
    43b6:	3302      	adds	r3, #2
    43b8:	009b      	lsls	r3, r3, #2
    43ba:	18d3      	adds	r3, r2, r3
    43bc:	3304      	adds	r3, #4
    43be:	2200      	movs	r2, #0
    43c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    43c2:	2327      	movs	r3, #39	; 0x27
    43c4:	18fb      	adds	r3, r7, r3
    43c6:	781a      	ldrb	r2, [r3, #0]
    43c8:	2327      	movs	r3, #39	; 0x27
    43ca:	18fb      	adds	r3, r7, r3
    43cc:	3201      	adds	r2, #1
    43ce:	701a      	strb	r2, [r3, #0]
    43d0:	2327      	movs	r3, #39	; 0x27
    43d2:	18fb      	adds	r3, r7, r3
    43d4:	781b      	ldrb	r3, [r3, #0]
    43d6:	2b06      	cmp	r3, #6
    43d8:	d9e9      	bls.n	43ae <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
    43da:	68fb      	ldr	r3, [r7, #12]
    43dc:	2200      	movs	r2, #0
    43de:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    43e0:	68fb      	ldr	r3, [r7, #12]
    43e2:	2200      	movs	r2, #0
    43e4:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    43e6:	68fb      	ldr	r3, [r7, #12]
    43e8:	2200      	movs	r2, #0
    43ea:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    43ec:	68fb      	ldr	r3, [r7, #12]
    43ee:	2200      	movs	r2, #0
    43f0:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    43f2:	68fb      	ldr	r3, [r7, #12]
    43f4:	2236      	movs	r2, #54	; 0x36
    43f6:	2100      	movs	r1, #0
    43f8:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    43fa:	68fb      	ldr	r3, [r7, #12]
    43fc:	2237      	movs	r2, #55	; 0x37
    43fe:	2100      	movs	r1, #0
    4400:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    4402:	68fb      	ldr	r3, [r7, #12]
    4404:	2238      	movs	r2, #56	; 0x38
    4406:	2100      	movs	r1, #0
    4408:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	2203      	movs	r2, #3
    440e:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    4410:	68fb      	ldr	r3, [r7, #12]
    4412:	2200      	movs	r2, #0
    4414:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	681b      	ldr	r3, [r3, #0]
    441a:	2213      	movs	r2, #19
    441c:	18bc      	adds	r4, r7, r2
    441e:	0018      	movs	r0, r3
    4420:	4b0e      	ldr	r3, [pc, #56]	; (445c <spi_init+0x168>)
    4422:	4798      	blx	r3
    4424:	0003      	movs	r3, r0
    4426:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    4428:	4a12      	ldr	r2, [pc, #72]	; (4474 <spi_init+0x180>)
    442a:	2313      	movs	r3, #19
    442c:	18fb      	adds	r3, r7, r3
    442e:	781b      	ldrb	r3, [r3, #0]
    4430:	0011      	movs	r1, r2
    4432:	0018      	movs	r0, r3
    4434:	4b10      	ldr	r3, [pc, #64]	; (4478 <spi_init+0x184>)
    4436:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    4438:	2313      	movs	r3, #19
    443a:	18fb      	adds	r3, r7, r3
    443c:	781a      	ldrb	r2, [r3, #0]
    443e:	4b0f      	ldr	r3, [pc, #60]	; (447c <spi_init+0x188>)
    4440:	0092      	lsls	r2, r2, #2
    4442:	68f9      	ldr	r1, [r7, #12]
    4444:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    4446:	687a      	ldr	r2, [r7, #4]
    4448:	68fb      	ldr	r3, [r7, #12]
    444a:	0011      	movs	r1, r2
    444c:	0018      	movs	r0, r3
    444e:	4b0c      	ldr	r3, [pc, #48]	; (4480 <spi_init+0x18c>)
    4450:	4798      	blx	r3
    4452:	0003      	movs	r3, r0
}
    4454:	0018      	movs	r0, r3
    4456:	46bd      	mov	sp, r7
    4458:	b00b      	add	sp, #44	; 0x2c
    445a:	bd90      	pop	{r4, r7, pc}
    445c:	00003a35 	.word	0x00003a35
    4460:	00003cf1 	.word	0x00003cf1
    4464:	00003cd9 	.word	0x00003cd9
    4468:	00006549 	.word	0x00006549
    446c:	0000658d 	.word	0x0000658d
    4470:	000037ed 	.word	0x000037ed
    4474:	0000494d 	.word	0x0000494d
    4478:	00003a99 	.word	0x00003a99
    447c:	200009d4 	.word	0x200009d4
    4480:	000040e5 	.word	0x000040e5

00004484 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    4484:	b590      	push	{r4, r7, lr}
    4486:	b087      	sub	sp, #28
    4488:	af00      	add	r7, sp, #0
    448a:	60f8      	str	r0, [r7, #12]
    448c:	60b9      	str	r1, [r7, #8]
    448e:	0019      	movs	r1, r3
    4490:	1dbb      	adds	r3, r7, #6
    4492:	801a      	strh	r2, [r3, #0]
    4494:	1d3b      	adds	r3, r7, #4
    4496:	1c0a      	adds	r2, r1, #0
    4498:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    449a:	68fb      	ldr	r3, [r7, #12]
    449c:	2238      	movs	r2, #56	; 0x38
    449e:	5c9b      	ldrb	r3, [r3, r2]
    44a0:	b2db      	uxtb	r3, r3
    44a2:	2b05      	cmp	r3, #5
    44a4:	d101      	bne.n	44aa <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    44a6:	2305      	movs	r3, #5
    44a8:	e07a      	b.n	45a0 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    44aa:	1dbb      	adds	r3, r7, #6
    44ac:	881b      	ldrh	r3, [r3, #0]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d101      	bne.n	44b6 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    44b2:	2317      	movs	r3, #23
    44b4:	e074      	b.n	45a0 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
    44b6:	68fb      	ldr	r3, [r7, #12]
    44b8:	79db      	ldrb	r3, [r3, #7]
    44ba:	2201      	movs	r2, #1
    44bc:	4053      	eors	r3, r2
    44be:	b2db      	uxtb	r3, r3
    44c0:	2b00      	cmp	r3, #0
    44c2:	d001      	beq.n	44c8 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    44c4:	231c      	movs	r3, #28
    44c6:	e06b      	b.n	45a0 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    44c8:	2316      	movs	r3, #22
    44ca:	18fb      	adds	r3, r7, r3
    44cc:	2200      	movs	r2, #0
    44ce:	801a      	strh	r2, [r3, #0]

	while (length--) {
    44d0:	e05e      	b.n	4590 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    44d2:	68fb      	ldr	r3, [r7, #12]
    44d4:	795b      	ldrb	r3, [r3, #5]
    44d6:	2b01      	cmp	r3, #1
    44d8:	d112      	bne.n	4500 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    44da:	46c0      	nop			; (mov r8, r8)
    44dc:	68fb      	ldr	r3, [r7, #12]
    44de:	0018      	movs	r0, r3
    44e0:	4b31      	ldr	r3, [pc, #196]	; (45a8 <spi_read_buffer_wait+0x124>)
    44e2:	4798      	blx	r3
    44e4:	0003      	movs	r3, r0
    44e6:	001a      	movs	r2, r3
    44e8:	2301      	movs	r3, #1
    44ea:	4053      	eors	r3, r2
    44ec:	b2db      	uxtb	r3, r3
    44ee:	2b00      	cmp	r3, #0
    44f0:	d1f4      	bne.n	44dc <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    44f2:	1d3b      	adds	r3, r7, #4
    44f4:	881a      	ldrh	r2, [r3, #0]
    44f6:	68fb      	ldr	r3, [r7, #12]
    44f8:	0011      	movs	r1, r2
    44fa:	0018      	movs	r0, r3
    44fc:	4b2b      	ldr	r3, [pc, #172]	; (45ac <spi_read_buffer_wait+0x128>)
    44fe:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    4500:	46c0      	nop			; (mov r8, r8)
    4502:	68fb      	ldr	r3, [r7, #12]
    4504:	0018      	movs	r0, r3
    4506:	4b2a      	ldr	r3, [pc, #168]	; (45b0 <spi_read_buffer_wait+0x12c>)
    4508:	4798      	blx	r3
    450a:	0003      	movs	r3, r0
    450c:	001a      	movs	r2, r3
    450e:	2301      	movs	r3, #1
    4510:	4053      	eors	r3, r2
    4512:	b2db      	uxtb	r3, r3
    4514:	2b00      	cmp	r3, #0
    4516:	d1f4      	bne.n	4502 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
    4518:	2312      	movs	r3, #18
    451a:	18fb      	adds	r3, r7, r3
    451c:	2200      	movs	r2, #0
    451e:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    4520:	2315      	movs	r3, #21
    4522:	18fc      	adds	r4, r7, r3
    4524:	2312      	movs	r3, #18
    4526:	18fa      	adds	r2, r7, r3
    4528:	68fb      	ldr	r3, [r7, #12]
    452a:	0011      	movs	r1, r2
    452c:	0018      	movs	r0, r3
    452e:	4b21      	ldr	r3, [pc, #132]	; (45b4 <spi_read_buffer_wait+0x130>)
    4530:	4798      	blx	r3
    4532:	0003      	movs	r3, r0
    4534:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    4536:	2315      	movs	r3, #21
    4538:	18fb      	adds	r3, r7, r3
    453a:	781b      	ldrb	r3, [r3, #0]
    453c:	2b00      	cmp	r3, #0
    453e:	d003      	beq.n	4548 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
    4540:	2315      	movs	r3, #21
    4542:	18fb      	adds	r3, r7, r3
    4544:	781b      	ldrb	r3, [r3, #0]
    4546:	e02b      	b.n	45a0 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    4548:	2316      	movs	r3, #22
    454a:	18fb      	adds	r3, r7, r3
    454c:	881b      	ldrh	r3, [r3, #0]
    454e:	2216      	movs	r2, #22
    4550:	18ba      	adds	r2, r7, r2
    4552:	1c59      	adds	r1, r3, #1
    4554:	8011      	strh	r1, [r2, #0]
    4556:	001a      	movs	r2, r3
    4558:	68bb      	ldr	r3, [r7, #8]
    455a:	189b      	adds	r3, r3, r2
    455c:	2212      	movs	r2, #18
    455e:	18ba      	adds	r2, r7, r2
    4560:	8812      	ldrh	r2, [r2, #0]
    4562:	b2d2      	uxtb	r2, r2
    4564:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4566:	68fb      	ldr	r3, [r7, #12]
    4568:	799b      	ldrb	r3, [r3, #6]
    456a:	2b01      	cmp	r3, #1
    456c:	d110      	bne.n	4590 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
    456e:	2316      	movs	r3, #22
    4570:	18fb      	adds	r3, r7, r3
    4572:	881b      	ldrh	r3, [r3, #0]
    4574:	2216      	movs	r2, #22
    4576:	18ba      	adds	r2, r7, r2
    4578:	1c59      	adds	r1, r3, #1
    457a:	8011      	strh	r1, [r2, #0]
    457c:	001a      	movs	r2, r3
    457e:	68bb      	ldr	r3, [r7, #8]
    4580:	189b      	adds	r3, r3, r2
    4582:	2212      	movs	r2, #18
    4584:	18ba      	adds	r2, r7, r2
    4586:	8812      	ldrh	r2, [r2, #0]
    4588:	0a12      	lsrs	r2, r2, #8
    458a:	b292      	uxth	r2, r2
    458c:	b2d2      	uxtb	r2, r2
    458e:	701a      	strb	r2, [r3, #0]
	while (length--) {
    4590:	1dbb      	adds	r3, r7, #6
    4592:	881b      	ldrh	r3, [r3, #0]
    4594:	1dba      	adds	r2, r7, #6
    4596:	1e59      	subs	r1, r3, #1
    4598:	8011      	strh	r1, [r2, #0]
    459a:	2b00      	cmp	r3, #0
    459c:	d199      	bne.n	44d2 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    459e:	2300      	movs	r3, #0
}
    45a0:	0018      	movs	r0, r3
    45a2:	46bd      	mov	sp, r7
    45a4:	b007      	add	sp, #28
    45a6:	bd90      	pop	{r4, r7, pc}
    45a8:	00003ebd 	.word	0x00003ebd
    45ac:	00003f0d 	.word	0x00003f0d
    45b0:	00003ee5 	.word	0x00003ee5
    45b4:	00003f55 	.word	0x00003f55

000045b8 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    45b8:	b580      	push	{r7, lr}
    45ba:	b086      	sub	sp, #24
    45bc:	af00      	add	r7, sp, #0
    45be:	60f8      	str	r0, [r7, #12]
    45c0:	60b9      	str	r1, [r7, #8]
    45c2:	1dfb      	adds	r3, r7, #7
    45c4:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    45c6:	68fb      	ldr	r3, [r7, #12]
    45c8:	795b      	ldrb	r3, [r3, #5]
    45ca:	2b01      	cmp	r3, #1
    45cc:	d001      	beq.n	45d2 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    45ce:	2315      	movs	r3, #21
    45d0:	e05c      	b.n	468c <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    45d2:	68fb      	ldr	r3, [r7, #12]
    45d4:	7a1b      	ldrb	r3, [r3, #8]
    45d6:	2201      	movs	r2, #1
    45d8:	4053      	eors	r3, r2
    45da:	b2db      	uxtb	r3, r3
    45dc:	2b00      	cmp	r3, #0
    45de:	d054      	beq.n	468a <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
    45e0:	1dfb      	adds	r3, r7, #7
    45e2:	781b      	ldrb	r3, [r3, #0]
    45e4:	2b00      	cmp	r3, #0
    45e6:	d04a      	beq.n	467e <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    45e8:	68bb      	ldr	r3, [r7, #8]
    45ea:	785b      	ldrb	r3, [r3, #1]
    45ec:	2b00      	cmp	r3, #0
    45ee:	d03f      	beq.n	4670 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    45f0:	68fb      	ldr	r3, [r7, #12]
    45f2:	0018      	movs	r0, r3
    45f4:	4b27      	ldr	r3, [pc, #156]	; (4694 <spi_select_slave+0xdc>)
    45f6:	4798      	blx	r3
    45f8:	0003      	movs	r3, r0
    45fa:	001a      	movs	r2, r3
    45fc:	2301      	movs	r3, #1
    45fe:	4053      	eors	r3, r2
    4600:	b2db      	uxtb	r3, r3
    4602:	2b00      	cmp	r3, #0
    4604:	d007      	beq.n	4616 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    4606:	68bb      	ldr	r3, [r7, #8]
    4608:	781b      	ldrb	r3, [r3, #0]
    460a:	2101      	movs	r1, #1
    460c:	0018      	movs	r0, r3
    460e:	4b22      	ldr	r3, [pc, #136]	; (4698 <spi_select_slave+0xe0>)
    4610:	4798      	blx	r3
					return STATUS_BUSY;
    4612:	2305      	movs	r3, #5
    4614:	e03a      	b.n	468c <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4616:	68bb      	ldr	r3, [r7, #8]
    4618:	781b      	ldrb	r3, [r3, #0]
    461a:	2100      	movs	r1, #0
    461c:	0018      	movs	r0, r3
    461e:	4b1e      	ldr	r3, [pc, #120]	; (4698 <spi_select_slave+0xe0>)
    4620:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    4622:	68bb      	ldr	r3, [r7, #8]
    4624:	789b      	ldrb	r3, [r3, #2]
    4626:	b29a      	uxth	r2, r3
    4628:	68fb      	ldr	r3, [r7, #12]
    462a:	0011      	movs	r1, r2
    462c:	0018      	movs	r0, r3
    462e:	4b1b      	ldr	r3, [pc, #108]	; (469c <spi_select_slave+0xe4>)
    4630:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    4632:	68fb      	ldr	r3, [r7, #12]
    4634:	79db      	ldrb	r3, [r3, #7]
    4636:	2201      	movs	r2, #1
    4638:	4053      	eors	r3, r2
    463a:	b2db      	uxtb	r3, r3
    463c:	2b00      	cmp	r3, #0
    463e:	d024      	beq.n	468a <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    4640:	46c0      	nop			; (mov r8, r8)
    4642:	68fb      	ldr	r3, [r7, #12]
    4644:	0018      	movs	r0, r3
    4646:	4b16      	ldr	r3, [pc, #88]	; (46a0 <spi_select_slave+0xe8>)
    4648:	4798      	blx	r3
    464a:	0003      	movs	r3, r0
    464c:	001a      	movs	r2, r3
    464e:	2301      	movs	r3, #1
    4650:	4053      	eors	r3, r2
    4652:	b2db      	uxtb	r3, r3
    4654:	2b00      	cmp	r3, #0
    4656:	d1f4      	bne.n	4642 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
    4658:	2316      	movs	r3, #22
    465a:	18fb      	adds	r3, r7, r3
    465c:	2200      	movs	r2, #0
    465e:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    4660:	2316      	movs	r3, #22
    4662:	18fa      	adds	r2, r7, r3
    4664:	68fb      	ldr	r3, [r7, #12]
    4666:	0011      	movs	r1, r2
    4668:	0018      	movs	r0, r3
    466a:	4b0e      	ldr	r3, [pc, #56]	; (46a4 <spi_select_slave+0xec>)
    466c:	4798      	blx	r3
    466e:	e00c      	b.n	468a <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    4670:	68bb      	ldr	r3, [r7, #8]
    4672:	781b      	ldrb	r3, [r3, #0]
    4674:	2100      	movs	r1, #0
    4676:	0018      	movs	r0, r3
    4678:	4b07      	ldr	r3, [pc, #28]	; (4698 <spi_select_slave+0xe0>)
    467a:	4798      	blx	r3
    467c:	e005      	b.n	468a <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    467e:	68bb      	ldr	r3, [r7, #8]
    4680:	781b      	ldrb	r3, [r3, #0]
    4682:	2101      	movs	r1, #1
    4684:	0018      	movs	r0, r3
    4686:	4b04      	ldr	r3, [pc, #16]	; (4698 <spi_select_slave+0xe0>)
    4688:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    468a:	2300      	movs	r3, #0
}
    468c:	0018      	movs	r0, r3
    468e:	46bd      	mov	sp, r7
    4690:	b006      	add	sp, #24
    4692:	bd80      	pop	{r7, pc}
    4694:	00003ebd 	.word	0x00003ebd
    4698:	00003c85 	.word	0x00003c85
    469c:	00003f0d 	.word	0x00003f0d
    46a0:	00003ee5 	.word	0x00003ee5
    46a4:	00003f55 	.word	0x00003f55

000046a8 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    46a8:	b580      	push	{r7, lr}
    46aa:	b086      	sub	sp, #24
    46ac:	af00      	add	r7, sp, #0
    46ae:	60f8      	str	r0, [r7, #12]
    46b0:	60b9      	str	r1, [r7, #8]
    46b2:	1dbb      	adds	r3, r7, #6
    46b4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    46b6:	68fb      	ldr	r3, [r7, #12]
    46b8:	2238      	movs	r2, #56	; 0x38
    46ba:	5c9b      	ldrb	r3, [r3, r2]
    46bc:	b2db      	uxtb	r3, r3
    46be:	2b05      	cmp	r3, #5
    46c0:	d101      	bne.n	46c6 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    46c2:	2305      	movs	r3, #5
    46c4:	e087      	b.n	47d6 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
    46c6:	1dbb      	adds	r3, r7, #6
    46c8:	881b      	ldrh	r3, [r3, #0]
    46ca:	2b00      	cmp	r3, #0
    46cc:	d101      	bne.n	46d2 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    46ce:	2317      	movs	r3, #23
    46d0:	e081      	b.n	47d6 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    46d2:	2316      	movs	r3, #22
    46d4:	18fb      	adds	r3, r7, r3
    46d6:	2200      	movs	r2, #0
    46d8:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    46da:	2314      	movs	r3, #20
    46dc:	18fb      	adds	r3, r7, r3
    46de:	1dba      	adds	r2, r7, #6
    46e0:	8812      	ldrh	r2, [r2, #0]
    46e2:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    46e4:	e05f      	b.n	47a6 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    46e6:	46c0      	nop			; (mov r8, r8)
    46e8:	68fb      	ldr	r3, [r7, #12]
    46ea:	0018      	movs	r0, r3
    46ec:	4b3c      	ldr	r3, [pc, #240]	; (47e0 <spi_write_buffer_wait+0x138>)
    46ee:	4798      	blx	r3
    46f0:	0003      	movs	r3, r0
    46f2:	001a      	movs	r2, r3
    46f4:	2301      	movs	r3, #1
    46f6:	4053      	eors	r3, r2
    46f8:	b2db      	uxtb	r3, r3
    46fa:	2b00      	cmp	r3, #0
    46fc:	d1f4      	bne.n	46e8 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    46fe:	2316      	movs	r3, #22
    4700:	18fb      	adds	r3, r7, r3
    4702:	881b      	ldrh	r3, [r3, #0]
    4704:	2216      	movs	r2, #22
    4706:	18ba      	adds	r2, r7, r2
    4708:	1c59      	adds	r1, r3, #1
    470a:	8011      	strh	r1, [r2, #0]
    470c:	001a      	movs	r2, r3
    470e:	68bb      	ldr	r3, [r7, #8]
    4710:	189b      	adds	r3, r3, r2
    4712:	781a      	ldrb	r2, [r3, #0]
    4714:	2312      	movs	r3, #18
    4716:	18fb      	adds	r3, r7, r3
    4718:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    471a:	68fb      	ldr	r3, [r7, #12]
    471c:	799b      	ldrb	r3, [r3, #6]
    471e:	2b01      	cmp	r3, #1
    4720:	d115      	bne.n	474e <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
    4722:	2316      	movs	r3, #22
    4724:	18fb      	adds	r3, r7, r3
    4726:	881b      	ldrh	r3, [r3, #0]
    4728:	2216      	movs	r2, #22
    472a:	18ba      	adds	r2, r7, r2
    472c:	1c59      	adds	r1, r3, #1
    472e:	8011      	strh	r1, [r2, #0]
    4730:	001a      	movs	r2, r3
    4732:	68bb      	ldr	r3, [r7, #8]
    4734:	189b      	adds	r3, r3, r2
    4736:	781b      	ldrb	r3, [r3, #0]
    4738:	021b      	lsls	r3, r3, #8
    473a:	b21a      	sxth	r2, r3
    473c:	2312      	movs	r3, #18
    473e:	18fb      	adds	r3, r7, r3
    4740:	2100      	movs	r1, #0
    4742:	5e5b      	ldrsh	r3, [r3, r1]
    4744:	4313      	orrs	r3, r2
    4746:	b21a      	sxth	r2, r3
    4748:	2312      	movs	r3, #18
    474a:	18fb      	adds	r3, r7, r3
    474c:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    474e:	2312      	movs	r3, #18
    4750:	18fb      	adds	r3, r7, r3
    4752:	881a      	ldrh	r2, [r3, #0]
    4754:	68fb      	ldr	r3, [r7, #12]
    4756:	0011      	movs	r1, r2
    4758:	0018      	movs	r0, r3
    475a:	4b22      	ldr	r3, [pc, #136]	; (47e4 <spi_write_buffer_wait+0x13c>)
    475c:	4798      	blx	r3

		if (module->receiver_enabled) {
    475e:	68fb      	ldr	r3, [r7, #12]
    4760:	79db      	ldrb	r3, [r3, #7]
    4762:	2214      	movs	r2, #20
    4764:	18ba      	adds	r2, r7, r2
    4766:	2114      	movs	r1, #20
    4768:	1879      	adds	r1, r7, r1
    476a:	8809      	ldrh	r1, [r1, #0]
    476c:	8011      	strh	r1, [r2, #0]
    476e:	2b00      	cmp	r3, #0
    4770:	d019      	beq.n	47a6 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    4772:	46c0      	nop			; (mov r8, r8)
    4774:	68fb      	ldr	r3, [r7, #12]
    4776:	0018      	movs	r0, r3
    4778:	4b1b      	ldr	r3, [pc, #108]	; (47e8 <spi_write_buffer_wait+0x140>)
    477a:	4798      	blx	r3
    477c:	0003      	movs	r3, r0
    477e:	001a      	movs	r2, r3
    4780:	2301      	movs	r3, #1
    4782:	4053      	eors	r3, r2
    4784:	b2db      	uxtb	r3, r3
    4786:	2b00      	cmp	r3, #0
    4788:	d1f4      	bne.n	4774 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    478a:	2310      	movs	r3, #16
    478c:	18fa      	adds	r2, r7, r3
    478e:	68fb      	ldr	r3, [r7, #12]
    4790:	0011      	movs	r1, r2
    4792:	0018      	movs	r0, r3
    4794:	4b15      	ldr	r3, [pc, #84]	; (47ec <spi_write_buffer_wait+0x144>)
    4796:	4798      	blx	r3
			flush_length--;
    4798:	2314      	movs	r3, #20
    479a:	18fb      	adds	r3, r7, r3
    479c:	881a      	ldrh	r2, [r3, #0]
    479e:	2314      	movs	r3, #20
    47a0:	18fb      	adds	r3, r7, r3
    47a2:	3a01      	subs	r2, #1
    47a4:	801a      	strh	r2, [r3, #0]
	while (length--) {
    47a6:	1dbb      	adds	r3, r7, #6
    47a8:	881b      	ldrh	r3, [r3, #0]
    47aa:	1dba      	adds	r2, r7, #6
    47ac:	1e59      	subs	r1, r3, #1
    47ae:	8011      	strh	r1, [r2, #0]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d198      	bne.n	46e6 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    47b4:	68fb      	ldr	r3, [r7, #12]
    47b6:	795b      	ldrb	r3, [r3, #5]
    47b8:	2b01      	cmp	r3, #1
    47ba:	d10b      	bne.n	47d4 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    47bc:	46c0      	nop			; (mov r8, r8)
    47be:	68fb      	ldr	r3, [r7, #12]
    47c0:	0018      	movs	r0, r3
    47c2:	4b0b      	ldr	r3, [pc, #44]	; (47f0 <spi_write_buffer_wait+0x148>)
    47c4:	4798      	blx	r3
    47c6:	0003      	movs	r3, r0
    47c8:	001a      	movs	r2, r3
    47ca:	2301      	movs	r3, #1
    47cc:	4053      	eors	r3, r2
    47ce:	b2db      	uxtb	r3, r3
    47d0:	2b00      	cmp	r3, #0
    47d2:	d1f4      	bne.n	47be <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    47d4:	2300      	movs	r3, #0
}
    47d6:	0018      	movs	r0, r3
    47d8:	46bd      	mov	sp, r7
    47da:	b006      	add	sp, #24
    47dc:	bd80      	pop	{r7, pc}
    47de:	46c0      	nop			; (mov r8, r8)
    47e0:	00003ebd 	.word	0x00003ebd
    47e4:	00003f0d 	.word	0x00003f0d
    47e8:	00003ee5 	.word	0x00003ee5
    47ec:	00003f55 	.word	0x00003f55
    47f0:	00003e95 	.word	0x00003e95

000047f4 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    47f4:	b580      	push	{r7, lr}
    47f6:	b084      	sub	sp, #16
    47f8:	af00      	add	r7, sp, #0
    47fa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    47fc:	687b      	ldr	r3, [r7, #4]
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    4802:	687b      	ldr	r3, [r7, #4]
    4804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4806:	781b      	ldrb	r3, [r3, #0]
    4808:	b2da      	uxtb	r2, r3
    480a:	230e      	movs	r3, #14
    480c:	18fb      	adds	r3, r7, r3
    480e:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    4810:	687b      	ldr	r3, [r7, #4]
    4812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4814:	1c5a      	adds	r2, r3, #1
    4816:	687b      	ldr	r3, [r7, #4]
    4818:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    481a:	687b      	ldr	r3, [r7, #4]
    481c:	799b      	ldrb	r3, [r3, #6]
    481e:	2b01      	cmp	r3, #1
    4820:	d113      	bne.n	484a <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    4822:	687b      	ldr	r3, [r7, #4]
    4824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4826:	781b      	ldrb	r3, [r3, #0]
    4828:	b2db      	uxtb	r3, r3
    482a:	021b      	lsls	r3, r3, #8
    482c:	b21a      	sxth	r2, r3
    482e:	230e      	movs	r3, #14
    4830:	18fb      	adds	r3, r7, r3
    4832:	2100      	movs	r1, #0
    4834:	5e5b      	ldrsh	r3, [r3, r1]
    4836:	4313      	orrs	r3, r2
    4838:	b21a      	sxth	r2, r3
    483a:	230e      	movs	r3, #14
    483c:	18fb      	adds	r3, r7, r3
    483e:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    4840:	687b      	ldr	r3, [r7, #4]
    4842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4844:	1c5a      	adds	r2, r3, #1
    4846:	687b      	ldr	r3, [r7, #4]
    4848:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    484a:	230e      	movs	r3, #14
    484c:	18fb      	adds	r3, r7, r3
    484e:	881b      	ldrh	r3, [r3, #0]
    4850:	05db      	lsls	r3, r3, #23
    4852:	0dda      	lsrs	r2, r3, #23
    4854:	68bb      	ldr	r3, [r7, #8]
    4856:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    4858:	687b      	ldr	r3, [r7, #4]
    485a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    485c:	b29b      	uxth	r3, r3
    485e:	3b01      	subs	r3, #1
    4860:	b29a      	uxth	r2, r3
    4862:	687b      	ldr	r3, [r7, #4]
    4864:	869a      	strh	r2, [r3, #52]	; 0x34
}
    4866:	46c0      	nop			; (mov r8, r8)
    4868:	46bd      	mov	sp, r7
    486a:	b004      	add	sp, #16
    486c:	bd80      	pop	{r7, pc}
	...

00004870 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    4870:	b580      	push	{r7, lr}
    4872:	b084      	sub	sp, #16
    4874:	af00      	add	r7, sp, #0
    4876:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4878:	687b      	ldr	r3, [r7, #4]
    487a:	681b      	ldr	r3, [r3, #0]
    487c:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    487e:	4b08      	ldr	r3, [pc, #32]	; (48a0 <_spi_write_dummy+0x30>)
    4880:	881b      	ldrh	r3, [r3, #0]
    4882:	001a      	movs	r2, r3
    4884:	68fb      	ldr	r3, [r7, #12]
    4886:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    4888:	687b      	ldr	r3, [r7, #4]
    488a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    488c:	b29b      	uxth	r3, r3
    488e:	3b01      	subs	r3, #1
    4890:	b29a      	uxth	r2, r3
    4892:	687b      	ldr	r3, [r7, #4]
    4894:	865a      	strh	r2, [r3, #50]	; 0x32
}
    4896:	46c0      	nop			; (mov r8, r8)
    4898:	46bd      	mov	sp, r7
    489a:	b004      	add	sp, #16
    489c:	bd80      	pop	{r7, pc}
    489e:	46c0      	nop			; (mov r8, r8)
    48a0:	200009ec 	.word	0x200009ec

000048a4 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    48a4:	b580      	push	{r7, lr}
    48a6:	b084      	sub	sp, #16
    48a8:	af00      	add	r7, sp, #0
    48aa:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    48ac:	687b      	ldr	r3, [r7, #4]
    48ae:	681b      	ldr	r3, [r3, #0]
    48b0:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    48b2:	230a      	movs	r3, #10
    48b4:	18fb      	adds	r3, r7, r3
    48b6:	2200      	movs	r2, #0
    48b8:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    48ba:	68fb      	ldr	r3, [r7, #12]
    48bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    48be:	230a      	movs	r3, #10
    48c0:	18fb      	adds	r3, r7, r3
    48c2:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    48c4:	687b      	ldr	r3, [r7, #4]
    48c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    48c8:	b29b      	uxth	r3, r3
    48ca:	3b01      	subs	r3, #1
    48cc:	b29a      	uxth	r2, r3
    48ce:	687b      	ldr	r3, [r7, #4]
    48d0:	865a      	strh	r2, [r3, #50]	; 0x32
}
    48d2:	46c0      	nop			; (mov r8, r8)
    48d4:	46bd      	mov	sp, r7
    48d6:	b004      	add	sp, #16
    48d8:	bd80      	pop	{r7, pc}

000048da <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    48da:	b580      	push	{r7, lr}
    48dc:	b084      	sub	sp, #16
    48de:	af00      	add	r7, sp, #0
    48e0:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	681b      	ldr	r3, [r3, #0]
    48e6:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    48e8:	68fb      	ldr	r3, [r7, #12]
    48ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48ec:	b29a      	uxth	r2, r3
    48ee:	230a      	movs	r3, #10
    48f0:	18fb      	adds	r3, r7, r3
    48f2:	05d2      	lsls	r2, r2, #23
    48f4:	0dd2      	lsrs	r2, r2, #23
    48f6:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    48f8:	687b      	ldr	r3, [r7, #4]
    48fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    48fc:	220a      	movs	r2, #10
    48fe:	18ba      	adds	r2, r7, r2
    4900:	8812      	ldrh	r2, [r2, #0]
    4902:	b2d2      	uxtb	r2, r2
    4904:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    4906:	687b      	ldr	r3, [r7, #4]
    4908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    490a:	1c5a      	adds	r2, r3, #1
    490c:	687b      	ldr	r3, [r7, #4]
    490e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    4910:	687b      	ldr	r3, [r7, #4]
    4912:	799b      	ldrb	r3, [r3, #6]
    4914:	2b01      	cmp	r3, #1
    4916:	d10d      	bne.n	4934 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    4918:	687b      	ldr	r3, [r7, #4]
    491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    491c:	220a      	movs	r2, #10
    491e:	18ba      	adds	r2, r7, r2
    4920:	8812      	ldrh	r2, [r2, #0]
    4922:	0a12      	lsrs	r2, r2, #8
    4924:	b292      	uxth	r2, r2
    4926:	b2d2      	uxtb	r2, r2
    4928:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    492e:	1c5a      	adds	r2, r3, #1
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4938:	b29b      	uxth	r3, r3
    493a:	3b01      	subs	r3, #1
    493c:	b29a      	uxth	r2, r3
    493e:	687b      	ldr	r3, [r7, #4]
    4940:	861a      	strh	r2, [r3, #48]	; 0x30
}
    4942:	46c0      	nop			; (mov r8, r8)
    4944:	46bd      	mov	sp, r7
    4946:	b004      	add	sp, #16
    4948:	bd80      	pop	{r7, pc}
	...

0000494c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    494c:	b580      	push	{r7, lr}
    494e:	b086      	sub	sp, #24
    4950:	af00      	add	r7, sp, #0
    4952:	0002      	movs	r2, r0
    4954:	1dfb      	adds	r3, r7, #7
    4956:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    4958:	1dfb      	adds	r3, r7, #7
    495a:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    495c:	4b96      	ldr	r3, [pc, #600]	; (4bb8 <_spi_interrupt_handler+0x26c>)
    495e:	0092      	lsls	r2, r2, #2
    4960:	58d3      	ldr	r3, [r2, r3]
    4962:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    4964:	697b      	ldr	r3, [r7, #20]
    4966:	681b      	ldr	r3, [r3, #0]
    4968:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    496a:	697b      	ldr	r3, [r7, #20]
    496c:	2237      	movs	r2, #55	; 0x37
    496e:	5c9a      	ldrb	r2, [r3, r2]
    4970:	697b      	ldr	r3, [r7, #20]
    4972:	2136      	movs	r1, #54	; 0x36
    4974:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    4976:	230f      	movs	r3, #15
    4978:	18fb      	adds	r3, r7, r3
    497a:	400a      	ands	r2, r1
    497c:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    497e:	693b      	ldr	r3, [r7, #16]
    4980:	7e1b      	ldrb	r3, [r3, #24]
    4982:	b2da      	uxtb	r2, r3
    4984:	230c      	movs	r3, #12
    4986:	18fb      	adds	r3, r7, r3
    4988:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    498a:	693b      	ldr	r3, [r7, #16]
    498c:	7d9b      	ldrb	r3, [r3, #22]
    498e:	b2db      	uxtb	r3, r3
    4990:	b29a      	uxth	r2, r3
    4992:	230c      	movs	r3, #12
    4994:	18fb      	adds	r3, r7, r3
    4996:	210c      	movs	r1, #12
    4998:	1879      	adds	r1, r7, r1
    499a:	8809      	ldrh	r1, [r1, #0]
    499c:	400a      	ands	r2, r1
    499e:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    49a0:	230c      	movs	r3, #12
    49a2:	18fb      	adds	r3, r7, r3
    49a4:	881b      	ldrh	r3, [r3, #0]
    49a6:	2201      	movs	r2, #1
    49a8:	4013      	ands	r3, r2
    49aa:	d038      	beq.n	4a1e <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    49ac:	697b      	ldr	r3, [r7, #20]
    49ae:	795b      	ldrb	r3, [r3, #5]
    49b0:	2b01      	cmp	r3, #1
    49b2:	d110      	bne.n	49d6 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
    49b4:	697b      	ldr	r3, [r7, #20]
    49b6:	7a5b      	ldrb	r3, [r3, #9]
    49b8:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    49ba:	2b00      	cmp	r3, #0
    49bc:	d10b      	bne.n	49d6 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    49be:	697b      	ldr	r3, [r7, #20]
    49c0:	0018      	movs	r0, r3
    49c2:	4b7e      	ldr	r3, [pc, #504]	; (4bbc <_spi_interrupt_handler+0x270>)
    49c4:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    49c6:	697b      	ldr	r3, [r7, #20]
    49c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    49ca:	b29b      	uxth	r3, r3
    49cc:	2b00      	cmp	r3, #0
    49ce:	d102      	bne.n	49d6 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    49d0:	693b      	ldr	r3, [r7, #16]
    49d2:	2201      	movs	r2, #1
    49d4:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    49d6:	697b      	ldr	r3, [r7, #20]
    49d8:	795b      	ldrb	r3, [r3, #5]
		if (0
    49da:	2b01      	cmp	r3, #1
    49dc:	d11f      	bne.n	4a1e <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
    49de:	697b      	ldr	r3, [r7, #20]
    49e0:	7a5b      	ldrb	r3, [r3, #9]
    49e2:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    49e4:	2b00      	cmp	r3, #0
    49e6:	d01a      	beq.n	4a1e <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    49e8:	697b      	ldr	r3, [r7, #20]
    49ea:	0018      	movs	r0, r3
    49ec:	4b74      	ldr	r3, [pc, #464]	; (4bc0 <_spi_interrupt_handler+0x274>)
    49ee:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    49f0:	697b      	ldr	r3, [r7, #20]
    49f2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    49f4:	b29b      	uxth	r3, r3
    49f6:	2b00      	cmp	r3, #0
    49f8:	d111      	bne.n	4a1e <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    49fa:	693b      	ldr	r3, [r7, #16]
    49fc:	2201      	movs	r2, #1
    49fe:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    4a00:	697b      	ldr	r3, [r7, #20]
    4a02:	7a5b      	ldrb	r3, [r3, #9]
    4a04:	b2db      	uxtb	r3, r3
    4a06:	2b01      	cmp	r3, #1
    4a08:	d109      	bne.n	4a1e <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
    4a0a:	697b      	ldr	r3, [r7, #20]
    4a0c:	79db      	ldrb	r3, [r3, #7]
    4a0e:	2201      	movs	r2, #1
    4a10:	4053      	eors	r3, r2
    4a12:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    4a14:	2b00      	cmp	r3, #0
    4a16:	d002      	beq.n	4a1e <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4a18:	693b      	ldr	r3, [r7, #16]
    4a1a:	2202      	movs	r2, #2
    4a1c:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    4a1e:	230c      	movs	r3, #12
    4a20:	18fb      	adds	r3, r7, r3
    4a22:	881b      	ldrh	r3, [r3, #0]
    4a24:	2204      	movs	r2, #4
    4a26:	4013      	ands	r3, r2
    4a28:	d100      	bne.n	4a2c <_spi_interrupt_handler+0xe0>
    4a2a:	e07e      	b.n	4b2a <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    4a2c:	693b      	ldr	r3, [r7, #16]
    4a2e:	8b5b      	ldrh	r3, [r3, #26]
    4a30:	b29b      	uxth	r3, r3
    4a32:	001a      	movs	r2, r3
    4a34:	2304      	movs	r3, #4
    4a36:	4013      	ands	r3, r2
    4a38:	d022      	beq.n	4a80 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
    4a3a:	697b      	ldr	r3, [r7, #20]
    4a3c:	7a5b      	ldrb	r3, [r3, #9]
    4a3e:	b2db      	uxtb	r3, r3
    4a40:	2b01      	cmp	r3, #1
    4a42:	d014      	beq.n	4a6e <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    4a44:	697b      	ldr	r3, [r7, #20]
    4a46:	2238      	movs	r2, #56	; 0x38
    4a48:	211e      	movs	r1, #30
    4a4a:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    4a4c:	697b      	ldr	r3, [r7, #20]
    4a4e:	2203      	movs	r2, #3
    4a50:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    4a52:	693b      	ldr	r3, [r7, #16]
    4a54:	2205      	movs	r2, #5
    4a56:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    4a58:	230f      	movs	r3, #15
    4a5a:	18fb      	adds	r3, r7, r3
    4a5c:	781b      	ldrb	r3, [r3, #0]
    4a5e:	2208      	movs	r2, #8
    4a60:	4013      	ands	r3, r2
    4a62:	d004      	beq.n	4a6e <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    4a64:	697b      	ldr	r3, [r7, #20]
    4a66:	699b      	ldr	r3, [r3, #24]
    4a68:	697a      	ldr	r2, [r7, #20]
    4a6a:	0010      	movs	r0, r2
    4a6c:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    4a6e:	693b      	ldr	r3, [r7, #16]
    4a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4a72:	230a      	movs	r3, #10
    4a74:	18fb      	adds	r3, r7, r3
    4a76:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    4a78:	693b      	ldr	r3, [r7, #16]
    4a7a:	2204      	movs	r2, #4
    4a7c:	835a      	strh	r2, [r3, #26]
    4a7e:	e054      	b.n	4b2a <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    4a80:	697b      	ldr	r3, [r7, #20]
    4a82:	7a5b      	ldrb	r3, [r3, #9]
    4a84:	b2db      	uxtb	r3, r3
    4a86:	2b01      	cmp	r3, #1
    4a88:	d11e      	bne.n	4ac8 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    4a8a:	697b      	ldr	r3, [r7, #20]
    4a8c:	0018      	movs	r0, r3
    4a8e:	4b4d      	ldr	r3, [pc, #308]	; (4bc4 <_spi_interrupt_handler+0x278>)
    4a90:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    4a92:	697b      	ldr	r3, [r7, #20]
    4a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    4a96:	b29b      	uxth	r3, r3
    4a98:	2b00      	cmp	r3, #0
    4a9a:	d146      	bne.n	4b2a <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4a9c:	693b      	ldr	r3, [r7, #16]
    4a9e:	2204      	movs	r2, #4
    4aa0:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    4aa2:	697b      	ldr	r3, [r7, #20]
    4aa4:	2238      	movs	r2, #56	; 0x38
    4aa6:	2100      	movs	r1, #0
    4aa8:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    4aaa:	697b      	ldr	r3, [r7, #20]
    4aac:	2203      	movs	r2, #3
    4aae:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    4ab0:	230f      	movs	r3, #15
    4ab2:	18fb      	adds	r3, r7, r3
    4ab4:	781b      	ldrb	r3, [r3, #0]
    4ab6:	2201      	movs	r2, #1
    4ab8:	4013      	ands	r3, r2
    4aba:	d036      	beq.n	4b2a <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    4abc:	697b      	ldr	r3, [r7, #20]
    4abe:	68db      	ldr	r3, [r3, #12]
    4ac0:	697a      	ldr	r2, [r7, #20]
    4ac2:	0010      	movs	r0, r2
    4ac4:	4798      	blx	r3
    4ac6:	e030      	b.n	4b2a <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    4ac8:	697b      	ldr	r3, [r7, #20]
    4aca:	0018      	movs	r0, r3
    4acc:	4b3e      	ldr	r3, [pc, #248]	; (4bc8 <_spi_interrupt_handler+0x27c>)
    4ace:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    4ad0:	697b      	ldr	r3, [r7, #20]
    4ad2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    4ad4:	b29b      	uxth	r3, r3
    4ad6:	2b00      	cmp	r3, #0
    4ad8:	d127      	bne.n	4b2a <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
    4ada:	697b      	ldr	r3, [r7, #20]
    4adc:	2238      	movs	r2, #56	; 0x38
    4ade:	2100      	movs	r1, #0
    4ae0:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    4ae2:	693b      	ldr	r3, [r7, #16]
    4ae4:	2204      	movs	r2, #4
    4ae6:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    4ae8:	697b      	ldr	r3, [r7, #20]
    4aea:	7a5b      	ldrb	r3, [r3, #9]
    4aec:	b2db      	uxtb	r3, r3
    4aee:	2b02      	cmp	r3, #2
    4af0:	d10b      	bne.n	4b0a <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    4af2:	230f      	movs	r3, #15
    4af4:	18fb      	adds	r3, r7, r3
    4af6:	781b      	ldrb	r3, [r3, #0]
    4af8:	2204      	movs	r2, #4
    4afa:	4013      	ands	r3, r2
    4afc:	d015      	beq.n	4b2a <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    4afe:	697b      	ldr	r3, [r7, #20]
    4b00:	695b      	ldr	r3, [r3, #20]
    4b02:	697a      	ldr	r2, [r7, #20]
    4b04:	0010      	movs	r0, r2
    4b06:	4798      	blx	r3
    4b08:	e00f      	b.n	4b2a <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    4b0a:	697b      	ldr	r3, [r7, #20]
    4b0c:	7a5b      	ldrb	r3, [r3, #9]
    4b0e:	b2db      	uxtb	r3, r3
    4b10:	2b00      	cmp	r3, #0
    4b12:	d10a      	bne.n	4b2a <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    4b14:	230f      	movs	r3, #15
    4b16:	18fb      	adds	r3, r7, r3
    4b18:	781b      	ldrb	r3, [r3, #0]
    4b1a:	2202      	movs	r2, #2
    4b1c:	4013      	ands	r3, r2
    4b1e:	d004      	beq.n	4b2a <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    4b20:	697b      	ldr	r3, [r7, #20]
    4b22:	691b      	ldr	r3, [r3, #16]
    4b24:	697a      	ldr	r2, [r7, #20]
    4b26:	0010      	movs	r0, r2
    4b28:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    4b2a:	230c      	movs	r3, #12
    4b2c:	18fb      	adds	r3, r7, r3
    4b2e:	881b      	ldrh	r3, [r3, #0]
    4b30:	2202      	movs	r2, #2
    4b32:	4013      	ands	r3, r2
    4b34:	d024      	beq.n	4b80 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    4b36:	697b      	ldr	r3, [r7, #20]
    4b38:	795b      	ldrb	r3, [r3, #5]
    4b3a:	2b01      	cmp	r3, #1
    4b3c:	d120      	bne.n	4b80 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4b3e:	697b      	ldr	r3, [r7, #20]
    4b40:	7a5b      	ldrb	r3, [r3, #9]
    4b42:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    4b44:	2b01      	cmp	r3, #1
    4b46:	d11b      	bne.n	4b80 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    4b48:	697b      	ldr	r3, [r7, #20]
    4b4a:	79db      	ldrb	r3, [r3, #7]
    4b4c:	2201      	movs	r2, #1
    4b4e:	4053      	eors	r3, r2
    4b50:	b2db      	uxtb	r3, r3
    4b52:	2b00      	cmp	r3, #0
    4b54:	d014      	beq.n	4b80 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    4b56:	693b      	ldr	r3, [r7, #16]
    4b58:	2202      	movs	r2, #2
    4b5a:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    4b5c:	697b      	ldr	r3, [r7, #20]
    4b5e:	2203      	movs	r2, #3
    4b60:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    4b62:	697b      	ldr	r3, [r7, #20]
    4b64:	2238      	movs	r2, #56	; 0x38
    4b66:	2100      	movs	r1, #0
    4b68:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    4b6a:	230f      	movs	r3, #15
    4b6c:	18fb      	adds	r3, r7, r3
    4b6e:	781b      	ldrb	r3, [r3, #0]
    4b70:	2201      	movs	r2, #1
    4b72:	4013      	ands	r3, r2
    4b74:	d004      	beq.n	4b80 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    4b76:	697b      	ldr	r3, [r7, #20]
    4b78:	68db      	ldr	r3, [r3, #12]
    4b7a:	697a      	ldr	r2, [r7, #20]
    4b7c:	0010      	movs	r0, r2
    4b7e:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    4b80:	230c      	movs	r3, #12
    4b82:	18fb      	adds	r3, r7, r3
    4b84:	881b      	ldrh	r3, [r3, #0]
    4b86:	2280      	movs	r2, #128	; 0x80
    4b88:	4013      	ands	r3, r2
    4b8a:	d010      	beq.n	4bae <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4b8c:	693b      	ldr	r3, [r7, #16]
    4b8e:	2280      	movs	r2, #128	; 0x80
    4b90:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    4b92:	693b      	ldr	r3, [r7, #16]
    4b94:	2280      	movs	r2, #128	; 0x80
    4b96:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    4b98:	230f      	movs	r3, #15
    4b9a:	18fb      	adds	r3, r7, r3
    4b9c:	781b      	ldrb	r3, [r3, #0]
    4b9e:	2240      	movs	r2, #64	; 0x40
    4ba0:	4013      	ands	r3, r2
    4ba2:	d004      	beq.n	4bae <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    4ba4:	697b      	ldr	r3, [r7, #20]
    4ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4ba8:	697a      	ldr	r2, [r7, #20]
    4baa:	0010      	movs	r0, r2
    4bac:	4798      	blx	r3
		}
	}
#  endif
}
    4bae:	46c0      	nop			; (mov r8, r8)
    4bb0:	46bd      	mov	sp, r7
    4bb2:	b006      	add	sp, #24
    4bb4:	bd80      	pop	{r7, pc}
    4bb6:	46c0      	nop			; (mov r8, r8)
    4bb8:	200009d4 	.word	0x200009d4
    4bbc:	00004871 	.word	0x00004871
    4bc0:	000047f5 	.word	0x000047f5
    4bc4:	000048a5 	.word	0x000048a5
    4bc8:	000048db 	.word	0x000048db

00004bcc <system_gclk_chan_get_config_defaults>:
{
    4bcc:	b580      	push	{r7, lr}
    4bce:	b082      	sub	sp, #8
    4bd0:	af00      	add	r7, sp, #0
    4bd2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4bd4:	687b      	ldr	r3, [r7, #4]
    4bd6:	2200      	movs	r2, #0
    4bd8:	701a      	strb	r2, [r3, #0]
}
    4bda:	46c0      	nop			; (mov r8, r8)
    4bdc:	46bd      	mov	sp, r7
    4bde:	b002      	add	sp, #8
    4be0:	bd80      	pop	{r7, pc}
	...

00004be4 <system_apb_clock_set_mask>:
{
    4be4:	b580      	push	{r7, lr}
    4be6:	b082      	sub	sp, #8
    4be8:	af00      	add	r7, sp, #0
    4bea:	0002      	movs	r2, r0
    4bec:	6039      	str	r1, [r7, #0]
    4bee:	1dfb      	adds	r3, r7, #7
    4bf0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4bf2:	1dfb      	adds	r3, r7, #7
    4bf4:	781b      	ldrb	r3, [r3, #0]
    4bf6:	2b01      	cmp	r3, #1
    4bf8:	d00a      	beq.n	4c10 <system_apb_clock_set_mask+0x2c>
    4bfa:	2b02      	cmp	r3, #2
    4bfc:	d00f      	beq.n	4c1e <system_apb_clock_set_mask+0x3a>
    4bfe:	2b00      	cmp	r3, #0
    4c00:	d114      	bne.n	4c2c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    4c02:	4b0e      	ldr	r3, [pc, #56]	; (4c3c <system_apb_clock_set_mask+0x58>)
    4c04:	4a0d      	ldr	r2, [pc, #52]	; (4c3c <system_apb_clock_set_mask+0x58>)
    4c06:	6991      	ldr	r1, [r2, #24]
    4c08:	683a      	ldr	r2, [r7, #0]
    4c0a:	430a      	orrs	r2, r1
    4c0c:	619a      	str	r2, [r3, #24]
			break;
    4c0e:	e00f      	b.n	4c30 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    4c10:	4b0a      	ldr	r3, [pc, #40]	; (4c3c <system_apb_clock_set_mask+0x58>)
    4c12:	4a0a      	ldr	r2, [pc, #40]	; (4c3c <system_apb_clock_set_mask+0x58>)
    4c14:	69d1      	ldr	r1, [r2, #28]
    4c16:	683a      	ldr	r2, [r7, #0]
    4c18:	430a      	orrs	r2, r1
    4c1a:	61da      	str	r2, [r3, #28]
			break;
    4c1c:	e008      	b.n	4c30 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    4c1e:	4b07      	ldr	r3, [pc, #28]	; (4c3c <system_apb_clock_set_mask+0x58>)
    4c20:	4a06      	ldr	r2, [pc, #24]	; (4c3c <system_apb_clock_set_mask+0x58>)
    4c22:	6a11      	ldr	r1, [r2, #32]
    4c24:	683a      	ldr	r2, [r7, #0]
    4c26:	430a      	orrs	r2, r1
    4c28:	621a      	str	r2, [r3, #32]
			break;
    4c2a:	e001      	b.n	4c30 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    4c2c:	2317      	movs	r3, #23
    4c2e:	e000      	b.n	4c32 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    4c30:	2300      	movs	r3, #0
}
    4c32:	0018      	movs	r0, r3
    4c34:	46bd      	mov	sp, r7
    4c36:	b002      	add	sp, #8
    4c38:	bd80      	pop	{r7, pc}
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	40000400 	.word	0x40000400

00004c40 <system_pinmux_get_config_defaults>:
{
    4c40:	b580      	push	{r7, lr}
    4c42:	b082      	sub	sp, #8
    4c44:	af00      	add	r7, sp, #0
    4c46:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4c48:	687b      	ldr	r3, [r7, #4]
    4c4a:	2280      	movs	r2, #128	; 0x80
    4c4c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	2200      	movs	r2, #0
    4c52:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	2201      	movs	r2, #1
    4c58:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	2200      	movs	r2, #0
    4c5e:	70da      	strb	r2, [r3, #3]
}
    4c60:	46c0      	nop			; (mov r8, r8)
    4c62:	46bd      	mov	sp, r7
    4c64:	b002      	add	sp, #8
    4c66:	bd80      	pop	{r7, pc}

00004c68 <system_is_debugger_present>:
{
    4c68:	b580      	push	{r7, lr}
    4c6a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    4c6c:	4b05      	ldr	r3, [pc, #20]	; (4c84 <system_is_debugger_present+0x1c>)
    4c6e:	789b      	ldrb	r3, [r3, #2]
    4c70:	b2db      	uxtb	r3, r3
    4c72:	001a      	movs	r2, r3
    4c74:	2302      	movs	r3, #2
    4c76:	4013      	ands	r3, r2
    4c78:	1e5a      	subs	r2, r3, #1
    4c7a:	4193      	sbcs	r3, r2
    4c7c:	b2db      	uxtb	r3, r3
}
    4c7e:	0018      	movs	r0, r3
    4c80:	46bd      	mov	sp, r7
    4c82:	bd80      	pop	{r7, pc}
    4c84:	41002000 	.word	0x41002000

00004c88 <usart_is_syncing>:
{
    4c88:	b580      	push	{r7, lr}
    4c8a:	b084      	sub	sp, #16
    4c8c:	af00      	add	r7, sp, #0
    4c8e:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    4c90:	687b      	ldr	r3, [r7, #4]
    4c92:	681b      	ldr	r3, [r3, #0]
    4c94:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    4c96:	68fb      	ldr	r3, [r7, #12]
    4c98:	69db      	ldr	r3, [r3, #28]
    4c9a:	1e5a      	subs	r2, r3, #1
    4c9c:	4193      	sbcs	r3, r2
    4c9e:	b2db      	uxtb	r3, r3
}
    4ca0:	0018      	movs	r0, r3
    4ca2:	46bd      	mov	sp, r7
    4ca4:	b004      	add	sp, #16
    4ca6:	bd80      	pop	{r7, pc}

00004ca8 <_usart_wait_for_sync>:
{
    4ca8:	b580      	push	{r7, lr}
    4caa:	b082      	sub	sp, #8
    4cac:	af00      	add	r7, sp, #0
    4cae:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    4cb0:	46c0      	nop			; (mov r8, r8)
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	0018      	movs	r0, r3
    4cb6:	4b04      	ldr	r3, [pc, #16]	; (4cc8 <_usart_wait_for_sync+0x20>)
    4cb8:	4798      	blx	r3
    4cba:	1e03      	subs	r3, r0, #0
    4cbc:	d1f9      	bne.n	4cb2 <_usart_wait_for_sync+0xa>
}
    4cbe:	46c0      	nop			; (mov r8, r8)
    4cc0:	46bd      	mov	sp, r7
    4cc2:	b002      	add	sp, #8
    4cc4:	bd80      	pop	{r7, pc}
    4cc6:	46c0      	nop			; (mov r8, r8)
    4cc8:	00004c89 	.word	0x00004c89

00004ccc <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
    4ccc:	b5b0      	push	{r4, r5, r7, lr}
    4cce:	b08c      	sub	sp, #48	; 0x30
    4cd0:	af02      	add	r7, sp, #8
    4cd2:	6078      	str	r0, [r7, #4]
    4cd4:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4cd6:	687b      	ldr	r3, [r7, #4]
    4cd8:	681b      	ldr	r3, [r3, #0]
    4cda:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	681b      	ldr	r3, [r3, #0]
    4ce0:	0018      	movs	r0, r3
    4ce2:	4bab      	ldr	r3, [pc, #684]	; (4f90 <_usart_set_config+0x2c4>)
    4ce4:	4798      	blx	r3
    4ce6:	0003      	movs	r3, r0
    4ce8:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4cea:	697b      	ldr	r3, [r7, #20]
    4cec:	3314      	adds	r3, #20
    4cee:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
    4cf0:	2300      	movs	r3, #0
    4cf2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
    4cf4:	2300      	movs	r3, #0
    4cf6:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
    4cf8:	230a      	movs	r3, #10
    4cfa:	18fb      	adds	r3, r7, r3
    4cfc:	2200      	movs	r2, #0
    4cfe:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4d00:	231f      	movs	r3, #31
    4d02:	18fb      	adds	r3, r7, r3
    4d04:	2200      	movs	r2, #0
    4d06:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4d08:	231e      	movs	r3, #30
    4d0a:	18fb      	adds	r3, r7, r3
    4d0c:	2210      	movs	r2, #16
    4d0e:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
    4d10:	683b      	ldr	r3, [r7, #0]
    4d12:	8a1b      	ldrh	r3, [r3, #16]
    4d14:	2280      	movs	r2, #128	; 0x80
    4d16:	01d2      	lsls	r2, r2, #7
    4d18:	4293      	cmp	r3, r2
    4d1a:	d01c      	beq.n	4d56 <_usart_set_config+0x8a>
    4d1c:	2280      	movs	r2, #128	; 0x80
    4d1e:	01d2      	lsls	r2, r2, #7
    4d20:	4293      	cmp	r3, r2
    4d22:	dc06      	bgt.n	4d32 <_usart_set_config+0x66>
    4d24:	2b00      	cmp	r3, #0
    4d26:	d00d      	beq.n	4d44 <_usart_set_config+0x78>
    4d28:	2280      	movs	r2, #128	; 0x80
    4d2a:	0192      	lsls	r2, r2, #6
    4d2c:	4293      	cmp	r3, r2
    4d2e:	d024      	beq.n	4d7a <_usart_set_config+0xae>
    4d30:	e035      	b.n	4d9e <_usart_set_config+0xd2>
    4d32:	22c0      	movs	r2, #192	; 0xc0
    4d34:	01d2      	lsls	r2, r2, #7
    4d36:	4293      	cmp	r3, r2
    4d38:	d028      	beq.n	4d8c <_usart_set_config+0xc0>
    4d3a:	2280      	movs	r2, #128	; 0x80
    4d3c:	0212      	lsls	r2, r2, #8
    4d3e:	4293      	cmp	r3, r2
    4d40:	d012      	beq.n	4d68 <_usart_set_config+0x9c>
    4d42:	e02c      	b.n	4d9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4d44:	231f      	movs	r3, #31
    4d46:	18fb      	adds	r3, r7, r3
    4d48:	2200      	movs	r2, #0
    4d4a:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4d4c:	231e      	movs	r3, #30
    4d4e:	18fb      	adds	r3, r7, r3
    4d50:	2210      	movs	r2, #16
    4d52:	701a      	strb	r2, [r3, #0]
			break;
    4d54:	e023      	b.n	4d9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4d56:	231f      	movs	r3, #31
    4d58:	18fb      	adds	r3, r7, r3
    4d5a:	2200      	movs	r2, #0
    4d5c:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4d5e:	231e      	movs	r3, #30
    4d60:	18fb      	adds	r3, r7, r3
    4d62:	2208      	movs	r2, #8
    4d64:	701a      	strb	r2, [r3, #0]
			break;
    4d66:	e01a      	b.n	4d9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    4d68:	231f      	movs	r3, #31
    4d6a:	18fb      	adds	r3, r7, r3
    4d6c:	2200      	movs	r2, #0
    4d6e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    4d70:	231e      	movs	r3, #30
    4d72:	18fb      	adds	r3, r7, r3
    4d74:	2203      	movs	r2, #3
    4d76:	701a      	strb	r2, [r3, #0]
			break;
    4d78:	e011      	b.n	4d9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4d7a:	231f      	movs	r3, #31
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	2201      	movs	r2, #1
    4d80:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    4d82:	231e      	movs	r3, #30
    4d84:	18fb      	adds	r3, r7, r3
    4d86:	2210      	movs	r2, #16
    4d88:	701a      	strb	r2, [r3, #0]
			break;
    4d8a:	e008      	b.n	4d9e <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    4d8c:	231f      	movs	r3, #31
    4d8e:	18fb      	adds	r3, r7, r3
    4d90:	2201      	movs	r2, #1
    4d92:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    4d94:	231e      	movs	r3, #30
    4d96:	18fb      	adds	r3, r7, r3
    4d98:	2208      	movs	r2, #8
    4d9a:	701a      	strb	r2, [r3, #0]
			break;
    4d9c:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
    4d9e:	683b      	ldr	r3, [r7, #0]
    4da0:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
    4da2:	683b      	ldr	r3, [r7, #0]
    4da4:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
    4da6:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
    4da8:	683b      	ldr	r3, [r7, #0]
    4daa:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
    4dac:	4313      	orrs	r3, r2
		config->sample_rate |
    4dae:	683a      	ldr	r2, [r7, #0]
    4db0:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
    4db2:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    4db4:	683a      	ldr	r2, [r7, #0]
    4db6:	7e12      	ldrb	r2, [r2, #24]
    4db8:	0212      	lsls	r2, r2, #8
		config->sample_rate |
    4dba:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    4dbc:	683a      	ldr	r2, [r7, #0]
    4dbe:	2126      	movs	r1, #38	; 0x26
    4dc0:	5c52      	ldrb	r2, [r2, r1]
    4dc2:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
    4dc4:	4313      	orrs	r3, r2
    4dc6:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
    4dc8:	231d      	movs	r3, #29
    4dca:	18fb      	adds	r3, r7, r3
    4dcc:	2200      	movs	r2, #0
    4dce:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
    4dd0:	683b      	ldr	r3, [r7, #0]
    4dd2:	685b      	ldr	r3, [r3, #4]
    4dd4:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
    4dd6:	68fb      	ldr	r3, [r7, #12]
    4dd8:	2b00      	cmp	r3, #0
    4dda:	d01e      	beq.n	4e1a <_usart_set_config+0x14e>
    4ddc:	2280      	movs	r2, #128	; 0x80
    4dde:	0552      	lsls	r2, r2, #21
    4de0:	4293      	cmp	r3, r2
    4de2:	d14f      	bne.n	4e84 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
    4de4:	683b      	ldr	r3, [r7, #0]
    4de6:	2227      	movs	r2, #39	; 0x27
    4de8:	5c9b      	ldrb	r3, [r3, r2]
    4dea:	2201      	movs	r2, #1
    4dec:	4053      	eors	r3, r2
    4dee:	b2db      	uxtb	r3, r3
    4df0:	2b00      	cmp	r3, #0
    4df2:	d046      	beq.n	4e82 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    4df4:	683b      	ldr	r3, [r7, #0]
    4df6:	6a1d      	ldr	r5, [r3, #32]
    4df8:	693b      	ldr	r3, [r7, #16]
    4dfa:	b2db      	uxtb	r3, r3
    4dfc:	0018      	movs	r0, r3
    4dfe:	4b65      	ldr	r3, [pc, #404]	; (4f94 <_usart_set_config+0x2c8>)
    4e00:	4798      	blx	r3
    4e02:	0001      	movs	r1, r0
    4e04:	231d      	movs	r3, #29
    4e06:	18fc      	adds	r4, r7, r3
    4e08:	230a      	movs	r3, #10
    4e0a:	18fb      	adds	r3, r7, r3
    4e0c:	001a      	movs	r2, r3
    4e0e:	0028      	movs	r0, r5
    4e10:	4b61      	ldr	r3, [pc, #388]	; (4f98 <_usart_set_config+0x2cc>)
    4e12:	4798      	blx	r3
    4e14:	0003      	movs	r3, r0
    4e16:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
    4e18:	e033      	b.n	4e82 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
    4e1a:	683b      	ldr	r3, [r7, #0]
    4e1c:	2227      	movs	r2, #39	; 0x27
    4e1e:	5c9b      	ldrb	r3, [r3, r2]
    4e20:	2b00      	cmp	r3, #0
    4e22:	d014      	beq.n	4e4e <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
    4e24:	683b      	ldr	r3, [r7, #0]
    4e26:	6a18      	ldr	r0, [r3, #32]
    4e28:	683b      	ldr	r3, [r7, #0]
    4e2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
    4e2c:	231d      	movs	r3, #29
    4e2e:	18fc      	adds	r4, r7, r3
    4e30:	231f      	movs	r3, #31
    4e32:	18fb      	adds	r3, r7, r3
    4e34:	781d      	ldrb	r5, [r3, #0]
    4e36:	230a      	movs	r3, #10
    4e38:	18fa      	adds	r2, r7, r3
    4e3a:	231e      	movs	r3, #30
    4e3c:	18fb      	adds	r3, r7, r3
    4e3e:	781b      	ldrb	r3, [r3, #0]
    4e40:	9300      	str	r3, [sp, #0]
    4e42:	002b      	movs	r3, r5
    4e44:	4d55      	ldr	r5, [pc, #340]	; (4f9c <_usart_set_config+0x2d0>)
    4e46:	47a8      	blx	r5
    4e48:	0003      	movs	r3, r0
    4e4a:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
    4e4c:	e01a      	b.n	4e84 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
    4e4e:	683b      	ldr	r3, [r7, #0]
    4e50:	6a1d      	ldr	r5, [r3, #32]
    4e52:	693b      	ldr	r3, [r7, #16]
    4e54:	b2db      	uxtb	r3, r3
    4e56:	0018      	movs	r0, r3
    4e58:	4b4e      	ldr	r3, [pc, #312]	; (4f94 <_usart_set_config+0x2c8>)
    4e5a:	4798      	blx	r3
				status_code =
    4e5c:	231d      	movs	r3, #29
    4e5e:	18fc      	adds	r4, r7, r3
    4e60:	231f      	movs	r3, #31
    4e62:	18fb      	adds	r3, r7, r3
    4e64:	7819      	ldrb	r1, [r3, #0]
    4e66:	230a      	movs	r3, #10
    4e68:	18fa      	adds	r2, r7, r3
    4e6a:	231e      	movs	r3, #30
    4e6c:	18fb      	adds	r3, r7, r3
    4e6e:	781b      	ldrb	r3, [r3, #0]
    4e70:	9300      	str	r3, [sp, #0]
    4e72:	000b      	movs	r3, r1
    4e74:	0001      	movs	r1, r0
    4e76:	0028      	movs	r0, r5
    4e78:	4d48      	ldr	r5, [pc, #288]	; (4f9c <_usart_set_config+0x2d0>)
    4e7a:	47a8      	blx	r5
    4e7c:	0003      	movs	r3, r0
    4e7e:	7023      	strb	r3, [r4, #0]
			break;
    4e80:	e000      	b.n	4e84 <_usart_set_config+0x1b8>
			break;
    4e82:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
    4e84:	231d      	movs	r3, #29
    4e86:	18fb      	adds	r3, r7, r3
    4e88:	781b      	ldrb	r3, [r3, #0]
    4e8a:	2b00      	cmp	r3, #0
    4e8c:	d003      	beq.n	4e96 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
    4e8e:	231d      	movs	r3, #29
    4e90:	18fb      	adds	r3, r7, r3
    4e92:	781b      	ldrb	r3, [r3, #0]
    4e94:	e077      	b.n	4f86 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
    4e96:	683b      	ldr	r3, [r7, #0]
    4e98:	7e5b      	ldrb	r3, [r3, #25]
    4e9a:	2b00      	cmp	r3, #0
    4e9c:	d003      	beq.n	4ea6 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    4e9e:	683b      	ldr	r3, [r7, #0]
    4ea0:	7e9a      	ldrb	r2, [r3, #26]
    4ea2:	69bb      	ldr	r3, [r7, #24]
    4ea4:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4ea6:	687b      	ldr	r3, [r7, #4]
    4ea8:	0018      	movs	r0, r3
    4eaa:	4b3d      	ldr	r3, [pc, #244]	; (4fa0 <_usart_set_config+0x2d4>)
    4eac:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
    4eae:	230a      	movs	r3, #10
    4eb0:	18fb      	adds	r3, r7, r3
    4eb2:	881a      	ldrh	r2, [r3, #0]
    4eb4:	69bb      	ldr	r3, [r7, #24]
    4eb6:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
    4eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4eba:	68fb      	ldr	r3, [r7, #12]
    4ebc:	4313      	orrs	r3, r2
    4ebe:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
    4ec0:	683b      	ldr	r3, [r7, #0]
    4ec2:	2227      	movs	r2, #39	; 0x27
    4ec4:	5c9b      	ldrb	r3, [r3, r2]
    4ec6:	2201      	movs	r2, #1
    4ec8:	4053      	eors	r3, r2
    4eca:	b2db      	uxtb	r3, r3
    4ecc:	2b00      	cmp	r3, #0
    4ece:	d003      	beq.n	4ed8 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    4ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4ed2:	2204      	movs	r2, #4
    4ed4:	4313      	orrs	r3, r2
    4ed6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4ed8:	683b      	ldr	r3, [r7, #0]
    4eda:	7e5b      	ldrb	r3, [r3, #25]
    4edc:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4ede:	683b      	ldr	r3, [r7, #0]
    4ee0:	7f1b      	ldrb	r3, [r3, #28]
    4ee2:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    4ee4:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4ee6:	683b      	ldr	r3, [r7, #0]
    4ee8:	7f5b      	ldrb	r3, [r3, #29]
    4eea:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    4eec:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4eee:	683b      	ldr	r3, [r7, #0]
    4ef0:	2124      	movs	r1, #36	; 0x24
    4ef2:	5c5b      	ldrb	r3, [r3, r1]
    4ef4:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    4ef6:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    4ef8:	683b      	ldr	r3, [r7, #0]
    4efa:	2125      	movs	r1, #37	; 0x25
    4efc:	5c5b      	ldrb	r3, [r3, r1]
    4efe:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    4f00:	4313      	orrs	r3, r2
	ctrlb =  
    4f02:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
    4f04:	683b      	ldr	r3, [r7, #0]
    4f06:	7a9b      	ldrb	r3, [r3, #10]
    4f08:	001a      	movs	r2, r3
    4f0a:	6a3b      	ldr	r3, [r7, #32]
    4f0c:	4313      	orrs	r3, r2
    4f0e:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
    4f10:	683b      	ldr	r3, [r7, #0]
    4f12:	7adb      	ldrb	r3, [r3, #11]
    4f14:	001a      	movs	r2, r3
    4f16:	6a3b      	ldr	r3, [r7, #32]
    4f18:	4313      	orrs	r3, r2
    4f1a:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
    4f1c:	683b      	ldr	r3, [r7, #0]
    4f1e:	891b      	ldrh	r3, [r3, #8]
    4f20:	2bff      	cmp	r3, #255	; 0xff
    4f22:	d00b      	beq.n	4f3c <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    4f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f26:	2280      	movs	r2, #128	; 0x80
    4f28:	0452      	lsls	r2, r2, #17
    4f2a:	4313      	orrs	r3, r2
    4f2c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
    4f2e:	683b      	ldr	r3, [r7, #0]
    4f30:	891b      	ldrh	r3, [r3, #8]
    4f32:	001a      	movs	r2, r3
    4f34:	6a3b      	ldr	r3, [r7, #32]
    4f36:	4313      	orrs	r3, r2
    4f38:	623b      	str	r3, [r7, #32]
    4f3a:	e008      	b.n	4f4e <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
    4f3c:	683b      	ldr	r3, [r7, #0]
    4f3e:	7edb      	ldrb	r3, [r3, #27]
    4f40:	2b00      	cmp	r3, #0
    4f42:	d004      	beq.n	4f4e <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    4f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f46:	2280      	movs	r2, #128	; 0x80
    4f48:	04d2      	lsls	r2, r2, #19
    4f4a:	4313      	orrs	r3, r2
    4f4c:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    4f4e:	683b      	ldr	r3, [r7, #0]
    4f50:	222c      	movs	r2, #44	; 0x2c
    4f52:	5c9b      	ldrb	r3, [r3, r2]
    4f54:	2b00      	cmp	r3, #0
    4f56:	d103      	bne.n	4f60 <_usart_set_config+0x294>
    4f58:	4b12      	ldr	r3, [pc, #72]	; (4fa4 <_usart_set_config+0x2d8>)
    4f5a:	4798      	blx	r3
    4f5c:	1e03      	subs	r3, r0, #0
    4f5e:	d003      	beq.n	4f68 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    4f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4f62:	2280      	movs	r2, #128	; 0x80
    4f64:	4313      	orrs	r3, r2
    4f66:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	0018      	movs	r0, r3
    4f6c:	4b0c      	ldr	r3, [pc, #48]	; (4fa0 <_usart_set_config+0x2d4>)
    4f6e:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
    4f70:	69bb      	ldr	r3, [r7, #24]
    4f72:	6a3a      	ldr	r2, [r7, #32]
    4f74:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    4f76:	687b      	ldr	r3, [r7, #4]
    4f78:	0018      	movs	r0, r3
    4f7a:	4b09      	ldr	r3, [pc, #36]	; (4fa0 <_usart_set_config+0x2d4>)
    4f7c:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
    4f7e:	69bb      	ldr	r3, [r7, #24]
    4f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4f82:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
    4f84:	2300      	movs	r3, #0
}
    4f86:	0018      	movs	r0, r3
    4f88:	46bd      	mov	sp, r7
    4f8a:	b00a      	add	sp, #40	; 0x28
    4f8c:	bdb0      	pop	{r4, r5, r7, pc}
    4f8e:	46c0      	nop			; (mov r8, r8)
    4f90:	00003a35 	.word	0x00003a35
    4f94:	0000666d 	.word	0x0000666d
    4f98:	000035af 	.word	0x000035af
    4f9c:	0000362d 	.word	0x0000362d
    4fa0:	00004ca9 	.word	0x00004ca9
    4fa4:	00004c69 	.word	0x00004c69

00004fa8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    4fa8:	b590      	push	{r4, r7, lr}
    4faa:	b093      	sub	sp, #76	; 0x4c
    4fac:	af00      	add	r7, sp, #0
    4fae:	60f8      	str	r0, [r7, #12]
    4fb0:	60b9      	str	r1, [r7, #8]
    4fb2:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
    4fb4:	233b      	movs	r3, #59	; 0x3b
    4fb6:	18fb      	adds	r3, r7, r3
    4fb8:	2200      	movs	r2, #0
    4fba:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    4fbc:	68fb      	ldr	r3, [r7, #12]
    4fbe:	68ba      	ldr	r2, [r7, #8]
    4fc0:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    4fc2:	68fb      	ldr	r3, [r7, #12]
    4fc4:	681b      	ldr	r3, [r3, #0]
    4fc6:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    4fc8:	68fb      	ldr	r3, [r7, #12]
    4fca:	681b      	ldr	r3, [r3, #0]
    4fcc:	0018      	movs	r0, r3
    4fce:	4b86      	ldr	r3, [pc, #536]	; (51e8 <usart_init+0x240>)
    4fd0:	4798      	blx	r3
    4fd2:	0003      	movs	r3, r0
    4fd4:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    4fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4fd8:	3302      	adds	r3, #2
    4fda:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    4fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4fde:	3314      	adds	r3, #20
    4fe0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    4fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4fe4:	681b      	ldr	r3, [r3, #0]
    4fe6:	2201      	movs	r2, #1
    4fe8:	4013      	ands	r3, r2
    4fea:	d001      	beq.n	4ff0 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    4fec:	2305      	movs	r3, #5
    4fee:	e0f6      	b.n	51de <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    4ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4ff2:	681b      	ldr	r3, [r3, #0]
    4ff4:	2202      	movs	r2, #2
    4ff6:	4013      	ands	r3, r2
    4ff8:	d001      	beq.n	4ffe <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
    4ffa:	231c      	movs	r3, #28
    4ffc:	e0ef      	b.n	51de <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    4ffe:	2201      	movs	r2, #1
    5000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5002:	409a      	lsls	r2, r3
    5004:	0013      	movs	r3, r2
    5006:	0019      	movs	r1, r3
    5008:	2002      	movs	r0, #2
    500a:	4b78      	ldr	r3, [pc, #480]	; (51ec <usart_init+0x244>)
    500c:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    500e:	2324      	movs	r3, #36	; 0x24
    5010:	18fb      	adds	r3, r7, r3
    5012:	0018      	movs	r0, r3
    5014:	4b76      	ldr	r3, [pc, #472]	; (51f0 <usart_init+0x248>)
    5016:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    5018:	687b      	ldr	r3, [r7, #4]
    501a:	222d      	movs	r2, #45	; 0x2d
    501c:	5c9a      	ldrb	r2, [r3, r2]
    501e:	2324      	movs	r3, #36	; 0x24
    5020:	18fb      	adds	r3, r7, r3
    5022:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    5024:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5026:	b2db      	uxtb	r3, r3
    5028:	2224      	movs	r2, #36	; 0x24
    502a:	18ba      	adds	r2, r7, r2
    502c:	0011      	movs	r1, r2
    502e:	0018      	movs	r0, r3
    5030:	4b70      	ldr	r3, [pc, #448]	; (51f4 <usart_init+0x24c>)
    5032:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    5034:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5036:	b2db      	uxtb	r3, r3
    5038:	0018      	movs	r0, r3
    503a:	4b6f      	ldr	r3, [pc, #444]	; (51f8 <usart_init+0x250>)
    503c:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    503e:	687b      	ldr	r3, [r7, #4]
    5040:	222d      	movs	r2, #45	; 0x2d
    5042:	5c9b      	ldrb	r3, [r3, r2]
    5044:	2100      	movs	r1, #0
    5046:	0018      	movs	r0, r3
    5048:	4b6c      	ldr	r3, [pc, #432]	; (51fc <usart_init+0x254>)
    504a:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
    504c:	687b      	ldr	r3, [r7, #4]
    504e:	7ada      	ldrb	r2, [r3, #11]
    5050:	68fb      	ldr	r3, [r7, #12]
    5052:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
    5054:	687b      	ldr	r3, [r7, #4]
    5056:	2224      	movs	r2, #36	; 0x24
    5058:	5c9a      	ldrb	r2, [r3, r2]
    505a:	68fb      	ldr	r3, [r7, #12]
    505c:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
    505e:	687b      	ldr	r3, [r7, #4]
    5060:	2225      	movs	r2, #37	; 0x25
    5062:	5c9a      	ldrb	r2, [r3, r2]
    5064:	68fb      	ldr	r3, [r7, #12]
    5066:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	7eda      	ldrb	r2, [r3, #27]
    506c:	68fb      	ldr	r3, [r7, #12]
    506e:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    5070:	687b      	ldr	r3, [r7, #4]
    5072:	7f1a      	ldrb	r2, [r3, #28]
    5074:	68fb      	ldr	r3, [r7, #12]
    5076:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
    5078:	233b      	movs	r3, #59	; 0x3b
    507a:	18fc      	adds	r4, r7, r3
    507c:	687a      	ldr	r2, [r7, #4]
    507e:	68fb      	ldr	r3, [r7, #12]
    5080:	0011      	movs	r1, r2
    5082:	0018      	movs	r0, r3
    5084:	4b5e      	ldr	r3, [pc, #376]	; (5200 <usart_init+0x258>)
    5086:	4798      	blx	r3
    5088:	0003      	movs	r3, r0
    508a:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
    508c:	233b      	movs	r3, #59	; 0x3b
    508e:	18fb      	adds	r3, r7, r3
    5090:	781b      	ldrb	r3, [r3, #0]
    5092:	2b00      	cmp	r3, #0
    5094:	d003      	beq.n	509e <usart_init+0xf6>
		return status_code;
    5096:	233b      	movs	r3, #59	; 0x3b
    5098:	18fb      	adds	r3, r7, r3
    509a:	781b      	ldrb	r3, [r3, #0]
    509c:	e09f      	b.n	51de <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    509e:	2320      	movs	r3, #32
    50a0:	18fb      	adds	r3, r7, r3
    50a2:	0018      	movs	r0, r3
    50a4:	4b57      	ldr	r3, [pc, #348]	; (5204 <usart_init+0x25c>)
    50a6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    50a8:	2320      	movs	r3, #32
    50aa:	18fb      	adds	r3, r7, r3
    50ac:	2200      	movs	r2, #0
    50ae:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    50b0:	2320      	movs	r3, #32
    50b2:	18fb      	adds	r3, r7, r3
    50b4:	2200      	movs	r2, #0
    50b6:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    50bc:	2310      	movs	r3, #16
    50be:	18fb      	adds	r3, r7, r3
    50c0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    50c2:	687b      	ldr	r3, [r7, #4]
    50c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    50c6:	2310      	movs	r3, #16
    50c8:	18fb      	adds	r3, r7, r3
    50ca:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    50cc:	687b      	ldr	r3, [r7, #4]
    50ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
    50d0:	2310      	movs	r3, #16
    50d2:	18fb      	adds	r3, r7, r3
    50d4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    50d6:	687b      	ldr	r3, [r7, #4]
    50d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
    50da:	2310      	movs	r3, #16
    50dc:	18fb      	adds	r3, r7, r3
    50de:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    50e0:	2347      	movs	r3, #71	; 0x47
    50e2:	18fb      	adds	r3, r7, r3
    50e4:	2200      	movs	r2, #0
    50e6:	701a      	strb	r2, [r3, #0]
    50e8:	e02c      	b.n	5144 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    50ea:	2347      	movs	r3, #71	; 0x47
    50ec:	18fb      	adds	r3, r7, r3
    50ee:	781a      	ldrb	r2, [r3, #0]
    50f0:	2310      	movs	r3, #16
    50f2:	18fb      	adds	r3, r7, r3
    50f4:	0092      	lsls	r2, r2, #2
    50f6:	58d3      	ldr	r3, [r2, r3]
    50f8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    50fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    50fc:	2b00      	cmp	r3, #0
    50fe:	d109      	bne.n	5114 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    5100:	2347      	movs	r3, #71	; 0x47
    5102:	18fb      	adds	r3, r7, r3
    5104:	781a      	ldrb	r2, [r3, #0]
    5106:	68bb      	ldr	r3, [r7, #8]
    5108:	0011      	movs	r1, r2
    510a:	0018      	movs	r0, r3
    510c:	4b3e      	ldr	r3, [pc, #248]	; (5208 <usart_init+0x260>)
    510e:	4798      	blx	r3
    5110:	0003      	movs	r3, r0
    5112:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    5114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5116:	3301      	adds	r3, #1
    5118:	d00d      	beq.n	5136 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    511a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    511c:	b2da      	uxtb	r2, r3
    511e:	2320      	movs	r3, #32
    5120:	18fb      	adds	r3, r7, r3
    5122:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    5124:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5126:	0c1b      	lsrs	r3, r3, #16
    5128:	b2db      	uxtb	r3, r3
    512a:	2220      	movs	r2, #32
    512c:	18ba      	adds	r2, r7, r2
    512e:	0011      	movs	r1, r2
    5130:	0018      	movs	r0, r3
    5132:	4b36      	ldr	r3, [pc, #216]	; (520c <usart_init+0x264>)
    5134:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    5136:	2347      	movs	r3, #71	; 0x47
    5138:	18fb      	adds	r3, r7, r3
    513a:	781a      	ldrb	r2, [r3, #0]
    513c:	2347      	movs	r3, #71	; 0x47
    513e:	18fb      	adds	r3, r7, r3
    5140:	3201      	adds	r2, #1
    5142:	701a      	strb	r2, [r3, #0]
    5144:	2347      	movs	r3, #71	; 0x47
    5146:	18fb      	adds	r3, r7, r3
    5148:	781b      	ldrb	r3, [r3, #0]
    514a:	2b03      	cmp	r3, #3
    514c:	d9cd      	bls.n	50ea <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    514e:	2300      	movs	r3, #0
    5150:	63fb      	str	r3, [r7, #60]	; 0x3c
    5152:	e00a      	b.n	516a <usart_init+0x1c2>
		module->callback[i]            = NULL;
    5154:	68fa      	ldr	r2, [r7, #12]
    5156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5158:	3302      	adds	r3, #2
    515a:	009b      	lsls	r3, r3, #2
    515c:	18d3      	adds	r3, r2, r3
    515e:	3304      	adds	r3, #4
    5160:	2200      	movs	r2, #0
    5162:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
    5164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5166:	3301      	adds	r3, #1
    5168:	63fb      	str	r3, [r7, #60]	; 0x3c
    516a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    516c:	2b05      	cmp	r3, #5
    516e:	d9f1      	bls.n	5154 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
    5170:	68fb      	ldr	r3, [r7, #12]
    5172:	2200      	movs	r2, #0
    5174:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    5176:	68fb      	ldr	r3, [r7, #12]
    5178:	2200      	movs	r2, #0
    517a:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    517c:	68fb      	ldr	r3, [r7, #12]
    517e:	2200      	movs	r2, #0
    5180:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    5182:	68fb      	ldr	r3, [r7, #12]
    5184:	2200      	movs	r2, #0
    5186:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    5188:	68fb      	ldr	r3, [r7, #12]
    518a:	2230      	movs	r2, #48	; 0x30
    518c:	2100      	movs	r1, #0
    518e:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
    5190:	68fb      	ldr	r3, [r7, #12]
    5192:	2231      	movs	r2, #49	; 0x31
    5194:	2100      	movs	r1, #0
    5196:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
    5198:	68fb      	ldr	r3, [r7, #12]
    519a:	2232      	movs	r2, #50	; 0x32
    519c:	2100      	movs	r1, #0
    519e:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
    51a0:	68fb      	ldr	r3, [r7, #12]
    51a2:	2233      	movs	r2, #51	; 0x33
    51a4:	2100      	movs	r1, #0
    51a6:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    51a8:	68fb      	ldr	r3, [r7, #12]
    51aa:	681b      	ldr	r3, [r3, #0]
    51ac:	2227      	movs	r2, #39	; 0x27
    51ae:	18bc      	adds	r4, r7, r2
    51b0:	0018      	movs	r0, r3
    51b2:	4b0d      	ldr	r3, [pc, #52]	; (51e8 <usart_init+0x240>)
    51b4:	4798      	blx	r3
    51b6:	0003      	movs	r3, r0
    51b8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    51ba:	4a15      	ldr	r2, [pc, #84]	; (5210 <usart_init+0x268>)
    51bc:	2327      	movs	r3, #39	; 0x27
    51be:	18fb      	adds	r3, r7, r3
    51c0:	781b      	ldrb	r3, [r3, #0]
    51c2:	0011      	movs	r1, r2
    51c4:	0018      	movs	r0, r3
    51c6:	4b13      	ldr	r3, [pc, #76]	; (5214 <usart_init+0x26c>)
    51c8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    51ca:	2327      	movs	r3, #39	; 0x27
    51cc:	18fb      	adds	r3, r7, r3
    51ce:	781a      	ldrb	r2, [r3, #0]
    51d0:	4b11      	ldr	r3, [pc, #68]	; (5218 <usart_init+0x270>)
    51d2:	0092      	lsls	r2, r2, #2
    51d4:	68f9      	ldr	r1, [r7, #12]
    51d6:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
    51d8:	233b      	movs	r3, #59	; 0x3b
    51da:	18fb      	adds	r3, r7, r3
    51dc:	781b      	ldrb	r3, [r3, #0]
}
    51de:	0018      	movs	r0, r3
    51e0:	46bd      	mov	sp, r7
    51e2:	b013      	add	sp, #76	; 0x4c
    51e4:	bd90      	pop	{r4, r7, pc}
    51e6:	46c0      	nop			; (mov r8, r8)
    51e8:	00003a35 	.word	0x00003a35
    51ec:	00004be5 	.word	0x00004be5
    51f0:	00004bcd 	.word	0x00004bcd
    51f4:	00006549 	.word	0x00006549
    51f8:	0000658d 	.word	0x0000658d
    51fc:	000037ed 	.word	0x000037ed
    5200:	00004ccd 	.word	0x00004ccd
    5204:	00004c41 	.word	0x00004c41
    5208:	00003879 	.word	0x00003879
    520c:	00006835 	.word	0x00006835
    5210:	000055d5 	.word	0x000055d5
    5214:	00003a99 	.word	0x00003a99
    5218:	200009d4 	.word	0x200009d4

0000521c <usart_write_wait>:
 * \retval STATUS_ERR_DENIED If the transmitter is not enabled
 */
enum status_code usart_write_wait(
		struct usart_module *const module,
		const uint16_t tx_data)
{
    521c:	b580      	push	{r7, lr}
    521e:	b084      	sub	sp, #16
    5220:	af00      	add	r7, sp, #0
    5222:	6078      	str	r0, [r7, #4]
    5224:	000a      	movs	r2, r1
    5226:	1cbb      	adds	r3, r7, #2
    5228:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    522a:	687b      	ldr	r3, [r7, #4]
    522c:	681b      	ldr	r3, [r3, #0]
    522e:	60fb      	str	r3, [r7, #12]

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	79db      	ldrb	r3, [r3, #7]
    5234:	2201      	movs	r2, #1
    5236:	4053      	eors	r3, r2
    5238:	b2db      	uxtb	r3, r3
    523a:	2b00      	cmp	r3, #0
    523c:	d001      	beq.n	5242 <usart_write_wait+0x26>
		return STATUS_ERR_DENIED;
    523e:	231c      	movs	r3, #28
    5240:	e017      	b.n	5272 <usart_write_wait+0x56>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_tx_buffer_length > 0) {
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5246:	b29b      	uxth	r3, r3
    5248:	2b00      	cmp	r3, #0
    524a:	d001      	beq.n	5250 <usart_write_wait+0x34>
		return STATUS_BUSY;
    524c:	2305      	movs	r3, #5
    524e:	e010      	b.n	5272 <usart_write_wait+0x56>
		return STATUS_BUSY;
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    5250:	687b      	ldr	r3, [r7, #4]
    5252:	0018      	movs	r0, r3
    5254:	4b09      	ldr	r3, [pc, #36]	; (527c <usart_write_wait+0x60>)
    5256:	4798      	blx	r3

	/* Write data to USART module */
	usart_hw->DATA.reg = tx_data;
    5258:	68fb      	ldr	r3, [r7, #12]
    525a:	1cba      	adds	r2, r7, #2
    525c:	8812      	ldrh	r2, [r2, #0]
    525e:	851a      	strh	r2, [r3, #40]	; 0x28

	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    5260:	46c0      	nop			; (mov r8, r8)
    5262:	68fb      	ldr	r3, [r7, #12]
    5264:	7e1b      	ldrb	r3, [r3, #24]
    5266:	b2db      	uxtb	r3, r3
    5268:	001a      	movs	r2, r3
    526a:	2302      	movs	r3, #2
    526c:	4013      	ands	r3, r2
    526e:	d0f8      	beq.n	5262 <usart_write_wait+0x46>
		/* Wait until data is sent */
	}

	return STATUS_OK;
    5270:	2300      	movs	r3, #0
}
    5272:	0018      	movs	r0, r3
    5274:	46bd      	mov	sp, r7
    5276:	b004      	add	sp, #16
    5278:	bd80      	pop	{r7, pc}
    527a:	46c0      	nop			; (mov r8, r8)
    527c:	00004ca9 	.word	0x00004ca9

00005280 <usart_read_wait>:
 * \retval STATUS_ERR_DENIED        If the receiver is not enabled
 */
enum status_code usart_read_wait(
		struct usart_module *const module,
		uint16_t *const rx_data)
{
    5280:	b580      	push	{r7, lr}
    5282:	b084      	sub	sp, #16
    5284:	af00      	add	r7, sp, #0
    5286:	6078      	str	r0, [r7, #4]
    5288:	6039      	str	r1, [r7, #0]

	/* Error variable */
	uint8_t error_code;

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    528a:	687b      	ldr	r3, [r7, #4]
    528c:	681b      	ldr	r3, [r3, #0]
    528e:	60fb      	str	r3, [r7, #12]

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5290:	687b      	ldr	r3, [r7, #4]
    5292:	799b      	ldrb	r3, [r3, #6]
    5294:	2201      	movs	r2, #1
    5296:	4053      	eors	r3, r2
    5298:	b2db      	uxtb	r3, r3
    529a:	2b00      	cmp	r3, #0
    529c:	d001      	beq.n	52a2 <usart_read_wait+0x22>
		return STATUS_ERR_DENIED;
    529e:	231c      	movs	r3, #28
    52a0:	e05e      	b.n	5360 <usart_read_wait+0xe0>
	}

#if USART_CALLBACK_MODE == true
	/* Check if the USART is busy doing asynchronous operation. */
	if (module->remaining_rx_buffer_length > 0) {
    52a2:	687b      	ldr	r3, [r7, #4]
    52a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    52a6:	b29b      	uxth	r3, r3
    52a8:	2b00      	cmp	r3, #0
    52aa:	d001      	beq.n	52b0 <usart_read_wait+0x30>
		return STATUS_BUSY;
    52ac:	2305      	movs	r3, #5
    52ae:	e057      	b.n	5360 <usart_read_wait+0xe0>
	}
#endif

	/* Check if USART has new data */
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    52b0:	68fb      	ldr	r3, [r7, #12]
    52b2:	7e1b      	ldrb	r3, [r3, #24]
    52b4:	b2db      	uxtb	r3, r3
    52b6:	001a      	movs	r2, r3
    52b8:	2304      	movs	r3, #4
    52ba:	4013      	ands	r3, r2
    52bc:	d101      	bne.n	52c2 <usart_read_wait+0x42>
		/* Return error code */
		return STATUS_BUSY;
    52be:	2305      	movs	r3, #5
    52c0:	e04e      	b.n	5360 <usart_read_wait+0xe0>
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
    52c2:	687b      	ldr	r3, [r7, #4]
    52c4:	0018      	movs	r0, r3
    52c6:	4b28      	ldr	r3, [pc, #160]	; (5368 <usart_read_wait+0xe8>)
    52c8:	4798      	blx	r3

	/* Read out the status code and mask away all but the 3 LSBs*/
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    52ca:	68fb      	ldr	r3, [r7, #12]
    52cc:	8b5b      	ldrh	r3, [r3, #26]
    52ce:	b29b      	uxth	r3, r3
    52d0:	b2da      	uxtb	r2, r3
    52d2:	230b      	movs	r3, #11
    52d4:	18fb      	adds	r3, r7, r3
    52d6:	213f      	movs	r1, #63	; 0x3f
    52d8:	400a      	ands	r2, r1
    52da:	701a      	strb	r2, [r3, #0]

	/* Check if an error has occurred during the receiving */
	if (error_code) {
    52dc:	230b      	movs	r3, #11
    52de:	18fb      	adds	r3, r7, r3
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	2b00      	cmp	r3, #0
    52e4:	d036      	beq.n	5354 <usart_read_wait+0xd4>
		/* Check which error occurred */
		if (error_code & SERCOM_USART_STATUS_FERR) {
    52e6:	230b      	movs	r3, #11
    52e8:	18fb      	adds	r3, r7, r3
    52ea:	781b      	ldrb	r3, [r3, #0]
    52ec:	2202      	movs	r2, #2
    52ee:	4013      	ands	r3, r2
    52f0:	d004      	beq.n	52fc <usart_read_wait+0x7c>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    52f2:	68fb      	ldr	r3, [r7, #12]
    52f4:	2202      	movs	r2, #2
    52f6:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_FORMAT;
    52f8:	231a      	movs	r3, #26
    52fa:	e031      	b.n	5360 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    52fc:	230b      	movs	r3, #11
    52fe:	18fb      	adds	r3, r7, r3
    5300:	781b      	ldrb	r3, [r3, #0]
    5302:	2204      	movs	r2, #4
    5304:	4013      	ands	r3, r2
    5306:	d004      	beq.n	5312 <usart_read_wait+0x92>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    5308:	68fb      	ldr	r3, [r7, #12]
    530a:	2204      	movs	r2, #4
    530c:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_OVERFLOW;
    530e:	231e      	movs	r3, #30
    5310:	e026      	b.n	5360 <usart_read_wait+0xe0>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5312:	230b      	movs	r3, #11
    5314:	18fb      	adds	r3, r7, r3
    5316:	781b      	ldrb	r3, [r3, #0]
    5318:	2201      	movs	r2, #1
    531a:	4013      	ands	r3, r2
    531c:	d004      	beq.n	5328 <usart_read_wait+0xa8>
			/* Clear flag by writing a 1 to it and
			 * return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    531e:	68fb      	ldr	r3, [r7, #12]
    5320:	2201      	movs	r2, #1
    5322:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_BAD_DATA;
    5324:	2313      	movs	r3, #19
    5326:	e01b      	b.n	5360 <usart_read_wait+0xe0>
		}
#ifdef FEATURE_USART_LIN_SLAVE
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    5328:	230b      	movs	r3, #11
    532a:	18fb      	adds	r3, r7, r3
    532c:	781b      	ldrb	r3, [r3, #0]
    532e:	2210      	movs	r2, #16
    5330:	4013      	ands	r3, r2
    5332:	d004      	beq.n	533e <usart_read_wait+0xbe>
			/* Clear flag by writing 1 to it  and
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    5334:	68fb      	ldr	r3, [r7, #12]
    5336:	2210      	movs	r2, #16
    5338:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PROTOCOL;
    533a:	2342      	movs	r3, #66	; 0x42
    533c:	e010      	b.n	5360 <usart_read_wait+0xe0>
		}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    533e:	230b      	movs	r3, #11
    5340:	18fb      	adds	r3, r7, r3
    5342:	781b      	ldrb	r3, [r3, #0]
    5344:	2220      	movs	r2, #32
    5346:	4013      	ands	r3, r2
    5348:	d004      	beq.n	5354 <usart_read_wait+0xd4>
			/* Clear flag by writing 1 to it
			 *  return with an error code */
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    534a:	68fb      	ldr	r3, [r7, #12]
    534c:	2220      	movs	r2, #32
    534e:	835a      	strh	r2, [r3, #26]

			return STATUS_ERR_PACKET_COLLISION;
    5350:	2341      	movs	r3, #65	; 0x41
    5352:	e005      	b.n	5360 <usart_read_wait+0xe0>
		}
#endif
	}

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;
    5354:	68fb      	ldr	r3, [r7, #12]
    5356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    5358:	b29a      	uxth	r2, r3
    535a:	683b      	ldr	r3, [r7, #0]
    535c:	801a      	strh	r2, [r3, #0]

	return STATUS_OK;
    535e:	2300      	movs	r3, #0
}
    5360:	0018      	movs	r0, r3
    5362:	46bd      	mov	sp, r7
    5364:	b004      	add	sp, #16
    5366:	bd80      	pop	{r7, pc}
    5368:	00004ca9 	.word	0x00004ca9

0000536c <system_interrupt_enter_critical_section>:
{
    536c:	b580      	push	{r7, lr}
    536e:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    5370:	4b02      	ldr	r3, [pc, #8]	; (537c <system_interrupt_enter_critical_section+0x10>)
    5372:	4798      	blx	r3
}
    5374:	46c0      	nop			; (mov r8, r8)
    5376:	46bd      	mov	sp, r7
    5378:	bd80      	pop	{r7, pc}
    537a:	46c0      	nop			; (mov r8, r8)
    537c:	00002ebd 	.word	0x00002ebd

00005380 <system_interrupt_leave_critical_section>:
{
    5380:	b580      	push	{r7, lr}
    5382:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    5384:	4b02      	ldr	r3, [pc, #8]	; (5390 <system_interrupt_leave_critical_section+0x10>)
    5386:	4798      	blx	r3
}
    5388:	46c0      	nop			; (mov r8, r8)
    538a:	46bd      	mov	sp, r7
    538c:	bd80      	pop	{r7, pc}
    538e:	46c0      	nop			; (mov r8, r8)
    5390:	00002f11 	.word	0x00002f11

00005394 <usart_is_syncing>:
{
    5394:	b580      	push	{r7, lr}
    5396:	b084      	sub	sp, #16
    5398:	af00      	add	r7, sp, #0
    539a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	681b      	ldr	r3, [r3, #0]
    53a0:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
    53a2:	68fb      	ldr	r3, [r7, #12]
    53a4:	69db      	ldr	r3, [r3, #28]
    53a6:	1e5a      	subs	r2, r3, #1
    53a8:	4193      	sbcs	r3, r2
    53aa:	b2db      	uxtb	r3, r3
}
    53ac:	0018      	movs	r0, r3
    53ae:	46bd      	mov	sp, r7
    53b0:	b004      	add	sp, #16
    53b2:	bd80      	pop	{r7, pc}

000053b4 <_usart_wait_for_sync>:
{
    53b4:	b580      	push	{r7, lr}
    53b6:	b082      	sub	sp, #8
    53b8:	af00      	add	r7, sp, #0
    53ba:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
    53bc:	46c0      	nop			; (mov r8, r8)
    53be:	687b      	ldr	r3, [r7, #4]
    53c0:	0018      	movs	r0, r3
    53c2:	4b04      	ldr	r3, [pc, #16]	; (53d4 <_usart_wait_for_sync+0x20>)
    53c4:	4798      	blx	r3
    53c6:	1e03      	subs	r3, r0, #0
    53c8:	d1f9      	bne.n	53be <_usart_wait_for_sync+0xa>
}
    53ca:	46c0      	nop			; (mov r8, r8)
    53cc:	46bd      	mov	sp, r7
    53ce:	b002      	add	sp, #8
    53d0:	bd80      	pop	{r7, pc}
    53d2:	46c0      	nop			; (mov r8, r8)
    53d4:	00005395 	.word	0x00005395

000053d8 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    53d8:	b580      	push	{r7, lr}
    53da:	b086      	sub	sp, #24
    53dc:	af00      	add	r7, sp, #0
    53de:	60f8      	str	r0, [r7, #12]
    53e0:	60b9      	str	r1, [r7, #8]
    53e2:	1dbb      	adds	r3, r7, #6
    53e4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    53e6:	68fb      	ldr	r3, [r7, #12]
    53e8:	681b      	ldr	r3, [r3, #0]
    53ea:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    53ec:	4b0f      	ldr	r3, [pc, #60]	; (542c <_usart_write_buffer+0x54>)
    53ee:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
    53f0:	68fb      	ldr	r3, [r7, #12]
    53f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    53f4:	b29b      	uxth	r3, r3
    53f6:	2b00      	cmp	r3, #0
    53f8:	d003      	beq.n	5402 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
    53fa:	4b0d      	ldr	r3, [pc, #52]	; (5430 <_usart_write_buffer+0x58>)
    53fc:	4798      	blx	r3
		return STATUS_BUSY;
    53fe:	2305      	movs	r3, #5
    5400:	e010      	b.n	5424 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
    5402:	68fb      	ldr	r3, [r7, #12]
    5404:	1dba      	adds	r2, r7, #6
    5406:	8812      	ldrh	r2, [r2, #0]
    5408:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
    540a:	4b09      	ldr	r3, [pc, #36]	; (5430 <_usart_write_buffer+0x58>)
    540c:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
    540e:	68fb      	ldr	r3, [r7, #12]
    5410:	68ba      	ldr	r2, [r7, #8]
    5412:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
    5414:	68fb      	ldr	r3, [r7, #12]
    5416:	2233      	movs	r2, #51	; 0x33
    5418:	2105      	movs	r1, #5
    541a:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
    541c:	697b      	ldr	r3, [r7, #20]
    541e:	2201      	movs	r2, #1
    5420:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
    5422:	2300      	movs	r3, #0
}
    5424:	0018      	movs	r0, r3
    5426:	46bd      	mov	sp, r7
    5428:	b006      	add	sp, #24
    542a:	bd80      	pop	{r7, pc}
    542c:	0000536d 	.word	0x0000536d
    5430:	00005381 	.word	0x00005381

00005434 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    5434:	b580      	push	{r7, lr}
    5436:	b086      	sub	sp, #24
    5438:	af00      	add	r7, sp, #0
    543a:	60f8      	str	r0, [r7, #12]
    543c:	60b9      	str	r1, [r7, #8]
    543e:	1dbb      	adds	r3, r7, #6
    5440:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    5442:	68fb      	ldr	r3, [r7, #12]
    5444:	681b      	ldr	r3, [r3, #0]
    5446:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
    5448:	4b16      	ldr	r3, [pc, #88]	; (54a4 <_usart_read_buffer+0x70>)
    544a:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    544c:	68fb      	ldr	r3, [r7, #12]
    544e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    5450:	b29b      	uxth	r3, r3
    5452:	2b00      	cmp	r3, #0
    5454:	d003      	beq.n	545e <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
    5456:	4b14      	ldr	r3, [pc, #80]	; (54a8 <_usart_read_buffer+0x74>)
    5458:	4798      	blx	r3
		return STATUS_BUSY;
    545a:	2305      	movs	r3, #5
    545c:	e01e      	b.n	549c <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
    545e:	68fb      	ldr	r3, [r7, #12]
    5460:	1dba      	adds	r2, r7, #6
    5462:	8812      	ldrh	r2, [r2, #0]
    5464:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
    5466:	4b10      	ldr	r3, [pc, #64]	; (54a8 <_usart_read_buffer+0x74>)
    5468:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
    546a:	68fb      	ldr	r3, [r7, #12]
    546c:	68ba      	ldr	r2, [r7, #8]
    546e:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
    5470:	68fb      	ldr	r3, [r7, #12]
    5472:	2232      	movs	r2, #50	; 0x32
    5474:	2105      	movs	r1, #5
    5476:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    5478:	697b      	ldr	r3, [r7, #20]
    547a:	2204      	movs	r2, #4
    547c:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
    547e:	68fb      	ldr	r3, [r7, #12]
    5480:	7a1b      	ldrb	r3, [r3, #8]
    5482:	2b00      	cmp	r3, #0
    5484:	d002      	beq.n	548c <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
    5486:	697b      	ldr	r3, [r7, #20]
    5488:	2220      	movs	r2, #32
    548a:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
    548c:	68fb      	ldr	r3, [r7, #12]
    548e:	7a5b      	ldrb	r3, [r3, #9]
    5490:	2b00      	cmp	r3, #0
    5492:	d002      	beq.n	549a <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
    5494:	697b      	ldr	r3, [r7, #20]
    5496:	2208      	movs	r2, #8
    5498:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
    549a:	2300      	movs	r3, #0
}
    549c:	0018      	movs	r0, r3
    549e:	46bd      	mov	sp, r7
    54a0:	b006      	add	sp, #24
    54a2:	bd80      	pop	{r7, pc}
    54a4:	0000536d 	.word	0x0000536d
    54a8:	00005381 	.word	0x00005381

000054ac <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
    54ac:	b580      	push	{r7, lr}
    54ae:	b084      	sub	sp, #16
    54b0:	af00      	add	r7, sp, #0
    54b2:	60f8      	str	r0, [r7, #12]
    54b4:	60b9      	str	r1, [r7, #8]
    54b6:	1dfb      	adds	r3, r7, #7
    54b8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    54ba:	1dfb      	adds	r3, r7, #7
    54bc:	781b      	ldrb	r3, [r3, #0]
    54be:	68fa      	ldr	r2, [r7, #12]
    54c0:	3302      	adds	r3, #2
    54c2:	009b      	lsls	r3, r3, #2
    54c4:	18d3      	adds	r3, r2, r3
    54c6:	3304      	adds	r3, #4
    54c8:	68ba      	ldr	r2, [r7, #8]
    54ca:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    54cc:	68fb      	ldr	r3, [r7, #12]
    54ce:	2230      	movs	r2, #48	; 0x30
    54d0:	5c9b      	ldrb	r3, [r3, r2]
    54d2:	b25a      	sxtb	r2, r3
    54d4:	1dfb      	adds	r3, r7, #7
    54d6:	781b      	ldrb	r3, [r3, #0]
    54d8:	2101      	movs	r1, #1
    54da:	4099      	lsls	r1, r3
    54dc:	000b      	movs	r3, r1
    54de:	b25b      	sxtb	r3, r3
    54e0:	4313      	orrs	r3, r2
    54e2:	b25b      	sxtb	r3, r3
    54e4:	b2d9      	uxtb	r1, r3
    54e6:	68fb      	ldr	r3, [r7, #12]
    54e8:	2230      	movs	r2, #48	; 0x30
    54ea:	5499      	strb	r1, [r3, r2]
}
    54ec:	46c0      	nop			; (mov r8, r8)
    54ee:	46bd      	mov	sp, r7
    54f0:	b004      	add	sp, #16
    54f2:	bd80      	pop	{r7, pc}

000054f4 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
    54f4:	b580      	push	{r7, lr}
    54f6:	b084      	sub	sp, #16
    54f8:	af00      	add	r7, sp, #0
    54fa:	60f8      	str	r0, [r7, #12]
    54fc:	60b9      	str	r1, [r7, #8]
    54fe:	1dbb      	adds	r3, r7, #6
    5500:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
    5502:	1dbb      	adds	r3, r7, #6
    5504:	881b      	ldrh	r3, [r3, #0]
    5506:	2b00      	cmp	r3, #0
    5508:	d101      	bne.n	550e <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    550a:	2317      	movs	r3, #23
    550c:	e010      	b.n	5530 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    550e:	68fb      	ldr	r3, [r7, #12]
    5510:	79db      	ldrb	r3, [r3, #7]
    5512:	2201      	movs	r2, #1
    5514:	4053      	eors	r3, r2
    5516:	b2db      	uxtb	r3, r3
    5518:	2b00      	cmp	r3, #0
    551a:	d001      	beq.n	5520 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    551c:	231c      	movs	r3, #28
    551e:	e007      	b.n	5530 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
    5520:	1dbb      	adds	r3, r7, #6
    5522:	881a      	ldrh	r2, [r3, #0]
    5524:	68b9      	ldr	r1, [r7, #8]
    5526:	68fb      	ldr	r3, [r7, #12]
    5528:	0018      	movs	r0, r3
    552a:	4b03      	ldr	r3, [pc, #12]	; (5538 <usart_write_buffer_job+0x44>)
    552c:	4798      	blx	r3
    552e:	0003      	movs	r3, r0
}
    5530:	0018      	movs	r0, r3
    5532:	46bd      	mov	sp, r7
    5534:	b004      	add	sp, #16
    5536:	bd80      	pop	{r7, pc}
    5538:	000053d9 	.word	0x000053d9

0000553c <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    553c:	b580      	push	{r7, lr}
    553e:	b084      	sub	sp, #16
    5540:	af00      	add	r7, sp, #0
    5542:	60f8      	str	r0, [r7, #12]
    5544:	60b9      	str	r1, [r7, #8]
    5546:	1dbb      	adds	r3, r7, #6
    5548:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
    554a:	1dbb      	adds	r3, r7, #6
    554c:	881b      	ldrh	r3, [r3, #0]
    554e:	2b00      	cmp	r3, #0
    5550:	d101      	bne.n	5556 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
    5552:	2317      	movs	r3, #23
    5554:	e010      	b.n	5578 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    5556:	68fb      	ldr	r3, [r7, #12]
    5558:	799b      	ldrb	r3, [r3, #6]
    555a:	2201      	movs	r2, #1
    555c:	4053      	eors	r3, r2
    555e:	b2db      	uxtb	r3, r3
    5560:	2b00      	cmp	r3, #0
    5562:	d001      	beq.n	5568 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
    5564:	231c      	movs	r3, #28
    5566:	e007      	b.n	5578 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
    5568:	1dbb      	adds	r3, r7, #6
    556a:	881a      	ldrh	r2, [r3, #0]
    556c:	68b9      	ldr	r1, [r7, #8]
    556e:	68fb      	ldr	r3, [r7, #12]
    5570:	0018      	movs	r0, r3
    5572:	4b03      	ldr	r3, [pc, #12]	; (5580 <usart_read_buffer_job+0x44>)
    5574:	4798      	blx	r3
    5576:	0003      	movs	r3, r0
}
    5578:	0018      	movs	r0, r3
    557a:	46bd      	mov	sp, r7
    557c:	b004      	add	sp, #16
    557e:	bd80      	pop	{r7, pc}
    5580:	00005435 	.word	0x00005435

00005584 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
    5584:	b580      	push	{r7, lr}
    5586:	b084      	sub	sp, #16
    5588:	af00      	add	r7, sp, #0
    558a:	6078      	str	r0, [r7, #4]
    558c:	000a      	movs	r2, r1
    558e:	1cfb      	adds	r3, r7, #3
    5590:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
    5592:	1cfb      	adds	r3, r7, #3
    5594:	781b      	ldrb	r3, [r3, #0]
    5596:	2b00      	cmp	r3, #0
    5598:	d002      	beq.n	55a0 <usart_get_job_status+0x1c>
    559a:	2b01      	cmp	r3, #1
    559c:	d007      	beq.n	55ae <usart_get_job_status+0x2a>
    559e:	e00d      	b.n	55bc <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
    55a0:	230f      	movs	r3, #15
    55a2:	18fb      	adds	r3, r7, r3
    55a4:	687a      	ldr	r2, [r7, #4]
    55a6:	2132      	movs	r1, #50	; 0x32
    55a8:	5c52      	ldrb	r2, [r2, r1]
    55aa:	701a      	strb	r2, [r3, #0]
			break;
    55ac:	e00b      	b.n	55c6 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
    55ae:	230f      	movs	r3, #15
    55b0:	18fb      	adds	r3, r7, r3
    55b2:	687a      	ldr	r2, [r7, #4]
    55b4:	2133      	movs	r1, #51	; 0x33
    55b6:	5c52      	ldrb	r2, [r2, r1]
    55b8:	701a      	strb	r2, [r3, #0]
			break;
    55ba:	e004      	b.n	55c6 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
    55bc:	230f      	movs	r3, #15
    55be:	18fb      	adds	r3, r7, r3
    55c0:	2217      	movs	r2, #23
    55c2:	701a      	strb	r2, [r3, #0]
			break;
    55c4:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
    55c6:	230f      	movs	r3, #15
    55c8:	18fb      	adds	r3, r7, r3
    55ca:	781b      	ldrb	r3, [r3, #0]
}
    55cc:	0018      	movs	r0, r3
    55ce:	46bd      	mov	sp, r7
    55d0:	b004      	add	sp, #16
    55d2:	bd80      	pop	{r7, pc}

000055d4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    55d4:	b580      	push	{r7, lr}
    55d6:	b088      	sub	sp, #32
    55d8:	af00      	add	r7, sp, #0
    55da:	0002      	movs	r2, r0
    55dc:	1dfb      	adds	r3, r7, #7
    55de:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
    55e0:	1dfb      	adds	r3, r7, #7
    55e2:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
    55e4:	4ba3      	ldr	r3, [pc, #652]	; (5874 <_usart_interrupt_handler+0x2a0>)
    55e6:	0092      	lsls	r2, r2, #2
    55e8:	58d3      	ldr	r3, [r2, r3]
    55ea:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    55ec:	69bb      	ldr	r3, [r7, #24]
    55ee:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
    55f0:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
    55f2:	69bb      	ldr	r3, [r7, #24]
    55f4:	0018      	movs	r0, r3
    55f6:	4ba0      	ldr	r3, [pc, #640]	; (5878 <_usart_interrupt_handler+0x2a4>)
    55f8:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    55fa:	697b      	ldr	r3, [r7, #20]
    55fc:	7e1b      	ldrb	r3, [r3, #24]
    55fe:	b2da      	uxtb	r2, r3
    5600:	2312      	movs	r3, #18
    5602:	18fb      	adds	r3, r7, r3
    5604:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
    5606:	697b      	ldr	r3, [r7, #20]
    5608:	7d9b      	ldrb	r3, [r3, #22]
    560a:	b2db      	uxtb	r3, r3
    560c:	b29a      	uxth	r2, r3
    560e:	2312      	movs	r3, #18
    5610:	18fb      	adds	r3, r7, r3
    5612:	2112      	movs	r1, #18
    5614:	1879      	adds	r1, r7, r1
    5616:	8809      	ldrh	r1, [r1, #0]
    5618:	400a      	ands	r2, r1
    561a:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
    561c:	69bb      	ldr	r3, [r7, #24]
    561e:	2230      	movs	r2, #48	; 0x30
    5620:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
    5622:	69ba      	ldr	r2, [r7, #24]
    5624:	2131      	movs	r1, #49	; 0x31
    5626:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
    5628:	4013      	ands	r3, r2
    562a:	b2da      	uxtb	r2, r3
    562c:	2310      	movs	r3, #16
    562e:	18fb      	adds	r3, r7, r3
    5630:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    5632:	2312      	movs	r3, #18
    5634:	18fb      	adds	r3, r7, r3
    5636:	881b      	ldrh	r3, [r3, #0]
    5638:	2201      	movs	r2, #1
    563a:	4013      	ands	r3, r2
    563c:	d044      	beq.n	56c8 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
    563e:	69bb      	ldr	r3, [r7, #24]
    5640:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    5642:	b29b      	uxth	r3, r3
    5644:	2b00      	cmp	r3, #0
    5646:	d03c      	beq.n	56c2 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    5648:	69bb      	ldr	r3, [r7, #24]
    564a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    564c:	781b      	ldrb	r3, [r3, #0]
    564e:	b2da      	uxtb	r2, r3
    5650:	231c      	movs	r3, #28
    5652:	18fb      	adds	r3, r7, r3
    5654:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    5656:	69bb      	ldr	r3, [r7, #24]
    5658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    565a:	1c5a      	adds	r2, r3, #1
    565c:	69bb      	ldr	r3, [r7, #24]
    565e:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5660:	69bb      	ldr	r3, [r7, #24]
    5662:	795b      	ldrb	r3, [r3, #5]
    5664:	2b01      	cmp	r3, #1
    5666:	d113      	bne.n	5690 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    5668:	69bb      	ldr	r3, [r7, #24]
    566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    566c:	781b      	ldrb	r3, [r3, #0]
    566e:	b2db      	uxtb	r3, r3
    5670:	021b      	lsls	r3, r3, #8
    5672:	b21a      	sxth	r2, r3
    5674:	231c      	movs	r3, #28
    5676:	18fb      	adds	r3, r7, r3
    5678:	2100      	movs	r1, #0
    567a:	5e5b      	ldrsh	r3, [r3, r1]
    567c:	4313      	orrs	r3, r2
    567e:	b21a      	sxth	r2, r3
    5680:	231c      	movs	r3, #28
    5682:	18fb      	adds	r3, r7, r3
    5684:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
    5686:	69bb      	ldr	r3, [r7, #24]
    5688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    568a:	1c5a      	adds	r2, r3, #1
    568c:	69bb      	ldr	r3, [r7, #24]
    568e:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    5690:	231c      	movs	r3, #28
    5692:	18fb      	adds	r3, r7, r3
    5694:	881b      	ldrh	r3, [r3, #0]
    5696:	05db      	lsls	r3, r3, #23
    5698:	0ddb      	lsrs	r3, r3, #23
    569a:	b29a      	uxth	r2, r3
    569c:	697b      	ldr	r3, [r7, #20]
    569e:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    56a0:	69bb      	ldr	r3, [r7, #24]
    56a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    56a4:	b29b      	uxth	r3, r3
    56a6:	3b01      	subs	r3, #1
    56a8:	b29b      	uxth	r3, r3
    56aa:	69ba      	ldr	r2, [r7, #24]
    56ac:	1c19      	adds	r1, r3, #0
    56ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
    56b0:	2b00      	cmp	r3, #0
    56b2:	d109      	bne.n	56c8 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    56b4:	697b      	ldr	r3, [r7, #20]
    56b6:	2201      	movs	r2, #1
    56b8:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    56ba:	697b      	ldr	r3, [r7, #20]
    56bc:	2202      	movs	r2, #2
    56be:	759a      	strb	r2, [r3, #22]
    56c0:	e002      	b.n	56c8 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    56c2:	697b      	ldr	r3, [r7, #20]
    56c4:	2201      	movs	r2, #1
    56c6:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    56c8:	2312      	movs	r3, #18
    56ca:	18fb      	adds	r3, r7, r3
    56cc:	881b      	ldrh	r3, [r3, #0]
    56ce:	2202      	movs	r2, #2
    56d0:	4013      	ands	r3, r2
    56d2:	d011      	beq.n	56f8 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    56d4:	697b      	ldr	r3, [r7, #20]
    56d6:	2202      	movs	r2, #2
    56d8:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
    56da:	69bb      	ldr	r3, [r7, #24]
    56dc:	2233      	movs	r2, #51	; 0x33
    56de:	2100      	movs	r1, #0
    56e0:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    56e2:	2310      	movs	r3, #16
    56e4:	18fb      	adds	r3, r7, r3
    56e6:	881b      	ldrh	r3, [r3, #0]
    56e8:	2201      	movs	r2, #1
    56ea:	4013      	ands	r3, r2
    56ec:	d004      	beq.n	56f8 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    56ee:	69bb      	ldr	r3, [r7, #24]
    56f0:	68db      	ldr	r3, [r3, #12]
    56f2:	69ba      	ldr	r2, [r7, #24]
    56f4:	0010      	movs	r0, r2
    56f6:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    56f8:	2312      	movs	r3, #18
    56fa:	18fb      	adds	r3, r7, r3
    56fc:	881b      	ldrh	r3, [r3, #0]
    56fe:	2204      	movs	r2, #4
    5700:	4013      	ands	r3, r2
    5702:	d100      	bne.n	5706 <_usart_interrupt_handler+0x132>
    5704:	e0bd      	b.n	5882 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
    5706:	69bb      	ldr	r3, [r7, #24]
    5708:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    570a:	b29b      	uxth	r3, r3
    570c:	2b00      	cmp	r3, #0
    570e:	d100      	bne.n	5712 <_usart_interrupt_handler+0x13e>
    5710:	e0b4      	b.n	587c <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    5712:	697b      	ldr	r3, [r7, #20]
    5714:	8b5b      	ldrh	r3, [r3, #26]
    5716:	b29b      	uxth	r3, r3
    5718:	b2da      	uxtb	r2, r3
    571a:	231f      	movs	r3, #31
    571c:	18fb      	adds	r3, r7, r3
    571e:	213f      	movs	r1, #63	; 0x3f
    5720:	400a      	ands	r2, r1
    5722:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    5724:	231f      	movs	r3, #31
    5726:	18fb      	adds	r3, r7, r3
    5728:	781b      	ldrb	r3, [r3, #0]
    572a:	2208      	movs	r2, #8
    572c:	4013      	ands	r3, r2
    572e:	d007      	beq.n	5740 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    5730:	231f      	movs	r3, #31
    5732:	18fb      	adds	r3, r7, r3
    5734:	221f      	movs	r2, #31
    5736:	18ba      	adds	r2, r7, r2
    5738:	7812      	ldrb	r2, [r2, #0]
    573a:	2108      	movs	r1, #8
    573c:	438a      	bics	r2, r1
    573e:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    5740:	231f      	movs	r3, #31
    5742:	18fb      	adds	r3, r7, r3
    5744:	781b      	ldrb	r3, [r3, #0]
    5746:	2b00      	cmp	r3, #0
    5748:	d050      	beq.n	57ec <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    574a:	231f      	movs	r3, #31
    574c:	18fb      	adds	r3, r7, r3
    574e:	781b      	ldrb	r3, [r3, #0]
    5750:	2202      	movs	r2, #2
    5752:	4013      	ands	r3, r2
    5754:	d007      	beq.n	5766 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    5756:	69bb      	ldr	r3, [r7, #24]
    5758:	2232      	movs	r2, #50	; 0x32
    575a:	211a      	movs	r1, #26
    575c:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    575e:	697b      	ldr	r3, [r7, #20]
    5760:	2202      	movs	r2, #2
    5762:	835a      	strh	r2, [r3, #26]
    5764:	e036      	b.n	57d4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    5766:	231f      	movs	r3, #31
    5768:	18fb      	adds	r3, r7, r3
    576a:	781b      	ldrb	r3, [r3, #0]
    576c:	2204      	movs	r2, #4
    576e:	4013      	ands	r3, r2
    5770:	d007      	beq.n	5782 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
    5772:	69bb      	ldr	r3, [r7, #24]
    5774:	2232      	movs	r2, #50	; 0x32
    5776:	211e      	movs	r1, #30
    5778:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    577a:	697b      	ldr	r3, [r7, #20]
    577c:	2204      	movs	r2, #4
    577e:	835a      	strh	r2, [r3, #26]
    5780:	e028      	b.n	57d4 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    5782:	231f      	movs	r3, #31
    5784:	18fb      	adds	r3, r7, r3
    5786:	781b      	ldrb	r3, [r3, #0]
    5788:	2201      	movs	r2, #1
    578a:	4013      	ands	r3, r2
    578c:	d007      	beq.n	579e <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
    578e:	69bb      	ldr	r3, [r7, #24]
    5790:	2232      	movs	r2, #50	; 0x32
    5792:	2113      	movs	r1, #19
    5794:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    5796:	697b      	ldr	r3, [r7, #20]
    5798:	2201      	movs	r2, #1
    579a:	835a      	strh	r2, [r3, #26]
    579c:	e01a      	b.n	57d4 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    579e:	231f      	movs	r3, #31
    57a0:	18fb      	adds	r3, r7, r3
    57a2:	781b      	ldrb	r3, [r3, #0]
    57a4:	2210      	movs	r2, #16
    57a6:	4013      	ands	r3, r2
    57a8:	d007      	beq.n	57ba <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
    57aa:	69bb      	ldr	r3, [r7, #24]
    57ac:	2232      	movs	r2, #50	; 0x32
    57ae:	2142      	movs	r1, #66	; 0x42
    57b0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    57b2:	697b      	ldr	r3, [r7, #20]
    57b4:	2210      	movs	r2, #16
    57b6:	835a      	strh	r2, [r3, #26]
    57b8:	e00c      	b.n	57d4 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    57ba:	231f      	movs	r3, #31
    57bc:	18fb      	adds	r3, r7, r3
    57be:	781b      	ldrb	r3, [r3, #0]
    57c0:	2220      	movs	r2, #32
    57c2:	4013      	ands	r3, r2
    57c4:	d006      	beq.n	57d4 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    57c6:	69bb      	ldr	r3, [r7, #24]
    57c8:	2232      	movs	r2, #50	; 0x32
    57ca:	2141      	movs	r1, #65	; 0x41
    57cc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    57ce:	697b      	ldr	r3, [r7, #20]
    57d0:	2220      	movs	r2, #32
    57d2:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
    57d4:	2310      	movs	r3, #16
    57d6:	18fb      	adds	r3, r7, r3
    57d8:	881b      	ldrh	r3, [r3, #0]
    57da:	2204      	movs	r2, #4
    57dc:	4013      	ands	r3, r2
				if (callback_status
    57de:	d050      	beq.n	5882 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    57e0:	69bb      	ldr	r3, [r7, #24]
    57e2:	695b      	ldr	r3, [r3, #20]
    57e4:	69ba      	ldr	r2, [r7, #24]
    57e6:	0010      	movs	r0, r2
    57e8:	4798      	blx	r3
    57ea:	e04a      	b.n	5882 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    57ec:	697b      	ldr	r3, [r7, #20]
    57ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    57f0:	b29a      	uxth	r2, r3
    57f2:	230e      	movs	r3, #14
    57f4:	18fb      	adds	r3, r7, r3
    57f6:	05d2      	lsls	r2, r2, #23
    57f8:	0dd2      	lsrs	r2, r2, #23
    57fa:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    57fc:	69bb      	ldr	r3, [r7, #24]
    57fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5800:	220e      	movs	r2, #14
    5802:	18ba      	adds	r2, r7, r2
    5804:	8812      	ldrh	r2, [r2, #0]
    5806:	b2d2      	uxtb	r2, r2
    5808:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    580a:	69bb      	ldr	r3, [r7, #24]
    580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    580e:	1c5a      	adds	r2, r3, #1
    5810:	69bb      	ldr	r3, [r7, #24]
    5812:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    5814:	69bb      	ldr	r3, [r7, #24]
    5816:	795b      	ldrb	r3, [r3, #5]
    5818:	2b01      	cmp	r3, #1
    581a:	d10d      	bne.n	5838 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
    581c:	69bb      	ldr	r3, [r7, #24]
    581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5820:	220e      	movs	r2, #14
    5822:	18ba      	adds	r2, r7, r2
    5824:	8812      	ldrh	r2, [r2, #0]
    5826:	0a12      	lsrs	r2, r2, #8
    5828:	b292      	uxth	r2, r2
    582a:	b2d2      	uxtb	r2, r2
    582c:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
    582e:	69bb      	ldr	r3, [r7, #24]
    5830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5832:	1c5a      	adds	r2, r3, #1
    5834:	69bb      	ldr	r3, [r7, #24]
    5836:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    5838:	69bb      	ldr	r3, [r7, #24]
    583a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    583c:	b29b      	uxth	r3, r3
    583e:	3b01      	subs	r3, #1
    5840:	b29b      	uxth	r3, r3
    5842:	69ba      	ldr	r2, [r7, #24]
    5844:	1c19      	adds	r1, r3, #0
    5846:	8591      	strh	r1, [r2, #44]	; 0x2c
    5848:	2b00      	cmp	r3, #0
    584a:	d11a      	bne.n	5882 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    584c:	697b      	ldr	r3, [r7, #20]
    584e:	2204      	movs	r2, #4
    5850:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
    5852:	69bb      	ldr	r3, [r7, #24]
    5854:	2232      	movs	r2, #50	; 0x32
    5856:	2100      	movs	r1, #0
    5858:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
    585a:	2310      	movs	r3, #16
    585c:	18fb      	adds	r3, r7, r3
    585e:	881b      	ldrh	r3, [r3, #0]
    5860:	2202      	movs	r2, #2
    5862:	4013      	ands	r3, r2
					if (callback_status
    5864:	d00d      	beq.n	5882 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    5866:	69bb      	ldr	r3, [r7, #24]
    5868:	691b      	ldr	r3, [r3, #16]
    586a:	69ba      	ldr	r2, [r7, #24]
    586c:	0010      	movs	r0, r2
    586e:	4798      	blx	r3
    5870:	e007      	b.n	5882 <_usart_interrupt_handler+0x2ae>
    5872:	46c0      	nop			; (mov r8, r8)
    5874:	200009d4 	.word	0x200009d4
    5878:	000053b5 	.word	0x000053b5
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    587c:	697b      	ldr	r3, [r7, #20]
    587e:	2204      	movs	r2, #4
    5880:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    5882:	2312      	movs	r3, #18
    5884:	18fb      	adds	r3, r7, r3
    5886:	881b      	ldrh	r3, [r3, #0]
    5888:	2210      	movs	r2, #16
    588a:	4013      	ands	r3, r2
    588c:	d010      	beq.n	58b0 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    588e:	697b      	ldr	r3, [r7, #20]
    5890:	2210      	movs	r2, #16
    5892:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    5894:	697b      	ldr	r3, [r7, #20]
    5896:	2210      	movs	r2, #16
    5898:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    589a:	2310      	movs	r3, #16
    589c:	18fb      	adds	r3, r7, r3
    589e:	881b      	ldrh	r3, [r3, #0]
    58a0:	2210      	movs	r2, #16
    58a2:	4013      	ands	r3, r2
    58a4:	d004      	beq.n	58b0 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    58a6:	69bb      	ldr	r3, [r7, #24]
    58a8:	69db      	ldr	r3, [r3, #28]
    58aa:	69ba      	ldr	r2, [r7, #24]
    58ac:	0010      	movs	r0, r2
    58ae:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    58b0:	2312      	movs	r3, #18
    58b2:	18fb      	adds	r3, r7, r3
    58b4:	881b      	ldrh	r3, [r3, #0]
    58b6:	2220      	movs	r2, #32
    58b8:	4013      	ands	r3, r2
    58ba:	d010      	beq.n	58de <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    58bc:	697b      	ldr	r3, [r7, #20]
    58be:	2220      	movs	r2, #32
    58c0:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    58c2:	697b      	ldr	r3, [r7, #20]
    58c4:	2220      	movs	r2, #32
    58c6:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    58c8:	2310      	movs	r3, #16
    58ca:	18fb      	adds	r3, r7, r3
    58cc:	881b      	ldrh	r3, [r3, #0]
    58ce:	2208      	movs	r2, #8
    58d0:	4013      	ands	r3, r2
    58d2:	d004      	beq.n	58de <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    58d4:	69bb      	ldr	r3, [r7, #24]
    58d6:	699b      	ldr	r3, [r3, #24]
    58d8:	69ba      	ldr	r2, [r7, #24]
    58da:	0010      	movs	r0, r2
    58dc:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    58de:	2312      	movs	r3, #18
    58e0:	18fb      	adds	r3, r7, r3
    58e2:	881b      	ldrh	r3, [r3, #0]
    58e4:	2208      	movs	r2, #8
    58e6:	4013      	ands	r3, r2
    58e8:	d010      	beq.n	590c <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    58ea:	697b      	ldr	r3, [r7, #20]
    58ec:	2208      	movs	r2, #8
    58ee:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    58f0:	697b      	ldr	r3, [r7, #20]
    58f2:	2208      	movs	r2, #8
    58f4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    58f6:	2310      	movs	r3, #16
    58f8:	18fb      	adds	r3, r7, r3
    58fa:	881b      	ldrh	r3, [r3, #0]
    58fc:	2220      	movs	r2, #32
    58fe:	4013      	ands	r3, r2
    5900:	d004      	beq.n	590c <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    5902:	69bb      	ldr	r3, [r7, #24]
    5904:	6a1b      	ldr	r3, [r3, #32]
    5906:	69ba      	ldr	r2, [r7, #24]
    5908:	0010      	movs	r0, r2
    590a:	4798      	blx	r3
		}
	}
#endif
}
    590c:	46c0      	nop			; (mov r8, r8)
    590e:	46bd      	mov	sp, r7
    5910:	b008      	add	sp, #32
    5912:	bd80      	pop	{r7, pc}

00005914 <system_gclk_gen_get_config_defaults>:
{
    5914:	b580      	push	{r7, lr}
    5916:	b082      	sub	sp, #8
    5918:	af00      	add	r7, sp, #0
    591a:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    591c:	687b      	ldr	r3, [r7, #4]
    591e:	2201      	movs	r2, #1
    5920:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    5922:	687b      	ldr	r3, [r7, #4]
    5924:	2200      	movs	r2, #0
    5926:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    5928:	687b      	ldr	r3, [r7, #4]
    592a:	2206      	movs	r2, #6
    592c:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	2200      	movs	r2, #0
    5932:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    5934:	687b      	ldr	r3, [r7, #4]
    5936:	2200      	movs	r2, #0
    5938:	725a      	strb	r2, [r3, #9]
}
    593a:	46c0      	nop			; (mov r8, r8)
    593c:	46bd      	mov	sp, r7
    593e:	b002      	add	sp, #8
    5940:	bd80      	pop	{r7, pc}

00005942 <system_gclk_chan_get_config_defaults>:
{
    5942:	b580      	push	{r7, lr}
    5944:	b082      	sub	sp, #8
    5946:	af00      	add	r7, sp, #0
    5948:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    594a:	687b      	ldr	r3, [r7, #4]
    594c:	2200      	movs	r2, #0
    594e:	701a      	strb	r2, [r3, #0]
}
    5950:	46c0      	nop			; (mov r8, r8)
    5952:	46bd      	mov	sp, r7
    5954:	b002      	add	sp, #8
    5956:	bd80      	pop	{r7, pc}

00005958 <system_clock_source_xosc32k_get_config_defaults>:
{
    5958:	b580      	push	{r7, lr}
    595a:	b082      	sub	sp, #8
    595c:	af00      	add	r7, sp, #0
    595e:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	2200      	movs	r2, #0
    5964:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    5966:	687b      	ldr	r3, [r7, #4]
    5968:	2204      	movs	r2, #4
    596a:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    596c:	687b      	ldr	r3, [r7, #4]
    596e:	2200      	movs	r2, #0
    5970:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    5972:	687b      	ldr	r3, [r7, #4]
    5974:	2280      	movs	r2, #128	; 0x80
    5976:	0212      	lsls	r2, r2, #8
    5978:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    597a:	687b      	ldr	r3, [r7, #4]
    597c:	2200      	movs	r2, #0
    597e:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    5980:	687b      	ldr	r3, [r7, #4]
    5982:	2201      	movs	r2, #1
    5984:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    5986:	687b      	ldr	r3, [r7, #4]
    5988:	2200      	movs	r2, #0
    598a:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    598c:	687b      	ldr	r3, [r7, #4]
    598e:	2201      	movs	r2, #1
    5990:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    5992:	687b      	ldr	r3, [r7, #4]
    5994:	2200      	movs	r2, #0
    5996:	739a      	strb	r2, [r3, #14]
}
    5998:	46c0      	nop			; (mov r8, r8)
    599a:	46bd      	mov	sp, r7
    599c:	b002      	add	sp, #8
    599e:	bd80      	pop	{r7, pc}

000059a0 <system_clock_source_osc8m_get_config_defaults>:
{
    59a0:	b580      	push	{r7, lr}
    59a2:	b082      	sub	sp, #8
    59a4:	af00      	add	r7, sp, #0
    59a6:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    59a8:	687b      	ldr	r3, [r7, #4]
    59aa:	2203      	movs	r2, #3
    59ac:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    59ae:	687b      	ldr	r3, [r7, #4]
    59b0:	2200      	movs	r2, #0
    59b2:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    59b4:	687b      	ldr	r3, [r7, #4]
    59b6:	2201      	movs	r2, #1
    59b8:	709a      	strb	r2, [r3, #2]
}
    59ba:	46c0      	nop			; (mov r8, r8)
    59bc:	46bd      	mov	sp, r7
    59be:	b002      	add	sp, #8
    59c0:	bd80      	pop	{r7, pc}

000059c2 <system_clock_source_dfll_get_config_defaults>:
{
    59c2:	b580      	push	{r7, lr}
    59c4:	b082      	sub	sp, #8
    59c6:	af00      	add	r7, sp, #0
    59c8:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    59ca:	687b      	ldr	r3, [r7, #4]
    59cc:	2200      	movs	r2, #0
    59ce:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    59d0:	687b      	ldr	r3, [r7, #4]
    59d2:	2200      	movs	r2, #0
    59d4:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    59d6:	687b      	ldr	r3, [r7, #4]
    59d8:	2200      	movs	r2, #0
    59da:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    59dc:	687b      	ldr	r3, [r7, #4]
    59de:	2200      	movs	r2, #0
    59e0:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    59e2:	687b      	ldr	r3, [r7, #4]
    59e4:	2200      	movs	r2, #0
    59e6:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    59e8:	687b      	ldr	r3, [r7, #4]
    59ea:	2201      	movs	r2, #1
    59ec:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    59ee:	687b      	ldr	r3, [r7, #4]
    59f0:	2207      	movs	r2, #7
    59f2:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    59f4:	687b      	ldr	r3, [r7, #4]
    59f6:	223f      	movs	r2, #63	; 0x3f
    59f8:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    59fa:	687b      	ldr	r3, [r7, #4]
    59fc:	2201      	movs	r2, #1
    59fe:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    5a00:	687b      	ldr	r3, [r7, #4]
    5a02:	2201      	movs	r2, #1
    5a04:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    5a06:	687b      	ldr	r3, [r7, #4]
    5a08:	2206      	movs	r2, #6
    5a0a:	821a      	strh	r2, [r3, #16]
}
    5a0c:	46c0      	nop			; (mov r8, r8)
    5a0e:	46bd      	mov	sp, r7
    5a10:	b002      	add	sp, #8
    5a12:	bd80      	pop	{r7, pc}

00005a14 <system_cpu_clock_set_divider>:
{
    5a14:	b580      	push	{r7, lr}
    5a16:	b082      	sub	sp, #8
    5a18:	af00      	add	r7, sp, #0
    5a1a:	0002      	movs	r2, r0
    5a1c:	1dfb      	adds	r3, r7, #7
    5a1e:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    5a20:	4a03      	ldr	r2, [pc, #12]	; (5a30 <system_cpu_clock_set_divider+0x1c>)
    5a22:	1dfb      	adds	r3, r7, #7
    5a24:	781b      	ldrb	r3, [r3, #0]
    5a26:	7213      	strb	r3, [r2, #8]
}
    5a28:	46c0      	nop			; (mov r8, r8)
    5a2a:	46bd      	mov	sp, r7
    5a2c:	b002      	add	sp, #8
    5a2e:	bd80      	pop	{r7, pc}
    5a30:	40000400 	.word	0x40000400

00005a34 <system_apb_clock_set_divider>:
{
    5a34:	b580      	push	{r7, lr}
    5a36:	b082      	sub	sp, #8
    5a38:	af00      	add	r7, sp, #0
    5a3a:	0002      	movs	r2, r0
    5a3c:	1dfb      	adds	r3, r7, #7
    5a3e:	701a      	strb	r2, [r3, #0]
    5a40:	1dbb      	adds	r3, r7, #6
    5a42:	1c0a      	adds	r2, r1, #0
    5a44:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5a46:	1dfb      	adds	r3, r7, #7
    5a48:	781b      	ldrb	r3, [r3, #0]
    5a4a:	2b01      	cmp	r3, #1
    5a4c:	d008      	beq.n	5a60 <system_apb_clock_set_divider+0x2c>
    5a4e:	2b02      	cmp	r3, #2
    5a50:	d00b      	beq.n	5a6a <system_apb_clock_set_divider+0x36>
    5a52:	2b00      	cmp	r3, #0
    5a54:	d10e      	bne.n	5a74 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    5a56:	4a0b      	ldr	r2, [pc, #44]	; (5a84 <system_apb_clock_set_divider+0x50>)
    5a58:	1dbb      	adds	r3, r7, #6
    5a5a:	781b      	ldrb	r3, [r3, #0]
    5a5c:	7253      	strb	r3, [r2, #9]
			break;
    5a5e:	e00b      	b.n	5a78 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    5a60:	4a08      	ldr	r2, [pc, #32]	; (5a84 <system_apb_clock_set_divider+0x50>)
    5a62:	1dbb      	adds	r3, r7, #6
    5a64:	781b      	ldrb	r3, [r3, #0]
    5a66:	7293      	strb	r3, [r2, #10]
			break;
    5a68:	e006      	b.n	5a78 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    5a6a:	4a06      	ldr	r2, [pc, #24]	; (5a84 <system_apb_clock_set_divider+0x50>)
    5a6c:	1dbb      	adds	r3, r7, #6
    5a6e:	781b      	ldrb	r3, [r3, #0]
    5a70:	72d3      	strb	r3, [r2, #11]
			break;
    5a72:	e001      	b.n	5a78 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    5a74:	2317      	movs	r3, #23
    5a76:	e000      	b.n	5a7a <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    5a78:	2300      	movs	r3, #0
}
    5a7a:	0018      	movs	r0, r3
    5a7c:	46bd      	mov	sp, r7
    5a7e:	b002      	add	sp, #8
    5a80:	bd80      	pop	{r7, pc}
    5a82:	46c0      	nop			; (mov r8, r8)
    5a84:	40000400 	.word	0x40000400

00005a88 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    5a88:	b580      	push	{r7, lr}
    5a8a:	b082      	sub	sp, #8
    5a8c:	af00      	add	r7, sp, #0
    5a8e:	0002      	movs	r2, r0
    5a90:	1dfb      	adds	r3, r7, #7
    5a92:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    5a94:	4a08      	ldr	r2, [pc, #32]	; (5ab8 <system_flash_set_waitstates+0x30>)
    5a96:	1dfb      	adds	r3, r7, #7
    5a98:	781b      	ldrb	r3, [r3, #0]
    5a9a:	210f      	movs	r1, #15
    5a9c:	400b      	ands	r3, r1
    5a9e:	b2d9      	uxtb	r1, r3
    5aa0:	6853      	ldr	r3, [r2, #4]
    5aa2:	200f      	movs	r0, #15
    5aa4:	4001      	ands	r1, r0
    5aa6:	0049      	lsls	r1, r1, #1
    5aa8:	201e      	movs	r0, #30
    5aaa:	4383      	bics	r3, r0
    5aac:	430b      	orrs	r3, r1
    5aae:	6053      	str	r3, [r2, #4]
}
    5ab0:	46c0      	nop			; (mov r8, r8)
    5ab2:	46bd      	mov	sp, r7
    5ab4:	b002      	add	sp, #8
    5ab6:	bd80      	pop	{r7, pc}
    5ab8:	41004000 	.word	0x41004000

00005abc <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    5abc:	b580      	push	{r7, lr}
    5abe:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    5ac0:	46c0      	nop			; (mov r8, r8)
    5ac2:	4b04      	ldr	r3, [pc, #16]	; (5ad4 <_system_dfll_wait_for_sync+0x18>)
    5ac4:	68db      	ldr	r3, [r3, #12]
    5ac6:	2210      	movs	r2, #16
    5ac8:	4013      	ands	r3, r2
    5aca:	d0fa      	beq.n	5ac2 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    5acc:	46c0      	nop			; (mov r8, r8)
    5ace:	46bd      	mov	sp, r7
    5ad0:	bd80      	pop	{r7, pc}
    5ad2:	46c0      	nop			; (mov r8, r8)
    5ad4:	40000800 	.word	0x40000800

00005ad8 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    5ad8:	b580      	push	{r7, lr}
    5ada:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    5adc:	4b0c      	ldr	r3, [pc, #48]	; (5b10 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ade:	2202      	movs	r2, #2
    5ae0:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5ae2:	4b0c      	ldr	r3, [pc, #48]	; (5b14 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5ae4:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    5ae6:	4a0a      	ldr	r2, [pc, #40]	; (5b10 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5ae8:	4b0b      	ldr	r3, [pc, #44]	; (5b18 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5aea:	689b      	ldr	r3, [r3, #8]
    5aec:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    5aee:	4a08      	ldr	r2, [pc, #32]	; (5b10 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5af0:	4b09      	ldr	r3, [pc, #36]	; (5b18 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5af2:	685b      	ldr	r3, [r3, #4]
    5af4:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    5af6:	4b06      	ldr	r3, [pc, #24]	; (5b10 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5af8:	2200      	movs	r2, #0
    5afa:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    5afc:	4b05      	ldr	r3, [pc, #20]	; (5b14 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
    5afe:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    5b00:	4a03      	ldr	r2, [pc, #12]	; (5b10 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
    5b02:	4b05      	ldr	r3, [pc, #20]	; (5b18 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
    5b04:	681b      	ldr	r3, [r3, #0]
    5b06:	b29b      	uxth	r3, r3
    5b08:	8493      	strh	r3, [r2, #36]	; 0x24
}
    5b0a:	46c0      	nop			; (mov r8, r8)
    5b0c:	46bd      	mov	sp, r7
    5b0e:	bd80      	pop	{r7, pc}
    5b10:	40000800 	.word	0x40000800
    5b14:	00005abd 	.word	0x00005abd
    5b18:	20000160 	.word	0x20000160

00005b1c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b082      	sub	sp, #8
    5b20:	af00      	add	r7, sp, #0
    5b22:	0002      	movs	r2, r0
    5b24:	1dfb      	adds	r3, r7, #7
    5b26:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5b28:	1dfb      	adds	r3, r7, #7
    5b2a:	781b      	ldrb	r3, [r3, #0]
    5b2c:	2b08      	cmp	r3, #8
    5b2e:	d841      	bhi.n	5bb4 <system_clock_source_get_hz+0x98>
    5b30:	009a      	lsls	r2, r3, #2
    5b32:	4b23      	ldr	r3, [pc, #140]	; (5bc0 <system_clock_source_get_hz+0xa4>)
    5b34:	18d3      	adds	r3, r2, r3
    5b36:	681b      	ldr	r3, [r3, #0]
    5b38:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    5b3a:	4b22      	ldr	r3, [pc, #136]	; (5bc4 <system_clock_source_get_hz+0xa8>)
    5b3c:	691b      	ldr	r3, [r3, #16]
    5b3e:	e03a      	b.n	5bb6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    5b40:	4b21      	ldr	r3, [pc, #132]	; (5bc8 <system_clock_source_get_hz+0xac>)
    5b42:	6a1b      	ldr	r3, [r3, #32]
    5b44:	059b      	lsls	r3, r3, #22
    5b46:	0f9b      	lsrs	r3, r3, #30
    5b48:	b2db      	uxtb	r3, r3
    5b4a:	001a      	movs	r2, r3
    5b4c:	4b1f      	ldr	r3, [pc, #124]	; (5bcc <system_clock_source_get_hz+0xb0>)
    5b4e:	40d3      	lsrs	r3, r2
    5b50:	e031      	b.n	5bb6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    5b52:	2380      	movs	r3, #128	; 0x80
    5b54:	021b      	lsls	r3, r3, #8
    5b56:	e02e      	b.n	5bb6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    5b58:	2380      	movs	r3, #128	; 0x80
    5b5a:	021b      	lsls	r3, r3, #8
    5b5c:	e02b      	b.n	5bb6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    5b5e:	4b19      	ldr	r3, [pc, #100]	; (5bc4 <system_clock_source_get_hz+0xa8>)
    5b60:	695b      	ldr	r3, [r3, #20]
    5b62:	e028      	b.n	5bb6 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    5b64:	4b17      	ldr	r3, [pc, #92]	; (5bc4 <system_clock_source_get_hz+0xa8>)
    5b66:	681b      	ldr	r3, [r3, #0]
    5b68:	2202      	movs	r2, #2
    5b6a:	4013      	ands	r3, r2
    5b6c:	d101      	bne.n	5b72 <system_clock_source_get_hz+0x56>
			return 0;
    5b6e:	2300      	movs	r3, #0
    5b70:	e021      	b.n	5bb6 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    5b72:	4b17      	ldr	r3, [pc, #92]	; (5bd0 <system_clock_source_get_hz+0xb4>)
    5b74:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
    5b76:	4b13      	ldr	r3, [pc, #76]	; (5bc4 <system_clock_source_get_hz+0xa8>)
    5b78:	681b      	ldr	r3, [r3, #0]
    5b7a:	2224      	movs	r2, #36	; 0x24
    5b7c:	4013      	ands	r3, r2
    5b7e:	2b04      	cmp	r3, #4
    5b80:	d109      	bne.n	5b96 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5b82:	2000      	movs	r0, #0
    5b84:	4b13      	ldr	r3, [pc, #76]	; (5bd4 <system_clock_source_get_hz+0xb8>)
    5b86:	4798      	blx	r3
    5b88:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    5b8a:	4b0e      	ldr	r3, [pc, #56]	; (5bc4 <system_clock_source_get_hz+0xa8>)
    5b8c:	689b      	ldr	r3, [r3, #8]
    5b8e:	041b      	lsls	r3, r3, #16
    5b90:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    5b92:	4353      	muls	r3, r2
    5b94:	e00f      	b.n	5bb6 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
    5b96:	4b10      	ldr	r3, [pc, #64]	; (5bd8 <system_clock_source_get_hz+0xbc>)
    5b98:	e00d      	b.n	5bb6 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    5b9a:	4a0b      	ldr	r2, [pc, #44]	; (5bc8 <system_clock_source_get_hz+0xac>)
    5b9c:	2350      	movs	r3, #80	; 0x50
    5b9e:	5cd3      	ldrb	r3, [r2, r3]
    5ba0:	b2db      	uxtb	r3, r3
    5ba2:	001a      	movs	r2, r3
    5ba4:	2304      	movs	r3, #4
    5ba6:	4013      	ands	r3, r2
    5ba8:	d101      	bne.n	5bae <system_clock_source_get_hz+0x92>
			return 0;
    5baa:	2300      	movs	r3, #0
    5bac:	e003      	b.n	5bb6 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
    5bae:	4b05      	ldr	r3, [pc, #20]	; (5bc4 <system_clock_source_get_hz+0xa8>)
    5bb0:	68db      	ldr	r3, [r3, #12]
    5bb2:	e000      	b.n	5bb6 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
    5bb4:	2300      	movs	r3, #0
	}
}
    5bb6:	0018      	movs	r0, r3
    5bb8:	46bd      	mov	sp, r7
    5bba:	b002      	add	sp, #8
    5bbc:	bd80      	pop	{r7, pc}
    5bbe:	46c0      	nop			; (mov r8, r8)
    5bc0:	0000af78 	.word	0x0000af78
    5bc4:	20000160 	.word	0x20000160
    5bc8:	40000800 	.word	0x40000800
    5bcc:	007a1200 	.word	0x007a1200
    5bd0:	00005abd 	.word	0x00005abd
    5bd4:	0000666d 	.word	0x0000666d
    5bd8:	02dc6c00 	.word	0x02dc6c00

00005bdc <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    5bdc:	b580      	push	{r7, lr}
    5bde:	b084      	sub	sp, #16
    5be0:	af00      	add	r7, sp, #0
    5be2:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    5be4:	4b1a      	ldr	r3, [pc, #104]	; (5c50 <system_clock_source_osc8m_set_config+0x74>)
    5be6:	6a1b      	ldr	r3, [r3, #32]
    5be8:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    5bea:	687b      	ldr	r3, [r7, #4]
    5bec:	781b      	ldrb	r3, [r3, #0]
    5bee:	1c1a      	adds	r2, r3, #0
    5bf0:	2303      	movs	r3, #3
    5bf2:	4013      	ands	r3, r2
    5bf4:	b2da      	uxtb	r2, r3
    5bf6:	230d      	movs	r3, #13
    5bf8:	18fb      	adds	r3, r7, r3
    5bfa:	2103      	movs	r1, #3
    5bfc:	400a      	ands	r2, r1
    5bfe:	0010      	movs	r0, r2
    5c00:	781a      	ldrb	r2, [r3, #0]
    5c02:	2103      	movs	r1, #3
    5c04:	438a      	bics	r2, r1
    5c06:	1c11      	adds	r1, r2, #0
    5c08:	1c02      	adds	r2, r0, #0
    5c0a:	430a      	orrs	r2, r1
    5c0c:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    5c0e:	687b      	ldr	r3, [r7, #4]
    5c10:	789a      	ldrb	r2, [r3, #2]
    5c12:	230c      	movs	r3, #12
    5c14:	18fb      	adds	r3, r7, r3
    5c16:	01d0      	lsls	r0, r2, #7
    5c18:	781a      	ldrb	r2, [r3, #0]
    5c1a:	217f      	movs	r1, #127	; 0x7f
    5c1c:	400a      	ands	r2, r1
    5c1e:	1c11      	adds	r1, r2, #0
    5c20:	1c02      	adds	r2, r0, #0
    5c22:	430a      	orrs	r2, r1
    5c24:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5c26:	687b      	ldr	r3, [r7, #4]
    5c28:	785a      	ldrb	r2, [r3, #1]
    5c2a:	230c      	movs	r3, #12
    5c2c:	18fb      	adds	r3, r7, r3
    5c2e:	2101      	movs	r1, #1
    5c30:	400a      	ands	r2, r1
    5c32:	0190      	lsls	r0, r2, #6
    5c34:	781a      	ldrb	r2, [r3, #0]
    5c36:	2140      	movs	r1, #64	; 0x40
    5c38:	438a      	bics	r2, r1
    5c3a:	1c11      	adds	r1, r2, #0
    5c3c:	1c02      	adds	r2, r0, #0
    5c3e:	430a      	orrs	r2, r1
    5c40:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    5c42:	4b03      	ldr	r3, [pc, #12]	; (5c50 <system_clock_source_osc8m_set_config+0x74>)
    5c44:	68fa      	ldr	r2, [r7, #12]
    5c46:	621a      	str	r2, [r3, #32]
}
    5c48:	46c0      	nop			; (mov r8, r8)
    5c4a:	46bd      	mov	sp, r7
    5c4c:	b004      	add	sp, #16
    5c4e:	bd80      	pop	{r7, pc}
    5c50:	40000800 	.word	0x40000800

00005c54 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    5c54:	b580      	push	{r7, lr}
    5c56:	b084      	sub	sp, #16
    5c58:	af00      	add	r7, sp, #0
    5c5a:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    5c5c:	4a43      	ldr	r2, [pc, #268]	; (5d6c <system_clock_source_xosc32k_set_config+0x118>)
    5c5e:	230c      	movs	r3, #12
    5c60:	18fb      	adds	r3, r7, r3
    5c62:	8a92      	ldrh	r2, [r2, #20]
    5c64:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    5c66:	687b      	ldr	r3, [r7, #4]
    5c68:	785b      	ldrb	r3, [r3, #1]
    5c6a:	1c1a      	adds	r2, r3, #0
    5c6c:	2307      	movs	r3, #7
    5c6e:	4013      	ands	r3, r2
    5c70:	b2da      	uxtb	r2, r3
    5c72:	230c      	movs	r3, #12
    5c74:	18fb      	adds	r3, r7, r3
    5c76:	2107      	movs	r1, #7
    5c78:	400a      	ands	r2, r1
    5c7a:	0010      	movs	r0, r2
    5c7c:	785a      	ldrb	r2, [r3, #1]
    5c7e:	2107      	movs	r1, #7
    5c80:	438a      	bics	r2, r1
    5c82:	1c11      	adds	r1, r2, #0
    5c84:	1c02      	adds	r2, r0, #0
    5c86:	430a      	orrs	r2, r1
    5c88:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    5c8a:	687b      	ldr	r3, [r7, #4]
    5c8c:	781b      	ldrb	r3, [r3, #0]
    5c8e:	2b00      	cmp	r3, #0
    5c90:	d106      	bne.n	5ca0 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    5c92:	230c      	movs	r3, #12
    5c94:	18fb      	adds	r3, r7, r3
    5c96:	781a      	ldrb	r2, [r3, #0]
    5c98:	2104      	movs	r1, #4
    5c9a:	430a      	orrs	r2, r1
    5c9c:	701a      	strb	r2, [r3, #0]
    5c9e:	e005      	b.n	5cac <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    5ca0:	230c      	movs	r3, #12
    5ca2:	18fb      	adds	r3, r7, r3
    5ca4:	781a      	ldrb	r2, [r3, #0]
    5ca6:	2104      	movs	r1, #4
    5ca8:	438a      	bics	r2, r1
    5caa:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    5cac:	687b      	ldr	r3, [r7, #4]
    5cae:	789a      	ldrb	r2, [r3, #2]
    5cb0:	230c      	movs	r3, #12
    5cb2:	18fb      	adds	r3, r7, r3
    5cb4:	2101      	movs	r1, #1
    5cb6:	400a      	ands	r2, r1
    5cb8:	0150      	lsls	r0, r2, #5
    5cba:	781a      	ldrb	r2, [r3, #0]
    5cbc:	2120      	movs	r1, #32
    5cbe:	438a      	bics	r2, r1
    5cc0:	1c11      	adds	r1, r2, #0
    5cc2:	1c02      	adds	r2, r0, #0
    5cc4:	430a      	orrs	r2, r1
    5cc6:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    5cc8:	687b      	ldr	r3, [r7, #4]
    5cca:	78da      	ldrb	r2, [r3, #3]
    5ccc:	230c      	movs	r3, #12
    5cce:	18fb      	adds	r3, r7, r3
    5cd0:	2101      	movs	r1, #1
    5cd2:	400a      	ands	r2, r1
    5cd4:	0110      	lsls	r0, r2, #4
    5cd6:	781a      	ldrb	r2, [r3, #0]
    5cd8:	2110      	movs	r1, #16
    5cda:	438a      	bics	r2, r1
    5cdc:	1c11      	adds	r1, r2, #0
    5cde:	1c02      	adds	r2, r0, #0
    5ce0:	430a      	orrs	r2, r1
    5ce2:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    5ce4:	687b      	ldr	r3, [r7, #4]
    5ce6:	791a      	ldrb	r2, [r3, #4]
    5ce8:	230c      	movs	r3, #12
    5cea:	18fb      	adds	r3, r7, r3
    5cec:	2101      	movs	r1, #1
    5cee:	400a      	ands	r2, r1
    5cf0:	00d0      	lsls	r0, r2, #3
    5cf2:	781a      	ldrb	r2, [r3, #0]
    5cf4:	2108      	movs	r1, #8
    5cf6:	438a      	bics	r2, r1
    5cf8:	1c11      	adds	r1, r2, #0
    5cfa:	1c02      	adds	r2, r0, #0
    5cfc:	430a      	orrs	r2, r1
    5cfe:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    5d00:	687b      	ldr	r3, [r7, #4]
    5d02:	7b5a      	ldrb	r2, [r3, #13]
    5d04:	230c      	movs	r3, #12
    5d06:	18fb      	adds	r3, r7, r3
    5d08:	01d0      	lsls	r0, r2, #7
    5d0a:	781a      	ldrb	r2, [r3, #0]
    5d0c:	217f      	movs	r1, #127	; 0x7f
    5d0e:	400a      	ands	r2, r1
    5d10:	1c11      	adds	r1, r2, #0
    5d12:	1c02      	adds	r2, r0, #0
    5d14:	430a      	orrs	r2, r1
    5d16:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    5d18:	687b      	ldr	r3, [r7, #4]
    5d1a:	7b1a      	ldrb	r2, [r3, #12]
    5d1c:	230c      	movs	r3, #12
    5d1e:	18fb      	adds	r3, r7, r3
    5d20:	2101      	movs	r1, #1
    5d22:	400a      	ands	r2, r1
    5d24:	0190      	lsls	r0, r2, #6
    5d26:	781a      	ldrb	r2, [r3, #0]
    5d28:	2140      	movs	r1, #64	; 0x40
    5d2a:	438a      	bics	r2, r1
    5d2c:	1c11      	adds	r1, r2, #0
    5d2e:	1c02      	adds	r2, r0, #0
    5d30:	430a      	orrs	r2, r1
    5d32:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    5d34:	687b      	ldr	r3, [r7, #4]
    5d36:	7b9a      	ldrb	r2, [r3, #14]
    5d38:	230c      	movs	r3, #12
    5d3a:	18fb      	adds	r3, r7, r3
    5d3c:	2101      	movs	r1, #1
    5d3e:	400a      	ands	r2, r1
    5d40:	0110      	lsls	r0, r2, #4
    5d42:	785a      	ldrb	r2, [r3, #1]
    5d44:	2110      	movs	r1, #16
    5d46:	438a      	bics	r2, r1
    5d48:	1c11      	adds	r1, r2, #0
    5d4a:	1c02      	adds	r2, r0, #0
    5d4c:	430a      	orrs	r2, r1
    5d4e:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    5d50:	687b      	ldr	r3, [r7, #4]
    5d52:	689a      	ldr	r2, [r3, #8]
    5d54:	4b06      	ldr	r3, [pc, #24]	; (5d70 <system_clock_source_xosc32k_set_config+0x11c>)
    5d56:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    5d58:	4a04      	ldr	r2, [pc, #16]	; (5d6c <system_clock_source_xosc32k_set_config+0x118>)
    5d5a:	230c      	movs	r3, #12
    5d5c:	18fb      	adds	r3, r7, r3
    5d5e:	881b      	ldrh	r3, [r3, #0]
    5d60:	8293      	strh	r3, [r2, #20]
}
    5d62:	46c0      	nop			; (mov r8, r8)
    5d64:	46bd      	mov	sp, r7
    5d66:	b004      	add	sp, #16
    5d68:	bd80      	pop	{r7, pc}
    5d6a:	46c0      	nop			; (mov r8, r8)
    5d6c:	40000800 	.word	0x40000800
    5d70:	20000160 	.word	0x20000160

00005d74 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    5d74:	b580      	push	{r7, lr}
    5d76:	b082      	sub	sp, #8
    5d78:	af00      	add	r7, sp, #0
    5d7a:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5d7c:	687b      	ldr	r3, [r7, #4]
    5d7e:	7a1b      	ldrb	r3, [r3, #8]
    5d80:	029b      	lsls	r3, r3, #10
    5d82:	041b      	lsls	r3, r3, #16
    5d84:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    5d86:	687b      	ldr	r3, [r7, #4]
    5d88:	895b      	ldrh	r3, [r3, #10]
    5d8a:	059b      	lsls	r3, r3, #22
    5d8c:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    5d8e:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    5d90:	4b2a      	ldr	r3, [pc, #168]	; (5e3c <system_clock_source_dfll_set_config+0xc8>)
    5d92:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    5d94:	687b      	ldr	r3, [r7, #4]
    5d96:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    5d98:	687b      	ldr	r3, [r7, #4]
    5d9a:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    5d9c:	4313      	orrs	r3, r2
    5d9e:	b2db      	uxtb	r3, r3
    5da0:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    5da2:	687b      	ldr	r3, [r7, #4]
    5da4:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    5da6:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    5da8:	687a      	ldr	r2, [r7, #4]
    5daa:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    5dac:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    5dae:	687b      	ldr	r3, [r7, #4]
    5db0:	785b      	ldrb	r3, [r3, #1]
    5db2:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    5db4:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    5db6:	4b21      	ldr	r3, [pc, #132]	; (5e3c <system_clock_source_dfll_set_config+0xc8>)
    5db8:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    5dba:	687b      	ldr	r3, [r7, #4]
    5dbc:	781b      	ldrb	r3, [r3, #0]
    5dbe:	2b04      	cmp	r3, #4
    5dc0:	d116      	bne.n	5df0 <system_clock_source_dfll_set_config+0x7c>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5dc2:	687b      	ldr	r3, [r7, #4]
    5dc4:	7b1b      	ldrb	r3, [r3, #12]
    5dc6:	069b      	lsls	r3, r3, #26
    5dc8:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5dca:	687b      	ldr	r3, [r7, #4]
    5dcc:	89db      	ldrh	r3, [r3, #14]
    5dce:	041b      	lsls	r3, r3, #16
    5dd0:	0019      	movs	r1, r3
    5dd2:	4b1b      	ldr	r3, [pc, #108]	; (5e40 <system_clock_source_dfll_set_config+0xcc>)
    5dd4:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5dd6:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5dd8:	687a      	ldr	r2, [r7, #4]
    5dda:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5ddc:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5dde:	4b17      	ldr	r3, [pc, #92]	; (5e3c <system_clock_source_dfll_set_config+0xc8>)
    5de0:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    5de2:	4b16      	ldr	r3, [pc, #88]	; (5e3c <system_clock_source_dfll_set_config+0xc8>)
    5de4:	681b      	ldr	r3, [r3, #0]
    5de6:	687a      	ldr	r2, [r7, #4]
    5de8:	7812      	ldrb	r2, [r2, #0]
    5dea:	431a      	orrs	r2, r3
    5dec:	4b13      	ldr	r3, [pc, #76]	; (5e3c <system_clock_source_dfll_set_config+0xc8>)
    5dee:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    5df0:	687b      	ldr	r3, [r7, #4]
    5df2:	781b      	ldrb	r3, [r3, #0]
    5df4:	2b20      	cmp	r3, #32
    5df6:	d11c      	bne.n	5e32 <system_clock_source_dfll_set_config+0xbe>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5df8:	687b      	ldr	r3, [r7, #4]
    5dfa:	7b1b      	ldrb	r3, [r3, #12]
    5dfc:	069b      	lsls	r3, r3, #26
    5dfe:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5e00:	687b      	ldr	r3, [r7, #4]
    5e02:	89db      	ldrh	r3, [r3, #14]
    5e04:	041b      	lsls	r3, r3, #16
    5e06:	0019      	movs	r1, r3
    5e08:	4b0d      	ldr	r3, [pc, #52]	; (5e40 <system_clock_source_dfll_set_config+0xcc>)
    5e0a:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    5e0c:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    5e0e:	687a      	ldr	r2, [r7, #4]
    5e10:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    5e12:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    5e14:	4b09      	ldr	r3, [pc, #36]	; (5e3c <system_clock_source_dfll_set_config+0xc8>)
    5e16:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    5e18:	4b08      	ldr	r3, [pc, #32]	; (5e3c <system_clock_source_dfll_set_config+0xc8>)
    5e1a:	681b      	ldr	r3, [r3, #0]
    5e1c:	687a      	ldr	r2, [r7, #4]
    5e1e:	7812      	ldrb	r2, [r2, #0]
    5e20:	2104      	movs	r1, #4
    5e22:	430a      	orrs	r2, r1
    5e24:	b2d2      	uxtb	r2, r2
    5e26:	4313      	orrs	r3, r2
    5e28:	2280      	movs	r2, #128	; 0x80
    5e2a:	00d2      	lsls	r2, r2, #3
    5e2c:	431a      	orrs	r2, r3
    5e2e:	4b03      	ldr	r3, [pc, #12]	; (5e3c <system_clock_source_dfll_set_config+0xc8>)
    5e30:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    5e32:	46c0      	nop			; (mov r8, r8)
    5e34:	46bd      	mov	sp, r7
    5e36:	b002      	add	sp, #8
    5e38:	bd80      	pop	{r7, pc}
    5e3a:	46c0      	nop			; (mov r8, r8)
    5e3c:	20000160 	.word	0x20000160
    5e40:	03ff0000 	.word	0x03ff0000

00005e44 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    5e44:	b580      	push	{r7, lr}
    5e46:	b082      	sub	sp, #8
    5e48:	af00      	add	r7, sp, #0
    5e4a:	0002      	movs	r2, r0
    5e4c:	1dfb      	adds	r3, r7, #7
    5e4e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    5e50:	1dfb      	adds	r3, r7, #7
    5e52:	781b      	ldrb	r3, [r3, #0]
    5e54:	2b08      	cmp	r3, #8
    5e56:	d83b      	bhi.n	5ed0 <system_clock_source_enable+0x8c>
    5e58:	009a      	lsls	r2, r3, #2
    5e5a:	4b21      	ldr	r3, [pc, #132]	; (5ee0 <system_clock_source_enable+0x9c>)
    5e5c:	18d3      	adds	r3, r2, r3
    5e5e:	681b      	ldr	r3, [r3, #0]
    5e60:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    5e62:	4b20      	ldr	r3, [pc, #128]	; (5ee4 <system_clock_source_enable+0xa0>)
    5e64:	4a1f      	ldr	r2, [pc, #124]	; (5ee4 <system_clock_source_enable+0xa0>)
    5e66:	6a12      	ldr	r2, [r2, #32]
    5e68:	2102      	movs	r1, #2
    5e6a:	430a      	orrs	r2, r1
    5e6c:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    5e6e:	2300      	movs	r3, #0
    5e70:	e031      	b.n	5ed6 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    5e72:	4b1c      	ldr	r3, [pc, #112]	; (5ee4 <system_clock_source_enable+0xa0>)
    5e74:	4a1b      	ldr	r2, [pc, #108]	; (5ee4 <system_clock_source_enable+0xa0>)
    5e76:	6992      	ldr	r2, [r2, #24]
    5e78:	2102      	movs	r1, #2
    5e7a:	430a      	orrs	r2, r1
    5e7c:	619a      	str	r2, [r3, #24]
		break;
    5e7e:	e029      	b.n	5ed4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    5e80:	4a18      	ldr	r2, [pc, #96]	; (5ee4 <system_clock_source_enable+0xa0>)
    5e82:	4b18      	ldr	r3, [pc, #96]	; (5ee4 <system_clock_source_enable+0xa0>)
    5e84:	8a1b      	ldrh	r3, [r3, #16]
    5e86:	b29b      	uxth	r3, r3
    5e88:	2102      	movs	r1, #2
    5e8a:	430b      	orrs	r3, r1
    5e8c:	b29b      	uxth	r3, r3
    5e8e:	8213      	strh	r3, [r2, #16]
		break;
    5e90:	e020      	b.n	5ed4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    5e92:	4a14      	ldr	r2, [pc, #80]	; (5ee4 <system_clock_source_enable+0xa0>)
    5e94:	4b13      	ldr	r3, [pc, #76]	; (5ee4 <system_clock_source_enable+0xa0>)
    5e96:	8a9b      	ldrh	r3, [r3, #20]
    5e98:	b29b      	uxth	r3, r3
    5e9a:	2102      	movs	r1, #2
    5e9c:	430b      	orrs	r3, r1
    5e9e:	b29b      	uxth	r3, r3
    5ea0:	8293      	strh	r3, [r2, #20]
		break;
    5ea2:	e017      	b.n	5ed4 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    5ea4:	4b10      	ldr	r3, [pc, #64]	; (5ee8 <system_clock_source_enable+0xa4>)
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	2202      	movs	r2, #2
    5eaa:	431a      	orrs	r2, r3
    5eac:	4b0e      	ldr	r3, [pc, #56]	; (5ee8 <system_clock_source_enable+0xa4>)
    5eae:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    5eb0:	4b0e      	ldr	r3, [pc, #56]	; (5eec <system_clock_source_enable+0xa8>)
    5eb2:	4798      	blx	r3
		break;
    5eb4:	e00e      	b.n	5ed4 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    5eb6:	4a0b      	ldr	r2, [pc, #44]	; (5ee4 <system_clock_source_enable+0xa0>)
    5eb8:	490a      	ldr	r1, [pc, #40]	; (5ee4 <system_clock_source_enable+0xa0>)
    5eba:	2344      	movs	r3, #68	; 0x44
    5ebc:	5ccb      	ldrb	r3, [r1, r3]
    5ebe:	b2db      	uxtb	r3, r3
    5ec0:	2102      	movs	r1, #2
    5ec2:	430b      	orrs	r3, r1
    5ec4:	b2d9      	uxtb	r1, r3
    5ec6:	2344      	movs	r3, #68	; 0x44
    5ec8:	54d1      	strb	r1, [r2, r3]
		break;
    5eca:	e003      	b.n	5ed4 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    5ecc:	2300      	movs	r3, #0
    5ece:	e002      	b.n	5ed6 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    5ed0:	2317      	movs	r3, #23
    5ed2:	e000      	b.n	5ed6 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
    5ed4:	2300      	movs	r3, #0
}
    5ed6:	0018      	movs	r0, r3
    5ed8:	46bd      	mov	sp, r7
    5eda:	b002      	add	sp, #8
    5edc:	bd80      	pop	{r7, pc}
    5ede:	46c0      	nop			; (mov r8, r8)
    5ee0:	0000af9c 	.word	0x0000af9c
    5ee4:	40000800 	.word	0x40000800
    5ee8:	20000160 	.word	0x20000160
    5eec:	00005ad9 	.word	0x00005ad9

00005ef0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    5ef0:	b580      	push	{r7, lr}
    5ef2:	b084      	sub	sp, #16
    5ef4:	af00      	add	r7, sp, #0
    5ef6:	0002      	movs	r2, r0
    5ef8:	1dfb      	adds	r3, r7, #7
    5efa:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    5efc:	2300      	movs	r3, #0
    5efe:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    5f00:	1dfb      	adds	r3, r7, #7
    5f02:	781b      	ldrb	r3, [r3, #0]
    5f04:	2b08      	cmp	r3, #8
    5f06:	d821      	bhi.n	5f4c <system_clock_source_is_ready+0x5c>
    5f08:	009a      	lsls	r2, r3, #2
    5f0a:	4b18      	ldr	r3, [pc, #96]	; (5f6c <system_clock_source_is_ready+0x7c>)
    5f0c:	18d3      	adds	r3, r2, r3
    5f0e:	681b      	ldr	r3, [r3, #0]
    5f10:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    5f12:	2308      	movs	r3, #8
    5f14:	60fb      	str	r3, [r7, #12]
		break;
    5f16:	e01b      	b.n	5f50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    5f18:	2304      	movs	r3, #4
    5f1a:	60fb      	str	r3, [r7, #12]
		break;
    5f1c:	e018      	b.n	5f50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    5f1e:	2301      	movs	r3, #1
    5f20:	60fb      	str	r3, [r7, #12]
		break;
    5f22:	e015      	b.n	5f50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    5f24:	2302      	movs	r3, #2
    5f26:	60fb      	str	r3, [r7, #12]
		break;
    5f28:	e012      	b.n	5f50 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    5f2a:	23d0      	movs	r3, #208	; 0xd0
    5f2c:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    5f2e:	e00f      	b.n	5f50 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    5f30:	4a0f      	ldr	r2, [pc, #60]	; (5f70 <system_clock_source_is_ready+0x80>)
    5f32:	2350      	movs	r3, #80	; 0x50
    5f34:	5cd3      	ldrb	r3, [r2, r3]
    5f36:	b2db      	uxtb	r3, r3
    5f38:	001a      	movs	r2, r3
    5f3a:	2303      	movs	r3, #3
    5f3c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    5f3e:	3b03      	subs	r3, #3
    5f40:	425a      	negs	r2, r3
    5f42:	4153      	adcs	r3, r2
    5f44:	b2db      	uxtb	r3, r3
    5f46:	e00c      	b.n	5f62 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    5f48:	2301      	movs	r3, #1
    5f4a:	e00a      	b.n	5f62 <system_clock_source_is_ready+0x72>

	default:
		return false;
    5f4c:	2300      	movs	r3, #0
    5f4e:	e008      	b.n	5f62 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    5f50:	4b07      	ldr	r3, [pc, #28]	; (5f70 <system_clock_source_is_ready+0x80>)
    5f52:	68db      	ldr	r3, [r3, #12]
    5f54:	68fa      	ldr	r2, [r7, #12]
    5f56:	401a      	ands	r2, r3
    5f58:	68fb      	ldr	r3, [r7, #12]
    5f5a:	1ad3      	subs	r3, r2, r3
    5f5c:	425a      	negs	r2, r3
    5f5e:	4153      	adcs	r3, r2
    5f60:	b2db      	uxtb	r3, r3
}
    5f62:	0018      	movs	r0, r3
    5f64:	46bd      	mov	sp, r7
    5f66:	b004      	add	sp, #16
    5f68:	bd80      	pop	{r7, pc}
    5f6a:	46c0      	nop			; (mov r8, r8)
    5f6c:	0000afc0 	.word	0x0000afc0
    5f70:	40000800 	.word	0x40000800

00005f74 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    5f74:	b580      	push	{r7, lr}
    5f76:	b082      	sub	sp, #8
    5f78:	af00      	add	r7, sp, #0
	struct system_gclk_chan_config gclk_conf;

#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    5f7a:	003b      	movs	r3, r7
    5f7c:	2202      	movs	r2, #2
    5f7e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5f80:	2300      	movs	r3, #0
    5f82:	607b      	str	r3, [r7, #4]
    5f84:	e009      	b.n	5f9a <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    5f86:	687b      	ldr	r3, [r7, #4]
    5f88:	b2db      	uxtb	r3, r3
    5f8a:	003a      	movs	r2, r7
    5f8c:	0011      	movs	r1, r2
    5f8e:	0018      	movs	r0, r3
    5f90:	4b05      	ldr	r3, [pc, #20]	; (5fa8 <_switch_peripheral_gclk+0x34>)
    5f92:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    5f94:	687b      	ldr	r3, [r7, #4]
    5f96:	3301      	adds	r3, #1
    5f98:	607b      	str	r3, [r7, #4]
    5f9a:	687b      	ldr	r3, [r7, #4]
    5f9c:	2b24      	cmp	r3, #36	; 0x24
    5f9e:	d9f2      	bls.n	5f86 <_switch_peripheral_gclk+0x12>
	}
}
    5fa0:	46c0      	nop			; (mov r8, r8)
    5fa2:	46bd      	mov	sp, r7
    5fa4:	b002      	add	sp, #8
    5fa6:	bd80      	pop	{r7, pc}
    5fa8:	00006549 	.word	0x00006549

00005fac <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    5fac:	b580      	push	{r7, lr}
    5fae:	b0aa      	sub	sp, #168	; 0xa8
    5fb0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    5fb2:	4b85      	ldr	r3, [pc, #532]	; (61c8 <system_clock_init+0x21c>)
    5fb4:	22c2      	movs	r2, #194	; 0xc2
    5fb6:	00d2      	lsls	r2, r2, #3
    5fb8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    5fba:	2002      	movs	r0, #2
    5fbc:	4b83      	ldr	r3, [pc, #524]	; (61cc <system_clock_init+0x220>)
    5fbe:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    5fc0:	4b83      	ldr	r3, [pc, #524]	; (61d0 <system_clock_init+0x224>)
    5fc2:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    5fc4:	2394      	movs	r3, #148	; 0x94
    5fc6:	18fb      	adds	r3, r7, r3
    5fc8:	0018      	movs	r0, r3
    5fca:	4b82      	ldr	r3, [pc, #520]	; (61d4 <system_clock_init+0x228>)
    5fcc:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    5fce:	2394      	movs	r3, #148	; 0x94
    5fd0:	18fb      	adds	r3, r7, r3
    5fd2:	2280      	movs	r2, #128	; 0x80
    5fd4:	0212      	lsls	r2, r2, #8
    5fd6:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    5fd8:	2394      	movs	r3, #148	; 0x94
    5fda:	18fb      	adds	r3, r7, r3
    5fdc:	2200      	movs	r2, #0
    5fde:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    5fe0:	2394      	movs	r3, #148	; 0x94
    5fe2:	18fb      	adds	r3, r7, r3
    5fe4:	2206      	movs	r2, #6
    5fe6:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    5fe8:	2394      	movs	r3, #148	; 0x94
    5fea:	18fb      	adds	r3, r7, r3
    5fec:	2200      	movs	r2, #0
    5fee:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    5ff0:	2394      	movs	r3, #148	; 0x94
    5ff2:	18fb      	adds	r3, r7, r3
    5ff4:	2200      	movs	r2, #0
    5ff6:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    5ff8:	2394      	movs	r3, #148	; 0x94
    5ffa:	18fb      	adds	r3, r7, r3
    5ffc:	2201      	movs	r2, #1
    5ffe:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    6000:	2394      	movs	r3, #148	; 0x94
    6002:	18fb      	adds	r3, r7, r3
    6004:	2200      	movs	r2, #0
    6006:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    6008:	2394      	movs	r3, #148	; 0x94
    600a:	18fb      	adds	r3, r7, r3
    600c:	2201      	movs	r2, #1
    600e:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    6010:	2394      	movs	r3, #148	; 0x94
    6012:	18fb      	adds	r3, r7, r3
    6014:	0018      	movs	r0, r3
    6016:	4b70      	ldr	r3, [pc, #448]	; (61d8 <system_clock_init+0x22c>)
    6018:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    601a:	2005      	movs	r0, #5
    601c:	4b6f      	ldr	r3, [pc, #444]	; (61dc <system_clock_init+0x230>)
    601e:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    6020:	46c0      	nop			; (mov r8, r8)
    6022:	2005      	movs	r0, #5
    6024:	4b6e      	ldr	r3, [pc, #440]	; (61e0 <system_clock_init+0x234>)
    6026:	4798      	blx	r3
    6028:	0003      	movs	r3, r0
    602a:	001a      	movs	r2, r3
    602c:	2301      	movs	r3, #1
    602e:	4053      	eors	r3, r2
    6030:	b2db      	uxtb	r3, r3
    6032:	2b00      	cmp	r3, #0
    6034:	d1f5      	bne.n	6022 <system_clock_init+0x76>


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    6036:	2380      	movs	r3, #128	; 0x80
    6038:	18fb      	adds	r3, r7, r3
    603a:	0018      	movs	r0, r3
    603c:	4b69      	ldr	r3, [pc, #420]	; (61e4 <system_clock_init+0x238>)
    603e:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    6040:	2380      	movs	r3, #128	; 0x80
    6042:	18fb      	adds	r3, r7, r3
    6044:	2204      	movs	r2, #4
    6046:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    6048:	2380      	movs	r3, #128	; 0x80
    604a:	18fb      	adds	r3, r7, r3
    604c:	2200      	movs	r2, #0
    604e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    6050:	4b65      	ldr	r3, [pc, #404]	; (61e8 <system_clock_init+0x23c>)
    6052:	681b      	ldr	r3, [r3, #0]
    6054:	0e9b      	lsrs	r3, r3, #26
    6056:	22a4      	movs	r2, #164	; 0xa4
    6058:	18ba      	adds	r2, r7, r2
    605a:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    605c:	23a4      	movs	r3, #164	; 0xa4
    605e:	18fb      	adds	r3, r7, r3
    6060:	681b      	ldr	r3, [r3, #0]
    6062:	2b3f      	cmp	r3, #63	; 0x3f
    6064:	d103      	bne.n	606e <system_clock_init+0xc2>
		coarse = 0x1f;
    6066:	231f      	movs	r3, #31
    6068:	22a4      	movs	r2, #164	; 0xa4
    606a:	18ba      	adds	r2, r7, r2
    606c:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    606e:	23a4      	movs	r3, #164	; 0xa4
    6070:	18fb      	adds	r3, r7, r3
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	b2da      	uxtb	r2, r3
    6076:	2380      	movs	r3, #128	; 0x80
    6078:	18fb      	adds	r3, r7, r3
    607a:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    607c:	2380      	movs	r3, #128	; 0x80
    607e:	18fb      	adds	r3, r7, r3
    6080:	2200      	movs	r2, #0
    6082:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    6084:	2380      	movs	r3, #128	; 0x80
    6086:	18fb      	adds	r3, r7, r3
    6088:	2200      	movs	r2, #0
    608a:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    608c:	2380      	movs	r3, #128	; 0x80
    608e:	18fb      	adds	r3, r7, r3
    6090:	2200      	movs	r2, #0
    6092:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    6094:	2380      	movs	r3, #128	; 0x80
    6096:	18fb      	adds	r3, r7, r3
    6098:	2200      	movs	r2, #0
    609a:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    609c:	2380      	movs	r3, #128	; 0x80
    609e:	18fb      	adds	r3, r7, r3
    60a0:	22b7      	movs	r2, #183	; 0xb7
    60a2:	00d2      	lsls	r2, r2, #3
    60a4:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    60a6:	2380      	movs	r3, #128	; 0x80
    60a8:	18fb      	adds	r3, r7, r3
    60aa:	2203      	movs	r2, #3
    60ac:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    60ae:	2380      	movs	r3, #128	; 0x80
    60b0:	18fb      	adds	r3, r7, r3
    60b2:	221f      	movs	r2, #31
    60b4:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    60b6:	2380      	movs	r3, #128	; 0x80
    60b8:	18fb      	adds	r3, r7, r3
    60ba:	0018      	movs	r0, r3
    60bc:	4b4b      	ldr	r3, [pc, #300]	; (61ec <system_clock_init+0x240>)
    60be:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    60c0:	237c      	movs	r3, #124	; 0x7c
    60c2:	18fb      	adds	r3, r7, r3
    60c4:	0018      	movs	r0, r3
    60c6:	4b4a      	ldr	r3, [pc, #296]	; (61f0 <system_clock_init+0x244>)
    60c8:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    60ca:	237c      	movs	r3, #124	; 0x7c
    60cc:	18fb      	adds	r3, r7, r3
    60ce:	2200      	movs	r2, #0
    60d0:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    60d2:	237c      	movs	r3, #124	; 0x7c
    60d4:	18fb      	adds	r3, r7, r3
    60d6:	2201      	movs	r2, #1
    60d8:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    60da:	237c      	movs	r3, #124	; 0x7c
    60dc:	18fb      	adds	r3, r7, r3
    60de:	2201      	movs	r2, #1
    60e0:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    60e2:	237c      	movs	r3, #124	; 0x7c
    60e4:	18fb      	adds	r3, r7, r3
    60e6:	0018      	movs	r0, r3
    60e8:	4b42      	ldr	r3, [pc, #264]	; (61f4 <system_clock_init+0x248>)
    60ea:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    60ec:	2006      	movs	r0, #6
    60ee:	4b3b      	ldr	r3, [pc, #236]	; (61dc <system_clock_init+0x230>)
    60f0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    60f2:	4b41      	ldr	r3, [pc, #260]	; (61f8 <system_clock_init+0x24c>)
    60f4:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    60f6:	2364      	movs	r3, #100	; 0x64
    60f8:	18fb      	adds	r3, r7, r3
    60fa:	0018      	movs	r0, r3
    60fc:	4b3f      	ldr	r3, [pc, #252]	; (61fc <system_clock_init+0x250>)
    60fe:	4798      	blx	r3
    6100:	2364      	movs	r3, #100	; 0x64
    6102:	18fb      	adds	r3, r7, r3
    6104:	2205      	movs	r2, #5
    6106:	701a      	strb	r2, [r3, #0]
    6108:	2364      	movs	r3, #100	; 0x64
    610a:	18fb      	adds	r3, r7, r3
    610c:	2201      	movs	r2, #1
    610e:	605a      	str	r2, [r3, #4]
    6110:	2364      	movs	r3, #100	; 0x64
    6112:	18fb      	adds	r3, r7, r3
    6114:	2200      	movs	r2, #0
    6116:	721a      	strb	r2, [r3, #8]
    6118:	2364      	movs	r3, #100	; 0x64
    611a:	18fb      	adds	r3, r7, r3
    611c:	2200      	movs	r2, #0
    611e:	725a      	strb	r2, [r3, #9]
    6120:	2364      	movs	r3, #100	; 0x64
    6122:	18fb      	adds	r3, r7, r3
    6124:	0019      	movs	r1, r3
    6126:	2001      	movs	r0, #1
    6128:	4b35      	ldr	r3, [pc, #212]	; (6200 <system_clock_init+0x254>)
    612a:	4798      	blx	r3
    612c:	2001      	movs	r0, #1
    612e:	4b35      	ldr	r3, [pc, #212]	; (6204 <system_clock_init+0x258>)
    6130:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    6132:	230c      	movs	r3, #12
    6134:	18fb      	adds	r3, r7, r3
    6136:	0018      	movs	r0, r3
    6138:	4b33      	ldr	r3, [pc, #204]	; (6208 <system_clock_init+0x25c>)
    613a:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    613c:	230c      	movs	r3, #12
    613e:	18fb      	adds	r3, r7, r3
    6140:	2201      	movs	r2, #1
    6142:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    6144:	230c      	movs	r3, #12
    6146:	18fb      	adds	r3, r7, r3
    6148:	0019      	movs	r1, r3
    614a:	2000      	movs	r0, #0
    614c:	4b2f      	ldr	r3, [pc, #188]	; (620c <system_clock_init+0x260>)
    614e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    6150:	2000      	movs	r0, #0
    6152:	4b2f      	ldr	r3, [pc, #188]	; (6210 <system_clock_init+0x264>)
    6154:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    6156:	2007      	movs	r0, #7
    6158:	4b20      	ldr	r3, [pc, #128]	; (61dc <system_clock_init+0x230>)
    615a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    615c:	46c0      	nop			; (mov r8, r8)
    615e:	2007      	movs	r0, #7
    6160:	4b1f      	ldr	r3, [pc, #124]	; (61e0 <system_clock_init+0x234>)
    6162:	4798      	blx	r3
    6164:	0003      	movs	r3, r0
    6166:	001a      	movs	r2, r3
    6168:	2301      	movs	r3, #1
    616a:	4053      	eors	r3, r2
    616c:	b2db      	uxtb	r3, r3
    616e:	2b00      	cmp	r3, #0
    6170:	d1f5      	bne.n	615e <system_clock_init+0x1b2>

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    6172:	2000      	movs	r0, #0
    6174:	4b27      	ldr	r3, [pc, #156]	; (6214 <system_clock_init+0x268>)
    6176:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    6178:	2100      	movs	r1, #0
    617a:	2000      	movs	r0, #0
    617c:	4b26      	ldr	r3, [pc, #152]	; (6218 <system_clock_init+0x26c>)
    617e:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    6180:	2100      	movs	r1, #0
    6182:	2001      	movs	r0, #1
    6184:	4b24      	ldr	r3, [pc, #144]	; (6218 <system_clock_init+0x26c>)
    6186:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    6188:	2100      	movs	r1, #0
    618a:	2002      	movs	r0, #2
    618c:	4b22      	ldr	r3, [pc, #136]	; (6218 <system_clock_init+0x26c>)
    618e:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    6190:	003b      	movs	r3, r7
    6192:	0018      	movs	r0, r3
    6194:	4b19      	ldr	r3, [pc, #100]	; (61fc <system_clock_init+0x250>)
    6196:	4798      	blx	r3
    6198:	003b      	movs	r3, r7
    619a:	2207      	movs	r2, #7
    619c:	701a      	strb	r2, [r3, #0]
    619e:	003b      	movs	r3, r7
    61a0:	2201      	movs	r2, #1
    61a2:	605a      	str	r2, [r3, #4]
    61a4:	003b      	movs	r3, r7
    61a6:	2201      	movs	r2, #1
    61a8:	721a      	strb	r2, [r3, #8]
    61aa:	003b      	movs	r3, r7
    61ac:	2200      	movs	r2, #0
    61ae:	725a      	strb	r2, [r3, #9]
    61b0:	003b      	movs	r3, r7
    61b2:	0019      	movs	r1, r3
    61b4:	2000      	movs	r0, #0
    61b6:	4b12      	ldr	r3, [pc, #72]	; (6200 <system_clock_init+0x254>)
    61b8:	4798      	blx	r3
    61ba:	2000      	movs	r0, #0
    61bc:	4b11      	ldr	r3, [pc, #68]	; (6204 <system_clock_init+0x258>)
    61be:	4798      	blx	r3
#endif
}
    61c0:	46c0      	nop			; (mov r8, r8)
    61c2:	46bd      	mov	sp, r7
    61c4:	b02a      	add	sp, #168	; 0xa8
    61c6:	bd80      	pop	{r7, pc}
    61c8:	40000800 	.word	0x40000800
    61cc:	00005a89 	.word	0x00005a89
    61d0:	00005f75 	.word	0x00005f75
    61d4:	00005959 	.word	0x00005959
    61d8:	00005c55 	.word	0x00005c55
    61dc:	00005e45 	.word	0x00005e45
    61e0:	00005ef1 	.word	0x00005ef1
    61e4:	000059c3 	.word	0x000059c3
    61e8:	00806024 	.word	0x00806024
    61ec:	00005d75 	.word	0x00005d75
    61f0:	000059a1 	.word	0x000059a1
    61f4:	00005bdd 	.word	0x00005bdd
    61f8:	000062c1 	.word	0x000062c1
    61fc:	00005915 	.word	0x00005915
    6200:	000062f1 	.word	0x000062f1
    6204:	00006415 	.word	0x00006415
    6208:	00005943 	.word	0x00005943
    620c:	00006549 	.word	0x00006549
    6210:	0000658d 	.word	0x0000658d
    6214:	00005a15 	.word	0x00005a15
    6218:	00005a35 	.word	0x00005a35

0000621c <system_apb_clock_set_mask>:
{
    621c:	b580      	push	{r7, lr}
    621e:	b082      	sub	sp, #8
    6220:	af00      	add	r7, sp, #0
    6222:	0002      	movs	r2, r0
    6224:	6039      	str	r1, [r7, #0]
    6226:	1dfb      	adds	r3, r7, #7
    6228:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    622a:	1dfb      	adds	r3, r7, #7
    622c:	781b      	ldrb	r3, [r3, #0]
    622e:	2b01      	cmp	r3, #1
    6230:	d00a      	beq.n	6248 <system_apb_clock_set_mask+0x2c>
    6232:	2b02      	cmp	r3, #2
    6234:	d00f      	beq.n	6256 <system_apb_clock_set_mask+0x3a>
    6236:	2b00      	cmp	r3, #0
    6238:	d114      	bne.n	6264 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    623a:	4b0e      	ldr	r3, [pc, #56]	; (6274 <system_apb_clock_set_mask+0x58>)
    623c:	4a0d      	ldr	r2, [pc, #52]	; (6274 <system_apb_clock_set_mask+0x58>)
    623e:	6991      	ldr	r1, [r2, #24]
    6240:	683a      	ldr	r2, [r7, #0]
    6242:	430a      	orrs	r2, r1
    6244:	619a      	str	r2, [r3, #24]
			break;
    6246:	e00f      	b.n	6268 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6248:	4b0a      	ldr	r3, [pc, #40]	; (6274 <system_apb_clock_set_mask+0x58>)
    624a:	4a0a      	ldr	r2, [pc, #40]	; (6274 <system_apb_clock_set_mask+0x58>)
    624c:	69d1      	ldr	r1, [r2, #28]
    624e:	683a      	ldr	r2, [r7, #0]
    6250:	430a      	orrs	r2, r1
    6252:	61da      	str	r2, [r3, #28]
			break;
    6254:	e008      	b.n	6268 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6256:	4b07      	ldr	r3, [pc, #28]	; (6274 <system_apb_clock_set_mask+0x58>)
    6258:	4a06      	ldr	r2, [pc, #24]	; (6274 <system_apb_clock_set_mask+0x58>)
    625a:	6a11      	ldr	r1, [r2, #32]
    625c:	683a      	ldr	r2, [r7, #0]
    625e:	430a      	orrs	r2, r1
    6260:	621a      	str	r2, [r3, #32]
			break;
    6262:	e001      	b.n	6268 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6264:	2317      	movs	r3, #23
    6266:	e000      	b.n	626a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6268:	2300      	movs	r3, #0
}
    626a:	0018      	movs	r0, r3
    626c:	46bd      	mov	sp, r7
    626e:	b002      	add	sp, #8
    6270:	bd80      	pop	{r7, pc}
    6272:	46c0      	nop			; (mov r8, r8)
    6274:	40000400 	.word	0x40000400

00006278 <system_interrupt_enter_critical_section>:
{
    6278:	b580      	push	{r7, lr}
    627a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
    627c:	4b02      	ldr	r3, [pc, #8]	; (6288 <system_interrupt_enter_critical_section+0x10>)
    627e:	4798      	blx	r3
}
    6280:	46c0      	nop			; (mov r8, r8)
    6282:	46bd      	mov	sp, r7
    6284:	bd80      	pop	{r7, pc}
    6286:	46c0      	nop			; (mov r8, r8)
    6288:	00002ebd 	.word	0x00002ebd

0000628c <system_interrupt_leave_critical_section>:
{
    628c:	b580      	push	{r7, lr}
    628e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
    6290:	4b02      	ldr	r3, [pc, #8]	; (629c <system_interrupt_leave_critical_section+0x10>)
    6292:	4798      	blx	r3
}
    6294:	46c0      	nop			; (mov r8, r8)
    6296:	46bd      	mov	sp, r7
    6298:	bd80      	pop	{r7, pc}
    629a:	46c0      	nop			; (mov r8, r8)
    629c:	00002f11 	.word	0x00002f11

000062a0 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    62a0:	b580      	push	{r7, lr}
    62a2:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    62a4:	4b05      	ldr	r3, [pc, #20]	; (62bc <system_gclk_is_syncing+0x1c>)
    62a6:	785b      	ldrb	r3, [r3, #1]
    62a8:	b2db      	uxtb	r3, r3
    62aa:	b25b      	sxtb	r3, r3
    62ac:	2b00      	cmp	r3, #0
    62ae:	da01      	bge.n	62b4 <system_gclk_is_syncing+0x14>
		return true;
    62b0:	2301      	movs	r3, #1
    62b2:	e000      	b.n	62b6 <system_gclk_is_syncing+0x16>
	}

	return false;
    62b4:	2300      	movs	r3, #0
}
    62b6:	0018      	movs	r0, r3
    62b8:	46bd      	mov	sp, r7
    62ba:	bd80      	pop	{r7, pc}
    62bc:	40000c00 	.word	0x40000c00

000062c0 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    62c0:	b580      	push	{r7, lr}
    62c2:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    62c4:	2108      	movs	r1, #8
    62c6:	2000      	movs	r0, #0
    62c8:	4b07      	ldr	r3, [pc, #28]	; (62e8 <system_gclk_init+0x28>)
    62ca:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    62cc:	4b07      	ldr	r3, [pc, #28]	; (62ec <system_gclk_init+0x2c>)
    62ce:	2201      	movs	r2, #1
    62d0:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    62d2:	46c0      	nop			; (mov r8, r8)
    62d4:	4b05      	ldr	r3, [pc, #20]	; (62ec <system_gclk_init+0x2c>)
    62d6:	781b      	ldrb	r3, [r3, #0]
    62d8:	b2db      	uxtb	r3, r3
    62da:	001a      	movs	r2, r3
    62dc:	2301      	movs	r3, #1
    62de:	4013      	ands	r3, r2
    62e0:	d1f8      	bne.n	62d4 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
    62e2:	46c0      	nop			; (mov r8, r8)
    62e4:	46bd      	mov	sp, r7
    62e6:	bd80      	pop	{r7, pc}
    62e8:	0000621d 	.word	0x0000621d
    62ec:	40000c00 	.word	0x40000c00

000062f0 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    62f0:	b580      	push	{r7, lr}
    62f2:	b086      	sub	sp, #24
    62f4:	af00      	add	r7, sp, #0
    62f6:	0002      	movs	r2, r0
    62f8:	6039      	str	r1, [r7, #0]
    62fa:	1dfb      	adds	r3, r7, #7
    62fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    62fe:	1dfb      	adds	r3, r7, #7
    6300:	781b      	ldrb	r3, [r3, #0]
    6302:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    6304:	1dfb      	adds	r3, r7, #7
    6306:	781b      	ldrb	r3, [r3, #0]
    6308:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    630a:	683b      	ldr	r3, [r7, #0]
    630c:	781b      	ldrb	r3, [r3, #0]
    630e:	021b      	lsls	r3, r3, #8
    6310:	001a      	movs	r2, r3
    6312:	697b      	ldr	r3, [r7, #20]
    6314:	4313      	orrs	r3, r2
    6316:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    6318:	683b      	ldr	r3, [r7, #0]
    631a:	785b      	ldrb	r3, [r3, #1]
    631c:	2b00      	cmp	r3, #0
    631e:	d004      	beq.n	632a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    6320:	697b      	ldr	r3, [r7, #20]
    6322:	2280      	movs	r2, #128	; 0x80
    6324:	02d2      	lsls	r2, r2, #11
    6326:	4313      	orrs	r3, r2
    6328:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    632a:	683b      	ldr	r3, [r7, #0]
    632c:	7a5b      	ldrb	r3, [r3, #9]
    632e:	2b00      	cmp	r3, #0
    6330:	d004      	beq.n	633c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    6332:	697b      	ldr	r3, [r7, #20]
    6334:	2280      	movs	r2, #128	; 0x80
    6336:	0312      	lsls	r2, r2, #12
    6338:	4313      	orrs	r3, r2
    633a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    633c:	683b      	ldr	r3, [r7, #0]
    633e:	685b      	ldr	r3, [r3, #4]
    6340:	2b01      	cmp	r3, #1
    6342:	d92c      	bls.n	639e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    6344:	683b      	ldr	r3, [r7, #0]
    6346:	685a      	ldr	r2, [r3, #4]
    6348:	683b      	ldr	r3, [r7, #0]
    634a:	685b      	ldr	r3, [r3, #4]
    634c:	3b01      	subs	r3, #1
    634e:	4013      	ands	r3, r2
    6350:	d11a      	bne.n	6388 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    6352:	2300      	movs	r3, #0
    6354:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    6356:	2302      	movs	r3, #2
    6358:	60bb      	str	r3, [r7, #8]
    635a:	e005      	b.n	6368 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    635c:	68fb      	ldr	r3, [r7, #12]
    635e:	3301      	adds	r3, #1
    6360:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    6362:	68bb      	ldr	r3, [r7, #8]
    6364:	005b      	lsls	r3, r3, #1
    6366:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    6368:	683b      	ldr	r3, [r7, #0]
    636a:	685a      	ldr	r2, [r3, #4]
    636c:	68bb      	ldr	r3, [r7, #8]
    636e:	429a      	cmp	r2, r3
    6370:	d8f4      	bhi.n	635c <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    6372:	68fb      	ldr	r3, [r7, #12]
    6374:	021b      	lsls	r3, r3, #8
    6376:	693a      	ldr	r2, [r7, #16]
    6378:	4313      	orrs	r3, r2
    637a:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    637c:	697b      	ldr	r3, [r7, #20]
    637e:	2280      	movs	r2, #128	; 0x80
    6380:	0352      	lsls	r2, r2, #13
    6382:	4313      	orrs	r3, r2
    6384:	617b      	str	r3, [r7, #20]
    6386:	e00a      	b.n	639e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    6388:	683b      	ldr	r3, [r7, #0]
    638a:	685b      	ldr	r3, [r3, #4]
    638c:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    638e:	693a      	ldr	r2, [r7, #16]
    6390:	4313      	orrs	r3, r2
    6392:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    6394:	697b      	ldr	r3, [r7, #20]
    6396:	2280      	movs	r2, #128	; 0x80
    6398:	0292      	lsls	r2, r2, #10
    639a:	4313      	orrs	r3, r2
    639c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    639e:	683b      	ldr	r3, [r7, #0]
    63a0:	7a1b      	ldrb	r3, [r3, #8]
    63a2:	2b00      	cmp	r3, #0
    63a4:	d004      	beq.n	63b0 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    63a6:	697b      	ldr	r3, [r7, #20]
    63a8:	2280      	movs	r2, #128	; 0x80
    63aa:	0392      	lsls	r2, r2, #14
    63ac:	4313      	orrs	r3, r2
    63ae:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    63b0:	46c0      	nop			; (mov r8, r8)
    63b2:	4b13      	ldr	r3, [pc, #76]	; (6400 <system_gclk_gen_set_config+0x110>)
    63b4:	4798      	blx	r3
    63b6:	1e03      	subs	r3, r0, #0
    63b8:	d1fb      	bne.n	63b2 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    63ba:	4b12      	ldr	r3, [pc, #72]	; (6404 <system_gclk_gen_set_config+0x114>)
    63bc:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    63be:	4a12      	ldr	r2, [pc, #72]	; (6408 <system_gclk_gen_set_config+0x118>)
    63c0:	1dfb      	adds	r3, r7, #7
    63c2:	781b      	ldrb	r3, [r3, #0]
    63c4:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    63c6:	46c0      	nop			; (mov r8, r8)
    63c8:	4b0d      	ldr	r3, [pc, #52]	; (6400 <system_gclk_gen_set_config+0x110>)
    63ca:	4798      	blx	r3
    63cc:	1e03      	subs	r3, r0, #0
    63ce:	d1fb      	bne.n	63c8 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    63d0:	4b0e      	ldr	r3, [pc, #56]	; (640c <system_gclk_gen_set_config+0x11c>)
    63d2:	693a      	ldr	r2, [r7, #16]
    63d4:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    63d6:	46c0      	nop			; (mov r8, r8)
    63d8:	4b09      	ldr	r3, [pc, #36]	; (6400 <system_gclk_gen_set_config+0x110>)
    63da:	4798      	blx	r3
    63dc:	1e03      	subs	r3, r0, #0
    63de:	d1fb      	bne.n	63d8 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    63e0:	4b0a      	ldr	r3, [pc, #40]	; (640c <system_gclk_gen_set_config+0x11c>)
    63e2:	4a0a      	ldr	r2, [pc, #40]	; (640c <system_gclk_gen_set_config+0x11c>)
    63e4:	6851      	ldr	r1, [r2, #4]
    63e6:	2280      	movs	r2, #128	; 0x80
    63e8:	0252      	lsls	r2, r2, #9
    63ea:	4011      	ands	r1, r2
    63ec:	697a      	ldr	r2, [r7, #20]
    63ee:	430a      	orrs	r2, r1
    63f0:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    63f2:	4b07      	ldr	r3, [pc, #28]	; (6410 <system_gclk_gen_set_config+0x120>)
    63f4:	4798      	blx	r3
}
    63f6:	46c0      	nop			; (mov r8, r8)
    63f8:	46bd      	mov	sp, r7
    63fa:	b006      	add	sp, #24
    63fc:	bd80      	pop	{r7, pc}
    63fe:	46c0      	nop			; (mov r8, r8)
    6400:	000062a1 	.word	0x000062a1
    6404:	00006279 	.word	0x00006279
    6408:	40000c08 	.word	0x40000c08
    640c:	40000c00 	.word	0x40000c00
    6410:	0000628d 	.word	0x0000628d

00006414 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    6414:	b580      	push	{r7, lr}
    6416:	b082      	sub	sp, #8
    6418:	af00      	add	r7, sp, #0
    641a:	0002      	movs	r2, r0
    641c:	1dfb      	adds	r3, r7, #7
    641e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    6420:	46c0      	nop			; (mov r8, r8)
    6422:	4b0e      	ldr	r3, [pc, #56]	; (645c <system_gclk_gen_enable+0x48>)
    6424:	4798      	blx	r3
    6426:	1e03      	subs	r3, r0, #0
    6428:	d1fb      	bne.n	6422 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    642a:	4b0d      	ldr	r3, [pc, #52]	; (6460 <system_gclk_gen_enable+0x4c>)
    642c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    642e:	4a0d      	ldr	r2, [pc, #52]	; (6464 <system_gclk_gen_enable+0x50>)
    6430:	1dfb      	adds	r3, r7, #7
    6432:	781b      	ldrb	r3, [r3, #0]
    6434:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6436:	46c0      	nop			; (mov r8, r8)
    6438:	4b08      	ldr	r3, [pc, #32]	; (645c <system_gclk_gen_enable+0x48>)
    643a:	4798      	blx	r3
    643c:	1e03      	subs	r3, r0, #0
    643e:	d1fb      	bne.n	6438 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    6440:	4b09      	ldr	r3, [pc, #36]	; (6468 <system_gclk_gen_enable+0x54>)
    6442:	4a09      	ldr	r2, [pc, #36]	; (6468 <system_gclk_gen_enable+0x54>)
    6444:	6852      	ldr	r2, [r2, #4]
    6446:	2180      	movs	r1, #128	; 0x80
    6448:	0249      	lsls	r1, r1, #9
    644a:	430a      	orrs	r2, r1
    644c:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    644e:	4b07      	ldr	r3, [pc, #28]	; (646c <system_gclk_gen_enable+0x58>)
    6450:	4798      	blx	r3
}
    6452:	46c0      	nop			; (mov r8, r8)
    6454:	46bd      	mov	sp, r7
    6456:	b002      	add	sp, #8
    6458:	bd80      	pop	{r7, pc}
    645a:	46c0      	nop			; (mov r8, r8)
    645c:	000062a1 	.word	0x000062a1
    6460:	00006279 	.word	0x00006279
    6464:	40000c04 	.word	0x40000c04
    6468:	40000c00 	.word	0x40000c00
    646c:	0000628d 	.word	0x0000628d

00006470 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    6470:	b580      	push	{r7, lr}
    6472:	b086      	sub	sp, #24
    6474:	af00      	add	r7, sp, #0
    6476:	0002      	movs	r2, r0
    6478:	1dfb      	adds	r3, r7, #7
    647a:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    647c:	46c0      	nop			; (mov r8, r8)
    647e:	4b2a      	ldr	r3, [pc, #168]	; (6528 <system_gclk_gen_get_hz+0xb8>)
    6480:	4798      	blx	r3
    6482:	1e03      	subs	r3, r0, #0
    6484:	d1fb      	bne.n	647e <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    6486:	4b29      	ldr	r3, [pc, #164]	; (652c <system_gclk_gen_get_hz+0xbc>)
    6488:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    648a:	4a29      	ldr	r2, [pc, #164]	; (6530 <system_gclk_gen_get_hz+0xc0>)
    648c:	1dfb      	adds	r3, r7, #7
    648e:	781b      	ldrb	r3, [r3, #0]
    6490:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    6492:	46c0      	nop			; (mov r8, r8)
    6494:	4b24      	ldr	r3, [pc, #144]	; (6528 <system_gclk_gen_get_hz+0xb8>)
    6496:	4798      	blx	r3
    6498:	1e03      	subs	r3, r0, #0
    649a:	d1fb      	bne.n	6494 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    649c:	4b25      	ldr	r3, [pc, #148]	; (6534 <system_gclk_gen_get_hz+0xc4>)
    649e:	685b      	ldr	r3, [r3, #4]
    64a0:	04db      	lsls	r3, r3, #19
    64a2:	0edb      	lsrs	r3, r3, #27
    64a4:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    64a6:	0018      	movs	r0, r3
    64a8:	4b23      	ldr	r3, [pc, #140]	; (6538 <system_gclk_gen_get_hz+0xc8>)
    64aa:	4798      	blx	r3
    64ac:	0003      	movs	r3, r0
    64ae:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    64b0:	4a1f      	ldr	r2, [pc, #124]	; (6530 <system_gclk_gen_get_hz+0xc0>)
    64b2:	1dfb      	adds	r3, r7, #7
    64b4:	781b      	ldrb	r3, [r3, #0]
    64b6:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    64b8:	4b1e      	ldr	r3, [pc, #120]	; (6534 <system_gclk_gen_get_hz+0xc4>)
    64ba:	685b      	ldr	r3, [r3, #4]
    64bc:	02db      	lsls	r3, r3, #11
    64be:	0fdb      	lsrs	r3, r3, #31
    64c0:	b2da      	uxtb	r2, r3
    64c2:	2313      	movs	r3, #19
    64c4:	18fb      	adds	r3, r7, r3
    64c6:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    64c8:	4a1c      	ldr	r2, [pc, #112]	; (653c <system_gclk_gen_get_hz+0xcc>)
    64ca:	1dfb      	adds	r3, r7, #7
    64cc:	781b      	ldrb	r3, [r3, #0]
    64ce:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    64d0:	46c0      	nop			; (mov r8, r8)
    64d2:	4b15      	ldr	r3, [pc, #84]	; (6528 <system_gclk_gen_get_hz+0xb8>)
    64d4:	4798      	blx	r3
    64d6:	1e03      	subs	r3, r0, #0
    64d8:	d1fb      	bne.n	64d2 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    64da:	4b16      	ldr	r3, [pc, #88]	; (6534 <system_gclk_gen_get_hz+0xc4>)
    64dc:	689b      	ldr	r3, [r3, #8]
    64de:	021b      	lsls	r3, r3, #8
    64e0:	0c1b      	lsrs	r3, r3, #16
    64e2:	b29b      	uxth	r3, r3
    64e4:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    64e6:	4b16      	ldr	r3, [pc, #88]	; (6540 <system_gclk_gen_get_hz+0xd0>)
    64e8:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    64ea:	2313      	movs	r3, #19
    64ec:	18fb      	adds	r3, r7, r3
    64ee:	781b      	ldrb	r3, [r3, #0]
    64f0:	2b00      	cmp	r3, #0
    64f2:	d109      	bne.n	6508 <system_gclk_gen_get_hz+0x98>
    64f4:	68fb      	ldr	r3, [r7, #12]
    64f6:	2b01      	cmp	r3, #1
    64f8:	d906      	bls.n	6508 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
    64fa:	4b12      	ldr	r3, [pc, #72]	; (6544 <system_gclk_gen_get_hz+0xd4>)
    64fc:	68f9      	ldr	r1, [r7, #12]
    64fe:	6978      	ldr	r0, [r7, #20]
    6500:	4798      	blx	r3
    6502:	0003      	movs	r3, r0
    6504:	617b      	str	r3, [r7, #20]
    6506:	e00a      	b.n	651e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
    6508:	2313      	movs	r3, #19
    650a:	18fb      	adds	r3, r7, r3
    650c:	781b      	ldrb	r3, [r3, #0]
    650e:	2b00      	cmp	r3, #0
    6510:	d005      	beq.n	651e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
    6512:	68fb      	ldr	r3, [r7, #12]
    6514:	3301      	adds	r3, #1
    6516:	697a      	ldr	r2, [r7, #20]
    6518:	40da      	lsrs	r2, r3
    651a:	0013      	movs	r3, r2
    651c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    651e:	697b      	ldr	r3, [r7, #20]
}
    6520:	0018      	movs	r0, r3
    6522:	46bd      	mov	sp, r7
    6524:	b006      	add	sp, #24
    6526:	bd80      	pop	{r7, pc}
    6528:	000062a1 	.word	0x000062a1
    652c:	00006279 	.word	0x00006279
    6530:	40000c04 	.word	0x40000c04
    6534:	40000c00 	.word	0x40000c00
    6538:	00005b1d 	.word	0x00005b1d
    653c:	40000c08 	.word	0x40000c08
    6540:	0000628d 	.word	0x0000628d
    6544:	0000a30d 	.word	0x0000a30d

00006548 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    6548:	b580      	push	{r7, lr}
    654a:	b084      	sub	sp, #16
    654c:	af00      	add	r7, sp, #0
    654e:	0002      	movs	r2, r0
    6550:	6039      	str	r1, [r7, #0]
    6552:	1dfb      	adds	r3, r7, #7
    6554:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    6556:	1dfb      	adds	r3, r7, #7
    6558:	781b      	ldrb	r3, [r3, #0]
    655a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    655c:	683b      	ldr	r3, [r7, #0]
    655e:	781b      	ldrb	r3, [r3, #0]
    6560:	021b      	lsls	r3, r3, #8
    6562:	001a      	movs	r2, r3
    6564:	68fb      	ldr	r3, [r7, #12]
    6566:	4313      	orrs	r3, r2
    6568:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    656a:	1dfb      	adds	r3, r7, #7
    656c:	781b      	ldrb	r3, [r3, #0]
    656e:	0018      	movs	r0, r3
    6570:	4b04      	ldr	r3, [pc, #16]	; (6584 <system_gclk_chan_set_config+0x3c>)
    6572:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    6574:	4b04      	ldr	r3, [pc, #16]	; (6588 <system_gclk_chan_set_config+0x40>)
    6576:	68fa      	ldr	r2, [r7, #12]
    6578:	b292      	uxth	r2, r2
    657a:	805a      	strh	r2, [r3, #2]
}
    657c:	46c0      	nop			; (mov r8, r8)
    657e:	46bd      	mov	sp, r7
    6580:	b004      	add	sp, #16
    6582:	bd80      	pop	{r7, pc}
    6584:	000065d5 	.word	0x000065d5
    6588:	40000c00 	.word	0x40000c00

0000658c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    658c:	b580      	push	{r7, lr}
    658e:	b082      	sub	sp, #8
    6590:	af00      	add	r7, sp, #0
    6592:	0002      	movs	r2, r0
    6594:	1dfb      	adds	r3, r7, #7
    6596:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    6598:	4b0a      	ldr	r3, [pc, #40]	; (65c4 <system_gclk_chan_enable+0x38>)
    659a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    659c:	4a0a      	ldr	r2, [pc, #40]	; (65c8 <system_gclk_chan_enable+0x3c>)
    659e:	1dfb      	adds	r3, r7, #7
    65a0:	781b      	ldrb	r3, [r3, #0]
    65a2:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    65a4:	4909      	ldr	r1, [pc, #36]	; (65cc <system_gclk_chan_enable+0x40>)
    65a6:	4b09      	ldr	r3, [pc, #36]	; (65cc <system_gclk_chan_enable+0x40>)
    65a8:	885b      	ldrh	r3, [r3, #2]
    65aa:	b29b      	uxth	r3, r3
    65ac:	2280      	movs	r2, #128	; 0x80
    65ae:	01d2      	lsls	r2, r2, #7
    65b0:	4313      	orrs	r3, r2
    65b2:	b29b      	uxth	r3, r3
    65b4:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    65b6:	4b06      	ldr	r3, [pc, #24]	; (65d0 <system_gclk_chan_enable+0x44>)
    65b8:	4798      	blx	r3
}
    65ba:	46c0      	nop			; (mov r8, r8)
    65bc:	46bd      	mov	sp, r7
    65be:	b002      	add	sp, #8
    65c0:	bd80      	pop	{r7, pc}
    65c2:	46c0      	nop			; (mov r8, r8)
    65c4:	00006279 	.word	0x00006279
    65c8:	40000c02 	.word	0x40000c02
    65cc:	40000c00 	.word	0x40000c00
    65d0:	0000628d 	.word	0x0000628d

000065d4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    65d4:	b580      	push	{r7, lr}
    65d6:	b084      	sub	sp, #16
    65d8:	af00      	add	r7, sp, #0
    65da:	0002      	movs	r2, r0
    65dc:	1dfb      	adds	r3, r7, #7
    65de:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    65e0:	4b1c      	ldr	r3, [pc, #112]	; (6654 <system_gclk_chan_disable+0x80>)
    65e2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    65e4:	4a1c      	ldr	r2, [pc, #112]	; (6658 <system_gclk_chan_disable+0x84>)
    65e6:	1dfb      	adds	r3, r7, #7
    65e8:	781b      	ldrb	r3, [r3, #0]
    65ea:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    65ec:	4b1b      	ldr	r3, [pc, #108]	; (665c <system_gclk_chan_disable+0x88>)
    65ee:	885b      	ldrh	r3, [r3, #2]
    65f0:	051b      	lsls	r3, r3, #20
    65f2:	0f1b      	lsrs	r3, r3, #28
    65f4:	b2db      	uxtb	r3, r3
    65f6:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    65f8:	4a18      	ldr	r2, [pc, #96]	; (665c <system_gclk_chan_disable+0x88>)
    65fa:	8853      	ldrh	r3, [r2, #2]
    65fc:	4918      	ldr	r1, [pc, #96]	; (6660 <system_gclk_chan_disable+0x8c>)
    65fe:	400b      	ands	r3, r1
    6600:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    6602:	4a16      	ldr	r2, [pc, #88]	; (665c <system_gclk_chan_disable+0x88>)
    6604:	4b15      	ldr	r3, [pc, #84]	; (665c <system_gclk_chan_disable+0x88>)
    6606:	885b      	ldrh	r3, [r3, #2]
    6608:	b29b      	uxth	r3, r3
    660a:	4916      	ldr	r1, [pc, #88]	; (6664 <system_gclk_chan_disable+0x90>)
    660c:	400b      	ands	r3, r1
    660e:	b29b      	uxth	r3, r3
    6610:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    6612:	46c0      	nop			; (mov r8, r8)
    6614:	4b11      	ldr	r3, [pc, #68]	; (665c <system_gclk_chan_disable+0x88>)
    6616:	885b      	ldrh	r3, [r3, #2]
    6618:	b29b      	uxth	r3, r3
    661a:	001a      	movs	r2, r3
    661c:	2380      	movs	r3, #128	; 0x80
    661e:	01db      	lsls	r3, r3, #7
    6620:	4013      	ands	r3, r2
    6622:	d1f7      	bne.n	6614 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    6624:	4a0d      	ldr	r2, [pc, #52]	; (665c <system_gclk_chan_disable+0x88>)
    6626:	68fb      	ldr	r3, [r7, #12]
    6628:	b2db      	uxtb	r3, r3
    662a:	1c19      	adds	r1, r3, #0
    662c:	230f      	movs	r3, #15
    662e:	400b      	ands	r3, r1
    6630:	b2d9      	uxtb	r1, r3
    6632:	8853      	ldrh	r3, [r2, #2]
    6634:	1c08      	adds	r0, r1, #0
    6636:	210f      	movs	r1, #15
    6638:	4001      	ands	r1, r0
    663a:	0208      	lsls	r0, r1, #8
    663c:	4908      	ldr	r1, [pc, #32]	; (6660 <system_gclk_chan_disable+0x8c>)
    663e:	400b      	ands	r3, r1
    6640:	1c19      	adds	r1, r3, #0
    6642:	1c03      	adds	r3, r0, #0
    6644:	430b      	orrs	r3, r1
    6646:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    6648:	4b07      	ldr	r3, [pc, #28]	; (6668 <system_gclk_chan_disable+0x94>)
    664a:	4798      	blx	r3
}
    664c:	46c0      	nop			; (mov r8, r8)
    664e:	46bd      	mov	sp, r7
    6650:	b004      	add	sp, #16
    6652:	bd80      	pop	{r7, pc}
    6654:	00006279 	.word	0x00006279
    6658:	40000c02 	.word	0x40000c02
    665c:	40000c00 	.word	0x40000c00
    6660:	fffff0ff 	.word	0xfffff0ff
    6664:	ffffbfff 	.word	0xffffbfff
    6668:	0000628d 	.word	0x0000628d

0000666c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    666c:	b580      	push	{r7, lr}
    666e:	b084      	sub	sp, #16
    6670:	af00      	add	r7, sp, #0
    6672:	0002      	movs	r2, r0
    6674:	1dfb      	adds	r3, r7, #7
    6676:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    6678:	4b0d      	ldr	r3, [pc, #52]	; (66b0 <system_gclk_chan_get_hz+0x44>)
    667a:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    667c:	4a0d      	ldr	r2, [pc, #52]	; (66b4 <system_gclk_chan_get_hz+0x48>)
    667e:	1dfb      	adds	r3, r7, #7
    6680:	781b      	ldrb	r3, [r3, #0]
    6682:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    6684:	4b0c      	ldr	r3, [pc, #48]	; (66b8 <system_gclk_chan_get_hz+0x4c>)
    6686:	885b      	ldrh	r3, [r3, #2]
    6688:	051b      	lsls	r3, r3, #20
    668a:	0f1b      	lsrs	r3, r3, #28
    668c:	b2da      	uxtb	r2, r3
    668e:	230f      	movs	r3, #15
    6690:	18fb      	adds	r3, r7, r3
    6692:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    6694:	4b09      	ldr	r3, [pc, #36]	; (66bc <system_gclk_chan_get_hz+0x50>)
    6696:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    6698:	230f      	movs	r3, #15
    669a:	18fb      	adds	r3, r7, r3
    669c:	781b      	ldrb	r3, [r3, #0]
    669e:	0018      	movs	r0, r3
    66a0:	4b07      	ldr	r3, [pc, #28]	; (66c0 <system_gclk_chan_get_hz+0x54>)
    66a2:	4798      	blx	r3
    66a4:	0003      	movs	r3, r0
}
    66a6:	0018      	movs	r0, r3
    66a8:	46bd      	mov	sp, r7
    66aa:	b004      	add	sp, #16
    66ac:	bd80      	pop	{r7, pc}
    66ae:	46c0      	nop			; (mov r8, r8)
    66b0:	00006279 	.word	0x00006279
    66b4:	40000c02 	.word	0x40000c02
    66b8:	40000c00 	.word	0x40000c00
    66bc:	0000628d 	.word	0x0000628d
    66c0:	00006471 	.word	0x00006471

000066c4 <system_pinmux_get_group_from_gpio_pin>:
{
    66c4:	b580      	push	{r7, lr}
    66c6:	b084      	sub	sp, #16
    66c8:	af00      	add	r7, sp, #0
    66ca:	0002      	movs	r2, r0
    66cc:	1dfb      	adds	r3, r7, #7
    66ce:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    66d0:	230f      	movs	r3, #15
    66d2:	18fb      	adds	r3, r7, r3
    66d4:	1dfa      	adds	r2, r7, #7
    66d6:	7812      	ldrb	r2, [r2, #0]
    66d8:	09d2      	lsrs	r2, r2, #7
    66da:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    66dc:	230e      	movs	r3, #14
    66de:	18fb      	adds	r3, r7, r3
    66e0:	1dfa      	adds	r2, r7, #7
    66e2:	7812      	ldrb	r2, [r2, #0]
    66e4:	0952      	lsrs	r2, r2, #5
    66e6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    66e8:	4b0d      	ldr	r3, [pc, #52]	; (6720 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    66ea:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    66ec:	230f      	movs	r3, #15
    66ee:	18fb      	adds	r3, r7, r3
    66f0:	781b      	ldrb	r3, [r3, #0]
    66f2:	2b00      	cmp	r3, #0
    66f4:	d10f      	bne.n	6716 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    66f6:	230f      	movs	r3, #15
    66f8:	18fb      	adds	r3, r7, r3
    66fa:	781b      	ldrb	r3, [r3, #0]
    66fc:	009b      	lsls	r3, r3, #2
    66fe:	2210      	movs	r2, #16
    6700:	4694      	mov	ip, r2
    6702:	44bc      	add	ip, r7
    6704:	4463      	add	r3, ip
    6706:	3b08      	subs	r3, #8
    6708:	681a      	ldr	r2, [r3, #0]
    670a:	230e      	movs	r3, #14
    670c:	18fb      	adds	r3, r7, r3
    670e:	781b      	ldrb	r3, [r3, #0]
    6710:	01db      	lsls	r3, r3, #7
    6712:	18d3      	adds	r3, r2, r3
    6714:	e000      	b.n	6718 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    6716:	2300      	movs	r3, #0
}
    6718:	0018      	movs	r0, r3
    671a:	46bd      	mov	sp, r7
    671c:	b004      	add	sp, #16
    671e:	bd80      	pop	{r7, pc}
    6720:	41004400 	.word	0x41004400

00006724 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    6724:	b580      	push	{r7, lr}
    6726:	b088      	sub	sp, #32
    6728:	af00      	add	r7, sp, #0
    672a:	60f8      	str	r0, [r7, #12]
    672c:	60b9      	str	r1, [r7, #8]
    672e:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    6730:	2300      	movs	r3, #0
    6732:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    6734:	687b      	ldr	r3, [r7, #4]
    6736:	78db      	ldrb	r3, [r3, #3]
    6738:	2201      	movs	r2, #1
    673a:	4053      	eors	r3, r2
    673c:	b2db      	uxtb	r3, r3
    673e:	2b00      	cmp	r3, #0
    6740:	d035      	beq.n	67ae <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    6742:	687b      	ldr	r3, [r7, #4]
    6744:	781b      	ldrb	r3, [r3, #0]
    6746:	2b80      	cmp	r3, #128	; 0x80
    6748:	d00b      	beq.n	6762 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    674a:	69fb      	ldr	r3, [r7, #28]
    674c:	2280      	movs	r2, #128	; 0x80
    674e:	0252      	lsls	r2, r2, #9
    6750:	4313      	orrs	r3, r2
    6752:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    6754:	687b      	ldr	r3, [r7, #4]
    6756:	781b      	ldrb	r3, [r3, #0]
    6758:	061b      	lsls	r3, r3, #24
    675a:	001a      	movs	r2, r3
    675c:	69fb      	ldr	r3, [r7, #28]
    675e:	4313      	orrs	r3, r2
    6760:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    6762:	687b      	ldr	r3, [r7, #4]
    6764:	785b      	ldrb	r3, [r3, #1]
    6766:	2b00      	cmp	r3, #0
    6768:	d003      	beq.n	6772 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    676a:	687b      	ldr	r3, [r7, #4]
    676c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    676e:	2b02      	cmp	r3, #2
    6770:	d110      	bne.n	6794 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    6772:	69fb      	ldr	r3, [r7, #28]
    6774:	2280      	movs	r2, #128	; 0x80
    6776:	0292      	lsls	r2, r2, #10
    6778:	4313      	orrs	r3, r2
    677a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    677c:	687b      	ldr	r3, [r7, #4]
    677e:	789b      	ldrb	r3, [r3, #2]
    6780:	2b00      	cmp	r3, #0
    6782:	d004      	beq.n	678e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    6784:	69fb      	ldr	r3, [r7, #28]
    6786:	2280      	movs	r2, #128	; 0x80
    6788:	02d2      	lsls	r2, r2, #11
    678a:	4313      	orrs	r3, r2
    678c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    678e:	68fb      	ldr	r3, [r7, #12]
    6790:	68ba      	ldr	r2, [r7, #8]
    6792:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6794:	687b      	ldr	r3, [r7, #4]
    6796:	785b      	ldrb	r3, [r3, #1]
    6798:	2b01      	cmp	r3, #1
    679a:	d003      	beq.n	67a4 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    679c:	687b      	ldr	r3, [r7, #4]
    679e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    67a0:	2b02      	cmp	r3, #2
    67a2:	d107      	bne.n	67b4 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    67a4:	69fb      	ldr	r3, [r7, #28]
    67a6:	4a22      	ldr	r2, [pc, #136]	; (6830 <_system_pinmux_config+0x10c>)
    67a8:	4013      	ands	r3, r2
    67aa:	61fb      	str	r3, [r7, #28]
    67ac:	e002      	b.n	67b4 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    67ae:	68fb      	ldr	r3, [r7, #12]
    67b0:	68ba      	ldr	r2, [r7, #8]
    67b2:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    67b4:	68bb      	ldr	r3, [r7, #8]
    67b6:	041b      	lsls	r3, r3, #16
    67b8:	0c1b      	lsrs	r3, r3, #16
    67ba:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    67bc:	68bb      	ldr	r3, [r7, #8]
    67be:	0c1b      	lsrs	r3, r3, #16
    67c0:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    67c2:	69ba      	ldr	r2, [r7, #24]
    67c4:	69fb      	ldr	r3, [r7, #28]
    67c6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    67c8:	22a0      	movs	r2, #160	; 0xa0
    67ca:	05d2      	lsls	r2, r2, #23
    67cc:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    67ce:	68fb      	ldr	r3, [r7, #12]
    67d0:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    67d2:	697a      	ldr	r2, [r7, #20]
    67d4:	69fb      	ldr	r3, [r7, #28]
    67d6:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    67d8:	22d0      	movs	r2, #208	; 0xd0
    67da:	0612      	lsls	r2, r2, #24
    67dc:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    67de:	68fb      	ldr	r3, [r7, #12]
    67e0:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    67e2:	687b      	ldr	r3, [r7, #4]
    67e4:	78db      	ldrb	r3, [r3, #3]
    67e6:	2201      	movs	r2, #1
    67e8:	4053      	eors	r3, r2
    67ea:	b2db      	uxtb	r3, r3
    67ec:	2b00      	cmp	r3, #0
    67ee:	d01a      	beq.n	6826 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    67f0:	69fa      	ldr	r2, [r7, #28]
    67f2:	2380      	movs	r3, #128	; 0x80
    67f4:	02db      	lsls	r3, r3, #11
    67f6:	4013      	ands	r3, r2
    67f8:	d00a      	beq.n	6810 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    67fa:	687b      	ldr	r3, [r7, #4]
    67fc:	789b      	ldrb	r3, [r3, #2]
    67fe:	2b01      	cmp	r3, #1
    6800:	d103      	bne.n	680a <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    6802:	68fb      	ldr	r3, [r7, #12]
    6804:	68ba      	ldr	r2, [r7, #8]
    6806:	619a      	str	r2, [r3, #24]
    6808:	e002      	b.n	6810 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    680a:	68fb      	ldr	r3, [r7, #12]
    680c:	68ba      	ldr	r2, [r7, #8]
    680e:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    6810:	687b      	ldr	r3, [r7, #4]
    6812:	785b      	ldrb	r3, [r3, #1]
    6814:	2b01      	cmp	r3, #1
    6816:	d003      	beq.n	6820 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    6818:	687b      	ldr	r3, [r7, #4]
    681a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    681c:	2b02      	cmp	r3, #2
    681e:	d102      	bne.n	6826 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    6820:	68fb      	ldr	r3, [r7, #12]
    6822:	68ba      	ldr	r2, [r7, #8]
    6824:	609a      	str	r2, [r3, #8]
		}
	}
}
    6826:	46c0      	nop			; (mov r8, r8)
    6828:	46bd      	mov	sp, r7
    682a:	b008      	add	sp, #32
    682c:	bd80      	pop	{r7, pc}
    682e:	46c0      	nop			; (mov r8, r8)
    6830:	fffbffff 	.word	0xfffbffff

00006834 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    6834:	b580      	push	{r7, lr}
    6836:	b084      	sub	sp, #16
    6838:	af00      	add	r7, sp, #0
    683a:	0002      	movs	r2, r0
    683c:	6039      	str	r1, [r7, #0]
    683e:	1dfb      	adds	r3, r7, #7
    6840:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    6842:	1dfb      	adds	r3, r7, #7
    6844:	781b      	ldrb	r3, [r3, #0]
    6846:	0018      	movs	r0, r3
    6848:	4b0a      	ldr	r3, [pc, #40]	; (6874 <system_pinmux_pin_set_config+0x40>)
    684a:	4798      	blx	r3
    684c:	0003      	movs	r3, r0
    684e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    6850:	1dfb      	adds	r3, r7, #7
    6852:	781b      	ldrb	r3, [r3, #0]
    6854:	221f      	movs	r2, #31
    6856:	4013      	ands	r3, r2
    6858:	2201      	movs	r2, #1
    685a:	409a      	lsls	r2, r3
    685c:	0013      	movs	r3, r2
    685e:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    6860:	683a      	ldr	r2, [r7, #0]
    6862:	68b9      	ldr	r1, [r7, #8]
    6864:	68fb      	ldr	r3, [r7, #12]
    6866:	0018      	movs	r0, r3
    6868:	4b03      	ldr	r3, [pc, #12]	; (6878 <system_pinmux_pin_set_config+0x44>)
    686a:	4798      	blx	r3
}
    686c:	46c0      	nop			; (mov r8, r8)
    686e:	46bd      	mov	sp, r7
    6870:	b004      	add	sp, #16
    6872:	bd80      	pop	{r7, pc}
    6874:	000066c5 	.word	0x000066c5
    6878:	00006725 	.word	0x00006725

0000687c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    687c:	b580      	push	{r7, lr}
    687e:	af00      	add	r7, sp, #0
	return;
    6880:	46c0      	nop			; (mov r8, r8)
}
    6882:	46bd      	mov	sp, r7
    6884:	bd80      	pop	{r7, pc}
	...

00006888 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    6888:	b580      	push	{r7, lr}
    688a:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    688c:	4b06      	ldr	r3, [pc, #24]	; (68a8 <system_init+0x20>)
    688e:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    6890:	4b06      	ldr	r3, [pc, #24]	; (68ac <system_init+0x24>)
    6892:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    6894:	4b06      	ldr	r3, [pc, #24]	; (68b0 <system_init+0x28>)
    6896:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    6898:	4b06      	ldr	r3, [pc, #24]	; (68b4 <system_init+0x2c>)
    689a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    689c:	4b06      	ldr	r3, [pc, #24]	; (68b8 <system_init+0x30>)
    689e:	4798      	blx	r3
}
    68a0:	46c0      	nop			; (mov r8, r8)
    68a2:	46bd      	mov	sp, r7
    68a4:	bd80      	pop	{r7, pc}
    68a6:	46c0      	nop			; (mov r8, r8)
    68a8:	00005fad 	.word	0x00005fad
    68ac:	000002f9 	.word	0x000002f9
    68b0:	0000687d 	.word	0x0000687d
    68b4:	0000687d 	.word	0x0000687d
    68b8:	0000687d 	.word	0x0000687d

000068bc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    68bc:	b580      	push	{r7, lr}
    68be:	b082      	sub	sp, #8
    68c0:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    68c2:	4b2f      	ldr	r3, [pc, #188]	; (6980 <Reset_Handler+0xc4>)
    68c4:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    68c6:	4b2f      	ldr	r3, [pc, #188]	; (6984 <Reset_Handler+0xc8>)
    68c8:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    68ca:	687a      	ldr	r2, [r7, #4]
    68cc:	683b      	ldr	r3, [r7, #0]
    68ce:	429a      	cmp	r2, r3
    68d0:	d00c      	beq.n	68ec <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
    68d2:	e007      	b.n	68e4 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
    68d4:	683b      	ldr	r3, [r7, #0]
    68d6:	1d1a      	adds	r2, r3, #4
    68d8:	603a      	str	r2, [r7, #0]
    68da:	687a      	ldr	r2, [r7, #4]
    68dc:	1d11      	adds	r1, r2, #4
    68de:	6079      	str	r1, [r7, #4]
    68e0:	6812      	ldr	r2, [r2, #0]
    68e2:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    68e4:	683a      	ldr	r2, [r7, #0]
    68e6:	4b28      	ldr	r3, [pc, #160]	; (6988 <Reset_Handler+0xcc>)
    68e8:	429a      	cmp	r2, r3
    68ea:	d3f3      	bcc.n	68d4 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    68ec:	4b27      	ldr	r3, [pc, #156]	; (698c <Reset_Handler+0xd0>)
    68ee:	603b      	str	r3, [r7, #0]
    68f0:	e004      	b.n	68fc <Reset_Handler+0x40>
                *pDest++ = 0;
    68f2:	683b      	ldr	r3, [r7, #0]
    68f4:	1d1a      	adds	r2, r3, #4
    68f6:	603a      	str	r2, [r7, #0]
    68f8:	2200      	movs	r2, #0
    68fa:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    68fc:	683a      	ldr	r2, [r7, #0]
    68fe:	4b24      	ldr	r3, [pc, #144]	; (6990 <Reset_Handler+0xd4>)
    6900:	429a      	cmp	r2, r3
    6902:	d3f6      	bcc.n	68f2 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    6904:	4b23      	ldr	r3, [pc, #140]	; (6994 <Reset_Handler+0xd8>)
    6906:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    6908:	4b23      	ldr	r3, [pc, #140]	; (6998 <Reset_Handler+0xdc>)
    690a:	687a      	ldr	r2, [r7, #4]
    690c:	21ff      	movs	r1, #255	; 0xff
    690e:	438a      	bics	r2, r1
    6910:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    6912:	4a22      	ldr	r2, [pc, #136]	; (699c <Reset_Handler+0xe0>)
    6914:	2390      	movs	r3, #144	; 0x90
    6916:	005b      	lsls	r3, r3, #1
    6918:	2102      	movs	r1, #2
    691a:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    691c:	4a20      	ldr	r2, [pc, #128]	; (69a0 <Reset_Handler+0xe4>)
    691e:	78d3      	ldrb	r3, [r2, #3]
    6920:	2103      	movs	r1, #3
    6922:	438b      	bics	r3, r1
    6924:	1c19      	adds	r1, r3, #0
    6926:	2302      	movs	r3, #2
    6928:	430b      	orrs	r3, r1
    692a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    692c:	4a1c      	ldr	r2, [pc, #112]	; (69a0 <Reset_Handler+0xe4>)
    692e:	78d3      	ldrb	r3, [r2, #3]
    6930:	210c      	movs	r1, #12
    6932:	438b      	bics	r3, r1
    6934:	1c19      	adds	r1, r3, #0
    6936:	2308      	movs	r3, #8
    6938:	430b      	orrs	r3, r1
    693a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    693c:	4a19      	ldr	r2, [pc, #100]	; (69a4 <Reset_Handler+0xe8>)
    693e:	7b93      	ldrb	r3, [r2, #14]
    6940:	2130      	movs	r1, #48	; 0x30
    6942:	438b      	bics	r3, r1
    6944:	1c19      	adds	r1, r3, #0
    6946:	2320      	movs	r3, #32
    6948:	430b      	orrs	r3, r1
    694a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    694c:	4a15      	ldr	r2, [pc, #84]	; (69a4 <Reset_Handler+0xe8>)
    694e:	7b93      	ldrb	r3, [r2, #14]
    6950:	210c      	movs	r1, #12
    6952:	438b      	bics	r3, r1
    6954:	1c19      	adds	r1, r3, #0
    6956:	2308      	movs	r3, #8
    6958:	430b      	orrs	r3, r1
    695a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    695c:	4a11      	ldr	r2, [pc, #68]	; (69a4 <Reset_Handler+0xe8>)
    695e:	7b93      	ldrb	r3, [r2, #14]
    6960:	2103      	movs	r1, #3
    6962:	438b      	bics	r3, r1
    6964:	1c19      	adds	r1, r3, #0
    6966:	2302      	movs	r3, #2
    6968:	430b      	orrs	r3, r1
    696a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    696c:	4a0e      	ldr	r2, [pc, #56]	; (69a8 <Reset_Handler+0xec>)
    696e:	6853      	ldr	r3, [r2, #4]
    6970:	2180      	movs	r1, #128	; 0x80
    6972:	430b      	orrs	r3, r1
    6974:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    6976:	4b0d      	ldr	r3, [pc, #52]	; (69ac <Reset_Handler+0xf0>)
    6978:	4798      	blx	r3

        /* Branch to main function */
        main();
    697a:	4b0d      	ldr	r3, [pc, #52]	; (69b0 <Reset_Handler+0xf4>)
    697c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    697e:	e7fe      	b.n	697e <Reset_Handler+0xc2>
    6980:	0000b830 	.word	0x0000b830
    6984:	20000000 	.word	0x20000000
    6988:	20000094 	.word	0x20000094
    698c:	20000094 	.word	0x20000094
    6990:	20000c94 	.word	0x20000c94
    6994:	00000000 	.word	0x00000000
    6998:	e000ed00 	.word	0xe000ed00
    699c:	41007000 	.word	0x41007000
    69a0:	41005000 	.word	0x41005000
    69a4:	41004800 	.word	0x41004800
    69a8:	41004000 	.word	0x41004000
    69ac:	0000a64d 	.word	0x0000a64d
    69b0:	00009f1d 	.word	0x00009f1d

000069b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    69b4:	b580      	push	{r7, lr}
    69b6:	af00      	add	r7, sp, #0
        while (1) {
    69b8:	e7fe      	b.n	69b8 <Dummy_Handler+0x4>
	...

000069bc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    69bc:	b580      	push	{r7, lr}
    69be:	b086      	sub	sp, #24
    69c0:	af00      	add	r7, sp, #0
    69c2:	60f8      	str	r0, [r7, #12]
    69c4:	60b9      	str	r1, [r7, #8]
    69c6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    69c8:	2300      	movs	r3, #0
    69ca:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    69cc:	68fb      	ldr	r3, [r7, #12]
    69ce:	2b00      	cmp	r3, #0
    69d0:	d012      	beq.n	69f8 <_read+0x3c>
		return -1;
    69d2:	2301      	movs	r3, #1
    69d4:	425b      	negs	r3, r3
    69d6:	e013      	b.n	6a00 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    69d8:	4b0b      	ldr	r3, [pc, #44]	; (6a08 <_read+0x4c>)
    69da:	681a      	ldr	r2, [r3, #0]
    69dc:	4b0b      	ldr	r3, [pc, #44]	; (6a0c <_read+0x50>)
    69de:	681b      	ldr	r3, [r3, #0]
    69e0:	68b9      	ldr	r1, [r7, #8]
    69e2:	0018      	movs	r0, r3
    69e4:	4790      	blx	r2
		ptr++;
    69e6:	68bb      	ldr	r3, [r7, #8]
    69e8:	3301      	adds	r3, #1
    69ea:	60bb      	str	r3, [r7, #8]
		nChars++;
    69ec:	697b      	ldr	r3, [r7, #20]
    69ee:	3301      	adds	r3, #1
    69f0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    69f2:	687b      	ldr	r3, [r7, #4]
    69f4:	3b01      	subs	r3, #1
    69f6:	607b      	str	r3, [r7, #4]
    69f8:	687b      	ldr	r3, [r7, #4]
    69fa:	2b00      	cmp	r3, #0
    69fc:	dcec      	bgt.n	69d8 <_read+0x1c>
	}
	return nChars;
    69fe:	697b      	ldr	r3, [r7, #20]
}
    6a00:	0018      	movs	r0, r3
    6a02:	46bd      	mov	sp, r7
    6a04:	b006      	add	sp, #24
    6a06:	bd80      	pop	{r7, pc}
    6a08:	200009f0 	.word	0x200009f0
    6a0c:	200009f8 	.word	0x200009f8

00006a10 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    6a10:	b580      	push	{r7, lr}
    6a12:	b086      	sub	sp, #24
    6a14:	af00      	add	r7, sp, #0
    6a16:	60f8      	str	r0, [r7, #12]
    6a18:	60b9      	str	r1, [r7, #8]
    6a1a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
    6a1c:	2300      	movs	r3, #0
    6a1e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    6a20:	68fb      	ldr	r3, [r7, #12]
    6a22:	2b01      	cmp	r3, #1
    6a24:	d01d      	beq.n	6a62 <_write+0x52>
    6a26:	68fb      	ldr	r3, [r7, #12]
    6a28:	2b02      	cmp	r3, #2
    6a2a:	d01a      	beq.n	6a62 <_write+0x52>
    6a2c:	68fb      	ldr	r3, [r7, #12]
    6a2e:	2b03      	cmp	r3, #3
    6a30:	d017      	beq.n	6a62 <_write+0x52>
		return -1;
    6a32:	2301      	movs	r3, #1
    6a34:	425b      	negs	r3, r3
    6a36:	e018      	b.n	6a6a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    6a38:	4b0e      	ldr	r3, [pc, #56]	; (6a74 <_write+0x64>)
    6a3a:	681a      	ldr	r2, [r3, #0]
    6a3c:	4b0e      	ldr	r3, [pc, #56]	; (6a78 <_write+0x68>)
    6a3e:	6818      	ldr	r0, [r3, #0]
    6a40:	68bb      	ldr	r3, [r7, #8]
    6a42:	1c59      	adds	r1, r3, #1
    6a44:	60b9      	str	r1, [r7, #8]
    6a46:	781b      	ldrb	r3, [r3, #0]
    6a48:	0019      	movs	r1, r3
    6a4a:	4790      	blx	r2
    6a4c:	1e03      	subs	r3, r0, #0
    6a4e:	da02      	bge.n	6a56 <_write+0x46>
			return -1;
    6a50:	2301      	movs	r3, #1
    6a52:	425b      	negs	r3, r3
    6a54:	e009      	b.n	6a6a <_write+0x5a>
		}
		++nChars;
    6a56:	697b      	ldr	r3, [r7, #20]
    6a58:	3301      	adds	r3, #1
    6a5a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    6a5c:	687b      	ldr	r3, [r7, #4]
    6a5e:	3b01      	subs	r3, #1
    6a60:	607b      	str	r3, [r7, #4]
    6a62:	687b      	ldr	r3, [r7, #4]
    6a64:	2b00      	cmp	r3, #0
    6a66:	d1e7      	bne.n	6a38 <_write+0x28>
	}
	return nChars;
    6a68:	697b      	ldr	r3, [r7, #20]
}
    6a6a:	0018      	movs	r0, r3
    6a6c:	46bd      	mov	sp, r7
    6a6e:	b006      	add	sp, #24
    6a70:	bd80      	pop	{r7, pc}
    6a72:	46c0      	nop			; (mov r8, r8)
    6a74:	200009f4 	.word	0x200009f4
    6a78:	200009f8 	.word	0x200009f8

00006a7c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    6a7c:	b580      	push	{r7, lr}
    6a7e:	b084      	sub	sp, #16
    6a80:	af00      	add	r7, sp, #0
    6a82:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    6a84:	4b0a      	ldr	r3, [pc, #40]	; (6ab0 <_sbrk+0x34>)
    6a86:	681b      	ldr	r3, [r3, #0]
    6a88:	2b00      	cmp	r3, #0
    6a8a:	d102      	bne.n	6a92 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
    6a8c:	4b08      	ldr	r3, [pc, #32]	; (6ab0 <_sbrk+0x34>)
    6a8e:	4a09      	ldr	r2, [pc, #36]	; (6ab4 <_sbrk+0x38>)
    6a90:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    6a92:	4b07      	ldr	r3, [pc, #28]	; (6ab0 <_sbrk+0x34>)
    6a94:	681b      	ldr	r3, [r3, #0]
    6a96:	60fb      	str	r3, [r7, #12]

	heap += incr;
    6a98:	4b05      	ldr	r3, [pc, #20]	; (6ab0 <_sbrk+0x34>)
    6a9a:	681a      	ldr	r2, [r3, #0]
    6a9c:	687b      	ldr	r3, [r7, #4]
    6a9e:	18d2      	adds	r2, r2, r3
    6aa0:	4b03      	ldr	r3, [pc, #12]	; (6ab0 <_sbrk+0x34>)
    6aa2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    6aa4:	68fb      	ldr	r3, [r7, #12]
}
    6aa6:	0018      	movs	r0, r3
    6aa8:	46bd      	mov	sp, r7
    6aaa:	b004      	add	sp, #16
    6aac:	bd80      	pop	{r7, pc}
    6aae:	46c0      	nop			; (mov r8, r8)
    6ab0:	20000178 	.word	0x20000178
    6ab4:	20002c98 	.word	0x20002c98

00006ab8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    6ab8:	b580      	push	{r7, lr}
    6aba:	b082      	sub	sp, #8
    6abc:	af00      	add	r7, sp, #0
    6abe:	6078      	str	r0, [r7, #4]
	return -1;
    6ac0:	2301      	movs	r3, #1
    6ac2:	425b      	negs	r3, r3
}
    6ac4:	0018      	movs	r0, r3
    6ac6:	46bd      	mov	sp, r7
    6ac8:	b002      	add	sp, #8
    6aca:	bd80      	pop	{r7, pc}

00006acc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    6acc:	b580      	push	{r7, lr}
    6ace:	b082      	sub	sp, #8
    6ad0:	af00      	add	r7, sp, #0
    6ad2:	6078      	str	r0, [r7, #4]
    6ad4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    6ad6:	683b      	ldr	r3, [r7, #0]
    6ad8:	2280      	movs	r2, #128	; 0x80
    6ada:	0192      	lsls	r2, r2, #6
    6adc:	605a      	str	r2, [r3, #4]

	return 0;
    6ade:	2300      	movs	r3, #0
}
    6ae0:	0018      	movs	r0, r3
    6ae2:	46bd      	mov	sp, r7
    6ae4:	b002      	add	sp, #8
    6ae6:	bd80      	pop	{r7, pc}

00006ae8 <_lseek>:
{
	return 1;
}

extern int _lseek(int file, int ptr, int dir)
{
    6ae8:	b580      	push	{r7, lr}
    6aea:	b084      	sub	sp, #16
    6aec:	af00      	add	r7, sp, #0
    6aee:	60f8      	str	r0, [r7, #12]
    6af0:	60b9      	str	r1, [r7, #8]
    6af2:	607a      	str	r2, [r7, #4]
	return 0;
    6af4:	2300      	movs	r3, #0
}
    6af6:	0018      	movs	r0, r3
    6af8:	46bd      	mov	sp, r7
    6afa:	b004      	add	sp, #16
    6afc:	bd80      	pop	{r7, pc}

00006afe <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    6afe:	b580      	push	{r7, lr}
    6b00:	b082      	sub	sp, #8
    6b02:	af00      	add	r7, sp, #0
    6b04:	6078      	str	r0, [r7, #4]
	time->second = 0;
    6b06:	687b      	ldr	r3, [r7, #4]
    6b08:	2200      	movs	r2, #0
    6b0a:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    6b0c:	687b      	ldr	r3, [r7, #4]
    6b0e:	2200      	movs	r2, #0
    6b10:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    6b12:	687b      	ldr	r3, [r7, #4]
    6b14:	2200      	movs	r2, #0
    6b16:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    6b18:	687b      	ldr	r3, [r7, #4]
    6b1a:	2200      	movs	r2, #0
    6b1c:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    6b1e:	687b      	ldr	r3, [r7, #4]
    6b20:	2201      	movs	r2, #1
    6b22:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    6b24:	687b      	ldr	r3, [r7, #4]
    6b26:	2201      	movs	r2, #1
    6b28:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    6b2a:	687b      	ldr	r3, [r7, #4]
    6b2c:	22fa      	movs	r2, #250	; 0xfa
    6b2e:	00d2      	lsls	r2, r2, #3
    6b30:	80da      	strh	r2, [r3, #6]
}
    6b32:	46c0      	nop			; (mov r8, r8)
    6b34:	46bd      	mov	sp, r7
    6b36:	b002      	add	sp, #8
    6b38:	bd80      	pop	{r7, pc}
	...

00006b3c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    6b3c:	b580      	push	{r7, lr}
    6b3e:	b086      	sub	sp, #24
    6b40:	af00      	add	r7, sp, #0
    6b42:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    6b44:	230c      	movs	r3, #12
    6b46:	18fb      	adds	r3, r7, r3
    6b48:	0018      	movs	r0, r3
    6b4a:	4b23      	ldr	r3, [pc, #140]	; (6bd8 <rtc_calendar_get_config_defaults+0x9c>)
    6b4c:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    6b4e:	687b      	ldr	r3, [r7, #4]
    6b50:	22a0      	movs	r2, #160	; 0xa0
    6b52:	0112      	lsls	r2, r2, #4
    6b54:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    6b56:	687b      	ldr	r3, [r7, #4]
    6b58:	2200      	movs	r2, #0
    6b5a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    6b5c:	687b      	ldr	r3, [r7, #4]
    6b5e:	2200      	movs	r2, #0
    6b60:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    6b62:	687b      	ldr	r3, [r7, #4]
    6b64:	2200      	movs	r2, #0
    6b66:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    6b68:	687b      	ldr	r3, [r7, #4]
    6b6a:	22fa      	movs	r2, #250	; 0xfa
    6b6c:	00d2      	lsls	r2, r2, #3
    6b6e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6b70:	2317      	movs	r3, #23
    6b72:	18fb      	adds	r3, r7, r3
    6b74:	2200      	movs	r2, #0
    6b76:	701a      	strb	r2, [r3, #0]
    6b78:	e025      	b.n	6bc6 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
    6b7a:	2317      	movs	r3, #23
    6b7c:	18fb      	adds	r3, r7, r3
    6b7e:	781a      	ldrb	r2, [r3, #0]
    6b80:	6879      	ldr	r1, [r7, #4]
    6b82:	2008      	movs	r0, #8
    6b84:	0013      	movs	r3, r2
    6b86:	009b      	lsls	r3, r3, #2
    6b88:	189b      	adds	r3, r3, r2
    6b8a:	005b      	lsls	r3, r3, #1
    6b8c:	18cb      	adds	r3, r1, r3
    6b8e:	181a      	adds	r2, r3, r0
    6b90:	230c      	movs	r3, #12
    6b92:	18fb      	adds	r3, r7, r3
    6b94:	0010      	movs	r0, r2
    6b96:	0019      	movs	r1, r3
    6b98:	2308      	movs	r3, #8
    6b9a:	001a      	movs	r2, r3
    6b9c:	4b0f      	ldr	r3, [pc, #60]	; (6bdc <rtc_calendar_get_config_defaults+0xa0>)
    6b9e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6ba0:	2317      	movs	r3, #23
    6ba2:	18fb      	adds	r3, r7, r3
    6ba4:	781a      	ldrb	r2, [r3, #0]
    6ba6:	6879      	ldr	r1, [r7, #4]
    6ba8:	0013      	movs	r3, r2
    6baa:	009b      	lsls	r3, r3, #2
    6bac:	189b      	adds	r3, r3, r2
    6bae:	005b      	lsls	r3, r3, #1
    6bb0:	18cb      	adds	r3, r1, r3
    6bb2:	3310      	adds	r3, #16
    6bb4:	2206      	movs	r2, #6
    6bb6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    6bb8:	2317      	movs	r3, #23
    6bba:	18fb      	adds	r3, r7, r3
    6bbc:	781a      	ldrb	r2, [r3, #0]
    6bbe:	2317      	movs	r3, #23
    6bc0:	18fb      	adds	r3, r7, r3
    6bc2:	3201      	adds	r2, #1
    6bc4:	701a      	strb	r2, [r3, #0]
    6bc6:	2317      	movs	r3, #23
    6bc8:	18fb      	adds	r3, r7, r3
    6bca:	781b      	ldrb	r3, [r3, #0]
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d0d4      	beq.n	6b7a <rtc_calendar_get_config_defaults+0x3e>
	}
}
    6bd0:	46c0      	nop			; (mov r8, r8)
    6bd2:	46bd      	mov	sp, r7
    6bd4:	b006      	add	sp, #24
    6bd6:	bd80      	pop	{r7, pc}
    6bd8:	00006aff 	.word	0x00006aff
    6bdc:	0000a6a9 	.word	0x0000a6a9

00006be0 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    6be0:	b580      	push	{r7, lr}
    6be2:	b088      	sub	sp, #32
    6be4:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    6be6:	230c      	movs	r3, #12
    6be8:	18fb      	adds	r3, r7, r3
    6bea:	0018      	movs	r0, r3
    6bec:	4b1a      	ldr	r3, [pc, #104]	; (6c58 <configure_rtc_calendar+0x78>)
    6bee:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    6bf0:	1d3b      	adds	r3, r7, #4
    6bf2:	0018      	movs	r0, r3
    6bf4:	4b19      	ldr	r3, [pc, #100]	; (6c5c <configure_rtc_calendar+0x7c>)
    6bf6:	4798      	blx	r3
	init_time.year   = 2014;
    6bf8:	1d3b      	adds	r3, r7, #4
    6bfa:	4a19      	ldr	r2, [pc, #100]	; (6c60 <configure_rtc_calendar+0x80>)
    6bfc:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    6bfe:	1d3b      	adds	r3, r7, #4
    6c00:	2201      	movs	r2, #1
    6c02:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    6c04:	1d3b      	adds	r3, r7, #4
    6c06:	2201      	movs	r2, #1
    6c08:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    6c0a:	1d3b      	adds	r3, r7, #4
    6c0c:	2200      	movs	r2, #0
    6c0e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    6c10:	1d3b      	adds	r3, r7, #4
    6c12:	2200      	movs	r2, #0
    6c14:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    6c16:	1d3b      	adds	r3, r7, #4
    6c18:	2204      	movs	r2, #4
    6c1a:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    6c1c:	230c      	movs	r3, #12
    6c1e:	18fb      	adds	r3, r7, r3
    6c20:	2201      	movs	r2, #1
    6c22:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    6c24:	230c      	movs	r3, #12
    6c26:	18fb      	adds	r3, r7, r3
    6c28:	1d3a      	adds	r2, r7, #4
    6c2a:	3308      	adds	r3, #8
    6c2c:	ca03      	ldmia	r2!, {r0, r1}
    6c2e:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    6c30:	230c      	movs	r3, #12
    6c32:	18fb      	adds	r3, r7, r3
    6c34:	2206      	movs	r2, #6
    6c36:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    6c38:	230c      	movs	r3, #12
    6c3a:	18fa      	adds	r2, r7, r3
    6c3c:	4909      	ldr	r1, [pc, #36]	; (6c64 <configure_rtc_calendar+0x84>)
    6c3e:	4b0a      	ldr	r3, [pc, #40]	; (6c68 <configure_rtc_calendar+0x88>)
    6c40:	0018      	movs	r0, r3
    6c42:	4b0a      	ldr	r3, [pc, #40]	; (6c6c <configure_rtc_calendar+0x8c>)
    6c44:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    6c46:	4b08      	ldr	r3, [pc, #32]	; (6c68 <configure_rtc_calendar+0x88>)
    6c48:	0018      	movs	r0, r3
    6c4a:	4b09      	ldr	r3, [pc, #36]	; (6c70 <configure_rtc_calendar+0x90>)
    6c4c:	4798      	blx	r3
}
    6c4e:	46c0      	nop			; (mov r8, r8)
    6c50:	46bd      	mov	sp, r7
    6c52:	b008      	add	sp, #32
    6c54:	bd80      	pop	{r7, pc}
    6c56:	46c0      	nop			; (mov r8, r8)
    6c58:	00006b3d 	.word	0x00006b3d
    6c5c:	00006aff 	.word	0x00006aff
    6c60:	000007de 	.word	0x000007de
    6c64:	40001400 	.word	0x40001400
    6c68:	200009fc 	.word	0x200009fc
    6c6c:	00003325 	.word	0x00003325
    6c70:	00003075 	.word	0x00003075

00006c74 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    6c74:	b590      	push	{r4, r7, lr}
    6c76:	b085      	sub	sp, #20
    6c78:	af00      	add	r7, sp, #0
    6c7a:	0002      	movs	r2, r0
    6c7c:	1dfb      	adds	r3, r7, #7
    6c7e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    6c80:	4b1a      	ldr	r3, [pc, #104]	; (6cec <disk_initialize+0x78>)
    6c82:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    6c84:	1dfb      	adds	r3, r7, #7
    6c86:	781b      	ldrb	r3, [r3, #0]
    6c88:	2b01      	cmp	r3, #1
    6c8a:	d901      	bls.n	6c90 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    6c8c:	2301      	movs	r3, #1
    6c8e:	e029      	b.n	6ce4 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    6c90:	2300      	movs	r3, #0
    6c92:	60fb      	str	r3, [r7, #12]
    6c94:	e010      	b.n	6cb8 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
    6c96:	230b      	movs	r3, #11
    6c98:	18fc      	adds	r4, r7, r3
    6c9a:	1dfb      	adds	r3, r7, #7
    6c9c:	781b      	ldrb	r3, [r3, #0]
    6c9e:	0018      	movs	r0, r3
    6ca0:	4b13      	ldr	r3, [pc, #76]	; (6cf0 <disk_initialize+0x7c>)
    6ca2:	4798      	blx	r3
    6ca4:	0003      	movs	r3, r0
    6ca6:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
    6ca8:	230b      	movs	r3, #11
    6caa:	18fb      	adds	r3, r7, r3
    6cac:	781b      	ldrb	r3, [r3, #0]
    6cae:	2b03      	cmp	r3, #3
    6cb0:	d106      	bne.n	6cc0 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
    6cb2:	68fb      	ldr	r3, [r7, #12]
    6cb4:	3301      	adds	r3, #1
    6cb6:	60fb      	str	r3, [r7, #12]
    6cb8:	68fb      	ldr	r3, [r7, #12]
    6cba:	2b01      	cmp	r3, #1
    6cbc:	ddeb      	ble.n	6c96 <disk_initialize+0x22>
    6cbe:	e000      	b.n	6cc2 <disk_initialize+0x4e>
			break;
    6cc0:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    6cc2:	230b      	movs	r3, #11
    6cc4:	18fb      	adds	r3, r7, r3
    6cc6:	781b      	ldrb	r3, [r3, #0]
    6cc8:	2b00      	cmp	r3, #0
    6cca:	d001      	beq.n	6cd0 <disk_initialize+0x5c>
		return STA_NOINIT;
    6ccc:	2301      	movs	r3, #1
    6cce:	e009      	b.n	6ce4 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    6cd0:	1dfb      	adds	r3, r7, #7
    6cd2:	781b      	ldrb	r3, [r3, #0]
    6cd4:	0018      	movs	r0, r3
    6cd6:	4b07      	ldr	r3, [pc, #28]	; (6cf4 <disk_initialize+0x80>)
    6cd8:	4798      	blx	r3
    6cda:	1e03      	subs	r3, r0, #0
    6cdc:	d001      	beq.n	6ce2 <disk_initialize+0x6e>
		return STA_PROTECT;
    6cde:	2304      	movs	r3, #4
    6ce0:	e000      	b.n	6ce4 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
    6ce2:	2300      	movs	r3, #0
}
    6ce4:	0018      	movs	r0, r3
    6ce6:	46bd      	mov	sp, r7
    6ce8:	b005      	add	sp, #20
    6cea:	bd90      	pop	{r4, r7, pc}
    6cec:	00006be1 	.word	0x00006be1
    6cf0:	00002d15 	.word	0x00002d15
    6cf4:	00002dcd 	.word	0x00002dcd

00006cf8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b082      	sub	sp, #8
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	0002      	movs	r2, r0
    6d00:	1dfb      	adds	r3, r7, #7
    6d02:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
    6d04:	1dfb      	adds	r3, r7, #7
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	0018      	movs	r0, r3
    6d0a:	4b08      	ldr	r3, [pc, #32]	; (6d2c <disk_status+0x34>)
    6d0c:	4798      	blx	r3
    6d0e:	1e03      	subs	r3, r0, #0
    6d10:	d002      	beq.n	6d18 <disk_status+0x20>
    6d12:	2b02      	cmp	r3, #2
    6d14:	d002      	beq.n	6d1c <disk_status+0x24>
    6d16:	e003      	b.n	6d20 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
    6d18:	2300      	movs	r3, #0
    6d1a:	e002      	b.n	6d22 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    6d1c:	2303      	movs	r3, #3
    6d1e:	e000      	b.n	6d22 <disk_status+0x2a>
	default:
		return STA_NOINIT;
    6d20:	2301      	movs	r3, #1
	}
}
    6d22:	0018      	movs	r0, r3
    6d24:	46bd      	mov	sp, r7
    6d26:	b002      	add	sp, #8
    6d28:	bd80      	pop	{r7, pc}
    6d2a:	46c0      	nop			; (mov r8, r8)
    6d2c:	00002d15 	.word	0x00002d15

00006d30 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    6d30:	b590      	push	{r4, r7, lr}
    6d32:	b089      	sub	sp, #36	; 0x24
    6d34:	af00      	add	r7, sp, #0
    6d36:	60b9      	str	r1, [r7, #8]
    6d38:	607a      	str	r2, [r7, #4]
    6d3a:	0019      	movs	r1, r3
    6d3c:	230f      	movs	r3, #15
    6d3e:	18fb      	adds	r3, r7, r3
    6d40:	1c02      	adds	r2, r0, #0
    6d42:	701a      	strb	r2, [r3, #0]
    6d44:	230e      	movs	r3, #14
    6d46:	18fb      	adds	r3, r7, r3
    6d48:	1c0a      	adds	r2, r1, #0
    6d4a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6d4c:	231b      	movs	r3, #27
    6d4e:	18fc      	adds	r4, r7, r3
    6d50:	230f      	movs	r3, #15
    6d52:	18fb      	adds	r3, r7, r3
    6d54:	781b      	ldrb	r3, [r3, #0]
    6d56:	0018      	movs	r0, r3
    6d58:	4b28      	ldr	r3, [pc, #160]	; (6dfc <disk_read+0xcc>)
    6d5a:	4798      	blx	r3
    6d5c:	0003      	movs	r3, r0
    6d5e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    6d60:	231b      	movs	r3, #27
    6d62:	18fb      	adds	r3, r7, r3
    6d64:	781b      	ldrb	r3, [r3, #0]
    6d66:	2b00      	cmp	r3, #0
    6d68:	d101      	bne.n	6d6e <disk_read+0x3e>
		return RES_ERROR;
    6d6a:	2301      	movs	r3, #1
    6d6c:	e042      	b.n	6df4 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    6d6e:	2314      	movs	r3, #20
    6d70:	18fa      	adds	r2, r7, r3
    6d72:	230f      	movs	r3, #15
    6d74:	18fb      	adds	r3, r7, r3
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	0011      	movs	r1, r2
    6d7a:	0018      	movs	r0, r3
    6d7c:	4b20      	ldr	r3, [pc, #128]	; (6e00 <disk_read+0xd0>)
    6d7e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    6d80:	230e      	movs	r3, #14
    6d82:	18fb      	adds	r3, r7, r3
    6d84:	781b      	ldrb	r3, [r3, #0]
    6d86:	221b      	movs	r2, #27
    6d88:	18ba      	adds	r2, r7, r2
    6d8a:	7812      	ldrb	r2, [r2, #0]
    6d8c:	4353      	muls	r3, r2
    6d8e:	001a      	movs	r2, r3
    6d90:	687b      	ldr	r3, [r7, #4]
    6d92:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6d94:	697b      	ldr	r3, [r7, #20]
    6d96:	3301      	adds	r3, #1
    6d98:	211b      	movs	r1, #27
    6d9a:	1879      	adds	r1, r7, r1
    6d9c:	7809      	ldrb	r1, [r1, #0]
    6d9e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    6da0:	429a      	cmp	r2, r3
    6da2:	d901      	bls.n	6da8 <disk_read+0x78>
		return RES_PARERR;
    6da4:	2304      	movs	r3, #4
    6da6:	e025      	b.n	6df4 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    6da8:	2300      	movs	r3, #0
    6daa:	61fb      	str	r3, [r7, #28]
    6dac:	e01b      	b.n	6de6 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6dae:	231b      	movs	r3, #27
    6db0:	18fb      	adds	r3, r7, r3
    6db2:	781b      	ldrb	r3, [r3, #0]
    6db4:	69fa      	ldr	r2, [r7, #28]
    6db6:	435a      	muls	r2, r3
    6db8:	687b      	ldr	r3, [r7, #4]
    6dba:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    6dbc:	231b      	movs	r3, #27
    6dbe:	18fb      	adds	r3, r7, r3
    6dc0:	781b      	ldrb	r3, [r3, #0]
    6dc2:	69fa      	ldr	r2, [r7, #28]
    6dc4:	4353      	muls	r3, r2
    6dc6:	025b      	lsls	r3, r3, #9
    6dc8:	68ba      	ldr	r2, [r7, #8]
    6dca:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    6dcc:	230f      	movs	r3, #15
    6dce:	18fb      	adds	r3, r7, r3
    6dd0:	781b      	ldrb	r3, [r3, #0]
    6dd2:	0018      	movs	r0, r3
    6dd4:	4b0b      	ldr	r3, [pc, #44]	; (6e04 <disk_read+0xd4>)
    6dd6:	4798      	blx	r3
    6dd8:	1e03      	subs	r3, r0, #0
    6dda:	d001      	beq.n	6de0 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    6ddc:	2301      	movs	r3, #1
    6dde:	e009      	b.n	6df4 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
    6de0:	69fb      	ldr	r3, [r7, #28]
    6de2:	3301      	adds	r3, #1
    6de4:	61fb      	str	r3, [r7, #28]
    6de6:	230e      	movs	r3, #14
    6de8:	18fb      	adds	r3, r7, r3
    6dea:	781a      	ldrb	r2, [r3, #0]
    6dec:	69fb      	ldr	r3, [r7, #28]
    6dee:	429a      	cmp	r2, r3
    6df0:	d8dd      	bhi.n	6dae <disk_read+0x7e>
		}
	}

	return RES_OK;
    6df2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    6df4:	0018      	movs	r0, r3
    6df6:	46bd      	mov	sp, r7
    6df8:	b009      	add	sp, #36	; 0x24
    6dfa:	bd90      	pop	{r4, r7, pc}
    6dfc:	00002da1 	.word	0x00002da1
    6e00:	00002d55 	.word	0x00002d55
    6e04:	00002e15 	.word	0x00002e15

00006e08 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    6e08:	b590      	push	{r4, r7, lr}
    6e0a:	b089      	sub	sp, #36	; 0x24
    6e0c:	af00      	add	r7, sp, #0
    6e0e:	60b9      	str	r1, [r7, #8]
    6e10:	607a      	str	r2, [r7, #4]
    6e12:	0019      	movs	r1, r3
    6e14:	230f      	movs	r3, #15
    6e16:	18fb      	adds	r3, r7, r3
    6e18:	1c02      	adds	r2, r0, #0
    6e1a:	701a      	strb	r2, [r3, #0]
    6e1c:	230e      	movs	r3, #14
    6e1e:	18fb      	adds	r3, r7, r3
    6e20:	1c0a      	adds	r2, r1, #0
    6e22:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    6e24:	231b      	movs	r3, #27
    6e26:	18fc      	adds	r4, r7, r3
    6e28:	230f      	movs	r3, #15
    6e2a:	18fb      	adds	r3, r7, r3
    6e2c:	781b      	ldrb	r3, [r3, #0]
    6e2e:	0018      	movs	r0, r3
    6e30:	4b28      	ldr	r3, [pc, #160]	; (6ed4 <disk_write+0xcc>)
    6e32:	4798      	blx	r3
    6e34:	0003      	movs	r3, r0
    6e36:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    6e38:	231b      	movs	r3, #27
    6e3a:	18fb      	adds	r3, r7, r3
    6e3c:	781b      	ldrb	r3, [r3, #0]
    6e3e:	2b00      	cmp	r3, #0
    6e40:	d101      	bne.n	6e46 <disk_write+0x3e>
		return RES_ERROR;
    6e42:	2301      	movs	r3, #1
    6e44:	e042      	b.n	6ecc <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    6e46:	2314      	movs	r3, #20
    6e48:	18fa      	adds	r2, r7, r3
    6e4a:	230f      	movs	r3, #15
    6e4c:	18fb      	adds	r3, r7, r3
    6e4e:	781b      	ldrb	r3, [r3, #0]
    6e50:	0011      	movs	r1, r2
    6e52:	0018      	movs	r0, r3
    6e54:	4b20      	ldr	r3, [pc, #128]	; (6ed8 <disk_write+0xd0>)
    6e56:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    6e58:	230e      	movs	r3, #14
    6e5a:	18fb      	adds	r3, r7, r3
    6e5c:	781b      	ldrb	r3, [r3, #0]
    6e5e:	221b      	movs	r2, #27
    6e60:	18ba      	adds	r2, r7, r2
    6e62:	7812      	ldrb	r2, [r2, #0]
    6e64:	4353      	muls	r3, r2
    6e66:	001a      	movs	r2, r3
    6e68:	687b      	ldr	r3, [r7, #4]
    6e6a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    6e6c:	697b      	ldr	r3, [r7, #20]
    6e6e:	3301      	adds	r3, #1
    6e70:	211b      	movs	r1, #27
    6e72:	1879      	adds	r1, r7, r1
    6e74:	7809      	ldrb	r1, [r1, #0]
    6e76:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    6e78:	429a      	cmp	r2, r3
    6e7a:	d901      	bls.n	6e80 <disk_write+0x78>
		return RES_PARERR;
    6e7c:	2304      	movs	r3, #4
    6e7e:	e025      	b.n	6ecc <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    6e80:	2300      	movs	r3, #0
    6e82:	61fb      	str	r3, [r7, #28]
    6e84:	e01b      	b.n	6ebe <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6e86:	231b      	movs	r3, #27
    6e88:	18fb      	adds	r3, r7, r3
    6e8a:	781b      	ldrb	r3, [r3, #0]
    6e8c:	69fa      	ldr	r2, [r7, #28]
    6e8e:	435a      	muls	r2, r3
    6e90:	687b      	ldr	r3, [r7, #4]
    6e92:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    6e94:	231b      	movs	r3, #27
    6e96:	18fb      	adds	r3, r7, r3
    6e98:	781b      	ldrb	r3, [r3, #0]
    6e9a:	69fa      	ldr	r2, [r7, #28]
    6e9c:	4353      	muls	r3, r2
    6e9e:	025b      	lsls	r3, r3, #9
    6ea0:	68ba      	ldr	r2, [r7, #8]
    6ea2:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    6ea4:	230f      	movs	r3, #15
    6ea6:	18fb      	adds	r3, r7, r3
    6ea8:	781b      	ldrb	r3, [r3, #0]
    6eaa:	0018      	movs	r0, r3
    6eac:	4b0b      	ldr	r3, [pc, #44]	; (6edc <disk_write+0xd4>)
    6eae:	4798      	blx	r3
    6eb0:	1e03      	subs	r3, r0, #0
    6eb2:	d001      	beq.n	6eb8 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
    6eb4:	2301      	movs	r3, #1
    6eb6:	e009      	b.n	6ecc <disk_write+0xc4>
	for (i = 0; i < count; i++) {
    6eb8:	69fb      	ldr	r3, [r7, #28]
    6eba:	3301      	adds	r3, #1
    6ebc:	61fb      	str	r3, [r7, #28]
    6ebe:	230e      	movs	r3, #14
    6ec0:	18fb      	adds	r3, r7, r3
    6ec2:	781a      	ldrb	r2, [r3, #0]
    6ec4:	69fb      	ldr	r3, [r7, #28]
    6ec6:	429a      	cmp	r2, r3
    6ec8:	d8dd      	bhi.n	6e86 <disk_write+0x7e>
		}
	}

	return RES_OK;
    6eca:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    6ecc:	0018      	movs	r0, r3
    6ece:	46bd      	mov	sp, r7
    6ed0:	b009      	add	sp, #36	; 0x24
    6ed2:	bd90      	pop	{r4, r7, pc}
    6ed4:	00002da1 	.word	0x00002da1
    6ed8:	00002d55 	.word	0x00002d55
    6edc:	00002e69 	.word	0x00002e69

00006ee0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    6ee0:	b590      	push	{r4, r7, lr}
    6ee2:	b085      	sub	sp, #20
    6ee4:	af00      	add	r7, sp, #0
    6ee6:	603a      	str	r2, [r7, #0]
    6ee8:	1dfb      	adds	r3, r7, #7
    6eea:	1c02      	adds	r2, r0, #0
    6eec:	701a      	strb	r2, [r3, #0]
    6eee:	1dbb      	adds	r3, r7, #6
    6ef0:	1c0a      	adds	r2, r1, #0
    6ef2:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
    6ef4:	230f      	movs	r3, #15
    6ef6:	18fb      	adds	r3, r7, r3
    6ef8:	2204      	movs	r2, #4
    6efa:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
    6efc:	1dbb      	adds	r3, r7, #6
    6efe:	781b      	ldrb	r3, [r3, #0]
    6f00:	2b01      	cmp	r3, #1
    6f02:	d00f      	beq.n	6f24 <disk_ioctl+0x44>
    6f04:	dc02      	bgt.n	6f0c <disk_ioctl+0x2c>
    6f06:	2b00      	cmp	r3, #0
    6f08:	d044      	beq.n	6f94 <disk_ioctl+0xb4>
    6f0a:	e054      	b.n	6fb6 <disk_ioctl+0xd6>
    6f0c:	2b02      	cmp	r3, #2
    6f0e:	d01a      	beq.n	6f46 <disk_ioctl+0x66>
    6f10:	2b03      	cmp	r3, #3
    6f12:	d150      	bne.n	6fb6 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    6f14:	683b      	ldr	r3, [r7, #0]
    6f16:	2201      	movs	r2, #1
    6f18:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    6f1a:	230f      	movs	r3, #15
    6f1c:	18fb      	adds	r3, r7, r3
    6f1e:	2200      	movs	r2, #0
    6f20:	701a      	strb	r2, [r3, #0]
		break;
    6f22:	e04c      	b.n	6fbe <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    6f24:	2308      	movs	r3, #8
    6f26:	18fa      	adds	r2, r7, r3
    6f28:	1dfb      	adds	r3, r7, #7
    6f2a:	781b      	ldrb	r3, [r3, #0]
    6f2c:	0011      	movs	r1, r2
    6f2e:	0018      	movs	r0, r3
    6f30:	4b26      	ldr	r3, [pc, #152]	; (6fcc <disk_ioctl+0xec>)
    6f32:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    6f34:	68bb      	ldr	r3, [r7, #8]
    6f36:	1c5a      	adds	r2, r3, #1
    6f38:	683b      	ldr	r3, [r7, #0]
    6f3a:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    6f3c:	230f      	movs	r3, #15
    6f3e:	18fb      	adds	r3, r7, r3
    6f40:	2200      	movs	r2, #0
    6f42:	701a      	strb	r2, [r3, #0]
	}
	break;
    6f44:	e03b      	b.n	6fbe <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    6f46:	230e      	movs	r3, #14
    6f48:	18fc      	adds	r4, r7, r3
    6f4a:	1dfb      	adds	r3, r7, #7
    6f4c:	781b      	ldrb	r3, [r3, #0]
    6f4e:	0018      	movs	r0, r3
    6f50:	4b1f      	ldr	r3, [pc, #124]	; (6fd0 <disk_ioctl+0xf0>)
    6f52:	4798      	blx	r3
    6f54:	0003      	movs	r3, r0
    6f56:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    6f58:	230e      	movs	r3, #14
    6f5a:	18fb      	adds	r3, r7, r3
    6f5c:	781b      	ldrb	r3, [r3, #0]
    6f5e:	2b01      	cmp	r3, #1
    6f60:	d010      	beq.n	6f84 <disk_ioctl+0xa4>
    6f62:	230e      	movs	r3, #14
    6f64:	18fb      	adds	r3, r7, r3
    6f66:	781b      	ldrb	r3, [r3, #0]
    6f68:	2b02      	cmp	r3, #2
    6f6a:	d00b      	beq.n	6f84 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    6f6c:	230e      	movs	r3, #14
    6f6e:	18fb      	adds	r3, r7, r3
    6f70:	781b      	ldrb	r3, [r3, #0]
    6f72:	2b04      	cmp	r3, #4
    6f74:	d006      	beq.n	6f84 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    6f76:	230e      	movs	r3, #14
    6f78:	18fb      	adds	r3, r7, r3
    6f7a:	781b      	ldrb	r3, [r3, #0]
    6f7c:	2b08      	cmp	r3, #8
    6f7e:	d001      	beq.n	6f84 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    6f80:	2301      	movs	r3, #1
    6f82:	e01f      	b.n	6fc4 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    6f84:	683b      	ldr	r3, [r7, #0]
    6f86:	2200      	movs	r2, #0
    6f88:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    6f8a:	230f      	movs	r3, #15
    6f8c:	18fb      	adds	r3, r7, r3
    6f8e:	2200      	movs	r2, #0
    6f90:	701a      	strb	r2, [r3, #0]
	}
	break;
    6f92:	e014      	b.n	6fbe <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    6f94:	1dfb      	adds	r3, r7, #7
    6f96:	781b      	ldrb	r3, [r3, #0]
    6f98:	0018      	movs	r0, r3
    6f9a:	4b0e      	ldr	r3, [pc, #56]	; (6fd4 <disk_ioctl+0xf4>)
    6f9c:	4798      	blx	r3
    6f9e:	1e03      	subs	r3, r0, #0
    6fa0:	d104      	bne.n	6fac <disk_ioctl+0xcc>
			res = RES_OK;
    6fa2:	230f      	movs	r3, #15
    6fa4:	18fb      	adds	r3, r7, r3
    6fa6:	2200      	movs	r2, #0
    6fa8:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    6faa:	e008      	b.n	6fbe <disk_ioctl+0xde>
			res = RES_NOTRDY;
    6fac:	230f      	movs	r3, #15
    6fae:	18fb      	adds	r3, r7, r3
    6fb0:	2203      	movs	r2, #3
    6fb2:	701a      	strb	r2, [r3, #0]
		break;
    6fb4:	e003      	b.n	6fbe <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
    6fb6:	230f      	movs	r3, #15
    6fb8:	18fb      	adds	r3, r7, r3
    6fba:	2204      	movs	r2, #4
    6fbc:	701a      	strb	r2, [r3, #0]
	}

	return res;
    6fbe:	230f      	movs	r3, #15
    6fc0:	18fb      	adds	r3, r7, r3
    6fc2:	781b      	ldrb	r3, [r3, #0]
}
    6fc4:	0018      	movs	r0, r3
    6fc6:	46bd      	mov	sp, r7
    6fc8:	b005      	add	sp, #20
    6fca:	bd90      	pop	{r4, r7, pc}
    6fcc:	00002d55 	.word	0x00002d55
    6fd0:	00002da1 	.word	0x00002da1
    6fd4:	00002d15 	.word	0x00002d15

00006fd8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
    6fd8:	b580      	push	{r7, lr}
    6fda:	b084      	sub	sp, #16
    6fdc:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
    6fde:	1d3a      	adds	r2, r7, #4
    6fe0:	4b12      	ldr	r3, [pc, #72]	; (702c <get_fattime+0x54>)
    6fe2:	0011      	movs	r1, r2
    6fe4:	0018      	movs	r0, r3
    6fe6:	4b12      	ldr	r3, [pc, #72]	; (7030 <get_fattime+0x58>)
    6fe8:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
    6fea:	1d3b      	adds	r3, r7, #4
    6fec:	88db      	ldrh	r3, [r3, #6]
    6fee:	4a11      	ldr	r2, [pc, #68]	; (7034 <get_fattime+0x5c>)
    6ff0:	4694      	mov	ip, r2
    6ff2:	4463      	add	r3, ip
    6ff4:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
    6ff6:	1d3b      	adds	r3, r7, #4
    6ff8:	795b      	ldrb	r3, [r3, #5]
    6ffa:	055b      	lsls	r3, r3, #21
    6ffc:	431a      	orrs	r2, r3
			| (current_time.day << 16)
    6ffe:	1d3b      	adds	r3, r7, #4
    7000:	791b      	ldrb	r3, [r3, #4]
    7002:	041b      	lsls	r3, r3, #16
    7004:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
    7006:	1d3b      	adds	r3, r7, #4
    7008:	789b      	ldrb	r3, [r3, #2]
    700a:	02db      	lsls	r3, r3, #11
    700c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
    700e:	1d3b      	adds	r3, r7, #4
    7010:	785b      	ldrb	r3, [r3, #1]
    7012:	015b      	lsls	r3, r3, #5
    7014:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
    7016:	1d3a      	adds	r2, r7, #4
    7018:	7812      	ldrb	r2, [r2, #0]
    701a:	0852      	lsrs	r2, r2, #1
    701c:	b2d2      	uxtb	r2, r2
    701e:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
    7020:	60fb      	str	r3, [r7, #12]

	return ul_time;
    7022:	68fb      	ldr	r3, [r7, #12]
}
    7024:	0018      	movs	r0, r3
    7026:	46bd      	mov	sp, r7
    7028:	b004      	add	sp, #16
    702a:	bd80      	pop	{r7, pc}
    702c:	200009fc 	.word	0x200009fc
    7030:	000033b9 	.word	0x000033b9
    7034:	fffff844 	.word	0xfffff844

00007038 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    7038:	b580      	push	{r7, lr}
    703a:	b086      	sub	sp, #24
    703c:	af00      	add	r7, sp, #0
    703e:	60f8      	str	r0, [r7, #12]
    7040:	60b9      	str	r1, [r7, #8]
    7042:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    7044:	68fb      	ldr	r3, [r7, #12]
    7046:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    7048:	68bb      	ldr	r3, [r7, #8]
    704a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    704c:	e007      	b.n	705e <mem_cpy+0x26>
		*d++ = *s++;
    704e:	697b      	ldr	r3, [r7, #20]
    7050:	1c5a      	adds	r2, r3, #1
    7052:	617a      	str	r2, [r7, #20]
    7054:	693a      	ldr	r2, [r7, #16]
    7056:	1c51      	adds	r1, r2, #1
    7058:	6139      	str	r1, [r7, #16]
    705a:	7812      	ldrb	r2, [r2, #0]
    705c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    705e:	687b      	ldr	r3, [r7, #4]
    7060:	1e5a      	subs	r2, r3, #1
    7062:	607a      	str	r2, [r7, #4]
    7064:	2b00      	cmp	r3, #0
    7066:	d1f2      	bne.n	704e <mem_cpy+0x16>
}
    7068:	46c0      	nop			; (mov r8, r8)
    706a:	46bd      	mov	sp, r7
    706c:	b006      	add	sp, #24
    706e:	bd80      	pop	{r7, pc}

00007070 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    7070:	b580      	push	{r7, lr}
    7072:	b086      	sub	sp, #24
    7074:	af00      	add	r7, sp, #0
    7076:	60f8      	str	r0, [r7, #12]
    7078:	60b9      	str	r1, [r7, #8]
    707a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    707c:	68fb      	ldr	r3, [r7, #12]
    707e:	617b      	str	r3, [r7, #20]

	while (cnt--)
    7080:	e005      	b.n	708e <mem_set+0x1e>
		*d++ = (BYTE)val;
    7082:	697b      	ldr	r3, [r7, #20]
    7084:	1c5a      	adds	r2, r3, #1
    7086:	617a      	str	r2, [r7, #20]
    7088:	68ba      	ldr	r2, [r7, #8]
    708a:	b2d2      	uxtb	r2, r2
    708c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    708e:	687b      	ldr	r3, [r7, #4]
    7090:	1e5a      	subs	r2, r3, #1
    7092:	607a      	str	r2, [r7, #4]
    7094:	2b00      	cmp	r3, #0
    7096:	d1f4      	bne.n	7082 <mem_set+0x12>
}
    7098:	46c0      	nop			; (mov r8, r8)
    709a:	46bd      	mov	sp, r7
    709c:	b006      	add	sp, #24
    709e:	bd80      	pop	{r7, pc}

000070a0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    70a0:	b580      	push	{r7, lr}
    70a2:	b088      	sub	sp, #32
    70a4:	af00      	add	r7, sp, #0
    70a6:	60f8      	str	r0, [r7, #12]
    70a8:	60b9      	str	r1, [r7, #8]
    70aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    70ac:	68fb      	ldr	r3, [r7, #12]
    70ae:	61fb      	str	r3, [r7, #28]
    70b0:	68bb      	ldr	r3, [r7, #8]
    70b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
    70b4:	2300      	movs	r3, #0
    70b6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    70b8:	46c0      	nop			; (mov r8, r8)
    70ba:	687b      	ldr	r3, [r7, #4]
    70bc:	1e5a      	subs	r2, r3, #1
    70be:	607a      	str	r2, [r7, #4]
    70c0:	2b00      	cmp	r3, #0
    70c2:	d00d      	beq.n	70e0 <mem_cmp+0x40>
    70c4:	69fb      	ldr	r3, [r7, #28]
    70c6:	1c5a      	adds	r2, r3, #1
    70c8:	61fa      	str	r2, [r7, #28]
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	0019      	movs	r1, r3
    70ce:	69bb      	ldr	r3, [r7, #24]
    70d0:	1c5a      	adds	r2, r3, #1
    70d2:	61ba      	str	r2, [r7, #24]
    70d4:	781b      	ldrb	r3, [r3, #0]
    70d6:	1acb      	subs	r3, r1, r3
    70d8:	617b      	str	r3, [r7, #20]
    70da:	697b      	ldr	r3, [r7, #20]
    70dc:	2b00      	cmp	r3, #0
    70de:	d0ec      	beq.n	70ba <mem_cmp+0x1a>
	return r;
    70e0:	697b      	ldr	r3, [r7, #20]
}
    70e2:	0018      	movs	r0, r3
    70e4:	46bd      	mov	sp, r7
    70e6:	b008      	add	sp, #32
    70e8:	bd80      	pop	{r7, pc}

000070ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    70ea:	b580      	push	{r7, lr}
    70ec:	b082      	sub	sp, #8
    70ee:	af00      	add	r7, sp, #0
    70f0:	6078      	str	r0, [r7, #4]
    70f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    70f4:	e002      	b.n	70fc <chk_chr+0x12>
    70f6:	687b      	ldr	r3, [r7, #4]
    70f8:	3301      	adds	r3, #1
    70fa:	607b      	str	r3, [r7, #4]
    70fc:	687b      	ldr	r3, [r7, #4]
    70fe:	781b      	ldrb	r3, [r3, #0]
    7100:	2b00      	cmp	r3, #0
    7102:	d005      	beq.n	7110 <chk_chr+0x26>
    7104:	687b      	ldr	r3, [r7, #4]
    7106:	781b      	ldrb	r3, [r3, #0]
    7108:	001a      	movs	r2, r3
    710a:	683b      	ldr	r3, [r7, #0]
    710c:	429a      	cmp	r2, r3
    710e:	d1f2      	bne.n	70f6 <chk_chr+0xc>
	return *str;
    7110:	687b      	ldr	r3, [r7, #4]
    7112:	781b      	ldrb	r3, [r3, #0]
}
    7114:	0018      	movs	r0, r3
    7116:	46bd      	mov	sp, r7
    7118:	b002      	add	sp, #8
    711a:	bd80      	pop	{r7, pc}

0000711c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    711c:	b590      	push	{r4, r7, lr}
    711e:	b085      	sub	sp, #20
    7120:	af00      	add	r7, sp, #0
    7122:	6078      	str	r0, [r7, #4]
    7124:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
    7126:	687b      	ldr	r3, [r7, #4]
    7128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    712a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    712c:	68fa      	ldr	r2, [r7, #12]
    712e:	683b      	ldr	r3, [r7, #0]
    7130:	429a      	cmp	r2, r3
    7132:	d04e      	beq.n	71d2 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    7134:	687b      	ldr	r3, [r7, #4]
    7136:	791b      	ldrb	r3, [r3, #4]
    7138:	2b00      	cmp	r3, #0
    713a:	d037      	beq.n	71ac <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    713c:	687b      	ldr	r3, [r7, #4]
    713e:	7858      	ldrb	r0, [r3, #1]
    7140:	687b      	ldr	r3, [r7, #4]
    7142:	3330      	adds	r3, #48	; 0x30
    7144:	0019      	movs	r1, r3
    7146:	68fa      	ldr	r2, [r7, #12]
    7148:	2301      	movs	r3, #1
    714a:	4c24      	ldr	r4, [pc, #144]	; (71dc <move_window+0xc0>)
    714c:	47a0      	blx	r4
    714e:	1e03      	subs	r3, r0, #0
    7150:	d001      	beq.n	7156 <move_window+0x3a>
				return FR_DISK_ERR;
    7152:	2301      	movs	r3, #1
    7154:	e03e      	b.n	71d4 <move_window+0xb8>
			fs->wflag = 0;
    7156:	687b      	ldr	r3, [r7, #4]
    7158:	2200      	movs	r2, #0
    715a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	6a1a      	ldr	r2, [r3, #32]
    7160:	687b      	ldr	r3, [r7, #4]
    7162:	69db      	ldr	r3, [r3, #28]
    7164:	18d2      	adds	r2, r2, r3
    7166:	68fb      	ldr	r3, [r7, #12]
    7168:	429a      	cmp	r2, r3
    716a:	d91f      	bls.n	71ac <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    716c:	230b      	movs	r3, #11
    716e:	18fb      	adds	r3, r7, r3
    7170:	687a      	ldr	r2, [r7, #4]
    7172:	78d2      	ldrb	r2, [r2, #3]
    7174:	701a      	strb	r2, [r3, #0]
    7176:	e014      	b.n	71a2 <move_window+0x86>
					wsect += fs->fsize;
    7178:	687b      	ldr	r3, [r7, #4]
    717a:	69db      	ldr	r3, [r3, #28]
    717c:	68fa      	ldr	r2, [r7, #12]
    717e:	18d3      	adds	r3, r2, r3
    7180:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	7858      	ldrb	r0, [r3, #1]
    7186:	687b      	ldr	r3, [r7, #4]
    7188:	3330      	adds	r3, #48	; 0x30
    718a:	0019      	movs	r1, r3
    718c:	68fa      	ldr	r2, [r7, #12]
    718e:	2301      	movs	r3, #1
    7190:	4c12      	ldr	r4, [pc, #72]	; (71dc <move_window+0xc0>)
    7192:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    7194:	230b      	movs	r3, #11
    7196:	18fb      	adds	r3, r7, r3
    7198:	781a      	ldrb	r2, [r3, #0]
    719a:	230b      	movs	r3, #11
    719c:	18fb      	adds	r3, r7, r3
    719e:	3a01      	subs	r2, #1
    71a0:	701a      	strb	r2, [r3, #0]
    71a2:	230b      	movs	r3, #11
    71a4:	18fb      	adds	r3, r7, r3
    71a6:	781b      	ldrb	r3, [r3, #0]
    71a8:	2b01      	cmp	r3, #1
    71aa:	d8e5      	bhi.n	7178 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
    71ac:	683b      	ldr	r3, [r7, #0]
    71ae:	2b00      	cmp	r3, #0
    71b0:	d00f      	beq.n	71d2 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    71b2:	687b      	ldr	r3, [r7, #4]
    71b4:	7858      	ldrb	r0, [r3, #1]
    71b6:	687b      	ldr	r3, [r7, #4]
    71b8:	3330      	adds	r3, #48	; 0x30
    71ba:	0019      	movs	r1, r3
    71bc:	683a      	ldr	r2, [r7, #0]
    71be:	2301      	movs	r3, #1
    71c0:	4c07      	ldr	r4, [pc, #28]	; (71e0 <move_window+0xc4>)
    71c2:	47a0      	blx	r4
    71c4:	1e03      	subs	r3, r0, #0
    71c6:	d001      	beq.n	71cc <move_window+0xb0>
				return FR_DISK_ERR;
    71c8:	2301      	movs	r3, #1
    71ca:	e003      	b.n	71d4 <move_window+0xb8>
			fs->winsect = sector;
    71cc:	687b      	ldr	r3, [r7, #4]
    71ce:	683a      	ldr	r2, [r7, #0]
    71d0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    71d2:	2300      	movs	r3, #0
}
    71d4:	0018      	movs	r0, r3
    71d6:	46bd      	mov	sp, r7
    71d8:	b005      	add	sp, #20
    71da:	bd90      	pop	{r4, r7, pc}
    71dc:	00006e09 	.word	0x00006e09
    71e0:	00006d31 	.word	0x00006d31

000071e4 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    71e4:	b590      	push	{r4, r7, lr}
    71e6:	b085      	sub	sp, #20
    71e8:	af00      	add	r7, sp, #0
    71ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
    71ec:	230f      	movs	r3, #15
    71ee:	18fc      	adds	r4, r7, r3
    71f0:	687b      	ldr	r3, [r7, #4]
    71f2:	2100      	movs	r1, #0
    71f4:	0018      	movs	r0, r3
    71f6:	4b52      	ldr	r3, [pc, #328]	; (7340 <sync+0x15c>)
    71f8:	4798      	blx	r3
    71fa:	0003      	movs	r3, r0
    71fc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    71fe:	230f      	movs	r3, #15
    7200:	18fb      	adds	r3, r7, r3
    7202:	781b      	ldrb	r3, [r3, #0]
    7204:	2b00      	cmp	r3, #0
    7206:	d000      	beq.n	720a <sync+0x26>
    7208:	e093      	b.n	7332 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    720a:	687b      	ldr	r3, [r7, #4]
    720c:	781b      	ldrb	r3, [r3, #0]
    720e:	2b03      	cmp	r3, #3
    7210:	d000      	beq.n	7214 <sync+0x30>
    7212:	e081      	b.n	7318 <sync+0x134>
    7214:	687b      	ldr	r3, [r7, #4]
    7216:	795b      	ldrb	r3, [r3, #5]
    7218:	2b00      	cmp	r3, #0
    721a:	d07d      	beq.n	7318 <sync+0x134>
			fs->winsect = 0;
    721c:	687b      	ldr	r3, [r7, #4]
    721e:	2200      	movs	r2, #0
    7220:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    7222:	687b      	ldr	r3, [r7, #4]
    7224:	3330      	adds	r3, #48	; 0x30
    7226:	0018      	movs	r0, r3
    7228:	2380      	movs	r3, #128	; 0x80
    722a:	009b      	lsls	r3, r3, #2
    722c:	001a      	movs	r2, r3
    722e:	2100      	movs	r1, #0
    7230:	4b44      	ldr	r3, [pc, #272]	; (7344 <sync+0x160>)
    7232:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    7234:	687b      	ldr	r3, [r7, #4]
    7236:	4a44      	ldr	r2, [pc, #272]	; (7348 <sync+0x164>)
    7238:	2155      	movs	r1, #85	; 0x55
    723a:	5499      	strb	r1, [r3, r2]
    723c:	687b      	ldr	r3, [r7, #4]
    723e:	4a43      	ldr	r2, [pc, #268]	; (734c <sync+0x168>)
    7240:	21aa      	movs	r1, #170	; 0xaa
    7242:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    7244:	687b      	ldr	r3, [r7, #4]
    7246:	2230      	movs	r2, #48	; 0x30
    7248:	2152      	movs	r1, #82	; 0x52
    724a:	5499      	strb	r1, [r3, r2]
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	2231      	movs	r2, #49	; 0x31
    7250:	2152      	movs	r1, #82	; 0x52
    7252:	5499      	strb	r1, [r3, r2]
    7254:	687b      	ldr	r3, [r7, #4]
    7256:	2232      	movs	r2, #50	; 0x32
    7258:	2161      	movs	r1, #97	; 0x61
    725a:	5499      	strb	r1, [r3, r2]
    725c:	687b      	ldr	r3, [r7, #4]
    725e:	2233      	movs	r2, #51	; 0x33
    7260:	2141      	movs	r1, #65	; 0x41
    7262:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    7264:	687a      	ldr	r2, [r7, #4]
    7266:	2385      	movs	r3, #133	; 0x85
    7268:	009b      	lsls	r3, r3, #2
    726a:	2172      	movs	r1, #114	; 0x72
    726c:	54d1      	strb	r1, [r2, r3]
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	4a37      	ldr	r2, [pc, #220]	; (7350 <sync+0x16c>)
    7272:	2172      	movs	r1, #114	; 0x72
    7274:	5499      	strb	r1, [r3, r2]
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	4a36      	ldr	r2, [pc, #216]	; (7354 <sync+0x170>)
    727a:	2141      	movs	r1, #65	; 0x41
    727c:	5499      	strb	r1, [r3, r2]
    727e:	687b      	ldr	r3, [r7, #4]
    7280:	4a35      	ldr	r2, [pc, #212]	; (7358 <sync+0x174>)
    7282:	2161      	movs	r1, #97	; 0x61
    7284:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    7286:	687b      	ldr	r3, [r7, #4]
    7288:	691b      	ldr	r3, [r3, #16]
    728a:	b2d9      	uxtb	r1, r3
    728c:	687a      	ldr	r2, [r7, #4]
    728e:	2386      	movs	r3, #134	; 0x86
    7290:	009b      	lsls	r3, r3, #2
    7292:	54d1      	strb	r1, [r2, r3]
    7294:	687b      	ldr	r3, [r7, #4]
    7296:	691b      	ldr	r3, [r3, #16]
    7298:	b29b      	uxth	r3, r3
    729a:	0a1b      	lsrs	r3, r3, #8
    729c:	b29b      	uxth	r3, r3
    729e:	b2d9      	uxtb	r1, r3
    72a0:	687b      	ldr	r3, [r7, #4]
    72a2:	4a2e      	ldr	r2, [pc, #184]	; (735c <sync+0x178>)
    72a4:	5499      	strb	r1, [r3, r2]
    72a6:	687b      	ldr	r3, [r7, #4]
    72a8:	691b      	ldr	r3, [r3, #16]
    72aa:	0c1b      	lsrs	r3, r3, #16
    72ac:	b2d9      	uxtb	r1, r3
    72ae:	687b      	ldr	r3, [r7, #4]
    72b0:	4a2b      	ldr	r2, [pc, #172]	; (7360 <sync+0x17c>)
    72b2:	5499      	strb	r1, [r3, r2]
    72b4:	687b      	ldr	r3, [r7, #4]
    72b6:	691b      	ldr	r3, [r3, #16]
    72b8:	0e1b      	lsrs	r3, r3, #24
    72ba:	b2d9      	uxtb	r1, r3
    72bc:	687b      	ldr	r3, [r7, #4]
    72be:	4a29      	ldr	r2, [pc, #164]	; (7364 <sync+0x180>)
    72c0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    72c2:	687b      	ldr	r3, [r7, #4]
    72c4:	68db      	ldr	r3, [r3, #12]
    72c6:	b2d9      	uxtb	r1, r3
    72c8:	687a      	ldr	r2, [r7, #4]
    72ca:	2387      	movs	r3, #135	; 0x87
    72cc:	009b      	lsls	r3, r3, #2
    72ce:	54d1      	strb	r1, [r2, r3]
    72d0:	687b      	ldr	r3, [r7, #4]
    72d2:	68db      	ldr	r3, [r3, #12]
    72d4:	b29b      	uxth	r3, r3
    72d6:	0a1b      	lsrs	r3, r3, #8
    72d8:	b29b      	uxth	r3, r3
    72da:	b2d9      	uxtb	r1, r3
    72dc:	687b      	ldr	r3, [r7, #4]
    72de:	4a22      	ldr	r2, [pc, #136]	; (7368 <sync+0x184>)
    72e0:	5499      	strb	r1, [r3, r2]
    72e2:	687b      	ldr	r3, [r7, #4]
    72e4:	68db      	ldr	r3, [r3, #12]
    72e6:	0c1b      	lsrs	r3, r3, #16
    72e8:	b2d9      	uxtb	r1, r3
    72ea:	687b      	ldr	r3, [r7, #4]
    72ec:	4a1f      	ldr	r2, [pc, #124]	; (736c <sync+0x188>)
    72ee:	5499      	strb	r1, [r3, r2]
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	68db      	ldr	r3, [r3, #12]
    72f4:	0e1b      	lsrs	r3, r3, #24
    72f6:	b2d9      	uxtb	r1, r3
    72f8:	687b      	ldr	r3, [r7, #4]
    72fa:	4a1d      	ldr	r2, [pc, #116]	; (7370 <sync+0x18c>)
    72fc:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    72fe:	687b      	ldr	r3, [r7, #4]
    7300:	7858      	ldrb	r0, [r3, #1]
    7302:	687b      	ldr	r3, [r7, #4]
    7304:	3330      	adds	r3, #48	; 0x30
    7306:	0019      	movs	r1, r3
    7308:	687b      	ldr	r3, [r7, #4]
    730a:	695a      	ldr	r2, [r3, #20]
    730c:	2301      	movs	r3, #1
    730e:	4c19      	ldr	r4, [pc, #100]	; (7374 <sync+0x190>)
    7310:	47a0      	blx	r4
			fs->fsi_flag = 0;
    7312:	687b      	ldr	r3, [r7, #4]
    7314:	2200      	movs	r2, #0
    7316:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    7318:	687b      	ldr	r3, [r7, #4]
    731a:	785b      	ldrb	r3, [r3, #1]
    731c:	2200      	movs	r2, #0
    731e:	2100      	movs	r1, #0
    7320:	0018      	movs	r0, r3
    7322:	4b15      	ldr	r3, [pc, #84]	; (7378 <sync+0x194>)
    7324:	4798      	blx	r3
    7326:	1e03      	subs	r3, r0, #0
    7328:	d003      	beq.n	7332 <sync+0x14e>
			res = FR_DISK_ERR;
    732a:	230f      	movs	r3, #15
    732c:	18fb      	adds	r3, r7, r3
    732e:	2201      	movs	r2, #1
    7330:	701a      	strb	r2, [r3, #0]
	}

	return res;
    7332:	230f      	movs	r3, #15
    7334:	18fb      	adds	r3, r7, r3
    7336:	781b      	ldrb	r3, [r3, #0]
}
    7338:	0018      	movs	r0, r3
    733a:	46bd      	mov	sp, r7
    733c:	b005      	add	sp, #20
    733e:	bd90      	pop	{r4, r7, pc}
    7340:	0000711d 	.word	0x0000711d
    7344:	00007071 	.word	0x00007071
    7348:	0000022e 	.word	0x0000022e
    734c:	0000022f 	.word	0x0000022f
    7350:	00000215 	.word	0x00000215
    7354:	00000216 	.word	0x00000216
    7358:	00000217 	.word	0x00000217
    735c:	00000219 	.word	0x00000219
    7360:	0000021a 	.word	0x0000021a
    7364:	0000021b 	.word	0x0000021b
    7368:	0000021d 	.word	0x0000021d
    736c:	0000021e 	.word	0x0000021e
    7370:	0000021f 	.word	0x0000021f
    7374:	00006e09 	.word	0x00006e09
    7378:	00006ee1 	.word	0x00006ee1

0000737c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    737c:	b580      	push	{r7, lr}
    737e:	b082      	sub	sp, #8
    7380:	af00      	add	r7, sp, #0
    7382:	6078      	str	r0, [r7, #4]
    7384:	6039      	str	r1, [r7, #0]
	clst -= 2;
    7386:	683b      	ldr	r3, [r7, #0]
    7388:	3b02      	subs	r3, #2
    738a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    738c:	687b      	ldr	r3, [r7, #4]
    738e:	699b      	ldr	r3, [r3, #24]
    7390:	1e9a      	subs	r2, r3, #2
    7392:	683b      	ldr	r3, [r7, #0]
    7394:	429a      	cmp	r2, r3
    7396:	d801      	bhi.n	739c <clust2sect+0x20>
    7398:	2300      	movs	r3, #0
    739a:	e007      	b.n	73ac <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    739c:	687b      	ldr	r3, [r7, #4]
    739e:	789b      	ldrb	r3, [r3, #2]
    73a0:	001a      	movs	r2, r3
    73a2:	683b      	ldr	r3, [r7, #0]
    73a4:	435a      	muls	r2, r3
    73a6:	687b      	ldr	r3, [r7, #4]
    73a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    73aa:	18d3      	adds	r3, r2, r3
}
    73ac:	0018      	movs	r0, r3
    73ae:	46bd      	mov	sp, r7
    73b0:	b002      	add	sp, #8
    73b2:	bd80      	pop	{r7, pc}

000073b4 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    73b4:	b580      	push	{r7, lr}
    73b6:	b086      	sub	sp, #24
    73b8:	af00      	add	r7, sp, #0
    73ba:	6078      	str	r0, [r7, #4]
    73bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    73be:	683b      	ldr	r3, [r7, #0]
    73c0:	2b01      	cmp	r3, #1
    73c2:	d904      	bls.n	73ce <get_fat+0x1a>
    73c4:	687b      	ldr	r3, [r7, #4]
    73c6:	699a      	ldr	r2, [r3, #24]
    73c8:	683b      	ldr	r3, [r7, #0]
    73ca:	429a      	cmp	r2, r3
    73cc:	d801      	bhi.n	73d2 <get_fat+0x1e>
		return 1;
    73ce:	2301      	movs	r3, #1
    73d0:	e09f      	b.n	7512 <get_fat+0x15e>

	switch (fs->fs_type) {
    73d2:	687b      	ldr	r3, [r7, #4]
    73d4:	781b      	ldrb	r3, [r3, #0]
    73d6:	2b02      	cmp	r3, #2
    73d8:	d048      	beq.n	746c <get_fat+0xb8>
    73da:	2b03      	cmp	r3, #3
    73dc:	d067      	beq.n	74ae <get_fat+0xfa>
    73de:	2b01      	cmp	r3, #1
    73e0:	d000      	beq.n	73e4 <get_fat+0x30>
    73e2:	e094      	b.n	750e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    73e4:	683b      	ldr	r3, [r7, #0]
    73e6:	617b      	str	r3, [r7, #20]
    73e8:	697b      	ldr	r3, [r7, #20]
    73ea:	085b      	lsrs	r3, r3, #1
    73ec:	697a      	ldr	r2, [r7, #20]
    73ee:	18d3      	adds	r3, r2, r3
    73f0:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    73f2:	687b      	ldr	r3, [r7, #4]
    73f4:	6a1a      	ldr	r2, [r3, #32]
    73f6:	697b      	ldr	r3, [r7, #20]
    73f8:	0a5b      	lsrs	r3, r3, #9
    73fa:	18d2      	adds	r2, r2, r3
    73fc:	687b      	ldr	r3, [r7, #4]
    73fe:	0011      	movs	r1, r2
    7400:	0018      	movs	r0, r3
    7402:	4b46      	ldr	r3, [pc, #280]	; (751c <get_fat+0x168>)
    7404:	4798      	blx	r3
    7406:	1e03      	subs	r3, r0, #0
    7408:	d000      	beq.n	740c <get_fat+0x58>
    740a:	e079      	b.n	7500 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
    740c:	697b      	ldr	r3, [r7, #20]
    740e:	05db      	lsls	r3, r3, #23
    7410:	0ddb      	lsrs	r3, r3, #23
    7412:	687a      	ldr	r2, [r7, #4]
    7414:	2130      	movs	r1, #48	; 0x30
    7416:	18d3      	adds	r3, r2, r3
    7418:	185b      	adds	r3, r3, r1
    741a:	781b      	ldrb	r3, [r3, #0]
    741c:	613b      	str	r3, [r7, #16]
    741e:	697b      	ldr	r3, [r7, #20]
    7420:	3301      	adds	r3, #1
    7422:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7424:	687b      	ldr	r3, [r7, #4]
    7426:	6a1a      	ldr	r2, [r3, #32]
    7428:	697b      	ldr	r3, [r7, #20]
    742a:	0a5b      	lsrs	r3, r3, #9
    742c:	18d2      	adds	r2, r2, r3
    742e:	687b      	ldr	r3, [r7, #4]
    7430:	0011      	movs	r1, r2
    7432:	0018      	movs	r0, r3
    7434:	4b39      	ldr	r3, [pc, #228]	; (751c <get_fat+0x168>)
    7436:	4798      	blx	r3
    7438:	1e03      	subs	r3, r0, #0
    743a:	d163      	bne.n	7504 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
    743c:	697b      	ldr	r3, [r7, #20]
    743e:	05db      	lsls	r3, r3, #23
    7440:	0ddb      	lsrs	r3, r3, #23
    7442:	687a      	ldr	r2, [r7, #4]
    7444:	2130      	movs	r1, #48	; 0x30
    7446:	18d3      	adds	r3, r2, r3
    7448:	185b      	adds	r3, r3, r1
    744a:	781b      	ldrb	r3, [r3, #0]
    744c:	021b      	lsls	r3, r3, #8
    744e:	001a      	movs	r2, r3
    7450:	693b      	ldr	r3, [r7, #16]
    7452:	4313      	orrs	r3, r2
    7454:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    7456:	683b      	ldr	r3, [r7, #0]
    7458:	2201      	movs	r2, #1
    745a:	4013      	ands	r3, r2
    745c:	d002      	beq.n	7464 <get_fat+0xb0>
    745e:	693b      	ldr	r3, [r7, #16]
    7460:	091b      	lsrs	r3, r3, #4
    7462:	e056      	b.n	7512 <get_fat+0x15e>
    7464:	693b      	ldr	r3, [r7, #16]
    7466:	051b      	lsls	r3, r3, #20
    7468:	0d1b      	lsrs	r3, r3, #20
    746a:	e052      	b.n	7512 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	6a1a      	ldr	r2, [r3, #32]
    7470:	683b      	ldr	r3, [r7, #0]
    7472:	0a1b      	lsrs	r3, r3, #8
    7474:	18d2      	adds	r2, r2, r3
    7476:	687b      	ldr	r3, [r7, #4]
    7478:	0011      	movs	r1, r2
    747a:	0018      	movs	r0, r3
    747c:	4b27      	ldr	r3, [pc, #156]	; (751c <get_fat+0x168>)
    747e:	4798      	blx	r3
    7480:	1e03      	subs	r3, r0, #0
    7482:	d141      	bne.n	7508 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
    7484:	683b      	ldr	r3, [r7, #0]
    7486:	005a      	lsls	r2, r3, #1
    7488:	23ff      	movs	r3, #255	; 0xff
    748a:	005b      	lsls	r3, r3, #1
    748c:	4013      	ands	r3, r2
    748e:	3330      	adds	r3, #48	; 0x30
    7490:	687a      	ldr	r2, [r7, #4]
    7492:	18d3      	adds	r3, r2, r3
    7494:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    7496:	68fb      	ldr	r3, [r7, #12]
    7498:	3301      	adds	r3, #1
    749a:	781b      	ldrb	r3, [r3, #0]
    749c:	021b      	lsls	r3, r3, #8
    749e:	b21a      	sxth	r2, r3
    74a0:	68fb      	ldr	r3, [r7, #12]
    74a2:	781b      	ldrb	r3, [r3, #0]
    74a4:	b21b      	sxth	r3, r3
    74a6:	4313      	orrs	r3, r2
    74a8:	b21b      	sxth	r3, r3
    74aa:	b29b      	uxth	r3, r3
    74ac:	e031      	b.n	7512 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    74ae:	687b      	ldr	r3, [r7, #4]
    74b0:	6a1a      	ldr	r2, [r3, #32]
    74b2:	683b      	ldr	r3, [r7, #0]
    74b4:	09db      	lsrs	r3, r3, #7
    74b6:	18d2      	adds	r2, r2, r3
    74b8:	687b      	ldr	r3, [r7, #4]
    74ba:	0011      	movs	r1, r2
    74bc:	0018      	movs	r0, r3
    74be:	4b17      	ldr	r3, [pc, #92]	; (751c <get_fat+0x168>)
    74c0:	4798      	blx	r3
    74c2:	1e03      	subs	r3, r0, #0
    74c4:	d122      	bne.n	750c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
    74c6:	683b      	ldr	r3, [r7, #0]
    74c8:	009a      	lsls	r2, r3, #2
    74ca:	23fe      	movs	r3, #254	; 0xfe
    74cc:	005b      	lsls	r3, r3, #1
    74ce:	4013      	ands	r3, r2
    74d0:	3330      	adds	r3, #48	; 0x30
    74d2:	687a      	ldr	r2, [r7, #4]
    74d4:	18d3      	adds	r3, r2, r3
    74d6:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    74d8:	68fb      	ldr	r3, [r7, #12]
    74da:	3303      	adds	r3, #3
    74dc:	781b      	ldrb	r3, [r3, #0]
    74de:	061a      	lsls	r2, r3, #24
    74e0:	68fb      	ldr	r3, [r7, #12]
    74e2:	3302      	adds	r3, #2
    74e4:	781b      	ldrb	r3, [r3, #0]
    74e6:	041b      	lsls	r3, r3, #16
    74e8:	4313      	orrs	r3, r2
    74ea:	68fa      	ldr	r2, [r7, #12]
    74ec:	3201      	adds	r2, #1
    74ee:	7812      	ldrb	r2, [r2, #0]
    74f0:	0212      	lsls	r2, r2, #8
    74f2:	4313      	orrs	r3, r2
    74f4:	68fa      	ldr	r2, [r7, #12]
    74f6:	7812      	ldrb	r2, [r2, #0]
    74f8:	4313      	orrs	r3, r2
    74fa:	011b      	lsls	r3, r3, #4
    74fc:	091b      	lsrs	r3, r3, #4
    74fe:	e008      	b.n	7512 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7500:	46c0      	nop			; (mov r8, r8)
    7502:	e004      	b.n	750e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    7504:	46c0      	nop			; (mov r8, r8)
    7506:	e002      	b.n	750e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    7508:	46c0      	nop			; (mov r8, r8)
    750a:	e000      	b.n	750e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    750c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    750e:	2301      	movs	r3, #1
    7510:	425b      	negs	r3, r3
}
    7512:	0018      	movs	r0, r3
    7514:	46bd      	mov	sp, r7
    7516:	b006      	add	sp, #24
    7518:	bd80      	pop	{r7, pc}
    751a:	46c0      	nop			; (mov r8, r8)
    751c:	0000711d 	.word	0x0000711d

00007520 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    7520:	b590      	push	{r4, r7, lr}
    7522:	b089      	sub	sp, #36	; 0x24
    7524:	af00      	add	r7, sp, #0
    7526:	60f8      	str	r0, [r7, #12]
    7528:	60b9      	str	r1, [r7, #8]
    752a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    752c:	68bb      	ldr	r3, [r7, #8]
    752e:	2b01      	cmp	r3, #1
    7530:	d904      	bls.n	753c <put_fat+0x1c>
    7532:	68fb      	ldr	r3, [r7, #12]
    7534:	699a      	ldr	r2, [r3, #24]
    7536:	68bb      	ldr	r3, [r7, #8]
    7538:	429a      	cmp	r2, r3
    753a:	d804      	bhi.n	7546 <put_fat+0x26>
		res = FR_INT_ERR;
    753c:	231f      	movs	r3, #31
    753e:	18fb      	adds	r3, r7, r3
    7540:	2202      	movs	r2, #2
    7542:	701a      	strb	r2, [r3, #0]
    7544:	e100      	b.n	7748 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
    7546:	68fb      	ldr	r3, [r7, #12]
    7548:	781b      	ldrb	r3, [r3, #0]
    754a:	2b02      	cmp	r3, #2
    754c:	d100      	bne.n	7550 <put_fat+0x30>
    754e:	e078      	b.n	7642 <put_fat+0x122>
    7550:	2b03      	cmp	r3, #3
    7552:	d100      	bne.n	7556 <put_fat+0x36>
    7554:	e09e      	b.n	7694 <put_fat+0x174>
    7556:	2b01      	cmp	r3, #1
    7558:	d000      	beq.n	755c <put_fat+0x3c>
    755a:	e0e6      	b.n	772a <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    755c:	68bb      	ldr	r3, [r7, #8]
    755e:	61bb      	str	r3, [r7, #24]
    7560:	69bb      	ldr	r3, [r7, #24]
    7562:	085b      	lsrs	r3, r3, #1
    7564:	69ba      	ldr	r2, [r7, #24]
    7566:	18d3      	adds	r3, r2, r3
    7568:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    756a:	68fb      	ldr	r3, [r7, #12]
    756c:	6a1a      	ldr	r2, [r3, #32]
    756e:	69bb      	ldr	r3, [r7, #24]
    7570:	0a5b      	lsrs	r3, r3, #9
    7572:	18d2      	adds	r2, r2, r3
    7574:	231f      	movs	r3, #31
    7576:	18fc      	adds	r4, r7, r3
    7578:	68fb      	ldr	r3, [r7, #12]
    757a:	0011      	movs	r1, r2
    757c:	0018      	movs	r0, r3
    757e:	4b76      	ldr	r3, [pc, #472]	; (7758 <put_fat+0x238>)
    7580:	4798      	blx	r3
    7582:	0003      	movs	r3, r0
    7584:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    7586:	231f      	movs	r3, #31
    7588:	18fb      	adds	r3, r7, r3
    758a:	781b      	ldrb	r3, [r3, #0]
    758c:	2b00      	cmp	r3, #0
    758e:	d000      	beq.n	7592 <put_fat+0x72>
    7590:	e0d0      	b.n	7734 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
    7592:	69bb      	ldr	r3, [r7, #24]
    7594:	05db      	lsls	r3, r3, #23
    7596:	0ddb      	lsrs	r3, r3, #23
    7598:	3330      	adds	r3, #48	; 0x30
    759a:	68fa      	ldr	r2, [r7, #12]
    759c:	18d3      	adds	r3, r2, r3
    759e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    75a0:	68bb      	ldr	r3, [r7, #8]
    75a2:	2201      	movs	r2, #1
    75a4:	4013      	ands	r3, r2
    75a6:	d00d      	beq.n	75c4 <put_fat+0xa4>
    75a8:	697b      	ldr	r3, [r7, #20]
    75aa:	781b      	ldrb	r3, [r3, #0]
    75ac:	b25b      	sxtb	r3, r3
    75ae:	220f      	movs	r2, #15
    75b0:	4013      	ands	r3, r2
    75b2:	b25a      	sxtb	r2, r3
    75b4:	687b      	ldr	r3, [r7, #4]
    75b6:	b2db      	uxtb	r3, r3
    75b8:	011b      	lsls	r3, r3, #4
    75ba:	b25b      	sxtb	r3, r3
    75bc:	4313      	orrs	r3, r2
    75be:	b25b      	sxtb	r3, r3
    75c0:	b2db      	uxtb	r3, r3
    75c2:	e001      	b.n	75c8 <put_fat+0xa8>
    75c4:	687b      	ldr	r3, [r7, #4]
    75c6:	b2db      	uxtb	r3, r3
    75c8:	697a      	ldr	r2, [r7, #20]
    75ca:	7013      	strb	r3, [r2, #0]
			bc++;
    75cc:	69bb      	ldr	r3, [r7, #24]
    75ce:	3301      	adds	r3, #1
    75d0:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    75d2:	68fb      	ldr	r3, [r7, #12]
    75d4:	2201      	movs	r2, #1
    75d6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    75d8:	68fb      	ldr	r3, [r7, #12]
    75da:	6a1a      	ldr	r2, [r3, #32]
    75dc:	69bb      	ldr	r3, [r7, #24]
    75de:	0a5b      	lsrs	r3, r3, #9
    75e0:	18d2      	adds	r2, r2, r3
    75e2:	231f      	movs	r3, #31
    75e4:	18fc      	adds	r4, r7, r3
    75e6:	68fb      	ldr	r3, [r7, #12]
    75e8:	0011      	movs	r1, r2
    75ea:	0018      	movs	r0, r3
    75ec:	4b5a      	ldr	r3, [pc, #360]	; (7758 <put_fat+0x238>)
    75ee:	4798      	blx	r3
    75f0:	0003      	movs	r3, r0
    75f2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    75f4:	231f      	movs	r3, #31
    75f6:	18fb      	adds	r3, r7, r3
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	2b00      	cmp	r3, #0
    75fc:	d000      	beq.n	7600 <put_fat+0xe0>
    75fe:	e09b      	b.n	7738 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
    7600:	69bb      	ldr	r3, [r7, #24]
    7602:	05db      	lsls	r3, r3, #23
    7604:	0ddb      	lsrs	r3, r3, #23
    7606:	3330      	adds	r3, #48	; 0x30
    7608:	68fa      	ldr	r2, [r7, #12]
    760a:	18d3      	adds	r3, r2, r3
    760c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    760e:	68bb      	ldr	r3, [r7, #8]
    7610:	2201      	movs	r2, #1
    7612:	4013      	ands	r3, r2
    7614:	d003      	beq.n	761e <put_fat+0xfe>
    7616:	687b      	ldr	r3, [r7, #4]
    7618:	091b      	lsrs	r3, r3, #4
    761a:	b2db      	uxtb	r3, r3
    761c:	e00e      	b.n	763c <put_fat+0x11c>
    761e:	697b      	ldr	r3, [r7, #20]
    7620:	781b      	ldrb	r3, [r3, #0]
    7622:	b25b      	sxtb	r3, r3
    7624:	220f      	movs	r2, #15
    7626:	4393      	bics	r3, r2
    7628:	b25a      	sxtb	r2, r3
    762a:	687b      	ldr	r3, [r7, #4]
    762c:	0a1b      	lsrs	r3, r3, #8
    762e:	b25b      	sxtb	r3, r3
    7630:	210f      	movs	r1, #15
    7632:	400b      	ands	r3, r1
    7634:	b25b      	sxtb	r3, r3
    7636:	4313      	orrs	r3, r2
    7638:	b25b      	sxtb	r3, r3
    763a:	b2db      	uxtb	r3, r3
    763c:	697a      	ldr	r2, [r7, #20]
    763e:	7013      	strb	r3, [r2, #0]
			break;
    7640:	e07f      	b.n	7742 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    7642:	68fb      	ldr	r3, [r7, #12]
    7644:	6a1a      	ldr	r2, [r3, #32]
    7646:	68bb      	ldr	r3, [r7, #8]
    7648:	0a1b      	lsrs	r3, r3, #8
    764a:	18d2      	adds	r2, r2, r3
    764c:	231f      	movs	r3, #31
    764e:	18fc      	adds	r4, r7, r3
    7650:	68fb      	ldr	r3, [r7, #12]
    7652:	0011      	movs	r1, r2
    7654:	0018      	movs	r0, r3
    7656:	4b40      	ldr	r3, [pc, #256]	; (7758 <put_fat+0x238>)
    7658:	4798      	blx	r3
    765a:	0003      	movs	r3, r0
    765c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    765e:	231f      	movs	r3, #31
    7660:	18fb      	adds	r3, r7, r3
    7662:	781b      	ldrb	r3, [r3, #0]
    7664:	2b00      	cmp	r3, #0
    7666:	d169      	bne.n	773c <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
    7668:	68bb      	ldr	r3, [r7, #8]
    766a:	005a      	lsls	r2, r3, #1
    766c:	23ff      	movs	r3, #255	; 0xff
    766e:	005b      	lsls	r3, r3, #1
    7670:	4013      	ands	r3, r2
    7672:	3330      	adds	r3, #48	; 0x30
    7674:	68fa      	ldr	r2, [r7, #12]
    7676:	18d3      	adds	r3, r2, r3
    7678:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    767a:	687b      	ldr	r3, [r7, #4]
    767c:	b2da      	uxtb	r2, r3
    767e:	697b      	ldr	r3, [r7, #20]
    7680:	701a      	strb	r2, [r3, #0]
    7682:	697b      	ldr	r3, [r7, #20]
    7684:	3301      	adds	r3, #1
    7686:	687a      	ldr	r2, [r7, #4]
    7688:	b292      	uxth	r2, r2
    768a:	0a12      	lsrs	r2, r2, #8
    768c:	b292      	uxth	r2, r2
    768e:	b2d2      	uxtb	r2, r2
    7690:	701a      	strb	r2, [r3, #0]
			break;
    7692:	e056      	b.n	7742 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    7694:	68fb      	ldr	r3, [r7, #12]
    7696:	6a1a      	ldr	r2, [r3, #32]
    7698:	68bb      	ldr	r3, [r7, #8]
    769a:	09db      	lsrs	r3, r3, #7
    769c:	18d2      	adds	r2, r2, r3
    769e:	231f      	movs	r3, #31
    76a0:	18fc      	adds	r4, r7, r3
    76a2:	68fb      	ldr	r3, [r7, #12]
    76a4:	0011      	movs	r1, r2
    76a6:	0018      	movs	r0, r3
    76a8:	4b2b      	ldr	r3, [pc, #172]	; (7758 <put_fat+0x238>)
    76aa:	4798      	blx	r3
    76ac:	0003      	movs	r3, r0
    76ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    76b0:	231f      	movs	r3, #31
    76b2:	18fb      	adds	r3, r7, r3
    76b4:	781b      	ldrb	r3, [r3, #0]
    76b6:	2b00      	cmp	r3, #0
    76b8:	d142      	bne.n	7740 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
    76ba:	68bb      	ldr	r3, [r7, #8]
    76bc:	009a      	lsls	r2, r3, #2
    76be:	23fe      	movs	r3, #254	; 0xfe
    76c0:	005b      	lsls	r3, r3, #1
    76c2:	4013      	ands	r3, r2
    76c4:	3330      	adds	r3, #48	; 0x30
    76c6:	68fa      	ldr	r2, [r7, #12]
    76c8:	18d3      	adds	r3, r2, r3
    76ca:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    76cc:	697b      	ldr	r3, [r7, #20]
    76ce:	3303      	adds	r3, #3
    76d0:	781b      	ldrb	r3, [r3, #0]
    76d2:	061a      	lsls	r2, r3, #24
    76d4:	697b      	ldr	r3, [r7, #20]
    76d6:	3302      	adds	r3, #2
    76d8:	781b      	ldrb	r3, [r3, #0]
    76da:	041b      	lsls	r3, r3, #16
    76dc:	4313      	orrs	r3, r2
    76de:	697a      	ldr	r2, [r7, #20]
    76e0:	3201      	adds	r2, #1
    76e2:	7812      	ldrb	r2, [r2, #0]
    76e4:	0212      	lsls	r2, r2, #8
    76e6:	4313      	orrs	r3, r2
    76e8:	697a      	ldr	r2, [r7, #20]
    76ea:	7812      	ldrb	r2, [r2, #0]
    76ec:	4313      	orrs	r3, r2
    76ee:	0f1b      	lsrs	r3, r3, #28
    76f0:	071b      	lsls	r3, r3, #28
    76f2:	687a      	ldr	r2, [r7, #4]
    76f4:	4313      	orrs	r3, r2
    76f6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    76f8:	687b      	ldr	r3, [r7, #4]
    76fa:	b2da      	uxtb	r2, r3
    76fc:	697b      	ldr	r3, [r7, #20]
    76fe:	701a      	strb	r2, [r3, #0]
    7700:	697b      	ldr	r3, [r7, #20]
    7702:	3301      	adds	r3, #1
    7704:	687a      	ldr	r2, [r7, #4]
    7706:	b292      	uxth	r2, r2
    7708:	0a12      	lsrs	r2, r2, #8
    770a:	b292      	uxth	r2, r2
    770c:	b2d2      	uxtb	r2, r2
    770e:	701a      	strb	r2, [r3, #0]
    7710:	697b      	ldr	r3, [r7, #20]
    7712:	3302      	adds	r3, #2
    7714:	687a      	ldr	r2, [r7, #4]
    7716:	0c12      	lsrs	r2, r2, #16
    7718:	b2d2      	uxtb	r2, r2
    771a:	701a      	strb	r2, [r3, #0]
    771c:	697b      	ldr	r3, [r7, #20]
    771e:	3303      	adds	r3, #3
    7720:	687a      	ldr	r2, [r7, #4]
    7722:	0e12      	lsrs	r2, r2, #24
    7724:	b2d2      	uxtb	r2, r2
    7726:	701a      	strb	r2, [r3, #0]
			break;
    7728:	e00b      	b.n	7742 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
    772a:	231f      	movs	r3, #31
    772c:	18fb      	adds	r3, r7, r3
    772e:	2202      	movs	r2, #2
    7730:	701a      	strb	r2, [r3, #0]
    7732:	e006      	b.n	7742 <put_fat+0x222>
			if (res != FR_OK) break;
    7734:	46c0      	nop			; (mov r8, r8)
    7736:	e004      	b.n	7742 <put_fat+0x222>
			if (res != FR_OK) break;
    7738:	46c0      	nop			; (mov r8, r8)
    773a:	e002      	b.n	7742 <put_fat+0x222>
			if (res != FR_OK) break;
    773c:	46c0      	nop			; (mov r8, r8)
    773e:	e000      	b.n	7742 <put_fat+0x222>
			if (res != FR_OK) break;
    7740:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    7742:	68fb      	ldr	r3, [r7, #12]
    7744:	2201      	movs	r2, #1
    7746:	711a      	strb	r2, [r3, #4]
	}

	return res;
    7748:	231f      	movs	r3, #31
    774a:	18fb      	adds	r3, r7, r3
    774c:	781b      	ldrb	r3, [r3, #0]
}
    774e:	0018      	movs	r0, r3
    7750:	46bd      	mov	sp, r7
    7752:	b009      	add	sp, #36	; 0x24
    7754:	bd90      	pop	{r4, r7, pc}
    7756:	46c0      	nop			; (mov r8, r8)
    7758:	0000711d 	.word	0x0000711d

0000775c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    775c:	b590      	push	{r4, r7, lr}
    775e:	b085      	sub	sp, #20
    7760:	af00      	add	r7, sp, #0
    7762:	6078      	str	r0, [r7, #4]
    7764:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    7766:	683b      	ldr	r3, [r7, #0]
    7768:	2b01      	cmp	r3, #1
    776a:	d904      	bls.n	7776 <remove_chain+0x1a>
    776c:	687b      	ldr	r3, [r7, #4]
    776e:	699a      	ldr	r2, [r3, #24]
    7770:	683b      	ldr	r3, [r7, #0]
    7772:	429a      	cmp	r2, r3
    7774:	d804      	bhi.n	7780 <remove_chain+0x24>
		res = FR_INT_ERR;
    7776:	230f      	movs	r3, #15
    7778:	18fb      	adds	r3, r7, r3
    777a:	2202      	movs	r2, #2
    777c:	701a      	strb	r2, [r3, #0]
    777e:	e045      	b.n	780c <remove_chain+0xb0>

	} else {
		res = FR_OK;
    7780:	230f      	movs	r3, #15
    7782:	18fb      	adds	r3, r7, r3
    7784:	2200      	movs	r2, #0
    7786:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    7788:	e037      	b.n	77fa <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    778a:	683a      	ldr	r2, [r7, #0]
    778c:	687b      	ldr	r3, [r7, #4]
    778e:	0011      	movs	r1, r2
    7790:	0018      	movs	r0, r3
    7792:	4b22      	ldr	r3, [pc, #136]	; (781c <remove_chain+0xc0>)
    7794:	4798      	blx	r3
    7796:	0003      	movs	r3, r0
    7798:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    779a:	68bb      	ldr	r3, [r7, #8]
    779c:	2b00      	cmp	r3, #0
    779e:	d032      	beq.n	7806 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    77a0:	68bb      	ldr	r3, [r7, #8]
    77a2:	2b01      	cmp	r3, #1
    77a4:	d104      	bne.n	77b0 <remove_chain+0x54>
    77a6:	230f      	movs	r3, #15
    77a8:	18fb      	adds	r3, r7, r3
    77aa:	2202      	movs	r2, #2
    77ac:	701a      	strb	r2, [r3, #0]
    77ae:	e02d      	b.n	780c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    77b0:	68bb      	ldr	r3, [r7, #8]
    77b2:	3301      	adds	r3, #1
    77b4:	d104      	bne.n	77c0 <remove_chain+0x64>
    77b6:	230f      	movs	r3, #15
    77b8:	18fb      	adds	r3, r7, r3
    77ba:	2201      	movs	r2, #1
    77bc:	701a      	strb	r2, [r3, #0]
    77be:	e025      	b.n	780c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    77c0:	230f      	movs	r3, #15
    77c2:	18fc      	adds	r4, r7, r3
    77c4:	6839      	ldr	r1, [r7, #0]
    77c6:	687b      	ldr	r3, [r7, #4]
    77c8:	2200      	movs	r2, #0
    77ca:	0018      	movs	r0, r3
    77cc:	4b14      	ldr	r3, [pc, #80]	; (7820 <remove_chain+0xc4>)
    77ce:	4798      	blx	r3
    77d0:	0003      	movs	r3, r0
    77d2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    77d4:	230f      	movs	r3, #15
    77d6:	18fb      	adds	r3, r7, r3
    77d8:	781b      	ldrb	r3, [r3, #0]
    77da:	2b00      	cmp	r3, #0
    77dc:	d115      	bne.n	780a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    77de:	687b      	ldr	r3, [r7, #4]
    77e0:	691b      	ldr	r3, [r3, #16]
    77e2:	3301      	adds	r3, #1
    77e4:	d007      	beq.n	77f6 <remove_chain+0x9a>
				fs->free_clust++;
    77e6:	687b      	ldr	r3, [r7, #4]
    77e8:	691b      	ldr	r3, [r3, #16]
    77ea:	1c5a      	adds	r2, r3, #1
    77ec:	687b      	ldr	r3, [r7, #4]
    77ee:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    77f0:	687b      	ldr	r3, [r7, #4]
    77f2:	2201      	movs	r2, #1
    77f4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    77f6:	68bb      	ldr	r3, [r7, #8]
    77f8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    77fa:	687b      	ldr	r3, [r7, #4]
    77fc:	699a      	ldr	r2, [r3, #24]
    77fe:	683b      	ldr	r3, [r7, #0]
    7800:	429a      	cmp	r2, r3
    7802:	d8c2      	bhi.n	778a <remove_chain+0x2e>
    7804:	e002      	b.n	780c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
    7806:	46c0      	nop			; (mov r8, r8)
    7808:	e000      	b.n	780c <remove_chain+0xb0>
			if (res != FR_OK) break;
    780a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    780c:	230f      	movs	r3, #15
    780e:	18fb      	adds	r3, r7, r3
    7810:	781b      	ldrb	r3, [r3, #0]
}
    7812:	0018      	movs	r0, r3
    7814:	46bd      	mov	sp, r7
    7816:	b005      	add	sp, #20
    7818:	bd90      	pop	{r4, r7, pc}
    781a:	46c0      	nop			; (mov r8, r8)
    781c:	000073b5 	.word	0x000073b5
    7820:	00007521 	.word	0x00007521

00007824 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    7824:	b590      	push	{r4, r7, lr}
    7826:	b087      	sub	sp, #28
    7828:	af00      	add	r7, sp, #0
    782a:	6078      	str	r0, [r7, #4]
    782c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    782e:	683b      	ldr	r3, [r7, #0]
    7830:	2b00      	cmp	r3, #0
    7832:	d10d      	bne.n	7850 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    7834:	687b      	ldr	r3, [r7, #4]
    7836:	68db      	ldr	r3, [r3, #12]
    7838:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    783a:	693b      	ldr	r3, [r7, #16]
    783c:	2b00      	cmp	r3, #0
    783e:	d004      	beq.n	784a <create_chain+0x26>
    7840:	687b      	ldr	r3, [r7, #4]
    7842:	699a      	ldr	r2, [r3, #24]
    7844:	693b      	ldr	r3, [r7, #16]
    7846:	429a      	cmp	r2, r3
    7848:	d818      	bhi.n	787c <create_chain+0x58>
    784a:	2301      	movs	r3, #1
    784c:	613b      	str	r3, [r7, #16]
    784e:	e015      	b.n	787c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    7850:	683a      	ldr	r2, [r7, #0]
    7852:	687b      	ldr	r3, [r7, #4]
    7854:	0011      	movs	r1, r2
    7856:	0018      	movs	r0, r3
    7858:	4b3e      	ldr	r3, [pc, #248]	; (7954 <create_chain+0x130>)
    785a:	4798      	blx	r3
    785c:	0003      	movs	r3, r0
    785e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    7860:	68bb      	ldr	r3, [r7, #8]
    7862:	2b01      	cmp	r3, #1
    7864:	d801      	bhi.n	786a <create_chain+0x46>
    7866:	2301      	movs	r3, #1
    7868:	e070      	b.n	794c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    786a:	687b      	ldr	r3, [r7, #4]
    786c:	699a      	ldr	r2, [r3, #24]
    786e:	68bb      	ldr	r3, [r7, #8]
    7870:	429a      	cmp	r2, r3
    7872:	d901      	bls.n	7878 <create_chain+0x54>
    7874:	68bb      	ldr	r3, [r7, #8]
    7876:	e069      	b.n	794c <create_chain+0x128>
		scl = clst;
    7878:	683b      	ldr	r3, [r7, #0]
    787a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    787c:	693b      	ldr	r3, [r7, #16]
    787e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    7880:	697b      	ldr	r3, [r7, #20]
    7882:	3301      	adds	r3, #1
    7884:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    7886:	687b      	ldr	r3, [r7, #4]
    7888:	699a      	ldr	r2, [r3, #24]
    788a:	697b      	ldr	r3, [r7, #20]
    788c:	429a      	cmp	r2, r3
    788e:	d807      	bhi.n	78a0 <create_chain+0x7c>
			ncl = 2;
    7890:	2302      	movs	r3, #2
    7892:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    7894:	697a      	ldr	r2, [r7, #20]
    7896:	693b      	ldr	r3, [r7, #16]
    7898:	429a      	cmp	r2, r3
    789a:	d901      	bls.n	78a0 <create_chain+0x7c>
    789c:	2300      	movs	r3, #0
    789e:	e055      	b.n	794c <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    78a0:	697a      	ldr	r2, [r7, #20]
    78a2:	687b      	ldr	r3, [r7, #4]
    78a4:	0011      	movs	r1, r2
    78a6:	0018      	movs	r0, r3
    78a8:	4b2a      	ldr	r3, [pc, #168]	; (7954 <create_chain+0x130>)
    78aa:	4798      	blx	r3
    78ac:	0003      	movs	r3, r0
    78ae:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    78b0:	68bb      	ldr	r3, [r7, #8]
    78b2:	2b00      	cmp	r3, #0
    78b4:	d00d      	beq.n	78d2 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    78b6:	68bb      	ldr	r3, [r7, #8]
    78b8:	3301      	adds	r3, #1
    78ba:	d002      	beq.n	78c2 <create_chain+0x9e>
    78bc:	68bb      	ldr	r3, [r7, #8]
    78be:	2b01      	cmp	r3, #1
    78c0:	d101      	bne.n	78c6 <create_chain+0xa2>
			return cs;
    78c2:	68bb      	ldr	r3, [r7, #8]
    78c4:	e042      	b.n	794c <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
    78c6:	697a      	ldr	r2, [r7, #20]
    78c8:	693b      	ldr	r3, [r7, #16]
    78ca:	429a      	cmp	r2, r3
    78cc:	d1d8      	bne.n	7880 <create_chain+0x5c>
    78ce:	2300      	movs	r3, #0
    78d0:	e03c      	b.n	794c <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
    78d2:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    78d4:	230f      	movs	r3, #15
    78d6:	18fc      	adds	r4, r7, r3
    78d8:	4a1f      	ldr	r2, [pc, #124]	; (7958 <create_chain+0x134>)
    78da:	6979      	ldr	r1, [r7, #20]
    78dc:	687b      	ldr	r3, [r7, #4]
    78de:	0018      	movs	r0, r3
    78e0:	4b1e      	ldr	r3, [pc, #120]	; (795c <create_chain+0x138>)
    78e2:	4798      	blx	r3
    78e4:	0003      	movs	r3, r0
    78e6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    78e8:	230f      	movs	r3, #15
    78ea:	18fb      	adds	r3, r7, r3
    78ec:	781b      	ldrb	r3, [r3, #0]
    78ee:	2b00      	cmp	r3, #0
    78f0:	d10c      	bne.n	790c <create_chain+0xe8>
    78f2:	683b      	ldr	r3, [r7, #0]
    78f4:	2b00      	cmp	r3, #0
    78f6:	d009      	beq.n	790c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    78f8:	230f      	movs	r3, #15
    78fa:	18fc      	adds	r4, r7, r3
    78fc:	697a      	ldr	r2, [r7, #20]
    78fe:	6839      	ldr	r1, [r7, #0]
    7900:	687b      	ldr	r3, [r7, #4]
    7902:	0018      	movs	r0, r3
    7904:	4b15      	ldr	r3, [pc, #84]	; (795c <create_chain+0x138>)
    7906:	4798      	blx	r3
    7908:	0003      	movs	r3, r0
    790a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    790c:	230f      	movs	r3, #15
    790e:	18fb      	adds	r3, r7, r3
    7910:	781b      	ldrb	r3, [r3, #0]
    7912:	2b00      	cmp	r3, #0
    7914:	d10f      	bne.n	7936 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
    7916:	687b      	ldr	r3, [r7, #4]
    7918:	697a      	ldr	r2, [r7, #20]
    791a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    791c:	687b      	ldr	r3, [r7, #4]
    791e:	691b      	ldr	r3, [r3, #16]
    7920:	3301      	adds	r3, #1
    7922:	d012      	beq.n	794a <create_chain+0x126>
			fs->free_clust--;
    7924:	687b      	ldr	r3, [r7, #4]
    7926:	691b      	ldr	r3, [r3, #16]
    7928:	1e5a      	subs	r2, r3, #1
    792a:	687b      	ldr	r3, [r7, #4]
    792c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    792e:	687b      	ldr	r3, [r7, #4]
    7930:	2201      	movs	r2, #1
    7932:	715a      	strb	r2, [r3, #5]
    7934:	e009      	b.n	794a <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    7936:	230f      	movs	r3, #15
    7938:	18fb      	adds	r3, r7, r3
    793a:	781b      	ldrb	r3, [r3, #0]
    793c:	2b01      	cmp	r3, #1
    793e:	d102      	bne.n	7946 <create_chain+0x122>
    7940:	2301      	movs	r3, #1
    7942:	425b      	negs	r3, r3
    7944:	e000      	b.n	7948 <create_chain+0x124>
    7946:	2301      	movs	r3, #1
    7948:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    794a:	697b      	ldr	r3, [r7, #20]
}
    794c:	0018      	movs	r0, r3
    794e:	46bd      	mov	sp, r7
    7950:	b007      	add	sp, #28
    7952:	bd90      	pop	{r4, r7, pc}
    7954:	000073b5 	.word	0x000073b5
    7958:	0fffffff 	.word	0x0fffffff
    795c:	00007521 	.word	0x00007521

00007960 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    7960:	b580      	push	{r7, lr}
    7962:	b084      	sub	sp, #16
    7964:	af00      	add	r7, sp, #0
    7966:	6078      	str	r0, [r7, #4]
    7968:	000a      	movs	r2, r1
    796a:	1cbb      	adds	r3, r7, #2
    796c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    796e:	687b      	ldr	r3, [r7, #4]
    7970:	1cba      	adds	r2, r7, #2
    7972:	8812      	ldrh	r2, [r2, #0]
    7974:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    7976:	687b      	ldr	r3, [r7, #4]
    7978:	689b      	ldr	r3, [r3, #8]
    797a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    797c:	68fb      	ldr	r3, [r7, #12]
    797e:	2b01      	cmp	r3, #1
    7980:	d005      	beq.n	798e <dir_sdi+0x2e>
    7982:	687b      	ldr	r3, [r7, #4]
    7984:	681b      	ldr	r3, [r3, #0]
    7986:	699a      	ldr	r2, [r3, #24]
    7988:	68fb      	ldr	r3, [r7, #12]
    798a:	429a      	cmp	r2, r3
    798c:	d801      	bhi.n	7992 <dir_sdi+0x32>
		return FR_INT_ERR;
    798e:	2302      	movs	r3, #2
    7990:	e075      	b.n	7a7e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    7992:	68fb      	ldr	r3, [r7, #12]
    7994:	2b00      	cmp	r3, #0
    7996:	d108      	bne.n	79aa <dir_sdi+0x4a>
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	681b      	ldr	r3, [r3, #0]
    799c:	781b      	ldrb	r3, [r3, #0]
    799e:	2b03      	cmp	r3, #3
    79a0:	d103      	bne.n	79aa <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    79a2:	687b      	ldr	r3, [r7, #4]
    79a4:	681b      	ldr	r3, [r3, #0]
    79a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    79a8:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    79aa:	68fb      	ldr	r3, [r7, #12]
    79ac:	2b00      	cmp	r3, #0
    79ae:	d116      	bne.n	79de <dir_sdi+0x7e>
		dj->clust = clst;
    79b0:	687b      	ldr	r3, [r7, #4]
    79b2:	68fa      	ldr	r2, [r7, #12]
    79b4:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    79b6:	687b      	ldr	r3, [r7, #4]
    79b8:	681b      	ldr	r3, [r3, #0]
    79ba:	891b      	ldrh	r3, [r3, #8]
    79bc:	1cba      	adds	r2, r7, #2
    79be:	8812      	ldrh	r2, [r2, #0]
    79c0:	429a      	cmp	r2, r3
    79c2:	d301      	bcc.n	79c8 <dir_sdi+0x68>
			return FR_INT_ERR;
    79c4:	2302      	movs	r3, #2
    79c6:	e05a      	b.n	7a7e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    79c8:	687b      	ldr	r3, [r7, #4]
    79ca:	681b      	ldr	r3, [r3, #0]
    79cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    79ce:	1cba      	adds	r2, r7, #2
    79d0:	8812      	ldrh	r2, [r2, #0]
    79d2:	0912      	lsrs	r2, r2, #4
    79d4:	b292      	uxth	r2, r2
    79d6:	189a      	adds	r2, r3, r2
    79d8:	687b      	ldr	r3, [r7, #4]
    79da:	611a      	str	r2, [r3, #16]
    79dc:	e042      	b.n	7a64 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    79de:	687b      	ldr	r3, [r7, #4]
    79e0:	681b      	ldr	r3, [r3, #0]
    79e2:	789b      	ldrb	r3, [r3, #2]
    79e4:	b29a      	uxth	r2, r3
    79e6:	230a      	movs	r3, #10
    79e8:	18fb      	adds	r3, r7, r3
    79ea:	0112      	lsls	r2, r2, #4
    79ec:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    79ee:	e020      	b.n	7a32 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    79f0:	687b      	ldr	r3, [r7, #4]
    79f2:	681b      	ldr	r3, [r3, #0]
    79f4:	68fa      	ldr	r2, [r7, #12]
    79f6:	0011      	movs	r1, r2
    79f8:	0018      	movs	r0, r3
    79fa:	4b23      	ldr	r3, [pc, #140]	; (7a88 <dir_sdi+0x128>)
    79fc:	4798      	blx	r3
    79fe:	0003      	movs	r3, r0
    7a00:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    7a02:	68fb      	ldr	r3, [r7, #12]
    7a04:	3301      	adds	r3, #1
    7a06:	d101      	bne.n	7a0c <dir_sdi+0xac>
    7a08:	2301      	movs	r3, #1
    7a0a:	e038      	b.n	7a7e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    7a0c:	68fb      	ldr	r3, [r7, #12]
    7a0e:	2b01      	cmp	r3, #1
    7a10:	d905      	bls.n	7a1e <dir_sdi+0xbe>
    7a12:	687b      	ldr	r3, [r7, #4]
    7a14:	681b      	ldr	r3, [r3, #0]
    7a16:	699a      	ldr	r2, [r3, #24]
    7a18:	68fb      	ldr	r3, [r7, #12]
    7a1a:	429a      	cmp	r2, r3
    7a1c:	d801      	bhi.n	7a22 <dir_sdi+0xc2>
				return FR_INT_ERR;
    7a1e:	2302      	movs	r3, #2
    7a20:	e02d      	b.n	7a7e <dir_sdi+0x11e>
			idx -= ic;
    7a22:	1cbb      	adds	r3, r7, #2
    7a24:	1cb9      	adds	r1, r7, #2
    7a26:	220a      	movs	r2, #10
    7a28:	18ba      	adds	r2, r7, r2
    7a2a:	8809      	ldrh	r1, [r1, #0]
    7a2c:	8812      	ldrh	r2, [r2, #0]
    7a2e:	1a8a      	subs	r2, r1, r2
    7a30:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    7a32:	1cba      	adds	r2, r7, #2
    7a34:	230a      	movs	r3, #10
    7a36:	18fb      	adds	r3, r7, r3
    7a38:	8812      	ldrh	r2, [r2, #0]
    7a3a:	881b      	ldrh	r3, [r3, #0]
    7a3c:	429a      	cmp	r2, r3
    7a3e:	d2d7      	bcs.n	79f0 <dir_sdi+0x90>
		}
		dj->clust = clst;
    7a40:	687b      	ldr	r3, [r7, #4]
    7a42:	68fa      	ldr	r2, [r7, #12]
    7a44:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    7a46:	687b      	ldr	r3, [r7, #4]
    7a48:	681b      	ldr	r3, [r3, #0]
    7a4a:	68fa      	ldr	r2, [r7, #12]
    7a4c:	0011      	movs	r1, r2
    7a4e:	0018      	movs	r0, r3
    7a50:	4b0e      	ldr	r3, [pc, #56]	; (7a8c <dir_sdi+0x12c>)
    7a52:	4798      	blx	r3
    7a54:	0002      	movs	r2, r0
    7a56:	1cbb      	adds	r3, r7, #2
    7a58:	881b      	ldrh	r3, [r3, #0]
    7a5a:	091b      	lsrs	r3, r3, #4
    7a5c:	b29b      	uxth	r3, r3
    7a5e:	18d2      	adds	r2, r2, r3
    7a60:	687b      	ldr	r3, [r7, #4]
    7a62:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    7a64:	687b      	ldr	r3, [r7, #4]
    7a66:	681b      	ldr	r3, [r3, #0]
    7a68:	3330      	adds	r3, #48	; 0x30
    7a6a:	001a      	movs	r2, r3
    7a6c:	1cbb      	adds	r3, r7, #2
    7a6e:	881b      	ldrh	r3, [r3, #0]
    7a70:	210f      	movs	r1, #15
    7a72:	400b      	ands	r3, r1
    7a74:	015b      	lsls	r3, r3, #5
    7a76:	18d2      	adds	r2, r2, r3
    7a78:	687b      	ldr	r3, [r7, #4]
    7a7a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    7a7c:	2300      	movs	r3, #0
}
    7a7e:	0018      	movs	r0, r3
    7a80:	46bd      	mov	sp, r7
    7a82:	b004      	add	sp, #16
    7a84:	bd80      	pop	{r7, pc}
    7a86:	46c0      	nop			; (mov r8, r8)
    7a88:	000073b5 	.word	0x000073b5
    7a8c:	0000737d 	.word	0x0000737d

00007a90 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    7a90:	b590      	push	{r4, r7, lr}
    7a92:	b085      	sub	sp, #20
    7a94:	af00      	add	r7, sp, #0
    7a96:	6078      	str	r0, [r7, #4]
    7a98:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    7a9a:	687b      	ldr	r3, [r7, #4]
    7a9c:	88da      	ldrh	r2, [r3, #6]
    7a9e:	2308      	movs	r3, #8
    7aa0:	18fb      	adds	r3, r7, r3
    7aa2:	3201      	adds	r2, #1
    7aa4:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    7aa6:	2308      	movs	r3, #8
    7aa8:	18fb      	adds	r3, r7, r3
    7aaa:	881b      	ldrh	r3, [r3, #0]
    7aac:	2b00      	cmp	r3, #0
    7aae:	d003      	beq.n	7ab8 <dir_next+0x28>
    7ab0:	687b      	ldr	r3, [r7, #4]
    7ab2:	691b      	ldr	r3, [r3, #16]
    7ab4:	2b00      	cmp	r3, #0
    7ab6:	d101      	bne.n	7abc <dir_next+0x2c>
		return FR_NO_FILE;
    7ab8:	2304      	movs	r3, #4
    7aba:	e0d2      	b.n	7c62 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    7abc:	2308      	movs	r3, #8
    7abe:	18fb      	adds	r3, r7, r3
    7ac0:	881b      	ldrh	r3, [r3, #0]
    7ac2:	220f      	movs	r2, #15
    7ac4:	4013      	ands	r3, r2
    7ac6:	b29b      	uxth	r3, r3
    7ac8:	2b00      	cmp	r3, #0
    7aca:	d000      	beq.n	7ace <dir_next+0x3e>
    7acc:	e0b6      	b.n	7c3c <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
    7ace:	687b      	ldr	r3, [r7, #4]
    7ad0:	691b      	ldr	r3, [r3, #16]
    7ad2:	1c5a      	adds	r2, r3, #1
    7ad4:	687b      	ldr	r3, [r7, #4]
    7ad6:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    7ad8:	687b      	ldr	r3, [r7, #4]
    7ada:	68db      	ldr	r3, [r3, #12]
    7adc:	2b00      	cmp	r3, #0
    7ade:	d10a      	bne.n	7af6 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    7ae0:	687b      	ldr	r3, [r7, #4]
    7ae2:	681b      	ldr	r3, [r3, #0]
    7ae4:	891b      	ldrh	r3, [r3, #8]
    7ae6:	2208      	movs	r2, #8
    7ae8:	18ba      	adds	r2, r7, r2
    7aea:	8812      	ldrh	r2, [r2, #0]
    7aec:	429a      	cmp	r2, r3
    7aee:	d200      	bcs.n	7af2 <dir_next+0x62>
    7af0:	e0a4      	b.n	7c3c <dir_next+0x1ac>
				return FR_NO_FILE;
    7af2:	2304      	movs	r3, #4
    7af4:	e0b5      	b.n	7c62 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    7af6:	2308      	movs	r3, #8
    7af8:	18fb      	adds	r3, r7, r3
    7afa:	881b      	ldrh	r3, [r3, #0]
    7afc:	091b      	lsrs	r3, r3, #4
    7afe:	b29b      	uxth	r3, r3
    7b00:	001a      	movs	r2, r3
    7b02:	687b      	ldr	r3, [r7, #4]
    7b04:	681b      	ldr	r3, [r3, #0]
    7b06:	789b      	ldrb	r3, [r3, #2]
    7b08:	3b01      	subs	r3, #1
    7b0a:	4013      	ands	r3, r2
    7b0c:	d000      	beq.n	7b10 <dir_next+0x80>
    7b0e:	e095      	b.n	7c3c <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    7b10:	687b      	ldr	r3, [r7, #4]
    7b12:	681a      	ldr	r2, [r3, #0]
    7b14:	687b      	ldr	r3, [r7, #4]
    7b16:	68db      	ldr	r3, [r3, #12]
    7b18:	0019      	movs	r1, r3
    7b1a:	0010      	movs	r0, r2
    7b1c:	4b53      	ldr	r3, [pc, #332]	; (7c6c <dir_next+0x1dc>)
    7b1e:	4798      	blx	r3
    7b20:	0003      	movs	r3, r0
    7b22:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    7b24:	68fb      	ldr	r3, [r7, #12]
    7b26:	2b01      	cmp	r3, #1
    7b28:	d801      	bhi.n	7b2e <dir_next+0x9e>
    7b2a:	2302      	movs	r3, #2
    7b2c:	e099      	b.n	7c62 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7b2e:	68fb      	ldr	r3, [r7, #12]
    7b30:	3301      	adds	r3, #1
    7b32:	d101      	bne.n	7b38 <dir_next+0xa8>
    7b34:	2301      	movs	r3, #1
    7b36:	e094      	b.n	7c62 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    7b38:	687b      	ldr	r3, [r7, #4]
    7b3a:	681b      	ldr	r3, [r3, #0]
    7b3c:	699a      	ldr	r2, [r3, #24]
    7b3e:	68fb      	ldr	r3, [r7, #12]
    7b40:	429a      	cmp	r2, r3
    7b42:	d900      	bls.n	7b46 <dir_next+0xb6>
    7b44:	e06d      	b.n	7c22 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    7b46:	683b      	ldr	r3, [r7, #0]
    7b48:	2b00      	cmp	r3, #0
    7b4a:	d101      	bne.n	7b50 <dir_next+0xc0>
    7b4c:	2304      	movs	r3, #4
    7b4e:	e088      	b.n	7c62 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    7b50:	687b      	ldr	r3, [r7, #4]
    7b52:	681a      	ldr	r2, [r3, #0]
    7b54:	687b      	ldr	r3, [r7, #4]
    7b56:	68db      	ldr	r3, [r3, #12]
    7b58:	0019      	movs	r1, r3
    7b5a:	0010      	movs	r0, r2
    7b5c:	4b44      	ldr	r3, [pc, #272]	; (7c70 <dir_next+0x1e0>)
    7b5e:	4798      	blx	r3
    7b60:	0003      	movs	r3, r0
    7b62:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    7b64:	68fb      	ldr	r3, [r7, #12]
    7b66:	2b00      	cmp	r3, #0
    7b68:	d101      	bne.n	7b6e <dir_next+0xde>
    7b6a:	2307      	movs	r3, #7
    7b6c:	e079      	b.n	7c62 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
    7b6e:	68fb      	ldr	r3, [r7, #12]
    7b70:	2b01      	cmp	r3, #1
    7b72:	d101      	bne.n	7b78 <dir_next+0xe8>
    7b74:	2302      	movs	r3, #2
    7b76:	e074      	b.n	7c62 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    7b78:	68fb      	ldr	r3, [r7, #12]
    7b7a:	3301      	adds	r3, #1
    7b7c:	d101      	bne.n	7b82 <dir_next+0xf2>
    7b7e:	2301      	movs	r3, #1
    7b80:	e06f      	b.n	7c62 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    7b82:	687b      	ldr	r3, [r7, #4]
    7b84:	681b      	ldr	r3, [r3, #0]
    7b86:	2100      	movs	r1, #0
    7b88:	0018      	movs	r0, r3
    7b8a:	4b3a      	ldr	r3, [pc, #232]	; (7c74 <dir_next+0x1e4>)
    7b8c:	4798      	blx	r3
    7b8e:	1e03      	subs	r3, r0, #0
    7b90:	d001      	beq.n	7b96 <dir_next+0x106>
    7b92:	2301      	movs	r3, #1
    7b94:	e065      	b.n	7c62 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	681b      	ldr	r3, [r3, #0]
    7b9a:	3330      	adds	r3, #48	; 0x30
    7b9c:	0018      	movs	r0, r3
    7b9e:	2380      	movs	r3, #128	; 0x80
    7ba0:	009b      	lsls	r3, r3, #2
    7ba2:	001a      	movs	r2, r3
    7ba4:	2100      	movs	r1, #0
    7ba6:	4b34      	ldr	r3, [pc, #208]	; (7c78 <dir_next+0x1e8>)
    7ba8:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    7baa:	687b      	ldr	r3, [r7, #4]
    7bac:	681c      	ldr	r4, [r3, #0]
    7bae:	687b      	ldr	r3, [r7, #4]
    7bb0:	681b      	ldr	r3, [r3, #0]
    7bb2:	68fa      	ldr	r2, [r7, #12]
    7bb4:	0011      	movs	r1, r2
    7bb6:	0018      	movs	r0, r3
    7bb8:	4b30      	ldr	r3, [pc, #192]	; (7c7c <dir_next+0x1ec>)
    7bba:	4798      	blx	r3
    7bbc:	0003      	movs	r3, r0
    7bbe:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7bc0:	230b      	movs	r3, #11
    7bc2:	18fb      	adds	r3, r7, r3
    7bc4:	2200      	movs	r2, #0
    7bc6:	701a      	strb	r2, [r3, #0]
    7bc8:	e019      	b.n	7bfe <dir_next+0x16e>
						dj->fs->wflag = 1;
    7bca:	687b      	ldr	r3, [r7, #4]
    7bcc:	681b      	ldr	r3, [r3, #0]
    7bce:	2201      	movs	r2, #1
    7bd0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    7bd2:	687b      	ldr	r3, [r7, #4]
    7bd4:	681b      	ldr	r3, [r3, #0]
    7bd6:	2100      	movs	r1, #0
    7bd8:	0018      	movs	r0, r3
    7bda:	4b26      	ldr	r3, [pc, #152]	; (7c74 <dir_next+0x1e4>)
    7bdc:	4798      	blx	r3
    7bde:	1e03      	subs	r3, r0, #0
    7be0:	d001      	beq.n	7be6 <dir_next+0x156>
    7be2:	2301      	movs	r3, #1
    7be4:	e03d      	b.n	7c62 <dir_next+0x1d2>
						dj->fs->winsect++;
    7be6:	687b      	ldr	r3, [r7, #4]
    7be8:	681b      	ldr	r3, [r3, #0]
    7bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7bec:	3201      	adds	r2, #1
    7bee:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    7bf0:	230b      	movs	r3, #11
    7bf2:	18fb      	adds	r3, r7, r3
    7bf4:	781a      	ldrb	r2, [r3, #0]
    7bf6:	230b      	movs	r3, #11
    7bf8:	18fb      	adds	r3, r7, r3
    7bfa:	3201      	adds	r2, #1
    7bfc:	701a      	strb	r2, [r3, #0]
    7bfe:	687b      	ldr	r3, [r7, #4]
    7c00:	681b      	ldr	r3, [r3, #0]
    7c02:	789b      	ldrb	r3, [r3, #2]
    7c04:	220b      	movs	r2, #11
    7c06:	18ba      	adds	r2, r7, r2
    7c08:	7812      	ldrb	r2, [r2, #0]
    7c0a:	429a      	cmp	r2, r3
    7c0c:	d3dd      	bcc.n	7bca <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    7c0e:	687b      	ldr	r3, [r7, #4]
    7c10:	681b      	ldr	r3, [r3, #0]
    7c12:	687a      	ldr	r2, [r7, #4]
    7c14:	6812      	ldr	r2, [r2, #0]
    7c16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    7c18:	220b      	movs	r2, #11
    7c1a:	18ba      	adds	r2, r7, r2
    7c1c:	7812      	ldrb	r2, [r2, #0]
    7c1e:	1a8a      	subs	r2, r1, r2
    7c20:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    7c22:	687b      	ldr	r3, [r7, #4]
    7c24:	68fa      	ldr	r2, [r7, #12]
    7c26:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    7c28:	687b      	ldr	r3, [r7, #4]
    7c2a:	681b      	ldr	r3, [r3, #0]
    7c2c:	68fa      	ldr	r2, [r7, #12]
    7c2e:	0011      	movs	r1, r2
    7c30:	0018      	movs	r0, r3
    7c32:	4b12      	ldr	r3, [pc, #72]	; (7c7c <dir_next+0x1ec>)
    7c34:	4798      	blx	r3
    7c36:	0002      	movs	r2, r0
    7c38:	687b      	ldr	r3, [r7, #4]
    7c3a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    7c3c:	687b      	ldr	r3, [r7, #4]
    7c3e:	2208      	movs	r2, #8
    7c40:	18ba      	adds	r2, r7, r2
    7c42:	8812      	ldrh	r2, [r2, #0]
    7c44:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    7c46:	687b      	ldr	r3, [r7, #4]
    7c48:	681b      	ldr	r3, [r3, #0]
    7c4a:	3330      	adds	r3, #48	; 0x30
    7c4c:	001a      	movs	r2, r3
    7c4e:	2308      	movs	r3, #8
    7c50:	18fb      	adds	r3, r7, r3
    7c52:	881b      	ldrh	r3, [r3, #0]
    7c54:	210f      	movs	r1, #15
    7c56:	400b      	ands	r3, r1
    7c58:	015b      	lsls	r3, r3, #5
    7c5a:	18d2      	adds	r2, r2, r3
    7c5c:	687b      	ldr	r3, [r7, #4]
    7c5e:	615a      	str	r2, [r3, #20]

	return FR_OK;
    7c60:	2300      	movs	r3, #0
}
    7c62:	0018      	movs	r0, r3
    7c64:	46bd      	mov	sp, r7
    7c66:	b005      	add	sp, #20
    7c68:	bd90      	pop	{r4, r7, pc}
    7c6a:	46c0      	nop			; (mov r8, r8)
    7c6c:	000073b5 	.word	0x000073b5
    7c70:	00007825 	.word	0x00007825
    7c74:	0000711d 	.word	0x0000711d
    7c78:	00007071 	.word	0x00007071
    7c7c:	0000737d 	.word	0x0000737d

00007c80 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
    7c80:	b590      	push	{r4, r7, lr}
    7c82:	b087      	sub	sp, #28
    7c84:	af00      	add	r7, sp, #0
    7c86:	6078      	str	r0, [r7, #4]
    7c88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
    7c8a:	683b      	ldr	r3, [r7, #0]
    7c8c:	781b      	ldrb	r3, [r3, #0]
    7c8e:	001a      	movs	r2, r3
    7c90:	2340      	movs	r3, #64	; 0x40
    7c92:	439a      	bics	r2, r3
    7c94:	0013      	movs	r3, r2
    7c96:	1e5a      	subs	r2, r3, #1
    7c98:	0013      	movs	r3, r2
    7c9a:	005b      	lsls	r3, r3, #1
    7c9c:	189b      	adds	r3, r3, r2
    7c9e:	009b      	lsls	r3, r3, #2
    7ca0:	189b      	adds	r3, r3, r2
    7ca2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
    7ca4:	2300      	movs	r3, #0
    7ca6:	613b      	str	r3, [r7, #16]
    7ca8:	230e      	movs	r3, #14
    7caa:	18fb      	adds	r3, r7, r3
    7cac:	2201      	movs	r2, #1
    7cae:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
    7cb0:	4a31      	ldr	r2, [pc, #196]	; (7d78 <cmp_lfn+0xf8>)
    7cb2:	693b      	ldr	r3, [r7, #16]
    7cb4:	18d3      	adds	r3, r2, r3
    7cb6:	781b      	ldrb	r3, [r3, #0]
    7cb8:	3301      	adds	r3, #1
    7cba:	683a      	ldr	r2, [r7, #0]
    7cbc:	18d3      	adds	r3, r2, r3
    7cbe:	781b      	ldrb	r3, [r3, #0]
    7cc0:	021b      	lsls	r3, r3, #8
    7cc2:	b21a      	sxth	r2, r3
    7cc4:	492c      	ldr	r1, [pc, #176]	; (7d78 <cmp_lfn+0xf8>)
    7cc6:	693b      	ldr	r3, [r7, #16]
    7cc8:	18cb      	adds	r3, r1, r3
    7cca:	781b      	ldrb	r3, [r3, #0]
    7ccc:	0019      	movs	r1, r3
    7cce:	683b      	ldr	r3, [r7, #0]
    7cd0:	185b      	adds	r3, r3, r1
    7cd2:	781b      	ldrb	r3, [r3, #0]
    7cd4:	b21b      	sxth	r3, r3
    7cd6:	4313      	orrs	r3, r2
    7cd8:	b21a      	sxth	r2, r3
    7cda:	230c      	movs	r3, #12
    7cdc:	18fb      	adds	r3, r7, r3
    7cde:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
    7ce0:	230e      	movs	r3, #14
    7ce2:	18fb      	adds	r3, r7, r3
    7ce4:	881b      	ldrh	r3, [r3, #0]
    7ce6:	2b00      	cmp	r3, #0
    7ce8:	d01f      	beq.n	7d2a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
    7cea:	230e      	movs	r3, #14
    7cec:	18fc      	adds	r4, r7, r3
    7cee:	230c      	movs	r3, #12
    7cf0:	18fb      	adds	r3, r7, r3
    7cf2:	881b      	ldrh	r3, [r3, #0]
    7cf4:	0018      	movs	r0, r3
    7cf6:	4b21      	ldr	r3, [pc, #132]	; (7d7c <cmp_lfn+0xfc>)
    7cf8:	4798      	blx	r3
    7cfa:	0003      	movs	r3, r0
    7cfc:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
    7cfe:	697b      	ldr	r3, [r7, #20]
    7d00:	2bfe      	cmp	r3, #254	; 0xfe
    7d02:	d810      	bhi.n	7d26 <cmp_lfn+0xa6>
    7d04:	697b      	ldr	r3, [r7, #20]
    7d06:	1c5a      	adds	r2, r3, #1
    7d08:	617a      	str	r2, [r7, #20]
    7d0a:	005b      	lsls	r3, r3, #1
    7d0c:	687a      	ldr	r2, [r7, #4]
    7d0e:	18d3      	adds	r3, r2, r3
    7d10:	881b      	ldrh	r3, [r3, #0]
    7d12:	0018      	movs	r0, r3
    7d14:	4b19      	ldr	r3, [pc, #100]	; (7d7c <cmp_lfn+0xfc>)
    7d16:	4798      	blx	r3
    7d18:	0003      	movs	r3, r0
    7d1a:	001a      	movs	r2, r3
    7d1c:	230e      	movs	r3, #14
    7d1e:	18fb      	adds	r3, r7, r3
    7d20:	881b      	ldrh	r3, [r3, #0]
    7d22:	4293      	cmp	r3, r2
    7d24:	d009      	beq.n	7d3a <cmp_lfn+0xba>
				return 0;				/* Not matched */
    7d26:	2300      	movs	r3, #0
    7d28:	e022      	b.n	7d70 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
    7d2a:	230c      	movs	r3, #12
    7d2c:	18fb      	adds	r3, r7, r3
    7d2e:	881b      	ldrh	r3, [r3, #0]
    7d30:	4a13      	ldr	r2, [pc, #76]	; (7d80 <cmp_lfn+0x100>)
    7d32:	4293      	cmp	r3, r2
    7d34:	d001      	beq.n	7d3a <cmp_lfn+0xba>
    7d36:	2300      	movs	r3, #0
    7d38:	e01a      	b.n	7d70 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
    7d3a:	693b      	ldr	r3, [r7, #16]
    7d3c:	3301      	adds	r3, #1
    7d3e:	613b      	str	r3, [r7, #16]
    7d40:	693b      	ldr	r3, [r7, #16]
    7d42:	2b0c      	cmp	r3, #12
    7d44:	d9b4      	bls.n	7cb0 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
    7d46:	683b      	ldr	r3, [r7, #0]
    7d48:	781b      	ldrb	r3, [r3, #0]
    7d4a:	001a      	movs	r2, r3
    7d4c:	2340      	movs	r3, #64	; 0x40
    7d4e:	4013      	ands	r3, r2
    7d50:	d00d      	beq.n	7d6e <cmp_lfn+0xee>
    7d52:	230e      	movs	r3, #14
    7d54:	18fb      	adds	r3, r7, r3
    7d56:	881b      	ldrh	r3, [r3, #0]
    7d58:	2b00      	cmp	r3, #0
    7d5a:	d008      	beq.n	7d6e <cmp_lfn+0xee>
    7d5c:	697b      	ldr	r3, [r7, #20]
    7d5e:	005b      	lsls	r3, r3, #1
    7d60:	687a      	ldr	r2, [r7, #4]
    7d62:	18d3      	adds	r3, r2, r3
    7d64:	881b      	ldrh	r3, [r3, #0]
    7d66:	2b00      	cmp	r3, #0
    7d68:	d001      	beq.n	7d6e <cmp_lfn+0xee>
		return 0;
    7d6a:	2300      	movs	r3, #0
    7d6c:	e000      	b.n	7d70 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
    7d6e:	2301      	movs	r3, #1
}
    7d70:	0018      	movs	r0, r3
    7d72:	46bd      	mov	sp, r7
    7d74:	b007      	add	sp, #28
    7d76:	bd90      	pop	{r4, r7, pc}
    7d78:	0000afe4 	.word	0x0000afe4
    7d7c:	00009dc1 	.word	0x00009dc1
    7d80:	0000ffff 	.word	0x0000ffff

00007d84 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
    7d84:	b580      	push	{r7, lr}
    7d86:	b088      	sub	sp, #32
    7d88:	af00      	add	r7, sp, #0
    7d8a:	60f8      	str	r0, [r7, #12]
    7d8c:	60b9      	str	r1, [r7, #8]
    7d8e:	0019      	movs	r1, r3
    7d90:	1dfb      	adds	r3, r7, #7
    7d92:	701a      	strb	r2, [r3, #0]
    7d94:	1dbb      	adds	r3, r7, #6
    7d96:	1c0a      	adds	r2, r1, #0
    7d98:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
    7d9a:	68bb      	ldr	r3, [r7, #8]
    7d9c:	330d      	adds	r3, #13
    7d9e:	1dba      	adds	r2, r7, #6
    7da0:	7812      	ldrb	r2, [r2, #0]
    7da2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
    7da4:	68bb      	ldr	r3, [r7, #8]
    7da6:	330b      	adds	r3, #11
    7da8:	220f      	movs	r2, #15
    7daa:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
    7dac:	68bb      	ldr	r3, [r7, #8]
    7dae:	330c      	adds	r3, #12
    7db0:	2200      	movs	r2, #0
    7db2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
    7db4:	68bb      	ldr	r3, [r7, #8]
    7db6:	331a      	adds	r3, #26
    7db8:	2200      	movs	r2, #0
    7dba:	701a      	strb	r2, [r3, #0]
    7dbc:	68bb      	ldr	r3, [r7, #8]
    7dbe:	331b      	adds	r3, #27
    7dc0:	2200      	movs	r2, #0
    7dc2:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
    7dc4:	1dfb      	adds	r3, r7, #7
    7dc6:	781b      	ldrb	r3, [r3, #0]
    7dc8:	1e5a      	subs	r2, r3, #1
    7dca:	0013      	movs	r3, r2
    7dcc:	005b      	lsls	r3, r3, #1
    7dce:	189b      	adds	r3, r3, r2
    7dd0:	009b      	lsls	r3, r3, #2
    7dd2:	189b      	adds	r3, r3, r2
    7dd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
    7dd6:	2316      	movs	r3, #22
    7dd8:	18fb      	adds	r3, r7, r3
    7dda:	2200      	movs	r2, #0
    7ddc:	801a      	strh	r2, [r3, #0]
    7dde:	2300      	movs	r3, #0
    7de0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
    7de2:	2316      	movs	r3, #22
    7de4:	18fb      	adds	r3, r7, r3
    7de6:	881b      	ldrh	r3, [r3, #0]
    7de8:	4a28      	ldr	r2, [pc, #160]	; (7e8c <fit_lfn+0x108>)
    7dea:	4293      	cmp	r3, r2
    7dec:	d009      	beq.n	7e02 <fit_lfn+0x7e>
    7dee:	69fb      	ldr	r3, [r7, #28]
    7df0:	1c5a      	adds	r2, r3, #1
    7df2:	61fa      	str	r2, [r7, #28]
    7df4:	005b      	lsls	r3, r3, #1
    7df6:	68fa      	ldr	r2, [r7, #12]
    7df8:	18d2      	adds	r2, r2, r3
    7dfa:	2316      	movs	r3, #22
    7dfc:	18fb      	adds	r3, r7, r3
    7dfe:	8812      	ldrh	r2, [r2, #0]
    7e00:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
    7e02:	4a23      	ldr	r2, [pc, #140]	; (7e90 <fit_lfn+0x10c>)
    7e04:	69bb      	ldr	r3, [r7, #24]
    7e06:	18d3      	adds	r3, r2, r3
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	001a      	movs	r2, r3
    7e0c:	68bb      	ldr	r3, [r7, #8]
    7e0e:	189b      	adds	r3, r3, r2
    7e10:	2216      	movs	r2, #22
    7e12:	18ba      	adds	r2, r7, r2
    7e14:	8812      	ldrh	r2, [r2, #0]
    7e16:	b2d2      	uxtb	r2, r2
    7e18:	701a      	strb	r2, [r3, #0]
    7e1a:	4a1d      	ldr	r2, [pc, #116]	; (7e90 <fit_lfn+0x10c>)
    7e1c:	69bb      	ldr	r3, [r7, #24]
    7e1e:	18d3      	adds	r3, r2, r3
    7e20:	781b      	ldrb	r3, [r3, #0]
    7e22:	3301      	adds	r3, #1
    7e24:	68ba      	ldr	r2, [r7, #8]
    7e26:	18d3      	adds	r3, r2, r3
    7e28:	2216      	movs	r2, #22
    7e2a:	18ba      	adds	r2, r7, r2
    7e2c:	8812      	ldrh	r2, [r2, #0]
    7e2e:	0a12      	lsrs	r2, r2, #8
    7e30:	b292      	uxth	r2, r2
    7e32:	b2d2      	uxtb	r2, r2
    7e34:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
    7e36:	2316      	movs	r3, #22
    7e38:	18fb      	adds	r3, r7, r3
    7e3a:	881b      	ldrh	r3, [r3, #0]
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d104      	bne.n	7e4a <fit_lfn+0xc6>
    7e40:	2316      	movs	r3, #22
    7e42:	18fb      	adds	r3, r7, r3
    7e44:	2201      	movs	r2, #1
    7e46:	4252      	negs	r2, r2
    7e48:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
    7e4a:	69bb      	ldr	r3, [r7, #24]
    7e4c:	3301      	adds	r3, #1
    7e4e:	61bb      	str	r3, [r7, #24]
    7e50:	69bb      	ldr	r3, [r7, #24]
    7e52:	2b0c      	cmp	r3, #12
    7e54:	d9c5      	bls.n	7de2 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
    7e56:	2316      	movs	r3, #22
    7e58:	18fb      	adds	r3, r7, r3
    7e5a:	881b      	ldrh	r3, [r3, #0]
    7e5c:	4a0b      	ldr	r2, [pc, #44]	; (7e8c <fit_lfn+0x108>)
    7e5e:	4293      	cmp	r3, r2
    7e60:	d006      	beq.n	7e70 <fit_lfn+0xec>
    7e62:	69fb      	ldr	r3, [r7, #28]
    7e64:	005b      	lsls	r3, r3, #1
    7e66:	68fa      	ldr	r2, [r7, #12]
    7e68:	18d3      	adds	r3, r2, r3
    7e6a:	881b      	ldrh	r3, [r3, #0]
    7e6c:	2b00      	cmp	r3, #0
    7e6e:	d105      	bne.n	7e7c <fit_lfn+0xf8>
    7e70:	1dfb      	adds	r3, r7, #7
    7e72:	1dfa      	adds	r2, r7, #7
    7e74:	7812      	ldrb	r2, [r2, #0]
    7e76:	2140      	movs	r1, #64	; 0x40
    7e78:	430a      	orrs	r2, r1
    7e7a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
    7e7c:	68bb      	ldr	r3, [r7, #8]
    7e7e:	1dfa      	adds	r2, r7, #7
    7e80:	7812      	ldrb	r2, [r2, #0]
    7e82:	701a      	strb	r2, [r3, #0]
}
    7e84:	46c0      	nop			; (mov r8, r8)
    7e86:	46bd      	mov	sp, r7
    7e88:	b008      	add	sp, #32
    7e8a:	bd80      	pop	{r7, pc}
    7e8c:	0000ffff 	.word	0x0000ffff
    7e90:	0000afe4 	.word	0x0000afe4

00007e94 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
    7e94:	b580      	push	{r7, lr}
    7e96:	b08a      	sub	sp, #40	; 0x28
    7e98:	af00      	add	r7, sp, #0
    7e9a:	60f8      	str	r0, [r7, #12]
    7e9c:	60b9      	str	r1, [r7, #8]
    7e9e:	607a      	str	r2, [r7, #4]
    7ea0:	001a      	movs	r2, r3
    7ea2:	1cbb      	adds	r3, r7, #2
    7ea4:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
    7ea6:	68b9      	ldr	r1, [r7, #8]
    7ea8:	68fb      	ldr	r3, [r7, #12]
    7eaa:	220b      	movs	r2, #11
    7eac:	0018      	movs	r0, r3
    7eae:	4b38      	ldr	r3, [pc, #224]	; (7f90 <gen_numname+0xfc>)
    7eb0:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
    7eb2:	1cbb      	adds	r3, r7, #2
    7eb4:	881b      	ldrh	r3, [r3, #0]
    7eb6:	2b05      	cmp	r3, #5
    7eb8:	d911      	bls.n	7ede <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
    7eba:	1cbb      	adds	r3, r7, #2
    7ebc:	881b      	ldrh	r3, [r3, #0]
    7ebe:	b29a      	uxth	r2, r3
    7ec0:	0852      	lsrs	r2, r2, #1
    7ec2:	03db      	lsls	r3, r3, #15
    7ec4:	4313      	orrs	r3, r2
    7ec6:	b299      	uxth	r1, r3
    7ec8:	687b      	ldr	r3, [r7, #4]
    7eca:	1c9a      	adds	r2, r3, #2
    7ecc:	607a      	str	r2, [r7, #4]
    7ece:	881a      	ldrh	r2, [r3, #0]
    7ed0:	1cbb      	adds	r3, r7, #2
    7ed2:	188a      	adds	r2, r1, r2
    7ed4:	801a      	strh	r2, [r3, #0]
    7ed6:	687b      	ldr	r3, [r7, #4]
    7ed8:	881b      	ldrh	r3, [r3, #0]
    7eda:	2b00      	cmp	r3, #0
    7edc:	d1ed      	bne.n	7eba <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
    7ede:	2307      	movs	r3, #7
    7ee0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
    7ee2:	1cbb      	adds	r3, r7, #2
    7ee4:	881b      	ldrh	r3, [r3, #0]
    7ee6:	b2db      	uxtb	r3, r3
    7ee8:	220f      	movs	r2, #15
    7eea:	4013      	ands	r3, r2
    7eec:	b2da      	uxtb	r2, r3
    7eee:	2327      	movs	r3, #39	; 0x27
    7ef0:	18fb      	adds	r3, r7, r3
    7ef2:	3230      	adds	r2, #48	; 0x30
    7ef4:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
    7ef6:	2327      	movs	r3, #39	; 0x27
    7ef8:	18fb      	adds	r3, r7, r3
    7efa:	781b      	ldrb	r3, [r3, #0]
    7efc:	2b39      	cmp	r3, #57	; 0x39
    7efe:	d906      	bls.n	7f0e <gen_numname+0x7a>
    7f00:	2327      	movs	r3, #39	; 0x27
    7f02:	18fb      	adds	r3, r7, r3
    7f04:	2227      	movs	r2, #39	; 0x27
    7f06:	18ba      	adds	r2, r7, r2
    7f08:	7812      	ldrb	r2, [r2, #0]
    7f0a:	3207      	adds	r2, #7
    7f0c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
    7f0e:	6a3b      	ldr	r3, [r7, #32]
    7f10:	1e5a      	subs	r2, r3, #1
    7f12:	623a      	str	r2, [r7, #32]
    7f14:	2214      	movs	r2, #20
    7f16:	18ba      	adds	r2, r7, r2
    7f18:	2127      	movs	r1, #39	; 0x27
    7f1a:	1879      	adds	r1, r7, r1
    7f1c:	7809      	ldrb	r1, [r1, #0]
    7f1e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
    7f20:	1cbb      	adds	r3, r7, #2
    7f22:	1cba      	adds	r2, r7, #2
    7f24:	8812      	ldrh	r2, [r2, #0]
    7f26:	0912      	lsrs	r2, r2, #4
    7f28:	801a      	strh	r2, [r3, #0]
	} while (seq);
    7f2a:	1cbb      	adds	r3, r7, #2
    7f2c:	881b      	ldrh	r3, [r3, #0]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d1d7      	bne.n	7ee2 <gen_numname+0x4e>
	ns[i] = '~';
    7f32:	2314      	movs	r3, #20
    7f34:	18fa      	adds	r2, r7, r3
    7f36:	6a3b      	ldr	r3, [r7, #32]
    7f38:	18d3      	adds	r3, r2, r3
    7f3a:	227e      	movs	r2, #126	; 0x7e
    7f3c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
    7f3e:	2300      	movs	r3, #0
    7f40:	61fb      	str	r3, [r7, #28]
    7f42:	e002      	b.n	7f4a <gen_numname+0xb6>
    7f44:	69fb      	ldr	r3, [r7, #28]
    7f46:	3301      	adds	r3, #1
    7f48:	61fb      	str	r3, [r7, #28]
    7f4a:	69fa      	ldr	r2, [r7, #28]
    7f4c:	6a3b      	ldr	r3, [r7, #32]
    7f4e:	429a      	cmp	r2, r3
    7f50:	d205      	bcs.n	7f5e <gen_numname+0xca>
    7f52:	68fa      	ldr	r2, [r7, #12]
    7f54:	69fb      	ldr	r3, [r7, #28]
    7f56:	18d3      	adds	r3, r2, r3
    7f58:	781b      	ldrb	r3, [r3, #0]
    7f5a:	2b20      	cmp	r3, #32
    7f5c:	d1f2      	bne.n	7f44 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
    7f5e:	69fb      	ldr	r3, [r7, #28]
    7f60:	1c5a      	adds	r2, r3, #1
    7f62:	61fa      	str	r2, [r7, #28]
    7f64:	68fa      	ldr	r2, [r7, #12]
    7f66:	18d2      	adds	r2, r2, r3
    7f68:	6a3b      	ldr	r3, [r7, #32]
    7f6a:	2b07      	cmp	r3, #7
    7f6c:	d806      	bhi.n	7f7c <gen_numname+0xe8>
    7f6e:	6a3b      	ldr	r3, [r7, #32]
    7f70:	1c59      	adds	r1, r3, #1
    7f72:	6239      	str	r1, [r7, #32]
    7f74:	2114      	movs	r1, #20
    7f76:	1879      	adds	r1, r7, r1
    7f78:	5ccb      	ldrb	r3, [r1, r3]
    7f7a:	e000      	b.n	7f7e <gen_numname+0xea>
    7f7c:	2320      	movs	r3, #32
    7f7e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
    7f80:	69fb      	ldr	r3, [r7, #28]
    7f82:	2b07      	cmp	r3, #7
    7f84:	d9eb      	bls.n	7f5e <gen_numname+0xca>
}
    7f86:	46c0      	nop			; (mov r8, r8)
    7f88:	46bd      	mov	sp, r7
    7f8a:	b00a      	add	sp, #40	; 0x28
    7f8c:	bd80      	pop	{r7, pc}
    7f8e:	46c0      	nop			; (mov r8, r8)
    7f90:	00007039 	.word	0x00007039

00007f94 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
    7f94:	b580      	push	{r7, lr}
    7f96:	b084      	sub	sp, #16
    7f98:	af00      	add	r7, sp, #0
    7f9a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
    7f9c:	230f      	movs	r3, #15
    7f9e:	18fb      	adds	r3, r7, r3
    7fa0:	2200      	movs	r2, #0
    7fa2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
    7fa4:	230b      	movs	r3, #11
    7fa6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
    7fa8:	230f      	movs	r3, #15
    7faa:	18fb      	adds	r3, r7, r3
    7fac:	781b      	ldrb	r3, [r3, #0]
    7fae:	b2da      	uxtb	r2, r3
    7fb0:	0852      	lsrs	r2, r2, #1
    7fb2:	01db      	lsls	r3, r3, #7
    7fb4:	4313      	orrs	r3, r2
    7fb6:	b2d9      	uxtb	r1, r3
    7fb8:	687b      	ldr	r3, [r7, #4]
    7fba:	1c5a      	adds	r2, r3, #1
    7fbc:	607a      	str	r2, [r7, #4]
    7fbe:	781a      	ldrb	r2, [r3, #0]
    7fc0:	230f      	movs	r3, #15
    7fc2:	18fb      	adds	r3, r7, r3
    7fc4:	188a      	adds	r2, r1, r2
    7fc6:	701a      	strb	r2, [r3, #0]
    7fc8:	68bb      	ldr	r3, [r7, #8]
    7fca:	3b01      	subs	r3, #1
    7fcc:	60bb      	str	r3, [r7, #8]
    7fce:	68bb      	ldr	r3, [r7, #8]
    7fd0:	2b00      	cmp	r3, #0
    7fd2:	d1e9      	bne.n	7fa8 <sum_sfn+0x14>
	return sum;
    7fd4:	230f      	movs	r3, #15
    7fd6:	18fb      	adds	r3, r7, r3
    7fd8:	781b      	ldrb	r3, [r3, #0]
}
    7fda:	0018      	movs	r0, r3
    7fdc:	46bd      	mov	sp, r7
    7fde:	b004      	add	sp, #16
    7fe0:	bd80      	pop	{r7, pc}
	...

00007fe4 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    7fe4:	b590      	push	{r4, r7, lr}
    7fe6:	b087      	sub	sp, #28
    7fe8:	af00      	add	r7, sp, #0
    7fea:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    7fec:	2317      	movs	r3, #23
    7fee:	18fc      	adds	r4, r7, r3
    7ff0:	687b      	ldr	r3, [r7, #4]
    7ff2:	2100      	movs	r1, #0
    7ff4:	0018      	movs	r0, r3
    7ff6:	4b74      	ldr	r3, [pc, #464]	; (81c8 <dir_find+0x1e4>)
    7ff8:	4798      	blx	r3
    7ffa:	0003      	movs	r3, r0
    7ffc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    7ffe:	2317      	movs	r3, #23
    8000:	18fb      	adds	r3, r7, r3
    8002:	781b      	ldrb	r3, [r3, #0]
    8004:	2b00      	cmp	r3, #0
    8006:	d003      	beq.n	8010 <dir_find+0x2c>
    8008:	2317      	movs	r3, #23
    800a:	18fb      	adds	r3, r7, r3
    800c:	781b      	ldrb	r3, [r3, #0]
    800e:	e0d6      	b.n	81be <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
    8010:	2314      	movs	r3, #20
    8012:	18fb      	adds	r3, r7, r3
    8014:	22ff      	movs	r2, #255	; 0xff
    8016:	701a      	strb	r2, [r3, #0]
    8018:	2315      	movs	r3, #21
    801a:	18fb      	adds	r3, r7, r3
    801c:	2214      	movs	r2, #20
    801e:	18ba      	adds	r2, r7, r2
    8020:	7812      	ldrb	r2, [r2, #0]
    8022:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    8024:	687b      	ldr	r3, [r7, #4]
    8026:	681a      	ldr	r2, [r3, #0]
    8028:	687b      	ldr	r3, [r7, #4]
    802a:	691b      	ldr	r3, [r3, #16]
    802c:	2117      	movs	r1, #23
    802e:	187c      	adds	r4, r7, r1
    8030:	0019      	movs	r1, r3
    8032:	0010      	movs	r0, r2
    8034:	4b65      	ldr	r3, [pc, #404]	; (81cc <dir_find+0x1e8>)
    8036:	4798      	blx	r3
    8038:	0003      	movs	r3, r0
    803a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    803c:	2317      	movs	r3, #23
    803e:	18fb      	adds	r3, r7, r3
    8040:	781b      	ldrb	r3, [r3, #0]
    8042:	2b00      	cmp	r3, #0
    8044:	d000      	beq.n	8048 <dir_find+0x64>
    8046:	e0b2      	b.n	81ae <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    8048:	687b      	ldr	r3, [r7, #4]
    804a:	695b      	ldr	r3, [r3, #20]
    804c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    804e:	2316      	movs	r3, #22
    8050:	18fb      	adds	r3, r7, r3
    8052:	693a      	ldr	r2, [r7, #16]
    8054:	7812      	ldrb	r2, [r2, #0]
    8056:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    8058:	2316      	movs	r3, #22
    805a:	18fb      	adds	r3, r7, r3
    805c:	781b      	ldrb	r3, [r3, #0]
    805e:	2b00      	cmp	r3, #0
    8060:	d104      	bne.n	806c <dir_find+0x88>
    8062:	2317      	movs	r3, #23
    8064:	18fb      	adds	r3, r7, r3
    8066:	2204      	movs	r2, #4
    8068:	701a      	strb	r2, [r3, #0]
    806a:	e0a5      	b.n	81b8 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
    806c:	693b      	ldr	r3, [r7, #16]
    806e:	330b      	adds	r3, #11
    8070:	781a      	ldrb	r2, [r3, #0]
    8072:	230f      	movs	r3, #15
    8074:	18fb      	adds	r3, r7, r3
    8076:	213f      	movs	r1, #63	; 0x3f
    8078:	400a      	ands	r2, r1
    807a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
    807c:	2316      	movs	r3, #22
    807e:	18fb      	adds	r3, r7, r3
    8080:	781b      	ldrb	r3, [r3, #0]
    8082:	2be5      	cmp	r3, #229	; 0xe5
    8084:	d00a      	beq.n	809c <dir_find+0xb8>
    8086:	230f      	movs	r3, #15
    8088:	18fb      	adds	r3, r7, r3
    808a:	781b      	ldrb	r3, [r3, #0]
    808c:	2208      	movs	r2, #8
    808e:	4013      	ands	r3, r2
    8090:	d009      	beq.n	80a6 <dir_find+0xc2>
    8092:	230f      	movs	r3, #15
    8094:	18fb      	adds	r3, r7, r3
    8096:	781b      	ldrb	r3, [r3, #0]
    8098:	2b0f      	cmp	r3, #15
    809a:	d004      	beq.n	80a6 <dir_find+0xc2>
			ord = 0xFF;
    809c:	2315      	movs	r3, #21
    809e:	18fb      	adds	r3, r7, r3
    80a0:	22ff      	movs	r2, #255	; 0xff
    80a2:	701a      	strb	r2, [r3, #0]
    80a4:	e073      	b.n	818e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
    80a6:	230f      	movs	r3, #15
    80a8:	18fb      	adds	r3, r7, r3
    80aa:	781b      	ldrb	r3, [r3, #0]
    80ac:	2b0f      	cmp	r3, #15
    80ae:	d145      	bne.n	813c <dir_find+0x158>
				if (dj->lfn) {
    80b0:	687b      	ldr	r3, [r7, #4]
    80b2:	69db      	ldr	r3, [r3, #28]
    80b4:	2b00      	cmp	r3, #0
    80b6:	d100      	bne.n	80ba <dir_find+0xd6>
    80b8:	e069      	b.n	818e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
    80ba:	2316      	movs	r3, #22
    80bc:	18fb      	adds	r3, r7, r3
    80be:	781b      	ldrb	r3, [r3, #0]
    80c0:	2240      	movs	r2, #64	; 0x40
    80c2:	4013      	ands	r3, r2
    80c4:	d016      	beq.n	80f4 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
    80c6:	2314      	movs	r3, #20
    80c8:	18fb      	adds	r3, r7, r3
    80ca:	693a      	ldr	r2, [r7, #16]
    80cc:	7b52      	ldrb	r2, [r2, #13]
    80ce:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
    80d0:	2316      	movs	r3, #22
    80d2:	18fb      	adds	r3, r7, r3
    80d4:	2216      	movs	r2, #22
    80d6:	18ba      	adds	r2, r7, r2
    80d8:	7812      	ldrb	r2, [r2, #0]
    80da:	2140      	movs	r1, #64	; 0x40
    80dc:	438a      	bics	r2, r1
    80de:	701a      	strb	r2, [r3, #0]
    80e0:	2315      	movs	r3, #21
    80e2:	18fb      	adds	r3, r7, r3
    80e4:	2216      	movs	r2, #22
    80e6:	18ba      	adds	r2, r7, r2
    80e8:	7812      	ldrb	r2, [r2, #0]
    80ea:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
    80ec:	687b      	ldr	r3, [r7, #4]
    80ee:	88da      	ldrh	r2, [r3, #6]
    80f0:	687b      	ldr	r3, [r7, #4]
    80f2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
    80f4:	2316      	movs	r3, #22
    80f6:	18fa      	adds	r2, r7, r3
    80f8:	2315      	movs	r3, #21
    80fa:	18fb      	adds	r3, r7, r3
    80fc:	7812      	ldrb	r2, [r2, #0]
    80fe:	781b      	ldrb	r3, [r3, #0]
    8100:	429a      	cmp	r2, r3
    8102:	d116      	bne.n	8132 <dir_find+0x14e>
    8104:	693b      	ldr	r3, [r7, #16]
    8106:	330d      	adds	r3, #13
    8108:	781b      	ldrb	r3, [r3, #0]
    810a:	2214      	movs	r2, #20
    810c:	18ba      	adds	r2, r7, r2
    810e:	7812      	ldrb	r2, [r2, #0]
    8110:	429a      	cmp	r2, r3
    8112:	d10e      	bne.n	8132 <dir_find+0x14e>
    8114:	687b      	ldr	r3, [r7, #4]
    8116:	69db      	ldr	r3, [r3, #28]
    8118:	693a      	ldr	r2, [r7, #16]
    811a:	0011      	movs	r1, r2
    811c:	0018      	movs	r0, r3
    811e:	4b2c      	ldr	r3, [pc, #176]	; (81d0 <dir_find+0x1ec>)
    8120:	4798      	blx	r3
    8122:	1e03      	subs	r3, r0, #0
    8124:	d005      	beq.n	8132 <dir_find+0x14e>
    8126:	2315      	movs	r3, #21
    8128:	18fb      	adds	r3, r7, r3
    812a:	781b      	ldrb	r3, [r3, #0]
    812c:	3b01      	subs	r3, #1
    812e:	b2da      	uxtb	r2, r3
    8130:	e000      	b.n	8134 <dir_find+0x150>
    8132:	22ff      	movs	r2, #255	; 0xff
    8134:	2315      	movs	r3, #21
    8136:	18fb      	adds	r3, r7, r3
    8138:	701a      	strb	r2, [r3, #0]
    813a:	e028      	b.n	818e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    813c:	2315      	movs	r3, #21
    813e:	18fb      	adds	r3, r7, r3
    8140:	781b      	ldrb	r3, [r3, #0]
    8142:	2b00      	cmp	r3, #0
    8144:	d10a      	bne.n	815c <dir_find+0x178>
    8146:	693b      	ldr	r3, [r7, #16]
    8148:	0018      	movs	r0, r3
    814a:	4b22      	ldr	r3, [pc, #136]	; (81d4 <dir_find+0x1f0>)
    814c:	4798      	blx	r3
    814e:	0003      	movs	r3, r0
    8150:	001a      	movs	r2, r3
    8152:	2314      	movs	r3, #20
    8154:	18fb      	adds	r3, r7, r3
    8156:	781b      	ldrb	r3, [r3, #0]
    8158:	4293      	cmp	r3, r2
    815a:	d02a      	beq.n	81b2 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
    815c:	2315      	movs	r3, #21
    815e:	18fb      	adds	r3, r7, r3
    8160:	22ff      	movs	r2, #255	; 0xff
    8162:	701a      	strb	r2, [r3, #0]
    8164:	687b      	ldr	r3, [r7, #4]
    8166:	2201      	movs	r2, #1
    8168:	4252      	negs	r2, r2
    816a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    816c:	687b      	ldr	r3, [r7, #4]
    816e:	699b      	ldr	r3, [r3, #24]
    8170:	330b      	adds	r3, #11
    8172:	781b      	ldrb	r3, [r3, #0]
    8174:	001a      	movs	r2, r3
    8176:	2301      	movs	r3, #1
    8178:	4013      	ands	r3, r2
    817a:	d108      	bne.n	818e <dir_find+0x1aa>
    817c:	687b      	ldr	r3, [r7, #4]
    817e:	6999      	ldr	r1, [r3, #24]
    8180:	693b      	ldr	r3, [r7, #16]
    8182:	220b      	movs	r2, #11
    8184:	0018      	movs	r0, r3
    8186:	4b14      	ldr	r3, [pc, #80]	; (81d8 <dir_find+0x1f4>)
    8188:	4798      	blx	r3
    818a:	1e03      	subs	r3, r0, #0
    818c:	d013      	beq.n	81b6 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    818e:	2317      	movs	r3, #23
    8190:	18fc      	adds	r4, r7, r3
    8192:	687b      	ldr	r3, [r7, #4]
    8194:	2100      	movs	r1, #0
    8196:	0018      	movs	r0, r3
    8198:	4b10      	ldr	r3, [pc, #64]	; (81dc <dir_find+0x1f8>)
    819a:	4798      	blx	r3
    819c:	0003      	movs	r3, r0
    819e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    81a0:	2317      	movs	r3, #23
    81a2:	18fb      	adds	r3, r7, r3
    81a4:	781b      	ldrb	r3, [r3, #0]
    81a6:	2b00      	cmp	r3, #0
    81a8:	d100      	bne.n	81ac <dir_find+0x1c8>
    81aa:	e73b      	b.n	8024 <dir_find+0x40>
    81ac:	e004      	b.n	81b8 <dir_find+0x1d4>
		if (res != FR_OK) break;
    81ae:	46c0      	nop			; (mov r8, r8)
    81b0:	e002      	b.n	81b8 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
    81b2:	46c0      	nop			; (mov r8, r8)
    81b4:	e000      	b.n	81b8 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
    81b6:	46c0      	nop			; (mov r8, r8)

	return res;
    81b8:	2317      	movs	r3, #23
    81ba:	18fb      	adds	r3, r7, r3
    81bc:	781b      	ldrb	r3, [r3, #0]
}
    81be:	0018      	movs	r0, r3
    81c0:	46bd      	mov	sp, r7
    81c2:	b007      	add	sp, #28
    81c4:	bd90      	pop	{r4, r7, pc}
    81c6:	46c0      	nop			; (mov r8, r8)
    81c8:	00007961 	.word	0x00007961
    81cc:	0000711d 	.word	0x0000711d
    81d0:	00007c81 	.word	0x00007c81
    81d4:	00007f95 	.word	0x00007f95
    81d8:	000070a1 	.word	0x000070a1
    81dc:	00007a91 	.word	0x00007a91

000081e0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    81e0:	b590      	push	{r4, r7, lr}
    81e2:	b08d      	sub	sp, #52	; 0x34
    81e4:	af00      	add	r7, sp, #0
    81e6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
    81e8:	687b      	ldr	r3, [r7, #4]
    81ea:	699b      	ldr	r3, [r3, #24]
    81ec:	627b      	str	r3, [r7, #36]	; 0x24
    81ee:	687b      	ldr	r3, [r7, #4]
    81f0:	69db      	ldr	r3, [r3, #28]
    81f2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
    81f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
    81f6:	230c      	movs	r3, #12
    81f8:	18fb      	adds	r3, r7, r3
    81fa:	220c      	movs	r2, #12
    81fc:	0018      	movs	r0, r3
    81fe:	4bc8      	ldr	r3, [pc, #800]	; (8520 <dir_register+0x340>)
    8200:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
    8202:	230c      	movs	r3, #12
    8204:	18fb      	adds	r3, r7, r3
    8206:	7adb      	ldrb	r3, [r3, #11]
    8208:	001a      	movs	r2, r3
    820a:	2301      	movs	r3, #1
    820c:	4013      	ands	r3, r2
    820e:	d048      	beq.n	82a2 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
    8210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8212:	330b      	adds	r3, #11
    8214:	2200      	movs	r2, #0
    8216:	701a      	strb	r2, [r3, #0]
    8218:	687b      	ldr	r3, [r7, #4]
    821a:	2200      	movs	r2, #0
    821c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
    821e:	232c      	movs	r3, #44	; 0x2c
    8220:	18fb      	adds	r3, r7, r3
    8222:	2201      	movs	r2, #1
    8224:	801a      	strh	r2, [r3, #0]
    8226:	e01c      	b.n	8262 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
    8228:	232c      	movs	r3, #44	; 0x2c
    822a:	18fb      	adds	r3, r7, r3
    822c:	881b      	ldrh	r3, [r3, #0]
    822e:	6a3a      	ldr	r2, [r7, #32]
    8230:	210c      	movs	r1, #12
    8232:	1879      	adds	r1, r7, r1
    8234:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8236:	4cbb      	ldr	r4, [pc, #748]	; (8524 <dir_register+0x344>)
    8238:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
    823a:	232f      	movs	r3, #47	; 0x2f
    823c:	18fc      	adds	r4, r7, r3
    823e:	687b      	ldr	r3, [r7, #4]
    8240:	0018      	movs	r0, r3
    8242:	4bb9      	ldr	r3, [pc, #740]	; (8528 <dir_register+0x348>)
    8244:	4798      	blx	r3
    8246:	0003      	movs	r3, r0
    8248:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    824a:	232f      	movs	r3, #47	; 0x2f
    824c:	18fb      	adds	r3, r7, r3
    824e:	781b      	ldrb	r3, [r3, #0]
    8250:	2b00      	cmp	r3, #0
    8252:	d10c      	bne.n	826e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
    8254:	232c      	movs	r3, #44	; 0x2c
    8256:	18fb      	adds	r3, r7, r3
    8258:	881a      	ldrh	r2, [r3, #0]
    825a:	232c      	movs	r3, #44	; 0x2c
    825c:	18fb      	adds	r3, r7, r3
    825e:	3201      	adds	r2, #1
    8260:	801a      	strh	r2, [r3, #0]
    8262:	232c      	movs	r3, #44	; 0x2c
    8264:	18fb      	adds	r3, r7, r3
    8266:	881b      	ldrh	r3, [r3, #0]
    8268:	2b63      	cmp	r3, #99	; 0x63
    826a:	d9dd      	bls.n	8228 <dir_register+0x48>
    826c:	e000      	b.n	8270 <dir_register+0x90>
			if (res != FR_OK) break;
    826e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
    8270:	232c      	movs	r3, #44	; 0x2c
    8272:	18fb      	adds	r3, r7, r3
    8274:	881b      	ldrh	r3, [r3, #0]
    8276:	2b64      	cmp	r3, #100	; 0x64
    8278:	d101      	bne.n	827e <dir_register+0x9e>
    827a:	2307      	movs	r3, #7
    827c:	e14c      	b.n	8518 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
    827e:	232f      	movs	r3, #47	; 0x2f
    8280:	18fb      	adds	r3, r7, r3
    8282:	781b      	ldrb	r3, [r3, #0]
    8284:	2b04      	cmp	r3, #4
    8286:	d003      	beq.n	8290 <dir_register+0xb0>
    8288:	232f      	movs	r3, #47	; 0x2f
    828a:	18fb      	adds	r3, r7, r3
    828c:	781b      	ldrb	r3, [r3, #0]
    828e:	e143      	b.n	8518 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
    8290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8292:	330b      	adds	r3, #11
    8294:	220c      	movs	r2, #12
    8296:	18ba      	adds	r2, r7, r2
    8298:	7ad2      	ldrb	r2, [r2, #11]
    829a:	701a      	strb	r2, [r3, #0]
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	6a3a      	ldr	r2, [r7, #32]
    82a0:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
    82a2:	230c      	movs	r3, #12
    82a4:	18fb      	adds	r3, r7, r3
    82a6:	7adb      	ldrb	r3, [r3, #11]
    82a8:	001a      	movs	r2, r3
    82aa:	2302      	movs	r3, #2
    82ac:	4013      	ands	r3, r2
    82ae:	d023      	beq.n	82f8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
    82b0:	232a      	movs	r3, #42	; 0x2a
    82b2:	18fb      	adds	r3, r7, r3
    82b4:	2200      	movs	r2, #0
    82b6:	801a      	strh	r2, [r3, #0]
    82b8:	e006      	b.n	82c8 <dir_register+0xe8>
    82ba:	232a      	movs	r3, #42	; 0x2a
    82bc:	18fb      	adds	r3, r7, r3
    82be:	881a      	ldrh	r2, [r3, #0]
    82c0:	232a      	movs	r3, #42	; 0x2a
    82c2:	18fb      	adds	r3, r7, r3
    82c4:	3201      	adds	r2, #1
    82c6:	801a      	strh	r2, [r3, #0]
    82c8:	232a      	movs	r3, #42	; 0x2a
    82ca:	18fb      	adds	r3, r7, r3
    82cc:	881b      	ldrh	r3, [r3, #0]
    82ce:	005b      	lsls	r3, r3, #1
    82d0:	6a3a      	ldr	r2, [r7, #32]
    82d2:	18d3      	adds	r3, r2, r3
    82d4:	881b      	ldrh	r3, [r3, #0]
    82d6:	2b00      	cmp	r3, #0
    82d8:	d1ef      	bne.n	82ba <dir_register+0xda>
		ne = (ne + 25) / 13;
    82da:	232a      	movs	r3, #42	; 0x2a
    82dc:	18fb      	adds	r3, r7, r3
    82de:	881b      	ldrh	r3, [r3, #0]
    82e0:	3319      	adds	r3, #25
    82e2:	001a      	movs	r2, r3
    82e4:	4b91      	ldr	r3, [pc, #580]	; (852c <dir_register+0x34c>)
    82e6:	210d      	movs	r1, #13
    82e8:	0010      	movs	r0, r2
    82ea:	4798      	blx	r3
    82ec:	0003      	movs	r3, r0
    82ee:	001a      	movs	r2, r3
    82f0:	232a      	movs	r3, #42	; 0x2a
    82f2:	18fb      	adds	r3, r7, r3
    82f4:	801a      	strh	r2, [r3, #0]
    82f6:	e003      	b.n	8300 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
    82f8:	232a      	movs	r3, #42	; 0x2a
    82fa:	18fb      	adds	r3, r7, r3
    82fc:	2201      	movs	r2, #1
    82fe:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
    8300:	232f      	movs	r3, #47	; 0x2f
    8302:	18fc      	adds	r4, r7, r3
    8304:	687b      	ldr	r3, [r7, #4]
    8306:	2100      	movs	r1, #0
    8308:	0018      	movs	r0, r3
    830a:	4b89      	ldr	r3, [pc, #548]	; (8530 <dir_register+0x350>)
    830c:	4798      	blx	r3
    830e:	0003      	movs	r3, r0
    8310:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    8312:	232f      	movs	r3, #47	; 0x2f
    8314:	18fb      	adds	r3, r7, r3
    8316:	781b      	ldrb	r3, [r3, #0]
    8318:	2b00      	cmp	r3, #0
    831a:	d003      	beq.n	8324 <dir_register+0x144>
    831c:	232f      	movs	r3, #47	; 0x2f
    831e:	18fb      	adds	r3, r7, r3
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	e0f9      	b.n	8518 <dir_register+0x338>
	n = is = 0;
    8324:	2328      	movs	r3, #40	; 0x28
    8326:	18fb      	adds	r3, r7, r3
    8328:	2200      	movs	r2, #0
    832a:	801a      	strh	r2, [r3, #0]
    832c:	232c      	movs	r3, #44	; 0x2c
    832e:	18fb      	adds	r3, r7, r3
    8330:	2228      	movs	r2, #40	; 0x28
    8332:	18ba      	adds	r2, r7, r2
    8334:	8812      	ldrh	r2, [r2, #0]
    8336:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
    8338:	687b      	ldr	r3, [r7, #4]
    833a:	681a      	ldr	r2, [r3, #0]
    833c:	687b      	ldr	r3, [r7, #4]
    833e:	691b      	ldr	r3, [r3, #16]
    8340:	212f      	movs	r1, #47	; 0x2f
    8342:	187c      	adds	r4, r7, r1
    8344:	0019      	movs	r1, r3
    8346:	0010      	movs	r0, r2
    8348:	4b7a      	ldr	r3, [pc, #488]	; (8534 <dir_register+0x354>)
    834a:	4798      	blx	r3
    834c:	0003      	movs	r3, r0
    834e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    8350:	232f      	movs	r3, #47	; 0x2f
    8352:	18fb      	adds	r3, r7, r3
    8354:	781b      	ldrb	r3, [r3, #0]
    8356:	2b00      	cmp	r3, #0
    8358:	d13c      	bne.n	83d4 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
    835a:	687b      	ldr	r3, [r7, #4]
    835c:	695a      	ldr	r2, [r3, #20]
    835e:	231f      	movs	r3, #31
    8360:	18fb      	adds	r3, r7, r3
    8362:	7812      	ldrb	r2, [r2, #0]
    8364:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
    8366:	231f      	movs	r3, #31
    8368:	18fb      	adds	r3, r7, r3
    836a:	781b      	ldrb	r3, [r3, #0]
    836c:	2be5      	cmp	r3, #229	; 0xe5
    836e:	d004      	beq.n	837a <dir_register+0x19a>
    8370:	231f      	movs	r3, #31
    8372:	18fb      	adds	r3, r7, r3
    8374:	781b      	ldrb	r3, [r3, #0]
    8376:	2b00      	cmp	r3, #0
    8378:	d119      	bne.n	83ae <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
    837a:	232c      	movs	r3, #44	; 0x2c
    837c:	18fb      	adds	r3, r7, r3
    837e:	881b      	ldrh	r3, [r3, #0]
    8380:	2b00      	cmp	r3, #0
    8382:	d104      	bne.n	838e <dir_register+0x1ae>
    8384:	2328      	movs	r3, #40	; 0x28
    8386:	18fb      	adds	r3, r7, r3
    8388:	687a      	ldr	r2, [r7, #4]
    838a:	88d2      	ldrh	r2, [r2, #6]
    838c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
    838e:	232c      	movs	r3, #44	; 0x2c
    8390:	18fb      	adds	r3, r7, r3
    8392:	222c      	movs	r2, #44	; 0x2c
    8394:	18ba      	adds	r2, r7, r2
    8396:	8812      	ldrh	r2, [r2, #0]
    8398:	3201      	adds	r2, #1
    839a:	801a      	strh	r2, [r3, #0]
    839c:	232c      	movs	r3, #44	; 0x2c
    839e:	18fa      	adds	r2, r7, r3
    83a0:	232a      	movs	r3, #42	; 0x2a
    83a2:	18fb      	adds	r3, r7, r3
    83a4:	8812      	ldrh	r2, [r2, #0]
    83a6:	881b      	ldrh	r3, [r3, #0]
    83a8:	429a      	cmp	r2, r3
    83aa:	d104      	bne.n	83b6 <dir_register+0x1d6>
    83ac:	e013      	b.n	83d6 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
    83ae:	232c      	movs	r3, #44	; 0x2c
    83b0:	18fb      	adds	r3, r7, r3
    83b2:	2200      	movs	r2, #0
    83b4:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
    83b6:	232f      	movs	r3, #47	; 0x2f
    83b8:	18fc      	adds	r4, r7, r3
    83ba:	687b      	ldr	r3, [r7, #4]
    83bc:	2101      	movs	r1, #1
    83be:	0018      	movs	r0, r3
    83c0:	4b5d      	ldr	r3, [pc, #372]	; (8538 <dir_register+0x358>)
    83c2:	4798      	blx	r3
    83c4:	0003      	movs	r3, r0
    83c6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    83c8:	232f      	movs	r3, #47	; 0x2f
    83ca:	18fb      	adds	r3, r7, r3
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	2b00      	cmp	r3, #0
    83d0:	d0b2      	beq.n	8338 <dir_register+0x158>
    83d2:	e000      	b.n	83d6 <dir_register+0x1f6>
		if (res != FR_OK) break;
    83d4:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
    83d6:	232f      	movs	r3, #47	; 0x2f
    83d8:	18fb      	adds	r3, r7, r3
    83da:	781b      	ldrb	r3, [r3, #0]
    83dc:	2b00      	cmp	r3, #0
    83de:	d163      	bne.n	84a8 <dir_register+0x2c8>
    83e0:	232a      	movs	r3, #42	; 0x2a
    83e2:	18fb      	adds	r3, r7, r3
    83e4:	881b      	ldrh	r3, [r3, #0]
    83e6:	2b01      	cmp	r3, #1
    83e8:	d95e      	bls.n	84a8 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
    83ea:	232f      	movs	r3, #47	; 0x2f
    83ec:	18fc      	adds	r4, r7, r3
    83ee:	2328      	movs	r3, #40	; 0x28
    83f0:	18fb      	adds	r3, r7, r3
    83f2:	881a      	ldrh	r2, [r3, #0]
    83f4:	687b      	ldr	r3, [r7, #4]
    83f6:	0011      	movs	r1, r2
    83f8:	0018      	movs	r0, r3
    83fa:	4b4d      	ldr	r3, [pc, #308]	; (8530 <dir_register+0x350>)
    83fc:	4798      	blx	r3
    83fe:	0003      	movs	r3, r0
    8400:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    8402:	232f      	movs	r3, #47	; 0x2f
    8404:	18fb      	adds	r3, r7, r3
    8406:	781b      	ldrb	r3, [r3, #0]
    8408:	2b00      	cmp	r3, #0
    840a:	d14d      	bne.n	84a8 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
    840c:	687b      	ldr	r3, [r7, #4]
    840e:	699b      	ldr	r3, [r3, #24]
    8410:	221e      	movs	r2, #30
    8412:	18bc      	adds	r4, r7, r2
    8414:	0018      	movs	r0, r3
    8416:	4b49      	ldr	r3, [pc, #292]	; (853c <dir_register+0x35c>)
    8418:	4798      	blx	r3
    841a:	0003      	movs	r3, r0
    841c:	7023      	strb	r3, [r4, #0]
			ne--;
    841e:	232a      	movs	r3, #42	; 0x2a
    8420:	18fb      	adds	r3, r7, r3
    8422:	881a      	ldrh	r2, [r3, #0]
    8424:	232a      	movs	r3, #42	; 0x2a
    8426:	18fb      	adds	r3, r7, r3
    8428:	3a01      	subs	r2, #1
    842a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
    842c:	687b      	ldr	r3, [r7, #4]
    842e:	681a      	ldr	r2, [r3, #0]
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	691b      	ldr	r3, [r3, #16]
    8434:	212f      	movs	r1, #47	; 0x2f
    8436:	187c      	adds	r4, r7, r1
    8438:	0019      	movs	r1, r3
    843a:	0010      	movs	r0, r2
    843c:	4b3d      	ldr	r3, [pc, #244]	; (8534 <dir_register+0x354>)
    843e:	4798      	blx	r3
    8440:	0003      	movs	r3, r0
    8442:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
    8444:	232f      	movs	r3, #47	; 0x2f
    8446:	18fb      	adds	r3, r7, r3
    8448:	781b      	ldrb	r3, [r3, #0]
    844a:	2b00      	cmp	r3, #0
    844c:	d12b      	bne.n	84a6 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
    844e:	687b      	ldr	r3, [r7, #4]
    8450:	69d8      	ldr	r0, [r3, #28]
    8452:	687b      	ldr	r3, [r7, #4]
    8454:	6959      	ldr	r1, [r3, #20]
    8456:	232a      	movs	r3, #42	; 0x2a
    8458:	18fb      	adds	r3, r7, r3
    845a:	881b      	ldrh	r3, [r3, #0]
    845c:	b2da      	uxtb	r2, r3
    845e:	231e      	movs	r3, #30
    8460:	18fb      	adds	r3, r7, r3
    8462:	781b      	ldrb	r3, [r3, #0]
    8464:	4c36      	ldr	r4, [pc, #216]	; (8540 <dir_register+0x360>)
    8466:	47a0      	blx	r4
				dj->fs->wflag = 1;
    8468:	687b      	ldr	r3, [r7, #4]
    846a:	681b      	ldr	r3, [r3, #0]
    846c:	2201      	movs	r2, #1
    846e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
    8470:	232f      	movs	r3, #47	; 0x2f
    8472:	18fc      	adds	r4, r7, r3
    8474:	687b      	ldr	r3, [r7, #4]
    8476:	2100      	movs	r1, #0
    8478:	0018      	movs	r0, r3
    847a:	4b2f      	ldr	r3, [pc, #188]	; (8538 <dir_register+0x358>)
    847c:	4798      	blx	r3
    847e:	0003      	movs	r3, r0
    8480:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
    8482:	232f      	movs	r3, #47	; 0x2f
    8484:	18fb      	adds	r3, r7, r3
    8486:	781b      	ldrb	r3, [r3, #0]
    8488:	2b00      	cmp	r3, #0
    848a:	d10d      	bne.n	84a8 <dir_register+0x2c8>
    848c:	232a      	movs	r3, #42	; 0x2a
    848e:	18fb      	adds	r3, r7, r3
    8490:	222a      	movs	r2, #42	; 0x2a
    8492:	18ba      	adds	r2, r7, r2
    8494:	8812      	ldrh	r2, [r2, #0]
    8496:	3a01      	subs	r2, #1
    8498:	801a      	strh	r2, [r3, #0]
    849a:	232a      	movs	r3, #42	; 0x2a
    849c:	18fb      	adds	r3, r7, r3
    849e:	881b      	ldrh	r3, [r3, #0]
    84a0:	2b00      	cmp	r3, #0
    84a2:	d1c3      	bne.n	842c <dir_register+0x24c>
    84a4:	e000      	b.n	84a8 <dir_register+0x2c8>
				if (res != FR_OK) break;
    84a6:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    84a8:	232f      	movs	r3, #47	; 0x2f
    84aa:	18fb      	adds	r3, r7, r3
    84ac:	781b      	ldrb	r3, [r3, #0]
    84ae:	2b00      	cmp	r3, #0
    84b0:	d12f      	bne.n	8512 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
    84b2:	687b      	ldr	r3, [r7, #4]
    84b4:	681a      	ldr	r2, [r3, #0]
    84b6:	687b      	ldr	r3, [r7, #4]
    84b8:	691b      	ldr	r3, [r3, #16]
    84ba:	212f      	movs	r1, #47	; 0x2f
    84bc:	187c      	adds	r4, r7, r1
    84be:	0019      	movs	r1, r3
    84c0:	0010      	movs	r0, r2
    84c2:	4b1c      	ldr	r3, [pc, #112]	; (8534 <dir_register+0x354>)
    84c4:	4798      	blx	r3
    84c6:	0003      	movs	r3, r0
    84c8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    84ca:	232f      	movs	r3, #47	; 0x2f
    84cc:	18fb      	adds	r3, r7, r3
    84ce:	781b      	ldrb	r3, [r3, #0]
    84d0:	2b00      	cmp	r3, #0
    84d2:	d11e      	bne.n	8512 <dir_register+0x332>
			dir = dj->dir;
    84d4:	687b      	ldr	r3, [r7, #4]
    84d6:	695b      	ldr	r3, [r3, #20]
    84d8:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    84da:	69bb      	ldr	r3, [r7, #24]
    84dc:	2220      	movs	r2, #32
    84de:	2100      	movs	r1, #0
    84e0:	0018      	movs	r0, r3
    84e2:	4b18      	ldr	r3, [pc, #96]	; (8544 <dir_register+0x364>)
    84e4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    84e6:	687b      	ldr	r3, [r7, #4]
    84e8:	6999      	ldr	r1, [r3, #24]
    84ea:	69bb      	ldr	r3, [r7, #24]
    84ec:	220b      	movs	r2, #11
    84ee:	0018      	movs	r0, r3
    84f0:	4b0b      	ldr	r3, [pc, #44]	; (8520 <dir_register+0x340>)
    84f2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
    84f4:	69bb      	ldr	r3, [r7, #24]
    84f6:	330c      	adds	r3, #12
    84f8:	001a      	movs	r2, r3
    84fa:	687b      	ldr	r3, [r7, #4]
    84fc:	699b      	ldr	r3, [r3, #24]
    84fe:	330b      	adds	r3, #11
    8500:	781b      	ldrb	r3, [r3, #0]
    8502:	2118      	movs	r1, #24
    8504:	400b      	ands	r3, r1
    8506:	b2db      	uxtb	r3, r3
    8508:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
    850a:	687b      	ldr	r3, [r7, #4]
    850c:	681b      	ldr	r3, [r3, #0]
    850e:	2201      	movs	r2, #1
    8510:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    8512:	232f      	movs	r3, #47	; 0x2f
    8514:	18fb      	adds	r3, r7, r3
    8516:	781b      	ldrb	r3, [r3, #0]
}
    8518:	0018      	movs	r0, r3
    851a:	46bd      	mov	sp, r7
    851c:	b00d      	add	sp, #52	; 0x34
    851e:	bd90      	pop	{r4, r7, pc}
    8520:	00007039 	.word	0x00007039
    8524:	00007e95 	.word	0x00007e95
    8528:	00007fe5 	.word	0x00007fe5
    852c:	0000a421 	.word	0x0000a421
    8530:	00007961 	.word	0x00007961
    8534:	0000711d 	.word	0x0000711d
    8538:	00007a91 	.word	0x00007a91
    853c:	00007f95 	.word	0x00007f95
    8540:	00007d85 	.word	0x00007d85
    8544:	00007071 	.word	0x00007071

00008548 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    8548:	b590      	push	{r4, r7, lr}
    854a:	b08b      	sub	sp, #44	; 0x2c
    854c:	af00      	add	r7, sp, #0
    854e:	6078      	str	r0, [r7, #4]
    8550:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    8552:	683b      	ldr	r3, [r7, #0]
    8554:	681b      	ldr	r3, [r3, #0]
    8556:	613b      	str	r3, [r7, #16]
    8558:	e002      	b.n	8560 <create_name+0x18>
    855a:	693b      	ldr	r3, [r7, #16]
    855c:	3301      	adds	r3, #1
    855e:	613b      	str	r3, [r7, #16]
    8560:	693b      	ldr	r3, [r7, #16]
    8562:	781b      	ldrb	r3, [r3, #0]
    8564:	2b2f      	cmp	r3, #47	; 0x2f
    8566:	d0f8      	beq.n	855a <create_name+0x12>
    8568:	693b      	ldr	r3, [r7, #16]
    856a:	781b      	ldrb	r3, [r3, #0]
    856c:	2b5c      	cmp	r3, #92	; 0x5c
    856e:	d0f4      	beq.n	855a <create_name+0x12>
	lfn = dj->lfn;
    8570:	687b      	ldr	r3, [r7, #4]
    8572:	69db      	ldr	r3, [r3, #28]
    8574:	60fb      	str	r3, [r7, #12]
	si = di = 0;
    8576:	2300      	movs	r3, #0
    8578:	617b      	str	r3, [r7, #20]
    857a:	697b      	ldr	r3, [r7, #20]
    857c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
    857e:	69bb      	ldr	r3, [r7, #24]
    8580:	1c5a      	adds	r2, r3, #1
    8582:	61ba      	str	r2, [r7, #24]
    8584:	693a      	ldr	r2, [r7, #16]
    8586:	18d3      	adds	r3, r2, r3
    8588:	781a      	ldrb	r2, [r3, #0]
    858a:	2324      	movs	r3, #36	; 0x24
    858c:	18fb      	adds	r3, r7, r3
    858e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
    8590:	2324      	movs	r3, #36	; 0x24
    8592:	18fb      	adds	r3, r7, r3
    8594:	881b      	ldrh	r3, [r3, #0]
    8596:	2b1f      	cmp	r3, #31
    8598:	d944      	bls.n	8624 <create_name+0xdc>
    859a:	2324      	movs	r3, #36	; 0x24
    859c:	18fb      	adds	r3, r7, r3
    859e:	881b      	ldrh	r3, [r3, #0]
    85a0:	2b2f      	cmp	r3, #47	; 0x2f
    85a2:	d03f      	beq.n	8624 <create_name+0xdc>
    85a4:	2324      	movs	r3, #36	; 0x24
    85a6:	18fb      	adds	r3, r7, r3
    85a8:	881b      	ldrh	r3, [r3, #0]
    85aa:	2b5c      	cmp	r3, #92	; 0x5c
    85ac:	d03a      	beq.n	8624 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
    85ae:	697b      	ldr	r3, [r7, #20]
    85b0:	2bfe      	cmp	r3, #254	; 0xfe
    85b2:	d901      	bls.n	85b8 <create_name+0x70>
			return FR_INVALID_NAME;
    85b4:	2306      	movs	r3, #6
    85b6:	e1e7      	b.n	8988 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
    85b8:	2324      	movs	r3, #36	; 0x24
    85ba:	18fb      	adds	r3, r7, r3
    85bc:	2224      	movs	r2, #36	; 0x24
    85be:	18ba      	adds	r2, r7, r2
    85c0:	8812      	ldrh	r2, [r2, #0]
    85c2:	21ff      	movs	r1, #255	; 0xff
    85c4:	400a      	ands	r2, r1
    85c6:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
    85c8:	2324      	movs	r3, #36	; 0x24
    85ca:	18fc      	adds	r4, r7, r3
    85cc:	2324      	movs	r3, #36	; 0x24
    85ce:	18fb      	adds	r3, r7, r3
    85d0:	881b      	ldrh	r3, [r3, #0]
    85d2:	2101      	movs	r1, #1
    85d4:	0018      	movs	r0, r3
    85d6:	4bba      	ldr	r3, [pc, #744]	; (88c0 <create_name+0x378>)
    85d8:	4798      	blx	r3
    85da:	0003      	movs	r3, r0
    85dc:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
    85de:	2324      	movs	r3, #36	; 0x24
    85e0:	18fb      	adds	r3, r7, r3
    85e2:	881b      	ldrh	r3, [r3, #0]
    85e4:	2b00      	cmp	r3, #0
    85e6:	d101      	bne.n	85ec <create_name+0xa4>
    85e8:	2306      	movs	r3, #6
    85ea:	e1cd      	b.n	8988 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
    85ec:	2324      	movs	r3, #36	; 0x24
    85ee:	18fb      	adds	r3, r7, r3
    85f0:	881b      	ldrh	r3, [r3, #0]
    85f2:	2b7f      	cmp	r3, #127	; 0x7f
    85f4:	d80b      	bhi.n	860e <create_name+0xc6>
    85f6:	2324      	movs	r3, #36	; 0x24
    85f8:	18fb      	adds	r3, r7, r3
    85fa:	881a      	ldrh	r2, [r3, #0]
    85fc:	4bb1      	ldr	r3, [pc, #708]	; (88c4 <create_name+0x37c>)
    85fe:	0011      	movs	r1, r2
    8600:	0018      	movs	r0, r3
    8602:	4bb1      	ldr	r3, [pc, #708]	; (88c8 <create_name+0x380>)
    8604:	4798      	blx	r3
    8606:	1e03      	subs	r3, r0, #0
    8608:	d001      	beq.n	860e <create_name+0xc6>
			return FR_INVALID_NAME;
    860a:	2306      	movs	r3, #6
    860c:	e1bc      	b.n	8988 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
    860e:	697b      	ldr	r3, [r7, #20]
    8610:	1c5a      	adds	r2, r3, #1
    8612:	617a      	str	r2, [r7, #20]
    8614:	005b      	lsls	r3, r3, #1
    8616:	68fa      	ldr	r2, [r7, #12]
    8618:	18d3      	adds	r3, r2, r3
    861a:	2224      	movs	r2, #36	; 0x24
    861c:	18ba      	adds	r2, r7, r2
    861e:	8812      	ldrh	r2, [r2, #0]
    8620:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
    8622:	e7ac      	b.n	857e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
    8624:	693a      	ldr	r2, [r7, #16]
    8626:	69bb      	ldr	r3, [r7, #24]
    8628:	18d2      	adds	r2, r2, r3
    862a:	683b      	ldr	r3, [r7, #0]
    862c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    862e:	2324      	movs	r3, #36	; 0x24
    8630:	18fb      	adds	r3, r7, r3
    8632:	881b      	ldrh	r3, [r3, #0]
    8634:	2b1f      	cmp	r3, #31
    8636:	d801      	bhi.n	863c <create_name+0xf4>
    8638:	2204      	movs	r2, #4
    863a:	e000      	b.n	863e <create_name+0xf6>
    863c:	2200      	movs	r2, #0
    863e:	2326      	movs	r3, #38	; 0x26
    8640:	18fb      	adds	r3, r7, r3
    8642:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
    8644:	e017      	b.n	8676 <create_name+0x12e>
		w = lfn[di-1];
    8646:	697b      	ldr	r3, [r7, #20]
    8648:	4aa0      	ldr	r2, [pc, #640]	; (88cc <create_name+0x384>)
    864a:	4694      	mov	ip, r2
    864c:	4463      	add	r3, ip
    864e:	005b      	lsls	r3, r3, #1
    8650:	68fa      	ldr	r2, [r7, #12]
    8652:	18d2      	adds	r2, r2, r3
    8654:	2324      	movs	r3, #36	; 0x24
    8656:	18fb      	adds	r3, r7, r3
    8658:	8812      	ldrh	r2, [r2, #0]
    865a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
    865c:	2324      	movs	r3, #36	; 0x24
    865e:	18fb      	adds	r3, r7, r3
    8660:	881b      	ldrh	r3, [r3, #0]
    8662:	2b20      	cmp	r3, #32
    8664:	d004      	beq.n	8670 <create_name+0x128>
    8666:	2324      	movs	r3, #36	; 0x24
    8668:	18fb      	adds	r3, r7, r3
    866a:	881b      	ldrh	r3, [r3, #0]
    866c:	2b2e      	cmp	r3, #46	; 0x2e
    866e:	d106      	bne.n	867e <create_name+0x136>
		di--;
    8670:	697b      	ldr	r3, [r7, #20]
    8672:	3b01      	subs	r3, #1
    8674:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
    8676:	697b      	ldr	r3, [r7, #20]
    8678:	2b00      	cmp	r3, #0
    867a:	d1e4      	bne.n	8646 <create_name+0xfe>
    867c:	e000      	b.n	8680 <create_name+0x138>
		if (w != ' ' && w != '.') break;
    867e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
    8680:	697b      	ldr	r3, [r7, #20]
    8682:	2b00      	cmp	r3, #0
    8684:	d101      	bne.n	868a <create_name+0x142>
    8686:	2306      	movs	r3, #6
    8688:	e17e      	b.n	8988 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
    868a:	697b      	ldr	r3, [r7, #20]
    868c:	005b      	lsls	r3, r3, #1
    868e:	68fa      	ldr	r2, [r7, #12]
    8690:	18d3      	adds	r3, r2, r3
    8692:	2200      	movs	r2, #0
    8694:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
    8696:	687b      	ldr	r3, [r7, #4]
    8698:	699b      	ldr	r3, [r3, #24]
    869a:	220b      	movs	r2, #11
    869c:	2120      	movs	r1, #32
    869e:	0018      	movs	r0, r3
    86a0:	4b8b      	ldr	r3, [pc, #556]	; (88d0 <create_name+0x388>)
    86a2:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
    86a4:	2300      	movs	r3, #0
    86a6:	61bb      	str	r3, [r7, #24]
    86a8:	e002      	b.n	86b0 <create_name+0x168>
    86aa:	69bb      	ldr	r3, [r7, #24]
    86ac:	3301      	adds	r3, #1
    86ae:	61bb      	str	r3, [r7, #24]
    86b0:	69bb      	ldr	r3, [r7, #24]
    86b2:	005b      	lsls	r3, r3, #1
    86b4:	68fa      	ldr	r2, [r7, #12]
    86b6:	18d3      	adds	r3, r2, r3
    86b8:	881b      	ldrh	r3, [r3, #0]
    86ba:	2b20      	cmp	r3, #32
    86bc:	d0f5      	beq.n	86aa <create_name+0x162>
    86be:	69bb      	ldr	r3, [r7, #24]
    86c0:	005b      	lsls	r3, r3, #1
    86c2:	68fa      	ldr	r2, [r7, #12]
    86c4:	18d3      	adds	r3, r2, r3
    86c6:	881b      	ldrh	r3, [r3, #0]
    86c8:	2b2e      	cmp	r3, #46	; 0x2e
    86ca:	d0ee      	beq.n	86aa <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
    86cc:	69bb      	ldr	r3, [r7, #24]
    86ce:	2b00      	cmp	r3, #0
    86d0:	d00b      	beq.n	86ea <create_name+0x1a2>
    86d2:	2326      	movs	r3, #38	; 0x26
    86d4:	18fb      	adds	r3, r7, r3
    86d6:	2226      	movs	r2, #38	; 0x26
    86d8:	18ba      	adds	r2, r7, r2
    86da:	7812      	ldrb	r2, [r2, #0]
    86dc:	2103      	movs	r1, #3
    86de:	430a      	orrs	r2, r1
    86e0:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
    86e2:	e002      	b.n	86ea <create_name+0x1a2>
    86e4:	697b      	ldr	r3, [r7, #20]
    86e6:	3b01      	subs	r3, #1
    86e8:	617b      	str	r3, [r7, #20]
    86ea:	697b      	ldr	r3, [r7, #20]
    86ec:	2b00      	cmp	r3, #0
    86ee:	d009      	beq.n	8704 <create_name+0x1bc>
    86f0:	697b      	ldr	r3, [r7, #20]
    86f2:	4a76      	ldr	r2, [pc, #472]	; (88cc <create_name+0x384>)
    86f4:	4694      	mov	ip, r2
    86f6:	4463      	add	r3, ip
    86f8:	005b      	lsls	r3, r3, #1
    86fa:	68fa      	ldr	r2, [r7, #12]
    86fc:	18d3      	adds	r3, r2, r3
    86fe:	881b      	ldrh	r3, [r3, #0]
    8700:	2b2e      	cmp	r3, #46	; 0x2e
    8702:	d1ef      	bne.n	86e4 <create_name+0x19c>

	b = i = 0; ni = 8;
    8704:	2300      	movs	r3, #0
    8706:	623b      	str	r3, [r7, #32]
    8708:	2327      	movs	r3, #39	; 0x27
    870a:	18fb      	adds	r3, r7, r3
    870c:	2200      	movs	r2, #0
    870e:	701a      	strb	r2, [r3, #0]
    8710:	2308      	movs	r3, #8
    8712:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
    8714:	69bb      	ldr	r3, [r7, #24]
    8716:	1c5a      	adds	r2, r3, #1
    8718:	61ba      	str	r2, [r7, #24]
    871a:	005b      	lsls	r3, r3, #1
    871c:	68fa      	ldr	r2, [r7, #12]
    871e:	18d2      	adds	r2, r2, r3
    8720:	2324      	movs	r3, #36	; 0x24
    8722:	18fb      	adds	r3, r7, r3
    8724:	8812      	ldrh	r2, [r2, #0]
    8726:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
    8728:	2324      	movs	r3, #36	; 0x24
    872a:	18fb      	adds	r3, r7, r3
    872c:	881b      	ldrh	r3, [r3, #0]
    872e:	2b00      	cmp	r3, #0
    8730:	d100      	bne.n	8734 <create_name+0x1ec>
    8732:	e0c3      	b.n	88bc <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
    8734:	2324      	movs	r3, #36	; 0x24
    8736:	18fb      	adds	r3, r7, r3
    8738:	881b      	ldrh	r3, [r3, #0]
    873a:	2b20      	cmp	r3, #32
    873c:	d008      	beq.n	8750 <create_name+0x208>
    873e:	2324      	movs	r3, #36	; 0x24
    8740:	18fb      	adds	r3, r7, r3
    8742:	881b      	ldrh	r3, [r3, #0]
    8744:	2b2e      	cmp	r3, #46	; 0x2e
    8746:	d10c      	bne.n	8762 <create_name+0x21a>
    8748:	69ba      	ldr	r2, [r7, #24]
    874a:	697b      	ldr	r3, [r7, #20]
    874c:	429a      	cmp	r2, r3
    874e:	d008      	beq.n	8762 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
    8750:	2326      	movs	r3, #38	; 0x26
    8752:	18fb      	adds	r3, r7, r3
    8754:	2226      	movs	r2, #38	; 0x26
    8756:	18ba      	adds	r2, r7, r2
    8758:	7812      	ldrb	r2, [r2, #0]
    875a:	2103      	movs	r1, #3
    875c:	430a      	orrs	r2, r1
    875e:	701a      	strb	r2, [r3, #0]
    8760:	e0ab      	b.n	88ba <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
    8762:	6a3a      	ldr	r2, [r7, #32]
    8764:	69fb      	ldr	r3, [r7, #28]
    8766:	429a      	cmp	r2, r3
    8768:	d203      	bcs.n	8772 <create_name+0x22a>
    876a:	69ba      	ldr	r2, [r7, #24]
    876c:	697b      	ldr	r3, [r7, #20]
    876e:	429a      	cmp	r2, r3
    8770:	d12a      	bne.n	87c8 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
    8772:	69fb      	ldr	r3, [r7, #28]
    8774:	2b0b      	cmp	r3, #11
    8776:	d108      	bne.n	878a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
    8778:	2326      	movs	r3, #38	; 0x26
    877a:	18fb      	adds	r3, r7, r3
    877c:	2226      	movs	r2, #38	; 0x26
    877e:	18ba      	adds	r2, r7, r2
    8780:	7812      	ldrb	r2, [r2, #0]
    8782:	2103      	movs	r1, #3
    8784:	430a      	orrs	r2, r1
    8786:	701a      	strb	r2, [r3, #0]
    8788:	e0a9      	b.n	88de <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
    878a:	69ba      	ldr	r2, [r7, #24]
    878c:	697b      	ldr	r3, [r7, #20]
    878e:	429a      	cmp	r2, r3
    8790:	d007      	beq.n	87a2 <create_name+0x25a>
    8792:	2326      	movs	r3, #38	; 0x26
    8794:	18fb      	adds	r3, r7, r3
    8796:	2226      	movs	r2, #38	; 0x26
    8798:	18ba      	adds	r2, r7, r2
    879a:	7812      	ldrb	r2, [r2, #0]
    879c:	2103      	movs	r1, #3
    879e:	430a      	orrs	r2, r1
    87a0:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
    87a2:	69ba      	ldr	r2, [r7, #24]
    87a4:	697b      	ldr	r3, [r7, #20]
    87a6:	429a      	cmp	r2, r3
    87a8:	d900      	bls.n	87ac <create_name+0x264>
    87aa:	e097      	b.n	88dc <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
    87ac:	697b      	ldr	r3, [r7, #20]
    87ae:	61bb      	str	r3, [r7, #24]
    87b0:	2308      	movs	r3, #8
    87b2:	623b      	str	r3, [r7, #32]
    87b4:	230b      	movs	r3, #11
    87b6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
    87b8:	2327      	movs	r3, #39	; 0x27
    87ba:	18fb      	adds	r3, r7, r3
    87bc:	2227      	movs	r2, #39	; 0x27
    87be:	18ba      	adds	r2, r7, r2
    87c0:	7812      	ldrb	r2, [r2, #0]
    87c2:	0092      	lsls	r2, r2, #2
    87c4:	701a      	strb	r2, [r3, #0]
    87c6:	e078      	b.n	88ba <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
    87c8:	2324      	movs	r3, #36	; 0x24
    87ca:	18fb      	adds	r3, r7, r3
    87cc:	881b      	ldrh	r3, [r3, #0]
    87ce:	2b7f      	cmp	r3, #127	; 0x7f
    87d0:	d920      	bls.n	8814 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
    87d2:	2324      	movs	r3, #36	; 0x24
    87d4:	18fc      	adds	r4, r7, r3
    87d6:	2324      	movs	r3, #36	; 0x24
    87d8:	18fb      	adds	r3, r7, r3
    87da:	881b      	ldrh	r3, [r3, #0]
    87dc:	2100      	movs	r1, #0
    87de:	0018      	movs	r0, r3
    87e0:	4b37      	ldr	r3, [pc, #220]	; (88c0 <create_name+0x378>)
    87e2:	4798      	blx	r3
    87e4:	0003      	movs	r3, r0
    87e6:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
    87e8:	2324      	movs	r3, #36	; 0x24
    87ea:	18fb      	adds	r3, r7, r3
    87ec:	881b      	ldrh	r3, [r3, #0]
    87ee:	2b00      	cmp	r3, #0
    87f0:	d008      	beq.n	8804 <create_name+0x2bc>
    87f2:	2324      	movs	r3, #36	; 0x24
    87f4:	18fb      	adds	r3, r7, r3
    87f6:	881b      	ldrh	r3, [r3, #0]
    87f8:	3b80      	subs	r3, #128	; 0x80
    87fa:	4a36      	ldr	r2, [pc, #216]	; (88d4 <create_name+0x38c>)
    87fc:	5cd2      	ldrb	r2, [r2, r3]
    87fe:	2324      	movs	r3, #36	; 0x24
    8800:	18fb      	adds	r3, r7, r3
    8802:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
    8804:	2326      	movs	r3, #38	; 0x26
    8806:	18fb      	adds	r3, r7, r3
    8808:	2226      	movs	r2, #38	; 0x26
    880a:	18ba      	adds	r2, r7, r2
    880c:	7812      	ldrb	r2, [r2, #0]
    880e:	2102      	movs	r1, #2
    8810:	430a      	orrs	r2, r1
    8812:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
    8814:	2324      	movs	r3, #36	; 0x24
    8816:	18fb      	adds	r3, r7, r3
    8818:	881b      	ldrh	r3, [r3, #0]
    881a:	2b00      	cmp	r3, #0
    881c:	d009      	beq.n	8832 <create_name+0x2ea>
    881e:	2324      	movs	r3, #36	; 0x24
    8820:	18fb      	adds	r3, r7, r3
    8822:	881a      	ldrh	r2, [r3, #0]
    8824:	4b2c      	ldr	r3, [pc, #176]	; (88d8 <create_name+0x390>)
    8826:	0011      	movs	r1, r2
    8828:	0018      	movs	r0, r3
    882a:	4b27      	ldr	r3, [pc, #156]	; (88c8 <create_name+0x380>)
    882c:	4798      	blx	r3
    882e:	1e03      	subs	r3, r0, #0
    8830:	d00c      	beq.n	884c <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
    8832:	2324      	movs	r3, #36	; 0x24
    8834:	18fb      	adds	r3, r7, r3
    8836:	225f      	movs	r2, #95	; 0x5f
    8838:	801a      	strh	r2, [r3, #0]
    883a:	2326      	movs	r3, #38	; 0x26
    883c:	18fb      	adds	r3, r7, r3
    883e:	2226      	movs	r2, #38	; 0x26
    8840:	18ba      	adds	r2, r7, r2
    8842:	7812      	ldrb	r2, [r2, #0]
    8844:	2103      	movs	r1, #3
    8846:	430a      	orrs	r2, r1
    8848:	701a      	strb	r2, [r3, #0]
    884a:	e02b      	b.n	88a4 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
    884c:	2324      	movs	r3, #36	; 0x24
    884e:	18fb      	adds	r3, r7, r3
    8850:	881b      	ldrh	r3, [r3, #0]
    8852:	2b40      	cmp	r3, #64	; 0x40
    8854:	d90d      	bls.n	8872 <create_name+0x32a>
    8856:	2324      	movs	r3, #36	; 0x24
    8858:	18fb      	adds	r3, r7, r3
    885a:	881b      	ldrh	r3, [r3, #0]
    885c:	2b5a      	cmp	r3, #90	; 0x5a
    885e:	d808      	bhi.n	8872 <create_name+0x32a>
					b |= 2;
    8860:	2327      	movs	r3, #39	; 0x27
    8862:	18fb      	adds	r3, r7, r3
    8864:	2227      	movs	r2, #39	; 0x27
    8866:	18ba      	adds	r2, r7, r2
    8868:	7812      	ldrb	r2, [r2, #0]
    886a:	2102      	movs	r1, #2
    886c:	430a      	orrs	r2, r1
    886e:	701a      	strb	r2, [r3, #0]
    8870:	e018      	b.n	88a4 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
    8872:	2324      	movs	r3, #36	; 0x24
    8874:	18fb      	adds	r3, r7, r3
    8876:	881b      	ldrh	r3, [r3, #0]
    8878:	2b60      	cmp	r3, #96	; 0x60
    887a:	d913      	bls.n	88a4 <create_name+0x35c>
    887c:	2324      	movs	r3, #36	; 0x24
    887e:	18fb      	adds	r3, r7, r3
    8880:	881b      	ldrh	r3, [r3, #0]
    8882:	2b7a      	cmp	r3, #122	; 0x7a
    8884:	d80e      	bhi.n	88a4 <create_name+0x35c>
						b |= 1; w -= 0x20;
    8886:	2327      	movs	r3, #39	; 0x27
    8888:	18fb      	adds	r3, r7, r3
    888a:	2227      	movs	r2, #39	; 0x27
    888c:	18ba      	adds	r2, r7, r2
    888e:	7812      	ldrb	r2, [r2, #0]
    8890:	2101      	movs	r1, #1
    8892:	430a      	orrs	r2, r1
    8894:	701a      	strb	r2, [r3, #0]
    8896:	2324      	movs	r3, #36	; 0x24
    8898:	18fb      	adds	r3, r7, r3
    889a:	2224      	movs	r2, #36	; 0x24
    889c:	18ba      	adds	r2, r7, r2
    889e:	8812      	ldrh	r2, [r2, #0]
    88a0:	3a20      	subs	r2, #32
    88a2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
    88a4:	687b      	ldr	r3, [r7, #4]
    88a6:	699a      	ldr	r2, [r3, #24]
    88a8:	6a3b      	ldr	r3, [r7, #32]
    88aa:	1c59      	adds	r1, r3, #1
    88ac:	6239      	str	r1, [r7, #32]
    88ae:	18d3      	adds	r3, r2, r3
    88b0:	2224      	movs	r2, #36	; 0x24
    88b2:	18ba      	adds	r2, r7, r2
    88b4:	8812      	ldrh	r2, [r2, #0]
    88b6:	b2d2      	uxtb	r2, r2
    88b8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
    88ba:	e72b      	b.n	8714 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
    88bc:	46c0      	nop			; (mov r8, r8)
    88be:	e00e      	b.n	88de <create_name+0x396>
    88c0:	00009d15 	.word	0x00009d15
    88c4:	0000aff4 	.word	0x0000aff4
    88c8:	000070eb 	.word	0x000070eb
    88cc:	7fffffff 	.word	0x7fffffff
    88d0:	00007071 	.word	0x00007071
    88d4:	0000b03c 	.word	0x0000b03c
    88d8:	0000b000 	.word	0x0000b000
			if (si > di) break;			/* No extension */
    88dc:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
    88de:	687b      	ldr	r3, [r7, #4]
    88e0:	699b      	ldr	r3, [r3, #24]
    88e2:	781b      	ldrb	r3, [r3, #0]
    88e4:	2be5      	cmp	r3, #229	; 0xe5
    88e6:	d103      	bne.n	88f0 <create_name+0x3a8>
    88e8:	687b      	ldr	r3, [r7, #4]
    88ea:	699b      	ldr	r3, [r3, #24]
    88ec:	2205      	movs	r2, #5
    88ee:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    88f0:	69fb      	ldr	r3, [r7, #28]
    88f2:	2b08      	cmp	r3, #8
    88f4:	d106      	bne.n	8904 <create_name+0x3bc>
    88f6:	2327      	movs	r3, #39	; 0x27
    88f8:	18fb      	adds	r3, r7, r3
    88fa:	2227      	movs	r2, #39	; 0x27
    88fc:	18ba      	adds	r2, r7, r2
    88fe:	7812      	ldrb	r2, [r2, #0]
    8900:	0092      	lsls	r2, r2, #2
    8902:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
    8904:	2327      	movs	r3, #39	; 0x27
    8906:	18fb      	adds	r3, r7, r3
    8908:	781b      	ldrb	r3, [r3, #0]
    890a:	220c      	movs	r2, #12
    890c:	4013      	ands	r3, r2
    890e:	2b0c      	cmp	r3, #12
    8910:	d006      	beq.n	8920 <create_name+0x3d8>
    8912:	2327      	movs	r3, #39	; 0x27
    8914:	18fb      	adds	r3, r7, r3
    8916:	781b      	ldrb	r3, [r3, #0]
    8918:	2203      	movs	r2, #3
    891a:	4013      	ands	r3, r2
    891c:	2b03      	cmp	r3, #3
    891e:	d107      	bne.n	8930 <create_name+0x3e8>
		cf |= NS_LFN;
    8920:	2326      	movs	r3, #38	; 0x26
    8922:	18fb      	adds	r3, r7, r3
    8924:	2226      	movs	r2, #38	; 0x26
    8926:	18ba      	adds	r2, r7, r2
    8928:	7812      	ldrb	r2, [r2, #0]
    892a:	2102      	movs	r1, #2
    892c:	430a      	orrs	r2, r1
    892e:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
    8930:	2326      	movs	r3, #38	; 0x26
    8932:	18fb      	adds	r3, r7, r3
    8934:	781b      	ldrb	r3, [r3, #0]
    8936:	2202      	movs	r2, #2
    8938:	4013      	ands	r3, r2
    893a:	d11d      	bne.n	8978 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
    893c:	2327      	movs	r3, #39	; 0x27
    893e:	18fb      	adds	r3, r7, r3
    8940:	781b      	ldrb	r3, [r3, #0]
    8942:	2203      	movs	r2, #3
    8944:	4013      	ands	r3, r2
    8946:	2b01      	cmp	r3, #1
    8948:	d107      	bne.n	895a <create_name+0x412>
    894a:	2326      	movs	r3, #38	; 0x26
    894c:	18fb      	adds	r3, r7, r3
    894e:	2226      	movs	r2, #38	; 0x26
    8950:	18ba      	adds	r2, r7, r2
    8952:	7812      	ldrb	r2, [r2, #0]
    8954:	2110      	movs	r1, #16
    8956:	430a      	orrs	r2, r1
    8958:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
    895a:	2327      	movs	r3, #39	; 0x27
    895c:	18fb      	adds	r3, r7, r3
    895e:	781b      	ldrb	r3, [r3, #0]
    8960:	220c      	movs	r2, #12
    8962:	4013      	ands	r3, r2
    8964:	2b04      	cmp	r3, #4
    8966:	d107      	bne.n	8978 <create_name+0x430>
    8968:	2326      	movs	r3, #38	; 0x26
    896a:	18fb      	adds	r3, r7, r3
    896c:	2226      	movs	r2, #38	; 0x26
    896e:	18ba      	adds	r2, r7, r2
    8970:	7812      	ldrb	r2, [r2, #0]
    8972:	2108      	movs	r1, #8
    8974:	430a      	orrs	r2, r1
    8976:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
    8978:	687b      	ldr	r3, [r7, #4]
    897a:	699b      	ldr	r3, [r3, #24]
    897c:	330b      	adds	r3, #11
    897e:	2226      	movs	r2, #38	; 0x26
    8980:	18ba      	adds	r2, r7, r2
    8982:	7812      	ldrb	r2, [r2, #0]
    8984:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    8986:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
    8988:	0018      	movs	r0, r3
    898a:	46bd      	mov	sp, r7
    898c:	b00b      	add	sp, #44	; 0x2c
    898e:	bd90      	pop	{r4, r7, pc}

00008990 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    8990:	b590      	push	{r4, r7, lr}
    8992:	b085      	sub	sp, #20
    8994:	af00      	add	r7, sp, #0
    8996:	6078      	str	r0, [r7, #4]
    8998:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    899a:	683b      	ldr	r3, [r7, #0]
    899c:	781b      	ldrb	r3, [r3, #0]
    899e:	2b2f      	cmp	r3, #47	; 0x2f
    89a0:	d003      	beq.n	89aa <follow_path+0x1a>
    89a2:	683b      	ldr	r3, [r7, #0]
    89a4:	781b      	ldrb	r3, [r3, #0]
    89a6:	2b5c      	cmp	r3, #92	; 0x5c
    89a8:	d102      	bne.n	89b0 <follow_path+0x20>
		path++;
    89aa:	683b      	ldr	r3, [r7, #0]
    89ac:	3301      	adds	r3, #1
    89ae:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    89b0:	687b      	ldr	r3, [r7, #4]
    89b2:	2200      	movs	r2, #0
    89b4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    89b6:	683b      	ldr	r3, [r7, #0]
    89b8:	781b      	ldrb	r3, [r3, #0]
    89ba:	2b1f      	cmp	r3, #31
    89bc:	d80c      	bhi.n	89d8 <follow_path+0x48>
		res = dir_sdi(dj, 0);
    89be:	230f      	movs	r3, #15
    89c0:	18fc      	adds	r4, r7, r3
    89c2:	687b      	ldr	r3, [r7, #4]
    89c4:	2100      	movs	r1, #0
    89c6:	0018      	movs	r0, r3
    89c8:	4b3c      	ldr	r3, [pc, #240]	; (8abc <follow_path+0x12c>)
    89ca:	4798      	blx	r3
    89cc:	0003      	movs	r3, r0
    89ce:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    89d0:	687b      	ldr	r3, [r7, #4]
    89d2:	2200      	movs	r2, #0
    89d4:	615a      	str	r2, [r3, #20]
    89d6:	e06a      	b.n	8aae <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    89d8:	230f      	movs	r3, #15
    89da:	18fc      	adds	r4, r7, r3
    89dc:	003a      	movs	r2, r7
    89de:	687b      	ldr	r3, [r7, #4]
    89e0:	0011      	movs	r1, r2
    89e2:	0018      	movs	r0, r3
    89e4:	4b36      	ldr	r3, [pc, #216]	; (8ac0 <follow_path+0x130>)
    89e6:	4798      	blx	r3
    89e8:	0003      	movs	r3, r0
    89ea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    89ec:	230f      	movs	r3, #15
    89ee:	18fb      	adds	r3, r7, r3
    89f0:	781b      	ldrb	r3, [r3, #0]
    89f2:	2b00      	cmp	r3, #0
    89f4:	d154      	bne.n	8aa0 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
    89f6:	230f      	movs	r3, #15
    89f8:	18fc      	adds	r4, r7, r3
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	0018      	movs	r0, r3
    89fe:	4b31      	ldr	r3, [pc, #196]	; (8ac4 <follow_path+0x134>)
    8a00:	4798      	blx	r3
    8a02:	0003      	movs	r3, r0
    8a04:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    8a06:	687b      	ldr	r3, [r7, #4]
    8a08:	699a      	ldr	r2, [r3, #24]
    8a0a:	230e      	movs	r3, #14
    8a0c:	18fb      	adds	r3, r7, r3
    8a0e:	7ad2      	ldrb	r2, [r2, #11]
    8a10:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    8a12:	230f      	movs	r3, #15
    8a14:	18fb      	adds	r3, r7, r3
    8a16:	781b      	ldrb	r3, [r3, #0]
    8a18:	2b00      	cmp	r3, #0
    8a1a:	d00f      	beq.n	8a3c <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    8a1c:	230f      	movs	r3, #15
    8a1e:	18fb      	adds	r3, r7, r3
    8a20:	781b      	ldrb	r3, [r3, #0]
    8a22:	2b04      	cmp	r3, #4
    8a24:	d13e      	bne.n	8aa4 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    8a26:	230e      	movs	r3, #14
    8a28:	18fb      	adds	r3, r7, r3
    8a2a:	781b      	ldrb	r3, [r3, #0]
    8a2c:	2204      	movs	r2, #4
    8a2e:	4013      	ands	r3, r2
    8a30:	d13a      	bne.n	8aa8 <follow_path+0x118>
    8a32:	230f      	movs	r3, #15
    8a34:	18fb      	adds	r3, r7, r3
    8a36:	2205      	movs	r2, #5
    8a38:	701a      	strb	r2, [r3, #0]
				}
				break;
    8a3a:	e035      	b.n	8aa8 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    8a3c:	230e      	movs	r3, #14
    8a3e:	18fb      	adds	r3, r7, r3
    8a40:	781b      	ldrb	r3, [r3, #0]
    8a42:	2204      	movs	r2, #4
    8a44:	4013      	ands	r3, r2
    8a46:	d131      	bne.n	8aac <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    8a48:	687b      	ldr	r3, [r7, #4]
    8a4a:	695b      	ldr	r3, [r3, #20]
    8a4c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    8a4e:	68bb      	ldr	r3, [r7, #8]
    8a50:	330b      	adds	r3, #11
    8a52:	781b      	ldrb	r3, [r3, #0]
    8a54:	001a      	movs	r2, r3
    8a56:	2310      	movs	r3, #16
    8a58:	4013      	ands	r3, r2
    8a5a:	d104      	bne.n	8a66 <follow_path+0xd6>
				res = FR_NO_PATH; break;
    8a5c:	230f      	movs	r3, #15
    8a5e:	18fb      	adds	r3, r7, r3
    8a60:	2205      	movs	r2, #5
    8a62:	701a      	strb	r2, [r3, #0]
    8a64:	e023      	b.n	8aae <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
    8a66:	68bb      	ldr	r3, [r7, #8]
    8a68:	3315      	adds	r3, #21
    8a6a:	781b      	ldrb	r3, [r3, #0]
    8a6c:	021b      	lsls	r3, r3, #8
    8a6e:	b21a      	sxth	r2, r3
    8a70:	68bb      	ldr	r3, [r7, #8]
    8a72:	3314      	adds	r3, #20
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	b21b      	sxth	r3, r3
    8a78:	4313      	orrs	r3, r2
    8a7a:	b21b      	sxth	r3, r3
    8a7c:	b29b      	uxth	r3, r3
    8a7e:	041b      	lsls	r3, r3, #16
    8a80:	68ba      	ldr	r2, [r7, #8]
    8a82:	321b      	adds	r2, #27
    8a84:	7812      	ldrb	r2, [r2, #0]
    8a86:	0212      	lsls	r2, r2, #8
    8a88:	b211      	sxth	r1, r2
    8a8a:	68ba      	ldr	r2, [r7, #8]
    8a8c:	321a      	adds	r2, #26
    8a8e:	7812      	ldrb	r2, [r2, #0]
    8a90:	b212      	sxth	r2, r2
    8a92:	430a      	orrs	r2, r1
    8a94:	b212      	sxth	r2, r2
    8a96:	b292      	uxth	r2, r2
    8a98:	431a      	orrs	r2, r3
    8a9a:	687b      	ldr	r3, [r7, #4]
    8a9c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    8a9e:	e79b      	b.n	89d8 <follow_path+0x48>
			if (res != FR_OK) break;
    8aa0:	46c0      	nop			; (mov r8, r8)
    8aa2:	e004      	b.n	8aae <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    8aa4:	46c0      	nop			; (mov r8, r8)
    8aa6:	e002      	b.n	8aae <follow_path+0x11e>
				break;
    8aa8:	46c0      	nop			; (mov r8, r8)
    8aaa:	e000      	b.n	8aae <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    8aac:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    8aae:	230f      	movs	r3, #15
    8ab0:	18fb      	adds	r3, r7, r3
    8ab2:	781b      	ldrb	r3, [r3, #0]
}
    8ab4:	0018      	movs	r0, r3
    8ab6:	46bd      	mov	sp, r7
    8ab8:	b005      	add	sp, #20
    8aba:	bd90      	pop	{r4, r7, pc}
    8abc:	00007961 	.word	0x00007961
    8ac0:	00008549 	.word	0x00008549
    8ac4:	00007fe5 	.word	0x00007fe5

00008ac8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    8ac8:	b590      	push	{r4, r7, lr}
    8aca:	b083      	sub	sp, #12
    8acc:	af00      	add	r7, sp, #0
    8ace:	6078      	str	r0, [r7, #4]
    8ad0:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    8ad2:	687b      	ldr	r3, [r7, #4]
    8ad4:	7858      	ldrb	r0, [r3, #1]
    8ad6:	687b      	ldr	r3, [r7, #4]
    8ad8:	3330      	adds	r3, #48	; 0x30
    8ada:	0019      	movs	r1, r3
    8adc:	683a      	ldr	r2, [r7, #0]
    8ade:	2301      	movs	r3, #1
    8ae0:	4c2a      	ldr	r4, [pc, #168]	; (8b8c <check_fs+0xc4>)
    8ae2:	47a0      	blx	r4
    8ae4:	1e03      	subs	r3, r0, #0
    8ae6:	d001      	beq.n	8aec <check_fs+0x24>
		return 3;
    8ae8:	2303      	movs	r3, #3
    8aea:	e04b      	b.n	8b84 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	4a28      	ldr	r2, [pc, #160]	; (8b90 <check_fs+0xc8>)
    8af0:	4694      	mov	ip, r2
    8af2:	4463      	add	r3, ip
    8af4:	3301      	adds	r3, #1
    8af6:	781b      	ldrb	r3, [r3, #0]
    8af8:	021b      	lsls	r3, r3, #8
    8afa:	b21a      	sxth	r2, r3
    8afc:	687b      	ldr	r3, [r7, #4]
    8afe:	4924      	ldr	r1, [pc, #144]	; (8b90 <check_fs+0xc8>)
    8b00:	5c5b      	ldrb	r3, [r3, r1]
    8b02:	b21b      	sxth	r3, r3
    8b04:	4313      	orrs	r3, r2
    8b06:	b21b      	sxth	r3, r3
    8b08:	4a22      	ldr	r2, [pc, #136]	; (8b94 <check_fs+0xcc>)
    8b0a:	4293      	cmp	r3, r2
    8b0c:	d001      	beq.n	8b12 <check_fs+0x4a>
		return 2;
    8b0e:	2302      	movs	r3, #2
    8b10:	e038      	b.n	8b84 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	3366      	adds	r3, #102	; 0x66
    8b16:	3303      	adds	r3, #3
    8b18:	781b      	ldrb	r3, [r3, #0]
    8b1a:	061a      	lsls	r2, r3, #24
    8b1c:	687b      	ldr	r3, [r7, #4]
    8b1e:	3366      	adds	r3, #102	; 0x66
    8b20:	3302      	adds	r3, #2
    8b22:	781b      	ldrb	r3, [r3, #0]
    8b24:	041b      	lsls	r3, r3, #16
    8b26:	4313      	orrs	r3, r2
    8b28:	687a      	ldr	r2, [r7, #4]
    8b2a:	3266      	adds	r2, #102	; 0x66
    8b2c:	3201      	adds	r2, #1
    8b2e:	7812      	ldrb	r2, [r2, #0]
    8b30:	0212      	lsls	r2, r2, #8
    8b32:	4313      	orrs	r3, r2
    8b34:	687a      	ldr	r2, [r7, #4]
    8b36:	2166      	movs	r1, #102	; 0x66
    8b38:	5c52      	ldrb	r2, [r2, r1]
    8b3a:	4313      	orrs	r3, r2
    8b3c:	021b      	lsls	r3, r3, #8
    8b3e:	0a1b      	lsrs	r3, r3, #8
    8b40:	4a15      	ldr	r2, [pc, #84]	; (8b98 <check_fs+0xd0>)
    8b42:	4293      	cmp	r3, r2
    8b44:	d101      	bne.n	8b4a <check_fs+0x82>
		return 0;
    8b46:	2300      	movs	r3, #0
    8b48:	e01c      	b.n	8b84 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    8b4a:	687b      	ldr	r3, [r7, #4]
    8b4c:	3382      	adds	r3, #130	; 0x82
    8b4e:	3303      	adds	r3, #3
    8b50:	781b      	ldrb	r3, [r3, #0]
    8b52:	061a      	lsls	r2, r3, #24
    8b54:	687b      	ldr	r3, [r7, #4]
    8b56:	3382      	adds	r3, #130	; 0x82
    8b58:	3302      	adds	r3, #2
    8b5a:	781b      	ldrb	r3, [r3, #0]
    8b5c:	041b      	lsls	r3, r3, #16
    8b5e:	4313      	orrs	r3, r2
    8b60:	687a      	ldr	r2, [r7, #4]
    8b62:	3282      	adds	r2, #130	; 0x82
    8b64:	3201      	adds	r2, #1
    8b66:	7812      	ldrb	r2, [r2, #0]
    8b68:	0212      	lsls	r2, r2, #8
    8b6a:	4313      	orrs	r3, r2
    8b6c:	687a      	ldr	r2, [r7, #4]
    8b6e:	2182      	movs	r1, #130	; 0x82
    8b70:	5c52      	ldrb	r2, [r2, r1]
    8b72:	4313      	orrs	r3, r2
    8b74:	021b      	lsls	r3, r3, #8
    8b76:	0a1b      	lsrs	r3, r3, #8
    8b78:	4a07      	ldr	r2, [pc, #28]	; (8b98 <check_fs+0xd0>)
    8b7a:	4293      	cmp	r3, r2
    8b7c:	d101      	bne.n	8b82 <check_fs+0xba>
		return 0;
    8b7e:	2300      	movs	r3, #0
    8b80:	e000      	b.n	8b84 <check_fs+0xbc>

	return 1;
    8b82:	2301      	movs	r3, #1
}
    8b84:	0018      	movs	r0, r3
    8b86:	46bd      	mov	sp, r7
    8b88:	b003      	add	sp, #12
    8b8a:	bd90      	pop	{r4, r7, pc}
    8b8c:	00006d31 	.word	0x00006d31
    8b90:	0000022e 	.word	0x0000022e
    8b94:	ffffaa55 	.word	0xffffaa55
    8b98:	00544146 	.word	0x00544146

00008b9c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    8b9c:	b590      	push	{r4, r7, lr}
    8b9e:	b093      	sub	sp, #76	; 0x4c
    8ba0:	af00      	add	r7, sp, #0
    8ba2:	60f8      	str	r0, [r7, #12]
    8ba4:	60b9      	str	r1, [r7, #8]
    8ba6:	1dfb      	adds	r3, r7, #7
    8ba8:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    8baa:	68fb      	ldr	r3, [r7, #12]
    8bac:	681b      	ldr	r3, [r3, #0]
    8bae:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    8bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8bb2:	781b      	ldrb	r3, [r3, #0]
    8bb4:	3b30      	subs	r3, #48	; 0x30
    8bb6:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    8bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8bba:	2b09      	cmp	r3, #9
    8bbc:	d80b      	bhi.n	8bd6 <chk_mounted+0x3a>
    8bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8bc0:	3301      	adds	r3, #1
    8bc2:	781b      	ldrb	r3, [r3, #0]
    8bc4:	2b3a      	cmp	r3, #58	; 0x3a
    8bc6:	d106      	bne.n	8bd6 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
    8bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8bca:	3302      	adds	r3, #2
    8bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    8bce:	68fb      	ldr	r3, [r7, #12]
    8bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8bd2:	601a      	str	r2, [r3, #0]
    8bd4:	e001      	b.n	8bda <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    8bd6:	2300      	movs	r3, #0
    8bd8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    8bda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8bdc:	2b00      	cmp	r3, #0
    8bde:	d001      	beq.n	8be4 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
    8be0:	230b      	movs	r3, #11
    8be2:	e2af      	b.n	9144 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    8be4:	4bc5      	ldr	r3, [pc, #788]	; (8efc <chk_mounted+0x360>)
    8be6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    8be8:	0092      	lsls	r2, r2, #2
    8bea:	58d3      	ldr	r3, [r2, r3]
    8bec:	62bb      	str	r3, [r7, #40]	; 0x28
    8bee:	68bb      	ldr	r3, [r7, #8]
    8bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8bf2:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    8bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d101      	bne.n	8bfe <chk_mounted+0x62>
    8bfa:	230c      	movs	r3, #12
    8bfc:	e2a2      	b.n	9144 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    8bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8c00:	781b      	ldrb	r3, [r3, #0]
    8c02:	2b00      	cmp	r3, #0
    8c04:	d01c      	beq.n	8c40 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
    8c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8c08:	785b      	ldrb	r3, [r3, #1]
    8c0a:	2227      	movs	r2, #39	; 0x27
    8c0c:	18bc      	adds	r4, r7, r2
    8c0e:	0018      	movs	r0, r3
    8c10:	4bbb      	ldr	r3, [pc, #748]	; (8f00 <chk_mounted+0x364>)
    8c12:	4798      	blx	r3
    8c14:	0003      	movs	r3, r0
    8c16:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    8c18:	2327      	movs	r3, #39	; 0x27
    8c1a:	18fb      	adds	r3, r7, r3
    8c1c:	781b      	ldrb	r3, [r3, #0]
    8c1e:	2201      	movs	r2, #1
    8c20:	4013      	ands	r3, r2
    8c22:	d10d      	bne.n	8c40 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    8c24:	1dfb      	adds	r3, r7, #7
    8c26:	781b      	ldrb	r3, [r3, #0]
    8c28:	2b00      	cmp	r3, #0
    8c2a:	d007      	beq.n	8c3c <chk_mounted+0xa0>
    8c2c:	2327      	movs	r3, #39	; 0x27
    8c2e:	18fb      	adds	r3, r7, r3
    8c30:	781b      	ldrb	r3, [r3, #0]
    8c32:	2204      	movs	r2, #4
    8c34:	4013      	ands	r3, r2
    8c36:	d001      	beq.n	8c3c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
    8c38:	230a      	movs	r3, #10
    8c3a:	e283      	b.n	9144 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
    8c3c:	2300      	movs	r3, #0
    8c3e:	e281      	b.n	9144 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    8c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8c42:	2200      	movs	r2, #0
    8c44:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    8c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8c48:	b2da      	uxtb	r2, r3
    8c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8c4c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    8c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8c50:	785b      	ldrb	r3, [r3, #1]
    8c52:	2227      	movs	r2, #39	; 0x27
    8c54:	18bc      	adds	r4, r7, r2
    8c56:	0018      	movs	r0, r3
    8c58:	4baa      	ldr	r3, [pc, #680]	; (8f04 <chk_mounted+0x368>)
    8c5a:	4798      	blx	r3
    8c5c:	0003      	movs	r3, r0
    8c5e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    8c60:	2327      	movs	r3, #39	; 0x27
    8c62:	18fb      	adds	r3, r7, r3
    8c64:	781b      	ldrb	r3, [r3, #0]
    8c66:	2201      	movs	r2, #1
    8c68:	4013      	ands	r3, r2
    8c6a:	d001      	beq.n	8c70 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    8c6c:	2303      	movs	r3, #3
    8c6e:	e269      	b.n	9144 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    8c70:	1dfb      	adds	r3, r7, #7
    8c72:	781b      	ldrb	r3, [r3, #0]
    8c74:	2b00      	cmp	r3, #0
    8c76:	d007      	beq.n	8c88 <chk_mounted+0xec>
    8c78:	2327      	movs	r3, #39	; 0x27
    8c7a:	18fb      	adds	r3, r7, r3
    8c7c:	781b      	ldrb	r3, [r3, #0]
    8c7e:	2204      	movs	r2, #4
    8c80:	4013      	ands	r3, r2
    8c82:	d001      	beq.n	8c88 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
    8c84:	230a      	movs	r3, #10
    8c86:	e25d      	b.n	9144 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    8c88:	2300      	movs	r3, #0
    8c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    8c8c:	2347      	movs	r3, #71	; 0x47
    8c8e:	18fc      	adds	r4, r7, r3
    8c90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8c94:	0011      	movs	r1, r2
    8c96:	0018      	movs	r0, r3
    8c98:	4b9b      	ldr	r3, [pc, #620]	; (8f08 <chk_mounted+0x36c>)
    8c9a:	4798      	blx	r3
    8c9c:	0003      	movs	r3, r0
    8c9e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    8ca0:	2347      	movs	r3, #71	; 0x47
    8ca2:	18fb      	adds	r3, r7, r3
    8ca4:	781b      	ldrb	r3, [r3, #0]
    8ca6:	2b01      	cmp	r3, #1
    8ca8:	d13b      	bne.n	8d22 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    8caa:	2346      	movs	r3, #70	; 0x46
    8cac:	18fb      	adds	r3, r7, r3
    8cae:	2200      	movs	r2, #0
    8cb0:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    8cb2:	2346      	movs	r3, #70	; 0x46
    8cb4:	18fb      	adds	r3, r7, r3
    8cb6:	781b      	ldrb	r3, [r3, #0]
    8cb8:	2b00      	cmp	r3, #0
    8cba:	d006      	beq.n	8cca <chk_mounted+0x12e>
    8cbc:	2346      	movs	r3, #70	; 0x46
    8cbe:	18fb      	adds	r3, r7, r3
    8cc0:	781a      	ldrb	r2, [r3, #0]
    8cc2:	2346      	movs	r3, #70	; 0x46
    8cc4:	18fb      	adds	r3, r7, r3
    8cc6:	3a01      	subs	r2, #1
    8cc8:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    8cca:	2346      	movs	r3, #70	; 0x46
    8ccc:	18fb      	adds	r3, r7, r3
    8cce:	781b      	ldrb	r3, [r3, #0]
    8cd0:	011b      	lsls	r3, r3, #4
    8cd2:	33bf      	adds	r3, #191	; 0xbf
    8cd4:	33ff      	adds	r3, #255	; 0xff
    8cd6:	3330      	adds	r3, #48	; 0x30
    8cd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8cda:	18d3      	adds	r3, r2, r3
    8cdc:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    8cde:	6a3b      	ldr	r3, [r7, #32]
    8ce0:	3304      	adds	r3, #4
    8ce2:	781b      	ldrb	r3, [r3, #0]
    8ce4:	2b00      	cmp	r3, #0
    8ce6:	d01c      	beq.n	8d22 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    8ce8:	6a3b      	ldr	r3, [r7, #32]
    8cea:	330b      	adds	r3, #11
    8cec:	781b      	ldrb	r3, [r3, #0]
    8cee:	061a      	lsls	r2, r3, #24
    8cf0:	6a3b      	ldr	r3, [r7, #32]
    8cf2:	330a      	adds	r3, #10
    8cf4:	781b      	ldrb	r3, [r3, #0]
    8cf6:	041b      	lsls	r3, r3, #16
    8cf8:	4313      	orrs	r3, r2
    8cfa:	6a3a      	ldr	r2, [r7, #32]
    8cfc:	3209      	adds	r2, #9
    8cfe:	7812      	ldrb	r2, [r2, #0]
    8d00:	0212      	lsls	r2, r2, #8
    8d02:	4313      	orrs	r3, r2
    8d04:	6a3a      	ldr	r2, [r7, #32]
    8d06:	3208      	adds	r2, #8
    8d08:	7812      	ldrb	r2, [r2, #0]
    8d0a:	4313      	orrs	r3, r2
    8d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    8d0e:	2347      	movs	r3, #71	; 0x47
    8d10:	18fc      	adds	r4, r7, r3
    8d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d16:	0011      	movs	r1, r2
    8d18:	0018      	movs	r0, r3
    8d1a:	4b7b      	ldr	r3, [pc, #492]	; (8f08 <chk_mounted+0x36c>)
    8d1c:	4798      	blx	r3
    8d1e:	0003      	movs	r3, r0
    8d20:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    8d22:	2347      	movs	r3, #71	; 0x47
    8d24:	18fb      	adds	r3, r7, r3
    8d26:	781b      	ldrb	r3, [r3, #0]
    8d28:	2b03      	cmp	r3, #3
    8d2a:	d101      	bne.n	8d30 <chk_mounted+0x194>
    8d2c:	2301      	movs	r3, #1
    8d2e:	e209      	b.n	9144 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    8d30:	2347      	movs	r3, #71	; 0x47
    8d32:	18fb      	adds	r3, r7, r3
    8d34:	781b      	ldrb	r3, [r3, #0]
    8d36:	2b00      	cmp	r3, #0
    8d38:	d001      	beq.n	8d3e <chk_mounted+0x1a2>
    8d3a:	230d      	movs	r3, #13
    8d3c:	e202      	b.n	9144 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    8d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d40:	223c      	movs	r2, #60	; 0x3c
    8d42:	5c9b      	ldrb	r3, [r3, r2]
    8d44:	021b      	lsls	r3, r3, #8
    8d46:	b21a      	sxth	r2, r3
    8d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d4a:	213b      	movs	r1, #59	; 0x3b
    8d4c:	5c5b      	ldrb	r3, [r3, r1]
    8d4e:	b21b      	sxth	r3, r3
    8d50:	4313      	orrs	r3, r2
    8d52:	b21a      	sxth	r2, r3
    8d54:	2380      	movs	r3, #128	; 0x80
    8d56:	009b      	lsls	r3, r3, #2
    8d58:	429a      	cmp	r2, r3
    8d5a:	d001      	beq.n	8d60 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
    8d5c:	230d      	movs	r3, #13
    8d5e:	e1f1      	b.n	9144 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    8d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d62:	2247      	movs	r2, #71	; 0x47
    8d64:	5c9b      	ldrb	r3, [r3, r2]
    8d66:	021b      	lsls	r3, r3, #8
    8d68:	b21a      	sxth	r2, r3
    8d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d6c:	2146      	movs	r1, #70	; 0x46
    8d6e:	5c5b      	ldrb	r3, [r3, r1]
    8d70:	b21b      	sxth	r3, r3
    8d72:	4313      	orrs	r3, r2
    8d74:	b21b      	sxth	r3, r3
    8d76:	b29b      	uxth	r3, r3
    8d78:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    8d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8d7c:	2b00      	cmp	r3, #0
    8d7e:	d112      	bne.n	8da6 <chk_mounted+0x20a>
    8d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d82:	2257      	movs	r2, #87	; 0x57
    8d84:	5c9b      	ldrb	r3, [r3, r2]
    8d86:	061a      	lsls	r2, r3, #24
    8d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8d8a:	2156      	movs	r1, #86	; 0x56
    8d8c:	5c5b      	ldrb	r3, [r3, r1]
    8d8e:	041b      	lsls	r3, r3, #16
    8d90:	4313      	orrs	r3, r2
    8d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8d94:	2155      	movs	r1, #85	; 0x55
    8d96:	5c52      	ldrb	r2, [r2, r1]
    8d98:	0212      	lsls	r2, r2, #8
    8d9a:	4313      	orrs	r3, r2
    8d9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8d9e:	2154      	movs	r1, #84	; 0x54
    8da0:	5c52      	ldrb	r2, [r2, r1]
    8da2:	4313      	orrs	r3, r2
    8da4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    8da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
    8daa:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    8dac:	231f      	movs	r3, #31
    8dae:	18fb      	adds	r3, r7, r3
    8db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8db2:	2140      	movs	r1, #64	; 0x40
    8db4:	5c52      	ldrb	r2, [r2, r1]
    8db6:	701a      	strb	r2, [r3, #0]
    8db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8dba:	221f      	movs	r2, #31
    8dbc:	18ba      	adds	r2, r7, r2
    8dbe:	7812      	ldrb	r2, [r2, #0]
    8dc0:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    8dc2:	231f      	movs	r3, #31
    8dc4:	18fb      	adds	r3, r7, r3
    8dc6:	781b      	ldrb	r3, [r3, #0]
    8dc8:	2b01      	cmp	r3, #1
    8dca:	d006      	beq.n	8dda <chk_mounted+0x23e>
    8dcc:	231f      	movs	r3, #31
    8dce:	18fb      	adds	r3, r7, r3
    8dd0:	781b      	ldrb	r3, [r3, #0]
    8dd2:	2b02      	cmp	r3, #2
    8dd4:	d001      	beq.n	8dda <chk_mounted+0x23e>
    8dd6:	230d      	movs	r3, #13
    8dd8:	e1b4      	b.n	9144 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
    8dda:	231f      	movs	r3, #31
    8ddc:	18fb      	adds	r3, r7, r3
    8dde:	781a      	ldrb	r2, [r3, #0]
    8de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8de2:	4353      	muls	r3, r2
    8de4:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    8de6:	231f      	movs	r3, #31
    8de8:	18fb      	adds	r3, r7, r3
    8dea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8dec:	213d      	movs	r1, #61	; 0x3d
    8dee:	5c52      	ldrb	r2, [r2, r1]
    8df0:	701a      	strb	r2, [r3, #0]
    8df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8df4:	221f      	movs	r2, #31
    8df6:	18ba      	adds	r2, r7, r2
    8df8:	7812      	ldrb	r2, [r2, #0]
    8dfa:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    8dfc:	231f      	movs	r3, #31
    8dfe:	18fb      	adds	r3, r7, r3
    8e00:	781b      	ldrb	r3, [r3, #0]
    8e02:	2b00      	cmp	r3, #0
    8e04:	d008      	beq.n	8e18 <chk_mounted+0x27c>
    8e06:	231f      	movs	r3, #31
    8e08:	18fb      	adds	r3, r7, r3
    8e0a:	781b      	ldrb	r3, [r3, #0]
    8e0c:	221f      	movs	r2, #31
    8e0e:	18ba      	adds	r2, r7, r2
    8e10:	7812      	ldrb	r2, [r2, #0]
    8e12:	3a01      	subs	r2, #1
    8e14:	4013      	ands	r3, r2
    8e16:	d001      	beq.n	8e1c <chk_mounted+0x280>
    8e18:	230d      	movs	r3, #13
    8e1a:	e193      	b.n	9144 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    8e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e1e:	2242      	movs	r2, #66	; 0x42
    8e20:	5c9b      	ldrb	r3, [r3, r2]
    8e22:	021b      	lsls	r3, r3, #8
    8e24:	b21a      	sxth	r2, r3
    8e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e28:	2141      	movs	r1, #65	; 0x41
    8e2a:	5c5b      	ldrb	r3, [r3, r1]
    8e2c:	b21b      	sxth	r3, r3
    8e2e:	4313      	orrs	r3, r2
    8e30:	b21b      	sxth	r3, r3
    8e32:	b29a      	uxth	r2, r3
    8e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e36:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    8e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e3a:	891b      	ldrh	r3, [r3, #8]
    8e3c:	220f      	movs	r2, #15
    8e3e:	4013      	ands	r3, r2
    8e40:	b29b      	uxth	r3, r3
    8e42:	2b00      	cmp	r3, #0
    8e44:	d001      	beq.n	8e4a <chk_mounted+0x2ae>
    8e46:	230d      	movs	r3, #13
    8e48:	e17c      	b.n	9144 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    8e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e4c:	2244      	movs	r2, #68	; 0x44
    8e4e:	5c9b      	ldrb	r3, [r3, r2]
    8e50:	021b      	lsls	r3, r3, #8
    8e52:	b21a      	sxth	r2, r3
    8e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e56:	2143      	movs	r1, #67	; 0x43
    8e58:	5c5b      	ldrb	r3, [r3, r1]
    8e5a:	b21b      	sxth	r3, r3
    8e5c:	4313      	orrs	r3, r2
    8e5e:	b21b      	sxth	r3, r3
    8e60:	b29b      	uxth	r3, r3
    8e62:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    8e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8e66:	2b00      	cmp	r3, #0
    8e68:	d112      	bne.n	8e90 <chk_mounted+0x2f4>
    8e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e6c:	2253      	movs	r2, #83	; 0x53
    8e6e:	5c9b      	ldrb	r3, [r3, r2]
    8e70:	061a      	lsls	r2, r3, #24
    8e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e74:	2152      	movs	r1, #82	; 0x52
    8e76:	5c5b      	ldrb	r3, [r3, r1]
    8e78:	041b      	lsls	r3, r3, #16
    8e7a:	4313      	orrs	r3, r2
    8e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8e7e:	2151      	movs	r1, #81	; 0x51
    8e80:	5c52      	ldrb	r2, [r2, r1]
    8e82:	0212      	lsls	r2, r2, #8
    8e84:	4313      	orrs	r3, r2
    8e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8e88:	2150      	movs	r1, #80	; 0x50
    8e8a:	5c52      	ldrb	r2, [r2, r1]
    8e8c:	4313      	orrs	r3, r2
    8e8e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    8e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e92:	223f      	movs	r2, #63	; 0x3f
    8e94:	5c9b      	ldrb	r3, [r3, r2]
    8e96:	021b      	lsls	r3, r3, #8
    8e98:	b21a      	sxth	r2, r3
    8e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8e9c:	213e      	movs	r1, #62	; 0x3e
    8e9e:	5c5b      	ldrb	r3, [r3, r1]
    8ea0:	b21b      	sxth	r3, r3
    8ea2:	4313      	orrs	r3, r2
    8ea4:	b21a      	sxth	r2, r3
    8ea6:	231c      	movs	r3, #28
    8ea8:	18fb      	adds	r3, r7, r3
    8eaa:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    8eac:	231c      	movs	r3, #28
    8eae:	18fb      	adds	r3, r7, r3
    8eb0:	881b      	ldrh	r3, [r3, #0]
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d101      	bne.n	8eba <chk_mounted+0x31e>
    8eb6:	230d      	movs	r3, #13
    8eb8:	e144      	b.n	9144 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    8eba:	231c      	movs	r3, #28
    8ebc:	18fb      	adds	r3, r7, r3
    8ebe:	881a      	ldrh	r2, [r3, #0]
    8ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8ec2:	18d3      	adds	r3, r2, r3
    8ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8ec6:	8912      	ldrh	r2, [r2, #8]
    8ec8:	0912      	lsrs	r2, r2, #4
    8eca:	b292      	uxth	r2, r2
    8ecc:	189b      	adds	r3, r3, r2
    8ece:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    8ed0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8ed2:	69bb      	ldr	r3, [r7, #24]
    8ed4:	429a      	cmp	r2, r3
    8ed6:	d201      	bcs.n	8edc <chk_mounted+0x340>
    8ed8:	230d      	movs	r3, #13
    8eda:	e133      	b.n	9144 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    8edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8ede:	69bb      	ldr	r3, [r7, #24]
    8ee0:	1ad2      	subs	r2, r2, r3
    8ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ee4:	789b      	ldrb	r3, [r3, #2]
    8ee6:	0019      	movs	r1, r3
    8ee8:	4b08      	ldr	r3, [pc, #32]	; (8f0c <chk_mounted+0x370>)
    8eea:	0010      	movs	r0, r2
    8eec:	4798      	blx	r3
    8eee:	0003      	movs	r3, r0
    8ef0:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    8ef2:	697b      	ldr	r3, [r7, #20]
    8ef4:	2b00      	cmp	r3, #0
    8ef6:	d10b      	bne.n	8f10 <chk_mounted+0x374>
    8ef8:	230d      	movs	r3, #13
    8efa:	e123      	b.n	9144 <chk_mounted+0x5a8>
    8efc:	2000017c 	.word	0x2000017c
    8f00:	00006cf9 	.word	0x00006cf9
    8f04:	00006c75 	.word	0x00006c75
    8f08:	00008ac9 	.word	0x00008ac9
    8f0c:	0000a30d 	.word	0x0000a30d
	fmt = FS_FAT12;
    8f10:	2347      	movs	r3, #71	; 0x47
    8f12:	18fb      	adds	r3, r7, r3
    8f14:	2201      	movs	r2, #1
    8f16:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    8f18:	697b      	ldr	r3, [r7, #20]
    8f1a:	4a8c      	ldr	r2, [pc, #560]	; (914c <chk_mounted+0x5b0>)
    8f1c:	4293      	cmp	r3, r2
    8f1e:	d903      	bls.n	8f28 <chk_mounted+0x38c>
    8f20:	2347      	movs	r3, #71	; 0x47
    8f22:	18fb      	adds	r3, r7, r3
    8f24:	2202      	movs	r2, #2
    8f26:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    8f28:	697b      	ldr	r3, [r7, #20]
    8f2a:	4a89      	ldr	r2, [pc, #548]	; (9150 <chk_mounted+0x5b4>)
    8f2c:	4293      	cmp	r3, r2
    8f2e:	d903      	bls.n	8f38 <chk_mounted+0x39c>
    8f30:	2347      	movs	r3, #71	; 0x47
    8f32:	18fb      	adds	r3, r7, r3
    8f34:	2203      	movs	r2, #3
    8f36:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    8f38:	697b      	ldr	r3, [r7, #20]
    8f3a:	1c9a      	adds	r2, r3, #2
    8f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f3e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    8f40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8f42:	69bb      	ldr	r3, [r7, #24]
    8f44:	18d2      	adds	r2, r2, r3
    8f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f48:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    8f4a:	231c      	movs	r3, #28
    8f4c:	18fb      	adds	r3, r7, r3
    8f4e:	881a      	ldrh	r2, [r3, #0]
    8f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8f52:	18d2      	adds	r2, r2, r3
    8f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f56:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    8f58:	2347      	movs	r3, #71	; 0x47
    8f5a:	18fb      	adds	r3, r7, r3
    8f5c:	781b      	ldrb	r3, [r3, #0]
    8f5e:	2b03      	cmp	r3, #3
    8f60:	d11e      	bne.n	8fa0 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    8f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f64:	891b      	ldrh	r3, [r3, #8]
    8f66:	2b00      	cmp	r3, #0
    8f68:	d001      	beq.n	8f6e <chk_mounted+0x3d2>
    8f6a:	230d      	movs	r3, #13
    8f6c:	e0ea      	b.n	9144 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    8f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f70:	225f      	movs	r2, #95	; 0x5f
    8f72:	5c9b      	ldrb	r3, [r3, r2]
    8f74:	061a      	lsls	r2, r3, #24
    8f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f78:	215e      	movs	r1, #94	; 0x5e
    8f7a:	5c5b      	ldrb	r3, [r3, r1]
    8f7c:	041b      	lsls	r3, r3, #16
    8f7e:	4313      	orrs	r3, r2
    8f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8f82:	215d      	movs	r1, #93	; 0x5d
    8f84:	5c52      	ldrb	r2, [r2, r1]
    8f86:	0212      	lsls	r2, r2, #8
    8f88:	4313      	orrs	r3, r2
    8f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8f8c:	215c      	movs	r1, #92	; 0x5c
    8f8e:	5c52      	ldrb	r2, [r2, r1]
    8f90:	431a      	orrs	r2, r3
    8f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f94:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    8f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f98:	699b      	ldr	r3, [r3, #24]
    8f9a:	009b      	lsls	r3, r3, #2
    8f9c:	633b      	str	r3, [r7, #48]	; 0x30
    8f9e:	e020      	b.n	8fe2 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    8fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fa2:	891b      	ldrh	r3, [r3, #8]
    8fa4:	2b00      	cmp	r3, #0
    8fa6:	d101      	bne.n	8fac <chk_mounted+0x410>
    8fa8:	230d      	movs	r3, #13
    8faa:	e0cb      	b.n	9144 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    8fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fae:	6a1a      	ldr	r2, [r3, #32]
    8fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8fb2:	18d2      	adds	r2, r2, r3
    8fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fb6:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    8fb8:	2347      	movs	r3, #71	; 0x47
    8fba:	18fb      	adds	r3, r7, r3
    8fbc:	781b      	ldrb	r3, [r3, #0]
    8fbe:	2b02      	cmp	r3, #2
    8fc0:	d103      	bne.n	8fca <chk_mounted+0x42e>
    8fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fc4:	699b      	ldr	r3, [r3, #24]
    8fc6:	005b      	lsls	r3, r3, #1
    8fc8:	e00a      	b.n	8fe0 <chk_mounted+0x444>
    8fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fcc:	699a      	ldr	r2, [r3, #24]
    8fce:	0013      	movs	r3, r2
    8fd0:	005b      	lsls	r3, r3, #1
    8fd2:	189b      	adds	r3, r3, r2
    8fd4:	085a      	lsrs	r2, r3, #1
    8fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fd8:	699b      	ldr	r3, [r3, #24]
    8fda:	2101      	movs	r1, #1
    8fdc:	400b      	ands	r3, r1
    8fde:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    8fe0:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    8fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fe4:	69da      	ldr	r2, [r3, #28]
    8fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8fe8:	495a      	ldr	r1, [pc, #360]	; (9154 <chk_mounted+0x5b8>)
    8fea:	468c      	mov	ip, r1
    8fec:	4463      	add	r3, ip
    8fee:	0a5b      	lsrs	r3, r3, #9
    8ff0:	429a      	cmp	r2, r3
    8ff2:	d201      	bcs.n	8ff8 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
    8ff4:	230d      	movs	r3, #13
    8ff6:	e0a5      	b.n	9144 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    8ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ffa:	2201      	movs	r2, #1
    8ffc:	4252      	negs	r2, r2
    8ffe:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    9000:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9002:	2200      	movs	r2, #0
    9004:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    9006:	2347      	movs	r3, #71	; 0x47
    9008:	18fb      	adds	r3, r7, r3
    900a:	781b      	ldrb	r3, [r3, #0]
    900c:	2b03      	cmp	r3, #3
    900e:	d000      	beq.n	9012 <chk_mounted+0x476>
    9010:	e082      	b.n	9118 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
    9012:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9014:	2200      	movs	r2, #0
    9016:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    9018:	6abb      	ldr	r3, [r7, #40]	; 0x28
    901a:	2261      	movs	r2, #97	; 0x61
    901c:	5c9b      	ldrb	r3, [r3, r2]
    901e:	021b      	lsls	r3, r3, #8
    9020:	b21a      	sxth	r2, r3
    9022:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9024:	2160      	movs	r1, #96	; 0x60
    9026:	5c5b      	ldrb	r3, [r3, r1]
    9028:	b21b      	sxth	r3, r3
    902a:	4313      	orrs	r3, r2
    902c:	b21b      	sxth	r3, r3
    902e:	b29b      	uxth	r3, r3
    9030:	001a      	movs	r2, r3
    9032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9034:	18d2      	adds	r2, r2, r3
    9036:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9038:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    903c:	7858      	ldrb	r0, [r3, #1]
    903e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9040:	3330      	adds	r3, #48	; 0x30
    9042:	0019      	movs	r1, r3
    9044:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9046:	695a      	ldr	r2, [r3, #20]
    9048:	2301      	movs	r3, #1
    904a:	4c43      	ldr	r4, [pc, #268]	; (9158 <chk_mounted+0x5bc>)
    904c:	47a0      	blx	r4
    904e:	1e03      	subs	r3, r0, #0
    9050:	d162      	bne.n	9118 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9052:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9054:	4a41      	ldr	r2, [pc, #260]	; (915c <chk_mounted+0x5c0>)
    9056:	5c9b      	ldrb	r3, [r3, r2]
    9058:	021b      	lsls	r3, r3, #8
    905a:	b21a      	sxth	r2, r3
    905c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    905e:	4940      	ldr	r1, [pc, #256]	; (9160 <chk_mounted+0x5c4>)
    9060:	5c5b      	ldrb	r3, [r3, r1]
    9062:	b21b      	sxth	r3, r3
    9064:	4313      	orrs	r3, r2
    9066:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    9068:	4a3e      	ldr	r2, [pc, #248]	; (9164 <chk_mounted+0x5c8>)
    906a:	4293      	cmp	r3, r2
    906c:	d154      	bne.n	9118 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9070:	2233      	movs	r2, #51	; 0x33
    9072:	5c9b      	ldrb	r3, [r3, r2]
    9074:	061a      	lsls	r2, r3, #24
    9076:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9078:	2132      	movs	r1, #50	; 0x32
    907a:	5c5b      	ldrb	r3, [r3, r1]
    907c:	041b      	lsls	r3, r3, #16
    907e:	4313      	orrs	r3, r2
    9080:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9082:	2131      	movs	r1, #49	; 0x31
    9084:	5c52      	ldrb	r2, [r2, r1]
    9086:	0212      	lsls	r2, r2, #8
    9088:	4313      	orrs	r3, r2
    908a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    908c:	2130      	movs	r1, #48	; 0x30
    908e:	5c52      	ldrb	r2, [r2, r1]
    9090:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    9092:	4a35      	ldr	r2, [pc, #212]	; (9168 <chk_mounted+0x5cc>)
    9094:	4293      	cmp	r3, r2
    9096:	d13f      	bne.n	9118 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    9098:	6abb      	ldr	r3, [r7, #40]	; 0x28
    909a:	4a34      	ldr	r2, [pc, #208]	; (916c <chk_mounted+0x5d0>)
    909c:	5c9b      	ldrb	r3, [r3, r2]
    909e:	061a      	lsls	r2, r3, #24
    90a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90a2:	4933      	ldr	r1, [pc, #204]	; (9170 <chk_mounted+0x5d4>)
    90a4:	5c5b      	ldrb	r3, [r3, r1]
    90a6:	041b      	lsls	r3, r3, #16
    90a8:	4313      	orrs	r3, r2
    90aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
    90ac:	4931      	ldr	r1, [pc, #196]	; (9174 <chk_mounted+0x5d8>)
    90ae:	5c52      	ldrb	r2, [r2, r1]
    90b0:	0212      	lsls	r2, r2, #8
    90b2:	4313      	orrs	r3, r2
    90b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    90b6:	2285      	movs	r2, #133	; 0x85
    90b8:	0092      	lsls	r2, r2, #2
    90ba:	5c8a      	ldrb	r2, [r1, r2]
    90bc:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    90be:	4a2e      	ldr	r2, [pc, #184]	; (9178 <chk_mounted+0x5dc>)
    90c0:	4293      	cmp	r3, r2
    90c2:	d129      	bne.n	9118 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    90c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90c6:	4a2d      	ldr	r2, [pc, #180]	; (917c <chk_mounted+0x5e0>)
    90c8:	5c9b      	ldrb	r3, [r3, r2]
    90ca:	061a      	lsls	r2, r3, #24
    90cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90ce:	492c      	ldr	r1, [pc, #176]	; (9180 <chk_mounted+0x5e4>)
    90d0:	5c5b      	ldrb	r3, [r3, r1]
    90d2:	041b      	lsls	r3, r3, #16
    90d4:	4313      	orrs	r3, r2
    90d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    90d8:	492a      	ldr	r1, [pc, #168]	; (9184 <chk_mounted+0x5e8>)
    90da:	5c52      	ldrb	r2, [r2, r1]
    90dc:	0212      	lsls	r2, r2, #8
    90de:	4313      	orrs	r3, r2
    90e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    90e2:	2287      	movs	r2, #135	; 0x87
    90e4:	0092      	lsls	r2, r2, #2
    90e6:	5c8a      	ldrb	r2, [r1, r2]
    90e8:	431a      	orrs	r2, r3
    90ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90ec:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    90ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90f0:	4a25      	ldr	r2, [pc, #148]	; (9188 <chk_mounted+0x5ec>)
    90f2:	5c9b      	ldrb	r3, [r3, r2]
    90f4:	061a      	lsls	r2, r3, #24
    90f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    90f8:	4924      	ldr	r1, [pc, #144]	; (918c <chk_mounted+0x5f0>)
    90fa:	5c5b      	ldrb	r3, [r3, r1]
    90fc:	041b      	lsls	r3, r3, #16
    90fe:	4313      	orrs	r3, r2
    9100:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9102:	4923      	ldr	r1, [pc, #140]	; (9190 <chk_mounted+0x5f4>)
    9104:	5c52      	ldrb	r2, [r2, r1]
    9106:	0212      	lsls	r2, r2, #8
    9108:	4313      	orrs	r3, r2
    910a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    910c:	2286      	movs	r2, #134	; 0x86
    910e:	0092      	lsls	r2, r2, #2
    9110:	5c8a      	ldrb	r2, [r1, r2]
    9112:	431a      	orrs	r2, r3
    9114:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9116:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    9118:	6abb      	ldr	r3, [r7, #40]	; 0x28
    911a:	2247      	movs	r2, #71	; 0x47
    911c:	18ba      	adds	r2, r7, r2
    911e:	7812      	ldrb	r2, [r2, #0]
    9120:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    9122:	4b1c      	ldr	r3, [pc, #112]	; (9194 <chk_mounted+0x5f8>)
    9124:	881b      	ldrh	r3, [r3, #0]
    9126:	3301      	adds	r3, #1
    9128:	b29a      	uxth	r2, r3
    912a:	4b1a      	ldr	r3, [pc, #104]	; (9194 <chk_mounted+0x5f8>)
    912c:	801a      	strh	r2, [r3, #0]
    912e:	4b19      	ldr	r3, [pc, #100]	; (9194 <chk_mounted+0x5f8>)
    9130:	881a      	ldrh	r2, [r3, #0]
    9132:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9134:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    9136:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9138:	2200      	movs	r2, #0
    913a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    913e:	2200      	movs	r2, #0
    9140:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    9142:	2300      	movs	r3, #0
}
    9144:	0018      	movs	r0, r3
    9146:	46bd      	mov	sp, r7
    9148:	b013      	add	sp, #76	; 0x4c
    914a:	bd90      	pop	{r4, r7, pc}
    914c:	00000ff5 	.word	0x00000ff5
    9150:	0000fff5 	.word	0x0000fff5
    9154:	000001ff 	.word	0x000001ff
    9158:	00006d31 	.word	0x00006d31
    915c:	0000022f 	.word	0x0000022f
    9160:	0000022e 	.word	0x0000022e
    9164:	ffffaa55 	.word	0xffffaa55
    9168:	41615252 	.word	0x41615252
    916c:	00000217 	.word	0x00000217
    9170:	00000216 	.word	0x00000216
    9174:	00000215 	.word	0x00000215
    9178:	61417272 	.word	0x61417272
    917c:	0000021f 	.word	0x0000021f
    9180:	0000021e 	.word	0x0000021e
    9184:	0000021d 	.word	0x0000021d
    9188:	0000021b 	.word	0x0000021b
    918c:	0000021a 	.word	0x0000021a
    9190:	00000219 	.word	0x00000219
    9194:	20000180 	.word	0x20000180

00009198 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    9198:	b580      	push	{r7, lr}
    919a:	b082      	sub	sp, #8
    919c:	af00      	add	r7, sp, #0
    919e:	6078      	str	r0, [r7, #4]
    91a0:	000a      	movs	r2, r1
    91a2:	1cbb      	adds	r3, r7, #2
    91a4:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
    91a6:	687b      	ldr	r3, [r7, #4]
    91a8:	2b00      	cmp	r3, #0
    91aa:	d009      	beq.n	91c0 <validate+0x28>
    91ac:	687b      	ldr	r3, [r7, #4]
    91ae:	781b      	ldrb	r3, [r3, #0]
    91b0:	2b00      	cmp	r3, #0
    91b2:	d005      	beq.n	91c0 <validate+0x28>
    91b4:	687b      	ldr	r3, [r7, #4]
    91b6:	88db      	ldrh	r3, [r3, #6]
    91b8:	1cba      	adds	r2, r7, #2
    91ba:	8812      	ldrh	r2, [r2, #0]
    91bc:	429a      	cmp	r2, r3
    91be:	d001      	beq.n	91c4 <validate+0x2c>
		return FR_INVALID_OBJECT;
    91c0:	2309      	movs	r3, #9
    91c2:	e00c      	b.n	91de <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    91c4:	687b      	ldr	r3, [r7, #4]
    91c6:	785b      	ldrb	r3, [r3, #1]
    91c8:	0018      	movs	r0, r3
    91ca:	4b07      	ldr	r3, [pc, #28]	; (91e8 <validate+0x50>)
    91cc:	4798      	blx	r3
    91ce:	0003      	movs	r3, r0
    91d0:	001a      	movs	r2, r3
    91d2:	2301      	movs	r3, #1
    91d4:	4013      	ands	r3, r2
    91d6:	d001      	beq.n	91dc <validate+0x44>
		return FR_NOT_READY;
    91d8:	2303      	movs	r3, #3
    91da:	e000      	b.n	91de <validate+0x46>

	return FR_OK;
    91dc:	2300      	movs	r3, #0
}
    91de:	0018      	movs	r0, r3
    91e0:	46bd      	mov	sp, r7
    91e2:	b002      	add	sp, #8
    91e4:	bd80      	pop	{r7, pc}
    91e6:	46c0      	nop			; (mov r8, r8)
    91e8:	00006cf9 	.word	0x00006cf9

000091ec <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    91ec:	b580      	push	{r7, lr}
    91ee:	b084      	sub	sp, #16
    91f0:	af00      	add	r7, sp, #0
    91f2:	0002      	movs	r2, r0
    91f4:	6039      	str	r1, [r7, #0]
    91f6:	1dfb      	adds	r3, r7, #7
    91f8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    91fa:	1dfb      	adds	r3, r7, #7
    91fc:	781b      	ldrb	r3, [r3, #0]
    91fe:	2b00      	cmp	r3, #0
    9200:	d001      	beq.n	9206 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    9202:	230b      	movs	r3, #11
    9204:	e018      	b.n	9238 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
    9206:	1dfb      	adds	r3, r7, #7
    9208:	781a      	ldrb	r2, [r3, #0]
    920a:	4b0d      	ldr	r3, [pc, #52]	; (9240 <f_mount+0x54>)
    920c:	0092      	lsls	r2, r2, #2
    920e:	58d3      	ldr	r3, [r2, r3]
    9210:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    9212:	68fb      	ldr	r3, [r7, #12]
    9214:	2b00      	cmp	r3, #0
    9216:	d002      	beq.n	921e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    9218:	68fb      	ldr	r3, [r7, #12]
    921a:	2200      	movs	r2, #0
    921c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    921e:	683b      	ldr	r3, [r7, #0]
    9220:	2b00      	cmp	r3, #0
    9222:	d002      	beq.n	922a <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
    9224:	683b      	ldr	r3, [r7, #0]
    9226:	2200      	movs	r2, #0
    9228:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    922a:	1dfb      	adds	r3, r7, #7
    922c:	781a      	ldrb	r2, [r3, #0]
    922e:	4b04      	ldr	r3, [pc, #16]	; (9240 <f_mount+0x54>)
    9230:	0092      	lsls	r2, r2, #2
    9232:	6839      	ldr	r1, [r7, #0]
    9234:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    9236:	2300      	movs	r3, #0
}
    9238:	0018      	movs	r0, r3
    923a:	46bd      	mov	sp, r7
    923c:	b004      	add	sp, #16
    923e:	bd80      	pop	{r7, pc}
    9240:	2000017c 	.word	0x2000017c

00009244 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    9244:	b590      	push	{r4, r7, lr}
    9246:	4ce5      	ldr	r4, [pc, #916]	; (95dc <f_open+0x398>)
    9248:	44a5      	add	sp, r4
    924a:	af00      	add	r7, sp, #0
    924c:	60f8      	str	r0, [r7, #12]
    924e:	60b9      	str	r1, [r7, #8]
    9250:	4be3      	ldr	r3, [pc, #908]	; (95e0 <f_open+0x39c>)
    9252:	2194      	movs	r1, #148	; 0x94
    9254:	0089      	lsls	r1, r1, #2
    9256:	468c      	mov	ip, r1
    9258:	44bc      	add	ip, r7
    925a:	4463      	add	r3, ip
    925c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    925e:	68fb      	ldr	r3, [r7, #12]
    9260:	2200      	movs	r2, #0
    9262:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    9264:	4bde      	ldr	r3, [pc, #888]	; (95e0 <f_open+0x39c>)
    9266:	2294      	movs	r2, #148	; 0x94
    9268:	0092      	lsls	r2, r2, #2
    926a:	4694      	mov	ip, r2
    926c:	44bc      	add	ip, r7
    926e:	4463      	add	r3, ip
    9270:	4adb      	ldr	r2, [pc, #876]	; (95e0 <f_open+0x39c>)
    9272:	2194      	movs	r1, #148	; 0x94
    9274:	0089      	lsls	r1, r1, #2
    9276:	468c      	mov	ip, r1
    9278:	44bc      	add	ip, r7
    927a:	4462      	add	r2, ip
    927c:	7812      	ldrb	r2, [r2, #0]
    927e:	211f      	movs	r1, #31
    9280:	400a      	ands	r2, r1
    9282:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    9284:	4bd6      	ldr	r3, [pc, #856]	; (95e0 <f_open+0x39c>)
    9286:	2294      	movs	r2, #148	; 0x94
    9288:	0092      	lsls	r2, r2, #2
    928a:	4694      	mov	ip, r2
    928c:	44bc      	add	ip, r7
    928e:	4463      	add	r3, ip
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	2201      	movs	r2, #1
    9294:	4393      	bics	r3, r2
    9296:	b2da      	uxtb	r2, r3
    9298:	4bd2      	ldr	r3, [pc, #840]	; (95e4 <f_open+0x3a0>)
    929a:	18fc      	adds	r4, r7, r3
    929c:	2387      	movs	r3, #135	; 0x87
    929e:	009b      	lsls	r3, r3, #2
    92a0:	18f9      	adds	r1, r7, r3
    92a2:	2308      	movs	r3, #8
    92a4:	18fb      	adds	r3, r7, r3
    92a6:	0018      	movs	r0, r3
    92a8:	4bcf      	ldr	r3, [pc, #828]	; (95e8 <f_open+0x3a4>)
    92aa:	4798      	blx	r3
    92ac:	0003      	movs	r3, r0
    92ae:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    92b0:	2387      	movs	r3, #135	; 0x87
    92b2:	009b      	lsls	r3, r3, #2
    92b4:	18fb      	adds	r3, r7, r3
    92b6:	2284      	movs	r2, #132	; 0x84
    92b8:	0092      	lsls	r2, r2, #2
    92ba:	18ba      	adds	r2, r7, r2
    92bc:	619a      	str	r2, [r3, #24]
    92be:	2387      	movs	r3, #135	; 0x87
    92c0:	009b      	lsls	r3, r3, #2
    92c2:	18fb      	adds	r3, r7, r3
    92c4:	2210      	movs	r2, #16
    92c6:	18ba      	adds	r2, r7, r2
    92c8:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
    92ca:	4bc6      	ldr	r3, [pc, #792]	; (95e4 <f_open+0x3a0>)
    92cc:	18fb      	adds	r3, r7, r3
    92ce:	781b      	ldrb	r3, [r3, #0]
    92d0:	2b00      	cmp	r3, #0
    92d2:	d10b      	bne.n	92ec <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
    92d4:	68ba      	ldr	r2, [r7, #8]
    92d6:	4bc3      	ldr	r3, [pc, #780]	; (95e4 <f_open+0x3a0>)
    92d8:	18fc      	adds	r4, r7, r3
    92da:	2387      	movs	r3, #135	; 0x87
    92dc:	009b      	lsls	r3, r3, #2
    92de:	18fb      	adds	r3, r7, r3
    92e0:	0011      	movs	r1, r2
    92e2:	0018      	movs	r0, r3
    92e4:	4bc1      	ldr	r3, [pc, #772]	; (95ec <f_open+0x3a8>)
    92e6:	4798      	blx	r3
    92e8:	0003      	movs	r3, r0
    92ea:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
    92ec:	2387      	movs	r3, #135	; 0x87
    92ee:	009b      	lsls	r3, r3, #2
    92f0:	18fb      	adds	r3, r7, r3
    92f2:	695b      	ldr	r3, [r3, #20]
    92f4:	2292      	movs	r2, #146	; 0x92
    92f6:	0092      	lsls	r2, r2, #2
    92f8:	18ba      	adds	r2, r7, r2
    92fa:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    92fc:	4bb9      	ldr	r3, [pc, #740]	; (95e4 <f_open+0x3a0>)
    92fe:	18fb      	adds	r3, r7, r3
    9300:	781b      	ldrb	r3, [r3, #0]
    9302:	2b00      	cmp	r3, #0
    9304:	d109      	bne.n	931a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
    9306:	2392      	movs	r3, #146	; 0x92
    9308:	009b      	lsls	r3, r3, #2
    930a:	18fb      	adds	r3, r7, r3
    930c:	681b      	ldr	r3, [r3, #0]
    930e:	2b00      	cmp	r3, #0
    9310:	d103      	bne.n	931a <f_open+0xd6>
			res = FR_INVALID_NAME;
    9312:	4bb4      	ldr	r3, [pc, #720]	; (95e4 <f_open+0x3a0>)
    9314:	18fb      	adds	r3, r7, r3
    9316:	2206      	movs	r2, #6
    9318:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    931a:	4bb1      	ldr	r3, [pc, #708]	; (95e0 <f_open+0x39c>)
    931c:	2294      	movs	r2, #148	; 0x94
    931e:	0092      	lsls	r2, r2, #2
    9320:	4694      	mov	ip, r2
    9322:	44bc      	add	ip, r7
    9324:	4463      	add	r3, ip
    9326:	781b      	ldrb	r3, [r3, #0]
    9328:	221c      	movs	r2, #28
    932a:	4013      	ands	r3, r2
    932c:	d100      	bne.n	9330 <f_open+0xec>
    932e:	e141      	b.n	95b4 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    9330:	4bac      	ldr	r3, [pc, #688]	; (95e4 <f_open+0x3a0>)
    9332:	18fb      	adds	r3, r7, r3
    9334:	781b      	ldrb	r3, [r3, #0]
    9336:	2b00      	cmp	r3, #0
    9338:	d027      	beq.n	938a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    933a:	4baa      	ldr	r3, [pc, #680]	; (95e4 <f_open+0x3a0>)
    933c:	18fb      	adds	r3, r7, r3
    933e:	781b      	ldrb	r3, [r3, #0]
    9340:	2b04      	cmp	r3, #4
    9342:	d109      	bne.n	9358 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    9344:	4ba7      	ldr	r3, [pc, #668]	; (95e4 <f_open+0x3a0>)
    9346:	18fc      	adds	r4, r7, r3
    9348:	2387      	movs	r3, #135	; 0x87
    934a:	009b      	lsls	r3, r3, #2
    934c:	18fb      	adds	r3, r7, r3
    934e:	0018      	movs	r0, r3
    9350:	4ba7      	ldr	r3, [pc, #668]	; (95f0 <f_open+0x3ac>)
    9352:	4798      	blx	r3
    9354:	0003      	movs	r3, r0
    9356:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    9358:	4ba1      	ldr	r3, [pc, #644]	; (95e0 <f_open+0x39c>)
    935a:	2294      	movs	r2, #148	; 0x94
    935c:	0092      	lsls	r2, r2, #2
    935e:	4694      	mov	ip, r2
    9360:	44bc      	add	ip, r7
    9362:	4463      	add	r3, ip
    9364:	4a9e      	ldr	r2, [pc, #632]	; (95e0 <f_open+0x39c>)
    9366:	2194      	movs	r1, #148	; 0x94
    9368:	0089      	lsls	r1, r1, #2
    936a:	468c      	mov	ip, r1
    936c:	44bc      	add	ip, r7
    936e:	4462      	add	r2, ip
    9370:	7812      	ldrb	r2, [r2, #0]
    9372:	2108      	movs	r1, #8
    9374:	430a      	orrs	r2, r1
    9376:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    9378:	2387      	movs	r3, #135	; 0x87
    937a:	009b      	lsls	r3, r3, #2
    937c:	18fb      	adds	r3, r7, r3
    937e:	695b      	ldr	r3, [r3, #20]
    9380:	2292      	movs	r2, #146	; 0x92
    9382:	0092      	lsls	r2, r2, #2
    9384:	18ba      	adds	r2, r7, r2
    9386:	6013      	str	r3, [r2, #0]
    9388:	e01c      	b.n	93c4 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    938a:	2392      	movs	r3, #146	; 0x92
    938c:	009b      	lsls	r3, r3, #2
    938e:	18fb      	adds	r3, r7, r3
    9390:	681b      	ldr	r3, [r3, #0]
    9392:	330b      	adds	r3, #11
    9394:	781b      	ldrb	r3, [r3, #0]
    9396:	001a      	movs	r2, r3
    9398:	2311      	movs	r3, #17
    939a:	4013      	ands	r3, r2
    939c:	d004      	beq.n	93a8 <f_open+0x164>
				res = FR_DENIED;
    939e:	4b91      	ldr	r3, [pc, #580]	; (95e4 <f_open+0x3a0>)
    93a0:	18fb      	adds	r3, r7, r3
    93a2:	2207      	movs	r2, #7
    93a4:	701a      	strb	r2, [r3, #0]
    93a6:	e00d      	b.n	93c4 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    93a8:	4b8d      	ldr	r3, [pc, #564]	; (95e0 <f_open+0x39c>)
    93aa:	2294      	movs	r2, #148	; 0x94
    93ac:	0092      	lsls	r2, r2, #2
    93ae:	4694      	mov	ip, r2
    93b0:	44bc      	add	ip, r7
    93b2:	4463      	add	r3, ip
    93b4:	781b      	ldrb	r3, [r3, #0]
    93b6:	2204      	movs	r2, #4
    93b8:	4013      	ands	r3, r2
    93ba:	d003      	beq.n	93c4 <f_open+0x180>
					res = FR_EXIST;
    93bc:	4b89      	ldr	r3, [pc, #548]	; (95e4 <f_open+0x3a0>)
    93be:	18fb      	adds	r3, r7, r3
    93c0:	2208      	movs	r2, #8
    93c2:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    93c4:	4b87      	ldr	r3, [pc, #540]	; (95e4 <f_open+0x3a0>)
    93c6:	18fb      	adds	r3, r7, r3
    93c8:	781b      	ldrb	r3, [r3, #0]
    93ca:	2b00      	cmp	r3, #0
    93cc:	d000      	beq.n	93d0 <f_open+0x18c>
    93ce:	e12f      	b.n	9630 <f_open+0x3ec>
    93d0:	4b83      	ldr	r3, [pc, #524]	; (95e0 <f_open+0x39c>)
    93d2:	2294      	movs	r2, #148	; 0x94
    93d4:	0092      	lsls	r2, r2, #2
    93d6:	4694      	mov	ip, r2
    93d8:	44bc      	add	ip, r7
    93da:	4463      	add	r3, ip
    93dc:	781b      	ldrb	r3, [r3, #0]
    93de:	2208      	movs	r2, #8
    93e0:	4013      	ands	r3, r2
    93e2:	d100      	bne.n	93e6 <f_open+0x1a2>
    93e4:	e124      	b.n	9630 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
    93e6:	4b83      	ldr	r3, [pc, #524]	; (95f4 <f_open+0x3b0>)
    93e8:	4798      	blx	r3
    93ea:	0003      	movs	r3, r0
    93ec:	2291      	movs	r2, #145	; 0x91
    93ee:	0092      	lsls	r2, r2, #2
    93f0:	18ba      	adds	r2, r7, r2
    93f2:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
    93f4:	2392      	movs	r3, #146	; 0x92
    93f6:	009b      	lsls	r3, r3, #2
    93f8:	18fb      	adds	r3, r7, r3
    93fa:	681b      	ldr	r3, [r3, #0]
    93fc:	330e      	adds	r3, #14
    93fe:	2291      	movs	r2, #145	; 0x91
    9400:	0092      	lsls	r2, r2, #2
    9402:	18ba      	adds	r2, r7, r2
    9404:	6812      	ldr	r2, [r2, #0]
    9406:	b2d2      	uxtb	r2, r2
    9408:	701a      	strb	r2, [r3, #0]
    940a:	2392      	movs	r3, #146	; 0x92
    940c:	009b      	lsls	r3, r3, #2
    940e:	18fb      	adds	r3, r7, r3
    9410:	681b      	ldr	r3, [r3, #0]
    9412:	330f      	adds	r3, #15
    9414:	2291      	movs	r2, #145	; 0x91
    9416:	0092      	lsls	r2, r2, #2
    9418:	18ba      	adds	r2, r7, r2
    941a:	6812      	ldr	r2, [r2, #0]
    941c:	b292      	uxth	r2, r2
    941e:	0a12      	lsrs	r2, r2, #8
    9420:	b292      	uxth	r2, r2
    9422:	b2d2      	uxtb	r2, r2
    9424:	701a      	strb	r2, [r3, #0]
    9426:	2392      	movs	r3, #146	; 0x92
    9428:	009b      	lsls	r3, r3, #2
    942a:	18fb      	adds	r3, r7, r3
    942c:	681b      	ldr	r3, [r3, #0]
    942e:	3310      	adds	r3, #16
    9430:	2291      	movs	r2, #145	; 0x91
    9432:	0092      	lsls	r2, r2, #2
    9434:	18ba      	adds	r2, r7, r2
    9436:	6812      	ldr	r2, [r2, #0]
    9438:	0c12      	lsrs	r2, r2, #16
    943a:	b2d2      	uxtb	r2, r2
    943c:	701a      	strb	r2, [r3, #0]
    943e:	2392      	movs	r3, #146	; 0x92
    9440:	009b      	lsls	r3, r3, #2
    9442:	18fb      	adds	r3, r7, r3
    9444:	681b      	ldr	r3, [r3, #0]
    9446:	3311      	adds	r3, #17
    9448:	2291      	movs	r2, #145	; 0x91
    944a:	0092      	lsls	r2, r2, #2
    944c:	18ba      	adds	r2, r7, r2
    944e:	6812      	ldr	r2, [r2, #0]
    9450:	0e12      	lsrs	r2, r2, #24
    9452:	b2d2      	uxtb	r2, r2
    9454:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    9456:	2392      	movs	r3, #146	; 0x92
    9458:	009b      	lsls	r3, r3, #2
    945a:	18fb      	adds	r3, r7, r3
    945c:	681b      	ldr	r3, [r3, #0]
    945e:	330b      	adds	r3, #11
    9460:	2200      	movs	r2, #0
    9462:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    9464:	2392      	movs	r3, #146	; 0x92
    9466:	009b      	lsls	r3, r3, #2
    9468:	18fb      	adds	r3, r7, r3
    946a:	681b      	ldr	r3, [r3, #0]
    946c:	331c      	adds	r3, #28
    946e:	2200      	movs	r2, #0
    9470:	701a      	strb	r2, [r3, #0]
    9472:	2392      	movs	r3, #146	; 0x92
    9474:	009b      	lsls	r3, r3, #2
    9476:	18fb      	adds	r3, r7, r3
    9478:	681b      	ldr	r3, [r3, #0]
    947a:	331d      	adds	r3, #29
    947c:	2200      	movs	r2, #0
    947e:	701a      	strb	r2, [r3, #0]
    9480:	2392      	movs	r3, #146	; 0x92
    9482:	009b      	lsls	r3, r3, #2
    9484:	18fb      	adds	r3, r7, r3
    9486:	681b      	ldr	r3, [r3, #0]
    9488:	331e      	adds	r3, #30
    948a:	2200      	movs	r2, #0
    948c:	701a      	strb	r2, [r3, #0]
    948e:	2392      	movs	r3, #146	; 0x92
    9490:	009b      	lsls	r3, r3, #2
    9492:	18fb      	adds	r3, r7, r3
    9494:	681b      	ldr	r3, [r3, #0]
    9496:	331f      	adds	r3, #31
    9498:	2200      	movs	r2, #0
    949a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    949c:	2392      	movs	r3, #146	; 0x92
    949e:	009b      	lsls	r3, r3, #2
    94a0:	18fb      	adds	r3, r7, r3
    94a2:	681b      	ldr	r3, [r3, #0]
    94a4:	3315      	adds	r3, #21
    94a6:	781b      	ldrb	r3, [r3, #0]
    94a8:	021b      	lsls	r3, r3, #8
    94aa:	b21a      	sxth	r2, r3
    94ac:	2392      	movs	r3, #146	; 0x92
    94ae:	009b      	lsls	r3, r3, #2
    94b0:	18fb      	adds	r3, r7, r3
    94b2:	681b      	ldr	r3, [r3, #0]
    94b4:	3314      	adds	r3, #20
    94b6:	781b      	ldrb	r3, [r3, #0]
    94b8:	b21b      	sxth	r3, r3
    94ba:	4313      	orrs	r3, r2
    94bc:	b21b      	sxth	r3, r3
    94be:	b29b      	uxth	r3, r3
    94c0:	041b      	lsls	r3, r3, #16
    94c2:	2292      	movs	r2, #146	; 0x92
    94c4:	0092      	lsls	r2, r2, #2
    94c6:	18ba      	adds	r2, r7, r2
    94c8:	6812      	ldr	r2, [r2, #0]
    94ca:	321b      	adds	r2, #27
    94cc:	7812      	ldrb	r2, [r2, #0]
    94ce:	0212      	lsls	r2, r2, #8
    94d0:	b211      	sxth	r1, r2
    94d2:	2292      	movs	r2, #146	; 0x92
    94d4:	0092      	lsls	r2, r2, #2
    94d6:	18ba      	adds	r2, r7, r2
    94d8:	6812      	ldr	r2, [r2, #0]
    94da:	321a      	adds	r2, #26
    94dc:	7812      	ldrb	r2, [r2, #0]
    94de:	b212      	sxth	r2, r2
    94e0:	430a      	orrs	r2, r1
    94e2:	b212      	sxth	r2, r2
    94e4:	b292      	uxth	r2, r2
    94e6:	4313      	orrs	r3, r2
    94e8:	2290      	movs	r2, #144	; 0x90
    94ea:	0092      	lsls	r2, r2, #2
    94ec:	18ba      	adds	r2, r7, r2
    94ee:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    94f0:	2392      	movs	r3, #146	; 0x92
    94f2:	009b      	lsls	r3, r3, #2
    94f4:	18fb      	adds	r3, r7, r3
    94f6:	681b      	ldr	r3, [r3, #0]
    94f8:	331a      	adds	r3, #26
    94fa:	2200      	movs	r2, #0
    94fc:	701a      	strb	r2, [r3, #0]
    94fe:	2392      	movs	r3, #146	; 0x92
    9500:	009b      	lsls	r3, r3, #2
    9502:	18fb      	adds	r3, r7, r3
    9504:	681b      	ldr	r3, [r3, #0]
    9506:	331b      	adds	r3, #27
    9508:	2200      	movs	r2, #0
    950a:	701a      	strb	r2, [r3, #0]
    950c:	2392      	movs	r3, #146	; 0x92
    950e:	009b      	lsls	r3, r3, #2
    9510:	18fb      	adds	r3, r7, r3
    9512:	681b      	ldr	r3, [r3, #0]
    9514:	3314      	adds	r3, #20
    9516:	2200      	movs	r2, #0
    9518:	701a      	strb	r2, [r3, #0]
    951a:	2392      	movs	r3, #146	; 0x92
    951c:	009b      	lsls	r3, r3, #2
    951e:	18fb      	adds	r3, r7, r3
    9520:	681b      	ldr	r3, [r3, #0]
    9522:	3315      	adds	r3, #21
    9524:	2200      	movs	r2, #0
    9526:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    9528:	2387      	movs	r3, #135	; 0x87
    952a:	009b      	lsls	r3, r3, #2
    952c:	18fb      	adds	r3, r7, r3
    952e:	681b      	ldr	r3, [r3, #0]
    9530:	2201      	movs	r2, #1
    9532:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    9534:	2390      	movs	r3, #144	; 0x90
    9536:	009b      	lsls	r3, r3, #2
    9538:	18fb      	adds	r3, r7, r3
    953a:	681b      	ldr	r3, [r3, #0]
    953c:	2b00      	cmp	r3, #0
    953e:	d100      	bne.n	9542 <f_open+0x2fe>
    9540:	e076      	b.n	9630 <f_open+0x3ec>
				dw = dj.fs->winsect;
    9542:	2387      	movs	r3, #135	; 0x87
    9544:	009b      	lsls	r3, r3, #2
    9546:	18fb      	adds	r3, r7, r3
    9548:	681b      	ldr	r3, [r3, #0]
    954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    954c:	2291      	movs	r2, #145	; 0x91
    954e:	0092      	lsls	r2, r2, #2
    9550:	18ba      	adds	r2, r7, r2
    9552:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
    9554:	2387      	movs	r3, #135	; 0x87
    9556:	009b      	lsls	r3, r3, #2
    9558:	18fb      	adds	r3, r7, r3
    955a:	681b      	ldr	r3, [r3, #0]
    955c:	4a21      	ldr	r2, [pc, #132]	; (95e4 <f_open+0x3a0>)
    955e:	18bc      	adds	r4, r7, r2
    9560:	2290      	movs	r2, #144	; 0x90
    9562:	0092      	lsls	r2, r2, #2
    9564:	18ba      	adds	r2, r7, r2
    9566:	6812      	ldr	r2, [r2, #0]
    9568:	0011      	movs	r1, r2
    956a:	0018      	movs	r0, r3
    956c:	4b22      	ldr	r3, [pc, #136]	; (95f8 <f_open+0x3b4>)
    956e:	4798      	blx	r3
    9570:	0003      	movs	r3, r0
    9572:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    9574:	4b1b      	ldr	r3, [pc, #108]	; (95e4 <f_open+0x3a0>)
    9576:	18fb      	adds	r3, r7, r3
    9578:	781b      	ldrb	r3, [r3, #0]
    957a:	2b00      	cmp	r3, #0
    957c:	d158      	bne.n	9630 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    957e:	2387      	movs	r3, #135	; 0x87
    9580:	009b      	lsls	r3, r3, #2
    9582:	18fb      	adds	r3, r7, r3
    9584:	681b      	ldr	r3, [r3, #0]
    9586:	2290      	movs	r2, #144	; 0x90
    9588:	0092      	lsls	r2, r2, #2
    958a:	18ba      	adds	r2, r7, r2
    958c:	6812      	ldr	r2, [r2, #0]
    958e:	3a01      	subs	r2, #1
    9590:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    9592:	2387      	movs	r3, #135	; 0x87
    9594:	009b      	lsls	r3, r3, #2
    9596:	18fb      	adds	r3, r7, r3
    9598:	681b      	ldr	r3, [r3, #0]
    959a:	4a12      	ldr	r2, [pc, #72]	; (95e4 <f_open+0x3a0>)
    959c:	18bc      	adds	r4, r7, r2
    959e:	2291      	movs	r2, #145	; 0x91
    95a0:	0092      	lsls	r2, r2, #2
    95a2:	18ba      	adds	r2, r7, r2
    95a4:	6812      	ldr	r2, [r2, #0]
    95a6:	0011      	movs	r1, r2
    95a8:	0018      	movs	r0, r3
    95aa:	4b14      	ldr	r3, [pc, #80]	; (95fc <f_open+0x3b8>)
    95ac:	4798      	blx	r3
    95ae:	0003      	movs	r3, r0
    95b0:	7023      	strb	r3, [r4, #0]
    95b2:	e03d      	b.n	9630 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
    95b4:	4b0b      	ldr	r3, [pc, #44]	; (95e4 <f_open+0x3a0>)
    95b6:	18fb      	adds	r3, r7, r3
    95b8:	781b      	ldrb	r3, [r3, #0]
    95ba:	2b00      	cmp	r3, #0
    95bc:	d138      	bne.n	9630 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    95be:	2392      	movs	r3, #146	; 0x92
    95c0:	009b      	lsls	r3, r3, #2
    95c2:	18fb      	adds	r3, r7, r3
    95c4:	681b      	ldr	r3, [r3, #0]
    95c6:	330b      	adds	r3, #11
    95c8:	781b      	ldrb	r3, [r3, #0]
    95ca:	001a      	movs	r2, r3
    95cc:	2310      	movs	r3, #16
    95ce:	4013      	ands	r3, r2
    95d0:	d016      	beq.n	9600 <f_open+0x3bc>
				res = FR_NO_FILE;
    95d2:	4b04      	ldr	r3, [pc, #16]	; (95e4 <f_open+0x3a0>)
    95d4:	18fb      	adds	r3, r7, r3
    95d6:	2204      	movs	r2, #4
    95d8:	701a      	strb	r2, [r3, #0]
    95da:	e029      	b.n	9630 <f_open+0x3ec>
    95dc:	fffffdac 	.word	0xfffffdac
    95e0:	fffffdb7 	.word	0xfffffdb7
    95e4:	0000024f 	.word	0x0000024f
    95e8:	00008b9d 	.word	0x00008b9d
    95ec:	00008991 	.word	0x00008991
    95f0:	000081e1 	.word	0x000081e1
    95f4:	00006fd9 	.word	0x00006fd9
    95f8:	0000775d 	.word	0x0000775d
    95fc:	0000711d 	.word	0x0000711d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    9600:	4b5a      	ldr	r3, [pc, #360]	; (976c <f_open+0x528>)
    9602:	2294      	movs	r2, #148	; 0x94
    9604:	0092      	lsls	r2, r2, #2
    9606:	4694      	mov	ip, r2
    9608:	44bc      	add	ip, r7
    960a:	4463      	add	r3, ip
    960c:	781b      	ldrb	r3, [r3, #0]
    960e:	2202      	movs	r2, #2
    9610:	4013      	ands	r3, r2
    9612:	d00d      	beq.n	9630 <f_open+0x3ec>
    9614:	2392      	movs	r3, #146	; 0x92
    9616:	009b      	lsls	r3, r3, #2
    9618:	18fb      	adds	r3, r7, r3
    961a:	681b      	ldr	r3, [r3, #0]
    961c:	330b      	adds	r3, #11
    961e:	781b      	ldrb	r3, [r3, #0]
    9620:	001a      	movs	r2, r3
    9622:	2301      	movs	r3, #1
    9624:	4013      	ands	r3, r2
    9626:	d003      	beq.n	9630 <f_open+0x3ec>
					res = FR_DENIED;
    9628:	4b51      	ldr	r3, [pc, #324]	; (9770 <f_open+0x52c>)
    962a:	18fb      	adds	r3, r7, r3
    962c:	2207      	movs	r2, #7
    962e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
    9630:	4b4f      	ldr	r3, [pc, #316]	; (9770 <f_open+0x52c>)
    9632:	18fb      	adds	r3, r7, r3
    9634:	781b      	ldrb	r3, [r3, #0]
    9636:	2b00      	cmp	r3, #0
    9638:	d126      	bne.n	9688 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    963a:	4b4c      	ldr	r3, [pc, #304]	; (976c <f_open+0x528>)
    963c:	2294      	movs	r2, #148	; 0x94
    963e:	0092      	lsls	r2, r2, #2
    9640:	4694      	mov	ip, r2
    9642:	44bc      	add	ip, r7
    9644:	4463      	add	r3, ip
    9646:	781b      	ldrb	r3, [r3, #0]
    9648:	2208      	movs	r2, #8
    964a:	4013      	ands	r3, r2
    964c:	d00f      	beq.n	966e <f_open+0x42a>
			mode |= FA__WRITTEN;
    964e:	4b47      	ldr	r3, [pc, #284]	; (976c <f_open+0x528>)
    9650:	2294      	movs	r2, #148	; 0x94
    9652:	0092      	lsls	r2, r2, #2
    9654:	4694      	mov	ip, r2
    9656:	44bc      	add	ip, r7
    9658:	4463      	add	r3, ip
    965a:	4a44      	ldr	r2, [pc, #272]	; (976c <f_open+0x528>)
    965c:	2194      	movs	r1, #148	; 0x94
    965e:	0089      	lsls	r1, r1, #2
    9660:	468c      	mov	ip, r1
    9662:	44bc      	add	ip, r7
    9664:	4462      	add	r2, ip
    9666:	7812      	ldrb	r2, [r2, #0]
    9668:	2120      	movs	r1, #32
    966a:	430a      	orrs	r2, r1
    966c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    966e:	2387      	movs	r3, #135	; 0x87
    9670:	009b      	lsls	r3, r3, #2
    9672:	18fb      	adds	r3, r7, r3
    9674:	681b      	ldr	r3, [r3, #0]
    9676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9678:	68fb      	ldr	r3, [r7, #12]
    967a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
    967c:	68fb      	ldr	r3, [r7, #12]
    967e:	2292      	movs	r2, #146	; 0x92
    9680:	0092      	lsls	r2, r2, #2
    9682:	18ba      	adds	r2, r7, r2
    9684:	6812      	ldr	r2, [r2, #0]
    9686:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
    9688:	4b39      	ldr	r3, [pc, #228]	; (9770 <f_open+0x52c>)
    968a:	18fb      	adds	r3, r7, r3
    968c:	781b      	ldrb	r3, [r3, #0]
    968e:	2b00      	cmp	r3, #0
    9690:	d163      	bne.n	975a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
    9692:	68fb      	ldr	r3, [r7, #12]
    9694:	4a35      	ldr	r2, [pc, #212]	; (976c <f_open+0x528>)
    9696:	2194      	movs	r1, #148	; 0x94
    9698:	0089      	lsls	r1, r1, #2
    969a:	468c      	mov	ip, r1
    969c:	44bc      	add	ip, r7
    969e:	4462      	add	r2, ip
    96a0:	7812      	ldrb	r2, [r2, #0]
    96a2:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    96a4:	2392      	movs	r3, #146	; 0x92
    96a6:	009b      	lsls	r3, r3, #2
    96a8:	18fb      	adds	r3, r7, r3
    96aa:	681b      	ldr	r3, [r3, #0]
    96ac:	3315      	adds	r3, #21
    96ae:	781b      	ldrb	r3, [r3, #0]
    96b0:	021b      	lsls	r3, r3, #8
    96b2:	b21a      	sxth	r2, r3
    96b4:	2392      	movs	r3, #146	; 0x92
    96b6:	009b      	lsls	r3, r3, #2
    96b8:	18fb      	adds	r3, r7, r3
    96ba:	681b      	ldr	r3, [r3, #0]
    96bc:	3314      	adds	r3, #20
    96be:	781b      	ldrb	r3, [r3, #0]
    96c0:	b21b      	sxth	r3, r3
    96c2:	4313      	orrs	r3, r2
    96c4:	b21b      	sxth	r3, r3
    96c6:	b29b      	uxth	r3, r3
    96c8:	041b      	lsls	r3, r3, #16
    96ca:	2292      	movs	r2, #146	; 0x92
    96cc:	0092      	lsls	r2, r2, #2
    96ce:	18ba      	adds	r2, r7, r2
    96d0:	6812      	ldr	r2, [r2, #0]
    96d2:	321b      	adds	r2, #27
    96d4:	7812      	ldrb	r2, [r2, #0]
    96d6:	0212      	lsls	r2, r2, #8
    96d8:	b211      	sxth	r1, r2
    96da:	2292      	movs	r2, #146	; 0x92
    96dc:	0092      	lsls	r2, r2, #2
    96de:	18ba      	adds	r2, r7, r2
    96e0:	6812      	ldr	r2, [r2, #0]
    96e2:	321a      	adds	r2, #26
    96e4:	7812      	ldrb	r2, [r2, #0]
    96e6:	b212      	sxth	r2, r2
    96e8:	430a      	orrs	r2, r1
    96ea:	b212      	sxth	r2, r2
    96ec:	b292      	uxth	r2, r2
    96ee:	431a      	orrs	r2, r3
    96f0:	68fb      	ldr	r3, [r7, #12]
    96f2:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    96f4:	2392      	movs	r3, #146	; 0x92
    96f6:	009b      	lsls	r3, r3, #2
    96f8:	18fb      	adds	r3, r7, r3
    96fa:	681b      	ldr	r3, [r3, #0]
    96fc:	331f      	adds	r3, #31
    96fe:	781b      	ldrb	r3, [r3, #0]
    9700:	061a      	lsls	r2, r3, #24
    9702:	2392      	movs	r3, #146	; 0x92
    9704:	009b      	lsls	r3, r3, #2
    9706:	18fb      	adds	r3, r7, r3
    9708:	681b      	ldr	r3, [r3, #0]
    970a:	331e      	adds	r3, #30
    970c:	781b      	ldrb	r3, [r3, #0]
    970e:	041b      	lsls	r3, r3, #16
    9710:	4313      	orrs	r3, r2
    9712:	2292      	movs	r2, #146	; 0x92
    9714:	0092      	lsls	r2, r2, #2
    9716:	18ba      	adds	r2, r7, r2
    9718:	6812      	ldr	r2, [r2, #0]
    971a:	321d      	adds	r2, #29
    971c:	7812      	ldrb	r2, [r2, #0]
    971e:	0212      	lsls	r2, r2, #8
    9720:	4313      	orrs	r3, r2
    9722:	2292      	movs	r2, #146	; 0x92
    9724:	0092      	lsls	r2, r2, #2
    9726:	18ba      	adds	r2, r7, r2
    9728:	6812      	ldr	r2, [r2, #0]
    972a:	321c      	adds	r2, #28
    972c:	7812      	ldrb	r2, [r2, #0]
    972e:	431a      	orrs	r2, r3
    9730:	68fb      	ldr	r3, [r7, #12]
    9732:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
    9734:	68fb      	ldr	r3, [r7, #12]
    9736:	2200      	movs	r2, #0
    9738:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
    973a:	68fb      	ldr	r3, [r7, #12]
    973c:	2200      	movs	r2, #0
    973e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    9740:	2387      	movs	r3, #135	; 0x87
    9742:	009b      	lsls	r3, r3, #2
    9744:	18fb      	adds	r3, r7, r3
    9746:	681a      	ldr	r2, [r3, #0]
    9748:	68fb      	ldr	r3, [r7, #12]
    974a:	601a      	str	r2, [r3, #0]
    974c:	2387      	movs	r3, #135	; 0x87
    974e:	009b      	lsls	r3, r3, #2
    9750:	18fb      	adds	r3, r7, r3
    9752:	681b      	ldr	r3, [r3, #0]
    9754:	88da      	ldrh	r2, [r3, #6]
    9756:	68fb      	ldr	r3, [r7, #12]
    9758:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
    975a:	4b05      	ldr	r3, [pc, #20]	; (9770 <f_open+0x52c>)
    975c:	18fb      	adds	r3, r7, r3
    975e:	781b      	ldrb	r3, [r3, #0]
}
    9760:	0018      	movs	r0, r3
    9762:	46bd      	mov	sp, r7
    9764:	2395      	movs	r3, #149	; 0x95
    9766:	009b      	lsls	r3, r3, #2
    9768:	449d      	add	sp, r3
    976a:	bd90      	pop	{r4, r7, pc}
    976c:	fffffdb7 	.word	0xfffffdb7
    9770:	0000024f 	.word	0x0000024f

00009774 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
    9774:	b590      	push	{r4, r7, lr}
    9776:	b08b      	sub	sp, #44	; 0x2c
    9778:	af00      	add	r7, sp, #0
    977a:	60f8      	str	r0, [r7, #12]
    977c:	60b9      	str	r1, [r7, #8]
    977e:	607a      	str	r2, [r7, #4]
    9780:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
    9782:	68bb      	ldr	r3, [r7, #8]
    9784:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
    9786:	683b      	ldr	r3, [r7, #0]
    9788:	2200      	movs	r2, #0
    978a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
    978c:	68fb      	ldr	r3, [r7, #12]
    978e:	681a      	ldr	r2, [r3, #0]
    9790:	68fb      	ldr	r3, [r7, #12]
    9792:	889b      	ldrh	r3, [r3, #4]
    9794:	2117      	movs	r1, #23
    9796:	187c      	adds	r4, r7, r1
    9798:	0019      	movs	r1, r3
    979a:	0010      	movs	r0, r2
    979c:	4bc3      	ldr	r3, [pc, #780]	; (9aac <f_write+0x338>)
    979e:	4798      	blx	r3
    97a0:	0003      	movs	r3, r0
    97a2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    97a4:	2317      	movs	r3, #23
    97a6:	18fb      	adds	r3, r7, r3
    97a8:	781b      	ldrb	r3, [r3, #0]
    97aa:	2b00      	cmp	r3, #0
    97ac:	d003      	beq.n	97b6 <f_write+0x42>
    97ae:	2317      	movs	r3, #23
    97b0:	18fb      	adds	r3, r7, r3
    97b2:	781b      	ldrb	r3, [r3, #0]
    97b4:	e176      	b.n	9aa4 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
    97b6:	68fb      	ldr	r3, [r7, #12]
    97b8:	799b      	ldrb	r3, [r3, #6]
    97ba:	b25b      	sxtb	r3, r3
    97bc:	2b00      	cmp	r3, #0
    97be:	da01      	bge.n	97c4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
    97c0:	2302      	movs	r3, #2
    97c2:	e16f      	b.n	9aa4 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
    97c4:	68fb      	ldr	r3, [r7, #12]
    97c6:	799b      	ldrb	r3, [r3, #6]
    97c8:	001a      	movs	r2, r3
    97ca:	2302      	movs	r3, #2
    97cc:	4013      	ands	r3, r2
    97ce:	d101      	bne.n	97d4 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
    97d0:	2307      	movs	r3, #7
    97d2:	e167      	b.n	9aa4 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
    97d4:	68fb      	ldr	r3, [r7, #12]
    97d6:	68da      	ldr	r2, [r3, #12]
    97d8:	687b      	ldr	r3, [r7, #4]
    97da:	18d2      	adds	r2, r2, r3
    97dc:	68fb      	ldr	r3, [r7, #12]
    97de:	68db      	ldr	r3, [r3, #12]
    97e0:	429a      	cmp	r2, r3
    97e2:	d300      	bcc.n	97e6 <f_write+0x72>
    97e4:	e146      	b.n	9a74 <f_write+0x300>
    97e6:	2300      	movs	r3, #0
    97e8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
    97ea:	e143      	b.n	9a74 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
    97ec:	68fb      	ldr	r3, [r7, #12]
    97ee:	689b      	ldr	r3, [r3, #8]
    97f0:	05db      	lsls	r3, r3, #23
    97f2:	0ddb      	lsrs	r3, r3, #23
    97f4:	d000      	beq.n	97f8 <f_write+0x84>
    97f6:	e0f6      	b.n	99e6 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    97f8:	68fb      	ldr	r3, [r7, #12]
    97fa:	689b      	ldr	r3, [r3, #8]
    97fc:	0a5b      	lsrs	r3, r3, #9
    97fe:	b2da      	uxtb	r2, r3
    9800:	68fb      	ldr	r3, [r7, #12]
    9802:	681b      	ldr	r3, [r3, #0]
    9804:	789b      	ldrb	r3, [r3, #2]
    9806:	3b01      	subs	r3, #1
    9808:	b2d9      	uxtb	r1, r3
    980a:	2316      	movs	r3, #22
    980c:	18fb      	adds	r3, r7, r3
    980e:	400a      	ands	r2, r1
    9810:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
    9812:	2316      	movs	r3, #22
    9814:	18fb      	adds	r3, r7, r3
    9816:	781b      	ldrb	r3, [r3, #0]
    9818:	2b00      	cmp	r3, #0
    981a:	d140      	bne.n	989e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    981c:	68fb      	ldr	r3, [r7, #12]
    981e:	689b      	ldr	r3, [r3, #8]
    9820:	2b00      	cmp	r3, #0
    9822:	d111      	bne.n	9848 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
    9824:	68fb      	ldr	r3, [r7, #12]
    9826:	691b      	ldr	r3, [r3, #16]
    9828:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
    982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    982c:	2b00      	cmp	r3, #0
    982e:	d115      	bne.n	985c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
    9830:	68fb      	ldr	r3, [r7, #12]
    9832:	681b      	ldr	r3, [r3, #0]
    9834:	2100      	movs	r1, #0
    9836:	0018      	movs	r0, r3
    9838:	4b9d      	ldr	r3, [pc, #628]	; (9ab0 <f_write+0x33c>)
    983a:	4798      	blx	r3
    983c:	0003      	movs	r3, r0
    983e:	627b      	str	r3, [r7, #36]	; 0x24
    9840:	68fb      	ldr	r3, [r7, #12]
    9842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9844:	611a      	str	r2, [r3, #16]
    9846:	e009      	b.n	985c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    9848:	68fb      	ldr	r3, [r7, #12]
    984a:	681a      	ldr	r2, [r3, #0]
    984c:	68fb      	ldr	r3, [r7, #12]
    984e:	695b      	ldr	r3, [r3, #20]
    9850:	0019      	movs	r1, r3
    9852:	0010      	movs	r0, r2
    9854:	4b96      	ldr	r3, [pc, #600]	; (9ab0 <f_write+0x33c>)
    9856:	4798      	blx	r3
    9858:	0003      	movs	r3, r0
    985a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    985e:	2b00      	cmp	r3, #0
    9860:	d100      	bne.n	9864 <f_write+0xf0>
    9862:	e10c      	b.n	9a7e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
    9864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9866:	2b01      	cmp	r3, #1
    9868:	d109      	bne.n	987e <f_write+0x10a>
    986a:	68fb      	ldr	r3, [r7, #12]
    986c:	799b      	ldrb	r3, [r3, #6]
    986e:	2280      	movs	r2, #128	; 0x80
    9870:	4252      	negs	r2, r2
    9872:	4313      	orrs	r3, r2
    9874:	b2da      	uxtb	r2, r3
    9876:	68fb      	ldr	r3, [r7, #12]
    9878:	719a      	strb	r2, [r3, #6]
    987a:	2302      	movs	r3, #2
    987c:	e112      	b.n	9aa4 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9880:	3301      	adds	r3, #1
    9882:	d109      	bne.n	9898 <f_write+0x124>
    9884:	68fb      	ldr	r3, [r7, #12]
    9886:	799b      	ldrb	r3, [r3, #6]
    9888:	2280      	movs	r2, #128	; 0x80
    988a:	4252      	negs	r2, r2
    988c:	4313      	orrs	r3, r2
    988e:	b2da      	uxtb	r2, r3
    9890:	68fb      	ldr	r3, [r7, #12]
    9892:	719a      	strb	r2, [r3, #6]
    9894:	2301      	movs	r3, #1
    9896:	e105      	b.n	9aa4 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
    9898:	68fb      	ldr	r3, [r7, #12]
    989a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    989c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
    989e:	68fb      	ldr	r3, [r7, #12]
    98a0:	681b      	ldr	r3, [r3, #0]
    98a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    98a4:	68fb      	ldr	r3, [r7, #12]
    98a6:	699b      	ldr	r3, [r3, #24]
    98a8:	429a      	cmp	r2, r3
    98aa:	d111      	bne.n	98d0 <f_write+0x15c>
    98ac:	68fb      	ldr	r3, [r7, #12]
    98ae:	681b      	ldr	r3, [r3, #0]
    98b0:	2100      	movs	r1, #0
    98b2:	0018      	movs	r0, r3
    98b4:	4b7f      	ldr	r3, [pc, #508]	; (9ab4 <f_write+0x340>)
    98b6:	4798      	blx	r3
    98b8:	1e03      	subs	r3, r0, #0
    98ba:	d009      	beq.n	98d0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
    98bc:	68fb      	ldr	r3, [r7, #12]
    98be:	799b      	ldrb	r3, [r3, #6]
    98c0:	2280      	movs	r2, #128	; 0x80
    98c2:	4252      	negs	r2, r2
    98c4:	4313      	orrs	r3, r2
    98c6:	b2da      	uxtb	r2, r3
    98c8:	68fb      	ldr	r3, [r7, #12]
    98ca:	719a      	strb	r2, [r3, #6]
    98cc:	2301      	movs	r3, #1
    98ce:	e0e9      	b.n	9aa4 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    98d0:	68fb      	ldr	r3, [r7, #12]
    98d2:	681a      	ldr	r2, [r3, #0]
    98d4:	68fb      	ldr	r3, [r7, #12]
    98d6:	695b      	ldr	r3, [r3, #20]
    98d8:	0019      	movs	r1, r3
    98da:	0010      	movs	r0, r2
    98dc:	4b76      	ldr	r3, [pc, #472]	; (9ab8 <f_write+0x344>)
    98de:	4798      	blx	r3
    98e0:	0003      	movs	r3, r0
    98e2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    98e4:	693b      	ldr	r3, [r7, #16]
    98e6:	2b00      	cmp	r3, #0
    98e8:	d109      	bne.n	98fe <f_write+0x18a>
    98ea:	68fb      	ldr	r3, [r7, #12]
    98ec:	799b      	ldrb	r3, [r3, #6]
    98ee:	2280      	movs	r2, #128	; 0x80
    98f0:	4252      	negs	r2, r2
    98f2:	4313      	orrs	r3, r2
    98f4:	b2da      	uxtb	r2, r3
    98f6:	68fb      	ldr	r3, [r7, #12]
    98f8:	719a      	strb	r2, [r3, #6]
    98fa:	2302      	movs	r3, #2
    98fc:	e0d2      	b.n	9aa4 <f_write+0x330>
			sect += csect;
    98fe:	2316      	movs	r3, #22
    9900:	18fb      	adds	r3, r7, r3
    9902:	781b      	ldrb	r3, [r3, #0]
    9904:	693a      	ldr	r2, [r7, #16]
    9906:	18d3      	adds	r3, r2, r3
    9908:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
    990a:	687b      	ldr	r3, [r7, #4]
    990c:	0a5b      	lsrs	r3, r3, #9
    990e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
    9910:	69fb      	ldr	r3, [r7, #28]
    9912:	2b00      	cmp	r3, #0
    9914:	d048      	beq.n	99a8 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    9916:	2316      	movs	r3, #22
    9918:	18fb      	adds	r3, r7, r3
    991a:	781a      	ldrb	r2, [r3, #0]
    991c:	69fb      	ldr	r3, [r7, #28]
    991e:	18d2      	adds	r2, r2, r3
    9920:	68fb      	ldr	r3, [r7, #12]
    9922:	681b      	ldr	r3, [r3, #0]
    9924:	789b      	ldrb	r3, [r3, #2]
    9926:	429a      	cmp	r2, r3
    9928:	d908      	bls.n	993c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
    992a:	68fb      	ldr	r3, [r7, #12]
    992c:	681b      	ldr	r3, [r3, #0]
    992e:	789b      	ldrb	r3, [r3, #2]
    9930:	001a      	movs	r2, r3
    9932:	2316      	movs	r3, #22
    9934:	18fb      	adds	r3, r7, r3
    9936:	781b      	ldrb	r3, [r3, #0]
    9938:	1ad3      	subs	r3, r2, r3
    993a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
    993c:	68fb      	ldr	r3, [r7, #12]
    993e:	681b      	ldr	r3, [r3, #0]
    9940:	7858      	ldrb	r0, [r3, #1]
    9942:	69fb      	ldr	r3, [r7, #28]
    9944:	b2db      	uxtb	r3, r3
    9946:	693a      	ldr	r2, [r7, #16]
    9948:	69b9      	ldr	r1, [r7, #24]
    994a:	4c5c      	ldr	r4, [pc, #368]	; (9abc <f_write+0x348>)
    994c:	47a0      	blx	r4
    994e:	1e03      	subs	r3, r0, #0
    9950:	d009      	beq.n	9966 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
    9952:	68fb      	ldr	r3, [r7, #12]
    9954:	799b      	ldrb	r3, [r3, #6]
    9956:	2280      	movs	r2, #128	; 0x80
    9958:	4252      	negs	r2, r2
    995a:	4313      	orrs	r3, r2
    995c:	b2da      	uxtb	r2, r3
    995e:	68fb      	ldr	r3, [r7, #12]
    9960:	719a      	strb	r2, [r3, #6]
    9962:	2301      	movs	r3, #1
    9964:	e09e      	b.n	9aa4 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
    9966:	68fb      	ldr	r3, [r7, #12]
    9968:	681b      	ldr	r3, [r3, #0]
    996a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    996c:	693b      	ldr	r3, [r7, #16]
    996e:	1ad2      	subs	r2, r2, r3
    9970:	69fb      	ldr	r3, [r7, #28]
    9972:	429a      	cmp	r2, r3
    9974:	d214      	bcs.n	99a0 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
    9976:	68fb      	ldr	r3, [r7, #12]
    9978:	681b      	ldr	r3, [r3, #0]
    997a:	3330      	adds	r3, #48	; 0x30
    997c:	0018      	movs	r0, r3
    997e:	68fb      	ldr	r3, [r7, #12]
    9980:	681b      	ldr	r3, [r3, #0]
    9982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    9984:	693b      	ldr	r3, [r7, #16]
    9986:	1ad3      	subs	r3, r2, r3
    9988:	025b      	lsls	r3, r3, #9
    998a:	69ba      	ldr	r2, [r7, #24]
    998c:	18d1      	adds	r1, r2, r3
    998e:	2380      	movs	r3, #128	; 0x80
    9990:	009b      	lsls	r3, r3, #2
    9992:	001a      	movs	r2, r3
    9994:	4b4a      	ldr	r3, [pc, #296]	; (9ac0 <f_write+0x34c>)
    9996:	4798      	blx	r3
					fp->fs->wflag = 0;
    9998:	68fb      	ldr	r3, [r7, #12]
    999a:	681b      	ldr	r3, [r3, #0]
    999c:	2200      	movs	r2, #0
    999e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
    99a0:	69fb      	ldr	r3, [r7, #28]
    99a2:	025b      	lsls	r3, r3, #9
    99a4:	623b      	str	r3, [r7, #32]
				continue;
    99a6:	e051      	b.n	9a4c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
    99a8:	68fb      	ldr	r3, [r7, #12]
    99aa:	689a      	ldr	r2, [r3, #8]
    99ac:	68fb      	ldr	r3, [r7, #12]
    99ae:	68db      	ldr	r3, [r3, #12]
    99b0:	429a      	cmp	r2, r3
    99b2:	d315      	bcc.n	99e0 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
    99b4:	68fb      	ldr	r3, [r7, #12]
    99b6:	681b      	ldr	r3, [r3, #0]
    99b8:	2100      	movs	r1, #0
    99ba:	0018      	movs	r0, r3
    99bc:	4b3d      	ldr	r3, [pc, #244]	; (9ab4 <f_write+0x340>)
    99be:	4798      	blx	r3
    99c0:	1e03      	subs	r3, r0, #0
    99c2:	d009      	beq.n	99d8 <f_write+0x264>
    99c4:	68fb      	ldr	r3, [r7, #12]
    99c6:	799b      	ldrb	r3, [r3, #6]
    99c8:	2280      	movs	r2, #128	; 0x80
    99ca:	4252      	negs	r2, r2
    99cc:	4313      	orrs	r3, r2
    99ce:	b2da      	uxtb	r2, r3
    99d0:	68fb      	ldr	r3, [r7, #12]
    99d2:	719a      	strb	r2, [r3, #6]
    99d4:	2301      	movs	r3, #1
    99d6:	e065      	b.n	9aa4 <f_write+0x330>
				fp->fs->winsect = sect;
    99d8:	68fb      	ldr	r3, [r7, #12]
    99da:	681b      	ldr	r3, [r3, #0]
    99dc:	693a      	ldr	r2, [r7, #16]
    99de:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
    99e0:	68fb      	ldr	r3, [r7, #12]
    99e2:	693a      	ldr	r2, [r7, #16]
    99e4:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
    99e6:	68fb      	ldr	r3, [r7, #12]
    99e8:	689b      	ldr	r3, [r3, #8]
    99ea:	05db      	lsls	r3, r3, #23
    99ec:	0ddb      	lsrs	r3, r3, #23
    99ee:	2280      	movs	r2, #128	; 0x80
    99f0:	0092      	lsls	r2, r2, #2
    99f2:	1ad3      	subs	r3, r2, r3
    99f4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
    99f6:	6a3a      	ldr	r2, [r7, #32]
    99f8:	687b      	ldr	r3, [r7, #4]
    99fa:	429a      	cmp	r2, r3
    99fc:	d901      	bls.n	9a02 <f_write+0x28e>
    99fe:	687b      	ldr	r3, [r7, #4]
    9a00:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
    9a02:	68fb      	ldr	r3, [r7, #12]
    9a04:	681a      	ldr	r2, [r3, #0]
    9a06:	68fb      	ldr	r3, [r7, #12]
    9a08:	699b      	ldr	r3, [r3, #24]
    9a0a:	0019      	movs	r1, r3
    9a0c:	0010      	movs	r0, r2
    9a0e:	4b29      	ldr	r3, [pc, #164]	; (9ab4 <f_write+0x340>)
    9a10:	4798      	blx	r3
    9a12:	1e03      	subs	r3, r0, #0
    9a14:	d009      	beq.n	9a2a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
    9a16:	68fb      	ldr	r3, [r7, #12]
    9a18:	799b      	ldrb	r3, [r3, #6]
    9a1a:	2280      	movs	r2, #128	; 0x80
    9a1c:	4252      	negs	r2, r2
    9a1e:	4313      	orrs	r3, r2
    9a20:	b2da      	uxtb	r2, r3
    9a22:	68fb      	ldr	r3, [r7, #12]
    9a24:	719a      	strb	r2, [r3, #6]
    9a26:	2301      	movs	r3, #1
    9a28:	e03c      	b.n	9aa4 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
    9a2a:	68fb      	ldr	r3, [r7, #12]
    9a2c:	681a      	ldr	r2, [r3, #0]
    9a2e:	68fb      	ldr	r3, [r7, #12]
    9a30:	689b      	ldr	r3, [r3, #8]
    9a32:	05db      	lsls	r3, r3, #23
    9a34:	0ddb      	lsrs	r3, r3, #23
    9a36:	3330      	adds	r3, #48	; 0x30
    9a38:	18d3      	adds	r3, r2, r3
    9a3a:	6a3a      	ldr	r2, [r7, #32]
    9a3c:	69b9      	ldr	r1, [r7, #24]
    9a3e:	0018      	movs	r0, r3
    9a40:	4b1f      	ldr	r3, [pc, #124]	; (9ac0 <f_write+0x34c>)
    9a42:	4798      	blx	r3
		fp->fs->wflag = 1;
    9a44:	68fb      	ldr	r3, [r7, #12]
    9a46:	681b      	ldr	r3, [r3, #0]
    9a48:	2201      	movs	r2, #1
    9a4a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
    9a4c:	69ba      	ldr	r2, [r7, #24]
    9a4e:	6a3b      	ldr	r3, [r7, #32]
    9a50:	18d3      	adds	r3, r2, r3
    9a52:	61bb      	str	r3, [r7, #24]
    9a54:	68fb      	ldr	r3, [r7, #12]
    9a56:	689a      	ldr	r2, [r3, #8]
    9a58:	6a3b      	ldr	r3, [r7, #32]
    9a5a:	18d2      	adds	r2, r2, r3
    9a5c:	68fb      	ldr	r3, [r7, #12]
    9a5e:	609a      	str	r2, [r3, #8]
    9a60:	683b      	ldr	r3, [r7, #0]
    9a62:	681a      	ldr	r2, [r3, #0]
    9a64:	6a3b      	ldr	r3, [r7, #32]
    9a66:	18d2      	adds	r2, r2, r3
    9a68:	683b      	ldr	r3, [r7, #0]
    9a6a:	601a      	str	r2, [r3, #0]
    9a6c:	687a      	ldr	r2, [r7, #4]
    9a6e:	6a3b      	ldr	r3, [r7, #32]
    9a70:	1ad3      	subs	r3, r2, r3
    9a72:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
    9a74:	687b      	ldr	r3, [r7, #4]
    9a76:	2b00      	cmp	r3, #0
    9a78:	d000      	beq.n	9a7c <f_write+0x308>
    9a7a:	e6b7      	b.n	97ec <f_write+0x78>
    9a7c:	e000      	b.n	9a80 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    9a7e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
    9a80:	68fb      	ldr	r3, [r7, #12]
    9a82:	689a      	ldr	r2, [r3, #8]
    9a84:	68fb      	ldr	r3, [r7, #12]
    9a86:	68db      	ldr	r3, [r3, #12]
    9a88:	429a      	cmp	r2, r3
    9a8a:	d903      	bls.n	9a94 <f_write+0x320>
    9a8c:	68fb      	ldr	r3, [r7, #12]
    9a8e:	689a      	ldr	r2, [r3, #8]
    9a90:	68fb      	ldr	r3, [r7, #12]
    9a92:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
    9a94:	68fb      	ldr	r3, [r7, #12]
    9a96:	799b      	ldrb	r3, [r3, #6]
    9a98:	2220      	movs	r2, #32
    9a9a:	4313      	orrs	r3, r2
    9a9c:	b2da      	uxtb	r2, r3
    9a9e:	68fb      	ldr	r3, [r7, #12]
    9aa0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
    9aa2:	2300      	movs	r3, #0
}
    9aa4:	0018      	movs	r0, r3
    9aa6:	46bd      	mov	sp, r7
    9aa8:	b00b      	add	sp, #44	; 0x2c
    9aaa:	bd90      	pop	{r4, r7, pc}
    9aac:	00009199 	.word	0x00009199
    9ab0:	00007825 	.word	0x00007825
    9ab4:	0000711d 	.word	0x0000711d
    9ab8:	0000737d 	.word	0x0000737d
    9abc:	00006e09 	.word	0x00006e09
    9ac0:	00007039 	.word	0x00007039

00009ac4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
    9ac4:	b590      	push	{r4, r7, lr}
    9ac6:	b087      	sub	sp, #28
    9ac8:	af00      	add	r7, sp, #0
    9aca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
    9acc:	687b      	ldr	r3, [r7, #4]
    9ace:	681a      	ldr	r2, [r3, #0]
    9ad0:	687b      	ldr	r3, [r7, #4]
    9ad2:	889b      	ldrh	r3, [r3, #4]
    9ad4:	2117      	movs	r1, #23
    9ad6:	187c      	adds	r4, r7, r1
    9ad8:	0019      	movs	r1, r3
    9ada:	0010      	movs	r0, r2
    9adc:	4b55      	ldr	r3, [pc, #340]	; (9c34 <f_sync+0x170>)
    9ade:	4798      	blx	r3
    9ae0:	0003      	movs	r3, r0
    9ae2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    9ae4:	2317      	movs	r3, #23
    9ae6:	18fb      	adds	r3, r7, r3
    9ae8:	781b      	ldrb	r3, [r3, #0]
    9aea:	2b00      	cmp	r3, #0
    9aec:	d000      	beq.n	9af0 <f_sync+0x2c>
    9aee:	e09a      	b.n	9c26 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
    9af0:	687b      	ldr	r3, [r7, #4]
    9af2:	799b      	ldrb	r3, [r3, #6]
    9af4:	001a      	movs	r2, r3
    9af6:	2320      	movs	r3, #32
    9af8:	4013      	ands	r3, r2
    9afa:	d100      	bne.n	9afe <f_sync+0x3a>
    9afc:	e093      	b.n	9c26 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
    9afe:	687b      	ldr	r3, [r7, #4]
    9b00:	681a      	ldr	r2, [r3, #0]
    9b02:	687b      	ldr	r3, [r7, #4]
    9b04:	69db      	ldr	r3, [r3, #28]
    9b06:	2117      	movs	r1, #23
    9b08:	187c      	adds	r4, r7, r1
    9b0a:	0019      	movs	r1, r3
    9b0c:	0010      	movs	r0, r2
    9b0e:	4b4a      	ldr	r3, [pc, #296]	; (9c38 <f_sync+0x174>)
    9b10:	4798      	blx	r3
    9b12:	0003      	movs	r3, r0
    9b14:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
    9b16:	2317      	movs	r3, #23
    9b18:	18fb      	adds	r3, r7, r3
    9b1a:	781b      	ldrb	r3, [r3, #0]
    9b1c:	2b00      	cmp	r3, #0
    9b1e:	d000      	beq.n	9b22 <f_sync+0x5e>
    9b20:	e081      	b.n	9c26 <f_sync+0x162>
				dir = fp->dir_ptr;
    9b22:	687b      	ldr	r3, [r7, #4]
    9b24:	6a1b      	ldr	r3, [r3, #32]
    9b26:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
    9b28:	693b      	ldr	r3, [r7, #16]
    9b2a:	330b      	adds	r3, #11
    9b2c:	693a      	ldr	r2, [r7, #16]
    9b2e:	320b      	adds	r2, #11
    9b30:	7812      	ldrb	r2, [r2, #0]
    9b32:	2120      	movs	r1, #32
    9b34:	430a      	orrs	r2, r1
    9b36:	b2d2      	uxtb	r2, r2
    9b38:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
    9b3a:	693b      	ldr	r3, [r7, #16]
    9b3c:	331c      	adds	r3, #28
    9b3e:	001a      	movs	r2, r3
    9b40:	687b      	ldr	r3, [r7, #4]
    9b42:	68db      	ldr	r3, [r3, #12]
    9b44:	b2db      	uxtb	r3, r3
    9b46:	7013      	strb	r3, [r2, #0]
    9b48:	693b      	ldr	r3, [r7, #16]
    9b4a:	331d      	adds	r3, #29
    9b4c:	001a      	movs	r2, r3
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	68db      	ldr	r3, [r3, #12]
    9b52:	b29b      	uxth	r3, r3
    9b54:	0a1b      	lsrs	r3, r3, #8
    9b56:	b29b      	uxth	r3, r3
    9b58:	b2db      	uxtb	r3, r3
    9b5a:	7013      	strb	r3, [r2, #0]
    9b5c:	693b      	ldr	r3, [r7, #16]
    9b5e:	331e      	adds	r3, #30
    9b60:	001a      	movs	r2, r3
    9b62:	687b      	ldr	r3, [r7, #4]
    9b64:	68db      	ldr	r3, [r3, #12]
    9b66:	0c1b      	lsrs	r3, r3, #16
    9b68:	b2db      	uxtb	r3, r3
    9b6a:	7013      	strb	r3, [r2, #0]
    9b6c:	693b      	ldr	r3, [r7, #16]
    9b6e:	331f      	adds	r3, #31
    9b70:	001a      	movs	r2, r3
    9b72:	687b      	ldr	r3, [r7, #4]
    9b74:	68db      	ldr	r3, [r3, #12]
    9b76:	0e1b      	lsrs	r3, r3, #24
    9b78:	b2db      	uxtb	r3, r3
    9b7a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
    9b7c:	693b      	ldr	r3, [r7, #16]
    9b7e:	331a      	adds	r3, #26
    9b80:	001a      	movs	r2, r3
    9b82:	687b      	ldr	r3, [r7, #4]
    9b84:	691b      	ldr	r3, [r3, #16]
    9b86:	b2db      	uxtb	r3, r3
    9b88:	7013      	strb	r3, [r2, #0]
    9b8a:	693b      	ldr	r3, [r7, #16]
    9b8c:	331b      	adds	r3, #27
    9b8e:	001a      	movs	r2, r3
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	691b      	ldr	r3, [r3, #16]
    9b94:	b29b      	uxth	r3, r3
    9b96:	0a1b      	lsrs	r3, r3, #8
    9b98:	b29b      	uxth	r3, r3
    9b9a:	b2db      	uxtb	r3, r3
    9b9c:	7013      	strb	r3, [r2, #0]
    9b9e:	693b      	ldr	r3, [r7, #16]
    9ba0:	3314      	adds	r3, #20
    9ba2:	001a      	movs	r2, r3
    9ba4:	687b      	ldr	r3, [r7, #4]
    9ba6:	691b      	ldr	r3, [r3, #16]
    9ba8:	0c1b      	lsrs	r3, r3, #16
    9baa:	b2db      	uxtb	r3, r3
    9bac:	7013      	strb	r3, [r2, #0]
    9bae:	693b      	ldr	r3, [r7, #16]
    9bb0:	3315      	adds	r3, #21
    9bb2:	001a      	movs	r2, r3
    9bb4:	687b      	ldr	r3, [r7, #4]
    9bb6:	691b      	ldr	r3, [r3, #16]
    9bb8:	0c1b      	lsrs	r3, r3, #16
    9bba:	b29b      	uxth	r3, r3
    9bbc:	0a1b      	lsrs	r3, r3, #8
    9bbe:	b29b      	uxth	r3, r3
    9bc0:	b2db      	uxtb	r3, r3
    9bc2:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
    9bc4:	4b1d      	ldr	r3, [pc, #116]	; (9c3c <f_sync+0x178>)
    9bc6:	4798      	blx	r3
    9bc8:	0003      	movs	r3, r0
    9bca:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
    9bcc:	693b      	ldr	r3, [r7, #16]
    9bce:	3316      	adds	r3, #22
    9bd0:	68fa      	ldr	r2, [r7, #12]
    9bd2:	b2d2      	uxtb	r2, r2
    9bd4:	701a      	strb	r2, [r3, #0]
    9bd6:	693b      	ldr	r3, [r7, #16]
    9bd8:	3317      	adds	r3, #23
    9bda:	68fa      	ldr	r2, [r7, #12]
    9bdc:	b292      	uxth	r2, r2
    9bde:	0a12      	lsrs	r2, r2, #8
    9be0:	b292      	uxth	r2, r2
    9be2:	b2d2      	uxtb	r2, r2
    9be4:	701a      	strb	r2, [r3, #0]
    9be6:	693b      	ldr	r3, [r7, #16]
    9be8:	3318      	adds	r3, #24
    9bea:	68fa      	ldr	r2, [r7, #12]
    9bec:	0c12      	lsrs	r2, r2, #16
    9bee:	b2d2      	uxtb	r2, r2
    9bf0:	701a      	strb	r2, [r3, #0]
    9bf2:	693b      	ldr	r3, [r7, #16]
    9bf4:	3319      	adds	r3, #25
    9bf6:	68fa      	ldr	r2, [r7, #12]
    9bf8:	0e12      	lsrs	r2, r2, #24
    9bfa:	b2d2      	uxtb	r2, r2
    9bfc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
    9bfe:	687b      	ldr	r3, [r7, #4]
    9c00:	799b      	ldrb	r3, [r3, #6]
    9c02:	2220      	movs	r2, #32
    9c04:	4393      	bics	r3, r2
    9c06:	b2da      	uxtb	r2, r3
    9c08:	687b      	ldr	r3, [r7, #4]
    9c0a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
    9c0c:	687b      	ldr	r3, [r7, #4]
    9c0e:	681b      	ldr	r3, [r3, #0]
    9c10:	2201      	movs	r2, #1
    9c12:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	681b      	ldr	r3, [r3, #0]
    9c18:	2217      	movs	r2, #23
    9c1a:	18bc      	adds	r4, r7, r2
    9c1c:	0018      	movs	r0, r3
    9c1e:	4b08      	ldr	r3, [pc, #32]	; (9c40 <f_sync+0x17c>)
    9c20:	4798      	blx	r3
    9c22:	0003      	movs	r3, r0
    9c24:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
    9c26:	2317      	movs	r3, #23
    9c28:	18fb      	adds	r3, r7, r3
    9c2a:	781b      	ldrb	r3, [r3, #0]
}
    9c2c:	0018      	movs	r0, r3
    9c2e:	46bd      	mov	sp, r7
    9c30:	b007      	add	sp, #28
    9c32:	bd90      	pop	{r4, r7, pc}
    9c34:	00009199 	.word	0x00009199
    9c38:	0000711d 	.word	0x0000711d
    9c3c:	00006fd9 	.word	0x00006fd9
    9c40:	000071e5 	.word	0x000071e5

00009c44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
    9c44:	b590      	push	{r4, r7, lr}
    9c46:	b085      	sub	sp, #20
    9c48:	af00      	add	r7, sp, #0
    9c4a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
    9c4c:	230f      	movs	r3, #15
    9c4e:	18fc      	adds	r4, r7, r3
    9c50:	687b      	ldr	r3, [r7, #4]
    9c52:	0018      	movs	r0, r3
    9c54:	4b09      	ldr	r3, [pc, #36]	; (9c7c <f_close+0x38>)
    9c56:	4798      	blx	r3
    9c58:	0003      	movs	r3, r0
    9c5a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
    9c5c:	230f      	movs	r3, #15
    9c5e:	18fb      	adds	r3, r7, r3
    9c60:	781b      	ldrb	r3, [r3, #0]
    9c62:	2b00      	cmp	r3, #0
    9c64:	d102      	bne.n	9c6c <f_close+0x28>
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	2200      	movs	r2, #0
    9c6a:	601a      	str	r2, [r3, #0]
	return res;
    9c6c:	230f      	movs	r3, #15
    9c6e:	18fb      	adds	r3, r7, r3
    9c70:	781b      	ldrb	r3, [r3, #0]
#endif
}
    9c72:	0018      	movs	r0, r3
    9c74:	46bd      	mov	sp, r7
    9c76:	b005      	add	sp, #20
    9c78:	bd90      	pop	{r4, r7, pc}
    9c7a:	46c0      	nop			; (mov r8, r8)
    9c7c:	00009ac5 	.word	0x00009ac5

00009c80 <f_putc>:
/*-----------------------------------------------------------------------*/
int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fil	/* Pointer to the file object */
)
{
    9c80:	b590      	push	{r4, r7, lr}
    9c82:	b087      	sub	sp, #28
    9c84:	af00      	add	r7, sp, #0
    9c86:	0002      	movs	r2, r0
    9c88:	6039      	str	r1, [r7, #0]
    9c8a:	1dfb      	adds	r3, r7, #7
    9c8c:	701a      	strb	r2, [r3, #0]
			s[2] = (BYTE)(0x80 | (c & 0x3F));
			btw = 3;
		}
	}
#else				/* Write the character without conversion */
	s[0] = (BYTE)c;
    9c8e:	230c      	movs	r3, #12
    9c90:	18fb      	adds	r3, r7, r3
    9c92:	1dfa      	adds	r2, r7, #7
    9c94:	7812      	ldrb	r2, [r2, #0]
    9c96:	701a      	strb	r2, [r3, #0]
	btw = 1;
    9c98:	2301      	movs	r3, #1
    9c9a:	617b      	str	r3, [r7, #20]
#endif
	f_write(fil, s, btw, &bw);		/* Write the char to the file */
    9c9c:	2310      	movs	r3, #16
    9c9e:	18fb      	adds	r3, r7, r3
    9ca0:	697a      	ldr	r2, [r7, #20]
    9ca2:	210c      	movs	r1, #12
    9ca4:	1879      	adds	r1, r7, r1
    9ca6:	6838      	ldr	r0, [r7, #0]
    9ca8:	4c06      	ldr	r4, [pc, #24]	; (9cc4 <f_putc+0x44>)
    9caa:	47a0      	blx	r4
	return (bw == btw) ? 1 : EOF;	/* Return the result */
    9cac:	693a      	ldr	r2, [r7, #16]
    9cae:	697b      	ldr	r3, [r7, #20]
    9cb0:	429a      	cmp	r2, r3
    9cb2:	d101      	bne.n	9cb8 <f_putc+0x38>
    9cb4:	2301      	movs	r3, #1
    9cb6:	e001      	b.n	9cbc <f_putc+0x3c>
    9cb8:	2301      	movs	r3, #1
    9cba:	425b      	negs	r3, r3
}
    9cbc:	0018      	movs	r0, r3
    9cbe:	46bd      	mov	sp, r7
    9cc0:	b007      	add	sp, #28
    9cc2:	bd90      	pop	{r4, r7, pc}
    9cc4:	00009775 	.word	0x00009775

00009cc8 <f_puts>:
/*-----------------------------------------------------------------------*/
int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fil			/* Pointer to the file object */
)
{
    9cc8:	b580      	push	{r7, lr}
    9cca:	b084      	sub	sp, #16
    9ccc:	af00      	add	r7, sp, #0
    9cce:	6078      	str	r0, [r7, #4]
    9cd0:	6039      	str	r1, [r7, #0]
	int n;


	for (n = 0; *str; str++, n++) {
    9cd2:	2300      	movs	r3, #0
    9cd4:	60fb      	str	r3, [r7, #12]
    9cd6:	e012      	b.n	9cfe <f_puts+0x36>
		if (f_putc(*str, fil) == EOF) return EOF;
    9cd8:	687b      	ldr	r3, [r7, #4]
    9cda:	781b      	ldrb	r3, [r3, #0]
    9cdc:	683a      	ldr	r2, [r7, #0]
    9cde:	0011      	movs	r1, r2
    9ce0:	0018      	movs	r0, r3
    9ce2:	4b0b      	ldr	r3, [pc, #44]	; (9d10 <f_puts+0x48>)
    9ce4:	4798      	blx	r3
    9ce6:	0003      	movs	r3, r0
    9ce8:	3301      	adds	r3, #1
    9cea:	d102      	bne.n	9cf2 <f_puts+0x2a>
    9cec:	2301      	movs	r3, #1
    9cee:	425b      	negs	r3, r3
    9cf0:	e00a      	b.n	9d08 <f_puts+0x40>
	for (n = 0; *str; str++, n++) {
    9cf2:	687b      	ldr	r3, [r7, #4]
    9cf4:	3301      	adds	r3, #1
    9cf6:	607b      	str	r3, [r7, #4]
    9cf8:	68fb      	ldr	r3, [r7, #12]
    9cfa:	3301      	adds	r3, #1
    9cfc:	60fb      	str	r3, [r7, #12]
    9cfe:	687b      	ldr	r3, [r7, #4]
    9d00:	781b      	ldrb	r3, [r3, #0]
    9d02:	2b00      	cmp	r3, #0
    9d04:	d1e8      	bne.n	9cd8 <f_puts+0x10>
	}
	return n;
    9d06:	68fb      	ldr	r3, [r7, #12]
}
    9d08:	0018      	movs	r0, r3
    9d0a:	46bd      	mov	sp, r7
    9d0c:	b004      	add	sp, #16
    9d0e:	bd80      	pop	{r7, pc}
    9d10:	00009c81 	.word	0x00009c81

00009d14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
    9d14:	b580      	push	{r7, lr}
    9d16:	b084      	sub	sp, #16
    9d18:	af00      	add	r7, sp, #0
    9d1a:	0002      	movs	r2, r0
    9d1c:	6039      	str	r1, [r7, #0]
    9d1e:	1dbb      	adds	r3, r7, #6
    9d20:	801a      	strh	r2, [r3, #0]
	WCHAR c;


	if (src < 0x80) {	/* ASCII */
    9d22:	1dbb      	adds	r3, r7, #6
    9d24:	881b      	ldrh	r3, [r3, #0]
    9d26:	2b7f      	cmp	r3, #127	; 0x7f
    9d28:	d805      	bhi.n	9d36 <ff_convert+0x22>
		c = src;
    9d2a:	230e      	movs	r3, #14
    9d2c:	18fb      	adds	r3, r7, r3
    9d2e:	1dba      	adds	r2, r7, #6
    9d30:	8812      	ldrh	r2, [r2, #0]
    9d32:	801a      	strh	r2, [r3, #0]
    9d34:	e03a      	b.n	9dac <ff_convert+0x98>

	} else {
		if (dir) {		/* OEMCP to Unicode */
    9d36:	683b      	ldr	r3, [r7, #0]
    9d38:	2b00      	cmp	r3, #0
    9d3a:	d010      	beq.n	9d5e <ff_convert+0x4a>
			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
    9d3c:	1dbb      	adds	r3, r7, #6
    9d3e:	881b      	ldrh	r3, [r3, #0]
    9d40:	2bff      	cmp	r3, #255	; 0xff
    9d42:	d807      	bhi.n	9d54 <ff_convert+0x40>
    9d44:	1dbb      	adds	r3, r7, #6
    9d46:	881b      	ldrh	r3, [r3, #0]
    9d48:	3b80      	subs	r3, #128	; 0x80
    9d4a:	001a      	movs	r2, r3
    9d4c:	4b1b      	ldr	r3, [pc, #108]	; (9dbc <ff_convert+0xa8>)
    9d4e:	0052      	lsls	r2, r2, #1
    9d50:	5ad2      	ldrh	r2, [r2, r3]
    9d52:	e000      	b.n	9d56 <ff_convert+0x42>
    9d54:	2200      	movs	r2, #0
    9d56:	230e      	movs	r3, #14
    9d58:	18fb      	adds	r3, r7, r3
    9d5a:	801a      	strh	r2, [r3, #0]
    9d5c:	e026      	b.n	9dac <ff_convert+0x98>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
    9d5e:	230e      	movs	r3, #14
    9d60:	18fb      	adds	r3, r7, r3
    9d62:	2200      	movs	r2, #0
    9d64:	801a      	strh	r2, [r3, #0]
    9d66:	e010      	b.n	9d8a <ff_convert+0x76>
				if (src == Tbl[c]) break;
    9d68:	230e      	movs	r3, #14
    9d6a:	18fb      	adds	r3, r7, r3
    9d6c:	881a      	ldrh	r2, [r3, #0]
    9d6e:	4b13      	ldr	r3, [pc, #76]	; (9dbc <ff_convert+0xa8>)
    9d70:	0052      	lsls	r2, r2, #1
    9d72:	5ad3      	ldrh	r3, [r2, r3]
    9d74:	1dba      	adds	r2, r7, #6
    9d76:	8812      	ldrh	r2, [r2, #0]
    9d78:	429a      	cmp	r2, r3
    9d7a:	d00c      	beq.n	9d96 <ff_convert+0x82>
			for (c = 0; c < 0x80; c++) {
    9d7c:	230e      	movs	r3, #14
    9d7e:	18fb      	adds	r3, r7, r3
    9d80:	881a      	ldrh	r2, [r3, #0]
    9d82:	230e      	movs	r3, #14
    9d84:	18fb      	adds	r3, r7, r3
    9d86:	3201      	adds	r2, #1
    9d88:	801a      	strh	r2, [r3, #0]
    9d8a:	230e      	movs	r3, #14
    9d8c:	18fb      	adds	r3, r7, r3
    9d8e:	881b      	ldrh	r3, [r3, #0]
    9d90:	2b7f      	cmp	r3, #127	; 0x7f
    9d92:	d9e9      	bls.n	9d68 <ff_convert+0x54>
    9d94:	e000      	b.n	9d98 <ff_convert+0x84>
				if (src == Tbl[c]) break;
    9d96:	46c0      	nop			; (mov r8, r8)
			}
			c = (c + 0x80) & 0xFF;
    9d98:	230e      	movs	r3, #14
    9d9a:	18fb      	adds	r3, r7, r3
    9d9c:	881b      	ldrh	r3, [r3, #0]
    9d9e:	3380      	adds	r3, #128	; 0x80
    9da0:	b29a      	uxth	r2, r3
    9da2:	230e      	movs	r3, #14
    9da4:	18fb      	adds	r3, r7, r3
    9da6:	21ff      	movs	r1, #255	; 0xff
    9da8:	400a      	ands	r2, r1
    9daa:	801a      	strh	r2, [r3, #0]
		}
	}

	return c;
    9dac:	230e      	movs	r3, #14
    9dae:	18fb      	adds	r3, r7, r3
    9db0:	881b      	ldrh	r3, [r3, #0]
}
    9db2:	0018      	movs	r0, r3
    9db4:	46bd      	mov	sp, r7
    9db6:	b004      	add	sp, #16
    9db8:	bd80      	pop	{r7, pc}
    9dba:	46c0      	nop			; (mov r8, r8)
    9dbc:	0000b0bc 	.word	0x0000b0bc

00009dc0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
    9dc0:	b580      	push	{r7, lr}
    9dc2:	b084      	sub	sp, #16
    9dc4:	af00      	add	r7, sp, #0
    9dc6:	0002      	movs	r2, r0
    9dc8:	1dbb      	adds	r3, r7, #6
    9dca:	801a      	strh	r2, [r3, #0]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
    9dcc:	2300      	movs	r3, #0
    9dce:	60fb      	str	r3, [r7, #12]
    9dd0:	e002      	b.n	9dd8 <ff_wtoupper+0x18>
    9dd2:	68fb      	ldr	r3, [r7, #12]
    9dd4:	3301      	adds	r3, #1
    9dd6:	60fb      	str	r3, [r7, #12]
    9dd8:	4b0f      	ldr	r3, [pc, #60]	; (9e18 <ff_wtoupper+0x58>)
    9dda:	68fa      	ldr	r2, [r7, #12]
    9ddc:	0052      	lsls	r2, r2, #1
    9dde:	5ad3      	ldrh	r3, [r2, r3]
    9de0:	2b00      	cmp	r3, #0
    9de2:	d007      	beq.n	9df4 <ff_wtoupper+0x34>
    9de4:	4b0c      	ldr	r3, [pc, #48]	; (9e18 <ff_wtoupper+0x58>)
    9de6:	68fa      	ldr	r2, [r7, #12]
    9de8:	0052      	lsls	r2, r2, #1
    9dea:	5ad3      	ldrh	r3, [r2, r3]
    9dec:	1dba      	adds	r2, r7, #6
    9dee:	8812      	ldrh	r2, [r2, #0]
    9df0:	429a      	cmp	r2, r3
    9df2:	d1ee      	bne.n	9dd2 <ff_wtoupper+0x12>

	return tbl_lower[i] ? tbl_upper[i] : chr;
    9df4:	4b08      	ldr	r3, [pc, #32]	; (9e18 <ff_wtoupper+0x58>)
    9df6:	68fa      	ldr	r2, [r7, #12]
    9df8:	0052      	lsls	r2, r2, #1
    9dfa:	5ad3      	ldrh	r3, [r2, r3]
    9dfc:	2b00      	cmp	r3, #0
    9dfe:	d004      	beq.n	9e0a <ff_wtoupper+0x4a>
    9e00:	4b06      	ldr	r3, [pc, #24]	; (9e1c <ff_wtoupper+0x5c>)
    9e02:	68fa      	ldr	r2, [r7, #12]
    9e04:	0052      	lsls	r2, r2, #1
    9e06:	5ad3      	ldrh	r3, [r2, r3]
    9e08:	e001      	b.n	9e0e <ff_wtoupper+0x4e>
    9e0a:	1dbb      	adds	r3, r7, #6
    9e0c:	881b      	ldrh	r3, [r3, #0]
}
    9e0e:	0018      	movs	r0, r3
    9e10:	46bd      	mov	sp, r7
    9e12:	b004      	add	sp, #16
    9e14:	bd80      	pop	{r7, pc}
    9e16:	46c0      	nop			; (mov r8, r8)
    9e18:	0000b1bc 	.word	0x0000b1bc
    9e1c:	0000b39c 	.word	0x0000b39c

00009e20 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    9e20:	b580      	push	{r7, lr}
    9e22:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    9e24:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    9e28:	4b02      	ldr	r3, [pc, #8]	; (9e34 <NVIC_SystemReset+0x14>)
    9e2a:	4a03      	ldr	r2, [pc, #12]	; (9e38 <NVIC_SystemReset+0x18>)
    9e2c:	60da      	str	r2, [r3, #12]
    9e2e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    9e32:	e7fe      	b.n	9e32 <NVIC_SystemReset+0x12>
    9e34:	e000ed00 	.word	0xe000ed00
    9e38:	05fa0004 	.word	0x05fa0004

00009e3c <system_apb_clock_set_mask>:
{
    9e3c:	b580      	push	{r7, lr}
    9e3e:	b082      	sub	sp, #8
    9e40:	af00      	add	r7, sp, #0
    9e42:	0002      	movs	r2, r0
    9e44:	6039      	str	r1, [r7, #0]
    9e46:	1dfb      	adds	r3, r7, #7
    9e48:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9e4a:	1dfb      	adds	r3, r7, #7
    9e4c:	781b      	ldrb	r3, [r3, #0]
    9e4e:	2b01      	cmp	r3, #1
    9e50:	d00a      	beq.n	9e68 <system_apb_clock_set_mask+0x2c>
    9e52:	2b02      	cmp	r3, #2
    9e54:	d00f      	beq.n	9e76 <system_apb_clock_set_mask+0x3a>
    9e56:	2b00      	cmp	r3, #0
    9e58:	d114      	bne.n	9e84 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    9e5a:	4b0e      	ldr	r3, [pc, #56]	; (9e94 <system_apb_clock_set_mask+0x58>)
    9e5c:	4a0d      	ldr	r2, [pc, #52]	; (9e94 <system_apb_clock_set_mask+0x58>)
    9e5e:	6991      	ldr	r1, [r2, #24]
    9e60:	683a      	ldr	r2, [r7, #0]
    9e62:	430a      	orrs	r2, r1
    9e64:	619a      	str	r2, [r3, #24]
			break;
    9e66:	e00f      	b.n	9e88 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    9e68:	4b0a      	ldr	r3, [pc, #40]	; (9e94 <system_apb_clock_set_mask+0x58>)
    9e6a:	4a0a      	ldr	r2, [pc, #40]	; (9e94 <system_apb_clock_set_mask+0x58>)
    9e6c:	69d1      	ldr	r1, [r2, #28]
    9e6e:	683a      	ldr	r2, [r7, #0]
    9e70:	430a      	orrs	r2, r1
    9e72:	61da      	str	r2, [r3, #28]
			break;
    9e74:	e008      	b.n	9e88 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    9e76:	4b07      	ldr	r3, [pc, #28]	; (9e94 <system_apb_clock_set_mask+0x58>)
    9e78:	4a06      	ldr	r2, [pc, #24]	; (9e94 <system_apb_clock_set_mask+0x58>)
    9e7a:	6a11      	ldr	r1, [r2, #32]
    9e7c:	683a      	ldr	r2, [r7, #0]
    9e7e:	430a      	orrs	r2, r1
    9e80:	621a      	str	r2, [r3, #32]
			break;
    9e82:	e001      	b.n	9e88 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    9e84:	2317      	movs	r3, #23
    9e86:	e000      	b.n	9e8a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    9e88:	2300      	movs	r3, #0
}
    9e8a:	0018      	movs	r0, r3
    9e8c:	46bd      	mov	sp, r7
    9e8e:	b002      	add	sp, #8
    9e90:	bd80      	pop	{r7, pc}
    9e92:	46c0      	nop			; (mov r8, r8)
    9e94:	40000400 	.word	0x40000400

00009e98 <nvm_get_config_defaults>:
{
    9e98:	b580      	push	{r7, lr}
    9e9a:	b082      	sub	sp, #8
    9e9c:	af00      	add	r7, sp, #0
    9e9e:	6078      	str	r0, [r7, #4]
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    9ea0:	687b      	ldr	r3, [r7, #4]
    9ea2:	2200      	movs	r2, #0
    9ea4:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	2201      	movs	r2, #1
    9eaa:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    9eac:	4b08      	ldr	r3, [pc, #32]	; (9ed0 <nvm_get_config_defaults+0x38>)
    9eae:	685b      	ldr	r3, [r3, #4]
    9eb0:	06db      	lsls	r3, r3, #27
    9eb2:	0f1b      	lsrs	r3, r3, #28
    9eb4:	b2db      	uxtb	r3, r3
    9eb6:	001a      	movs	r2, r3
    9eb8:	687b      	ldr	r3, [r7, #4]
    9eba:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    9ebc:	687b      	ldr	r3, [r7, #4]
    9ebe:	2200      	movs	r2, #0
    9ec0:	70da      	strb	r2, [r3, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    9ec2:	687b      	ldr	r3, [r7, #4]
    9ec4:	2200      	movs	r2, #0
    9ec6:	711a      	strb	r2, [r3, #4]
}
    9ec8:	46c0      	nop			; (mov r8, r8)
    9eca:	46bd      	mov	sp, r7
    9ecc:	b002      	add	sp, #8
    9ece:	bd80      	pop	{r7, pc}
    9ed0:	41004000 	.word	0x41004000

00009ed4 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    9ed4:	b580      	push	{r7, lr}
    9ed6:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    9ed8:	4b02      	ldr	r3, [pc, #8]	; (9ee4 <system_reset+0x10>)
    9eda:	4798      	blx	r3
}
    9edc:	46c0      	nop			; (mov r8, r8)
    9ede:	46bd      	mov	sp, r7
    9ee0:	bd80      	pop	{r7, pc}
    9ee2:	46c0      	nop			; (mov r8, r8)
    9ee4:	00009e21 	.word	0x00009e21

00009ee8 <system_interrupt_enable_global>:
{
    9ee8:	b580      	push	{r7, lr}
    9eea:	af00      	add	r7, sp, #0
	cpu_irq_enable();
    9eec:	4b04      	ldr	r3, [pc, #16]	; (9f00 <system_interrupt_enable_global+0x18>)
    9eee:	2201      	movs	r2, #1
    9ef0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
    9ef2:	f3bf 8f5f 	dmb	sy
    9ef6:	b662      	cpsie	i
}
    9ef8:	46c0      	nop			; (mov r8, r8)
    9efa:	46bd      	mov	sp, r7
    9efc:	bd80      	pop	{r7, pc}
    9efe:	46c0      	nop			; (mov r8, r8)
    9f00:	20000009 	.word	0x20000009

00009f04 <dsu_crc32_init>:
 * \brief CRC initialization function
 *
 * Enables CRC peripheral, clocks and initializes CRC driver.
 */
static inline void dsu_crc32_init(void)
{
    9f04:	b580      	push	{r7, lr}
    9f06:	af00      	add	r7, sp, #0
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_DSU);
#else
		/* Turn on the digital interface clock */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_DSU);
    9f08:	2102      	movs	r1, #2
    9f0a:	2001      	movs	r0, #1
    9f0c:	4b02      	ldr	r3, [pc, #8]	; (9f18 <dsu_crc32_init+0x14>)
    9f0e:	4798      	blx	r3
#endif

}
    9f10:	46c0      	nop			; (mov r8, r8)
    9f12:	46bd      	mov	sp, r7
    9f14:	bd80      	pop	{r7, pc}
    9f16:	46c0      	nop			; (mov r8, r8)
    9f18:	00009e3d 	.word	0x00009e3d

00009f1c <main>:
* @return	Unused (ANSI-C compatibility).
* @note		Bootloader code initiates here.
*****************************************************************************/

int main(void)
{
    9f1c:	b580      	push	{r7, lr}
    9f1e:	af00      	add	r7, sp, #0

	/*1.) INIT SYSTEM PERIPHERALS INITIALIZATION*/
	system_init();
    9f20:	4b22      	ldr	r3, [pc, #136]	; (9fac <main+0x90>)
    9f22:	4798      	blx	r3
	delay_init();
    9f24:	4b22      	ldr	r3, [pc, #136]	; (9fb0 <main+0x94>)
    9f26:	4798      	blx	r3
	InitializeSerialConsole();
    9f28:	4b22      	ldr	r3, [pc, #136]	; (9fb4 <main+0x98>)
    9f2a:	4798      	blx	r3
	system_interrupt_enable_global();
    9f2c:	4b22      	ldr	r3, [pc, #136]	; (9fb8 <main+0x9c>)
    9f2e:	4798      	blx	r3
	/* Initialize SD MMC stack */
	sd_mmc_init();
    9f30:	4b22      	ldr	r3, [pc, #136]	; (9fbc <main+0xa0>)
    9f32:	4798      	blx	r3

	//Initialize the NVM driver
	configure_nvm();
    9f34:	4b22      	ldr	r3, [pc, #136]	; (9fc0 <main+0xa4>)
    9f36:	4798      	blx	r3

	irq_initialize_vectors();
	cpu_irq_enable();
    9f38:	4b22      	ldr	r3, [pc, #136]	; (9fc4 <main+0xa8>)
    9f3a:	2201      	movs	r2, #1
    9f3c:	701a      	strb	r2, [r3, #0]
    9f3e:	f3bf 8f5f 	dmb	sy
    9f42:	b662      	cpsie	i

	//Configure CRC32
	dsu_crc32_init();
    9f44:	4b20      	ldr	r3, [pc, #128]	; (9fc8 <main+0xac>)
    9f46:	4798      	blx	r3

	SerialConsoleWriteString("ESE516 - ENTER BOOTLOADER");	//Order to add string to TX Buffer
    9f48:	4b20      	ldr	r3, [pc, #128]	; (9fcc <main+0xb0>)
    9f4a:	0018      	movs	r0, r3
    9f4c:	4b20      	ldr	r3, [pc, #128]	; (9fd0 <main+0xb4>)
    9f4e:	4798      	blx	r3

	/*2.) STARTS SIMPLE SD CARD MOUNTING AND TEST!*/

	//EXAMPLE CODE ON MOUNTING THE SD CARD AND WRITING TO A FILE
	//See function inside to see how to open a file
	SerialConsoleWriteString("\x0C\n\r-- SD/MMC Card Example on FatFs --\n\r");
    9f50:	4b20      	ldr	r3, [pc, #128]	; (9fd4 <main+0xb8>)
    9f52:	0018      	movs	r0, r3
    9f54:	4b1e      	ldr	r3, [pc, #120]	; (9fd0 <main+0xb4>)
    9f56:	4798      	blx	r3

	if(StartFilesystemAndTest() == false)
    9f58:	4b1f      	ldr	r3, [pc, #124]	; (9fd8 <main+0xbc>)
    9f5a:	4798      	blx	r3
    9f5c:	0003      	movs	r3, r0
    9f5e:	001a      	movs	r2, r3
    9f60:	2301      	movs	r3, #1
    9f62:	4053      	eors	r3, r2
    9f64:	b2db      	uxtb	r3, r3
    9f66:	2b00      	cmp	r3, #0
    9f68:	d00a      	beq.n	9f80 <main+0x64>
	{
		SerialConsoleWriteString("SD CARD failed! Check your connections. System will restart in 5 seconds...");
    9f6a:	4b1c      	ldr	r3, [pc, #112]	; (9fdc <main+0xc0>)
    9f6c:	0018      	movs	r0, r3
    9f6e:	4b18      	ldr	r3, [pc, #96]	; (9fd0 <main+0xb4>)
    9f70:	4798      	blx	r3
		delay_cycles_ms(5000);
    9f72:	4b1b      	ldr	r3, [pc, #108]	; (9fe0 <main+0xc4>)
    9f74:	0018      	movs	r0, r3
    9f76:	4b1b      	ldr	r3, [pc, #108]	; (9fe4 <main+0xc8>)
    9f78:	4798      	blx	r3
		system_reset();
    9f7a:	4b1b      	ldr	r3, [pc, #108]	; (9fe8 <main+0xcc>)
    9f7c:	4798      	blx	r3
    9f7e:	e003      	b.n	9f88 <main+0x6c>
	}
	else
	{
		SerialConsoleWriteString("SD CARD mount success! Filesystem also mounted. \r\n");
    9f80:	4b1a      	ldr	r3, [pc, #104]	; (9fec <main+0xd0>)
    9f82:	0018      	movs	r0, r3
    9f84:	4b12      	ldr	r3, [pc, #72]	; (9fd0 <main+0xb4>)
    9f86:	4798      	blx	r3
	/*3.) STARTS BOOTLOADER HERE!*/



	//4.) DEINITIALIZE HW AND JUMP TO MAIN APPLICATION!
	SerialConsoleWriteString("ESE516 - EXIT BOOTLOADER");	//Order to add string to TX Buffer
    9f88:	4b19      	ldr	r3, [pc, #100]	; (9ff0 <main+0xd4>)
    9f8a:	0018      	movs	r0, r3
    9f8c:	4b10      	ldr	r3, [pc, #64]	; (9fd0 <main+0xb4>)
    9f8e:	4798      	blx	r3
	delay_cycles_ms(100); //Delay to allow print
    9f90:	2064      	movs	r0, #100	; 0x64
    9f92:	4b14      	ldr	r3, [pc, #80]	; (9fe4 <main+0xc8>)
    9f94:	4798      	blx	r3
		
		//Deinitialize HW - deinitialize started HW here!
		DeinitializeSerialConsole(); //Deinitializes UART
    9f96:	4b17      	ldr	r3, [pc, #92]	; (9ff4 <main+0xd8>)
    9f98:	4798      	blx	r3
		sd_mmc_deinit(); //Deinitialize SD CARD
    9f9a:	4b17      	ldr	r3, [pc, #92]	; (9ff8 <main+0xdc>)
    9f9c:	4798      	blx	r3


		//Jump to application
		jumpToApplication();
    9f9e:	4b17      	ldr	r3, [pc, #92]	; (9ffc <main+0xe0>)
    9fa0:	4798      	blx	r3
    9fa2:	2300      	movs	r3, #0

		//Should not reach here! The device should have jumped to the main FW.
	
}
    9fa4:	0018      	movs	r0, r3
    9fa6:	46bd      	mov	sp, r7
    9fa8:	bd80      	pop	{r7, pc}
    9faa:	46c0      	nop			; (mov r8, r8)
    9fac:	00006889 	.word	0x00006889
    9fb0:	00000149 	.word	0x00000149
    9fb4:	000009c5 	.word	0x000009c5
    9fb8:	00009ee9 	.word	0x00009ee9
    9fbc:	000018d1 	.word	0x000018d1
    9fc0:	0000a2e1 	.word	0x0000a2e1
    9fc4:	20000009 	.word	0x20000009
    9fc8:	00009f05 	.word	0x00009f05
    9fcc:	0000b57c 	.word	0x0000b57c
    9fd0:	00000a51 	.word	0x00000a51
    9fd4:	0000b598 	.word	0x0000b598
    9fd8:	0000a001 	.word	0x0000a001
    9fdc:	0000b5c0 	.word	0x0000b5c0
    9fe0:	00001388 	.word	0x00001388
    9fe4:	000001a1 	.word	0x000001a1
    9fe8:	00009ed5 	.word	0x00009ed5
    9fec:	0000b60c 	.word	0x0000b60c
    9ff0:	0000b640 	.word	0x0000b640
    9ff4:	00000a35 	.word	0x00000a35
    9ff8:	00002679 	.word	0x00002679
    9ffc:	0000a2a9 	.word	0x0000a2a9

0000a000 <StartFilesystemAndTest>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       Returns true is SD card and file system test passed. False otherwise.
******************************************************************************/
static bool StartFilesystemAndTest(void)
{
    a000:	b590      	push	{r4, r7, lr}
    a002:	b0c5      	sub	sp, #276	; 0x114
    a004:	af00      	add	r7, sp, #0
	bool sdCardPass = true;
    a006:	2310      	movs	r3, #16
    a008:	33ff      	adds	r3, #255	; 0xff
    a00a:	18fb      	adds	r3, r7, r3
    a00c:	2201      	movs	r2, #1
    a00e:	701a      	strb	r2, [r3, #0]
	uint8_t binbuff[256];

	//Before we begin - fill buffer for binary write test
	//Fill binbuff with values 0x00 - 0xFF
	for(int i = 0; i < 256; i++)
    a010:	2300      	movs	r3, #0
    a012:	2284      	movs	r2, #132	; 0x84
    a014:	0052      	lsls	r2, r2, #1
    a016:	18ba      	adds	r2, r7, r2
    a018:	6013      	str	r3, [r2, #0]
    a01a:	e019      	b.n	a050 <StartFilesystemAndTest+0x50>
	{
		binbuff[i] = i;
    a01c:	2384      	movs	r3, #132	; 0x84
    a01e:	005b      	lsls	r3, r3, #1
    a020:	18fb      	adds	r3, r7, r3
    a022:	681b      	ldr	r3, [r3, #0]
    a024:	b2d9      	uxtb	r1, r3
    a026:	4b84      	ldr	r3, [pc, #528]	; (a238 <StartFilesystemAndTest+0x238>)
    a028:	2288      	movs	r2, #136	; 0x88
    a02a:	0052      	lsls	r2, r2, #1
    a02c:	18ba      	adds	r2, r7, r2
    a02e:	18d2      	adds	r2, r2, r3
    a030:	2384      	movs	r3, #132	; 0x84
    a032:	005b      	lsls	r3, r3, #1
    a034:	18fb      	adds	r3, r7, r3
    a036:	681b      	ldr	r3, [r3, #0]
    a038:	18d3      	adds	r3, r2, r3
    a03a:	1c0a      	adds	r2, r1, #0
    a03c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 256; i++)
    a03e:	2384      	movs	r3, #132	; 0x84
    a040:	005b      	lsls	r3, r3, #1
    a042:	18fb      	adds	r3, r7, r3
    a044:	681b      	ldr	r3, [r3, #0]
    a046:	3301      	adds	r3, #1
    a048:	2284      	movs	r2, #132	; 0x84
    a04a:	0052      	lsls	r2, r2, #1
    a04c:	18ba      	adds	r2, r7, r2
    a04e:	6013      	str	r3, [r2, #0]
    a050:	2384      	movs	r3, #132	; 0x84
    a052:	005b      	lsls	r3, r3, #1
    a054:	18fb      	adds	r3, r7, r3
    a056:	681b      	ldr	r3, [r3, #0]
    a058:	2bff      	cmp	r3, #255	; 0xff
    a05a:	dddf      	ble.n	a01c <StartFilesystemAndTest+0x1c>
	}

	//MOUNT SD CARD
	Ctrl_status sdStatus= SdCard_Initiate();
    a05c:	2308      	movs	r3, #8
    a05e:	33ff      	adds	r3, #255	; 0xff
    a060:	18fc      	adds	r4, r7, r3
    a062:	4b76      	ldr	r3, [pc, #472]	; (a23c <StartFilesystemAndTest+0x23c>)
    a064:	4798      	blx	r3
    a066:	0003      	movs	r3, r0
    a068:	7023      	strb	r3, [r4, #0]
	if(sdStatus == CTRL_GOOD) //If the SD card is good we continue mounting the system!
    a06a:	2308      	movs	r3, #8
    a06c:	33ff      	adds	r3, #255	; 0xff
    a06e:	18fb      	adds	r3, r7, r3
    a070:	781b      	ldrb	r3, [r3, #0]
    a072:	2b00      	cmp	r3, #0
    a074:	d000      	beq.n	a078 <StartFilesystemAndTest+0x78>
    a076:	e0ce      	b.n	a216 <StartFilesystemAndTest+0x216>
	{
		SerialConsoleWriteString("SD Card initiated correctly!\n\r");
    a078:	4b71      	ldr	r3, [pc, #452]	; (a240 <StartFilesystemAndTest+0x240>)
    a07a:	0018      	movs	r0, r3
    a07c:	4b71      	ldr	r3, [pc, #452]	; (a244 <StartFilesystemAndTest+0x244>)
    a07e:	4798      	blx	r3

		//Attempt to mount a FAT file system on the SD Card using FATFS
		SerialConsoleWriteString("Mount disk (f_mount)...\r\n");
    a080:	4b71      	ldr	r3, [pc, #452]	; (a248 <StartFilesystemAndTest+0x248>)
    a082:	0018      	movs	r0, r3
    a084:	4b6f      	ldr	r3, [pc, #444]	; (a244 <StartFilesystemAndTest+0x244>)
    a086:	4798      	blx	r3
		memset(&fs, 0, sizeof(FATFS));
    a088:	238c      	movs	r3, #140	; 0x8c
    a08a:	009a      	lsls	r2, r3, #2
    a08c:	4b6f      	ldr	r3, [pc, #444]	; (a24c <StartFilesystemAndTest+0x24c>)
    a08e:	2100      	movs	r1, #0
    a090:	0018      	movs	r0, r3
    a092:	4b6f      	ldr	r3, [pc, #444]	; (a250 <StartFilesystemAndTest+0x250>)
    a094:	4798      	blx	r3
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs); //Order FATFS Mount
    a096:	4b6d      	ldr	r3, [pc, #436]	; (a24c <StartFilesystemAndTest+0x24c>)
    a098:	0019      	movs	r1, r3
    a09a:	2000      	movs	r0, #0
    a09c:	4b6d      	ldr	r3, [pc, #436]	; (a254 <StartFilesystemAndTest+0x254>)
    a09e:	4798      	blx	r3
    a0a0:	0003      	movs	r3, r0
    a0a2:	001a      	movs	r2, r3
    a0a4:	4b6c      	ldr	r3, [pc, #432]	; (a258 <StartFilesystemAndTest+0x258>)
    a0a6:	701a      	strb	r2, [r3, #0]
		if (FR_INVALID_DRIVE == res)
    a0a8:	4b6b      	ldr	r3, [pc, #428]	; (a258 <StartFilesystemAndTest+0x258>)
    a0aa:	781b      	ldrb	r3, [r3, #0]
    a0ac:	2b0b      	cmp	r3, #11
    a0ae:	d10d      	bne.n	a0cc <StartFilesystemAndTest+0xcc>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    a0b0:	4b69      	ldr	r3, [pc, #420]	; (a258 <StartFilesystemAndTest+0x258>)
    a0b2:	781b      	ldrb	r3, [r3, #0]
    a0b4:	001a      	movs	r2, r3
    a0b6:	4b69      	ldr	r3, [pc, #420]	; (a25c <StartFilesystemAndTest+0x25c>)
    a0b8:	0019      	movs	r1, r3
    a0ba:	2000      	movs	r0, #0
    a0bc:	4b68      	ldr	r3, [pc, #416]	; (a260 <StartFilesystemAndTest+0x260>)
    a0be:	4798      	blx	r3
			sdCardPass = false;
    a0c0:	2310      	movs	r3, #16
    a0c2:	33ff      	adds	r3, #255	; 0xff
    a0c4:	18fb      	adds	r3, r7, r3
    a0c6:	2200      	movs	r2, #0
    a0c8:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    a0ca:	e09f      	b.n	a20c <StartFilesystemAndTest+0x20c>
		}
		SerialConsoleWriteString("[OK]\r\n");
    a0cc:	4b65      	ldr	r3, [pc, #404]	; (a264 <StartFilesystemAndTest+0x264>)
    a0ce:	0018      	movs	r0, r3
    a0d0:	4b5c      	ldr	r3, [pc, #368]	; (a244 <StartFilesystemAndTest+0x244>)
    a0d2:	4798      	blx	r3

		//Create and open a file
		SerialConsoleWriteString("Create a file (f_open)...\r\n");
    a0d4:	4b64      	ldr	r3, [pc, #400]	; (a268 <StartFilesystemAndTest+0x268>)
    a0d6:	0018      	movs	r0, r3
    a0d8:	4b5a      	ldr	r3, [pc, #360]	; (a244 <StartFilesystemAndTest+0x244>)
    a0da:	4798      	blx	r3

		test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
    a0dc:	4b63      	ldr	r3, [pc, #396]	; (a26c <StartFilesystemAndTest+0x26c>)
    a0de:	2230      	movs	r2, #48	; 0x30
    a0e0:	701a      	strb	r2, [r3, #0]
		res = f_open(&file_object,
    a0e2:	4962      	ldr	r1, [pc, #392]	; (a26c <StartFilesystemAndTest+0x26c>)
    a0e4:	4b62      	ldr	r3, [pc, #392]	; (a270 <StartFilesystemAndTest+0x270>)
    a0e6:	220a      	movs	r2, #10
    a0e8:	0018      	movs	r0, r3
    a0ea:	4b62      	ldr	r3, [pc, #392]	; (a274 <StartFilesystemAndTest+0x274>)
    a0ec:	4798      	blx	r3
    a0ee:	0003      	movs	r3, r0
    a0f0:	001a      	movs	r2, r3
    a0f2:	4b59      	ldr	r3, [pc, #356]	; (a258 <StartFilesystemAndTest+0x258>)
    a0f4:	701a      	strb	r2, [r3, #0]
		(char const *)test_file_name,
		FA_CREATE_ALWAYS | FA_WRITE);
		
		if (res != FR_OK)
    a0f6:	4b58      	ldr	r3, [pc, #352]	; (a258 <StartFilesystemAndTest+0x258>)
    a0f8:	781b      	ldrb	r3, [r3, #0]
    a0fa:	2b00      	cmp	r3, #0
    a0fc:	d00d      	beq.n	a11a <StartFilesystemAndTest+0x11a>
		{
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    a0fe:	4b56      	ldr	r3, [pc, #344]	; (a258 <StartFilesystemAndTest+0x258>)
    a100:	781b      	ldrb	r3, [r3, #0]
    a102:	001a      	movs	r2, r3
    a104:	4b55      	ldr	r3, [pc, #340]	; (a25c <StartFilesystemAndTest+0x25c>)
    a106:	0019      	movs	r1, r3
    a108:	2000      	movs	r0, #0
    a10a:	4b55      	ldr	r3, [pc, #340]	; (a260 <StartFilesystemAndTest+0x260>)
    a10c:	4798      	blx	r3
			sdCardPass = false;
    a10e:	2310      	movs	r3, #16
    a110:	33ff      	adds	r3, #255	; 0xff
    a112:	18fb      	adds	r3, r7, r3
    a114:	2200      	movs	r2, #0
    a116:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    a118:	e078      	b.n	a20c <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    a11a:	4b52      	ldr	r3, [pc, #328]	; (a264 <StartFilesystemAndTest+0x264>)
    a11c:	0018      	movs	r0, r3
    a11e:	4b49      	ldr	r3, [pc, #292]	; (a244 <StartFilesystemAndTest+0x244>)
    a120:	4798      	blx	r3

		//Write to a file
		SerialConsoleWriteString("Write to test file (f_puts)...\r\n");
    a122:	4b55      	ldr	r3, [pc, #340]	; (a278 <StartFilesystemAndTest+0x278>)
    a124:	0018      	movs	r0, r3
    a126:	4b47      	ldr	r3, [pc, #284]	; (a244 <StartFilesystemAndTest+0x244>)
    a128:	4798      	blx	r3

		if (0 == f_puts("Test SD/MMC stack\n", &file_object))
    a12a:	4a51      	ldr	r2, [pc, #324]	; (a270 <StartFilesystemAndTest+0x270>)
    a12c:	4b53      	ldr	r3, [pc, #332]	; (a27c <StartFilesystemAndTest+0x27c>)
    a12e:	0011      	movs	r1, r2
    a130:	0018      	movs	r0, r3
    a132:	4b53      	ldr	r3, [pc, #332]	; (a280 <StartFilesystemAndTest+0x280>)
    a134:	4798      	blx	r3
    a136:	1e03      	subs	r3, r0, #0
    a138:	d10e      	bne.n	a158 <StartFilesystemAndTest+0x158>
		{
			f_close(&file_object);
    a13a:	4b4d      	ldr	r3, [pc, #308]	; (a270 <StartFilesystemAndTest+0x270>)
    a13c:	0018      	movs	r0, r3
    a13e:	4b51      	ldr	r3, [pc, #324]	; (a284 <StartFilesystemAndTest+0x284>)
    a140:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    a142:	4b51      	ldr	r3, [pc, #324]	; (a288 <StartFilesystemAndTest+0x288>)
    a144:	0019      	movs	r1, r3
    a146:	2000      	movs	r0, #0
    a148:	4b45      	ldr	r3, [pc, #276]	; (a260 <StartFilesystemAndTest+0x260>)
    a14a:	4798      	blx	r3
			sdCardPass = false;
    a14c:	2310      	movs	r3, #16
    a14e:	33ff      	adds	r3, #255	; 0xff
    a150:	18fb      	adds	r3, r7, r3
    a152:	2200      	movs	r2, #0
    a154:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    a156:	e059      	b.n	a20c <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    a158:	4b42      	ldr	r3, [pc, #264]	; (a264 <StartFilesystemAndTest+0x264>)
    a15a:	0018      	movs	r0, r3
    a15c:	4b39      	ldr	r3, [pc, #228]	; (a244 <StartFilesystemAndTest+0x244>)
    a15e:	4798      	blx	r3
		f_close(&file_object); //Close file
    a160:	4b43      	ldr	r3, [pc, #268]	; (a270 <StartFilesystemAndTest+0x270>)
    a162:	0018      	movs	r0, r3
    a164:	4b47      	ldr	r3, [pc, #284]	; (a284 <StartFilesystemAndTest+0x284>)
    a166:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    a168:	4b48      	ldr	r3, [pc, #288]	; (a28c <StartFilesystemAndTest+0x28c>)
    a16a:	0018      	movs	r0, r3
    a16c:	4b35      	ldr	r3, [pc, #212]	; (a244 <StartFilesystemAndTest+0x244>)
    a16e:	4798      	blx	r3


		//Write binary file
		//Read SD Card File
		test_bin_file[0] = LUN_ID_SD_MMC_0_MEM + '0';
    a170:	4b47      	ldr	r3, [pc, #284]	; (a290 <StartFilesystemAndTest+0x290>)
    a172:	2230      	movs	r2, #48	; 0x30
    a174:	701a      	strb	r2, [r3, #0]
		res = f_open(&file_object, (char const *)test_bin_file, FA_WRITE | FA_CREATE_ALWAYS);
    a176:	4946      	ldr	r1, [pc, #280]	; (a290 <StartFilesystemAndTest+0x290>)
    a178:	4b3d      	ldr	r3, [pc, #244]	; (a270 <StartFilesystemAndTest+0x270>)
    a17a:	220a      	movs	r2, #10
    a17c:	0018      	movs	r0, r3
    a17e:	4b3d      	ldr	r3, [pc, #244]	; (a274 <StartFilesystemAndTest+0x274>)
    a180:	4798      	blx	r3
    a182:	0003      	movs	r3, r0
    a184:	001a      	movs	r2, r3
    a186:	4b34      	ldr	r3, [pc, #208]	; (a258 <StartFilesystemAndTest+0x258>)
    a188:	701a      	strb	r2, [r3, #0]
		
		if (res != FR_OK)
    a18a:	4b33      	ldr	r3, [pc, #204]	; (a258 <StartFilesystemAndTest+0x258>)
    a18c:	781b      	ldrb	r3, [r3, #0]
    a18e:	2b00      	cmp	r3, #0
    a190:	d011      	beq.n	a1b6 <StartFilesystemAndTest+0x1b6>
		{
			SerialConsoleWriteString("Could not open binary file!\r\n");
    a192:	4b40      	ldr	r3, [pc, #256]	; (a294 <StartFilesystemAndTest+0x294>)
    a194:	0018      	movs	r0, r3
    a196:	4b2b      	ldr	r3, [pc, #172]	; (a244 <StartFilesystemAndTest+0x244>)
    a198:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL] res %d\r\n", res);
    a19a:	4b2f      	ldr	r3, [pc, #188]	; (a258 <StartFilesystemAndTest+0x258>)
    a19c:	781b      	ldrb	r3, [r3, #0]
    a19e:	001a      	movs	r2, r3
    a1a0:	4b2e      	ldr	r3, [pc, #184]	; (a25c <StartFilesystemAndTest+0x25c>)
    a1a2:	0019      	movs	r1, r3
    a1a4:	2000      	movs	r0, #0
    a1a6:	4b2e      	ldr	r3, [pc, #184]	; (a260 <StartFilesystemAndTest+0x260>)
    a1a8:	4798      	blx	r3
			sdCardPass = false;
    a1aa:	2310      	movs	r3, #16
    a1ac:	33ff      	adds	r3, #255	; 0xff
    a1ae:	18fb      	adds	r3, r7, r3
    a1b0:	2200      	movs	r2, #0
    a1b2:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    a1b4:	e02a      	b.n	a20c <StartFilesystemAndTest+0x20c>
		}

		//Write to a binaryfile
		SerialConsoleWriteString("Write to test file (f_write)...\r\n");
    a1b6:	4b38      	ldr	r3, [pc, #224]	; (a298 <StartFilesystemAndTest+0x298>)
    a1b8:	0018      	movs	r0, r3
    a1ba:	4b22      	ldr	r3, [pc, #136]	; (a244 <StartFilesystemAndTest+0x244>)
    a1bc:	4798      	blx	r3
		uint32_t varWrite = 0;
    a1be:	2300      	movs	r3, #0
    a1c0:	603b      	str	r3, [r7, #0]
		if (0 != f_write(&file_object, binbuff,256, &varWrite))
    a1c2:	003c      	movs	r4, r7
    a1c4:	2380      	movs	r3, #128	; 0x80
    a1c6:	005a      	lsls	r2, r3, #1
    a1c8:	1d39      	adds	r1, r7, #4
    a1ca:	4829      	ldr	r0, [pc, #164]	; (a270 <StartFilesystemAndTest+0x270>)
    a1cc:	0023      	movs	r3, r4
    a1ce:	4c33      	ldr	r4, [pc, #204]	; (a29c <StartFilesystemAndTest+0x29c>)
    a1d0:	47a0      	blx	r4
    a1d2:	1e03      	subs	r3, r0, #0
    a1d4:	d00e      	beq.n	a1f4 <StartFilesystemAndTest+0x1f4>
		{
			f_close(&file_object);
    a1d6:	4b26      	ldr	r3, [pc, #152]	; (a270 <StartFilesystemAndTest+0x270>)
    a1d8:	0018      	movs	r0, r3
    a1da:	4b2a      	ldr	r3, [pc, #168]	; (a284 <StartFilesystemAndTest+0x284>)
    a1dc:	4798      	blx	r3
			LogMessage(LOG_INFO_LVL ,"[FAIL]\r\n");
    a1de:	4b2a      	ldr	r3, [pc, #168]	; (a288 <StartFilesystemAndTest+0x288>)
    a1e0:	0019      	movs	r1, r3
    a1e2:	2000      	movs	r0, #0
    a1e4:	4b1e      	ldr	r3, [pc, #120]	; (a260 <StartFilesystemAndTest+0x260>)
    a1e6:	4798      	blx	r3
			sdCardPass = false;
    a1e8:	2310      	movs	r3, #16
    a1ea:	33ff      	adds	r3, #255	; 0xff
    a1ec:	18fb      	adds	r3, r7, r3
    a1ee:	2200      	movs	r2, #0
    a1f0:	701a      	strb	r2, [r3, #0]
			goto main_end_of_test;
    a1f2:	e00b      	b.n	a20c <StartFilesystemAndTest+0x20c>
		}

		SerialConsoleWriteString("[OK]\r\n");
    a1f4:	4b1b      	ldr	r3, [pc, #108]	; (a264 <StartFilesystemAndTest+0x264>)
    a1f6:	0018      	movs	r0, r3
    a1f8:	4b12      	ldr	r3, [pc, #72]	; (a244 <StartFilesystemAndTest+0x244>)
    a1fa:	4798      	blx	r3
		f_close(&file_object); //Close file
    a1fc:	4b1c      	ldr	r3, [pc, #112]	; (a270 <StartFilesystemAndTest+0x270>)
    a1fe:	0018      	movs	r0, r3
    a200:	4b20      	ldr	r3, [pc, #128]	; (a284 <StartFilesystemAndTest+0x284>)
    a202:	4798      	blx	r3
		SerialConsoleWriteString("Test is successful.\n\r");
    a204:	4b21      	ldr	r3, [pc, #132]	; (a28c <StartFilesystemAndTest+0x28c>)
    a206:	0018      	movs	r0, r3
    a208:	4b0e      	ldr	r3, [pc, #56]	; (a244 <StartFilesystemAndTest+0x244>)
    a20a:	4798      	blx	r3
		
		main_end_of_test:
		SerialConsoleWriteString("End of Test.\n\r");
    a20c:	4b24      	ldr	r3, [pc, #144]	; (a2a0 <StartFilesystemAndTest+0x2a0>)
    a20e:	0018      	movs	r0, r3
    a210:	4b0c      	ldr	r3, [pc, #48]	; (a244 <StartFilesystemAndTest+0x244>)
    a212:	4798      	blx	r3
    a214:	e008      	b.n	a228 <StartFilesystemAndTest+0x228>

	}
	else
	{
		SerialConsoleWriteString("SD Card failed initiation! Check connections!\n\r");
    a216:	4b23      	ldr	r3, [pc, #140]	; (a2a4 <StartFilesystemAndTest+0x2a4>)
    a218:	0018      	movs	r0, r3
    a21a:	4b0a      	ldr	r3, [pc, #40]	; (a244 <StartFilesystemAndTest+0x244>)
    a21c:	4798      	blx	r3
		sdCardPass = false;
    a21e:	2310      	movs	r3, #16
    a220:	33ff      	adds	r3, #255	; 0xff
    a222:	18fb      	adds	r3, r7, r3
    a224:	2200      	movs	r2, #0
    a226:	701a      	strb	r2, [r3, #0]
	}

	return sdCardPass;
    a228:	2310      	movs	r3, #16
    a22a:	33ff      	adds	r3, #255	; 0xff
    a22c:	18fb      	adds	r3, r7, r3
    a22e:	781b      	ldrb	r3, [r3, #0]
}
    a230:	0018      	movs	r0, r3
    a232:	46bd      	mov	sp, r7
    a234:	b045      	add	sp, #276	; 0x114
    a236:	bd90      	pop	{r4, r7, pc}
    a238:	fffffef4 	.word	0xfffffef4
    a23c:	000004a5 	.word	0x000004a5
    a240:	0000b65c 	.word	0x0000b65c
    a244:	00000a51 	.word	0x00000a51
    a248:	0000b67c 	.word	0x0000b67c
    a24c:	20000a04 	.word	0x20000a04
    a250:	0000a6bb 	.word	0x0000a6bb
    a254:	000091ed 	.word	0x000091ed
    a258:	20000c8c 	.word	0x20000c8c
    a25c:	0000b698 	.word	0x0000b698
    a260:	00000add 	.word	0x00000add
    a264:	0000b6a8 	.word	0x0000b6a8
    a268:	0000b6b0 	.word	0x0000b6b0
    a26c:	2000000c 	.word	0x2000000c
    a270:	20000c34 	.word	0x20000c34
    a274:	00009245 	.word	0x00009245
    a278:	0000b6cc 	.word	0x0000b6cc
    a27c:	0000b6f0 	.word	0x0000b6f0
    a280:	00009cc9 	.word	0x00009cc9
    a284:	00009c45 	.word	0x00009c45
    a288:	0000b704 	.word	0x0000b704
    a28c:	0000b710 	.word	0x0000b710
    a290:	20000020 	.word	0x20000020
    a294:	0000b728 	.word	0x0000b728
    a298:	0000b748 	.word	0x0000b748
    a29c:	00009775 	.word	0x00009775
    a2a0:	0000b76c 	.word	0x0000b76c
    a2a4:	0000b77c 	.word	0x0000b77c

0000a2a8 <jumpToApplication>:
* @details      Jumps to the main application. Please turn off ALL PERIPHERALS that were turned on by the bootloader
*				before performing the jump!
* @return       
******************************************************************************/
static void jumpToApplication(void)
{
    a2a8:	b580      	push	{r7, lr}
    a2aa:	b082      	sub	sp, #8
    a2ac:	af00      	add	r7, sp, #0
// Function pointer to application section
void (*applicationCodeEntry)(void);

// Rebase stack pointer
__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    a2ae:	2390      	movs	r3, #144	; 0x90
    a2b0:	025b      	lsls	r3, r3, #9
    a2b2:	681b      	ldr	r3, [r3, #0]
    a2b4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    a2b6:	683b      	ldr	r3, [r7, #0]
    a2b8:	f383 8808 	msr	MSP, r3

// Rebase vector table
SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    a2bc:	4b06      	ldr	r3, [pc, #24]	; (a2d8 <jumpToApplication+0x30>)
    a2be:	2290      	movs	r2, #144	; 0x90
    a2c0:	0252      	lsls	r2, r2, #9
    a2c2:	609a      	str	r2, [r3, #8]

// Set pointer to application section
applicationCodeEntry =
(void (*)(void))(unsigned *)(*(unsigned *)(APP_START_RESET_VEC_ADDRESS));
    a2c4:	4b05      	ldr	r3, [pc, #20]	; (a2dc <jumpToApplication+0x34>)
    a2c6:	681b      	ldr	r3, [r3, #0]
applicationCodeEntry =
    a2c8:	607b      	str	r3, [r7, #4]

// Jump to application. By calling applicationCodeEntry() as a function we move the PC to the point in memory pointed by applicationCodeEntry, 
//which should be the start of the main FW.
applicationCodeEntry();
    a2ca:	687b      	ldr	r3, [r7, #4]
    a2cc:	4798      	blx	r3
}
    a2ce:	46c0      	nop			; (mov r8, r8)
    a2d0:	46bd      	mov	sp, r7
    a2d2:	b002      	add	sp, #8
    a2d4:	bd80      	pop	{r7, pc}
    a2d6:	46c0      	nop			; (mov r8, r8)
    a2d8:	e000ed00 	.word	0xe000ed00
    a2dc:	00012004 	.word	0x00012004

0000a2e0 <configure_nvm>:
* @brief        Configures the NVM driver
* @details      
* @return       
******************************************************************************/
static void configure_nvm(void)
{
    a2e0:	b580      	push	{r7, lr}
    a2e2:	b082      	sub	sp, #8
    a2e4:	af00      	add	r7, sp, #0
    struct nvm_config config_nvm;
    nvm_get_config_defaults(&config_nvm);
    a2e6:	003b      	movs	r3, r7
    a2e8:	0018      	movs	r0, r3
    a2ea:	4b06      	ldr	r3, [pc, #24]	; (a304 <configure_nvm+0x24>)
    a2ec:	4798      	blx	r3
    config_nvm.manual_page_write = false;
    a2ee:	003b      	movs	r3, r7
    a2f0:	2200      	movs	r2, #0
    a2f2:	705a      	strb	r2, [r3, #1]
    nvm_set_config(&config_nvm);
    a2f4:	003b      	movs	r3, r7
    a2f6:	0018      	movs	r0, r3
    a2f8:	4b03      	ldr	r3, [pc, #12]	; (a308 <configure_nvm+0x28>)
    a2fa:	4798      	blx	r3
}
    a2fc:	46c0      	nop			; (mov r8, r8)
    a2fe:	46bd      	mov	sp, r7
    a300:	b002      	add	sp, #8
    a302:	bd80      	pop	{r7, pc}
    a304:	00009e99 	.word	0x00009e99
    a308:	000003cd 	.word	0x000003cd

0000a30c <__udivsi3>:
    a30c:	2200      	movs	r2, #0
    a30e:	0843      	lsrs	r3, r0, #1
    a310:	428b      	cmp	r3, r1
    a312:	d374      	bcc.n	a3fe <__udivsi3+0xf2>
    a314:	0903      	lsrs	r3, r0, #4
    a316:	428b      	cmp	r3, r1
    a318:	d35f      	bcc.n	a3da <__udivsi3+0xce>
    a31a:	0a03      	lsrs	r3, r0, #8
    a31c:	428b      	cmp	r3, r1
    a31e:	d344      	bcc.n	a3aa <__udivsi3+0x9e>
    a320:	0b03      	lsrs	r3, r0, #12
    a322:	428b      	cmp	r3, r1
    a324:	d328      	bcc.n	a378 <__udivsi3+0x6c>
    a326:	0c03      	lsrs	r3, r0, #16
    a328:	428b      	cmp	r3, r1
    a32a:	d30d      	bcc.n	a348 <__udivsi3+0x3c>
    a32c:	22ff      	movs	r2, #255	; 0xff
    a32e:	0209      	lsls	r1, r1, #8
    a330:	ba12      	rev	r2, r2
    a332:	0c03      	lsrs	r3, r0, #16
    a334:	428b      	cmp	r3, r1
    a336:	d302      	bcc.n	a33e <__udivsi3+0x32>
    a338:	1212      	asrs	r2, r2, #8
    a33a:	0209      	lsls	r1, r1, #8
    a33c:	d065      	beq.n	a40a <__udivsi3+0xfe>
    a33e:	0b03      	lsrs	r3, r0, #12
    a340:	428b      	cmp	r3, r1
    a342:	d319      	bcc.n	a378 <__udivsi3+0x6c>
    a344:	e000      	b.n	a348 <__udivsi3+0x3c>
    a346:	0a09      	lsrs	r1, r1, #8
    a348:	0bc3      	lsrs	r3, r0, #15
    a34a:	428b      	cmp	r3, r1
    a34c:	d301      	bcc.n	a352 <__udivsi3+0x46>
    a34e:	03cb      	lsls	r3, r1, #15
    a350:	1ac0      	subs	r0, r0, r3
    a352:	4152      	adcs	r2, r2
    a354:	0b83      	lsrs	r3, r0, #14
    a356:	428b      	cmp	r3, r1
    a358:	d301      	bcc.n	a35e <__udivsi3+0x52>
    a35a:	038b      	lsls	r3, r1, #14
    a35c:	1ac0      	subs	r0, r0, r3
    a35e:	4152      	adcs	r2, r2
    a360:	0b43      	lsrs	r3, r0, #13
    a362:	428b      	cmp	r3, r1
    a364:	d301      	bcc.n	a36a <__udivsi3+0x5e>
    a366:	034b      	lsls	r3, r1, #13
    a368:	1ac0      	subs	r0, r0, r3
    a36a:	4152      	adcs	r2, r2
    a36c:	0b03      	lsrs	r3, r0, #12
    a36e:	428b      	cmp	r3, r1
    a370:	d301      	bcc.n	a376 <__udivsi3+0x6a>
    a372:	030b      	lsls	r3, r1, #12
    a374:	1ac0      	subs	r0, r0, r3
    a376:	4152      	adcs	r2, r2
    a378:	0ac3      	lsrs	r3, r0, #11
    a37a:	428b      	cmp	r3, r1
    a37c:	d301      	bcc.n	a382 <__udivsi3+0x76>
    a37e:	02cb      	lsls	r3, r1, #11
    a380:	1ac0      	subs	r0, r0, r3
    a382:	4152      	adcs	r2, r2
    a384:	0a83      	lsrs	r3, r0, #10
    a386:	428b      	cmp	r3, r1
    a388:	d301      	bcc.n	a38e <__udivsi3+0x82>
    a38a:	028b      	lsls	r3, r1, #10
    a38c:	1ac0      	subs	r0, r0, r3
    a38e:	4152      	adcs	r2, r2
    a390:	0a43      	lsrs	r3, r0, #9
    a392:	428b      	cmp	r3, r1
    a394:	d301      	bcc.n	a39a <__udivsi3+0x8e>
    a396:	024b      	lsls	r3, r1, #9
    a398:	1ac0      	subs	r0, r0, r3
    a39a:	4152      	adcs	r2, r2
    a39c:	0a03      	lsrs	r3, r0, #8
    a39e:	428b      	cmp	r3, r1
    a3a0:	d301      	bcc.n	a3a6 <__udivsi3+0x9a>
    a3a2:	020b      	lsls	r3, r1, #8
    a3a4:	1ac0      	subs	r0, r0, r3
    a3a6:	4152      	adcs	r2, r2
    a3a8:	d2cd      	bcs.n	a346 <__udivsi3+0x3a>
    a3aa:	09c3      	lsrs	r3, r0, #7
    a3ac:	428b      	cmp	r3, r1
    a3ae:	d301      	bcc.n	a3b4 <__udivsi3+0xa8>
    a3b0:	01cb      	lsls	r3, r1, #7
    a3b2:	1ac0      	subs	r0, r0, r3
    a3b4:	4152      	adcs	r2, r2
    a3b6:	0983      	lsrs	r3, r0, #6
    a3b8:	428b      	cmp	r3, r1
    a3ba:	d301      	bcc.n	a3c0 <__udivsi3+0xb4>
    a3bc:	018b      	lsls	r3, r1, #6
    a3be:	1ac0      	subs	r0, r0, r3
    a3c0:	4152      	adcs	r2, r2
    a3c2:	0943      	lsrs	r3, r0, #5
    a3c4:	428b      	cmp	r3, r1
    a3c6:	d301      	bcc.n	a3cc <__udivsi3+0xc0>
    a3c8:	014b      	lsls	r3, r1, #5
    a3ca:	1ac0      	subs	r0, r0, r3
    a3cc:	4152      	adcs	r2, r2
    a3ce:	0903      	lsrs	r3, r0, #4
    a3d0:	428b      	cmp	r3, r1
    a3d2:	d301      	bcc.n	a3d8 <__udivsi3+0xcc>
    a3d4:	010b      	lsls	r3, r1, #4
    a3d6:	1ac0      	subs	r0, r0, r3
    a3d8:	4152      	adcs	r2, r2
    a3da:	08c3      	lsrs	r3, r0, #3
    a3dc:	428b      	cmp	r3, r1
    a3de:	d301      	bcc.n	a3e4 <__udivsi3+0xd8>
    a3e0:	00cb      	lsls	r3, r1, #3
    a3e2:	1ac0      	subs	r0, r0, r3
    a3e4:	4152      	adcs	r2, r2
    a3e6:	0883      	lsrs	r3, r0, #2
    a3e8:	428b      	cmp	r3, r1
    a3ea:	d301      	bcc.n	a3f0 <__udivsi3+0xe4>
    a3ec:	008b      	lsls	r3, r1, #2
    a3ee:	1ac0      	subs	r0, r0, r3
    a3f0:	4152      	adcs	r2, r2
    a3f2:	0843      	lsrs	r3, r0, #1
    a3f4:	428b      	cmp	r3, r1
    a3f6:	d301      	bcc.n	a3fc <__udivsi3+0xf0>
    a3f8:	004b      	lsls	r3, r1, #1
    a3fa:	1ac0      	subs	r0, r0, r3
    a3fc:	4152      	adcs	r2, r2
    a3fe:	1a41      	subs	r1, r0, r1
    a400:	d200      	bcs.n	a404 <__udivsi3+0xf8>
    a402:	4601      	mov	r1, r0
    a404:	4152      	adcs	r2, r2
    a406:	4610      	mov	r0, r2
    a408:	4770      	bx	lr
    a40a:	e7ff      	b.n	a40c <__udivsi3+0x100>
    a40c:	b501      	push	{r0, lr}
    a40e:	2000      	movs	r0, #0
    a410:	f000 f8f0 	bl	a5f4 <__aeabi_idiv0>
    a414:	bd02      	pop	{r1, pc}
    a416:	46c0      	nop			; (mov r8, r8)

0000a418 <__aeabi_uidivmod>:
    a418:	2900      	cmp	r1, #0
    a41a:	d0f7      	beq.n	a40c <__udivsi3+0x100>
    a41c:	e776      	b.n	a30c <__udivsi3>
    a41e:	4770      	bx	lr

0000a420 <__divsi3>:
    a420:	4603      	mov	r3, r0
    a422:	430b      	orrs	r3, r1
    a424:	d47f      	bmi.n	a526 <__divsi3+0x106>
    a426:	2200      	movs	r2, #0
    a428:	0843      	lsrs	r3, r0, #1
    a42a:	428b      	cmp	r3, r1
    a42c:	d374      	bcc.n	a518 <__divsi3+0xf8>
    a42e:	0903      	lsrs	r3, r0, #4
    a430:	428b      	cmp	r3, r1
    a432:	d35f      	bcc.n	a4f4 <__divsi3+0xd4>
    a434:	0a03      	lsrs	r3, r0, #8
    a436:	428b      	cmp	r3, r1
    a438:	d344      	bcc.n	a4c4 <__divsi3+0xa4>
    a43a:	0b03      	lsrs	r3, r0, #12
    a43c:	428b      	cmp	r3, r1
    a43e:	d328      	bcc.n	a492 <__divsi3+0x72>
    a440:	0c03      	lsrs	r3, r0, #16
    a442:	428b      	cmp	r3, r1
    a444:	d30d      	bcc.n	a462 <__divsi3+0x42>
    a446:	22ff      	movs	r2, #255	; 0xff
    a448:	0209      	lsls	r1, r1, #8
    a44a:	ba12      	rev	r2, r2
    a44c:	0c03      	lsrs	r3, r0, #16
    a44e:	428b      	cmp	r3, r1
    a450:	d302      	bcc.n	a458 <__divsi3+0x38>
    a452:	1212      	asrs	r2, r2, #8
    a454:	0209      	lsls	r1, r1, #8
    a456:	d065      	beq.n	a524 <__divsi3+0x104>
    a458:	0b03      	lsrs	r3, r0, #12
    a45a:	428b      	cmp	r3, r1
    a45c:	d319      	bcc.n	a492 <__divsi3+0x72>
    a45e:	e000      	b.n	a462 <__divsi3+0x42>
    a460:	0a09      	lsrs	r1, r1, #8
    a462:	0bc3      	lsrs	r3, r0, #15
    a464:	428b      	cmp	r3, r1
    a466:	d301      	bcc.n	a46c <__divsi3+0x4c>
    a468:	03cb      	lsls	r3, r1, #15
    a46a:	1ac0      	subs	r0, r0, r3
    a46c:	4152      	adcs	r2, r2
    a46e:	0b83      	lsrs	r3, r0, #14
    a470:	428b      	cmp	r3, r1
    a472:	d301      	bcc.n	a478 <__divsi3+0x58>
    a474:	038b      	lsls	r3, r1, #14
    a476:	1ac0      	subs	r0, r0, r3
    a478:	4152      	adcs	r2, r2
    a47a:	0b43      	lsrs	r3, r0, #13
    a47c:	428b      	cmp	r3, r1
    a47e:	d301      	bcc.n	a484 <__divsi3+0x64>
    a480:	034b      	lsls	r3, r1, #13
    a482:	1ac0      	subs	r0, r0, r3
    a484:	4152      	adcs	r2, r2
    a486:	0b03      	lsrs	r3, r0, #12
    a488:	428b      	cmp	r3, r1
    a48a:	d301      	bcc.n	a490 <__divsi3+0x70>
    a48c:	030b      	lsls	r3, r1, #12
    a48e:	1ac0      	subs	r0, r0, r3
    a490:	4152      	adcs	r2, r2
    a492:	0ac3      	lsrs	r3, r0, #11
    a494:	428b      	cmp	r3, r1
    a496:	d301      	bcc.n	a49c <__divsi3+0x7c>
    a498:	02cb      	lsls	r3, r1, #11
    a49a:	1ac0      	subs	r0, r0, r3
    a49c:	4152      	adcs	r2, r2
    a49e:	0a83      	lsrs	r3, r0, #10
    a4a0:	428b      	cmp	r3, r1
    a4a2:	d301      	bcc.n	a4a8 <__divsi3+0x88>
    a4a4:	028b      	lsls	r3, r1, #10
    a4a6:	1ac0      	subs	r0, r0, r3
    a4a8:	4152      	adcs	r2, r2
    a4aa:	0a43      	lsrs	r3, r0, #9
    a4ac:	428b      	cmp	r3, r1
    a4ae:	d301      	bcc.n	a4b4 <__divsi3+0x94>
    a4b0:	024b      	lsls	r3, r1, #9
    a4b2:	1ac0      	subs	r0, r0, r3
    a4b4:	4152      	adcs	r2, r2
    a4b6:	0a03      	lsrs	r3, r0, #8
    a4b8:	428b      	cmp	r3, r1
    a4ba:	d301      	bcc.n	a4c0 <__divsi3+0xa0>
    a4bc:	020b      	lsls	r3, r1, #8
    a4be:	1ac0      	subs	r0, r0, r3
    a4c0:	4152      	adcs	r2, r2
    a4c2:	d2cd      	bcs.n	a460 <__divsi3+0x40>
    a4c4:	09c3      	lsrs	r3, r0, #7
    a4c6:	428b      	cmp	r3, r1
    a4c8:	d301      	bcc.n	a4ce <__divsi3+0xae>
    a4ca:	01cb      	lsls	r3, r1, #7
    a4cc:	1ac0      	subs	r0, r0, r3
    a4ce:	4152      	adcs	r2, r2
    a4d0:	0983      	lsrs	r3, r0, #6
    a4d2:	428b      	cmp	r3, r1
    a4d4:	d301      	bcc.n	a4da <__divsi3+0xba>
    a4d6:	018b      	lsls	r3, r1, #6
    a4d8:	1ac0      	subs	r0, r0, r3
    a4da:	4152      	adcs	r2, r2
    a4dc:	0943      	lsrs	r3, r0, #5
    a4de:	428b      	cmp	r3, r1
    a4e0:	d301      	bcc.n	a4e6 <__divsi3+0xc6>
    a4e2:	014b      	lsls	r3, r1, #5
    a4e4:	1ac0      	subs	r0, r0, r3
    a4e6:	4152      	adcs	r2, r2
    a4e8:	0903      	lsrs	r3, r0, #4
    a4ea:	428b      	cmp	r3, r1
    a4ec:	d301      	bcc.n	a4f2 <__divsi3+0xd2>
    a4ee:	010b      	lsls	r3, r1, #4
    a4f0:	1ac0      	subs	r0, r0, r3
    a4f2:	4152      	adcs	r2, r2
    a4f4:	08c3      	lsrs	r3, r0, #3
    a4f6:	428b      	cmp	r3, r1
    a4f8:	d301      	bcc.n	a4fe <__divsi3+0xde>
    a4fa:	00cb      	lsls	r3, r1, #3
    a4fc:	1ac0      	subs	r0, r0, r3
    a4fe:	4152      	adcs	r2, r2
    a500:	0883      	lsrs	r3, r0, #2
    a502:	428b      	cmp	r3, r1
    a504:	d301      	bcc.n	a50a <__divsi3+0xea>
    a506:	008b      	lsls	r3, r1, #2
    a508:	1ac0      	subs	r0, r0, r3
    a50a:	4152      	adcs	r2, r2
    a50c:	0843      	lsrs	r3, r0, #1
    a50e:	428b      	cmp	r3, r1
    a510:	d301      	bcc.n	a516 <__divsi3+0xf6>
    a512:	004b      	lsls	r3, r1, #1
    a514:	1ac0      	subs	r0, r0, r3
    a516:	4152      	adcs	r2, r2
    a518:	1a41      	subs	r1, r0, r1
    a51a:	d200      	bcs.n	a51e <__divsi3+0xfe>
    a51c:	4601      	mov	r1, r0
    a51e:	4152      	adcs	r2, r2
    a520:	4610      	mov	r0, r2
    a522:	4770      	bx	lr
    a524:	e05d      	b.n	a5e2 <__divsi3+0x1c2>
    a526:	0fca      	lsrs	r2, r1, #31
    a528:	d000      	beq.n	a52c <__divsi3+0x10c>
    a52a:	4249      	negs	r1, r1
    a52c:	1003      	asrs	r3, r0, #32
    a52e:	d300      	bcc.n	a532 <__divsi3+0x112>
    a530:	4240      	negs	r0, r0
    a532:	4053      	eors	r3, r2
    a534:	2200      	movs	r2, #0
    a536:	469c      	mov	ip, r3
    a538:	0903      	lsrs	r3, r0, #4
    a53a:	428b      	cmp	r3, r1
    a53c:	d32d      	bcc.n	a59a <__divsi3+0x17a>
    a53e:	0a03      	lsrs	r3, r0, #8
    a540:	428b      	cmp	r3, r1
    a542:	d312      	bcc.n	a56a <__divsi3+0x14a>
    a544:	22fc      	movs	r2, #252	; 0xfc
    a546:	0189      	lsls	r1, r1, #6
    a548:	ba12      	rev	r2, r2
    a54a:	0a03      	lsrs	r3, r0, #8
    a54c:	428b      	cmp	r3, r1
    a54e:	d30c      	bcc.n	a56a <__divsi3+0x14a>
    a550:	0189      	lsls	r1, r1, #6
    a552:	1192      	asrs	r2, r2, #6
    a554:	428b      	cmp	r3, r1
    a556:	d308      	bcc.n	a56a <__divsi3+0x14a>
    a558:	0189      	lsls	r1, r1, #6
    a55a:	1192      	asrs	r2, r2, #6
    a55c:	428b      	cmp	r3, r1
    a55e:	d304      	bcc.n	a56a <__divsi3+0x14a>
    a560:	0189      	lsls	r1, r1, #6
    a562:	d03a      	beq.n	a5da <__divsi3+0x1ba>
    a564:	1192      	asrs	r2, r2, #6
    a566:	e000      	b.n	a56a <__divsi3+0x14a>
    a568:	0989      	lsrs	r1, r1, #6
    a56a:	09c3      	lsrs	r3, r0, #7
    a56c:	428b      	cmp	r3, r1
    a56e:	d301      	bcc.n	a574 <__divsi3+0x154>
    a570:	01cb      	lsls	r3, r1, #7
    a572:	1ac0      	subs	r0, r0, r3
    a574:	4152      	adcs	r2, r2
    a576:	0983      	lsrs	r3, r0, #6
    a578:	428b      	cmp	r3, r1
    a57a:	d301      	bcc.n	a580 <__divsi3+0x160>
    a57c:	018b      	lsls	r3, r1, #6
    a57e:	1ac0      	subs	r0, r0, r3
    a580:	4152      	adcs	r2, r2
    a582:	0943      	lsrs	r3, r0, #5
    a584:	428b      	cmp	r3, r1
    a586:	d301      	bcc.n	a58c <__divsi3+0x16c>
    a588:	014b      	lsls	r3, r1, #5
    a58a:	1ac0      	subs	r0, r0, r3
    a58c:	4152      	adcs	r2, r2
    a58e:	0903      	lsrs	r3, r0, #4
    a590:	428b      	cmp	r3, r1
    a592:	d301      	bcc.n	a598 <__divsi3+0x178>
    a594:	010b      	lsls	r3, r1, #4
    a596:	1ac0      	subs	r0, r0, r3
    a598:	4152      	adcs	r2, r2
    a59a:	08c3      	lsrs	r3, r0, #3
    a59c:	428b      	cmp	r3, r1
    a59e:	d301      	bcc.n	a5a4 <__divsi3+0x184>
    a5a0:	00cb      	lsls	r3, r1, #3
    a5a2:	1ac0      	subs	r0, r0, r3
    a5a4:	4152      	adcs	r2, r2
    a5a6:	0883      	lsrs	r3, r0, #2
    a5a8:	428b      	cmp	r3, r1
    a5aa:	d301      	bcc.n	a5b0 <__divsi3+0x190>
    a5ac:	008b      	lsls	r3, r1, #2
    a5ae:	1ac0      	subs	r0, r0, r3
    a5b0:	4152      	adcs	r2, r2
    a5b2:	d2d9      	bcs.n	a568 <__divsi3+0x148>
    a5b4:	0843      	lsrs	r3, r0, #1
    a5b6:	428b      	cmp	r3, r1
    a5b8:	d301      	bcc.n	a5be <__divsi3+0x19e>
    a5ba:	004b      	lsls	r3, r1, #1
    a5bc:	1ac0      	subs	r0, r0, r3
    a5be:	4152      	adcs	r2, r2
    a5c0:	1a41      	subs	r1, r0, r1
    a5c2:	d200      	bcs.n	a5c6 <__divsi3+0x1a6>
    a5c4:	4601      	mov	r1, r0
    a5c6:	4663      	mov	r3, ip
    a5c8:	4152      	adcs	r2, r2
    a5ca:	105b      	asrs	r3, r3, #1
    a5cc:	4610      	mov	r0, r2
    a5ce:	d301      	bcc.n	a5d4 <__divsi3+0x1b4>
    a5d0:	4240      	negs	r0, r0
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d500      	bpl.n	a5d8 <__divsi3+0x1b8>
    a5d6:	4249      	negs	r1, r1
    a5d8:	4770      	bx	lr
    a5da:	4663      	mov	r3, ip
    a5dc:	105b      	asrs	r3, r3, #1
    a5de:	d300      	bcc.n	a5e2 <__divsi3+0x1c2>
    a5e0:	4240      	negs	r0, r0
    a5e2:	b501      	push	{r0, lr}
    a5e4:	2000      	movs	r0, #0
    a5e6:	f000 f805 	bl	a5f4 <__aeabi_idiv0>
    a5ea:	bd02      	pop	{r1, pc}

0000a5ec <__aeabi_idivmod>:
    a5ec:	2900      	cmp	r1, #0
    a5ee:	d0f8      	beq.n	a5e2 <__divsi3+0x1c2>
    a5f0:	e716      	b.n	a420 <__divsi3>
    a5f2:	4770      	bx	lr

0000a5f4 <__aeabi_idiv0>:
    a5f4:	4770      	bx	lr
    a5f6:	46c0      	nop			; (mov r8, r8)

0000a5f8 <__aeabi_lmul>:
    a5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5fa:	46ce      	mov	lr, r9
    a5fc:	4647      	mov	r7, r8
    a5fe:	0415      	lsls	r5, r2, #16
    a600:	0c2d      	lsrs	r5, r5, #16
    a602:	002e      	movs	r6, r5
    a604:	b580      	push	{r7, lr}
    a606:	0407      	lsls	r7, r0, #16
    a608:	0c14      	lsrs	r4, r2, #16
    a60a:	0c3f      	lsrs	r7, r7, #16
    a60c:	4699      	mov	r9, r3
    a60e:	0c03      	lsrs	r3, r0, #16
    a610:	437e      	muls	r6, r7
    a612:	435d      	muls	r5, r3
    a614:	4367      	muls	r7, r4
    a616:	4363      	muls	r3, r4
    a618:	197f      	adds	r7, r7, r5
    a61a:	0c34      	lsrs	r4, r6, #16
    a61c:	19e4      	adds	r4, r4, r7
    a61e:	469c      	mov	ip, r3
    a620:	42a5      	cmp	r5, r4
    a622:	d903      	bls.n	a62c <__aeabi_lmul+0x34>
    a624:	2380      	movs	r3, #128	; 0x80
    a626:	025b      	lsls	r3, r3, #9
    a628:	4698      	mov	r8, r3
    a62a:	44c4      	add	ip, r8
    a62c:	464b      	mov	r3, r9
    a62e:	4351      	muls	r1, r2
    a630:	4343      	muls	r3, r0
    a632:	0436      	lsls	r6, r6, #16
    a634:	0c36      	lsrs	r6, r6, #16
    a636:	0c25      	lsrs	r5, r4, #16
    a638:	0424      	lsls	r4, r4, #16
    a63a:	4465      	add	r5, ip
    a63c:	19a4      	adds	r4, r4, r6
    a63e:	1859      	adds	r1, r3, r1
    a640:	1949      	adds	r1, r1, r5
    a642:	0020      	movs	r0, r4
    a644:	bc0c      	pop	{r2, r3}
    a646:	4690      	mov	r8, r2
    a648:	4699      	mov	r9, r3
    a64a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a64c <__libc_init_array>:
    a64c:	b570      	push	{r4, r5, r6, lr}
    a64e:	2600      	movs	r6, #0
    a650:	4d0c      	ldr	r5, [pc, #48]	; (a684 <__libc_init_array+0x38>)
    a652:	4c0d      	ldr	r4, [pc, #52]	; (a688 <__libc_init_array+0x3c>)
    a654:	1b64      	subs	r4, r4, r5
    a656:	10a4      	asrs	r4, r4, #2
    a658:	42a6      	cmp	r6, r4
    a65a:	d109      	bne.n	a670 <__libc_init_array+0x24>
    a65c:	2600      	movs	r6, #0
    a65e:	f001 f8d7 	bl	b810 <_init>
    a662:	4d0a      	ldr	r5, [pc, #40]	; (a68c <__libc_init_array+0x40>)
    a664:	4c0a      	ldr	r4, [pc, #40]	; (a690 <__libc_init_array+0x44>)
    a666:	1b64      	subs	r4, r4, r5
    a668:	10a4      	asrs	r4, r4, #2
    a66a:	42a6      	cmp	r6, r4
    a66c:	d105      	bne.n	a67a <__libc_init_array+0x2e>
    a66e:	bd70      	pop	{r4, r5, r6, pc}
    a670:	00b3      	lsls	r3, r6, #2
    a672:	58eb      	ldr	r3, [r5, r3]
    a674:	4798      	blx	r3
    a676:	3601      	adds	r6, #1
    a678:	e7ee      	b.n	a658 <__libc_init_array+0xc>
    a67a:	00b3      	lsls	r3, r6, #2
    a67c:	58eb      	ldr	r3, [r5, r3]
    a67e:	4798      	blx	r3
    a680:	3601      	adds	r6, #1
    a682:	e7f2      	b.n	a66a <__libc_init_array+0x1e>
    a684:	0000b81c 	.word	0x0000b81c
    a688:	0000b81c 	.word	0x0000b81c
    a68c:	0000b81c 	.word	0x0000b81c
    a690:	0000b820 	.word	0x0000b820

0000a694 <malloc>:
    a694:	b510      	push	{r4, lr}
    a696:	4b03      	ldr	r3, [pc, #12]	; (a6a4 <malloc+0x10>)
    a698:	0001      	movs	r1, r0
    a69a:	6818      	ldr	r0, [r3, #0]
    a69c:	f000 f860 	bl	a760 <_malloc_r>
    a6a0:	bd10      	pop	{r4, pc}
    a6a2:	46c0      	nop			; (mov r8, r8)
    a6a4:	20000030 	.word	0x20000030

0000a6a8 <memcpy>:
    a6a8:	2300      	movs	r3, #0
    a6aa:	b510      	push	{r4, lr}
    a6ac:	429a      	cmp	r2, r3
    a6ae:	d100      	bne.n	a6b2 <memcpy+0xa>
    a6b0:	bd10      	pop	{r4, pc}
    a6b2:	5ccc      	ldrb	r4, [r1, r3]
    a6b4:	54c4      	strb	r4, [r0, r3]
    a6b6:	3301      	adds	r3, #1
    a6b8:	e7f8      	b.n	a6ac <memcpy+0x4>

0000a6ba <memset>:
    a6ba:	0003      	movs	r3, r0
    a6bc:	1882      	adds	r2, r0, r2
    a6be:	4293      	cmp	r3, r2
    a6c0:	d100      	bne.n	a6c4 <memset+0xa>
    a6c2:	4770      	bx	lr
    a6c4:	7019      	strb	r1, [r3, #0]
    a6c6:	3301      	adds	r3, #1
    a6c8:	e7f9      	b.n	a6be <memset+0x4>
	...

0000a6cc <_free_r>:
    a6cc:	b570      	push	{r4, r5, r6, lr}
    a6ce:	0005      	movs	r5, r0
    a6d0:	2900      	cmp	r1, #0
    a6d2:	d010      	beq.n	a6f6 <_free_r+0x2a>
    a6d4:	1f0c      	subs	r4, r1, #4
    a6d6:	6823      	ldr	r3, [r4, #0]
    a6d8:	2b00      	cmp	r3, #0
    a6da:	da00      	bge.n	a6de <_free_r+0x12>
    a6dc:	18e4      	adds	r4, r4, r3
    a6de:	0028      	movs	r0, r5
    a6e0:	f000 fb22 	bl	ad28 <__malloc_lock>
    a6e4:	4a1d      	ldr	r2, [pc, #116]	; (a75c <_free_r+0x90>)
    a6e6:	6813      	ldr	r3, [r2, #0]
    a6e8:	2b00      	cmp	r3, #0
    a6ea:	d105      	bne.n	a6f8 <_free_r+0x2c>
    a6ec:	6063      	str	r3, [r4, #4]
    a6ee:	6014      	str	r4, [r2, #0]
    a6f0:	0028      	movs	r0, r5
    a6f2:	f000 fb1a 	bl	ad2a <__malloc_unlock>
    a6f6:	bd70      	pop	{r4, r5, r6, pc}
    a6f8:	42a3      	cmp	r3, r4
    a6fa:	d909      	bls.n	a710 <_free_r+0x44>
    a6fc:	6821      	ldr	r1, [r4, #0]
    a6fe:	1860      	adds	r0, r4, r1
    a700:	4283      	cmp	r3, r0
    a702:	d1f3      	bne.n	a6ec <_free_r+0x20>
    a704:	6818      	ldr	r0, [r3, #0]
    a706:	685b      	ldr	r3, [r3, #4]
    a708:	1841      	adds	r1, r0, r1
    a70a:	6021      	str	r1, [r4, #0]
    a70c:	e7ee      	b.n	a6ec <_free_r+0x20>
    a70e:	0013      	movs	r3, r2
    a710:	685a      	ldr	r2, [r3, #4]
    a712:	2a00      	cmp	r2, #0
    a714:	d001      	beq.n	a71a <_free_r+0x4e>
    a716:	42a2      	cmp	r2, r4
    a718:	d9f9      	bls.n	a70e <_free_r+0x42>
    a71a:	6819      	ldr	r1, [r3, #0]
    a71c:	1858      	adds	r0, r3, r1
    a71e:	42a0      	cmp	r0, r4
    a720:	d10b      	bne.n	a73a <_free_r+0x6e>
    a722:	6820      	ldr	r0, [r4, #0]
    a724:	1809      	adds	r1, r1, r0
    a726:	1858      	adds	r0, r3, r1
    a728:	6019      	str	r1, [r3, #0]
    a72a:	4282      	cmp	r2, r0
    a72c:	d1e0      	bne.n	a6f0 <_free_r+0x24>
    a72e:	6810      	ldr	r0, [r2, #0]
    a730:	6852      	ldr	r2, [r2, #4]
    a732:	1841      	adds	r1, r0, r1
    a734:	6019      	str	r1, [r3, #0]
    a736:	605a      	str	r2, [r3, #4]
    a738:	e7da      	b.n	a6f0 <_free_r+0x24>
    a73a:	42a0      	cmp	r0, r4
    a73c:	d902      	bls.n	a744 <_free_r+0x78>
    a73e:	230c      	movs	r3, #12
    a740:	602b      	str	r3, [r5, #0]
    a742:	e7d5      	b.n	a6f0 <_free_r+0x24>
    a744:	6821      	ldr	r1, [r4, #0]
    a746:	1860      	adds	r0, r4, r1
    a748:	4282      	cmp	r2, r0
    a74a:	d103      	bne.n	a754 <_free_r+0x88>
    a74c:	6810      	ldr	r0, [r2, #0]
    a74e:	6852      	ldr	r2, [r2, #4]
    a750:	1841      	adds	r1, r0, r1
    a752:	6021      	str	r1, [r4, #0]
    a754:	6062      	str	r2, [r4, #4]
    a756:	605c      	str	r4, [r3, #4]
    a758:	e7ca      	b.n	a6f0 <_free_r+0x24>
    a75a:	46c0      	nop			; (mov r8, r8)
    a75c:	20000184 	.word	0x20000184

0000a760 <_malloc_r>:
    a760:	2303      	movs	r3, #3
    a762:	b570      	push	{r4, r5, r6, lr}
    a764:	1ccd      	adds	r5, r1, #3
    a766:	439d      	bics	r5, r3
    a768:	3508      	adds	r5, #8
    a76a:	0006      	movs	r6, r0
    a76c:	2d0c      	cmp	r5, #12
    a76e:	d21e      	bcs.n	a7ae <_malloc_r+0x4e>
    a770:	250c      	movs	r5, #12
    a772:	42a9      	cmp	r1, r5
    a774:	d81d      	bhi.n	a7b2 <_malloc_r+0x52>
    a776:	0030      	movs	r0, r6
    a778:	f000 fad6 	bl	ad28 <__malloc_lock>
    a77c:	4a25      	ldr	r2, [pc, #148]	; (a814 <_malloc_r+0xb4>)
    a77e:	6814      	ldr	r4, [r2, #0]
    a780:	0021      	movs	r1, r4
    a782:	2900      	cmp	r1, #0
    a784:	d119      	bne.n	a7ba <_malloc_r+0x5a>
    a786:	4c24      	ldr	r4, [pc, #144]	; (a818 <_malloc_r+0xb8>)
    a788:	6823      	ldr	r3, [r4, #0]
    a78a:	2b00      	cmp	r3, #0
    a78c:	d103      	bne.n	a796 <_malloc_r+0x36>
    a78e:	0030      	movs	r0, r6
    a790:	f000 f844 	bl	a81c <_sbrk_r>
    a794:	6020      	str	r0, [r4, #0]
    a796:	0029      	movs	r1, r5
    a798:	0030      	movs	r0, r6
    a79a:	f000 f83f 	bl	a81c <_sbrk_r>
    a79e:	1c43      	adds	r3, r0, #1
    a7a0:	d12c      	bne.n	a7fc <_malloc_r+0x9c>
    a7a2:	230c      	movs	r3, #12
    a7a4:	0030      	movs	r0, r6
    a7a6:	6033      	str	r3, [r6, #0]
    a7a8:	f000 fabf 	bl	ad2a <__malloc_unlock>
    a7ac:	e003      	b.n	a7b6 <_malloc_r+0x56>
    a7ae:	2d00      	cmp	r5, #0
    a7b0:	dadf      	bge.n	a772 <_malloc_r+0x12>
    a7b2:	230c      	movs	r3, #12
    a7b4:	6033      	str	r3, [r6, #0]
    a7b6:	2000      	movs	r0, #0
    a7b8:	bd70      	pop	{r4, r5, r6, pc}
    a7ba:	680b      	ldr	r3, [r1, #0]
    a7bc:	1b5b      	subs	r3, r3, r5
    a7be:	d41a      	bmi.n	a7f6 <_malloc_r+0x96>
    a7c0:	2b0b      	cmp	r3, #11
    a7c2:	d903      	bls.n	a7cc <_malloc_r+0x6c>
    a7c4:	600b      	str	r3, [r1, #0]
    a7c6:	18cc      	adds	r4, r1, r3
    a7c8:	6025      	str	r5, [r4, #0]
    a7ca:	e003      	b.n	a7d4 <_malloc_r+0x74>
    a7cc:	428c      	cmp	r4, r1
    a7ce:	d10e      	bne.n	a7ee <_malloc_r+0x8e>
    a7d0:	6863      	ldr	r3, [r4, #4]
    a7d2:	6013      	str	r3, [r2, #0]
    a7d4:	0030      	movs	r0, r6
    a7d6:	f000 faa8 	bl	ad2a <__malloc_unlock>
    a7da:	0020      	movs	r0, r4
    a7dc:	2207      	movs	r2, #7
    a7de:	300b      	adds	r0, #11
    a7e0:	1d23      	adds	r3, r4, #4
    a7e2:	4390      	bics	r0, r2
    a7e4:	1ac3      	subs	r3, r0, r3
    a7e6:	d0e7      	beq.n	a7b8 <_malloc_r+0x58>
    a7e8:	425a      	negs	r2, r3
    a7ea:	50e2      	str	r2, [r4, r3]
    a7ec:	e7e4      	b.n	a7b8 <_malloc_r+0x58>
    a7ee:	684b      	ldr	r3, [r1, #4]
    a7f0:	6063      	str	r3, [r4, #4]
    a7f2:	000c      	movs	r4, r1
    a7f4:	e7ee      	b.n	a7d4 <_malloc_r+0x74>
    a7f6:	000c      	movs	r4, r1
    a7f8:	6849      	ldr	r1, [r1, #4]
    a7fa:	e7c2      	b.n	a782 <_malloc_r+0x22>
    a7fc:	2303      	movs	r3, #3
    a7fe:	1cc4      	adds	r4, r0, #3
    a800:	439c      	bics	r4, r3
    a802:	42a0      	cmp	r0, r4
    a804:	d0e0      	beq.n	a7c8 <_malloc_r+0x68>
    a806:	1a21      	subs	r1, r4, r0
    a808:	0030      	movs	r0, r6
    a80a:	f000 f807 	bl	a81c <_sbrk_r>
    a80e:	1c43      	adds	r3, r0, #1
    a810:	d1da      	bne.n	a7c8 <_malloc_r+0x68>
    a812:	e7c6      	b.n	a7a2 <_malloc_r+0x42>
    a814:	20000184 	.word	0x20000184
    a818:	20000188 	.word	0x20000188

0000a81c <_sbrk_r>:
    a81c:	2300      	movs	r3, #0
    a81e:	b570      	push	{r4, r5, r6, lr}
    a820:	4c06      	ldr	r4, [pc, #24]	; (a83c <_sbrk_r+0x20>)
    a822:	0005      	movs	r5, r0
    a824:	0008      	movs	r0, r1
    a826:	6023      	str	r3, [r4, #0]
    a828:	f7fc f928 	bl	6a7c <_sbrk>
    a82c:	1c43      	adds	r3, r0, #1
    a82e:	d103      	bne.n	a838 <_sbrk_r+0x1c>
    a830:	6823      	ldr	r3, [r4, #0]
    a832:	2b00      	cmp	r3, #0
    a834:	d000      	beq.n	a838 <_sbrk_r+0x1c>
    a836:	602b      	str	r3, [r5, #0]
    a838:	bd70      	pop	{r4, r5, r6, pc}
    a83a:	46c0      	nop			; (mov r8, r8)
    a83c:	20000c90 	.word	0x20000c90

0000a840 <setbuf>:
    a840:	424a      	negs	r2, r1
    a842:	414a      	adcs	r2, r1
    a844:	2380      	movs	r3, #128	; 0x80
    a846:	b510      	push	{r4, lr}
    a848:	0052      	lsls	r2, r2, #1
    a84a:	00db      	lsls	r3, r3, #3
    a84c:	f000 f802 	bl	a854 <setvbuf>
    a850:	bd10      	pop	{r4, pc}
	...

0000a854 <setvbuf>:
    a854:	b5f0      	push	{r4, r5, r6, r7, lr}
    a856:	001d      	movs	r5, r3
    a858:	4b4f      	ldr	r3, [pc, #316]	; (a998 <setvbuf+0x144>)
    a85a:	b085      	sub	sp, #20
    a85c:	681e      	ldr	r6, [r3, #0]
    a85e:	0004      	movs	r4, r0
    a860:	000f      	movs	r7, r1
    a862:	9200      	str	r2, [sp, #0]
    a864:	2e00      	cmp	r6, #0
    a866:	d005      	beq.n	a874 <setvbuf+0x20>
    a868:	69b3      	ldr	r3, [r6, #24]
    a86a:	2b00      	cmp	r3, #0
    a86c:	d102      	bne.n	a874 <setvbuf+0x20>
    a86e:	0030      	movs	r0, r6
    a870:	f000 f99c 	bl	abac <__sinit>
    a874:	4b49      	ldr	r3, [pc, #292]	; (a99c <setvbuf+0x148>)
    a876:	429c      	cmp	r4, r3
    a878:	d150      	bne.n	a91c <setvbuf+0xc8>
    a87a:	6874      	ldr	r4, [r6, #4]
    a87c:	9b00      	ldr	r3, [sp, #0]
    a87e:	2b02      	cmp	r3, #2
    a880:	d005      	beq.n	a88e <setvbuf+0x3a>
    a882:	2b01      	cmp	r3, #1
    a884:	d900      	bls.n	a888 <setvbuf+0x34>
    a886:	e084      	b.n	a992 <setvbuf+0x13e>
    a888:	2d00      	cmp	r5, #0
    a88a:	da00      	bge.n	a88e <setvbuf+0x3a>
    a88c:	e081      	b.n	a992 <setvbuf+0x13e>
    a88e:	0021      	movs	r1, r4
    a890:	0030      	movs	r0, r6
    a892:	f000 f91d 	bl	aad0 <_fflush_r>
    a896:	6b61      	ldr	r1, [r4, #52]	; 0x34
    a898:	2900      	cmp	r1, #0
    a89a:	d008      	beq.n	a8ae <setvbuf+0x5a>
    a89c:	0023      	movs	r3, r4
    a89e:	3344      	adds	r3, #68	; 0x44
    a8a0:	4299      	cmp	r1, r3
    a8a2:	d002      	beq.n	a8aa <setvbuf+0x56>
    a8a4:	0030      	movs	r0, r6
    a8a6:	f7ff ff11 	bl	a6cc <_free_r>
    a8aa:	2300      	movs	r3, #0
    a8ac:	6363      	str	r3, [r4, #52]	; 0x34
    a8ae:	2300      	movs	r3, #0
    a8b0:	61a3      	str	r3, [r4, #24]
    a8b2:	6063      	str	r3, [r4, #4]
    a8b4:	89a3      	ldrh	r3, [r4, #12]
    a8b6:	061b      	lsls	r3, r3, #24
    a8b8:	d503      	bpl.n	a8c2 <setvbuf+0x6e>
    a8ba:	6921      	ldr	r1, [r4, #16]
    a8bc:	0030      	movs	r0, r6
    a8be:	f7ff ff05 	bl	a6cc <_free_r>
    a8c2:	89a3      	ldrh	r3, [r4, #12]
    a8c4:	4a36      	ldr	r2, [pc, #216]	; (a9a0 <setvbuf+0x14c>)
    a8c6:	4013      	ands	r3, r2
    a8c8:	81a3      	strh	r3, [r4, #12]
    a8ca:	9b00      	ldr	r3, [sp, #0]
    a8cc:	2b02      	cmp	r3, #2
    a8ce:	d05a      	beq.n	a986 <setvbuf+0x132>
    a8d0:	ab03      	add	r3, sp, #12
    a8d2:	aa02      	add	r2, sp, #8
    a8d4:	0021      	movs	r1, r4
    a8d6:	0030      	movs	r0, r6
    a8d8:	f000 f9fe 	bl	acd8 <__swhatbuf_r>
    a8dc:	89a3      	ldrh	r3, [r4, #12]
    a8de:	4318      	orrs	r0, r3
    a8e0:	81a0      	strh	r0, [r4, #12]
    a8e2:	2d00      	cmp	r5, #0
    a8e4:	d124      	bne.n	a930 <setvbuf+0xdc>
    a8e6:	9d02      	ldr	r5, [sp, #8]
    a8e8:	0028      	movs	r0, r5
    a8ea:	f7ff fed3 	bl	a694 <malloc>
    a8ee:	9501      	str	r5, [sp, #4]
    a8f0:	1e07      	subs	r7, r0, #0
    a8f2:	d142      	bne.n	a97a <setvbuf+0x126>
    a8f4:	9b02      	ldr	r3, [sp, #8]
    a8f6:	9301      	str	r3, [sp, #4]
    a8f8:	42ab      	cmp	r3, r5
    a8fa:	d139      	bne.n	a970 <setvbuf+0x11c>
    a8fc:	2001      	movs	r0, #1
    a8fe:	4240      	negs	r0, r0
    a900:	2302      	movs	r3, #2
    a902:	89a2      	ldrh	r2, [r4, #12]
    a904:	4313      	orrs	r3, r2
    a906:	81a3      	strh	r3, [r4, #12]
    a908:	2300      	movs	r3, #0
    a90a:	60a3      	str	r3, [r4, #8]
    a90c:	0023      	movs	r3, r4
    a90e:	3347      	adds	r3, #71	; 0x47
    a910:	6023      	str	r3, [r4, #0]
    a912:	6123      	str	r3, [r4, #16]
    a914:	2301      	movs	r3, #1
    a916:	6163      	str	r3, [r4, #20]
    a918:	b005      	add	sp, #20
    a91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a91c:	4b21      	ldr	r3, [pc, #132]	; (a9a4 <setvbuf+0x150>)
    a91e:	429c      	cmp	r4, r3
    a920:	d101      	bne.n	a926 <setvbuf+0xd2>
    a922:	68b4      	ldr	r4, [r6, #8]
    a924:	e7aa      	b.n	a87c <setvbuf+0x28>
    a926:	4b20      	ldr	r3, [pc, #128]	; (a9a8 <setvbuf+0x154>)
    a928:	429c      	cmp	r4, r3
    a92a:	d1a7      	bne.n	a87c <setvbuf+0x28>
    a92c:	68f4      	ldr	r4, [r6, #12]
    a92e:	e7a5      	b.n	a87c <setvbuf+0x28>
    a930:	2f00      	cmp	r7, #0
    a932:	d0d9      	beq.n	a8e8 <setvbuf+0x94>
    a934:	69b3      	ldr	r3, [r6, #24]
    a936:	2b00      	cmp	r3, #0
    a938:	d102      	bne.n	a940 <setvbuf+0xec>
    a93a:	0030      	movs	r0, r6
    a93c:	f000 f936 	bl	abac <__sinit>
    a940:	9b00      	ldr	r3, [sp, #0]
    a942:	2b01      	cmp	r3, #1
    a944:	d103      	bne.n	a94e <setvbuf+0xfa>
    a946:	89a3      	ldrh	r3, [r4, #12]
    a948:	9a00      	ldr	r2, [sp, #0]
    a94a:	431a      	orrs	r2, r3
    a94c:	81a2      	strh	r2, [r4, #12]
    a94e:	2008      	movs	r0, #8
    a950:	89a3      	ldrh	r3, [r4, #12]
    a952:	6027      	str	r7, [r4, #0]
    a954:	6127      	str	r7, [r4, #16]
    a956:	6165      	str	r5, [r4, #20]
    a958:	4018      	ands	r0, r3
    a95a:	d018      	beq.n	a98e <setvbuf+0x13a>
    a95c:	2001      	movs	r0, #1
    a95e:	4018      	ands	r0, r3
    a960:	2300      	movs	r3, #0
    a962:	4298      	cmp	r0, r3
    a964:	d011      	beq.n	a98a <setvbuf+0x136>
    a966:	426d      	negs	r5, r5
    a968:	60a3      	str	r3, [r4, #8]
    a96a:	61a5      	str	r5, [r4, #24]
    a96c:	0018      	movs	r0, r3
    a96e:	e7d3      	b.n	a918 <setvbuf+0xc4>
    a970:	9801      	ldr	r0, [sp, #4]
    a972:	f7ff fe8f 	bl	a694 <malloc>
    a976:	1e07      	subs	r7, r0, #0
    a978:	d0c0      	beq.n	a8fc <setvbuf+0xa8>
    a97a:	2380      	movs	r3, #128	; 0x80
    a97c:	89a2      	ldrh	r2, [r4, #12]
    a97e:	9d01      	ldr	r5, [sp, #4]
    a980:	4313      	orrs	r3, r2
    a982:	81a3      	strh	r3, [r4, #12]
    a984:	e7d6      	b.n	a934 <setvbuf+0xe0>
    a986:	2000      	movs	r0, #0
    a988:	e7ba      	b.n	a900 <setvbuf+0xac>
    a98a:	60a5      	str	r5, [r4, #8]
    a98c:	e7c4      	b.n	a918 <setvbuf+0xc4>
    a98e:	60a0      	str	r0, [r4, #8]
    a990:	e7c2      	b.n	a918 <setvbuf+0xc4>
    a992:	2001      	movs	r0, #1
    a994:	4240      	negs	r0, r0
    a996:	e7bf      	b.n	a918 <setvbuf+0xc4>
    a998:	20000030 	.word	0x20000030
    a99c:	0000b7d0 	.word	0x0000b7d0
    a9a0:	fffff35c 	.word	0xfffff35c
    a9a4:	0000b7f0 	.word	0x0000b7f0
    a9a8:	0000b7b0 	.word	0x0000b7b0

0000a9ac <strlen>:
    a9ac:	2300      	movs	r3, #0
    a9ae:	5cc2      	ldrb	r2, [r0, r3]
    a9b0:	3301      	adds	r3, #1
    a9b2:	2a00      	cmp	r2, #0
    a9b4:	d1fb      	bne.n	a9ae <strlen+0x2>
    a9b6:	1e58      	subs	r0, r3, #1
    a9b8:	4770      	bx	lr
	...

0000a9bc <__sflush_r>:
    a9bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a9be:	898a      	ldrh	r2, [r1, #12]
    a9c0:	0005      	movs	r5, r0
    a9c2:	000c      	movs	r4, r1
    a9c4:	0713      	lsls	r3, r2, #28
    a9c6:	d460      	bmi.n	aa8a <__sflush_r+0xce>
    a9c8:	684b      	ldr	r3, [r1, #4]
    a9ca:	2b00      	cmp	r3, #0
    a9cc:	dc04      	bgt.n	a9d8 <__sflush_r+0x1c>
    a9ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    a9d0:	2b00      	cmp	r3, #0
    a9d2:	dc01      	bgt.n	a9d8 <__sflush_r+0x1c>
    a9d4:	2000      	movs	r0, #0
    a9d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    a9d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    a9da:	2f00      	cmp	r7, #0
    a9dc:	d0fa      	beq.n	a9d4 <__sflush_r+0x18>
    a9de:	2300      	movs	r3, #0
    a9e0:	682e      	ldr	r6, [r5, #0]
    a9e2:	602b      	str	r3, [r5, #0]
    a9e4:	2380      	movs	r3, #128	; 0x80
    a9e6:	015b      	lsls	r3, r3, #5
    a9e8:	401a      	ands	r2, r3
    a9ea:	d034      	beq.n	aa56 <__sflush_r+0x9a>
    a9ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
    a9ee:	89a3      	ldrh	r3, [r4, #12]
    a9f0:	075b      	lsls	r3, r3, #29
    a9f2:	d506      	bpl.n	aa02 <__sflush_r+0x46>
    a9f4:	6863      	ldr	r3, [r4, #4]
    a9f6:	1ac0      	subs	r0, r0, r3
    a9f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    a9fa:	2b00      	cmp	r3, #0
    a9fc:	d001      	beq.n	aa02 <__sflush_r+0x46>
    a9fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    aa00:	1ac0      	subs	r0, r0, r3
    aa02:	0002      	movs	r2, r0
    aa04:	6a21      	ldr	r1, [r4, #32]
    aa06:	2300      	movs	r3, #0
    aa08:	0028      	movs	r0, r5
    aa0a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    aa0c:	47b8      	blx	r7
    aa0e:	89a1      	ldrh	r1, [r4, #12]
    aa10:	1c43      	adds	r3, r0, #1
    aa12:	d106      	bne.n	aa22 <__sflush_r+0x66>
    aa14:	682b      	ldr	r3, [r5, #0]
    aa16:	2b1d      	cmp	r3, #29
    aa18:	d831      	bhi.n	aa7e <__sflush_r+0xc2>
    aa1a:	4a2c      	ldr	r2, [pc, #176]	; (aacc <__sflush_r+0x110>)
    aa1c:	40da      	lsrs	r2, r3
    aa1e:	07d3      	lsls	r3, r2, #31
    aa20:	d52d      	bpl.n	aa7e <__sflush_r+0xc2>
    aa22:	2300      	movs	r3, #0
    aa24:	6063      	str	r3, [r4, #4]
    aa26:	6923      	ldr	r3, [r4, #16]
    aa28:	6023      	str	r3, [r4, #0]
    aa2a:	04cb      	lsls	r3, r1, #19
    aa2c:	d505      	bpl.n	aa3a <__sflush_r+0x7e>
    aa2e:	1c43      	adds	r3, r0, #1
    aa30:	d102      	bne.n	aa38 <__sflush_r+0x7c>
    aa32:	682b      	ldr	r3, [r5, #0]
    aa34:	2b00      	cmp	r3, #0
    aa36:	d100      	bne.n	aa3a <__sflush_r+0x7e>
    aa38:	6560      	str	r0, [r4, #84]	; 0x54
    aa3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
    aa3c:	602e      	str	r6, [r5, #0]
    aa3e:	2900      	cmp	r1, #0
    aa40:	d0c8      	beq.n	a9d4 <__sflush_r+0x18>
    aa42:	0023      	movs	r3, r4
    aa44:	3344      	adds	r3, #68	; 0x44
    aa46:	4299      	cmp	r1, r3
    aa48:	d002      	beq.n	aa50 <__sflush_r+0x94>
    aa4a:	0028      	movs	r0, r5
    aa4c:	f7ff fe3e 	bl	a6cc <_free_r>
    aa50:	2000      	movs	r0, #0
    aa52:	6360      	str	r0, [r4, #52]	; 0x34
    aa54:	e7bf      	b.n	a9d6 <__sflush_r+0x1a>
    aa56:	2301      	movs	r3, #1
    aa58:	6a21      	ldr	r1, [r4, #32]
    aa5a:	0028      	movs	r0, r5
    aa5c:	47b8      	blx	r7
    aa5e:	1c43      	adds	r3, r0, #1
    aa60:	d1c5      	bne.n	a9ee <__sflush_r+0x32>
    aa62:	682b      	ldr	r3, [r5, #0]
    aa64:	2b00      	cmp	r3, #0
    aa66:	d0c2      	beq.n	a9ee <__sflush_r+0x32>
    aa68:	2b1d      	cmp	r3, #29
    aa6a:	d001      	beq.n	aa70 <__sflush_r+0xb4>
    aa6c:	2b16      	cmp	r3, #22
    aa6e:	d101      	bne.n	aa74 <__sflush_r+0xb8>
    aa70:	602e      	str	r6, [r5, #0]
    aa72:	e7af      	b.n	a9d4 <__sflush_r+0x18>
    aa74:	2340      	movs	r3, #64	; 0x40
    aa76:	89a2      	ldrh	r2, [r4, #12]
    aa78:	4313      	orrs	r3, r2
    aa7a:	81a3      	strh	r3, [r4, #12]
    aa7c:	e7ab      	b.n	a9d6 <__sflush_r+0x1a>
    aa7e:	2340      	movs	r3, #64	; 0x40
    aa80:	430b      	orrs	r3, r1
    aa82:	2001      	movs	r0, #1
    aa84:	81a3      	strh	r3, [r4, #12]
    aa86:	4240      	negs	r0, r0
    aa88:	e7a5      	b.n	a9d6 <__sflush_r+0x1a>
    aa8a:	690f      	ldr	r7, [r1, #16]
    aa8c:	2f00      	cmp	r7, #0
    aa8e:	d0a1      	beq.n	a9d4 <__sflush_r+0x18>
    aa90:	680b      	ldr	r3, [r1, #0]
    aa92:	600f      	str	r7, [r1, #0]
    aa94:	1bdb      	subs	r3, r3, r7
    aa96:	9301      	str	r3, [sp, #4]
    aa98:	2300      	movs	r3, #0
    aa9a:	0792      	lsls	r2, r2, #30
    aa9c:	d100      	bne.n	aaa0 <__sflush_r+0xe4>
    aa9e:	694b      	ldr	r3, [r1, #20]
    aaa0:	60a3      	str	r3, [r4, #8]
    aaa2:	9b01      	ldr	r3, [sp, #4]
    aaa4:	2b00      	cmp	r3, #0
    aaa6:	dc00      	bgt.n	aaaa <__sflush_r+0xee>
    aaa8:	e794      	b.n	a9d4 <__sflush_r+0x18>
    aaaa:	9b01      	ldr	r3, [sp, #4]
    aaac:	003a      	movs	r2, r7
    aaae:	6a21      	ldr	r1, [r4, #32]
    aab0:	0028      	movs	r0, r5
    aab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    aab4:	47b0      	blx	r6
    aab6:	2800      	cmp	r0, #0
    aab8:	dc03      	bgt.n	aac2 <__sflush_r+0x106>
    aaba:	2340      	movs	r3, #64	; 0x40
    aabc:	89a2      	ldrh	r2, [r4, #12]
    aabe:	4313      	orrs	r3, r2
    aac0:	e7df      	b.n	aa82 <__sflush_r+0xc6>
    aac2:	9b01      	ldr	r3, [sp, #4]
    aac4:	183f      	adds	r7, r7, r0
    aac6:	1a1b      	subs	r3, r3, r0
    aac8:	9301      	str	r3, [sp, #4]
    aaca:	e7ea      	b.n	aaa2 <__sflush_r+0xe6>
    aacc:	20400001 	.word	0x20400001

0000aad0 <_fflush_r>:
    aad0:	690b      	ldr	r3, [r1, #16]
    aad2:	b570      	push	{r4, r5, r6, lr}
    aad4:	0005      	movs	r5, r0
    aad6:	000c      	movs	r4, r1
    aad8:	2b00      	cmp	r3, #0
    aada:	d101      	bne.n	aae0 <_fflush_r+0x10>
    aadc:	2000      	movs	r0, #0
    aade:	bd70      	pop	{r4, r5, r6, pc}
    aae0:	2800      	cmp	r0, #0
    aae2:	d004      	beq.n	aaee <_fflush_r+0x1e>
    aae4:	6983      	ldr	r3, [r0, #24]
    aae6:	2b00      	cmp	r3, #0
    aae8:	d101      	bne.n	aaee <_fflush_r+0x1e>
    aaea:	f000 f85f 	bl	abac <__sinit>
    aaee:	4b0b      	ldr	r3, [pc, #44]	; (ab1c <_fflush_r+0x4c>)
    aaf0:	429c      	cmp	r4, r3
    aaf2:	d109      	bne.n	ab08 <_fflush_r+0x38>
    aaf4:	686c      	ldr	r4, [r5, #4]
    aaf6:	220c      	movs	r2, #12
    aaf8:	5ea3      	ldrsh	r3, [r4, r2]
    aafa:	2b00      	cmp	r3, #0
    aafc:	d0ee      	beq.n	aadc <_fflush_r+0xc>
    aafe:	0021      	movs	r1, r4
    ab00:	0028      	movs	r0, r5
    ab02:	f7ff ff5b 	bl	a9bc <__sflush_r>
    ab06:	e7ea      	b.n	aade <_fflush_r+0xe>
    ab08:	4b05      	ldr	r3, [pc, #20]	; (ab20 <_fflush_r+0x50>)
    ab0a:	429c      	cmp	r4, r3
    ab0c:	d101      	bne.n	ab12 <_fflush_r+0x42>
    ab0e:	68ac      	ldr	r4, [r5, #8]
    ab10:	e7f1      	b.n	aaf6 <_fflush_r+0x26>
    ab12:	4b04      	ldr	r3, [pc, #16]	; (ab24 <_fflush_r+0x54>)
    ab14:	429c      	cmp	r4, r3
    ab16:	d1ee      	bne.n	aaf6 <_fflush_r+0x26>
    ab18:	68ec      	ldr	r4, [r5, #12]
    ab1a:	e7ec      	b.n	aaf6 <_fflush_r+0x26>
    ab1c:	0000b7d0 	.word	0x0000b7d0
    ab20:	0000b7f0 	.word	0x0000b7f0
    ab24:	0000b7b0 	.word	0x0000b7b0

0000ab28 <_cleanup_r>:
    ab28:	b510      	push	{r4, lr}
    ab2a:	4902      	ldr	r1, [pc, #8]	; (ab34 <_cleanup_r+0xc>)
    ab2c:	f000 f8b2 	bl	ac94 <_fwalk_reent>
    ab30:	bd10      	pop	{r4, pc}
    ab32:	46c0      	nop			; (mov r8, r8)
    ab34:	0000aad1 	.word	0x0000aad1

0000ab38 <std.isra.0>:
    ab38:	2300      	movs	r3, #0
    ab3a:	b510      	push	{r4, lr}
    ab3c:	0004      	movs	r4, r0
    ab3e:	6003      	str	r3, [r0, #0]
    ab40:	6043      	str	r3, [r0, #4]
    ab42:	6083      	str	r3, [r0, #8]
    ab44:	8181      	strh	r1, [r0, #12]
    ab46:	6643      	str	r3, [r0, #100]	; 0x64
    ab48:	81c2      	strh	r2, [r0, #14]
    ab4a:	6103      	str	r3, [r0, #16]
    ab4c:	6143      	str	r3, [r0, #20]
    ab4e:	6183      	str	r3, [r0, #24]
    ab50:	0019      	movs	r1, r3
    ab52:	2208      	movs	r2, #8
    ab54:	305c      	adds	r0, #92	; 0x5c
    ab56:	f7ff fdb0 	bl	a6ba <memset>
    ab5a:	4b05      	ldr	r3, [pc, #20]	; (ab70 <std.isra.0+0x38>)
    ab5c:	6224      	str	r4, [r4, #32]
    ab5e:	6263      	str	r3, [r4, #36]	; 0x24
    ab60:	4b04      	ldr	r3, [pc, #16]	; (ab74 <std.isra.0+0x3c>)
    ab62:	62a3      	str	r3, [r4, #40]	; 0x28
    ab64:	4b04      	ldr	r3, [pc, #16]	; (ab78 <std.isra.0+0x40>)
    ab66:	62e3      	str	r3, [r4, #44]	; 0x2c
    ab68:	4b04      	ldr	r3, [pc, #16]	; (ab7c <std.isra.0+0x44>)
    ab6a:	6323      	str	r3, [r4, #48]	; 0x30
    ab6c:	bd10      	pop	{r4, pc}
    ab6e:	46c0      	nop			; (mov r8, r8)
    ab70:	0000ad2d 	.word	0x0000ad2d
    ab74:	0000ad55 	.word	0x0000ad55
    ab78:	0000ad8d 	.word	0x0000ad8d
    ab7c:	0000adb9 	.word	0x0000adb9

0000ab80 <__sfmoreglue>:
    ab80:	b570      	push	{r4, r5, r6, lr}
    ab82:	2568      	movs	r5, #104	; 0x68
    ab84:	1e4a      	subs	r2, r1, #1
    ab86:	4355      	muls	r5, r2
    ab88:	000e      	movs	r6, r1
    ab8a:	0029      	movs	r1, r5
    ab8c:	3174      	adds	r1, #116	; 0x74
    ab8e:	f7ff fde7 	bl	a760 <_malloc_r>
    ab92:	1e04      	subs	r4, r0, #0
    ab94:	d008      	beq.n	aba8 <__sfmoreglue+0x28>
    ab96:	2100      	movs	r1, #0
    ab98:	002a      	movs	r2, r5
    ab9a:	6001      	str	r1, [r0, #0]
    ab9c:	6046      	str	r6, [r0, #4]
    ab9e:	300c      	adds	r0, #12
    aba0:	60a0      	str	r0, [r4, #8]
    aba2:	3268      	adds	r2, #104	; 0x68
    aba4:	f7ff fd89 	bl	a6ba <memset>
    aba8:	0020      	movs	r0, r4
    abaa:	bd70      	pop	{r4, r5, r6, pc}

0000abac <__sinit>:
    abac:	6983      	ldr	r3, [r0, #24]
    abae:	b513      	push	{r0, r1, r4, lr}
    abb0:	0004      	movs	r4, r0
    abb2:	2b00      	cmp	r3, #0
    abb4:	d128      	bne.n	ac08 <__sinit+0x5c>
    abb6:	6483      	str	r3, [r0, #72]	; 0x48
    abb8:	64c3      	str	r3, [r0, #76]	; 0x4c
    abba:	6503      	str	r3, [r0, #80]	; 0x50
    abbc:	4b13      	ldr	r3, [pc, #76]	; (ac0c <__sinit+0x60>)
    abbe:	4a14      	ldr	r2, [pc, #80]	; (ac10 <__sinit+0x64>)
    abc0:	681b      	ldr	r3, [r3, #0]
    abc2:	6282      	str	r2, [r0, #40]	; 0x28
    abc4:	9301      	str	r3, [sp, #4]
    abc6:	4298      	cmp	r0, r3
    abc8:	d101      	bne.n	abce <__sinit+0x22>
    abca:	2301      	movs	r3, #1
    abcc:	6183      	str	r3, [r0, #24]
    abce:	0020      	movs	r0, r4
    abd0:	f000 f820 	bl	ac14 <__sfp>
    abd4:	6060      	str	r0, [r4, #4]
    abd6:	0020      	movs	r0, r4
    abd8:	f000 f81c 	bl	ac14 <__sfp>
    abdc:	60a0      	str	r0, [r4, #8]
    abde:	0020      	movs	r0, r4
    abe0:	f000 f818 	bl	ac14 <__sfp>
    abe4:	2200      	movs	r2, #0
    abe6:	60e0      	str	r0, [r4, #12]
    abe8:	2104      	movs	r1, #4
    abea:	6860      	ldr	r0, [r4, #4]
    abec:	f7ff ffa4 	bl	ab38 <std.isra.0>
    abf0:	2201      	movs	r2, #1
    abf2:	2109      	movs	r1, #9
    abf4:	68a0      	ldr	r0, [r4, #8]
    abf6:	f7ff ff9f 	bl	ab38 <std.isra.0>
    abfa:	2202      	movs	r2, #2
    abfc:	2112      	movs	r1, #18
    abfe:	68e0      	ldr	r0, [r4, #12]
    ac00:	f7ff ff9a 	bl	ab38 <std.isra.0>
    ac04:	2301      	movs	r3, #1
    ac06:	61a3      	str	r3, [r4, #24]
    ac08:	bd13      	pop	{r0, r1, r4, pc}
    ac0a:	46c0      	nop			; (mov r8, r8)
    ac0c:	0000b7ac 	.word	0x0000b7ac
    ac10:	0000ab29 	.word	0x0000ab29

0000ac14 <__sfp>:
    ac14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac16:	4b1e      	ldr	r3, [pc, #120]	; (ac90 <__sfp+0x7c>)
    ac18:	0007      	movs	r7, r0
    ac1a:	681e      	ldr	r6, [r3, #0]
    ac1c:	69b3      	ldr	r3, [r6, #24]
    ac1e:	2b00      	cmp	r3, #0
    ac20:	d102      	bne.n	ac28 <__sfp+0x14>
    ac22:	0030      	movs	r0, r6
    ac24:	f7ff ffc2 	bl	abac <__sinit>
    ac28:	3648      	adds	r6, #72	; 0x48
    ac2a:	68b4      	ldr	r4, [r6, #8]
    ac2c:	6873      	ldr	r3, [r6, #4]
    ac2e:	3b01      	subs	r3, #1
    ac30:	d504      	bpl.n	ac3c <__sfp+0x28>
    ac32:	6833      	ldr	r3, [r6, #0]
    ac34:	2b00      	cmp	r3, #0
    ac36:	d007      	beq.n	ac48 <__sfp+0x34>
    ac38:	6836      	ldr	r6, [r6, #0]
    ac3a:	e7f6      	b.n	ac2a <__sfp+0x16>
    ac3c:	220c      	movs	r2, #12
    ac3e:	5ea5      	ldrsh	r5, [r4, r2]
    ac40:	2d00      	cmp	r5, #0
    ac42:	d00d      	beq.n	ac60 <__sfp+0x4c>
    ac44:	3468      	adds	r4, #104	; 0x68
    ac46:	e7f2      	b.n	ac2e <__sfp+0x1a>
    ac48:	2104      	movs	r1, #4
    ac4a:	0038      	movs	r0, r7
    ac4c:	f7ff ff98 	bl	ab80 <__sfmoreglue>
    ac50:	6030      	str	r0, [r6, #0]
    ac52:	2800      	cmp	r0, #0
    ac54:	d1f0      	bne.n	ac38 <__sfp+0x24>
    ac56:	230c      	movs	r3, #12
    ac58:	0004      	movs	r4, r0
    ac5a:	603b      	str	r3, [r7, #0]
    ac5c:	0020      	movs	r0, r4
    ac5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac60:	2301      	movs	r3, #1
    ac62:	0020      	movs	r0, r4
    ac64:	425b      	negs	r3, r3
    ac66:	81e3      	strh	r3, [r4, #14]
    ac68:	3302      	adds	r3, #2
    ac6a:	81a3      	strh	r3, [r4, #12]
    ac6c:	6665      	str	r5, [r4, #100]	; 0x64
    ac6e:	6025      	str	r5, [r4, #0]
    ac70:	60a5      	str	r5, [r4, #8]
    ac72:	6065      	str	r5, [r4, #4]
    ac74:	6125      	str	r5, [r4, #16]
    ac76:	6165      	str	r5, [r4, #20]
    ac78:	61a5      	str	r5, [r4, #24]
    ac7a:	2208      	movs	r2, #8
    ac7c:	0029      	movs	r1, r5
    ac7e:	305c      	adds	r0, #92	; 0x5c
    ac80:	f7ff fd1b 	bl	a6ba <memset>
    ac84:	6365      	str	r5, [r4, #52]	; 0x34
    ac86:	63a5      	str	r5, [r4, #56]	; 0x38
    ac88:	64a5      	str	r5, [r4, #72]	; 0x48
    ac8a:	64e5      	str	r5, [r4, #76]	; 0x4c
    ac8c:	e7e6      	b.n	ac5c <__sfp+0x48>
    ac8e:	46c0      	nop			; (mov r8, r8)
    ac90:	0000b7ac 	.word	0x0000b7ac

0000ac94 <_fwalk_reent>:
    ac94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ac96:	0004      	movs	r4, r0
    ac98:	0007      	movs	r7, r0
    ac9a:	2600      	movs	r6, #0
    ac9c:	9101      	str	r1, [sp, #4]
    ac9e:	3448      	adds	r4, #72	; 0x48
    aca0:	2c00      	cmp	r4, #0
    aca2:	d101      	bne.n	aca8 <_fwalk_reent+0x14>
    aca4:	0030      	movs	r0, r6
    aca6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    aca8:	6863      	ldr	r3, [r4, #4]
    acaa:	68a5      	ldr	r5, [r4, #8]
    acac:	9300      	str	r3, [sp, #0]
    acae:	9b00      	ldr	r3, [sp, #0]
    acb0:	3b01      	subs	r3, #1
    acb2:	9300      	str	r3, [sp, #0]
    acb4:	d501      	bpl.n	acba <_fwalk_reent+0x26>
    acb6:	6824      	ldr	r4, [r4, #0]
    acb8:	e7f2      	b.n	aca0 <_fwalk_reent+0xc>
    acba:	89ab      	ldrh	r3, [r5, #12]
    acbc:	2b01      	cmp	r3, #1
    acbe:	d908      	bls.n	acd2 <_fwalk_reent+0x3e>
    acc0:	220e      	movs	r2, #14
    acc2:	5eab      	ldrsh	r3, [r5, r2]
    acc4:	3301      	adds	r3, #1
    acc6:	d004      	beq.n	acd2 <_fwalk_reent+0x3e>
    acc8:	0029      	movs	r1, r5
    acca:	0038      	movs	r0, r7
    accc:	9b01      	ldr	r3, [sp, #4]
    acce:	4798      	blx	r3
    acd0:	4306      	orrs	r6, r0
    acd2:	3568      	adds	r5, #104	; 0x68
    acd4:	e7eb      	b.n	acae <_fwalk_reent+0x1a>
	...

0000acd8 <__swhatbuf_r>:
    acd8:	b570      	push	{r4, r5, r6, lr}
    acda:	000e      	movs	r6, r1
    acdc:	001d      	movs	r5, r3
    acde:	230e      	movs	r3, #14
    ace0:	5ec9      	ldrsh	r1, [r1, r3]
    ace2:	b090      	sub	sp, #64	; 0x40
    ace4:	0014      	movs	r4, r2
    ace6:	2900      	cmp	r1, #0
    ace8:	da07      	bge.n	acfa <__swhatbuf_r+0x22>
    acea:	2300      	movs	r3, #0
    acec:	602b      	str	r3, [r5, #0]
    acee:	89b3      	ldrh	r3, [r6, #12]
    acf0:	061b      	lsls	r3, r3, #24
    acf2:	d411      	bmi.n	ad18 <__swhatbuf_r+0x40>
    acf4:	2380      	movs	r3, #128	; 0x80
    acf6:	00db      	lsls	r3, r3, #3
    acf8:	e00f      	b.n	ad1a <__swhatbuf_r+0x42>
    acfa:	aa01      	add	r2, sp, #4
    acfc:	f000 f888 	bl	ae10 <_fstat_r>
    ad00:	2800      	cmp	r0, #0
    ad02:	dbf2      	blt.n	acea <__swhatbuf_r+0x12>
    ad04:	22f0      	movs	r2, #240	; 0xf0
    ad06:	9b02      	ldr	r3, [sp, #8]
    ad08:	0212      	lsls	r2, r2, #8
    ad0a:	4013      	ands	r3, r2
    ad0c:	4a05      	ldr	r2, [pc, #20]	; (ad24 <__swhatbuf_r+0x4c>)
    ad0e:	189b      	adds	r3, r3, r2
    ad10:	425a      	negs	r2, r3
    ad12:	4153      	adcs	r3, r2
    ad14:	602b      	str	r3, [r5, #0]
    ad16:	e7ed      	b.n	acf4 <__swhatbuf_r+0x1c>
    ad18:	2340      	movs	r3, #64	; 0x40
    ad1a:	2000      	movs	r0, #0
    ad1c:	6023      	str	r3, [r4, #0]
    ad1e:	b010      	add	sp, #64	; 0x40
    ad20:	bd70      	pop	{r4, r5, r6, pc}
    ad22:	46c0      	nop			; (mov r8, r8)
    ad24:	ffffe000 	.word	0xffffe000

0000ad28 <__malloc_lock>:
    ad28:	4770      	bx	lr

0000ad2a <__malloc_unlock>:
    ad2a:	4770      	bx	lr

0000ad2c <__sread>:
    ad2c:	b570      	push	{r4, r5, r6, lr}
    ad2e:	000c      	movs	r4, r1
    ad30:	250e      	movs	r5, #14
    ad32:	5f49      	ldrsh	r1, [r1, r5]
    ad34:	f000 f892 	bl	ae5c <_read_r>
    ad38:	2800      	cmp	r0, #0
    ad3a:	db03      	blt.n	ad44 <__sread+0x18>
    ad3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    ad3e:	181b      	adds	r3, r3, r0
    ad40:	6563      	str	r3, [r4, #84]	; 0x54
    ad42:	bd70      	pop	{r4, r5, r6, pc}
    ad44:	89a3      	ldrh	r3, [r4, #12]
    ad46:	4a02      	ldr	r2, [pc, #8]	; (ad50 <__sread+0x24>)
    ad48:	4013      	ands	r3, r2
    ad4a:	81a3      	strh	r3, [r4, #12]
    ad4c:	e7f9      	b.n	ad42 <__sread+0x16>
    ad4e:	46c0      	nop			; (mov r8, r8)
    ad50:	ffffefff 	.word	0xffffefff

0000ad54 <__swrite>:
    ad54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ad56:	001f      	movs	r7, r3
    ad58:	898b      	ldrh	r3, [r1, #12]
    ad5a:	0005      	movs	r5, r0
    ad5c:	000c      	movs	r4, r1
    ad5e:	0016      	movs	r6, r2
    ad60:	05db      	lsls	r3, r3, #23
    ad62:	d505      	bpl.n	ad70 <__swrite+0x1c>
    ad64:	230e      	movs	r3, #14
    ad66:	5ec9      	ldrsh	r1, [r1, r3]
    ad68:	2200      	movs	r2, #0
    ad6a:	2302      	movs	r3, #2
    ad6c:	f000 f862 	bl	ae34 <_lseek_r>
    ad70:	89a3      	ldrh	r3, [r4, #12]
    ad72:	4a05      	ldr	r2, [pc, #20]	; (ad88 <__swrite+0x34>)
    ad74:	0028      	movs	r0, r5
    ad76:	4013      	ands	r3, r2
    ad78:	81a3      	strh	r3, [r4, #12]
    ad7a:	0032      	movs	r2, r6
    ad7c:	230e      	movs	r3, #14
    ad7e:	5ee1      	ldrsh	r1, [r4, r3]
    ad80:	003b      	movs	r3, r7
    ad82:	f000 f81f 	bl	adc4 <_write_r>
    ad86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ad88:	ffffefff 	.word	0xffffefff

0000ad8c <__sseek>:
    ad8c:	b570      	push	{r4, r5, r6, lr}
    ad8e:	000c      	movs	r4, r1
    ad90:	250e      	movs	r5, #14
    ad92:	5f49      	ldrsh	r1, [r1, r5]
    ad94:	f000 f84e 	bl	ae34 <_lseek_r>
    ad98:	89a3      	ldrh	r3, [r4, #12]
    ad9a:	1c42      	adds	r2, r0, #1
    ad9c:	d103      	bne.n	ada6 <__sseek+0x1a>
    ad9e:	4a05      	ldr	r2, [pc, #20]	; (adb4 <__sseek+0x28>)
    ada0:	4013      	ands	r3, r2
    ada2:	81a3      	strh	r3, [r4, #12]
    ada4:	bd70      	pop	{r4, r5, r6, pc}
    ada6:	2280      	movs	r2, #128	; 0x80
    ada8:	0152      	lsls	r2, r2, #5
    adaa:	4313      	orrs	r3, r2
    adac:	81a3      	strh	r3, [r4, #12]
    adae:	6560      	str	r0, [r4, #84]	; 0x54
    adb0:	e7f8      	b.n	ada4 <__sseek+0x18>
    adb2:	46c0      	nop			; (mov r8, r8)
    adb4:	ffffefff 	.word	0xffffefff

0000adb8 <__sclose>:
    adb8:	b510      	push	{r4, lr}
    adba:	230e      	movs	r3, #14
    adbc:	5ec9      	ldrsh	r1, [r1, r3]
    adbe:	f000 f815 	bl	adec <_close_r>
    adc2:	bd10      	pop	{r4, pc}

0000adc4 <_write_r>:
    adc4:	b570      	push	{r4, r5, r6, lr}
    adc6:	0005      	movs	r5, r0
    adc8:	0008      	movs	r0, r1
    adca:	0011      	movs	r1, r2
    adcc:	2200      	movs	r2, #0
    adce:	4c06      	ldr	r4, [pc, #24]	; (ade8 <_write_r+0x24>)
    add0:	6022      	str	r2, [r4, #0]
    add2:	001a      	movs	r2, r3
    add4:	f7fb fe1c 	bl	6a10 <_write>
    add8:	1c43      	adds	r3, r0, #1
    adda:	d103      	bne.n	ade4 <_write_r+0x20>
    addc:	6823      	ldr	r3, [r4, #0]
    adde:	2b00      	cmp	r3, #0
    ade0:	d000      	beq.n	ade4 <_write_r+0x20>
    ade2:	602b      	str	r3, [r5, #0]
    ade4:	bd70      	pop	{r4, r5, r6, pc}
    ade6:	46c0      	nop			; (mov r8, r8)
    ade8:	20000c90 	.word	0x20000c90

0000adec <_close_r>:
    adec:	2300      	movs	r3, #0
    adee:	b570      	push	{r4, r5, r6, lr}
    adf0:	4c06      	ldr	r4, [pc, #24]	; (ae0c <_close_r+0x20>)
    adf2:	0005      	movs	r5, r0
    adf4:	0008      	movs	r0, r1
    adf6:	6023      	str	r3, [r4, #0]
    adf8:	f7fb fe5e 	bl	6ab8 <_close>
    adfc:	1c43      	adds	r3, r0, #1
    adfe:	d103      	bne.n	ae08 <_close_r+0x1c>
    ae00:	6823      	ldr	r3, [r4, #0]
    ae02:	2b00      	cmp	r3, #0
    ae04:	d000      	beq.n	ae08 <_close_r+0x1c>
    ae06:	602b      	str	r3, [r5, #0]
    ae08:	bd70      	pop	{r4, r5, r6, pc}
    ae0a:	46c0      	nop			; (mov r8, r8)
    ae0c:	20000c90 	.word	0x20000c90

0000ae10 <_fstat_r>:
    ae10:	2300      	movs	r3, #0
    ae12:	b570      	push	{r4, r5, r6, lr}
    ae14:	4c06      	ldr	r4, [pc, #24]	; (ae30 <_fstat_r+0x20>)
    ae16:	0005      	movs	r5, r0
    ae18:	0008      	movs	r0, r1
    ae1a:	0011      	movs	r1, r2
    ae1c:	6023      	str	r3, [r4, #0]
    ae1e:	f7fb fe55 	bl	6acc <_fstat>
    ae22:	1c43      	adds	r3, r0, #1
    ae24:	d103      	bne.n	ae2e <_fstat_r+0x1e>
    ae26:	6823      	ldr	r3, [r4, #0]
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d000      	beq.n	ae2e <_fstat_r+0x1e>
    ae2c:	602b      	str	r3, [r5, #0]
    ae2e:	bd70      	pop	{r4, r5, r6, pc}
    ae30:	20000c90 	.word	0x20000c90

0000ae34 <_lseek_r>:
    ae34:	b570      	push	{r4, r5, r6, lr}
    ae36:	0005      	movs	r5, r0
    ae38:	0008      	movs	r0, r1
    ae3a:	0011      	movs	r1, r2
    ae3c:	2200      	movs	r2, #0
    ae3e:	4c06      	ldr	r4, [pc, #24]	; (ae58 <_lseek_r+0x24>)
    ae40:	6022      	str	r2, [r4, #0]
    ae42:	001a      	movs	r2, r3
    ae44:	f7fb fe50 	bl	6ae8 <_lseek>
    ae48:	1c43      	adds	r3, r0, #1
    ae4a:	d103      	bne.n	ae54 <_lseek_r+0x20>
    ae4c:	6823      	ldr	r3, [r4, #0]
    ae4e:	2b00      	cmp	r3, #0
    ae50:	d000      	beq.n	ae54 <_lseek_r+0x20>
    ae52:	602b      	str	r3, [r5, #0]
    ae54:	bd70      	pop	{r4, r5, r6, pc}
    ae56:	46c0      	nop			; (mov r8, r8)
    ae58:	20000c90 	.word	0x20000c90

0000ae5c <_read_r>:
    ae5c:	b570      	push	{r4, r5, r6, lr}
    ae5e:	0005      	movs	r5, r0
    ae60:	0008      	movs	r0, r1
    ae62:	0011      	movs	r1, r2
    ae64:	2200      	movs	r2, #0
    ae66:	4c06      	ldr	r4, [pc, #24]	; (ae80 <_read_r+0x24>)
    ae68:	6022      	str	r2, [r4, #0]
    ae6a:	001a      	movs	r2, r3
    ae6c:	f7fb fda6 	bl	69bc <_read>
    ae70:	1c43      	adds	r3, r0, #1
    ae72:	d103      	bne.n	ae7c <_read_r+0x20>
    ae74:	6823      	ldr	r3, [r4, #0]
    ae76:	2b00      	cmp	r3, #0
    ae78:	d000      	beq.n	ae7c <_read_r+0x20>
    ae7a:	602b      	str	r3, [r5, #0]
    ae7c:	bd70      	pop	{r4, r5, r6, pc}
    ae7e:	46c0      	nop			; (mov r8, r8)
    ae80:	20000c90 	.word	0x20000c90

0000ae84 <sd_mmc_trans_units>:
    ae84:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

0000aea0 <sd_trans_multipliers>:
    aea0:	00000000 0000000a 0000000c 0000000d     ................
    aeb0:	0000000f 00000014 00000019 0000001e     ................
    aec0:	00000023 00000028 0000002d 00000032     #...(...-...2...
    aed0:	00000037 0000003c 00000046 00000050     7...<...F...P...

0000aee0 <mmc_trans_multipliers>:
    aee0:	00000000 0000000a 0000000c 0000000d     ................
    aef0:	0000000f 00000014 0000001a 0000001e     ................
    af00:	00000023 00000028 0000002d 00000034     #...(...-...4...
    af10:	00000037 0000003c 00000046 00000050     7...<...F...P...
    af20:	2f445322 20434d4d 64726143 6f6c5320     "SD/MMC Card Slo
    af30:	22302074 00000000                       t 0"....

0000af38 <lun_desc>:
    af38:	00001e25 00001e7d 00001ec9 00001f15     %...}...........
    af48:	00001f45 00001fc9 00002059 0000af20     E.......Y .. ...
    af58:	42000800 42000c00 42001000 42001400     ...B...B...B...B
    af68:	42001800 42001c00 0c0b0a09 00000e0d     ...B...B........
    af78:	00005b3a 00005bb4 00005bb4 00005b58     :[...[...[..X[..
    af88:	00005b52 00005b5e 00005b40 00005b64     R[..^[..@[..d[..
    af98:	00005b9a 00005e80 00005ed0 00005ed0     .[...^...^...^..
    afa8:	00005ecc 00005e72 00005e92 00005e62     .^..r^...^..b^..
    afb8:	00005ea4 00005eb6 00005f1e 00005f4c     .^...^..._..L_..
    afc8:	00005f4c 00005f48 00005f18 00005f24     L_..H_..._..$_..
    afd8:	00005f12 00005f2a 00005f30              ._..*_..0_..

0000afe4 <LfnOfs>:
    afe4:	07050301 12100e09 1c181614 0000001e     ................
    aff4:	3c3a2a22 7f7c3f3e 00000000 3d3b2c2b     "*:<>?|.....+,;=
    b004:	00005d5b 4d90feeb 534f4453 00302e35     [].....MSDOS5.0.
    b014:	4e204f4e 20454d41 46202020 32335441     NO NAME    FAT32
    b024:	00202020 4e204f4e 20454d41 46202020        .NO NAME    F
    b034:	20205441 00202020                       AT     .

0000b03c <excvt.4558>:
    b03c:	b6909a80 808fb78e d8d4d3d2 8f8eded7     ................
    b04c:	e2929290 ebeae399 9d9a9959 9f9e9d9c     ........Y.......
    b05c:	e9e0d6b5 a7a6a5a5 abaaa9a8 afae21ac     .............!..
    b06c:	b3b2b1b0 b7b6b5b4 bbbab9b8 bfbebdbc     ................
    b07c:	c3c2c1c0 c7c7c5c4 cbcac9c8 cfcecdcc     ................
    b08c:	d3d2d1d0 d7d6d5d4 dbdad9d8 dfdedddc     ................
    b09c:	e3e2e1e0 e7e6e5e5 ebeae9e7 efeeeded     ................
    b0ac:	f3f2f1f0 f7f6f5f4 fbfaf9f8 fffefdfc     ................

0000b0bc <Tbl>:
    b0bc:	00fc00c7 00e200e9 00e000e4 00e700e5     ................
    b0cc:	00eb00ea 00ef00e8 00ec00ee 00c500c4     ................
    b0dc:	00e600c9 00f400c6 00f200f6 00f900fb     ................
    b0ec:	00d600ff 00f800dc 00d800a3 019200d7     ................
    b0fc:	00ed00e1 00fa00f3 00d100f1 00ba00aa     ................
    b10c:	00ae00bf 00bd00ac 00a100bc 00bb00ab     ................
    b11c:	25922591 25022593 00c12524 00c000c2     .%.%.%.%$%......
    b12c:	256300a9 25572551 00a2255d 251000a5     ..c%Q%W%]%.....%
    b13c:	25342514 251c252c 253c2500 00c300e3     .%4%,%.%.%<%....
    b14c:	2554255a 25662569 25502560 00a4256c     Z%T%i%f%`%P%l%..
    b15c:	00d000f0 00cb00ca 013100c8 00ce00cd     ..........1.....
    b16c:	251800cf 2588250c 00a62584 258000cc     ...%.%.%.%.....%
    b17c:	00df00d3 00d200d4 00d500f5 00fe00b5     ................
    b18c:	00da00de 00d900db 00dd00fd 00b400af     ................
    b19c:	00b100ad 00be2017 00a700b6 00b800f7     ..... ..........
    b1ac:	00a800b0 00b900b7 00b200b3 00a025a0     .............%..

0000b1bc <tbl_lower.4308>:
    b1bc:	00620061 00640063 00660065 00680067     a.b.c.d.e.f.g.h.
    b1cc:	006a0069 006c006b 006e006d 0070006f     i.j.k.l.m.n.o.p.
    b1dc:	00720071 00740073 00760075 00780077     q.r.s.t.u.v.w.x.
    b1ec:	007a0079 00a200a1 00a500a3 00af00ac     y.z.............
    b1fc:	00e100e0 00e300e2 00e500e4 00e700e6     ................
    b20c:	00e900e8 00eb00ea 00ed00ec 00ef00ee     ................
    b21c:	00f100f0 00f300f2 00f500f4 00f800f6     ................
    b22c:	00fa00f9 00fc00fb 00fe00fd 010100ff     ................
    b23c:	01050103 01090107 010d010b 0111010f     ................
    b24c:	01150113 01190117 011d011b 0121011f     ..............!.
    b25c:	01250123 01290127 012d012b 0131012f     #.%.'.).+.-./.1.
    b26c:	01350133 013a0137 013e013c 01420140     3.5.7.:.<.>.@.B.
    b27c:	01460144 014b0148 014f014d 01530151     D.F.H.K.M.O.Q.S.
    b28c:	01570155 015b0159 015f015d 01630161     U.W.Y.[.]._.a.c.
    b29c:	01670165 016b0169 016f016d 01730171     e.g.i.k.m.o.q.s.
    b2ac:	01770175 017c017a 0192017e 03b203b1     u.w.z.|.~.......
    b2bc:	03b403b3 03b603b5 03b803b7 03ba03b9     ................
    b2cc:	03bc03bb 03be03bd 03c003bf 03c303c1     ................
    b2dc:	03c503c4 03c703c6 03c903c8 043003ca     ..............0.
    b2ec:	04320431 04340433 04360435 04380437     1.2.3.4.5.6.7.8.
    b2fc:	043a0439 043c043b 043e043d 0440043f     9.:.;.<.=.>.?.@.
    b30c:	04420441 04440443 04460445 04480447     A.B.C.D.E.F.G.H.
    b31c:	044a0449 044c044b 044e044d 0451044f     I.J.K.L.M.N.O.Q.
    b32c:	04530452 04550454 04570456 04590458     R.S.T.U.V.W.X.Y.
    b33c:	045b045a 045e045c 2170045f 21722171     Z.[.\.^._.p!q!r!
    b34c:	21742173 21762175 21782177 217a2179     s!t!u!v!w!x!y!z!
    b35c:	217c217b 217e217d ff41217f ff43ff42     {!|!}!~!.!A.B.C.
    b36c:	ff45ff44 ff47ff46 ff49ff48 ff4bff4a     D.E.F.G.H.I.J.K.
    b37c:	ff4dff4c ff4fff4e ff51ff50 ff53ff52     L.M.N.O.P.Q.R.S.
    b38c:	ff55ff54 ff57ff56 ff59ff58 0000ff5a     T.U.V.W.X.Y.Z...

0000b39c <tbl_upper.4309>:
    b39c:	00420041 00440043 00460045 00480047     A.B.C.D.E.F.G.H.
    b3ac:	004a0049 004c004b 004e004d 0050004f     I.J.K.L.M.N.O.P.
    b3bc:	00520051 00540053 00560055 00580057     Q.R.S.T.U.V.W.X.
    b3cc:	005a0059 ffe00021 ffe5ffe1 ffe3ffe2     Y.Z.!...........
    b3dc:	00c100c0 00c300c2 00c500c4 00c700c6     ................
    b3ec:	00c900c8 00cb00ca 00cd00cc 00cf00ce     ................
    b3fc:	00d100d0 00d300d2 00d500d4 00d800d6     ................
    b40c:	00da00d9 00dc00db 00de00dd 01000178     ............x...
    b41c:	01040102 01080106 010c010a 0110010e     ................
    b42c:	01140112 01180116 011c011a 0120011e     .............. .
    b43c:	01240122 01280126 012c012a 0130012e     ".$.&.(.*.,...0.
    b44c:	01340132 01390136 013d013b 0141013f     2.4.6.9.;.=.?.A.
    b45c:	01450143 014a0147 014e014c 01520150     C.E.G.J.L.N.P.R.
    b46c:	01560154 015a0158 015e015c 01620160     T.V.X.Z.\.^.`.b.
    b47c:	01660164 016a0168 016e016c 01720170     d.f.h.j.l.n.p.r.
    b48c:	01760174 017b0179 0191017d 03920391     t.v.y.{.}.......
    b49c:	03940393 03960395 03980397 039a0399     ................
    b4ac:	039c039b 039e039d 03a0039f 03a303a1     ................
    b4bc:	03a503a4 03a703a6 03a903a8 041003aa     ................
    b4cc:	04120411 04140413 04160415 04180417     ................
    b4dc:	041a0419 041c041b 041e041d 0420041f     .............. .
    b4ec:	04220421 04240423 04260425 04280427     !.".#.$.%.&.'.(.
    b4fc:	042a0429 042c042b 042e042d 0401042f     ).*.+.,.-.../...
    b50c:	04030402 04050404 04070406 04090408     ................
    b51c:	040b040a 040e040c 2160040f 21622161     ..........`!a!b!
    b52c:	21642163 21662165 21682167 216a2169     c!d!e!f!g!h!i!j!
    b53c:	216c216b 216e216d ff21216f ff23ff22     k!l!m!n!o!!.".#.
    b54c:	ff25ff24 ff27ff26 ff29ff28 ff2bff2a     $.%.&.'.(.).*.+.
    b55c:	ff2dff2c ff2fff2e ff31ff30 ff33ff32     ,.-.../.0.1.2.3.
    b56c:	ff35ff34 ff37ff36 ff39ff38 0000ff3a     4.5.6.7.8.9.:...
    b57c:	35455345 2d203631 544e4520 42205245     ESE516 - ENTER B
    b58c:	4c544f4f 4544414f 00000052 2d0d0a0c     OOTLOADER......-
    b59c:	4453202d 434d4d2f 72614320 78452064     - SD/MMC Card Ex
    b5ac:	6c706d61 6e6f2065 74614620 2d207346     ample on FatFs -
    b5bc:	000d0a2d 43204453 20445241 6c696166     -...SD CARD fail
    b5cc:	20216465 63656843 6f79206b 63207275     ed! Check your c
    b5dc:	656e6e6f 6f697463 202e736e 74737953     onnections. Syst
    b5ec:	77206d65 206c6c69 74736572 20747261     em will restart 
    b5fc:	35206e69 63657320 73646e6f 002e2e2e     in 5 seconds....
    b60c:	43204453 20445241 6e756f6d 75732074     SD CARD mount su
    b61c:	73656363 46202173 73656c69 65747379     ccess! Filesyste
    b62c:	6c61206d 6d206f73 746e756f 202e6465     m also mounted. 
    b63c:	00000a0d 35455345 2d203631 49584520     ....ESE516 - EXI
    b64c:	4f422054 4f4c544f 52454441 00000000     T BOOTLOADER....
    b65c:	43204453 20647261 74696e69 65746169     SD Card initiate
    b66c:	6f632064 63657272 21796c74 00000d0a     d correctly!....
    b67c:	6e756f4d 69642074 28206b73 6f6d5f66     Mount disk (f_mo
    b68c:	29746e75 0d2e2e2e 0000000a 4941465b     unt)........[FAI
    b69c:	72205d4c 25207365 000a0d64 5d4b4f5b     L] res %d...[OK]
    b6ac:	00000a0d 61657243 61206574 6c696620     ....Create a fil
    b6bc:	66282065 65706f5f 2e2e296e 000a0d2e     e (f_open)......
    b6cc:	74697257 6f742065 73657420 69662074     Write to test fi
    b6dc:	2820656c 75705f66 2e297374 0a0d2e2e     le (f_puts).....
    b6ec:	00000000 74736554 2f445320 20434d4d     ....Test SD/MMC 
    b6fc:	63617473 00000a6b 4941465b 0a0d5d4c     stack...[FAIL]..
    b70c:	00000000 74736554 20736920 63637573     ....Test is succ
    b71c:	66737365 0a2e6c75 0000000d 6c756f43     essful......Coul
    b72c:	6f6e2064 706f2074 62206e65 72616e69     d not open binar
    b73c:	69662079 0d21656c 0000000a 74697257     y file!.....Writ
    b74c:	6f742065 73657420 69662074 2820656c     e to test file (
    b75c:	72775f66 29657469 0d2e2e2e 0000000a     f_write)........
    b76c:	20646e45 5420666f 2e747365 00000d0a     End of Test.....
    b77c:	43204453 20647261 6c696166 69206465     SD Card failed i
    b78c:	6974696e 6f697461 4320216e 6b636568     nitiation! Check
    b79c:	6e6f6320 7463656e 736e6f69 000d0a21      connections!...

0000b7ac <_global_impure_ptr>:
    b7ac:	20000034                                4.. 

0000b7b0 <__sf_fake_stderr>:
	...

0000b7d0 <__sf_fake_stdin>:
	...

0000b7f0 <__sf_fake_stdout>:
	...

0000b810 <_init>:
    b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b812:	46c0      	nop			; (mov r8, r8)
    b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b816:	bc08      	pop	{r3}
    b818:	469e      	mov	lr, r3
    b81a:	4770      	bx	lr

0000b81c <__init_array_start>:
    b81c:	000000dd 	.word	0x000000dd

0000b820 <_fini>:
    b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b822:	46c0      	nop			; (mov r8, r8)
    b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b826:	bc08      	pop	{r3}
    b828:	469e      	mov	lr, r3
    b82a:	4770      	bx	lr

0000b82c <__fini_array_start>:
    b82c:	000000b5 	.word	0x000000b5
